
/***********************************/
/*http://www.layabox.com  2017/12/12*/
/***********************************/
var Laya=window.Laya=(function(window,document){
	var Laya={
		__internals:[],
		__packages:{},
		__classmap:{'Object':Object,'Function':Function,'Array':Array,'String':String},
		__sysClass:{'object':'Object','array':'Array','string':'String','dictionary':'Dictionary'},
		__propun:{writable: true,enumerable: false,configurable: true},
		__presubstr:String.prototype.substr,
		__substr:function(ofs,sz){return arguments.length==1?Laya.__presubstr.call(this,ofs):Laya.__presubstr.call(this,ofs,sz>0?sz:(this.length+sz));},
		__init:function(_classs){_classs.forEach(function(o){o.__init$ && o.__init$();});},
		__isClass:function(o){return o && (o.__isclass || o==Object || o==String || o==Array);},
		__newvec:function(sz,value){
			var d=[];
			d.length=sz;
			for(var i=0;i<sz;i++) d[i]=value;
			return d;
		},
		__extend:function(d,b){
			for (var p in b){
				if (!b.hasOwnProperty(p)) continue;
				var gs=Object.getOwnPropertyDescriptor(b, p);
				var g = gs.get, s = gs.set; 
				if ( g || s ) {
					if ( g && s)
						Object.defineProperty(d,p,gs);
					else{
						g && Object.defineProperty(d, p, g);
						s && Object.defineProperty(d, p, s);
					}
				}
				else d[p] = b[p];
			}
			function __() { Laya.un(this,'constructor',d); }__.prototype=b.prototype;d.prototype=new __();Laya.un(d.prototype,'__imps',Laya.__copy({},b.prototype.__imps));
		},
		__copy:function(dec,src){
			if(!src) return null;
			dec=dec||{};
			for(var i in src) dec[i]=src[i];
			return dec;
		},
		__package:function(name,o){
			if(Laya.__packages[name]) return;
			Laya.__packages[name]=true;
			var p=window,strs=name.split('.');
			if(strs.length>1){
				for(var i=0,sz=strs.length-1;i<sz;i++){
					var c=p[strs[i]];
					p=c?c:(p[strs[i]]={});
				}
			}
			p[strs[strs.length-1]] || (p[strs[strs.length-1]]=o||{});
		},
		__hasOwnProperty:function(name,o){
			o=o ||this;
		    function classHas(name,o){
				if(Object.hasOwnProperty.call(o.prototype,name)) return true;
				var s=o.prototype.__super;
				return s==null?null:classHas(name,s);
			}
			return (Object.hasOwnProperty.call(o,name)) || classHas(name,o.__class);
		},
		__typeof:function(o,value){
			if(!o || !value) return false;
			if(value===String) return (typeof o==='string');
			if(value===Number) return (typeof o==='number');
			if(value.__interface__) value=value.__interface__;
			else if(typeof value!='string')  return (o instanceof value);
			return (o.__imps && o.__imps[value]) || (o.__class==value);
		},
		__as:function(value,type){
			return (this.__typeof(value,type))?value:null;
		},
        __int:function(value){
            return value?parseInt(value):0;
        },
		interface:function(name,_super){
			Laya.__package(name,{});
			var ins=Laya.__internals;
			var a=ins[name]=ins[name] || {self:name};
			if(_super)
			{
				var supers=_super.split(',');
				a.extend=[];
				for(var i=0;i<supers.length;i++){
					var nm=supers[i];
					ins[nm]=ins[nm] || {self:nm};
					a.extend.push(ins[nm]);
				}
			}
			var o=window,words=name.split('.');
			for(var i=0;i<words.length-1;i++) o=o[words[i]];
			o[words[words.length-1]]={__interface__:name};
		},
		class:function(o,fullName,_super,miniName){
			_super && Laya.__extend(o,_super);
			if(fullName){
				Laya.__package(fullName,o);
				Laya.__classmap[fullName]=o;
				if(fullName.indexOf('.')>0){
					if(fullName.indexOf('laya.')==0){
						var paths=fullName.split('.');
						miniName=miniName || paths[paths.length-1];
						if(Laya[miniName]) console.log("Warning!,this class["+miniName+"] already exist:",Laya[miniName]);
						Laya[miniName]=o;
					}
				}
				else {
					if(fullName=="Main")
						window.Main=o;
					else{
						if(Laya[fullName]){
							console.log("Error!,this class["+fullName+"] already exist:",Laya[fullName]);
						}
						Laya[fullName]=o;
					}
				}
			}
			var un=Laya.un,p=o.prototype;
			un(p,'hasOwnProperty',Laya.__hasOwnProperty);
			un(p,'__class',o);
			un(p,'__super',_super);
			un(p,'__className',fullName);
			un(o,'__super',_super);
			un(o,'__className',fullName);
			un(o,'__isclass',true);
			un(o,'super',function(o){this.__super.call(o);});
		},
		imps:function(dec,src){
			if(!src) return null;
			var d=dec.__imps|| Laya.un(dec,'__imps',{});
			function __(name){
				var c,exs;
				if(! (c=Laya.__internals[name]) ) return;
				d[name]=true;
				if(!(exs=c.extend)) return;
				for(var i=0;i<exs.length;i++){
					__(exs[i].self);
				}
			}
			for(var i in src) __(i);
		},
        superSet:function(clas,o,prop,value){
            var fun = clas.prototype["_$set_"+prop];
            fun && fun.call(o,value);
        },
        superGet:function(clas,o,prop){
            var fun = clas.prototype["_$get_"+prop];
           	return fun?fun.call(o):null;
        },
		getset:function(isStatic,o,name,getfn,setfn){
			if(!isStatic){
				getfn && Laya.un(o,'_$get_'+name,getfn);
				setfn && Laya.un(o,'_$set_'+name,setfn);
			}
			else{
				getfn && (o['_$GET_'+name]=getfn);
				setfn && (o['_$SET_'+name]=setfn);
			}
			if(getfn && setfn) 
				Object.defineProperty(o,name,{get:getfn,set:setfn,enumerable:false,configurable:true});
			else{
				getfn && Object.defineProperty(o,name,{get:getfn,enumerable:false,configurable:true});
				setfn && Object.defineProperty(o,name,{set:setfn,enumerable:false,configurable:true});
			}
		},
		static:function(_class,def){
				for(var i=0,sz=def.length;i<sz;i+=2){
					if(def[i]=='length') 
						_class.length=def[i+1].call(_class);
					else{
						function tmp(){
							var name=def[i];
							var getfn=def[i+1];
							Object.defineProperty(_class,name,{
								get:function(){delete this[name];return this[name]=getfn.call(this);},
								set:function(v){delete this[name];this[name]=v;},enumerable: true,configurable: true});
						}
						tmp();
					}
				}
		},		
		un:function(obj,name,value){
			value || (value=obj[name]);
			Laya.__propun.value=value;
			Object.defineProperty(obj, name, Laya.__propun);
			return value;
		},
		uns:function(obj,names){
			names.forEach(function(o){Laya.un(obj,o)});
		}
	};

    window.console=window.console || ({log:function(){}});
	window.trace=window.console.log;
	Error.prototype.throwError=function(){throw arguments;};
	//String.prototype.substr=Laya.__substr;
	Object.defineProperty(Array.prototype,'fixed',{enumerable: false});

	return Laya;
})(window,document);

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

})(window,document,Laya);


(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;
Laya.interface('laya.runtime.IMarket');
Laya.interface('laya.filters.IFilter');
Laya.interface('laya.display.ILayout');
Laya.interface('laya.resource.IDispose');
Laya.interface('laya.runtime.IPlatform');
Laya.interface('laya.resource.IDestroy');
Laya.interface('laya.runtime.IConchNode');
Laya.interface('laya.filters.IFilterAction');
Laya.interface('laya.runtime.ICPlatformClass');
Laya.interface('laya.resource.ICreateResource');
Laya.interface('laya.runtime.IConchRenderObject');
Laya.interface('laya.runtime.IPlatformClass','laya.runtime.IPlatform');
/**
*@private
*/
//class laya.utils.RunDriver
var RunDriver=(function(){
	function RunDriver(){}
	__class(RunDriver,'laya.utils.RunDriver');
	RunDriver.FILTER_ACTIONS=[];
	RunDriver.pixelRatio=-1;
	RunDriver._charSizeTestDiv=null;
	RunDriver.now=function(){
		return /*__JS__ */Date.now();
	}

	RunDriver.getWindow=function(){
		return /*__JS__ */window;
	}

	RunDriver.getPixelRatio=function(){
		if (RunDriver.pixelRatio < 0){
			var ctx=Browser.context;
			var backingStore=ctx.backingStorePixelRatio || ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
			RunDriver.pixelRatio=(Browser.window.devicePixelRatio || 1)/ backingStore;
			if (RunDriver.pixelRatio < 1)RunDriver.pixelRatio=1;
		}
		return RunDriver.pixelRatio;
	}

	RunDriver.getIncludeStr=function(name){
		return null;
	}

	RunDriver.createShaderCondition=function(conditionScript){
		var fn="(function() {return "+conditionScript+";})";
		return Laya._runScript(fn);
	}

	RunDriver.fontMap=[];
	RunDriver.measureText=function(txt,font){
		var isChinese=RunDriver.hanzi.test(txt);
		if (isChinese && RunDriver.fontMap[font]){
			return RunDriver.fontMap[font];
		};
		var ctx=Browser.context;
		ctx.font=font;
		var r=ctx.measureText(txt);
		if (isChinese)RunDriver.fontMap[font]=r;
		return r;
	}

	RunDriver.getWebGLContext=function(canvas){
	};

	RunDriver.beginFlush=function(){
	};

	RunDriver.endFinish=function(){
	};

	RunDriver.addToAtlas=null;
	RunDriver.flashFlushImage=function(atlasWebGLCanvas){
	};

	RunDriver.drawToCanvas=function(sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
		var canvas=HTMLCanvas.create("2D");
		var context=new RenderContext(canvasWidth,canvasHeight,canvas);
		RenderSprite.renders[_renderType]._fun(sprite,context,offsetX,offsetY);
		return canvas;
	}

	RunDriver.createParticleTemplate2D=null;
	RunDriver.createGLTextur=null;
	RunDriver.createWebGLContext2D=null;
	RunDriver.changeWebGLSize=function(w,h){
	};

	RunDriver.createRenderSprite=function(type,next){
		return new RenderSprite(type,next);
	}

	RunDriver.createFilterAction=function(type){
		return new ColorFilterAction();
	}

	RunDriver.createGraphics=function(){
		return new Graphics();
	}

	RunDriver.clear=function(value){
		Render._context.ctx.clear();
	}

	RunDriver.cancelLoadByUrl=function(url){
	};

	RunDriver.clearAtlas=function(value){
	};

	RunDriver.isAtlas=function(bitmap){
		return false;
	}

	RunDriver.addTextureToAtlas=function(value){
	};

	RunDriver.getTexturePixels=function(value,x,y,width,height){
		return null;
	}

	RunDriver.skinAniSprite=function(){
		return null;
	}

	RunDriver.update3DLoop=function(){
	};

	__static(RunDriver,
	['hanzi',function(){return this.hanzi=new RegExp("^[\u4E00-\u9FA5]$");}
	]);
	return RunDriver;
})()


/**
*<code>Laya</code> 是全局对象的引用入口集。
*Laya类引用了一些常用的全局对象，比如Laya.stage：舞台，Laya.timer：时间管理器，Laya.loader：加载管理器，使用时注意大小写。
*/
//class Laya
var ___Laya=(function(){
	//function Laya(){}
	/**
	*表示是否捕获全局错误并弹出提示。默认为false。
	*适用于移动设备等不方便调试的时候，设置为true后，如有未知错误，可以弹窗抛出详细错误堆栈。
	*/
	__getset(1,Laya,'alertGlobalError',null,function(value){
		var erralert=0;
		if (value){
			Browser.window.onerror=function (msg,url,line,column,detail){
				if (erralert++< 5 && detail)
					alert("出错啦，请把此信息截图给研发商\n"+msg+"\n"+detail.stack || detail);
			}
			}else {
			Browser.window.onerror=null;
		}
	});

	Laya.init=function(width,height,__plugins){
		var plugins=[];for(var i=2,sz=arguments.length;i<sz;i++)plugins.push(arguments[i]);
		if (Laya._isinit)return;
		ArrayBuffer.prototype.slice || (ArrayBuffer.prototype.slice=Laya._arrayBufferSlice);
		Laya._isinit=true;
		Browser.__init__();
		Context.__init__();
		Graphics.__init__();
		Laya.timer=new Timer();
		Laya.scaleTimer=new Timer();
		Laya.loader=new LoaderManager();
		WeakObject.__init__();
		for (var i=0,n=plugins.length;i < n;i++){
			if (plugins[i].enable)plugins[i].enable();
		}
		Font.__init__();
		Style.__init__();
		ResourceManager.__init__();
		CacheManager.beginCheck();
		Laya._currentStage=Laya.stage=new Stage();
		Laya.stage.conchModel && Laya.stage.conchModel.setRootNode();
		Laya._getUrlPath();
		Laya.render=new Render(0,0);
		Laya.stage.size(width,height);
		RenderSprite.__init__();
		KeyBoardManager.__init__();
		MouseManager.instance.__init__(Laya.stage,Render.canvas);
		Input.__init__();
		SoundManager.autoStopMusic=true;
		LocalStorage.__init__();
		return Render.canvas;
	}

	Laya._getUrlPath=function(){
		var location=Browser.window.location;
		var pathName=location.pathname;
		pathName=pathName.charAt(2)==':' ? pathName.substring(1):pathName;
		URL.rootPath=URL.basePath=URL.getPath(location.protocol=="file:" ? pathName :location.protocol+"//"+location.host+location.pathname);
	}

	Laya._arrayBufferSlice=function(start,end){
		var arr=/*__JS__ */this;
		var arrU8List=new Uint8Array(arr,start,end-start);
		var newU8List=new Uint8Array(arrU8List.length);
		newU8List.set(arrU8List);
		return newU8List.buffer;
	}

	Laya._runScript=function(script){
		return Browser.window[Laya._evcode](script);
	}

	Laya.stage=null;
	Laya.timer=null;
	Laya.scaleTimer=null;
	Laya.loader=null;
	Laya.version="1.7.20beta";
	Laya.render=null;
	Laya._currentStage=null;
	Laya._isinit=false;
	Laya.MiniAdpter=/*__JS__ */{init:function(){if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf("MiniGame")>-1)console.error("请先引用小游戏适配库laya.wxmini.js,详细教程：https://ldc.layabox.com/doc/?nav=zh-ts-5-0-0")}};
	__static(Laya,
	['conchMarket',function(){return this.conchMarket=/*__JS__ */window.conch?conchMarket:null;},'PlatformClass',function(){return this.PlatformClass=/*__JS__ */window.PlatformClass;},'_evcode',function(){return this._evcode="e"+String.fromCharCode(100+10+8)+"a"+"l";}
	]);
	return Laya;
})()


/**
*Config 用于配置一些全局参数。如需更改，请在初始化引擎之前设置。
*/
//class Config
var Config=(function(){
	function Config(){}
	__class(Config,'Config');
	Config.WebGLTextCacheCount=500;
	Config.atlasEnable=false;
	Config.showCanvasMark=false;
	Config.animationInterval=50;
	Config.isAntialias=false;
	Config.isAlpha=false;
	Config.premultipliedAlpha=true;
	Config.isStencil=true;
	Config.preserveDrawingBuffer=false;
	return Config;
})()


/**
*<code>EventDispatcher</code> 类是可调度事件的所有类的基类。
*/
//class laya.events.EventDispatcher
var EventDispatcher=(function(){
	var EventHandler;
	function EventDispatcher(){
		/**@private */
		this._events=null;
	}

	__class(EventDispatcher,'laya.events.EventDispatcher');
	var __proto=EventDispatcher.prototype;
	/**
	*检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。
	*@param type 事件的类型。
	*@return 如果指定类型的侦听器已注册，则值为 true；否则，值为 false。
	*/
	__proto.hasListener=function(type){
		var listener=this._events && this._events[type];
		return !!listener;
	}

	/**
	*派发事件。
	*@param type 事件类型。
	*@param data （可选）回调数据。<b>注意：</b>如果是需要传递多个参数 p1,p2,p3,...可以使用数组结构如：[p1,p2,p3,...] ；如果需要回调单个参数 p ，且 p 是一个数组，则需要使用结构如：[p]，其他的单个参数 p ，可以直接传入参数 p。
	*@return 此事件类型是否有侦听者，如果有侦听者则值为 true，否则值为 false。
	*/
	__proto.event=function(type,data){
		if (!this._events || !this._events[type])return false;
		var listeners=this._events[type];
		if (listeners.run){
			if (listeners.once)delete this._events[type];
			data !=null ? listeners.runWith(data):listeners.run();
			}else {
			for (var i=0,n=listeners.length;i < n;i++){
				var listener=listeners[i];
				if (listener){
					(data !=null)? listener.runWith(data):listener.run();
				}
				if (!listener || listener.once){
					listeners.splice(i,1);
					i--;
					n--;
				}
			}
			if (listeners.length===0 && this._events)delete this._events[type];
		}
		return true;
	}

	/**
	*使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知。
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.on=function(type,caller,listener,args){
		return this._createListener(type,caller,listener,args,false);
	}

	/**
	*使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知，此侦听事件响应一次后自动移除。
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.once=function(type,caller,listener,args){
		return this._createListener(type,caller,listener,args,true);
	}

	/**@private */
	__proto._createListener=function(type,caller,listener,args,once,offBefore){
		(offBefore===void 0)&& (offBefore=true);
		offBefore && this.off(type,caller,listener,once);
		var handler=EventHandler.create(caller || this,listener,args,once);
		this._events || (this._events={});
		var events=this._events;
		if (!events[type])events[type]=handler;
		else {
			if (!events[type].run)events[type].push(handler);
			else events[type]=[events[type],handler];
		}
		return this;
	}

	/**
	*从 EventDispatcher 对象中删除侦听器。
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param onceOnly （可选）如果值为 true ,则只移除通过 once 方法添加的侦听器。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.off=function(type,caller,listener,onceOnly){
		(onceOnly===void 0)&& (onceOnly=false);
		if (!this._events || !this._events[type])return this;
		var listeners=this._events[type];
		if (listener !=null){
			if (listeners.run){
				if ((!caller || listeners.caller===caller)&& listeners.method===listener && (!onceOnly || listeners.once)){
					delete this._events[type];
					listeners.recover();
				}
				}else {
				var count=0;
				for (var i=0,n=listeners.length;i < n;i++){
					var item=listeners[i];
					if (!item){
						count++;
						continue ;
					}
					if (item && (!caller || item.caller===caller)&& item.method===listener && (!onceOnly || item.once)){
						count++;
						listeners[i]=null;
						item.recover();
					}
				}
				if (count===n)delete this._events[type];
			}
		}
		return this;
	}

	/**
	*从 EventDispatcher 对象中删除指定事件类型的所有侦听器。
	*@param type （可选）事件类型，如果值为 null，则移除本对象所有类型的侦听器。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.offAll=function(type){
		var events=this._events;
		if (!events)return this;
		if (type){
			this._recoverHandlers(events[type]);
			delete events[type];
			}else {
			for (var name in events){
				this._recoverHandlers(events[name]);
			}
			this._events=null;
		}
		return this;
	}

	__proto._recoverHandlers=function(arr){
		if (!arr)return;
		if (arr.run){
			arr.recover();
			}else {
			for (var i=arr.length-1;i >-1;i--){
				if (arr[i]){
					arr[i].recover();
					arr[i]=null;
				}
			}
		}
	}

	/**
	*检测指定事件类型是否是鼠标事件。
	*@param type 事件的类型。
	*@return 如果是鼠标事件，则值为 true;否则，值为 false。
	*/
	__proto.isMouseEvent=function(type){
		return EventDispatcher.MOUSE_EVENTS[type];
	}

	EventDispatcher.MOUSE_EVENTS={"rightmousedown":true,"rightmouseup":true,"rightclick":true,"mousedown":true,"mouseup":true,"mousemove":true,"mouseover":true,"mouseout":true,"click":true,"doubleclick":true};
	EventDispatcher.__init$=function(){
		Object.defineProperty(laya.events.EventDispatcher.prototype,"_events",{enumerable:false,writable:true});
		/**@private */
		//class EventHandler extends laya.utils.Handler
		EventHandler=(function(_super){
			function EventHandler(caller,method,args,once){
				EventHandler.__super.call(this,caller,method,args,once);
			}
			__class(EventHandler,'',_super);
			var __proto=EventHandler.prototype;
			__proto.recover=function(){
				if (this._id > 0){
					this._id=0;
					EventHandler._pool.push(this.clear());
				}
			}
			EventHandler.create=function(caller,method,args,once){
				(once===void 0)&& (once=true);
				if (EventHandler._pool.length)return EventHandler._pool.pop().setTo(caller,method,args,once);
				return new EventHandler(caller,method,args,once);
			}
			EventHandler._pool=[];
			return EventHandler;
		})(Handler)
	}

	return EventDispatcher;
})()


/**
*<p><code>Handler</code> 是事件处理器类。</p>
*<p>推荐使用 Handler.create()方法从对象池创建，减少对象创建消耗。创建的 Handler 对象不再使用后，可以使用 Handler.recover()将其回收到对象池，回收后不要再使用此对象，否则会导致不可预料的错误。</p>
*<p><b>注意：</b>由于鼠标事件也用本对象池，不正确的回收及调用，可能会影响鼠标事件的执行。</p>
*/
//class laya.utils.Handler
var Handler=(function(){
	function Handler(caller,method,args,once){
		/**执行域(this)。*/
		//this.caller=null;
		/**处理方法。*/
		//this.method=null;
		/**参数。*/
		//this.args=null;
		/**表示是否只执行一次。如果为true，回调后执行recover()进行回收，回收后会被再利用，默认为false 。*/
		this.once=false;
		/**@private */
		this._id=0;
		(once===void 0)&& (once=false);
		this.setTo(caller,method,args,once);
	}

	__class(Handler,'laya.utils.Handler');
	var __proto=Handler.prototype;
	/**
	*设置此对象的指定属性值。
	*@param caller 执行域(this)。
	*@param method 回调方法。
	*@param args 携带的参数。
	*@param once 是否只执行一次，如果为true，执行后执行recover()进行回收。
	*@return 返回 handler 本身。
	*/
	__proto.setTo=function(caller,method,args,once){
		this._id=Handler._gid++;
		this.caller=caller;
		this.method=method;
		this.args=args;
		this.once=once;
		return this;
	}

	/**
	*执行处理器。
	*/
	__proto.run=function(){
		if (this.method==null)return null;
		var id=this._id;
		var result=this.method.apply(this.caller,this.args);
		this._id===id && this.once && this.recover();
		return result;
	}

	/**
	*执行处理器，携带额外数据。
	*@param data 附加的回调数据，可以是单数据或者Array(作为多参)。
	*/
	__proto.runWith=function(data){
		if (this.method==null)return null;
		var id=this._id;
		if (data==null)
			var result=this.method.apply(this.caller,this.args);
		else if (!this.args && !data.unshift)result=this.method.call(this.caller,data);
		else if (this.args)result=this.method.apply(this.caller,this.args.concat(data));
		else result=this.method.apply(this.caller,data);
		this._id===id && this.once && this.recover();
		return result;
	}

	/**
	*清理对象引用。
	*/
	__proto.clear=function(){
		this.caller=null;
		this.method=null;
		this.args=null;
		return this;
	}

	/**
	*清理并回收到 Handler 对象池内。
	*/
	__proto.recover=function(){
		if (this._id > 0){
			this._id=0;
			Handler._pool.push(this.clear());
		}
	}

	Handler.create=function(caller,method,args,once){
		(once===void 0)&& (once=true);
		if (Handler._pool.length)return Handler._pool.pop().setTo(caller,method,args,once);
		return new Handler(caller,method,args,once);
	}

	Handler._pool=[];
	Handler._gid=1;
	return Handler;
})()


/**
*<code>BitmapFont</code> 是位图字体类，用于定义位图字体信息。
*/
//class laya.display.BitmapFont
var BitmapFont=(function(){
	function BitmapFont(){
		this._texture=null;
		this._fontCharDic={};
		this._fontWidthMap={};
		this._complete=null;
		this._path=null;
		this._maxWidth=0;
		this._spaceWidth=10;
		this._padding=null;
		/**当前位图字体字号。*/
		this.fontSize=12;
		/**表示是否根据实际使用的字体大小缩放位图字体大小。*/
		this.autoScaleSize=false;
		/**字符间距（以像素为单位）。*/
		this.letterSpacing=0;
	}

	__class(BitmapFont,'laya.display.BitmapFont');
	var __proto=BitmapFont.prototype;
	/**
	*通过指定位图字体文件路径，加载位图字体文件，加载完成后会自动解析。
	*@param path 位图字体文件的路径。
	*@param complete 加载并解析完成的回调。如果成功返回this,如果失败返回null
	*/
	__proto.loadFont=function(path,complete){
		this._path=path;
		this._complete=complete;
		Laya.loader.load([{url:this._path,type:/*laya.net.Loader.XML*/"xml"},{url:this._path.replace(".fnt",".png"),type:/*laya.net.Loader.IMAGE*/"image"}],Handler.create(this,this.onLoaded));
	}

	/**
	*@private
	*/
	__proto.onLoaded=function(){
		this.parseFont(Loader.getRes(this._path),Loader.getRes(this._path.replace(".fnt",".png")));
		this._complete && this._complete.runWith(this._texture?this:null);
	}

	/**
	*解析字体文件。
	*@param xml 字体文件XML。
	*@param texture 字体的纹理。
	*/
	__proto.parseFont=function(xml,texture){
		if (xml==null || texture==null)return;
		this._texture=texture;
		var tX=0;
		var tScale=1;
		var tInfo=xml.getElementsByTagName("info");
		if (!tInfo[0].getAttributeNode){
			return this.parseFont2(xml,texture);
		}
		this.fontSize=parseInt(tInfo[0].getAttributeNode("size").nodeValue);
		var tPadding=tInfo[0].getAttributeNode("padding").nodeValue;
		var tPaddingArray=tPadding.split(",");
		this._padding=[parseInt(tPaddingArray[0]),parseInt(tPaddingArray[1]),parseInt(tPaddingArray[2]),parseInt(tPaddingArray[3])];
		var chars;
		chars=xml.getElementsByTagName("char");
		var i=0;
		for (i=0;i < chars.length;i++){
			var tAttribute=chars[i];
			var tId=parseInt(tAttribute.getAttributeNode("id").nodeValue);
			var xOffset=parseInt(tAttribute.getAttributeNode("xoffset").nodeValue)/ tScale;
			var yOffset=parseInt(tAttribute.getAttributeNode("yoffset").nodeValue)/ tScale;
			var xAdvance=parseInt(tAttribute.getAttributeNode("xadvance").nodeValue)/ tScale;
			var region=new Rectangle();
			region.x=parseInt(tAttribute.getAttributeNode("x").nodeValue);
			region.y=parseInt(tAttribute.getAttributeNode("y").nodeValue);
			region.width=parseInt(tAttribute.getAttributeNode("width").nodeValue);
			region.height=parseInt(tAttribute.getAttributeNode("height").nodeValue);
			var tTexture=Texture.create(texture,region.x,region.y,region.width,region.height,xOffset,yOffset);
			this._maxWidth=Math.max(this._maxWidth,xAdvance+this.letterSpacing);
			this._fontCharDic[tId]=tTexture;
			this._fontWidthMap[tId]=xAdvance;
		}
	}

	/**
	*@private
	*解析字体文件。
	*@param xml 字体文件XML。
	*@param texture 字体的纹理。
	*/
	__proto.parseFont2=function(xml,texture){
		if (xml==null || texture==null)return;
		this._texture=texture;
		var tX=0;
		var tScale=1;
		var tInfo=xml.getElementsByTagName("info");
		this.fontSize=parseInt(tInfo[0].attributes["size"].nodeValue);
		var tPadding=tInfo[0].attributes["padding"].nodeValue;
		var tPaddingArray=tPadding.split(",");
		this._padding=[parseInt(tPaddingArray[0]),parseInt(tPaddingArray[1]),parseInt(tPaddingArray[2]),parseInt(tPaddingArray[3])];
		var chars=xml.getElementsByTagName("char");
		var i=0;
		for (i=0;i < chars.length;i++){
			var tAttribute=chars[i].attributes;
			var tId=parseInt(tAttribute["id"].nodeValue);
			var xOffset=parseInt(tAttribute["xoffset"].nodeValue)/ tScale;
			var yOffset=parseInt(tAttribute["yoffset"].nodeValue)/ tScale;
			var xAdvance=parseInt(tAttribute["xadvance"].nodeValue)/ tScale;
			var region=new Rectangle();
			region.x=parseInt(tAttribute["x"].nodeValue);
			region.y=parseInt(tAttribute["y"].nodeValue);
			region.width=parseInt(tAttribute["width"].nodeValue);
			region.height=parseInt(tAttribute["height"].nodeValue);
			var tTexture=Texture.create(texture,region.x,region.y,region.width,region.height,xOffset,yOffset);
			this._maxWidth=Math.max(this._maxWidth,xAdvance+this.letterSpacing);
			this._fontCharDic[tId]=tTexture;
			this._fontWidthMap[tId]=xAdvance;
		}
	}

	/**
	*获取指定字符的字体纹理对象。
	*@param char 字符。
	*@return 指定的字体纹理对象。
	*/
	__proto.getCharTexture=function(char){
		return this._fontCharDic[char.charCodeAt(0)];
	}

	/**
	*销毁位图字体，调用Text.unregisterBitmapFont 时，默认会销毁。
	*/
	__proto.destroy=function(){
		if (this._texture){
			for (var p in this._fontCharDic){
				var tTexture=this._fontCharDic[p];
				if (tTexture)tTexture.destroy();
			}
			this._texture.destroy();
			this._fontCharDic=null;
			this._fontWidthMap=null;
			this._texture=null;
		}
	}

	/**
	*设置空格的宽（如果字体库有空格，这里就可以不用设置了）。
	*@param spaceWidth 宽度，单位为像素。
	*/
	__proto.setSpaceWidth=function(spaceWidth){
		this._spaceWidth=spaceWidth;
	}

	/**
	*获取指定字符的宽度。
	*@param char 字符。
	*@return 宽度。
	*/
	__proto.getCharWidth=function(char){
		var code=char.charCodeAt(0);
		if (this._fontWidthMap[code])return this._fontWidthMap[code]+this.letterSpacing;
		if (char==" ")return this._spaceWidth+this.letterSpacing;
		return 0;
	}

	/**
	*获取指定文本内容的宽度。
	*@param text 文本内容。
	*@return 宽度。
	*/
	__proto.getTextWidth=function(text){
		var tWidth=0;
		for (var i=0,n=text.length;i < n;i++){
			tWidth+=this.getCharWidth(text.charAt(i));
		}
		return tWidth;
	}

	/**
	*获取最大字符宽度。
	*/
	__proto.getMaxWidth=function(){
		return this._maxWidth;
	}

	/**
	*获取最大字符高度。
	*/
	__proto.getMaxHeight=function(){
		return this.fontSize;
	}

	/**
	*@private
	*将指定的文本绘制到指定的显示对象上。
	*/
	__proto.drawText=function(text,sprite,drawX,drawY,align,width){
		var tWidth=this.getTextWidth(text);
		var tTexture;
		var dx=0;
		align==="center" && (dx=(width-tWidth)/ 2);
		align==="right" && (dx=(width-tWidth));
		var tX=0;
		for (var i=0,n=text.length;i < n;i++){
			tTexture=this.getCharTexture(text.charAt(i));
			if (tTexture){
				sprite.graphics.drawTexture(tTexture,drawX+tX+dx,drawY);
				tX+=this.getCharWidth(text.charAt(i));
			}
		}
	}

	return BitmapFont;
})()


/**
*@private
*<code>Style</code> 类是元素样式定义类。
*/
//class laya.display.css.Style
var Style=(function(){
	function Style(){
		/**透明度。*/
		this.alpha=1;
		/**表示是否显示。*/
		this.visible=true;
		/**表示滚动区域。*/
		this.scrollRect=null;
		/**混合模式。*/
		this.blendMode=null;
		/**@private */
		this._type=0;
		this._tf=Style._TF_EMPTY;
	}

	__class(Style,'laya.display.css.Style');
	var __proto=Style.prototype;
	__proto.getTransform=function(){
		return this._tf;
	}

	__proto.setTransform=function(value){
		this._tf=value==='none' || !value ? Style._TF_EMPTY :value;
	}

	__proto.setTranslateX=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.translateX=value;
	}

	__proto.setTranslateY=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.translateY=value;
	}

	__proto.setScaleX=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleX=value;
	}

	__proto.setScale=function(x,y){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleX=x;
		this._tf.scaleY=y;
	}

	__proto.setScaleY=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleY=value;
	}

	__proto.setRotate=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.rotate=value;
	}

	__proto.setSkewX=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.skewX=value;
	}

	__proto.setSkewY=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.skewY=value;
	}

	/**销毁此对象。*/
	__proto.destroy=function(){
		this.scrollRect=null;
	}

	/**@private */
	__proto.render=function(sprite,context,x,y){}
	/**@private */
	__proto.getCSSStyle=function(){
		return CSSStyle.EMPTY;
	}

	/**@private */
	__proto._enableLayout=function(){
		return false;
	}

	/**X 轴缩放值。*/
	__getset(0,__proto,'scaleX',function(){
		return this._tf.scaleX;
		},function(value){
		this.setScaleX(value);
	});

	/**元素应用的 2D 或 3D 转换的值。该属性允许我们对元素进行旋转、缩放、移动或倾斜。*/
	__getset(0,__proto,'transform',function(){
		return this.getTransform();
		},function(value){
		this.setTransform(value);
	});

	/**定义转换，只是用 X 轴的值。*/
	__getset(0,__proto,'translateX',function(){
		return this._tf.translateX;
		},function(value){
		this.setTranslateX(value);
	});

	/**定义转换，只是用 Y 轴的值。*/
	__getset(0,__proto,'translateY',function(){
		return this._tf.translateY;
		},function(value){
		this.setTranslateY(value);
	});

	/**Y 轴缩放值。*/
	__getset(0,__proto,'scaleY',function(){
		return this._tf.scaleY;
		},function(value){
		this.setScaleY(value);
	});

	/**表示元素是否显示为块级元素。*/
	__getset(0,__proto,'block',function(){
		return (this._type & 0x1)!=0;
	});

	/**定义沿着 Y 轴的 2D 倾斜转换。*/
	__getset(0,__proto,'skewY',function(){
		return this._tf.skewY;
		},function(value){
		this.setSkewY(value);
	});

	/**定义旋转角度。*/
	__getset(0,__proto,'rotate',function(){
		return this._tf.rotate;
		},function(value){
		this.setRotate(value);
	});

	/**定义沿着 X 轴的 2D 倾斜转换。*/
	__getset(0,__proto,'skewX',function(){
		return this._tf.skewX;
		},function(value){
		this.setSkewX(value);
	});

	/**表示元素的左内边距。*/
	__getset(0,__proto,'paddingLeft',function(){
		return 0;
	});

	/**表示元素的上内边距。*/
	__getset(0,__proto,'paddingTop',function(){
		return 0;
	});

	/**是否为绝对定位。*/
	__getset(0,__proto,'absolute',function(){
		return true;
	});

	Style.__init__=function(){
		Style._TF_EMPTY=new TransformInfo();
		Style.EMPTY=new Style();
	}

	Style.EMPTY=null;
	Style._TF_EMPTY=null;
	return Style;
})()


/**
*@private
*<code>Font</code> 类是字体显示定义类。
*/
//class laya.display.css.Font
var Font=(function(){
	function Font(src){
		this._type=0;
		this._weight=0;
		this._decoration=null;
		this._text=null;
		/**
		*首行缩进 （以像素为单位）。
		*/
		this.indent=0;
		this._color=Color.create(Font.defaultColor);
		this.family=Font.defaultFamily;
		this.stroke=Font._STROKE;
		this.size=Font.defaultSize;
		src && src!==Font.EMPTY && src.copyTo(this);
	}

	__class(Font,'laya.display.css.Font');
	var __proto=Font.prototype;
	/**
	*字体样式字符串。
	*/
	__proto.set=function(value){
		this._text=null;
		var strs=value.split(' ');
		for (var i=0,n=strs.length;i < n;i++){
			var str=strs[i];
			switch (str){
				case 'italic':
					this.italic=true;
					continue ;
				case 'bold':
					this.bold=true;
					continue ;
				}
			if (str.indexOf('px')> 0){
				this.size=parseInt(str);
				this.family=strs[i+1];
				i++;
				continue ;
			}
		}
	}

	/**
	*返回字体样式字符串。
	*@return 字体样式字符串。
	*/
	__proto.toString=function(){
		this._text=""
		this.italic && (this._text+="italic ");
		this.bold && (this._text+="bold ");
		return this._text+=this.size+"px "+this.family;
	}

	/**
	*将当前的属性值复制到传入的 <code>Font</code> 对象。
	*@param dec 一个 Font 对象。
	*/
	__proto.copyTo=function(dec){
		dec._type=this._type;
		dec._text=this._text;
		dec._weight=this._weight;
		dec._color=this._color;
		dec.family=this.family;
		dec.stroke=this.stroke !=Font._STROKE ? this.stroke.slice():Font._STROKE;
		dec.indent=this.indent;
		dec.size=this.size;
	}

	/**
	*表示是否为密码格式。
	*/
	__getset(0,__proto,'password',function(){
		return (this._type & 0x400)!==0;
		},function(value){
		value ? (this._type |=0x400):(this._type &=~0x400);
	});

	/**
	*表示颜色字符串。
	*/
	__getset(0,__proto,'color',function(){
		return this._color.strColor;
		},function(value){
		this._color=Color.create(value);
	});

	/**
	*表示是否为斜体。
	*/
	__getset(0,__proto,'italic',function(){
		return (this._type & 0x200)!==0;
		},function(value){
		value ? (this._type |=0x200):(this._type &=~0x200);
	});

	/**
	*表示是否为粗体。
	*/
	__getset(0,__proto,'bold',function(){
		return (this._type & 0x800)!==0;
		},function(value){
		value ? (this._type |=0x800):(this._type &=~0x800);
	});

	/**
	*文本的粗细。
	*/
	__getset(0,__proto,'weight',function(){
		return ""+this._weight;
		},function(value){
		var weight=0;
		switch (value){
			case 'normal':
				break ;
			case 'bold':
				this.bold=true;
				weight=700;
				break ;
			case 'bolder':
				weight=800;
				break ;
			case 'lighter':
				weight=100;
				break ;
			default :
				weight=parseInt(value);
			}
		this._weight=weight;
		this._text=null;
	});

	/**
	*规定添加到文本的修饰。
	*/
	__getset(0,__proto,'decoration',function(){
		return this._decoration ? this._decoration.value :null;
		},function(value){
		var strs=value.split(' ');
		this._decoration || (this._decoration={});
		switch (strs[0]){
			case '_':
				this._decoration.type='underline'
				break ;
			case '-':
				this._decoration.type='line-through'
				break ;
			case 'overline':
				this._decoration.type='overline'
				break ;
			default :
				this._decoration.type=strs[0];
			}
		strs[1] && (this._decoration.color=Color.create(strs));
		this._decoration.value=value;
	});

	Font.__init__=function(){
		Font.EMPTY=new Font(null);
	}

	Font.EMPTY=null;
	Font.defaultColor="#000000";
	Font.defaultSize=12;
	Font.defaultFamily="Arial";
	Font.defaultFont="12px Arial";
	Font._STROKE=[0,"#000000"];
	Font._ITALIC=0x200;
	Font._PASSWORD=0x400;
	Font._BOLD=0x800;
	return Font;
})()


/**
*@private
*/
//class laya.display.css.TransformInfo
var TransformInfo=(function(){
	function TransformInfo(){
		this.translateX=0;
		this.translateY=0;
		this.scaleX=1;
		this.scaleY=1;
		this.rotate=0;
		this.skewX=0;
		this.skewY=0;
	}

	__class(TransformInfo,'laya.display.css.TransformInfo');
	return TransformInfo;
})()


/**
*<code>Graphics</code> 类用于创建绘图显示对象。Graphics可以同时绘制多个位图或者矢量图，还可以结合save，restore，transform，scale，rotate，translate，alpha等指令对绘图效果进行变化。
*Graphics以命令流方式存储，可以通过cmds属性访问所有命令流。Graphics是比Sprite更轻量级的对象，合理使用能提高应用性能(比如把大量的节点绘图改为一个节点的Graphics命令集合，能减少大量节点创建消耗)。
*@see laya.display.Sprite#graphics
*/
//class laya.display.Graphics
var Graphics=(function(){
	function Graphics(){
		/**@private */
		//this._sp=null;
		/**@private */
		this._one=null;
		/**@private */
		this._cmds=null;
		/**@private */
		//this._vectorgraphArray=null;
		/**@private */
		//this._graphicBounds=null;
		this._render=this._renderEmpty;
		if (Render.isConchNode){
			var _this_=this;
			_this_._nativeObj=new (window)._conchGraphics();
			_this_.id=_this_._nativeObj.conchID;
		}
	}

	__class(Graphics,'laya.display.Graphics');
	var __proto=Graphics.prototype;
	/**
	*<p>销毁此对象。</p>
	*/
	__proto.destroy=function(){
		this.clear();
		if (this._graphicBounds)this._graphicBounds.destroy();
		this._graphicBounds=null;
		this._vectorgraphArray=null;
		this._sp && (this._sp._renderType=0);
		this._sp=null;
	}

	/**
	*<p>清空绘制命令。</p>
	*@param recoverCmds 是否回收绘图指令
	*/
	__proto.clear=function(recoverCmds){
		(recoverCmds===void 0)&& (recoverCmds=false);
		var i=0,len=0;
		if (recoverCmds){
			var tCmd=this._one;
			if (this._cmds){
				len=this._cmds.length;
				for (i=0;i < len;i++){
					tCmd=this._cmds[i];
					if (tCmd && (tCmd.callee===Render._context._drawTexture || tCmd.callee===Render._context._drawTextureWithTransform)){
						tCmd[0]=null;
						Graphics._cache.push(tCmd);
					}
				}
				this._cmds.length=0;
				}else if (tCmd){
				if (tCmd && (tCmd.callee===Render._context._drawTexture || tCmd.callee===Render._context._drawTextureWithTransform)){
					tCmd[0]=null;
					Graphics._cache.push(tCmd);
				}
			}
			}else {
			this._cmds=null;
		}
		this._one=null;
		this._render=this._renderEmpty;
		this._sp && (this._sp._renderType &=~ /*laya.renders.RenderSprite.IMAGE*/0x01 & ~ /*laya.renders.RenderSprite.GRAPHICS*/0x200);
		this._repaint();
		if (this._vectorgraphArray){
			for (i=0,len=this._vectorgraphArray.length;i < len;i++){
				VectorGraphManager.getInstance().deleteShape(this._vectorgraphArray[i]);
			}
			this._vectorgraphArray.length=0;
		}
	}

	/**@private */
	__proto._clearBoundsCache=function(){
		if (this._graphicBounds)this._graphicBounds.reset();
	}

	/**@private */
	__proto._initGraphicBounds=function(){
		if (!this._graphicBounds){
			this._graphicBounds=new GraphicsBounds();
			this._graphicBounds._graphics=this;
		}
	}

	/**
	*@private
	*重绘此对象。
	*/
	__proto._repaint=function(){
		this._clearBoundsCache();
		this._sp && this._sp.repaint();
	}

	/**@private */
	__proto._isOnlyOne=function(){
		return !this._cmds || this._cmds.length===0;
	}

	/**
	*获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
	*@param realSize （可选）使用图片的真实大小，默认为false
	*@return 位置与宽高组成的 一个 Rectangle 对象。
	*/
	__proto.getBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		this._initGraphicBounds();
		return this._graphicBounds.getBounds(realSize);
	}

	/**
	*@private
	*@param realSize （可选）使用图片的真实大小，默认为false
	*获取端点列表。
	*/
	__proto.getBoundPoints=function(realSize){
		(realSize===void 0)&& (realSize=false);
		this._initGraphicBounds();
		return this._graphicBounds.getBoundPoints(realSize);
	}

	__proto._addCmd=function(a){
		this._cmds=this._cmds || [];
		a.callee=a.shift();
		this._cmds.push(a);
	}

	__proto.setFilters=function(fs){
		this._saveToCmd(Render._context._setFilters,fs);
	}

	/**
	*绘制纹理。
	*@param tex 纹理。
	*@param x （可选）X轴偏移量。
	*@param y （可选）Y轴偏移量。
	*@param width （可选）宽度。
	*@param height （可选）高度。
	*@param m （可选）矩阵信息。
	*@param alpha （可选）透明度。
	*/
	__proto.drawTexture=function(tex,x,y,width,height,m,alpha){
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		(alpha===void 0)&& (alpha=1);
		if (!tex || alpha < 0.01)return null;
		if (!width)width=tex.sourceWidth;
		if (!height)height=tex.sourceHeight;
		alpha=alpha < 0 ? 0 :(alpha > 1 ? 1 :alpha);
		var offset=(!Render.isWebGL && (Browser.onFirefox || Browser.onEdge||Browser.onIE||Browser.onSafari))? 0.5 :0;
		var wRate=width / tex.sourceWidth;
		var hRate=height / tex.sourceHeight;
		width=tex.width *wRate;
		height=tex.height *hRate;
		if (tex.loaded && (width <=0 || height <=0))return null;
		x+=tex.offsetX *wRate;
		y+=tex.offsetY *hRate;
		this._sp && (this._sp._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200);
		var args;
		x-=offset;
		y-=offset;
		width+=2 *offset;
		height+=2 *offset;
		if (Graphics._cache.length){
			args=Graphics._cache.pop();
			args[0]=tex;
			args[1]=x;
			args[2]=y;
			args[3]=width;
			args[4]=height;
			args[5]=m;
			args[6]=alpha;
			}else {
			args=[tex,x,y,width,height,m,alpha];
		}
		args.callee=(m || alpha !=1)? Render._context._drawTextureWithTransform :Render._context._drawTexture;
		if (this._one==null && !m && alpha==1){
			this._one=args;
			this._render=this._renderOneImg;
			}else {
			this._saveToCmd(args.callee,args);
		}
		if (!tex.loaded){
			tex.once(/*laya.events.Event.LOADED*/"loaded",this,this._textureLoaded,[tex,args]);
		}
		this._repaint();
		return args;
	}

	/**
	*@private 清理贴图并替换为最新的
	*@param tex
	*/
	__proto.cleanByTexture=function(tex,x,y,width,height){
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		if (!tex)return this.clear();
		if (this._one && this._render===this._renderOneImg){
			if (!width)width=tex.sourceWidth;
			if (!height)height=tex.sourceHeight;
			var wRate=width / tex.sourceWidth;
			var hRate=height / tex.sourceHeight;
			width=tex.width *wRate;
			height=tex.height *hRate;
			x+=tex.offsetX *wRate;
			y+=tex.offsetY *hRate;
			this._one[0]=tex;
			this._one[1]=x;
			this._one[2]=y;
			this._one[3]=width;
			this._one[4]=height;
			this._repaint();
			}else {
			this.clear();
			tex && this.drawTexture(tex,x,y,width,height);
		}
	}

	/**
	*批量绘制同样纹理。
	*@param tex 纹理。
	*@param pos 绘制坐标。
	*/
	__proto.drawTextures=function(tex,pos){
		if (!tex)return;
		this._saveToCmd(Render._context._drawTextures,[tex,pos]);
	}

	/**
	*用texture填充。
	*@param tex 纹理。
	*@param x X轴偏移量。
	*@param y Y轴偏移量。
	*@param width （可选）宽度。
	*@param height （可选）高度。
	*@param type （可选）填充类型 repeat|repeat-x|repeat-y|no-repeat
	*@param offset （可选）贴图纹理偏移
	*/
	__proto.fillTexture=function(tex,x,y,width,height,type,offset){
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		(type===void 0)&& (type="repeat");
		if (!tex)return;
		var args=[tex,x,y,width,height,type,offset || Point.EMPTY,{}];
		if (!tex.loaded){
			tex.once(/*laya.events.Event.LOADED*/"loaded",this,this._textureLoaded,[tex,args]);
		}
		this._saveToCmd(Render._context._fillTexture,args);
	}

	__proto._textureLoaded=function(tex,param){
		param[3]=param[3] || tex.width;
		param[4]=param[4] || tex.height;
		this._repaint();
	}

	/**
	*填充一个圆形。这是一个临时函数，以后会删除，建议用户自己实现。
	*@param x
	*@param y
	*@param tex
	*@param cx 圆心位置。
	*@param cy
	*@param radius
	*@param segNum 分段数，越大越平滑。
	*/
	__proto.fillCircle=function(x,y,tex,cx,cy,radius,segNum){
		tex.bitmap.enableMerageInAtlas=false;
		var verts=new Float32Array((segNum+1)*2);
		var uvs=new Float32Array((segNum+1)*2);
		var indices=new Uint16Array(segNum*3);
		var dang=2 *Math.PI / segNum;
		var cang=0;
		verts[0]=cx;
		verts[1]=cy;
		uvs[0]=cx / tex.width;
		uvs[1]=cy / tex.height;
		var idx=2;
		for (var i=0;i < segNum;i++){
			var px=radius *Math.cos(cang)+cx;
			var py=radius *Math.sin(cang)+cy;
			verts[idx]=px;
			verts[idx+1]=py;
			uvs[idx]=px / tex.width;
			uvs[idx+1]=py / tex.height;
			cang+=dang;
			idx+=2;
		}
		idx=0;
		for (i=0;i < segNum;i++){
			indices[idx++]=0;
			indices[idx++]=i+1;
			indices[idx++]=(i+2 >=segNum+1)?1:(i+2);
		}
		this.drawTriangles(tex,x,y,verts,uvs,indices);
	}

	/**
	*绘制一组三角形
	*@param texture 纹理。
	*@param x X轴偏移量。
	*@param y Y轴偏移量。
	*@param vertices 顶点数组。
	*@param indices 顶点索引。
	*@param uvData UV数据。
	*@param matrix 缩放矩阵。
	*@param alpha alpha
	*@param color 颜色变换
	*@param blendMode blend模式
	*/
	__proto.drawTriangles=function(texture,x,y,vertices,uvs,indices,matrix,alpha,color,blendMode){
		(alpha===void 0)&& (alpha=1);
		this._saveToCmd(Render._context.drawTriangles,[texture,x,y,vertices,uvs,indices,matrix,alpha,color,blendMode]);
	}

	/**
	*@private
	*保存到命令流。
	*/
	__proto._saveToCmd=function(fun,args){
		this._sp && (this._sp._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200);
		if (this._one==null){
			this._one=args;
			this._render=this._renderOne;
			}else {
			this._sp && (this._sp._renderType &=~ /*laya.renders.RenderSprite.IMAGE*/0x01);
			this._render=this._renderAll;
			(this._cmds || (this._cmds=[])).length===0 && this._cmds.push(this._one);
			this._cmds.push(args);
		}
		args.callee=fun;
		this._repaint();
		return args;
	}

	/**
	*设置剪裁区域，超出剪裁区域的坐标不显示。
	*@param x X 轴偏移量。
	*@param y Y 轴偏移量。
	*@param width 宽度。
	*@param height 高度。
	*/
	__proto.clipRect=function(x,y,width,height){
		this._saveToCmd(Render._context._clipRect,[x,y,width,height]);
	}

	/**
	*在画布上绘制文本。
	*@param text 在画布上输出的文本。
	*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
	*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
	*@param font 定义字号和字体，比如"20px Arial"。
	*@param color 定义文本颜色，比如"#ff0000"。
	*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
	*/
	__proto.fillText=function(text,x,y,font,color,textAlign,underLine){
		(underLine===void 0)&& (underLine=0);
		this._saveToCmd(Render._context._fillText,[text,x,y,font || Font.defaultFont,color,textAlign]);
	}

	/**
	*在画布上绘制“被填充且镶边的”文本。
	*@param text 在画布上输出的文本。
	*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
	*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
	*@param font 定义字体和字号，比如"20px Arial"。
	*@param fillColor 定义文本颜色，比如"#ff0000"。
	*@param borderColor 定义镶边文本颜色。
	*@param lineWidth 镶边线条宽度。
	*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
	*/
	__proto.fillBorderText=function(text,x,y,font,fillColor,borderColor,lineWidth,textAlign){
		this._saveToCmd(Render._context._fillBorderText,[text,x,y,font || Font.defaultFont,fillColor,borderColor,lineWidth,textAlign]);
	}

	/**
	*在画布上绘制文本（没有填色）。文本的默认颜色是黑色。
	*@param text 在画布上输出的文本。
	*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
	*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
	*@param font 定义字体和字号，比如"20px Arial"。
	*@param color 定义文本颜色，比如"#ff0000"。
	*@param lineWidth 线条宽度。
	*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
	*/
	__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
		this._saveToCmd(Render._context._strokeText,[text,x,y,font || Font.defaultFont,color,lineWidth,textAlign]);
	}

	/**
	*设置透明度。
	*@param value 透明度。
	*/
	__proto.alpha=function(value){
		value=value < 0 ? 0 :(value > 1 ? 1 :value);
		this._saveToCmd(Render._context._alpha,[value]);
	}

	/**
	*设置当前透明度。
	*@param value 透明度。
	*/
	__proto.setAlpha=function(value){
		value=value < 0 ? 0 :(value > 1 ? 1 :value);
		this._saveToCmd(Render._context._setAlpha,[value]);
	}

	/**
	*替换绘图的当前转换矩阵。
	*@param mat 矩阵。
	*@param pivotX （可选）水平方向轴心点坐标。
	*@param pivotY （可选）垂直方向轴心点坐标。
	*/
	__proto.transform=function(matrix,pivotX,pivotY){
		(pivotX===void 0)&& (pivotX=0);
		(pivotY===void 0)&& (pivotY=0);
		this._saveToCmd(Render._context._transform,[matrix,pivotX,pivotY]);
	}

	/**
	*旋转当前绘图。(推荐使用transform，性能更高)
	*@param angle 旋转角度，以弧度计。
	*@param pivotX （可选）水平方向轴心点坐标。
	*@param pivotY （可选）垂直方向轴心点坐标。
	*/
	__proto.rotate=function(angle,pivotX,pivotY){
		(pivotX===void 0)&& (pivotX=0);
		(pivotY===void 0)&& (pivotY=0);
		this._saveToCmd(Render._context._rotate,[angle,pivotX,pivotY]);
	}

	/**
	*缩放当前绘图至更大或更小。(推荐使用transform，性能更高)
	*@param scaleX 水平方向缩放值。
	*@param scaleY 垂直方向缩放值。
	*@param pivotX （可选）水平方向轴心点坐标。
	*@param pivotY （可选）垂直方向轴心点坐标。
	*/
	__proto.scale=function(scaleX,scaleY,pivotX,pivotY){
		(pivotX===void 0)&& (pivotX=0);
		(pivotY===void 0)&& (pivotY=0);
		this._saveToCmd(Render._context._scale,[scaleX,scaleY,pivotX,pivotY]);
	}

	/**
	*重新映射画布上的 (0,0)位置。
	*@param x 添加到水平坐标（x）上的值。
	*@param y 添加到垂直坐标（y）上的值。
	*/
	__proto.translate=function(x,y){
		this._saveToCmd(Render._context._translate,[x,y]);
	}

	/**
	*保存当前环境的状态。
	*/
	__proto.save=function(){
		this._saveToCmd(Render._context._save,[]);
	}

	/**
	*返回之前保存过的路径状态和属性。
	*/
	__proto.restore=function(){
		this._saveToCmd(Render._context._restore,[]);
	}

	/**
	*@private
	*替换文本内容。
	*@param text 文本内容。
	*@return 替换成功则值为true，否则值为flase。
	*/
	__proto.replaceText=function(text){
		this._repaint();
		var cmds=this._cmds;
		if (!cmds){
			if (this._one && this._isTextCmd(this._one.callee)){
				if (this._one[0].toUpperCase)this._one[0]=text;
				else this._one[0].setText(text);
				return true;
			}
			}else {
			for (var i=cmds.length-1;i >-1;i--){
				if (this._isTextCmd(cmds[i].callee)){
					if (cmds[i][0].toUpperCase)cmds[i][0]=text;
					else cmds[i][0].setText(text);
					return true;
				}
			}
		}
		return false;
	}

	/**@private */
	__proto._isTextCmd=function(fun){
		return fun===Render._context._fillText || fun===Render._context._fillBorderText || fun===Render._context._strokeText;
	}

	/**
	*@private
	*替换文本颜色。
	*@param color 颜色。
	*/
	__proto.replaceTextColor=function(color){
		this._repaint();
		var cmds=this._cmds;
		if (!cmds){
			if (this._one && this._isTextCmd(this._one.callee)){
				this._one[4]=color;
				if (!this._one[0].toUpperCase)this._one[0].changed=true;
			}
			}else {
			for (var i=cmds.length-1;i >-1;i--){
				if (this._isTextCmd(cmds[i].callee)){
					cmds[i][4]=color;
					if (!cmds[i][0].toUpperCase)cmds[i][0].changed=true;
				}
			}
		}
	}

	/**
	*加载并显示一个图片。
	*@param url 图片地址。
	*@param x （可选）显示图片的x位置。
	*@param y （可选）显示图片的y位置。
	*@param width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
	*@param height （可选）显示图片的高度，设置为0表示使用图片默认高度。
	*@param complete （可选）加载完成回调。
	*/
	__proto.loadImage=function(url,x,y,width,height,complete){
		var _$this=this;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		var tex=Loader.getRes(url);
		if (tex)onloaded(tex);
		else Laya.loader.load(url,Handler.create(null,onloaded),null,/*laya.net.Loader.IMAGE*/"image");
		function onloaded (tex){
			if (tex){
				_$this.drawTexture(tex,x,y,width,height);
				if (complete !=null)complete.call(_$this._sp,tex);
			}
		}
	}

	/**
	*@private
	*/
	__proto._renderEmpty=function(sprite,context,x,y){}
	/**
	*@private
	*/
	__proto._renderAll=function(sprite,context,x,y){
		var cmds=this._cmds,cmd;
		for (var i=0,n=cmds.length;i < n;i++){
			(cmd=cmds[i]).callee.call(context,x,y,cmd);
		}
	}

	/**
	*@private
	*/
	__proto._renderOne=function(sprite,context,x,y){
		this._one.callee.call(context,x,y,this._one);
	}

	/**
	*@private
	*/
	__proto._renderOneImg=function(sprite,context,x,y){
		this._one.callee.call(context,x,y,this._one);
		if (sprite._renderType!==2305){
			sprite._renderType |=/*laya.renders.RenderSprite.IMAGE*/0x01;
		}
	}

	/**
	*绘制一条线。
	*@param fromX X轴开始位置。
	*@param fromY Y轴开始位置。
	*@param toX X轴结束位置。
	*@param toY Y轴结束位置。
	*@param lineColor 颜色。
	*@param lineWidth （可选）线条宽度。
	*/
	__proto.drawLine=function(fromX,fromY,toX,toY,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var tId=0;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var offset=lineWidth % 2===0 ? 0 :0.5;
		var arr=[fromX+offset,fromY+offset,toX+offset,toY+offset,lineColor,lineWidth,tId];
		this._saveToCmd(Render._context._drawLine,arr);
	}

	/**
	*绘制一系列线段。
	*@param x 开始绘制的X轴位置。
	*@param y 开始绘制的Y轴位置。
	*@param points 线段的点集合。格式:[x1,y1,x2,y2,x3,y3...]。
	*@param lineColor 线段颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）线段宽度。
	*/
	__proto.drawLines=function(x,y,points,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var tId=0;
		if (!points || points.length < 4)return;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var offset=lineWidth % 2===0 ? 0 :0.5;
		var arr=[x+offset,y+offset,points,lineColor,lineWidth,tId];
		this._saveToCmd(Render._context._drawLines,arr);
	}

	/**
	*绘制一系列曲线。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param points 线段的点集合，格式[startx,starty,ctrx,ctry,startx,starty...]。
	*@param lineColor 线段颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）线段宽度。
	*/
	__proto.drawCurves=function(x,y,points,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var arr=[x,y,points,lineColor,lineWidth];
		this._saveToCmd(Render._context._drawCurves,arr);
	}

	/**
	*绘制矩形。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param width 矩形宽度。
	*@param height 矩形高度。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawRect=function(x,y,width,height,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var offset=lineColor ? lineWidth / 2 :0;
		var lineOffset=lineColor ? lineWidth :0;
		var arr=[x+offset,y+offset,width-lineOffset,height-lineOffset,fillColor,lineColor,lineWidth];
		this._saveToCmd(Render._context._drawRect,arr);
	}

	/**
	*绘制圆形。
	*@param x 圆点X 轴位置。
	*@param y 圆点Y 轴位置。
	*@param radius 半径。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawCircle=function(x,y,radius,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var offset=lineColor ? lineWidth / 2 :0;
		var tId=0;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var arr=[x,y,radius-offset,fillColor,lineColor,lineWidth,tId];
		this._saveToCmd(Render._context._drawCircle,arr);
	}

	/**
	*绘制扇形。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param radius 扇形半径。
	*@param startAngle 开始角度。
	*@param endAngle 结束角度。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawPie=function(x,y,radius,startAngle,endAngle,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var offset=lineColor ? lineWidth / 2 :0;
		var lineOffset=lineColor ? lineWidth :0;
		var tId=0;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var arr=[x+offset,y+offset,radius-lineOffset,startAngle,endAngle,fillColor,lineColor,lineWidth,tId];
		arr[3]=Utils.toRadian(startAngle);
		arr[4]=Utils.toRadian(endAngle);
		this._saveToCmd(Render._context._drawPie,arr);
	}

	/**
	*绘制多边形。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param points 多边形的点集合。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawPoly=function(x,y,points,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var tId=0;
		var tIsConvexPolygon=false;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
			if (points.length > 6){
				tIsConvexPolygon=false;
				}else {
				tIsConvexPolygon=true;
			}
		};
		var offset=lineColor ? (lineWidth % 2===0 ? 0 :0.5):0;
		var arr=[x+offset,y+offset,points,fillColor,lineColor,lineWidth,tId,tIsConvexPolygon];
		this._saveToCmd(Render._context._drawPoly,arr);
	}

	/**
	*绘制路径。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param paths 路径集合，路径支持以下格式：[["moveTo",x,y],["lineTo",x,y,x,y,x,y],["arcTo",x1,y1,x2,y2,r],["closePath"]]。
	*@param brush （可选）刷子定义，支持以下设置{fillStyle}。
	*@param pen （可选）画笔定义，支持以下设置{strokeStyle,lineWidth,lineJoin,lineCap,miterLimit}。
	*/
	__proto.drawPath=function(x,y,paths,brush,pen){
		var arr=[x,y,paths,brush,pen];
		this._saveToCmd(Render._context._drawPath,arr);
	}

	/**
	*@private
	*命令流。存储了所有绘制命令。
	*/
	__getset(0,__proto,'cmds',function(){
		return this._cmds;
		},function(value){
		this._sp && (this._sp._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200);
		this._cmds=value;
		this._render=this._renderAll;
		this._repaint();
	});

	Graphics.__init__=function(){
		if (Render.isConchNode){
			var from=laya.display.Graphics.prototype;
			var to=Browser.window.ConchGraphics.prototype;
			var list=["clear","destroy","alpha","rotate","transform","scale","translate","save","restore","clipRect","blendMode","fillText","fillBorderText","_fands","drawRect","drawCircle","drawPie","drawPoly","drawPath","drawImageM","drawLine","drawLines","_drawPs","drawCurves","replaceText","replaceTextColor","_fillImage","fillTexture","setSkinMesh","drawParticle","drawImageS"];
			for (var i=0,len=list.length;i <=len;i++){
				var temp=list[i];
				from[temp]=to[temp];
			}
			from._saveToCmd=null;
			if (to.drawImageS){
				from.drawTextures=function (tex,pos){
					if (!tex)return;
					if (!(tex.loaded && tex.bitmap && tex.source)){
						return;
					};
					var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
					this.drawImageS(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,tex.offsetX,tex.offsetY,tex.width,tex.height,pos);
				}
			}
			from.drawTexture=function (tex,x,y,width,height,m,alpha){
				(x===void 0)&& (x=0);
				(y===void 0)&& (y=0);
				(width===void 0)&& (width=0);
				(height===void 0)&& (height=0);
				(alpha===void 0)&& (alpha=1);
				if (!tex)return;
				if (!tex.loaded){
					tex.once(/*laya.events.Event.LOADED*/"loaded",this,function(){
						this.drawTexture(tex,x,y,width,height,m);
					});
					return;
				}
				if (!(tex.loaded && tex.bitmap && tex.source)){
					return;
				}
				if (!width)width=tex.sourceWidth;
				if (!height)height=tex.sourceHeight;
				alpha=alpha < 0 ? 0 :(alpha > 1 ? 1 :alpha);
				width=width-tex.sourceWidth+tex.width;
				height=height-tex.sourceHeight+tex.height;
				if (width <=0 || height <=0)return;
				x+=tex.offsetX;
				y+=tex.offsetY;
				var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
				if (uv[4] < uv[0] && uv[5] < uv[1]){
					this.drawImageM(tex.bitmap.source,uv[4] *w,uv[5] *h,(uv[0]-uv[4])*w,(uv[1]-uv[5])*h,x,y,width,height,m,alpha);
				}
				else {
					this.drawImageM(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x,y,width,height,m,alpha);
				}
				this._repaint();
			}
			from.fillTexture=function (tex,x,y,width,height,type,offset){
				(width===void 0)&& (width=0);
				(height===void 0)&& (height=0);
				(type===void 0)&& (type="repeat");
				if (!tex)return;
				if (tex.loaded){
					var ctxi=Render._context.ctx;
					var w=tex.bitmap.width,h=tex.bitmap.height,uv=tex.uv;
					var pat;
					if (tex.uv !=Texture.DEF_UV){
						pat=ctxi.createPattern(tex.bitmap.source,type,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h);
						}else {
						pat=ctxi.createPattern(tex.bitmap.source,type);
					};
					var sX=0,sY=0;
					if (offset){
						x+=offset.x % tex.width;
						y+=offset.y % tex.height;
						sX-=offset.x % tex.width;
						sY-=offset.y % tex.height;
					}
					this._fillImage(pat,x,y,sX,sY,width,height);
				}
			}
		}
	}

	Graphics._cache=[];
	return Graphics;
})()


/**
*@private
*Graphic bounds数据类
*/
//class laya.display.GraphicsBounds
var GraphicsBounds=(function(){
	function GraphicsBounds(){
		/**@private */
		//this._temp=null;
		/**@private */
		//this._bounds=null;
		/**@private */
		//this._rstBoundPoints=null;
		/**@private */
		this._cacheBoundsType=false;
		/**@private */
		//this._graphics=null;
	}

	__class(GraphicsBounds,'laya.display.GraphicsBounds');
	var __proto=GraphicsBounds.prototype;
	/**
	*销毁
	*/
	__proto.destroy=function(){
		this._graphics=null;
		this._temp=null;
		this._rstBoundPoints=null;
		this._bounds=null;
	}

	/**
	*重置数据
	*/
	__proto.reset=function(){
		this._temp && (this._temp.length=0);
	}

	/**
	*获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
	*@param realSize （可选）使用图片的真实大小，默认为false
	*@return 位置与宽高组成的 一个 Rectangle 对象。
	*/
	__proto.getBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		if (!this._bounds || !this._temp || this._temp.length < 1 || realSize !=this._cacheBoundsType){
			this._bounds=Rectangle._getWrapRec(this.getBoundPoints(realSize),this._bounds)
		}
		this._cacheBoundsType=realSize;
		return this._bounds;
	}

	/**
	*@private
	*@param realSize （可选）使用图片的真实大小，默认为false
	*获取端点列表。
	*/
	__proto.getBoundPoints=function(realSize){
		(realSize===void 0)&& (realSize=false);
		if (!this._temp || this._temp.length < 1 || realSize !=this._cacheBoundsType)
			this._temp=this._getCmdPoints(realSize);
		this._cacheBoundsType=realSize;
		return this._rstBoundPoints=Utils.copyArray(this._rstBoundPoints,this._temp);
	}

	__proto._getCmdPoints=function(realSize){
		(realSize===void 0)&& (realSize=false);
		var context=Render._context;
		var cmds=this._graphics.cmds;
		var rst;
		rst=this._temp || (this._temp=[]);
		rst.length=0;
		if (!cmds && this._graphics._one !=null){
			GraphicsBounds._tempCmds.length=0;
			GraphicsBounds._tempCmds.push(this._graphics._one);
			cmds=GraphicsBounds._tempCmds;
		}
		if (!cmds)
			return rst;
		var matrixs;
		matrixs=GraphicsBounds._tempMatrixArrays;
		matrixs.length=0;
		var tMatrix=GraphicsBounds._initMatrix;
		tMatrix.identity();
		var tempMatrix=GraphicsBounds._tempMatrix;
		var cmd;
		var tex;
		var wRate=NaN;
		var hRate=NaN;
		var oWidth=NaN;
		var oHeight=NaN;
		var offX=NaN;
		var offY=NaN;
		for (var i=0,n=cmds.length;i < n;i++){
			cmd=cmds[i];
			if (!cmd.callee)continue ;
			switch (cmd.callee){
				case context._save:
				case 7:
					matrixs.push(tMatrix);
					tMatrix=tMatrix.clone();
					break ;
				case context._restore:
				case 8:
					tMatrix=matrixs.pop();
					break ;
				case context._scale:
				case 5:
					tempMatrix.identity();
					tempMatrix.translate(-cmd[2],-cmd[3]);
					tempMatrix.scale(cmd[0],cmd[1]);
					tempMatrix.translate(cmd[2],cmd[3]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case context._rotate:
				case 3:
					tempMatrix.identity();
					tempMatrix.translate(-cmd[1],-cmd[2]);
					tempMatrix.rotate(cmd[0]);
					tempMatrix.translate(cmd[1],cmd[2]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case context._translate:
				case 6:
					tempMatrix.identity();
					tempMatrix.translate(cmd[0],cmd[1]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case context._transform:
				case 4:
					tempMatrix.identity();
					tempMatrix.translate(-cmd[1],-cmd[2]);
					tempMatrix.concat(cmd[0]);
					tempMatrix.translate(cmd[1],cmd[2]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case 16:
				case 24:
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tMatrix);
					break ;
				case 17:
					tMatrix.copyTo(tempMatrix);
					tempMatrix.concat(cmd[4]);
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tempMatrix);
					break ;
				case context._drawTexture:
					tex=cmd[0];
					if (realSize){
						if (cmd[3] && cmd[4]){
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
							}else {
							tex=cmd[0];
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),tMatrix);
						}
						}else {
						wRate=(cmd[3] || tex.sourceWidth)/ tex.width;
						hRate=(cmd[4] || tex.sourceHeight)/ tex.height;
						oWidth=wRate *tex.sourceWidth;
						oHeight=hRate *tex.sourceHeight;
						offX=tex.offsetX > 0 ? tex.offsetX :0;
						offY=tex.offsetY > 0 ? tex.offsetY :0;
						offX *=wRate;
						offY *=hRate;
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1]-offX,cmd[2]-offY,oWidth,oHeight),tMatrix);
					}
					break ;
				case context._fillTexture:
					if (cmd[3] && cmd[4]){
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
						}else {
						tex=cmd[0];
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),tMatrix);
					}
					break ;
				case context._drawTextureWithTransform:;
					var drawMatrix;
					if (cmd[5]){
						tMatrix.copyTo(tempMatrix);
						tempMatrix.concat(cmd[5]);
						drawMatrix=tempMatrix;
						}else {
						drawMatrix=tMatrix;
					}
					if (realSize){
						if (cmd[3] && cmd[4]){
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),drawMatrix);
							}else {
							tex=cmd[0];
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),drawMatrix);
						}
						}else {
						tex=cmd[0];
						wRate=(cmd[3] || tex.sourceWidth)/ tex.width;
						hRate=(cmd[4] || tex.sourceHeight)/ tex.height;
						oWidth=wRate *tex.sourceWidth;
						oHeight=hRate *tex.sourceHeight;
						offX=tex.offsetX > 0 ? tex.offsetX :0;
						offY=tex.offsetY > 0 ? tex.offsetY :0;
						offX *=wRate;
						offY *=hRate;
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1]-offX,cmd[2]-offY,oWidth,oHeight),drawMatrix);
					}
					break ;
				case context._drawRect:
				case 13:
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tMatrix);
					break ;
				case context._drawCircle:
				case context._fillCircle:
				case 14:
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0]-cmd[2],cmd[1]-cmd[2],cmd[2]+cmd[2],cmd[2]+cmd[2]),tMatrix);
					break ;
				case context._drawLine:
				case 20:
					GraphicsBounds._tempPoints.length=0;
					var lineWidth=NaN;
					lineWidth=cmd[5] *0.5;
					if (cmd[0]==cmd[2]){
						GraphicsBounds._tempPoints.push(cmd[0]+lineWidth,cmd[1],cmd[2]+lineWidth,cmd[3],cmd[0]-lineWidth,cmd[1],cmd[2]-lineWidth,cmd[3]);
						}else if (cmd[1]==cmd[3]){
						GraphicsBounds._tempPoints.push(cmd[0],cmd[1]+lineWidth,cmd[2],cmd[3]+lineWidth,cmd[0],cmd[1]-lineWidth,cmd[2],cmd[3]-lineWidth);
						}else {
						GraphicsBounds._tempPoints.push(cmd[0],cmd[1],cmd[2],cmd[3]);
					}
					GraphicsBounds._addPointArrToRst(rst,GraphicsBounds._tempPoints,tMatrix);
					break ;
				case context._drawCurves:
				case 22:
					GraphicsBounds._addPointArrToRst(rst,Bezier.I.getBezierPoints(cmd[2]),tMatrix,cmd[0],cmd[1]);
					break ;
				case context._drawPoly:
				case context._drawLines:
				case 18:
					GraphicsBounds._addPointArrToRst(rst,cmd[2],tMatrix,cmd[0],cmd[1]);
					break ;
				case context._drawPath:
				case 19:
					GraphicsBounds._addPointArrToRst(rst,this._getPathPoints(cmd[2]),tMatrix,cmd[0],cmd[1]);
					break ;
				case context._drawPie:
				case 15:
					GraphicsBounds._addPointArrToRst(rst,this._getPiePoints(cmd[0],cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
					break ;
				}
		}
		if (rst.length > 200){
			rst=Utils.copyArray(rst,Rectangle._getWrapRec(rst)._getBoundPoints());
		}else if (rst.length > 8)
		rst=GrahamScan.scanPList(rst);
		return rst;
	}

	__proto._switchMatrix=function(tMatix,tempMatrix){
		tempMatrix.concat(tMatix);
		tempMatrix.copyTo(tMatix);
	}

	__proto._getPiePoints=function(x,y,radius,startAngle,endAngle){
		var rst=GraphicsBounds._tempPoints;
		GraphicsBounds._tempPoints.length=0;
		rst.push(x,y);
		var delta=(endAngle-startAngle)% (2 *Math.PI);
		var segnum=10;
		var step=delta / segnum;
		var i=NaN;
		var angle=startAngle;
		for (i=0;i <=segnum;i++){
			rst.push(x+radius *Math.cos(angle),y+radius *Math.sin(angle));
			angle+=step;
		}
		return rst;
	}

	__proto._getPathPoints=function(paths){
		var i=0,len=0;
		var rst=GraphicsBounds._tempPoints;
		rst.length=0;
		len=paths.length;
		var tCMD;
		for (i=0;i < len;i++){
			tCMD=paths[i];
			if (tCMD.length > 1){
				rst.push(tCMD[1],tCMD[2]);
				if (tCMD.length > 3){
					rst.push(tCMD[3],tCMD[4]);
				}
			}
		}
		return rst;
	}

	GraphicsBounds._addPointArrToRst=function(rst,points,matrix,dx,dy){
		(dx===void 0)&& (dx=0);
		(dy===void 0)&& (dy=0);
		var i=0,len=0;
		len=points.length;
		for (i=0;i < len;i+=2){
			GraphicsBounds._addPointToRst(rst,points[i]+dx,points[i+1]+dy,matrix);
		}
	}

	GraphicsBounds._addPointToRst=function(rst,x,y,matrix){
		var _tempPoint=Point.TEMP;
		_tempPoint.setTo(x ? x :0,y ? y :0);
		matrix.transformPoint(_tempPoint);
		rst.push(_tempPoint.x,_tempPoint.y);
	}

	GraphicsBounds._tempPoints=[];
	GraphicsBounds._tempMatrixArrays=[];
	GraphicsBounds._tempCmds=[];
	__static(GraphicsBounds,
	['_tempMatrix',function(){return this._tempMatrix=new Matrix();},'_initMatrix',function(){return this._initMatrix=new Matrix();}
	]);
	return GraphicsBounds;
})()


/**
*<code>Event</code> 是事件类型的集合。一般当发生事件时，<code>Event</code> 对象将作为参数传递给事件侦听器。
*/
//class laya.events.Event
var Event=(function(){
	function Event(){
		/**事件类型。*/
		//this.type=null;
		/**原生浏览器事件。*/
		//this.nativeEvent=null;
		/**事件目标触发对象。*/
		//this.target=null;
		/**事件当前冒泡对象。*/
		//this.currentTarget=null;
		/**@private */
		//this._stoped=false;
		/**分配给触摸点的唯一标识号（作为 int）。*/
		//this.touchId=0;
		/**键盘值*/
		//this.keyCode=0;
		/**滚轮滑动增量*/
		//this.delta=0;
	}

	__class(Event,'laya.events.Event');
	var __proto=Event.prototype;
	/**
	*设置事件数据。
	*@param type 事件类型。
	*@param currentTarget 事件目标触发对象。
	*@param target 事件当前冒泡对象。
	*@return 返回当前 Event 对象。
	*/
	__proto.setTo=function(type,currentTarget,target){
		this.type=type;
		this.currentTarget=currentTarget;
		this.target=target;
		return this;
	}

	/**
	*阻止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。此方法不会影响当前节点 (currentTarget)中的任何事件侦听器。
	*/
	__proto.stopPropagation=function(){
		this._stoped=true;
	}

	/**鼠标在 Stage 上的 Y 轴坐标*/
	__getset(0,__proto,'stageY',function(){
		return Laya.stage.mouseY;
	});

	/**
	*包含按下或释放的键的字符代码值。字符代码值为英文键盘值。
	*/
	__getset(0,__proto,'charCode',function(){
		return this.nativeEvent.charCode;
	});

	/**
	*触摸点列表。
	*/
	__getset(0,__proto,'touches',function(){
		var arr=this.nativeEvent.touches;
		if (arr){
			var stage=Laya.stage;
			for (var i=0,n=arr.length;i < n;i++){
				var e=arr[i];
				var point=Point.TEMP;
				point.setTo(e.clientX,e.clientY);
				stage._canvasTransform.invertTransformPoint(point);
				stage.transform.invertTransformPoint(point);
				e.stageX=point.x;
				e.stageY=point.y;
			}
		}
		return arr;
	});

	/**
	*表示键在键盘上的位置。这对于区分在键盘上多次出现的键非常有用。<br>
	*例如，您可以根据此属性的值来区分左 Shift 键和右 Shift 键：左 Shift 键的值为 KeyLocation.LEFT，右 Shift 键的值为 KeyLocation.RIGHT。另一个示例是区分标准键盘 (KeyLocation.STANDARD)与数字键盘 (KeyLocation.NUM_PAD)上按下的数字键。
	*/
	__getset(0,__proto,'keyLocation',function(){
		return this.nativeEvent.keyLocation;
	});

	/**
	*表示 Ctrl 键是处于活动状态 (true)还是非活动状态 (false)。
	*/
	__getset(0,__proto,'ctrlKey',function(){
		return this.nativeEvent.ctrlKey;
	});

	/**
	*表示 Alt 键是处于活动状态 (true)还是非活动状态 (false)。
	*/
	__getset(0,__proto,'altKey',function(){
		return this.nativeEvent.altKey;
	});

	/**
	*表示 Shift 键是处于活动状态 (true)还是非活动状态 (false)。
	*/
	__getset(0,__proto,'shiftKey',function(){
		return this.nativeEvent.shiftKey;
	});

	/**鼠标在 Stage 上的 X 轴坐标*/
	__getset(0,__proto,'stageX',function(){
		return Laya.stage.mouseX;
	});

	Event.EMPTY=new Event();
	Event.MOUSE_DOWN="mousedown";
	Event.MOUSE_UP="mouseup";
	Event.CLICK="click";
	Event.RIGHT_MOUSE_DOWN="rightmousedown";
	Event.RIGHT_MOUSE_UP="rightmouseup";
	Event.RIGHT_CLICK="rightclick";
	Event.MOUSE_MOVE="mousemove";
	Event.MOUSE_OVER="mouseover";
	Event.MOUSE_OUT="mouseout";
	Event.MOUSE_WHEEL="mousewheel";
	Event.ROLL_OVER="mouseover";
	Event.ROLL_OUT="mouseout";
	Event.DOUBLE_CLICK="doubleclick";
	Event.CHANGE="change";
	Event.CHANGED="changed";
	Event.RESIZE="resize";
	Event.ADDED="added";
	Event.REMOVED="removed";
	Event.DISPLAY="display";
	Event.UNDISPLAY="undisplay";
	Event.ERROR="error";
	Event.COMPLETE="complete";
	Event.LOADED="loaded";
	Event.PROGRESS="progress";
	Event.INPUT="input";
	Event.RENDER="render";
	Event.OPEN="open";
	Event.MESSAGE="message";
	Event.CLOSE="close";
	Event.KEY_DOWN="keydown";
	Event.KEY_PRESS="keypress";
	Event.KEY_UP="keyup";
	Event.FRAME="enterframe";
	Event.DRAG_START="dragstart";
	Event.DRAG_MOVE="dragmove";
	Event.DRAG_END="dragend";
	Event.ENTER="enter";
	Event.SELECT="select";
	Event.BLUR="blur";
	Event.FOCUS="focus";
	Event.VISIBILITY_CHANGE="visibilitychange";
	Event.FOCUS_CHANGE="focuschange";
	Event.PLAYED="played";
	Event.PAUSED="paused";
	Event.STOPPED="stopped";
	Event.START="start";
	Event.END="end";
	Event.ENABLE_CHANGED="enablechanged";
	Event.ACTIVE_IN_HIERARCHY_CHANGED="activeinhierarchychanged";
	Event.COMPONENT_ADDED="componentadded";
	Event.COMPONENT_REMOVED="componentremoved";
	Event.LAYER_CHANGED="layerchanged";
	Event.HIERARCHY_LOADED="hierarchyloaded";
	Event.RECOVERED="recovered";
	Event.RELEASED="released";
	Event.LINK="link";
	Event.LABEL="label";
	Event.FULL_SCREEN_CHANGE="fullscreenchange";
	Event.DEVICE_LOST="devicelost";
	Event.MESH_CHANGED="meshchanged";
	Event.MATERIAL_CHANGED="materialchanged";
	Event.WORLDMATRIX_NEEDCHANGE="worldmatrixneedchanged";
	Event.ANIMATION_CHANGED="animationchanged";
	Event.TRIGGER_ENTER="triggerenter";
	Event.TRIGGER_STAY="triggerstay";
	Event.TRIGGER_EXIT="triggerexit";
	Event.TRAIL_FILTER_CHANGE="trailfilterchange";
	Event.DOMINO_FILTER_CHANGE="dominofilterchange";
	return Event;
})()


/**
*<code>Keyboard</code> 类的属性是一些常数，这些常数表示控制游戏时最常用的键。
*/
//class laya.events.Keyboard
var Keyboard=(function(){
	function Keyboard(){}
	__class(Keyboard,'laya.events.Keyboard');
	Keyboard.NUMBER_0=48;
	Keyboard.NUMBER_1=49;
	Keyboard.NUMBER_2=50;
	Keyboard.NUMBER_3=51;
	Keyboard.NUMBER_4=52;
	Keyboard.NUMBER_5=53;
	Keyboard.NUMBER_6=54;
	Keyboard.NUMBER_7=55;
	Keyboard.NUMBER_8=56;
	Keyboard.NUMBER_9=57;
	Keyboard.A=65;
	Keyboard.B=66;
	Keyboard.C=67;
	Keyboard.D=68;
	Keyboard.E=69;
	Keyboard.F=70;
	Keyboard.G=71;
	Keyboard.H=72;
	Keyboard.I=73;
	Keyboard.J=74;
	Keyboard.K=75;
	Keyboard.L=76;
	Keyboard.M=77;
	Keyboard.N=78;
	Keyboard.O=79;
	Keyboard.P=80;
	Keyboard.Q=81;
	Keyboard.R=82;
	Keyboard.S=83;
	Keyboard.T=84;
	Keyboard.U=85;
	Keyboard.V=86;
	Keyboard.W=87;
	Keyboard.X=88;
	Keyboard.Y=89;
	Keyboard.Z=90;
	Keyboard.F1=112;
	Keyboard.F2=113;
	Keyboard.F3=114;
	Keyboard.F4=115;
	Keyboard.F5=116;
	Keyboard.F6=117;
	Keyboard.F7=118;
	Keyboard.F8=119;
	Keyboard.F9=120;
	Keyboard.F10=121;
	Keyboard.F11=122;
	Keyboard.F12=123;
	Keyboard.F13=124;
	Keyboard.F14=125;
	Keyboard.F15=126;
	Keyboard.NUMPAD=21;
	Keyboard.NUMPAD_0=96;
	Keyboard.NUMPAD_1=97;
	Keyboard.NUMPAD_2=98;
	Keyboard.NUMPAD_3=99;
	Keyboard.NUMPAD_4=100;
	Keyboard.NUMPAD_5=101;
	Keyboard.NUMPAD_6=102;
	Keyboard.NUMPAD_7=103;
	Keyboard.NUMPAD_8=104;
	Keyboard.NUMPAD_9=105;
	Keyboard.NUMPAD_ADD=107;
	Keyboard.NUMPAD_DECIMAL=110;
	Keyboard.NUMPAD_DIVIDE=111;
	Keyboard.NUMPAD_ENTER=108;
	Keyboard.NUMPAD_MULTIPLY=106;
	Keyboard.NUMPAD_SUBTRACT=109;
	Keyboard.SEMICOLON=186;
	Keyboard.EQUAL=187;
	Keyboard.COMMA=188;
	Keyboard.MINUS=189;
	Keyboard.PERIOD=190;
	Keyboard.SLASH=191;
	Keyboard.BACKQUOTE=192;
	Keyboard.LEFTBRACKET=219;
	Keyboard.BACKSLASH=220;
	Keyboard.RIGHTBRACKET=221;
	Keyboard.QUOTE=222;
	Keyboard.ALTERNATE=18;
	Keyboard.BACKSPACE=8;
	Keyboard.CAPS_LOCK=20;
	Keyboard.COMMAND=15;
	Keyboard.CONTROL=17;
	Keyboard.DELETE=46;
	Keyboard.ENTER=13;
	Keyboard.ESCAPE=27;
	Keyboard.PAGE_UP=33;
	Keyboard.PAGE_DOWN=34;
	Keyboard.END=35;
	Keyboard.HOME=36;
	Keyboard.LEFT=37;
	Keyboard.UP=38;
	Keyboard.RIGHT=39;
	Keyboard.DOWN=40;
	Keyboard.SHIFT=16;
	Keyboard.SPACE=32;
	Keyboard.TAB=9;
	Keyboard.INSERT=45;
	return Keyboard;
})()


/**
*<p><code>KeyBoardManager</code> 是键盘事件管理类。该类从浏览器中接收键盘事件，并派发该事件。</p>
*<p>派发事件时若 Stage.focus 为空则只从 Stage 上派发该事件，否则将从 Stage.focus 对象开始一直冒泡派发该事件。所以在 Laya.stage 上监听键盘事件一定能够收到，如果在其他地方监听，则必须处在Stage.focus的冒泡链上才能收到该事件。</p>
*<p>用户可以通过代码 Laya.stage.focus=someNode 的方式来设置focus对象。</p>
*<p>用户可统一的根据事件对象中 e.keyCode 来判断按键类型，该属性兼容了不同浏览器的实现。</p>
*/
//class laya.events.KeyBoardManager
var KeyBoardManager=(function(){
	function KeyBoardManager(){}
	__class(KeyBoardManager,'laya.events.KeyBoardManager');
	KeyBoardManager.__init__=function(){
		KeyBoardManager._addEvent("keydown");
		KeyBoardManager._addEvent("keypress");
		KeyBoardManager._addEvent("keyup");
	}

	KeyBoardManager._addEvent=function(type){
		Browser.document.addEventListener(type,function(e){
			laya.events.KeyBoardManager._dispatch(e,type);
		},true);
	}

	KeyBoardManager._dispatch=function(e,type){
		if (!KeyBoardManager.enabled)return;
		KeyBoardManager._event._stoped=false;
		KeyBoardManager._event.nativeEvent=e;
		KeyBoardManager._event.keyCode=e.keyCode || e.which || e.charCode;
		if (type==="keydown")KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode]=true;
		else if (type==="keyup")KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode]=null;
		var target=(Laya.stage.focus && (Laya.stage.focus.event !=null)&& Laya.stage.focus.displayedInStage)? Laya.stage.focus :Laya.stage;
		var ct=target;
		while (ct){
			ct.event(type,KeyBoardManager._event.setTo(type,ct,target));
			ct=ct.parent;
		}
	}

	KeyBoardManager.hasKeyDown=function(key){
		return KeyBoardManager._pressKeys[key];
	}

	KeyBoardManager._pressKeys={};
	KeyBoardManager.enabled=true;
	__static(KeyBoardManager,
	['_event',function(){return this._event=new Event();}
	]);
	return KeyBoardManager;
})()


/**
*<p><code>KeyLocation</code> 类包含表示在键盘或类似键盘的输入设备上按键位置的常量。</p>
*<p><code>KeyLocation</code> 常数用在键盘事件对象的 <code>keyLocation </code>属性中。</p>
*/
//class laya.events.KeyLocation
var KeyLocation=(function(){
	function KeyLocation(){}
	__class(KeyLocation,'laya.events.KeyLocation');
	KeyLocation.STANDARD=0;
	KeyLocation.LEFT=1;
	KeyLocation.RIGHT=2;
	KeyLocation.NUM_PAD=3;
	return KeyLocation;
})()


/**
*<p><code>MouseManager</code> 是鼠标、触摸交互管理器。</p>
*<p>鼠标事件流包括捕获阶段、目标阶段、冒泡阶段。<br/>
*捕获阶段：此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象；<br/>
*目标阶段：找到命中的目标对象；<br/>
*冒泡阶段：事件离开目标对象，按节点层级向上逐层通知，直到到达舞台的过程。</p>
*/
//class laya.events.MouseManager
var MouseManager=(function(){
	function MouseManager(){
		/**canvas 上的鼠标X坐标。*/
		this.mouseX=0;
		/**canvas 上的鼠标Y坐标。*/
		this.mouseY=0;
		/**是否禁用除 stage 以外的鼠标事件检测。*/
		this.disableMouseEvent=false;
		/**鼠标按下的时间。单位为毫秒。*/
		this.mouseDownTime=0;
		/**鼠标移动精度。*/
		this.mouseMoveAccuracy=2;
		this._stage=null;
		this._target=null;
		this._lastMoveTimer=0;
		this._isLeftMouse=false;
		this._eventList=[];
		this._touchIDs={};
		this._id=1;
		this._tTouchID=0;
		this._event=new Event();
		this._matrix=new Matrix();
		this._point=new Point();
		this._rect=new Rectangle();
		this._prePoint=new Point();
		this._curTouchID=NaN;
	}

	__class(MouseManager,'laya.events.MouseManager');
	var __proto=MouseManager.prototype;
	/**
	*@private
	*初始化。
	*/
	__proto.__init__=function(stage,canvas){
		var _$this=this;
		this._stage=stage;
		var _this=this;
		var list=this._eventList;
		canvas.oncontextmenu=function (e){
			if (MouseManager.enabled)return false;
		}
		canvas.addEventListener('mousedown',function(e){
			if (MouseManager.enabled){
				if(!Browser.onIE)e.preventDefault();
				list.push(e);
				_this.mouseDownTime=Browser.now();
			}
		});
		canvas.addEventListener('mouseup',function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				list.push(e);
				_this.mouseDownTime=-Browser.now();
			}
		},true);
		canvas.addEventListener('mousemove',function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				var now=Browser.now();
				if (now-_this._lastMoveTimer < 10)return;
				_this._lastMoveTimer=now;
				list.push(e);
			}
		},true);
		canvas.addEventListener("mouseout",function(e){
			if (MouseManager.enabled)list.push(e);
		})
		canvas.addEventListener("mouseover",function(e){
			if (MouseManager.enabled)list.push(e);
		})
		canvas.addEventListener("touchstart",function(e){
			if (MouseManager.enabled){
				list.push(e);
				if (!MouseManager._isFirstTouch&&!Input.isInputting)e.preventDefault();
				_this.mouseDownTime=Browser.now();
			}
		});
		canvas.addEventListener("touchend",function(e){
			if (MouseManager.enabled){
				if (!MouseManager._isFirstTouch&&!Input.isInputting)e.preventDefault();
				MouseManager._isFirstTouch=false;
				list.push(e);
				_this.mouseDownTime=-Browser.now();
				}else {
				_$this._curTouchID=NaN;
			}
		},true);
		canvas.addEventListener("touchmove",function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				list.push(e);
			}
		},true);
		canvas.addEventListener("touchcancel",function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				list.push(e);
				}else {
				_$this._curTouchID=NaN;
			}
		},true);
		canvas.addEventListener('mousewheel',function(e){
			if (MouseManager.enabled)list.push(e);
		});
		canvas.addEventListener('DOMMouseScroll',function(e){
			if (MouseManager.enabled)list.push(e);
		});
	}

	__proto.initEvent=function(e,nativeEvent){
		var _this=this;
		_this._event._stoped=false;
		_this._event.nativeEvent=nativeEvent || e;
		_this._target=null;
		this._point.setTo(e.pageX || e.clientX,e.pageY || e.clientY);
		this._stage._canvasTransform.invertTransformPoint(this._point);
		_this.mouseX=this._point.x;
		_this.mouseY=this._point.y;
		_this._event.touchId=e.identifier || 0;
		this._tTouchID=_this._event.touchId;
		var evt;
		evt=TouchManager.I._event;
		evt._stoped=false;
		evt.nativeEvent=_this._event.nativeEvent;
		evt.touchId=_this._event.touchId;
	}

	__proto.checkMouseWheel=function(e){
		this._event.delta=e.wheelDelta ? e.wheelDelta *0.025 :-e.detail;
		var _lastOvers=TouchManager.I.getLastOvers();
		for (var i=0,n=_lastOvers.length;i < n;i++){
			var ele=_lastOvers[i];
			ele.event(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel",this._event.setTo(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel",ele,this._target));
		}
	}

	// _stage.event(Event.MOUSE_WHEEL,_event.setTo(Event.MOUSE_WHEEL,_stage,_target));
	__proto.onMouseMove=function(ele){
		TouchManager.I.onMouseMove(ele,this._tTouchID);
	}

	__proto.onMouseDown=function(ele){
		if (Input.isInputting && Laya.stage.focus && Laya.stage.focus["focus"] && !Laya.stage.focus.contains(this._target)){
			var pre_input=Laya.stage.focus['_tf'] || Laya.stage.focus;
			var new_input=ele['_tf'] || ele;
			if ((new_input instanceof laya.display.Input )&& new_input.multiline==pre_input.multiline)
				pre_input['_focusOut']();
			else
			pre_input.focus=false;
		}
		TouchManager.I.onMouseDown(ele,this._tTouchID,this._isLeftMouse);
	}

	__proto.onMouseUp=function(ele){
		TouchManager.I.onMouseUp(ele,this._tTouchID,this._isLeftMouse);
	}

	__proto.check=function(sp,mouseX,mouseY,callBack){
		this._point.setTo(mouseX,mouseY);
		sp.fromParentPoint(this._point);
		mouseX=this._point.x;
		mouseY=this._point.y;
		var scrollRect=sp.scrollRect;
		if (scrollRect){
			this._rect.setTo(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
			if (!this._rect.contains(mouseX,mouseY))return false;
		}
		if (!this.disableMouseEvent){
			if (sp.hitTestPrior && !sp.mouseThrough && !this.hitTest(sp,mouseX,mouseY)){
				return false;
			}
			for (var i=sp._childs.length-1;i >-1;i--){
				var child=sp._childs[i];
				if (!child.destroyed && child.mouseEnabled && child.visible){
					if (this.check(child,mouseX,mouseY,callBack))return true;
				}
			}
		};
		var isHit=(sp.hitTestPrior && !sp.mouseThrough && !this.disableMouseEvent)? true :this.hitTest(sp,mouseX,mouseY);
		if (isHit){
			this._target=sp;
			callBack.call(this,sp);
			}else if (callBack===this.onMouseUp && sp===this._stage){
			this._target=this._stage;
			callBack.call(this,this._target);
		}
		return isHit;
	}

	__proto.hitTest=function(sp,mouseX,mouseY){
		var isHit=false;
		if (sp.scrollRect){
			mouseX-=sp.scrollRect.x;
			mouseY-=sp.scrollRect.y;
		}
		if ((sp.hitArea instanceof laya.utils.HitArea )){
			return sp.hitArea.isHit(mouseX,mouseY);
		}
		if (sp.width > 0 && sp.height > 0 || sp.mouseThrough || sp.hitArea){
			if (!sp.mouseThrough){
				var hitRect=this._rect;
				if (sp.hitArea)hitRect=sp.hitArea;
				else hitRect.setTo(0,0,sp.width,sp.height);
				isHit=hitRect.contains(mouseX,mouseY);
				}else {
				isHit=sp.getGraphicBounds().contains(mouseX,mouseY);
			}
		}
		return isHit;
	}

	/**
	*执行事件处理。
	*/
	__proto.runEvent=function(){
		var len=this._eventList.length;
		if (!len)return;
		var _this=this;
		var i=0,j=0,n=0,touch;
		while (i < len){
			var evt=this._eventList[i];
			if (evt.type!=='mousemove')this._prePoint.x=this._prePoint.y=-1000000;
			switch (evt.type){
				case 'mousedown':
					this._touchIDs[0]=this._id++;
					if (!MouseManager._isTouchRespond){
						_this._isLeftMouse=evt.button===0;
						_this.initEvent(evt);
						_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown);
					}else
					MouseManager._isTouchRespond=false;
					break ;
				case 'mouseup':
					_this._isLeftMouse=evt.button===0;
					_this.initEvent(evt);
					_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseUp);
					break ;
				case 'mousemove':
					if ((Math.abs(this._prePoint.x-evt.clientX)+Math.abs(this._prePoint.y-evt.clientY))>=this.mouseMoveAccuracy){
						this._prePoint.x=evt.clientX;
						this._prePoint.y=evt.clientY;
						_this.initEvent(evt);
						_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseMove);
					}
					break ;
				case "touchstart":
					MouseManager._isTouchRespond=true;
					_this._isLeftMouse=true;
					var touches=evt.changedTouches;
					for (j=0,n=touches.length;j < n;j++){
						touch=touches[j];
						if (MouseManager.multiTouchEnabled || isNaN(this._curTouchID)){
							this._curTouchID=touch.identifier;
							if (this._id % 200===0)this._touchIDs={};
							this._touchIDs[touch.identifier]=this._id++;
							_this.initEvent(touch,evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown);
						}
					}
					break ;
				case "touchend":
				case "touchcancel":
					MouseManager._isTouchRespond=true;
					_this._isLeftMouse=true;
					var touchends=evt.changedTouches;
					for (j=0,n=touchends.length;j < n;j++){
						touch=touchends[j];
						if (MouseManager.multiTouchEnabled || touch.identifier==this._curTouchID){
							this._curTouchID=NaN;
							_this.initEvent(touch,evt);
							var isChecked=false;
							isChecked=_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseUp);
							if (!isChecked){
								_this.onMouseUp(null);
							}
						}
					}
					break ;
				case "touchmove":;
					var touchemoves=evt.changedTouches;
					for (j=0,n=touchemoves.length;j < n;j++){
						touch=touchemoves[j];
						if (MouseManager.multiTouchEnabled || touch.identifier==this._curTouchID){
							_this.initEvent(touch,evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseMove);
						}
					}
					break ;
				case "wheel":
				case "mousewheel":
				case "DOMMouseScroll":
					_this.checkMouseWheel(evt);
					break ;
				case "mouseout":
					TouchManager.I.stageMouseOut();
					break ;
				case "mouseover":
					_this._stage.event(/*laya.events.Event.MOUSE_OVER*/"mouseover",_this._event.setTo(/*laya.events.Event.MOUSE_OVER*/"mouseover",_this._stage,_this._stage));
					break ;
				}
			i++;
		}
		this._eventList.length=0;
	}

	MouseManager.enabled=true;
	MouseManager.multiTouchEnabled=true;
	MouseManager._isTouchRespond=false;
	MouseManager._isFirstTouch=true;
	__static(MouseManager,
	['instance',function(){return this.instance=new MouseManager();}
	]);
	return MouseManager;
})()


/**
*@private
*Touch事件管理类，处理多点触控下的鼠标事件
*/
//class laya.events.TouchManager
var TouchManager=(function(){
	function TouchManager(){
		/**
		*当前over的touch表
		*/
		this.preOvers=[];
		/**
		*当前down的touch表
		*/
		this.preDowns=[];
		this.preRightDowns=[];
		/**
		*是否启用
		*/
		this.enable=true;
		this._lastClickTime=0;
		this._event=new Event();
	}

	__class(TouchManager,'laya.events.TouchManager');
	var __proto=TouchManager.prototype;
	__proto._clearTempArrs=function(){
		TouchManager._oldArr.length=0;
		TouchManager._newArr.length=0;
		TouchManager._tEleArr.length=0;
	}

	/**
	*从touch表里查找对应touchID的数据
	*@param touchID touch ID
	*@param arr touch表
	*@return
	*
	*/
	__proto.getTouchFromArr=function(touchID,arr){
		var i=0,len=0;
		len=arr.length;
		var tTouchO;
		for (i=0;i < len;i++){
			tTouchO=arr[i];
			if (tTouchO.id==touchID){
				return tTouchO;
			}
		}
		return null;
	}

	/**
	*从touch表里移除一个元素
	*@param touchID touch ID
	*@param arr touch表
	*
	*/
	__proto.removeTouchFromArr=function(touchID,arr){
		var i=0;
		for (i=arr.length-1;i >=0;i--){
			if (arr[i].id==touchID){
				arr.splice(i,1);
			}
		}
	}

	/**
	*创建一个touch数据
	*@param ele 当前的根节点
	*@param touchID touchID
	*@return
	*
	*/
	__proto.createTouchO=function(ele,touchID){
		var rst;
		rst=Pool.getItem("TouchData")|| {};
		rst.id=touchID;
		rst.tar=ele;
		return rst;
	}

	/**
	*处理touchStart
	*@param ele 根节点
	*@param touchID touchID
	*@param isLeft （可选）是否为左键
	*/
	__proto.onMouseDown=function(ele,touchID,isLeft){
		(isLeft===void 0)&& (isLeft=false);
		if (!this.enable)
			return;
		var preO;
		var tO;
		var arrs;
		preO=this.getTouchFromArr(touchID,this.preOvers);
		arrs=this.getEles(ele,null,TouchManager._tEleArr);
		if (!preO){
			tO=this.createTouchO(ele,touchID);
			this.preOvers.push(tO);
			}else {
			preO.tar=ele;
		}
		if (Browser.onMobile)
			this.sendEvents(arrs,/*laya.events.Event.MOUSE_OVER*/"mouseover",touchID);
		var preDowns;
		preDowns=isLeft ? this.preDowns :this.preRightDowns;
		preO=this.getTouchFromArr(touchID,preDowns);
		if (!preO){
			tO=this.createTouchO(ele,touchID);
			preDowns.push(tO);
			}else {
			preO.tar=ele;
		}
		this.sendEvents(arrs,isLeft ? /*laya.events.Event.MOUSE_DOWN*/"mousedown" :/*laya.events.Event.RIGHT_MOUSE_DOWN*/"rightmousedown",touchID);
		this._clearTempArrs();
	}

	/**
	*派发事件。
	*@param eles 对象列表。
	*@param type 事件类型。
	*@param touchID （可选）touchID，默认为0。
	*/
	__proto.sendEvents=function(eles,type,touchID){
		(touchID===void 0)&& (touchID=0);
		var i=0,len=0;
		len=eles.length;
		this._event._stoped=false;
		var _target;
		_target=eles[0];
		var tE;
		for (i=0;i < len;i++){
			tE=eles[i];
			if (tE.destroyed)return;
			tE.event(type,this._event.setTo(type,tE,_target));
			if (this._event._stoped)
				break ;
		}
	}

	/**
	*获取对象列表。
	*@param start 起始节点。
	*@param end 结束节点。
	*@param rst 返回值。如果此值不为空，则将其赋值为计算结果，从而避免创建新数组；如果此值为空，则创建新数组返回。
	*@return Array 返回节点列表。
	*/
	__proto.getEles=function(start,end,rst){
		if (!rst){
			rst=[];
			}else {
			rst.length=0;
		}
		while (start && start !=end){
			rst.push(start);
			start=start.parent;
		}
		return rst;
	}

	/**
	*touchMove时处理out事件和over时间。
	*@param eleNew 新的根节点。
	*@param elePre 旧的根节点。
	*@param touchID （可选）touchID，默认为0。
	*/
	__proto.checkMouseOutAndOverOfMove=function(eleNew,elePre,touchID){
		(touchID===void 0)&& (touchID=0);
		if (elePre==eleNew)
			return;
		var tar;
		var arrs;
		var i=0,len=0;
		if (elePre.contains(eleNew)){
			arrs=this.getEles(eleNew,elePre,TouchManager._tEleArr);
			this.sendEvents(arrs,/*laya.events.Event.MOUSE_OVER*/"mouseover",touchID);
			}else if (eleNew.contains(elePre)){
			arrs=this.getEles(elePre,eleNew,TouchManager._tEleArr);
			this.sendEvents(arrs,/*laya.events.Event.MOUSE_OUT*/"mouseout",touchID);
			}else {
			arrs=TouchManager._tEleArr;
			arrs.length=0;
			var oldArr;
			oldArr=this.getEles(elePre,null,TouchManager._oldArr);
			var newArr;
			newArr=this.getEles(eleNew,null,TouchManager._newArr);
			len=oldArr.length;
			var tIndex=0;
			for (i=0;i < len;i++){
				tar=oldArr[i];
				tIndex=newArr.indexOf(tar);
				if (tIndex >=0){
					newArr.splice(tIndex,newArr.length-tIndex);
					break ;
					}else {
					arrs.push(tar);
				}
			}
			if (arrs.length > 0){
				this.sendEvents(arrs,/*laya.events.Event.MOUSE_OUT*/"mouseout",touchID);
			}
			if (newArr.length > 0){
				this.sendEvents(newArr,/*laya.events.Event.MOUSE_OVER*/"mouseover",touchID);
			}
		}
	}

	/**
	*处理TouchMove事件
	*@param ele 根节点
	*@param touchID touchID
	*
	*/
	__proto.onMouseMove=function(ele,touchID){
		if (!this.enable)
			return;
		var preO;
		preO=this.getTouchFromArr(touchID,this.preOvers);
		var arrs;
		var tO;
		if (!preO){
			arrs=this.getEles(ele,null,TouchManager._tEleArr);
			this.sendEvents(arrs,/*laya.events.Event.MOUSE_OVER*/"mouseover",touchID);
			this.preOvers.push(this.createTouchO(ele,touchID));
			}else {
			this.checkMouseOutAndOverOfMove(ele,preO.tar);
			preO.tar=ele;
			arrs=this.getEles(ele,null,TouchManager._tEleArr);
		}
		this.sendEvents(arrs,/*laya.events.Event.MOUSE_MOVE*/"mousemove",touchID);
		this._clearTempArrs();
	}

	__proto.getLastOvers=function(){
		TouchManager._tEleArr.length=0;
		if (this.preOvers.length > 0 && this.preOvers[0].tar){
			return this.getEles(this.preOvers[0].tar,null,TouchManager._tEleArr);
		}
		TouchManager._tEleArr.push(Laya.stage);
		return TouchManager._tEleArr;
	}

	__proto.stageMouseOut=function(){
		var lastOvers;
		lastOvers=this.getLastOvers();
		this.preOvers.length=0;
		this.sendEvents(lastOvers,/*laya.events.Event.MOUSE_OUT*/"mouseout",0);
	}

	/**
	*处理TouchEnd事件
	*@param ele 根节点
	*@param touchID touchID
	*@param isLeft 是否为左键
	*/
	__proto.onMouseUp=function(ele,touchID,isLeft){
		(isLeft===void 0)&& (isLeft=false);
		if (!this.enable)
			return;
		var preO;
		var tO;
		var arrs;
		var oldArr;
		var i=0,len=0;
		var tar;
		var sendArr;
		var onMobile=Browser.onMobile;
		arrs=this.getEles(ele,null,TouchManager._tEleArr);
		this.sendEvents(arrs,isLeft ? /*laya.events.Event.MOUSE_UP*/"mouseup" :/*laya.events.Event.RIGHT_MOUSE_UP*/"rightmouseup",touchID);
		var preDowns;
		preDowns=isLeft ? this.preDowns :this.preRightDowns;
		preO=this.getTouchFromArr(touchID,preDowns);
		if (!preO){
			}else {
			var isDouble=false;
			var now=Browser.now();
			isDouble=now-this._lastClickTime < 300;
			this._lastClickTime=now;
			if (ele==preO.tar){
				sendArr=arrs;
				}else {
				oldArr=this.getEles(preO.tar,null,TouchManager._oldArr);
				sendArr=TouchManager._newArr;
				sendArr.length=0;
				len=oldArr.length;
				for (i=0;i < len;i++){
					tar=oldArr[i];
					if (arrs.indexOf(tar)>=0){
						sendArr.push(tar);
					}
				}
			}
			if (sendArr.length > 0){
				this.sendEvents(sendArr,isLeft ? /*laya.events.Event.CLICK*/"click" :/*laya.events.Event.RIGHT_CLICK*/"rightclick",touchID);
			}
			if (isLeft && isDouble){
				this.sendEvents(sendArr,/*laya.events.Event.DOUBLE_CLICK*/"doubleclick",touchID);
			}
			this.removeTouchFromArr(touchID,preDowns);
			preO.tar=null;
			Pool.recover("TouchData",preO);
		}
		preO=this.getTouchFromArr(touchID,this.preOvers);
		if (!preO){
			}else {
			if (onMobile){
				sendArr=this.getEles(preO.tar,null,sendArr);
				if (sendArr && sendArr.length > 0){
					this.sendEvents(sendArr,/*laya.events.Event.MOUSE_OUT*/"mouseout",touchID);
				}
				this.removeTouchFromArr(touchID,this.preOvers);
				preO.tar=null;
				Pool.recover("TouchData",preO);
			}
		}
		this._clearTempArrs();
	}

	TouchManager._oldArr=[];
	TouchManager._newArr=[];
	TouchManager._tEleArr=[];
	__static(TouchManager,
	['I',function(){return this.I=new TouchManager();}
	]);
	return TouchManager;
})()


/**
*<code>Filter</code> 是滤镜基类。
*/
//class laya.filters.Filter
var Filter=(function(){
	function Filter(){
		/**@private */
		this._action=null;
	}

	__class(Filter,'laya.filters.Filter');
	var __proto=Filter.prototype;
	Laya.imps(__proto,{"laya.filters.IFilter":true})
	/**@private */
	__proto.callNative=function(sp){}
	/**@private 滤镜类型。*/
	__getset(0,__proto,'type',function(){return-1});
	/**@private 滤镜动作。*/
	__getset(0,__proto,'action',function(){return this._action });
	Filter.BLUR=0x10;
	Filter.COLOR=0x20;
	Filter.GLOW=0x08;
	Filter._filterStart=null;
	Filter._filterEnd=null;
	Filter._EndTarget=null;
	Filter._recycleScope=null;
	Filter._filter=null;
	Filter._useSrc=null;
	Filter._endSrc=null;
	Filter._useOut=null;
	Filter._endOut=null;
	return Filter;
})()


/**
*@private
*<code>ColorFilterAction</code> 是一个颜色滤镜应用类。
*/
//class laya.filters.ColorFilterAction
var ColorFilterAction=(function(){
	function ColorFilterAction(){
		this.data=null;
	}

	__class(ColorFilterAction,'laya.filters.ColorFilterAction');
	var __proto=ColorFilterAction.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterAction":true})
	/**
	*给指定的对象应用颜色滤镜。
	*@param srcCanvas 需要应用画布对象。
	*@return 应用了滤镜后的画布对象。
	*/
	__proto.apply=function(srcCanvas){
		var ctx=srcCanvas.ctx.ctx;
		var canvas=srcCanvas.ctx.ctx.canvas;
		if (canvas.width==0 || canvas.height==0)return canvas;
		var imgdata=ctx.getImageData(0,0,canvas.width,canvas.height);
		var data=imgdata.data;
		var nData;
		for (var i=0,n=data.length;i < n;i+=4){
			nData=this.getColor(data[i],data[i+1],data[i+2],data[i+3]);
			if (data[i+3]==0)continue ;
			data[i]=nData[0];
			data[i+1]=nData[1];
			data[i+2]=nData[2];
			data[i+3]=nData[3];
		}
		ctx.putImageData(imgdata,0,0);
		return srcCanvas;
	}

	__proto.getColor=function(red,green,blue,alpha){
		var rst=[];
		if (this.data._mat && this.data._alpha){
			var mat=this.data._mat;
			var tempAlpha=this.data._alpha;
			rst[0]=mat[0] *red+mat[1] *green+mat[2] *blue+mat[3] *alpha+tempAlpha[0];
			rst[1]=mat[4] *red+mat[5] *green+mat[6] *blue+mat[7] *alpha+tempAlpha[1];
			rst[2]=mat[8] *red+mat[9] *green+mat[10] *blue+mat[11] *alpha+tempAlpha[2];
			rst[3]=mat[12] *red+mat[13] *green+mat[14] *blue+mat[15] *alpha+tempAlpha[3];
		}
		return rst;
	}

	return ColorFilterAction;
})()


/**
*@private
*/
//class laya.maths.Arith
var Arith=(function(){
	function Arith(){}
	__class(Arith,'laya.maths.Arith');
	Arith.formatR=function(r){
		if (r > Math.PI)r-=Math.PI *2;
		if (r <-Math.PI)r+=Math.PI *2;
		return r;
	}

	Arith.isPOT=function(w,h){
		return (w > 0 && (w & (w-1))===0 && h > 0 && (h & (h-1))===0);
	}

	Arith.setMatToArray=function(mat,array){
		mat.a,mat.b,0,0,mat.c,mat.d,0,0,0,0,1,0,mat.tx+20,mat.ty+20,0,1
		array[0]=mat.a;
		array[1]=mat.b;
		array[4]=mat.c;
		array[5]=mat.d;
		array[12]=mat.tx;
		array[13]=mat.ty;
	}

	return Arith;
})()


/**
*@private
*计算贝塞尔曲线的工具类。
*/
//class laya.maths.Bezier
var Bezier=(function(){
	function Bezier(){
		/**@private */
		this._controlPoints=[new Point(),new Point(),new Point()];
		this._calFun=this.getPoint2;
	}

	__class(Bezier,'laya.maths.Bezier');
	var __proto=Bezier.prototype;
	/**@private */
	__proto._switchPoint=function(x,y){
		var tPoint=this._controlPoints.shift();
		tPoint.setTo(x,y);
		this._controlPoints.push(tPoint);
	}

	/**
	*计算二次贝塞尔点。
	*@param t
	*@param rst
	*
	*/
	__proto.getPoint2=function(t,rst){
		var p1=this._controlPoints[0];
		var p2=this._controlPoints[1];
		var p3=this._controlPoints[2];
		var lineX=Math.pow((1-t),2)*p1.x+2 *t *(1-t)*p2.x+Math.pow(t,2)*p3.x;
		var lineY=Math.pow((1-t),2)*p1.y+2 *t *(1-t)*p2.y+Math.pow(t,2)*p3.y;
		rst.push(lineX,lineY);
	}

	/**
	*计算三次贝塞尔点
	*@param t
	*@param rst
	*
	*/
	__proto.getPoint3=function(t,rst){
		var p1=this._controlPoints[0];
		var p2=this._controlPoints[1];
		var p3=this._controlPoints[2];
		var p4=this._controlPoints[3];
		var lineX=Math.pow((1-t),3)*p1.x+3 *p2.x *t *(1-t)*(1-t)+3 *p3.x *t *t *(1-t)+p4.x *Math.pow(t,3);
		var lineY=Math.pow((1-t),3)*p1.y+3 *p2.y *t *(1-t)*(1-t)+3 *p3.y *t *t *(1-t)+p4.y *Math.pow(t,3);
		rst.push(lineX,lineY);
	}

	/**
	*计算贝塞尔点序列
	*@param count
	*@param rst
	*
	*/
	__proto.insertPoints=function(count,rst){
		var i=NaN;
		count=count > 0 ? count :5;
		var dLen=NaN;
		dLen=1 / count;
		for (i=0;i <=1;i+=dLen){
			this._calFun(i,rst);
		}
	}

	/**
	*获取贝塞尔曲线上的点。
	*@param pList 控制点[x0,y0,x1,y1...]
	*@param inSertCount 每次曲线的插值数量
	*@return
	*
	*/
	__proto.getBezierPoints=function(pList,inSertCount,count){
		(inSertCount===void 0)&& (inSertCount=5);
		(count===void 0)&& (count=2);
		var i=0,len=0;
		len=pList.length;
		if (len < (count+1)*2)return [];
		var rst;
		rst=[];
		switch (count){
			case 2:
				this._calFun=this.getPoint2;
				break ;
			case 3:
				this._calFun=this.getPoint3;
				break ;
			default :
				return [];
			}
		while (this._controlPoints.length <=count){
			this._controlPoints.push(new Point());
		}
		for (i=0;i < count *2;i+=2){
			this._switchPoint(pList[i],pList[i+1]);
		}
		for (i=count *2;i < len;i+=2){
			this._switchPoint(pList[i],pList[i+1]);
			if ((i / 2)% count==0)
				this.insertPoints(inSertCount,rst);
		}
		return rst;
	}

	__static(Bezier,
	['I',function(){return this.I=new Bezier();}
	]);
	return Bezier;
})()


/**
*@private
*凸包算法。
*/
//class laya.maths.GrahamScan
var GrahamScan=(function(){
	function GrahamScan(){}
	__class(GrahamScan,'laya.maths.GrahamScan');
	GrahamScan.multiply=function(p1,p2,p0){
		return ((p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y));
	}

	GrahamScan.dis=function(p1,p2){
		return (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y);
	}

	GrahamScan._getPoints=function(count,tempUse,rst){
		(tempUse===void 0)&& (tempUse=false);
		if (!GrahamScan._mPointList)GrahamScan._mPointList=[];
		while (GrahamScan._mPointList.length < count)GrahamScan._mPointList.push(new Point());
		if (!rst)rst=[];
		rst.length=0;
		if (tempUse){
			GrahamScan.getFrom(rst,GrahamScan._mPointList,count);
			}else {
			GrahamScan.getFromR(rst,GrahamScan._mPointList,count);
		}
		return rst;
	}

	GrahamScan.getFrom=function(rst,src,count){
		var i=0;
		for (i=0;i < count;i++){
			rst.push(src[i]);
		}
		return rst;
	}

	GrahamScan.getFromR=function(rst,src,count){
		var i=0;
		for (i=0;i < count;i++){
			rst.push(src.pop());
		}
		return rst;
	}

	GrahamScan.pListToPointList=function(pList,tempUse){
		(tempUse===void 0)&& (tempUse=false);
		var i=0,len=pList.length / 2,rst=GrahamScan._getPoints(len,tempUse,GrahamScan._tempPointList);
		for (i=0;i < len;i++){
			rst[i].setTo(pList[i+i],pList[i+i+1]);
		}
		return rst;
	}

	GrahamScan.pointListToPlist=function(pointList){
		var i=0,len=pointList.length,rst=GrahamScan._temPList,tPoint;
		rst.length=0;
		for (i=0;i < len;i++){
			tPoint=pointList[i];
			rst.push(tPoint.x,tPoint.y);
		}
		return rst;
	}

	GrahamScan.scanPList=function(pList){
		return Utils.copyArray(pList,GrahamScan.pointListToPlist(GrahamScan.scan(GrahamScan.pListToPointList(pList,true))));
	}

	GrahamScan.scan=function(PointSet){
		var i=0,j=0,k=0,top=2,tmp,n=PointSet.length,ch;
		var _tmpDic={};
		var key;
		ch=GrahamScan._temArr;
		ch.length=0;
		n=PointSet.length;
		for (i=n-1;i >=0;i--){
			tmp=PointSet[i];
			key=tmp.x+"_"+tmp.y;
			if (!_tmpDic.hasOwnProperty(key)){
				_tmpDic[key]=true;
				ch.push(tmp);
			}
		}
		n=ch.length;
		Utils.copyArray(PointSet,ch);
		for (i=1;i < n;i++)
		if ((PointSet[i].y < PointSet[k].y)|| ((PointSet[i].y==PointSet[k].y)&& (PointSet[i].x < PointSet[k].x)))
			k=i;
		tmp=PointSet[0];
		PointSet[0]=PointSet[k];
		PointSet[k]=tmp;
		for (i=1;i < n-1;i++){
			k=i;
			for (j=i+1;j < n;j++)
			if ((GrahamScan.multiply(PointSet[j],PointSet[k],PointSet[0])> 0)|| ((GrahamScan.multiply(PointSet[j],PointSet[k],PointSet[0])==0)&& (GrahamScan.dis(PointSet[0],PointSet[j])< GrahamScan.dis(PointSet[0],PointSet[k]))))
				k=j;
			tmp=PointSet[i];
			PointSet[i]=PointSet[k];
			PointSet[k]=tmp;
		}
		ch=GrahamScan._temArr;
		ch.length=0;
		if (PointSet.length < 3){
			return Utils.copyArray(ch,PointSet);
		}
		ch.push(PointSet[0],PointSet[1],PointSet[2]);
		for (i=3;i < n;i++){
			while (ch.length >=2 && GrahamScan.multiply(PointSet[i],ch[ch.length-1],ch[ch.length-2])>=0)ch.pop();
			PointSet[i] && ch.push(PointSet[i]);
		}
		return ch;
	}

	GrahamScan._mPointList=null;
	GrahamScan._tempPointList=[];
	GrahamScan._temPList=[];
	GrahamScan._temArr=[];
	return GrahamScan;
})()


/**
*@private
*<code>MathUtil</code> 是一个数据处理工具类。
*/
//class laya.maths.MathUtil
var MathUtil=(function(){
	function MathUtil(){}
	__class(MathUtil,'laya.maths.MathUtil');
	MathUtil.subtractVector3=function(l,r,o){
		o[0]=l[0]-r[0];
		o[1]=l[1]-r[1];
		o[2]=l[2]-r[2];
	}

	MathUtil.lerp=function(left,right,amount){
		return left *(1-amount)+right *amount;
	}

	MathUtil.scaleVector3=function(f,b,e){
		e[0]=f[0] *b;
		e[1]=f[1] *b;
		e[2]=f[2] *b;
	}

	MathUtil.lerpVector3=function(l,r,t,o){
		var ax=l[0],ay=l[1],az=l[2];
		o[0]=ax+t *(r[0]-ax);
		o[1]=ay+t *(r[1]-ay);
		o[2]=az+t *(r[2]-az);
	}

	MathUtil.lerpVector4=function(l,r,t,o){
		var ax=l[0],ay=l[1],az=l[2],aw=l[3];
		o[0]=ax+t *(r[0]-ax);
		o[1]=ay+t *(r[1]-ay);
		o[2]=az+t *(r[2]-az);
		o[3]=aw+t *(r[3]-aw);
	}

	MathUtil.slerpQuaternionArray=function(a,Offset1,b,Offset2,t,out,Offset3){
		var ax=a[Offset1+0],ay=a[Offset1+1],az=a[Offset1+2],aw=a[Offset1+3],bx=b[Offset2+0],by=b[Offset2+1],bz=b[Offset2+2],bw=b[Offset2+3];
		var omega,cosom,sinom,scale0,scale1;
		cosom=ax *bx+ay *by+az *bz+aw *bw;
		if (cosom < 0.0){
			cosom=-cosom;
			bx=-bx;
			by=-by;
			bz=-bz;
			bw=-bw;
		}
		if ((1.0-cosom)> 0.000001){
			omega=Math.acos(cosom);
			sinom=Math.sin(omega);
			scale0=Math.sin((1.0-t)*omega)/ sinom;
			scale1=Math.sin(t *omega)/ sinom;
			}else {
			scale0=1.0-t;
			scale1=t;
		}
		out[Offset3+0]=scale0 *ax+scale1 *bx;
		out[Offset3+1]=scale0 *ay+scale1 *by;
		out[Offset3+2]=scale0 *az+scale1 *bz;
		out[Offset3+3]=scale0 *aw+scale1 *bw;
		return out;
	}

	MathUtil.getRotation=function(x0,y0,x1,y1){
		return Math.atan2(y1-y0,x1-x0)/ Math.PI *180;
	}

	MathUtil.sortBigFirst=function(a,b){
		if (a==b)
			return 0;
		return b > a ? 1 :-1;
	}

	MathUtil.sortSmallFirst=function(a,b){
		if (a==b)
			return 0;
		return b > a ?-1 :1;
	}

	MathUtil.sortNumBigFirst=function(a,b){
		return parseFloat(b)-parseFloat(a);
	}

	MathUtil.sortNumSmallFirst=function(a,b){
		return parseFloat(a)-parseFloat(b);
	}

	MathUtil.sortByKey=function(key,bigFirst,forceNum){
		(bigFirst===void 0)&& (bigFirst=false);
		(forceNum===void 0)&& (forceNum=true);
		var _sortFun;
		if (bigFirst){
			_sortFun=forceNum ? MathUtil.sortNumBigFirst :MathUtil.sortBigFirst;
			}else {
			_sortFun=forceNum ? MathUtil.sortNumSmallFirst :MathUtil.sortSmallFirst;
		}
		return function (a,b){
			return _sortFun(a[key],b[key]);
		}
	}

	return MathUtil;
})()


/**
*<p> <code>Matrix</code> 类表示一个转换矩阵，它确定如何将点从一个坐标空间映射到另一个坐标空间。</p>
*<p>您可以对一个显示对象执行不同的图形转换，方法是设置 Matrix 对象的属性，将该 Matrix 对象应用于 Transform 对象的 matrix 属性，然后应用该 Transform 对象作为显示对象的 transform 属性。这些转换函数包括平移（x 和 y 重新定位）、旋转、缩放和倾斜。</p>
*/
//class laya.maths.Matrix
var Matrix=(function(){
	function Matrix(a,b,c,d,tx,ty){
		/**缩放或旋转图像时影响像素沿 x 轴定位的值。*/
		//this.a=NaN;
		/**旋转或倾斜图像时影响像素沿 y 轴定位的值。*/
		//this.b=NaN;
		/**旋转或倾斜图像时影响像素沿 x 轴定位的值。*/
		//this.c=NaN;
		/**缩放或旋转图像时影响像素沿 y 轴定位的值。*/
		//this.d=NaN;
		/**沿 x 轴平移每个点的距离。*/
		//this.tx=NaN;
		/**沿 y 轴平移每个点的距离。*/
		//this.ty=NaN;
		/**@private 表示此对象是否在对象池中。*/
		this.inPool=false;
		/**@private 是否有改变矩阵的值。*/
		this.bTransform=false;
		(a===void 0)&& (a=1);
		(b===void 0)&& (b=0);
		(c===void 0)&& (c=0);
		(d===void 0)&& (d=1);
		(tx===void 0)&& (tx=0);
		(ty===void 0)&& (ty=0);
		this.a=a;
		this.b=b;
		this.c=c;
		this.d=d;
		this.tx=tx;
		this.ty=ty;
		this._checkTransform();
	}

	__class(Matrix,'laya.maths.Matrix');
	var __proto=Matrix.prototype;
	/**
	*将本矩阵设置为单位矩阵。
	*@return 返回当前矩形。
	*/
	__proto.identity=function(){
		this.a=this.d=1;
		this.b=this.tx=this.ty=this.c=0;
		this.bTransform=false;
		return this;
	}

	/**@private */
	__proto._checkTransform=function(){
		return this.bTransform=(this.a!==1 || this.b!==0 || this.c!==0 || this.d!==1);
	}

	/**
	*设置沿 x 、y 轴平移每个点的距离。
	*@param x 沿 x 轴平移每个点的距离。
	*@param y 沿 y 轴平移每个点的距离。
	*@return 返回对象本身
	*/
	__proto.setTranslate=function(x,y){
		this.tx=x;
		this.ty=y;
		return this;
	}

	/**
	*沿 x 和 y 轴平移矩阵，平移的变化量由 x 和 y 参数指定。
	*@param x 沿 x 轴向右移动的量（以像素为单位）。
	*@param y 沿 y 轴向下移动的量（以像素为单位）。
	*@return 返回此矩形对象。
	*/
	__proto.translate=function(x,y){
		this.tx+=x;
		this.ty+=y;
		return this;
	}

	/**
	*对矩阵应用缩放转换。
	*@param x 用于沿 x 轴缩放对象的乘数。
	*@param y 用于沿 y 轴缩放对象的乘数。
	*/
	__proto.scale=function(x,y){
		this.a *=x;
		this.d *=y;
		this.c *=x;
		this.b *=y;
		this.tx *=x;
		this.ty *=y;
		this.bTransform=true;
	}

	/**
	*对 Matrix 对象应用旋转转换。
	*@param angle 以弧度为单位的旋转角度。
	*/
	__proto.rotate=function(angle){
		var cos=Math.cos(angle);
		var sin=Math.sin(angle);
		var a1=this.a;
		var c1=this.c;
		var tx1=this.tx;
		this.a=a1 *cos-this.b *sin;
		this.b=a1 *sin+this.b *cos;
		this.c=c1 *cos-this.d *sin;
		this.d=c1 *sin+this.d *cos;
		this.tx=tx1 *cos-this.ty *sin;
		this.ty=tx1 *sin+this.ty *cos;
		this.bTransform=true;
	}

	/**
	*对 Matrix 对象应用倾斜转换。
	*@param x 沿着 X 轴的 2D 倾斜弧度。
	*@param y 沿着 Y 轴的 2D 倾斜弧度。
	*@return 当前 Matrix 对象。
	*/
	__proto.skew=function(x,y){
		var tanX=Math.tan(x);
		var tanY=Math.tan(y);
		var a1=this.a;
		var b1=this.b;
		this.a+=tanY *this.c;
		this.b+=tanY *this.d;
		this.c+=tanX *a1;
		this.d+=tanX *b1;
		return this;
	}

	/**
	*对指定的点应用当前矩阵的逆转化并返回此点。
	*@param out 待转化的点 Point 对象。
	*@return 返回out
	*/
	__proto.invertTransformPoint=function(out){
		var a1=this.a;
		var b1=this.b;
		var c1=this.c;
		var d1=this.d;
		var tx1=this.tx;
		var n=a1 *d1-b1 *c1;
		var a2=d1 / n;
		var b2=-b1 / n;
		var c2=-c1 / n;
		var d2=a1 / n;
		var tx2=(c1 *this.ty-d1 *tx1)/ n;
		var ty2=-(a1 *this.ty-b1 *tx1)/ n;
		return out.setTo(a2 *out.x+c2 *out.y+tx2,b2 *out.x+d2 *out.y+ty2);
	}

	/**
	*将 Matrix 对象表示的几何转换应用于指定点。
	*@param out 用来设定输出结果的点。
	*@return 返回out
	*/
	__proto.transformPoint=function(out){
		return out.setTo(this.a *out.x+this.c *out.y+this.tx,this.b *out.x+this.d *out.y+this.ty);
	}

	/**
	*将 Matrix 对象表示的几何转换应用于指定点，忽略tx、ty。
	*@param out 用来设定输出结果的点。
	*@return 返回out
	*/
	__proto.transformPointN=function(out){
		return out.setTo(this.a *out.x+this.c *out.y ,this.b *out.x+this.d *out.y);
	}

	/**
	*@private
	*将 Matrix 对象表示的几何转换应用于指定点。
	*@param data 点集合。
	*@param out 存储应用转化的点的列表。
	*@return 返回out数组
	*/
	__proto.transformPointArray=function(data,out){
		var len=data.length;
		for (var i=0;i < len;i+=2){
			var x=data[i],y=data[i+1];
			out[i]=this.a *x+this.c *y+this.tx;
			out[i+1]=this.b *x+this.d *y+this.ty;
		}
		return out;
	}

	/**
	*@private
	*将 Matrix 对象表示的几何缩放转换应用于指定点。
	*@param data 点集合。
	*@param out 存储应用转化的点的列表。
	*@return 返回out数组
	*/
	__proto.transformPointArrayScale=function(data,out){
		var len=data.length;
		for (var i=0;i < len;i+=2){
			var x=data[i],y=data[i+1];
			out[i]=this.a *x+this.c *y;
			out[i+1]=this.b *x+this.d *y;
		}
		return out;
	}

	/**
	*获取 X 轴缩放值。
	*@return X 轴缩放值。
	*/
	__proto.getScaleX=function(){
		return this.b===0 ? this.a :Math.sqrt(this.a *this.a+this.b *this.b);
	}

	/**
	*获取 Y 轴缩放值。
	*@return Y 轴缩放值。
	*/
	__proto.getScaleY=function(){
		return this.c===0 ? this.d :Math.sqrt(this.c *this.c+this.d *this.d);
	}

	/**
	*执行原始矩阵的逆转换。
	*@return 当前矩阵对象。
	*/
	__proto.invert=function(){
		var a1=this.a;
		var b1=this.b;
		var c1=this.c;
		var d1=this.d;
		var tx1=this.tx;
		var n=a1 *d1-b1 *c1;
		this.a=d1 / n;
		this.b=-b1 / n;
		this.c=-c1 / n;
		this.d=a1 / n;
		this.tx=(c1 *this.ty-d1 *tx1)/ n;
		this.ty=-(a1 *this.ty-b1 *tx1)/ n;
		return this;
	}

	/**
	*将 Matrix 的成员设置为指定值。
	*@param a 缩放或旋转图像时影响像素沿 x 轴定位的值。
	*@param b 旋转或倾斜图像时影响像素沿 y 轴定位的值。
	*@param c 旋转或倾斜图像时影响像素沿 x 轴定位的值。
	*@param d 缩放或旋转图像时影响像素沿 y 轴定位的值。
	*@param tx 沿 x 轴平移每个点的距离。
	*@param ty 沿 y 轴平移每个点的距离。
	*@return 当前矩阵对象。
	*/
	__proto.setTo=function(a,b,c,d,tx,ty){
		this.a=a,this.b=b,this.c=c,this.d=d,this.tx=tx,this.ty=ty;
		return this;
	}

	/**
	*将指定矩阵与当前矩阵连接，从而将这两个矩阵的几何效果有效地结合在一起。
	*@param matrix 要连接到源矩阵的矩阵。
	*@return 当前矩阵。
	*/
	__proto.concat=function(matrix){
		var a=this.a;
		var c=this.c;
		var tx=this.tx;
		this.a=a *matrix.a+this.b *matrix.c;
		this.b=a *matrix.b+this.b *matrix.d;
		this.c=c *matrix.a+this.d *matrix.c;
		this.d=c *matrix.b+this.d *matrix.d;
		this.tx=tx *matrix.a+this.ty *matrix.c+matrix.tx;
		this.ty=tx *matrix.b+this.ty *matrix.d+matrix.ty;
		return this;
	}

	/**
	*@private
	*对矩阵应用缩放转换。反向相乘
	*@param x 用于沿 x 轴缩放对象的乘数。
	*@param y 用于沿 y 轴缩放对象的乘数。
	*/
	__proto.scaleEx=function(x,y){
		var ba=this.a,bb=this.b,bc=this.c,bd=this.d;
		if (bb!==0 || bc!==0){
			this.a=x *ba;
			this.b=x *bb;
			this.c=y *bc;
			this.d=y *bd;
			}else {
			this.a=x *ba;
			this.b=0 *bd;
			this.c=0 *ba;
			this.d=y *bd;
		}
		this.bTransform=true;
	}

	/**
	*@private
	*对 Matrix 对象应用旋转转换。反向相乘
	*@param angle 以弧度为单位的旋转角度。
	*/
	__proto.rotateEx=function(angle){
		var cos=Math.cos(angle);
		var sin=Math.sin(angle);
		var ba=this.a,bb=this.b,bc=this.c,bd=this.d;
		if (bb!==0 || bc!==0){
			this.a=cos *ba+sin *bc;
			this.b=cos *bb+sin *bd;
			this.c=-sin *ba+cos *bc;
			this.d=-sin *bb+cos *bd;
			}else {
			this.a=cos *ba;
			this.b=sin *bd;
			this.c=-sin *ba;
			this.d=cos *bd;
		}
		this.bTransform=true;
	}

	/**
	*返回此 Matrix 对象的副本。
	*@return 与原始实例具有完全相同的属性的新 Matrix 实例。
	*/
	__proto.clone=function(){
		var dec=Matrix.create();
		dec.a=this.a;
		dec.b=this.b;
		dec.c=this.c;
		dec.d=this.d;
		dec.tx=this.tx;
		dec.ty=this.ty;
		dec.bTransform=this.bTransform;
		return dec;
	}

	/**
	*将当前 Matrix 对象中的所有矩阵数据复制到指定的 Matrix 对象中。
	*@param dec 要复制当前矩阵数据的 Matrix 对象。
	*@return 已复制当前矩阵数据的 Matrix 对象。
	*/
	__proto.copyTo=function(dec){
		dec.a=this.a;
		dec.b=this.b;
		dec.c=this.c;
		dec.d=this.d;
		dec.tx=this.tx;
		dec.ty=this.ty;
		dec.bTransform=this.bTransform;
		return dec;
	}

	/**
	*返回列出该 Matrix 对象属性的文本值。
	*@return 一个字符串，它包含 Matrix 对象的属性值：a、b、c、d、tx 和 ty。
	*/
	__proto.toString=function(){
		return this.a+","+this.b+","+this.c+","+this.d+","+this.tx+","+this.ty;
	}

	/**
	*销毁此对象。
	*/
	__proto.destroy=function(){
		if (this.inPool)return;
		var cache=Matrix._cache;
		this.inPool=true;
		cache._length || (cache._length=0);
		cache[cache._length++]=this;
		this.a=this.d=1;
		this.b=this.c=this.tx=this.ty=0;
		this.bTransform=false;
	}

	Matrix.mul=function(m1,m2,out){
		var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
		var ba=m2.a,bb=m2.b,bc=m2.c,bd=m2.d,btx=m2.tx,bty=m2.ty;
		if (bb!==0 || bc!==0){
			out.a=aa *ba+ab *bc;
			out.b=aa *bb+ab *bd;
			out.c=ac *ba+ad *bc;
			out.d=ac *bb+ad *bd;
			out.tx=ba *atx+bc *aty+btx;
			out.ty=bb *atx+bd *aty+bty;
			}else {
			out.a=aa *ba;
			out.b=ab *bd;
			out.c=ac *ba;
			out.d=ad *bd;
			out.tx=ba *atx+btx;
			out.ty=bd *aty+bty;
		}
		return out;
	}

	Matrix.mul16=function(m1,m2,out){
		var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
		var ba=m2.a,bb=m2.b,bc=m2.c,bd=m2.d,btx=m2.tx,bty=m2.ty;
		if (bb!==0 || bc!==0){
			out[0]=aa *ba+ab *bc;
			out[1]=aa *bb+ab *bd;
			out[4]=ac *ba+ad *bc;
			out[5]=ac *bb+ad *bd;
			out[12]=ba *atx+bc *aty+btx;
			out[13]=bb *atx+bd *aty+bty;
			}else {
			out[0]=aa *ba;
			out[1]=ab *bd;
			out[4]=ac *ba;
			out[5]=ad *bd;
			out[12]=ba *atx+btx;
			out[13]=bd *aty+bty;
		}
		return out;
	}

	Matrix.mulPre=function(m1,ba,bb,bc,bd,btx,bty,out){
		var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
		if (bb!==0 || bc!==0){
			out.a=aa *ba+ab *bc;
			out.b=aa *bb+ab *bd;
			out.c=ac *ba+ad *bc;
			out.d=ac *bb+ad *bd;
			out.tx=ba *atx+bc *aty+btx;
			out.ty=bb *atx+bd *aty+bty;
			}else {
			out.a=aa *ba;
			out.b=ab *bd;
			out.c=ac *ba;
			out.d=ad *bd;
			out.tx=ba *atx+btx;
			out.ty=bd *aty+bty;
		}
		return out;
	}

	Matrix.mulPos=function(m1,aa,ab,ac,ad,atx,aty,out){
		var ba=m1.a,bb=m1.b,bc=m1.c,bd=m1.d,btx=m1.tx,bty=m1.ty;
		if (bb!==0 || bc!==0){
			out.a=aa *ba+ab *bc;
			out.b=aa *bb+ab *bd;
			out.c=ac *ba+ad *bc;
			out.d=ac *bb+ad *bd;
			out.tx=ba *atx+bc *aty+btx;
			out.ty=bb *atx+bd *aty+bty;
			}else {
			out.a=aa *ba;
			out.b=ab *bd;
			out.c=ac *ba;
			out.d=ad *bd;
			out.tx=ba *atx+btx;
			out.ty=bd *aty+bty;
		}
		return out;
	}

	Matrix.preMul=function(parent,self,out){
		var pa=parent.a,pb=parent.b,pc=parent.c,pd=parent.d;
		var na=self.a,nb=self.b,nc=self.c,nd=self.d,ntx=self.tx,nty=self.ty;
		out.a=na *pa;
		out.b=out.c=0;
		out.d=nd *pd;
		out.tx=ntx *pa+parent.tx;
		out.ty=nty *pd+parent.ty;
		if (nb!==0 || nc!==0 || pb!==0 || pc!==0){
			out.a+=nb *pc;
			out.d+=nc *pb;
			out.b+=na *pb+nb *pd;
			out.c+=nc *pa+nd *pc;
			out.tx+=nty *pc;
			out.ty+=ntx *pb;
		}
		return out;
	}

	Matrix.preMulXY=function(parent,x,y,out){
		var pa=parent.a,pb=parent.b,pc=parent.c,pd=parent.d;
		out.a=pa;
		out.b=pb;
		out.c=pc;
		out.d=pd;
		out.tx=x *pa+parent.tx+y *pc;
		out.ty=y *pd+parent.ty+x *pb;
		return out;
	}

	Matrix.create=function(){
		var cache=Matrix._cache;
		var mat=!cache._length ? (new Matrix()):cache[--cache._length];
		mat.inPool=false;
		return mat;
	}

	Matrix.EMPTY=new Matrix();
	Matrix.TEMP=new Matrix();
	Matrix._cache=[];
	return Matrix;
})()


/**
*<code>Point</code> 对象表示二维坐标系统中的某个位置，其中 x 表示水平轴，y 表示垂直轴。
*/
//class laya.maths.Point
var Point=(function(){
	function Point(x,y){
		/**该点的水平坐标。*/
		//this.x=NaN;
		/**该点的垂直坐标。*/
		//this.y=NaN;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		this.x=x;
		this.y=y;
	}

	__class(Point,'laya.maths.Point');
	var __proto=Point.prototype;
	/**
	*将 <code>Point</code> 的成员设置为指定值。
	*@param x 水平坐标。
	*@param y 垂直坐标。
	*@return 当前 Point 对象。
	*/
	__proto.setTo=function(x,y){
		this.x=x;
		this.y=y;
		return this;
	}

	/**
	*计算当前点和目标点(x，y)的距离。
	*@param x 水平坐标。
	*@param y 垂直坐标。
	*@return 返回当前点和目标点之间的距离。
	*/
	__proto.distance=function(x,y){
		return Math.sqrt((this.x-x)*(this.x-x)+(this.y-y)*(this.y-y));
	}

	/**返回包含 x 和 y 坐标的值的字符串。*/
	__proto.toString=function(){
		return this.x+","+this.y;
	}

	/**
	*标准化向量。
	*/
	__proto.normalize=function(){
		var d=Math.sqrt(this.x *this.x+this.y *this.y);
		if (d > 0){
			var id=1.0 / d;
			this.x *=id;
			this.y *=id;
		}
	}

	Point.TEMP=new Point();
	Point.EMPTY=new Point();
	return Point;
})()


/**
*<p><code>Rectangle</code> 对象是按其位置（由它左上角的点 (x,y)确定）以及宽度和高度定义的区域。</p>
*<p>Rectangle 类的 x、y、width 和 height 属性相互独立；更改一个属性的值不会影响其他属性。</p>
*/
//class laya.maths.Rectangle
var Rectangle=(function(){
	function Rectangle(x,y,width,height){
		/**矩形左上角的 X 轴坐标。*/
		//this.x=NaN;
		/**矩形左上角的 Y 轴坐标。*/
		//this.y=NaN;
		/**矩形的宽度。*/
		//this.width=NaN;
		/**矩形的高度。*/
		//this.height=NaN;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		this.x=x;
		this.y=y;
		this.width=width;
		this.height=height;
	}

	__class(Rectangle,'laya.maths.Rectangle');
	var __proto=Rectangle.prototype;
	/**
	*将 Rectangle 的属性设置为指定值。
	*@param x x 矩形左上角的 X 轴坐标。
	*@param y x 矩形左上角的 Y 轴坐标。
	*@param width 矩形的宽度。
	*@param height 矩形的高。
	*@return 返回属性值修改后的矩形对象本身。
	*/
	__proto.setTo=function(x,y,width,height){
		this.x=x;
		this.y=y;
		this.width=width;
		this.height=height;
		return this;
	}

	/**
	*复制 source 对象的属性值到此矩形对象中。
	*@param sourceRect 源 Rectangle 对象。
	*@return 返回属性值修改后的矩形对象本身。
	*/
	__proto.copyFrom=function(source){
		this.x=source.x;
		this.y=source.y;
		this.width=source.width;
		this.height=source.height;
		return this;
	}

	/**
	*确定由此 Rectangle 对象定义的矩形区域内是否包含指定的点。
	*@param x 点的 X 轴坐标值（水平位置）。
	*@param y 点的 Y 轴坐标值（垂直位置）。
	*@return 如果 Rectangle 对象包含指定的点，则值为 true；否则为 false。
	*/
	__proto.contains=function(x,y){
		if (this.width <=0 || this.height <=0)return false;
		if (x >=this.x && x < this.right){
			if (y >=this.y && y < this.bottom){
				return true;
			}
		}
		return false;
	}

	/**
	*确定在 rect 参数中指定的对象是否与此 Rectangle 对象相交。此方法检查指定的 Rectangle 对象的 x、y、width 和 height 属性，以查看它是否与此 Rectangle 对象相交。
	*@param rect Rectangle 对象。
	*@return 如果传入的矩形对象与此对象相交，则返回 true 值，否则返回 false。
	*/
	__proto.intersects=function(rect){
		return !(rect.x > (this.x+this.width)|| (rect.x+rect.width)< this.x || rect.y > (this.y+this.height)|| (rect.y+rect.height)< this.y);
	}

	/**
	*如果在 rect 参数中指定的 Rectangle 对象与此 Rectangle 对象相交，则返回交集区域作为 Rectangle 对象。如果矩形不相交，则此方法返回null。
	*@param rect 待比较的矩形区域。
	*@param out （可选）待输出的矩形区域。如果为空则创建一个新的。建议：尽量复用对象，减少对象创建消耗。
	*@return 返回相交的矩形区域对象。
	*/
	__proto.intersection=function(rect,out){
		if (!this.intersects(rect))return null;
		out || (out=new Rectangle());
		out.x=Math.max(this.x,rect.x);
		out.y=Math.max(this.y,rect.y);
		out.width=Math.min(this.right,rect.right)-out.x;
		out.height=Math.min(this.bottom,rect.bottom)-out.y;
		return out;
	}

	/**
	*<p>矩形联合，通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 Rectangle 对象。</p>
	*<p>注意：union()方法忽略高度或宽度值为 0 的矩形，如：var rect2:Rectangle=new Rectangle(300,300,50,0);</p>
	*@param 要添加到此 Rectangle 对象的 Rectangle 对象。
	*@param out 用于存储输出结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。Rectangle.TEMP对象用于对象复用。
	*@return 充当两个矩形的联合的新 Rectangle 对象。
	*/
	__proto.union=function(source,out){
		out || (out=new Rectangle());
		this.clone(out);
		if (source.width <=0 || source.height <=0)return out;
		out.addPoint(source.x,source.y);
		out.addPoint(source.right,source.bottom);
		return this;
	}

	/**
	*返回一个 Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
	*@param out （可选）用于存储结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。。Rectangle.TEMP对象用于对象复用。
	*@return Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
	*/
	__proto.clone=function(out){
		out || (out=new Rectangle());
		out.x=this.x;
		out.y=this.y;
		out.width=this.width;
		out.height=this.height;
		return out;
	}

	/**
	*当前 Rectangle 对象的水平位置 x 和垂直位置 y 以及高度 width 和宽度 height 以逗号连接成的字符串。
	*/
	__proto.toString=function(){
		return this.x+","+this.y+","+this.width+","+this.height;
	}

	/**
	*检测传入的 Rectangle 对象的属性是否与当前 Rectangle 对象的属性 x、y、width、height 属性值都相等。
	*@param rect 待比较的 Rectangle 对象。
	*@return 如果判断的属性都相等，则返回 true ,否则返回 false。
	*/
	__proto.equals=function(rect){
		if (!rect || rect.x!==this.x || rect.y!==this.y || rect.width!==this.width || rect.height!==this.height)return false;
		return true;
	}

	/**
	*<p>为当前矩形对象加一个点，以使当前矩形扩展为包含当前矩形和此点的最小矩形。</p>
	*<p>此方法会修改本对象。</p>
	*@param x 点的 X 坐标。
	*@param y 点的 Y 坐标。
	*@return 返回此 Rectangle 对象。
	*/
	__proto.addPoint=function(x,y){
		this.x > x && (this.width+=this.x-x,this.x=x);
		this.y > y && (this.height+=this.y-y,this.y=y);
		if (this.width < x-this.x)this.width=x-this.x;
		if (this.height < y-this.y)this.height=y-this.y;
		return this;
	}

	/**
	*@private
	*返回代表当前矩形的顶点数据。
	*@return 顶点数据。
	*/
	__proto._getBoundPoints=function(){
		var rst=Rectangle._temB;
		rst.length=0;
		if (this.width==0 || this.height==0)return rst;
		rst.push(this.x,this.y,this.x+this.width,this.y,this.x,this.y+this.height,this.x+this.width,this.y+this.height);
		return rst;
	}

	/**
	*确定此 Rectangle 对象是否为空。
	*@return 如果 Rectangle 对象的宽度或高度小于等于 0，则返回 true 值，否则返回 false。
	*/
	__proto.isEmpty=function(){
		if (this.width <=0 || this.height <=0)return true;
		return false;
	}

	/**此矩形右侧的 X 轴坐标。 x 和 width 属性的和。*/
	__getset(0,__proto,'right',function(){
		return this.x+this.width;
	});

	/**此矩形底端的 Y 轴坐标。y 和 height 属性的和。*/
	__getset(0,__proto,'bottom',function(){
		return this.y+this.height;
	});

	Rectangle._getBoundPointS=function(x,y,width,height){
		var rst=Rectangle._temA;
		rst.length=0;
		if (width==0 || height==0)return rst;
		rst.push(x,y,x+width,y,x,y+height,x+width,y+height);
		return rst;
	}

	Rectangle._getWrapRec=function(pointList,rst){
		if (!pointList || pointList.length < 1)return rst ? rst.setTo(0,0,0,0):Rectangle.TEMP.setTo(0,0,0,0);
		rst=rst ? rst :new Rectangle();
		var i,len=pointList.length,minX,maxX,minY,maxY,tPoint=Point.TEMP;
		minX=minY=99999;
		maxX=maxY=-minX;
		for (i=0;i < len;i+=2){
			tPoint.x=pointList[i];
			tPoint.y=pointList[i+1];
			minX=minX < tPoint.x ? minX :tPoint.x;
			minY=minY < tPoint.y ? minY :tPoint.y;
			maxX=maxX > tPoint.x ? maxX :tPoint.x;
			maxY=maxY > tPoint.y ? maxY :tPoint.y;
		}
		return rst.setTo(minX,minY,maxX-minX,maxY-minY);
	}

	Rectangle.EMPTY=new Rectangle();
	Rectangle.TEMP=new Rectangle();
	Rectangle._temB=[];
	Rectangle._temA=[];
	return Rectangle;
})()


/**
*<code>SoundManager</code> 是一个声音管理类。提供了对背景音乐、音效的播放控制方法。
*引擎默认有两套声音方案：WebAudio和H5Audio
*播放音效，优先使用WebAudio播放声音，如果WebAudio不可用，则用H5Audio播放，H5Audio在部分机器上有兼容问题（比如不能混音，播放有延迟等）。
*播放背景音乐，则使用H5Audio播放（使用WebAudio会增加特别大的内存，并且要等加载完毕后才能播放，有延迟）
*建议背景音乐用mp3类型，音效用wav或者mp3类型（如果打包为app，音效只能用wav格式）。
*详细教程及声音格式请参考：http://ldc.layabox.com/doc/?nav=ch-as-1-7-0
*/
//class laya.media.SoundManager
var SoundManager=(function(){
	function SoundManager(){}
	__class(SoundManager,'laya.media.SoundManager');
	__getset(1,SoundManager,'useAudioMusic',function(){
		return SoundManager._useAudioMusic;
		},function(value){
		SoundManager._useAudioMusic=value;
		if (value){
			SoundManager._musicClass=AudioSound;
			}else{
			SoundManager._musicClass=null;
		}
	});

	/**
	*失去焦点后是否自动停止背景音乐。
	*@param v Boolean 失去焦点后是否自动停止背景音乐。
	*
	*/
	/**
	*失去焦点后是否自动停止背景音乐。
	*/
	__getset(1,SoundManager,'autoStopMusic',function(){
		return SoundManager._autoStopMusic;
		},function(v){
		Laya.stage.off(/*laya.events.Event.BLUR*/"blur",null,SoundManager._stageOnBlur);
		Laya.stage.off(/*laya.events.Event.FOCUS*/"focus",null,SoundManager._stageOnFocus);
		Laya.stage.off(/*laya.events.Event.VISIBILITY_CHANGE*/"visibilitychange",null,SoundManager._visibilityChange);
		SoundManager._autoStopMusic=v;
		if (v){
			Laya.stage.on(/*laya.events.Event.BLUR*/"blur",null,SoundManager._stageOnBlur);
			Laya.stage.on(/*laya.events.Event.FOCUS*/"focus",null,SoundManager._stageOnFocus);
			Laya.stage.on(/*laya.events.Event.VISIBILITY_CHANGE*/"visibilitychange",null,SoundManager._visibilityChange);
		}
	});

	/**
	*背景音乐和所有音效是否静音。
	*/
	__getset(1,SoundManager,'muted',function(){
		return SoundManager._muted;
		},function(value){
		if (value==SoundManager._muted)return;
		if (value){
			SoundManager.stopAllSound();
		}
		SoundManager.musicMuted=value;
		SoundManager._muted=value;
	});

	/**
	*背景音乐（不包括音效）是否静音。
	*/
	__getset(1,SoundManager,'musicMuted',function(){
		return SoundManager._musicMuted;
		},function(value){
		if (value==SoundManager._musicMuted)return;
		if (value){
			if (SoundManager._tMusic){
				if (SoundManager._musicChannel&&!SoundManager._musicChannel.isStopped){
					SoundManager._musicChannel.pause();
					}else{
					SoundManager._musicChannel=null;
				}
				}else{
				SoundManager._musicChannel=null;
			}
			SoundManager._musicMuted=value;
			}else {
			SoundManager._musicMuted=value;
			if (SoundManager._tMusic){
				if (SoundManager._musicChannel){
					SoundManager._musicChannel.resume();
				}
			}
		}
	});

	/**
	*所有音效（不包括背景音乐）是否静音。
	*/
	__getset(1,SoundManager,'soundMuted',function(){
		return SoundManager._soundMuted;
		},function(value){
		SoundManager._soundMuted=value;
	});

	SoundManager.addChannel=function(channel){
		if (SoundManager._channels.indexOf(channel)>=0)return;
		SoundManager._channels.push(channel);
	}

	SoundManager.removeChannel=function(channel){
		var i=0;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			if (SoundManager._channels[i]==channel){
				SoundManager._channels.splice(i,1);
			}
		}
	}

	SoundManager.disposeSoundIfNotUsed=function(url){
		var i=0;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			if (SoundManager._channels[i].url==url){
				return;
			}
		}
		SoundManager.destroySound(url);
	}

	SoundManager._visibilityChange=function(){
		if (Laya.stage.isVisibility){
			SoundManager._stageOnFocus();
			}else {
			SoundManager._stageOnBlur();
		}
	}

	SoundManager._stageOnBlur=function(){
		SoundManager._isActive=false;
		if (SoundManager._musicChannel){
			if (!SoundManager._musicChannel.isStopped){
				SoundManager._blurPaused=true;
				SoundManager._musicChannel.pause();
			}
		}
		SoundManager.stopAllSound();
		Laya.stage.once(/*laya.events.Event.MOUSE_DOWN*/"mousedown",null,SoundManager._stageOnFocus);
	}

	SoundManager._recoverWebAudio=function(){
		if(WebAudioSound.ctx&&WebAudioSound.ctx.state!="running"&&WebAudioSound.ctx.resume)
			WebAudioSound.ctx.resume();
	}

	SoundManager._stageOnFocus=function(){
		SoundManager._isActive=true;
		SoundManager._recoverWebAudio();
		Laya.stage.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",null,SoundManager._stageOnFocus);
		if (SoundManager._blurPaused){
			if (SoundManager._musicChannel && SoundManager._musicChannel.isStopped){
				SoundManager._blurPaused=false;
				SoundManager._musicChannel.resume();
			}
		}
	}

	SoundManager.playSound=function(url,loops,complete,soundClass,startTime){
		(loops===void 0)&& (loops=1);
		(startTime===void 0)&& (startTime=0);
		if (!SoundManager._isActive || !url)return null;
		if (SoundManager._muted)return null;
		SoundManager._recoverWebAudio();
		url=URL.formatURL(url);
		if (url==SoundManager._tMusic){
			if (SoundManager._musicMuted)return null;
			}else {
			if (Render.isConchApp){
				var ext=Utils.getFileExtension(url);
				if (ext !="wav" && ext !="ogg"){
					alert("The sound only supports wav or ogg format,for optimal performance reason,please refer to the official website document.");
					return null;
				}
			}
			if (SoundManager._soundMuted)return null;
		};
		var tSound;
		if (!Browser.onMiniGame){
			tSound=Laya.loader.getRes(url);
		}
		if (!soundClass)soundClass=SoundManager._soundClass;
		if (!tSound){
			tSound=new soundClass();
			tSound.load(url);
			if (!Browser.onMiniGame){
				Loader.cacheRes(url,tSound);
			}
		};
		var channel;
		channel=tSound.play(startTime,loops);
		if (!channel)return null;
		channel.url=url;
		channel.volume=(url==SoundManager._tMusic)? SoundManager.musicVolume :SoundManager.soundVolume;
		channel.completeHandler=complete;
		return channel;
	}

	SoundManager.destroySound=function(url){
		var tSound=Laya.loader.getRes(url);
		if (tSound){
			Loader.clearRes(url);
			tSound.dispose();
		}
	}

	SoundManager.playMusic=function(url,loops,complete,startTime){
		(loops===void 0)&& (loops=0);
		(startTime===void 0)&& (startTime=0);
		url=URL.formatURL(url);
		SoundManager._tMusic=url;
		if (SoundManager._musicChannel)SoundManager._musicChannel.stop();
		return SoundManager._musicChannel=SoundManager.playSound(url,loops,complete,SoundManager._musicClass,startTime);
	}

	SoundManager.stopSound=function(url){
		url=URL.formatURL(url);
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			if (channel.url==url){
				channel.stop();
			}
		}
	}

	SoundManager.stopAll=function(){
		SoundManager._tMusic=null;
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			channel.stop();
		}
	}

	SoundManager.stopAllSound=function(){
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			if (channel.url !=SoundManager._tMusic){
				channel.stop();
			}
		}
	}

	SoundManager.stopMusic=function(){
		if (SoundManager._musicChannel)SoundManager._musicChannel.stop();
		SoundManager._tMusic=null;
	}

	SoundManager.setSoundVolume=function(volume,url){
		if (url){
			url=URL.formatURL(url);
			SoundManager._setVolume(url,volume);
			}else {
			SoundManager.soundVolume=volume;
			var i=0;
			var channel;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				channel=SoundManager._channels[i];
				if (channel.url !=SoundManager._tMusic){
					channel.volume=volume;
				}
			}
		}
	}

	SoundManager.setMusicVolume=function(volume){
		SoundManager.musicVolume=volume;
		SoundManager._setVolume(SoundManager._tMusic,volume);
	}

	SoundManager._setVolume=function(url,volume){
		url=URL.formatURL(url);
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			if (channel.url==url){
				channel.volume=volume;
			}
		}
	}

	SoundManager.musicVolume=1;
	SoundManager.soundVolume=1;
	SoundManager.playbackRate=1;
	SoundManager._useAudioMusic=true;
	SoundManager._muted=false;
	SoundManager._soundMuted=false;
	SoundManager._musicMuted=false;
	SoundManager._tMusic=null;
	SoundManager._musicChannel=null;
	SoundManager._channels=[];
	SoundManager._autoStopMusic=false;
	SoundManager._blurPaused=false;
	SoundManager._isActive=true;
	SoundManager._soundClass=null;
	SoundManager._musicClass=null;
	SoundManager.autoReleaseSound=true;
	return SoundManager;
})()


/**
*<p> <code>LocalStorage</code> 类用于没有时间限制的数据存储。</p>
*/
//class laya.net.LocalStorage
var LocalStorage=(function(){
	var Storage;
	function LocalStorage(){}
	__class(LocalStorage,'laya.net.LocalStorage');
	LocalStorage.__init__=function(){
		if (!LocalStorage._baseClass){
			LocalStorage._baseClass=Storage;
			Storage.init();
		}
		LocalStorage.items=LocalStorage._baseClass.items;
		LocalStorage.support=LocalStorage._baseClass.support;
	}

	LocalStorage.setItem=function(key,value){
		LocalStorage._baseClass.setItem(key,value);
	}

	LocalStorage.getItem=function(key){
		return LocalStorage._baseClass.getItem(key);
	}

	LocalStorage.setJSON=function(key,value){
		LocalStorage._baseClass.setJSON(key,value);
	}

	LocalStorage.getJSON=function(key){
		return LocalStorage._baseClass.getJSON(key);
	}

	LocalStorage.removeItem=function(key){
		LocalStorage._baseClass.removeItem(key);
	}

	LocalStorage.clear=function(){
		LocalStorage._baseClass.clear();
	}

	LocalStorage._baseClass=null;
	LocalStorage.items=null;
	LocalStorage.support=false;
	LocalStorage.__init$=function(){
		//class Storage
		Storage=(function(){
			function Storage(){}
			__class(Storage,'');
			Storage.init=function(){
				/*__JS__ */try{Storage.support=true;Storage.items=window.localStorage;Storage.setItem('laya','1');Storage.removeItem('laya');}catch(e){Storage.support=false;}if(!Storage.support)console.log('LocalStorage is not supprot or browser is private mode.');
			}
			Storage.setItem=function(key,value){
				try {
					Storage.support && Storage.items.setItem(key,value);
					}catch (e){
					console.warn("set localStorage failed",e);
				}
			}
			Storage.getItem=function(key){
				return Storage.support ? Storage.items.getItem(key):null;
			}
			Storage.setJSON=function(key,value){
				try {
					Storage.support && Storage.items.setItem(key,JSON.stringify(value));
					}catch (e){
					console.warn("set localStorage failed",e);
				}
			}
			Storage.getJSON=function(key){
				return JSON.parse(Storage.support ? Storage.items.getItem(key):null);
			}
			Storage.removeItem=function(key){
				Storage.support && Storage.items.removeItem(key);
			}
			Storage.clear=function(){
				Storage.support && Storage.items.clear();
			}
			Storage.items=null;
			Storage.support=false;
			return Storage;
		})()
	}

	return LocalStorage;
})()


/**
*<p>资源版本的生成由layacmd或IDE完成，使用 <code>ResourceVersion</code> 简化使用过程。</p>
*<p>调用 <code>enable</code> 启用资源版本管理。</p>
*/
//class laya.net.ResourceVersion
var ResourceVersion=(function(){
	function ResourceVersion(){}
	__class(ResourceVersion,'laya.net.ResourceVersion');
	ResourceVersion.enable=function(manifestFile,callback,type){
		(type===void 0)&& (type=2);
		laya.net.ResourceVersion.type=type;
		Laya.loader.load(manifestFile,Handler.create(null,ResourceVersion.onManifestLoaded,[callback]),null,/*laya.net.Loader.JSON*/"json");
		URL.customFormat=ResourceVersion.addVersionPrefix;
	}

	ResourceVersion.onManifestLoaded=function(callback,data){
		ResourceVersion.manifest=data;
		callback.run();
		if (!data){
			console.warn("资源版本清单文件不存在，不使用资源版本管理。忽略ERR_FILE_NOT_FOUND错误。");
		}
	}

	ResourceVersion.addVersionPrefix=function(originURL){
		if (ResourceVersion.manifest && ResourceVersion.manifest[originURL]){
			if (ResourceVersion.type==2)return ResourceVersion.manifest[originURL];
			return ResourceVersion.manifest[originURL]+"/"+originURL;
		}
		return originURL;
	}

	ResourceVersion.FOLDER_VERSION=1;
	ResourceVersion.FILENAME_VERSION=2;
	ResourceVersion.manifest=null;
	ResourceVersion.type=1;
	return ResourceVersion;
})()


/**
*@private
*/
//class laya.net.TTFLoader
var TTFLoader=(function(){
	function TTFLoader(){
		this.fontName=null;
		this.complete=null;
		this.err=null;
		this._fontTxt=null;
		this._url=null;
		this._div=null;
		this._txtWidth=NaN;
		this._http=null;
	}

	__class(TTFLoader,'laya.net.TTFLoader');
	var __proto=TTFLoader.prototype;
	__proto.load=function(fontPath){
		this._url=fontPath;
		var tArr=fontPath.split(".ttf")[0].split("/");
		this.fontName=tArr[tArr.length-1];
		if (Browser.window.conch){
			this._loadConch();
		}else
		if (Browser.window.FontFace){
			this._loadWithFontFace()
		}
		else {
			this._loadWithCSS();
		}
	}

	__proto._loadConch=function(){
		this._http=new HttpRequest();
		this._http.on(/*laya.events.Event.ERROR*/"error",this,this._onErr);
		this._http.on(/*laya.events.Event.COMPLETE*/"complete",this,this._onHttpLoaded);
		this._http.send(this._url,null,"get",/*laya.net.Loader.BUFFER*/"arraybuffer");
	}

	__proto._onHttpLoaded=function(data){
		Browser.window.conch.setFontFaceFromBuffer(this.fontName,data);
		this._clearHttp();
		this._complete();
	}

	__proto._clearHttp=function(){
		if (this._http){
			this._http.off(/*laya.events.Event.ERROR*/"error",this,this._onErr);
			this._http.off(/*laya.events.Event.COMPLETE*/"complete",this,this._onHttpLoaded);
			this._http=null;
		}
	}

	__proto._onErr=function(){
		this._clearHttp();
		if (this.err){
			this.err.runWith("fail:"+this._url);
			this.err=null;
		}
	}

	__proto._complete=function(){
		Laya.timer.clear(this,this._complete);
		Laya.timer.clear(this,this._checkComplete);
		if (this._div && this._div.parentNode){
			this._div.parentNode.removeChild(this._div);
			this._div=null;
		}
		if (this.complete){
			this.complete.runWith(this);
			this.complete=null;
		}
	}

	__proto._checkComplete=function(){
		if (RunDriver.measureText("LayaTTFFont",this._fontTxt).width !=this._txtWidth){
			this._complete();
		}
	}

	__proto._loadWithFontFace=function(){
		var fontFace=new Browser.window.FontFace(this.fontName,"url('"+this._url+"')");
		Browser.window.document.fonts.add(fontFace);
		var self=this;
		fontFace.loaded.then((function(){
			self._complete()
		}));
		fontFace.load();
	}

	__proto._createDiv=function(){
		this._div=Browser.createElement("div");
		this._div.innerHTML="laya";
		var _style=this._div.style;
		_style.fontFamily=this.fontName;
		_style.position="absolute";
		_style.left="-100px";
		_style.top="-100px";
		Browser.document.body.appendChild(this._div);
	}

	__proto._loadWithCSS=function(){
		var _$this=this;
		var fontStyle=Browser.createElement("style");
		fontStyle.type="text/css";
		Browser.document.body.appendChild(fontStyle);
		fontStyle.textContent="@font-face { font-family:'"+this.fontName+"'; src:url('"+this._url+"');}";
		this._fontTxt="40px "+this.fontName;
		this._txtWidth=RunDriver.measureText("LayaTTFFont",this._fontTxt).width;
		var self=this;
		fontStyle.onload=function (){
			Laya.timer.once(10000,self,_$this._complete);
		};
		Laya.timer.loop(20,this,this._checkComplete);
		this._createDiv();
	}

	TTFLoader._testString="LayaTTFFont";
	return TTFLoader;
})()


/**
*<p> <code>URL</code> 类用于定义地址信息。</p>
*/
//class laya.net.URL
var URL=(function(){
	function URL(url){
		/**@private */
		this._url=null;
		/**@private */
		this._path=null;
		this._url=URL.formatURL(url);
		this._path=URL.getPath(url);
	}

	__class(URL,'laya.net.URL');
	var __proto=URL.prototype;
	/**地址的路径。*/
	__getset(0,__proto,'path',function(){
		return this._path;
	});

	/**格式化后的地址。*/
	__getset(0,__proto,'url',function(){
		return this._url;
	});

	URL.formatURL=function(url,base){
		if (!url)return "null path";
		if (url.indexOf(":")> 0)return url;
		if (URL.customFormat !=null)url=URL.customFormat(url,base);
		var char1=url.charAt(0);
		if (char1==="."){
			return URL.formatRelativePath((base || URL.basePath)+url);
			}else if (char1==='~'){
			return URL.rootPath+url.substring(1);
			}else if (char1==="d"){
			if (url.indexOf("data:image")===0)return url;
			}else if (char1==="/"){
			return url;
		}
		return (base || URL.basePath)+url;
	}

	URL.formatRelativePath=function(value){
		var parts=value.split("/");
		for (var i=0,len=parts.length;i < len;i++){
			if (parts[i]=='..'){
				parts.splice(i-1,2);
				i-=2;
			}
		}
		return parts.join('/');
	}

	URL.isAbsolute=function(url){
		return url.indexOf(":")> 0 || url.charAt(0)=='/';
	}

	URL.getPath=function(url){
		var ofs=url.lastIndexOf('/');
		return ofs > 0 ? url.substr(0,ofs+1):"";
	}

	URL.getFileName=function(url){
		var ofs=url.lastIndexOf('/');
		return ofs > 0 ? url.substr(ofs+1):url;
	}

	URL.version={};
	URL.basePath="";
	URL.rootPath="";
	URL.customFormat=function(url){
		var newUrl=URL.version[url];
		if (!Render.isConchApp && newUrl)url+="?v="+newUrl;
		return url;
	}

	return URL;
})()


/**
*@private
*<code>Render</code> 是渲染管理类。它是一个单例，可以使用 Laya.render 访问。
*/
//class laya.renders.Render
var Render=(function(){
	function Render(width,height){
		/**@private */
		this._timeId=0;
		var style=Render._mainCanvas.source.style;
		style.position='absolute';
		style.top=style.left="0px";
		style.background="#000000";
		Render._mainCanvas.source.id="layaCanvas";
		var isWebGl=laya.renders.Render.isWebGL;
		Render._mainCanvas.source.width=width;
		Render._mainCanvas.source.height=height;
		isWebGl && Render.WebGL.init(Render._mainCanvas,width,height);
		Browser.container.appendChild(Render._mainCanvas.source);
		Render._context=new RenderContext(width,height,isWebGl ? null :Render._mainCanvas);
		Render._context.ctx.setIsMainContext();
		Browser.window.requestAnimationFrame(loop);
		function loop (stamp){
			Laya.stage._loop();
			Browser.window.requestAnimationFrame(loop);
		}
		Laya.stage.on("visibilitychange",this,this._onVisibilitychange);
	}

	__class(Render,'laya.renders.Render');
	var __proto=Render.prototype;
	/**@private */
	__proto._onVisibilitychange=function(){
		if (!Laya.stage.isVisibility){
			this._timeId=Browser.window.setInterval(this._enterFrame,1000);
			}else if (this._timeId !=0){
			Browser.window.clearInterval(this._timeId);
		}
	}

	/**@private */
	__proto._enterFrame=function(e){
		Laya.stage._loop();
	}

	/**目前使用的渲染器。*/
	__getset(1,Render,'context',function(){
		return Render._context;
	});

	/**渲染使用的原生画布引用。 */
	__getset(1,Render,'canvas',function(){
		return Render._mainCanvas.source;
	});

	Render._context=null;
	Render._mainCanvas=null;
	Render.WebGL=null;
	Render.isConchNode=false;
	Render.isConchApp=false;
	Render.isConchWebGL=false;
	Render.isWebGL=false;
	Render.is3DMode=false;
	Render.optimizeTextureMemory=function(url,texture){
		return true;
	}

	Render.__init$=function(){
		/*__JS__ */window.ConchRenderType=window.ConchRenderType||1;
		/*__JS__ */window.ConchRenderType|=(!window.conch?0:0x04);;{
			Render.isConchNode=/*__JS__ */(window.ConchRenderType & 5)==5;
			Render.isConchApp=/*__JS__ */(window.ConchRenderType & 0x04)==0x04;
			Render.isConchWebGL=/*__JS__ */window.ConchRenderType==6;
		};;
	}

	return Render;
})()


/**
*@private
*渲染环境
*/
//class laya.renders.RenderContext
var RenderContext=(function(){
	function RenderContext(width,height,canvas){
		/**全局x坐标 */
		this.x=0;
		/**全局y坐标 */
		this.y=0;
		/**当前使用的画布 */
		//this.canvas=null;
		/**当前使用的画布上下文 */
		//this.ctx=null;
		this._drawTexture=function(x,y,args){
			if (args[0].loaded)this.ctx.drawTexture(args[0],args[1],args[2],args[3],args[4],x,y);
		}
		this._fillTexture=function(x,y,args){
			if (args[0].loaded)this.ctx.fillTexture(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6],args[7]);
		}
		this._drawTextureWithTransform=function(x,y,args){
			if (args[0].loaded)this.ctx.drawTextureWithTransform(args[0],args[1],args[2],args[3],args[4],args[5],x,y,args[6]);
		}
		this._fillQuadrangle=function(x,y,args){
			this.ctx.fillQuadrangle(args[0],args[1],args[2],args[3],args[4]);
		}
		this._drawRect=function(x,y,args){
			var ctx=this.ctx;
			if (args[4] !=null){
				ctx.fillStyle=args[4];
				ctx.fillRect(x+args[0],y+args[1],args[2],args[3],null);
			}
			if (args[5] !=null){
				ctx.strokeStyle=args[5];
				ctx.lineWidth=args[6];
				ctx.strokeRect(x+args[0],y+args[1],args[2],args[3],args[6]);
			}
		}
		//矢量方法
		this._drawPie=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[8]);
			ctx.beginPath();
			if (Render.isWebGL){
				ctx.movePath(args[0]+x,args[1]+y);
				ctx.moveTo(0,0);
				}else {
				ctx.moveTo(x+args[0],y+args[1]);
			}
			ctx.arc(x+args[0],y+args[1],args[2],args[3],args[4]);
			ctx.closePath();
			this._fillAndStroke(args[5],args[6],args[7],true);
		}
		this._clipRect=function(x,y,args){
			this.ctx.clipRect(x+args[0],y+args[1],args[2],args[3]);
		}
		this._fillRect=function(x,y,args){
			this.ctx.fillRect(x+args[0],y+args[1],args[2],args[3],args[4]);
		}
		this._drawCircle=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[6]);
			Stat.drawCall++;
			ctx.beginPath();
			Render.isWebGL && ctx.movePath(args[0]+x,args[1]+y);
			ctx.arc(args[0]+x,args[1]+y,args[2],0,RenderContext.PI2);
			ctx.closePath();
			this._fillAndStroke(args[3],args[4],args[5],true);
		}
		this._fillCircle=function(x,y,args){
			Stat.drawCall++;
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.fillStyle=args[3];
			ctx.arc(args[0]+x,args[1]+y,args[2],0,RenderContext.PI2);
			ctx.fill();
		}
		this._setShader=function(x,y,args){
			this.ctx.setShader(args[0]);
		}
		this._drawLine=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[6]);
			ctx.beginPath();
			ctx.strokeStyle=args[4];
			ctx.lineWidth=args[5];
			if (Render.isWebGL){
				ctx.movePath(x,y);
				ctx.moveTo(args[0],args[1]);
				ctx.lineTo(args[2],args[3]);
				}else {
				ctx.moveTo(x+args[0],y+args[1]);
				ctx.lineTo(x+args[2],y+args[3]);
			}
			ctx.stroke();
		}
		this._drawLines=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[5]);
			ctx.beginPath();
			x+=args[0],y+=args[1];
			Render.isWebGL && ctx.movePath(x,y);
			ctx.strokeStyle=args[3];
			ctx.lineWidth=args[4];
			var points=args[2];
			var i=2,n=points.length;
			if (Render.isWebGL){
				ctx.moveTo(points[0],points[1]);
				while (i < n){
					ctx.lineTo(points[i++],points[i++]);
				}
				}else {
				ctx.moveTo(x+points[0],y+points[1]);
				while (i < n){
					ctx.lineTo(x+points[i++],y+points[i++]);
				}
			}
			ctx.stroke();
		}
		this._drawLinesWebGL=function(x,y,args){
			this.ctx.drawLines(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4]);
		}
		//x:Number,y:Number,points:Array,lineColor:String,lineWidth:Number=1
		this._drawCurves=function(x,y,args){
			this.ctx.drawCurves(x,y,args);
		}
		this._draw=function(x,y,args){
			args[0].call(null,this,x,y);
		}
		this._transformByMatrix=function(x,y,args){
			this.ctx.transformByMatrix(args[0]);
		}
		this._setTransform=function(x,y,args){
			this.ctx.setTransform(args[0],args[1],args[2],args[3],args[4],args[5]);
		}
		this._setTransformByMatrix=function(x,y,args){
			this.ctx.setTransformByMatrix(args[0]);
		}
		this._save=function(x,y,args){
			this.ctx.save();
		}
		this._restore=function(x,y,args){
			this.ctx.restore();
		}
		this._translate=function(x,y,args){
			this.ctx.translate(args[0],args[1]);
		}
		this._transform=function(x,y,args){
			this.ctx.translate(args[1]+x,args[2]+y);
			var mat=args[0];
			this.ctx.transform(mat.a,mat.b,mat.c,mat.d,mat.tx,mat.ty);
			this.ctx.translate(-x-args[1],-y-args[2]);
		}
		this._rotate=function(x,y,args){
			this.ctx.translate(args[1]+x,args[2]+y);
			this.ctx.rotate(args[0]);
			this.ctx.translate(-x-args[1],-y-args[2]);
		}
		this._scale=function(x,y,args){
			this.ctx.translate(args[2]+x,args[3]+y);
			this.ctx.scale(args[0],args[1]);
			this.ctx.translate(-x-args[2],-y-args[3]);
		}
		this._alpha=function(x,y,args){
			this.ctx.globalAlpha *=args[0];
		}
		this._setAlpha=function(x,y,args){
			this.ctx.globalAlpha=args[0];
		}
		this._fillText=function(x,y,args){
			this.ctx.fillText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5]);
		}
		this._strokeText=function(x,y,args){
			this.ctx.strokeText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6]);
		}
		this._fillBorderText=function(x,y,args){
			this.ctx.fillBorderText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6],args[7]);
		}
		this._blendMode=function(x,y,args){
			this.ctx.globalCompositeOperation=args[0];
		}
		this._beginClip=function(x,y,args){
			this.ctx.beginClip && this.ctx.beginClip(x+args[0],y+args[1],args[2],args[3]);
		}
		this._setIBVB=function(x,y,args){
			this.ctx.setIBVB(args[0]+x,args[1]+y,args[2],args[3],args[4],args[5],args[6],args[7]);
		}
		this._fillTrangles=function(x,y,args){
			this.ctx.fillTrangles(args[0],args[1]+x,args[2]+y,args[3],args[4]);
		}
		//x:Number,y:Number,paths:Array,brush:Object=null,pen:Object=null
		this._drawPath=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(-1);
			ctx.beginPath();
			x+=args[0],y+=args[1];
			Render.isWebGL && ctx.movePath(x,y);
			var paths=args[2];
			for (var i=0,n=paths.length;i < n;i++){
				var path=paths[i];
				switch (path[0]){
					case "moveTo":
						Render.isWebGL ? ctx.moveTo(path[1],path[2]):ctx.moveTo(x+path[1],y+path[2]);
						break ;
					case "lineTo":
						Render.isWebGL ? ctx.lineTo(path[1],path[2]):ctx.lineTo(x+path[1],y+path[2]);
						break ;
					case "arcTo":
						Render.isWebGL ? ctx.arcTo(path[1],path[2],path[3],path[4],path[5]):ctx.arcTo(x+path[1],y+path[2],x+path[3],y+path[4],path[5]);
						break ;
					case "closePath":
						ctx.closePath();
						break ;
					}
			};
			var brush=args[3];
			if (brush !=null){
				ctx.fillStyle=brush.fillStyle;
				ctx.fill();
			};
			var pen=args[4];
			if (pen !=null){
				ctx.strokeStyle=pen.strokeStyle;
				ctx.lineWidth=pen.lineWidth || 1;
				ctx.lineJoin=pen.lineJoin;
				ctx.lineCap=pen.lineCap;
				ctx.miterLimit=pen.miterLimit;
				ctx.stroke();
			}
		}
		// polygon(x:Number,y:Number,r:Number,edges:Number,color:uint,borderWidth:int=2,borderColor:uint=0)
		this.drawPoly=function(x,y,args){
			this.ctx.drawPoly(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4],args[5],args[6]);
		}
		//x:Number,y:Number,points:Array,fillColor:String,lineColor:String=null,lineWidth:Number=1
		this._drawPoly=function(x,y,args){
			var ctx=this.ctx;
			var points=args[2];
			var i=2,n=points.length;
			if (Render.isWebGL){
				ctx.setPathId(args[6]);
				ctx.beginPath();
				x+=args[0],y+=args[1];
				ctx.movePath(x,y);
				ctx.moveTo(points[0],points[1]);
				while (i < n){
					ctx.lineTo(points[i++],points[i++]);
				}
				}else {
				ctx.beginPath();
				x+=args[0],y+=args[1];
				ctx.moveTo(x+points[0],y+points[1]);
				while (i < n){
					ctx.lineTo(x+points[i++],y+points[i++]);
				}
			}
			ctx.closePath();
			this._fillAndStroke(args[3],args[4],args[5],args[7]);
		}
		this._drawSkin=function(x,y,args){
			var tSprite=args[0];
			if (tSprite){
				var ctx=this.ctx;
				tSprite.render(ctx,x,y);
			}
		}
		this._drawParticle=function(x,y,args){
			this.ctx.drawParticle(x+this.x,y+this.y,args[0]);
		}
		this._setFilters=function(x,y,args){
			this.ctx.setFilters(args);
		}
		if (canvas){
			this.ctx=canvas.getContext('2d');
			}else {
			canvas=HTMLCanvas.create("3D");
			this.ctx=RunDriver.createWebGLContext2D(canvas);
			canvas._setContext(this.ctx);
		}
		canvas.size(width,height);
		this.canvas=canvas;
	}

	__class(RenderContext,'laya.renders.RenderContext');
	var __proto=RenderContext.prototype;
	/**销毁当前渲染环境*/
	__proto.destroy=function(){
		if (this.canvas){
			this.canvas.destroy();
			this.canvas=null;
			this.ctx=null;
		}
		if (this.ctx){
			this.ctx.destroy();
			this.ctx=null;
		}
	}

	__proto.drawTexture=function(tex,x,y,width,height){
		if (tex.loaded)this.ctx.drawTexture(tex,x,y,width,height,this.x,this.y);
	}

	__proto._drawTextures=function(x,y,args){
		if (args[0].loaded)this.ctx.drawTextures(args[0],args[1],x+this.x,y+this.y);
	}

	__proto.drawTextureWithTransform=function(tex,x,y,width,height,m,alpha){
		if (tex.loaded)this.ctx.drawTextureWithTransform(tex,x,y,width,height,m,this.x,this.y,alpha);
	}

	__proto.fillQuadrangle=function(tex,x,y,point4,m){
		this.ctx.fillQuadrangle(tex,x,y,point4,m);
	}

	__proto.drawCanvas=function(canvas,x,y,width,height){
		this.ctx.drawCanvas(canvas,x+this.x,y+this.y,width,height);
	}

	__proto.drawRect=function(x,y,width,height,color,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var ctx=this.ctx;
		ctx.strokeStyle=color;
		ctx.lineWidth=lineWidth;
		ctx.strokeRect(x+this.x,y+this.y,width,height,lineWidth);
	}

	__proto._fillAndStroke=function(fillColor,strokeColor,lineWidth,isConvexPolygon){
		(isConvexPolygon===void 0)&& (isConvexPolygon=false);
		var ctx=this.ctx;
		if (fillColor !=null){
			ctx.fillStyle=fillColor;
			if (Render.isWebGL){
				ctx.fill(isConvexPolygon);
				}else {
				ctx.fill();
			}
		}
		if (strokeColor !=null && lineWidth > 0){
			ctx.strokeStyle=strokeColor;
			ctx.lineWidth=lineWidth;
			ctx.stroke();
		}
	}

	//ctx.translate(-x-args[0],-y-args[1]);
	__proto.clipRect=function(x,y,width,height){
		this.ctx.clipRect(x+this.x,y+this.y,width,height);
	}

	__proto.fillRect=function(x,y,width,height,fillStyle){
		this.ctx.fillRect(x+this.x,y+this.y,width,height,fillStyle);
	}

	__proto.drawCircle=function(x,y,radius,color,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		Stat.drawCall++;
		var ctx=this.ctx;
		ctx.beginPath();
		ctx.strokeStyle=color;
		ctx.lineWidth=lineWidth;
		ctx.arc(x+this.x,y+this.y,radius,0,RenderContext.PI2);
		ctx.stroke();
	}

	/**
	*绘制三角形
	*@param x
	*@param y
	*@param tex
	*@param args [x,y,texture,vertices,indices,uvs,matrix]
	*/
	__proto.drawTriangles=function(x,y,args){
		if (Render.isWebGL){
			this.ctx.drawTriangles(args[0],x+args[1],y+args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
			}else {
			var indices=args[5];
			var i=0,len=indices.length;
			var ctx=this.ctx;
			for (i=0;i < len;i+=3){
				var index0=indices[i] *2;
				var index1=indices[i+1] *2;
				var index2=indices[i+2] *2;
				ctx.drawTriangle(args[0],args[3],args[4],index0,index1,index2,args[6],true);
			}
		}
	}

	__proto.fillCircle=function(x,y,radius,color){
		Stat.drawCall++;
		var ctx=this.ctx;
		ctx.beginPath();
		ctx.fillStyle=color;
		ctx.arc(x+this.x,y+this.y,radius,0,RenderContext.PI2);
		ctx.fill();
	}

	__proto.setShader=function(shader){
		this.ctx.setShader(shader);
	}

	__proto.drawLine=function(fromX,fromY,toX,toY,color,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var ctx=this.ctx;
		ctx.beginPath();
		ctx.strokeStyle=color;
		ctx.lineWidth=lineWidth;
		ctx.moveTo(this.x+fromX,this.y+fromY);
		ctx.lineTo(this.x+toX,this.y+toY);
		ctx.stroke();
	}

	__proto.clear=function(){
		this.ctx.clear();
	}

	__proto.transformByMatrix=function(value){
		this.ctx.transformByMatrix(value);
	}

	__proto.setTransform=function(a,b,c,d,tx,ty){
		this.ctx.setTransform(a,b,c,d,tx,ty);
	}

	__proto.setTransformByMatrix=function(value){
		this.ctx.setTransformByMatrix(value);
	}

	__proto.save=function(){
		this.ctx.save();
	}

	__proto.restore=function(){
		this.ctx.restore();
	}

	__proto.translate=function(x,y){
		this.ctx.translate(x,y);
	}

	__proto.transform=function(a,b,c,d,tx,ty){
		this.ctx.transform(a,b,c,d,tx,ty);
	}

	__proto.rotate=function(angle){
		this.ctx.rotate(angle);
	}

	__proto.scale=function(scaleX,scaleY){
		this.ctx.scale(scaleX,scaleY);
	}

	__proto.alpha=function(value){
		this.ctx.globalAlpha *=value;
	}

	__proto.setAlpha=function(value){
		this.ctx.globalAlpha=value;
	}

	__proto.fillWords=function(words,x,y,font,color,underLine){
		(underLine===void 0)&& (underLine=0);
		this.ctx.fillWords(words,x,y,font,color,underLine);
	}

	/***@private */
	__proto.fillBorderWords=function(words,x,y,font,fillColor,borderColor,lineWidth){
		this.ctx.fillBorderWords(words,x,y,font,fillColor,borderColor,lineWidth);
	}

	__proto.fillText=function(text,x,y,font,color,textAlign){
		this.ctx.fillText(text,x+this.x,y+this.y,font,color,textAlign);
	}

	__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
		this.ctx.strokeText(text,x+this.x,y+this.y,font,color,lineWidth,textAlign);
	}

	__proto.blendMode=function(type){
		this.ctx.globalCompositeOperation=type;
	}

	__proto.flush=function(){
		this.ctx.flush && this.ctx.flush();
	}

	__proto.addRenderObject=function(o){
		this.ctx.addRenderObject(o);
	}

	__proto.beginClip=function(x,y,w,h){
		this.ctx.beginClip && this.ctx.beginClip(x,y,w,h);
	}

	__proto.endClip=function(){
		this.ctx.endClip && this.ctx.endClip();
	}

	__proto.fillTrangles=function(x,y,args){
		this.ctx.fillTrangles(args[0],args[1],args[2],args[3],args.length > 4 ? args[4] :null);
	}

	RenderContext.PI2=2 *Math.PI;
	return RenderContext;
})()


/**
*@private
*精灵渲染器
*/
//class laya.renders.RenderSprite
var RenderSprite=(function(){
	function RenderSprite(type,next){
		/**@private */
		//this._next=null;
		/**@private */
		//this._fun=null;
		this._next=next || RenderSprite.NORENDER;
		switch (type){
			case 0:
				this._fun=this._no;
				return;
			case 0x01:
				this._fun=this._image;
				return;
			case 0x02:
				this._fun=this._alpha;
				return;
			case 0x04:
				this._fun=this._transform;
				return;
			case 0x08:
				this._fun=this._blend;
				return;
			case 0x10:
				this._fun=this._canvas;
				return;
			case 0x40:
				this._fun=this._mask;
				return;
			case 0x80:
				this._fun=this._clip;
				return;
			case 0x100:
				this._fun=this._style;
				return;
			case 0x200:
				this._fun=this._graphics;
				return;
			case 0x800:
				this._fun=this._childs;
				return;
			case 0x400:
				this._fun=this._custom;
				return;
			case 0x01 | 0x200:
				this._fun=this._image2;
				return;
			case 0x01 | 0x04 | 0x200:
				this._fun=this._image2;
				return;
			case 0x20:
				this._fun=Filter._filter;
				return;
			case 0x11111:
				this._fun=RenderSprite._initRenderFun;
				return;
			}
		this.onCreate(type);
	}

	__class(RenderSprite,'laya.renders.RenderSprite');
	var __proto=RenderSprite.prototype;
	__proto.onCreate=function(type){}
	__proto._style=function(sprite,context,x,y){
		sprite._style.render(sprite,context,x,y);
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
	}

	__proto._no=function(sprite,context,x,y){}
	__proto._custom=function(sprite,context,x,y){
		sprite.customRender(context,x,y);
		var tf=sprite._style._tf;
		this._next._fun.call(this._next,sprite,context,x-tf.translateX,y-tf.translateY);
	}

	__proto._clip=function(sprite,context,x,y){
		var next=this._next;
		if (next==RenderSprite.NORENDER)return;
		var r=sprite._style.scrollRect;
		context.ctx.save();
		context.ctx.clipRect(x,y,r.width,r.height);
		next._fun.call(next,sprite,context,x-r.x,y-r.y);
		context.ctx.restore();
	}

	__proto._blend=function(sprite,context,x,y){
		var style=sprite._style;
		if (style.blendMode){
			context.ctx.globalCompositeOperation=style.blendMode;
		};
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
		context.ctx.globalCompositeOperation="source-over";
	}

	__proto._mask=function(sprite,context,x,y){
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
		var mask=sprite.mask;
		if (mask){
			context.ctx.globalCompositeOperation="destination-in";
			if (mask.numChildren > 0 || !mask.graphics._isOnlyOne()){
				mask.cacheAsBitmap=true;
			}
			mask.render(context,x-sprite.pivotX,y-sprite.pivotY);
		}
		context.ctx.globalCompositeOperation="source-over";
	}

	__proto._graphics=function(sprite,context,x,y){
		var tf=sprite._style._tf;
		sprite._graphics && sprite._graphics._render(sprite,context,x-tf.translateX,y-tf.translateY);
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
	}

	__proto._image=function(sprite,context,x,y){
		var style=sprite._style;
		context.ctx.drawTexture2(x,y,style._tf.translateX,style._tf.translateY,sprite.transform,style.alpha,style.blendMode,sprite._graphics._one);
	}

	__proto._image2=function(sprite,context,x,y){
		var tf=sprite._style._tf;
		context.ctx.drawTexture2(x,y,tf.translateX,tf.translateY,sprite.transform,1,null,sprite._graphics._one);
	}

	__proto._alpha=function(sprite,context,x,y){
		var style=sprite._style;
		var alpha;
		if ((alpha=style.alpha)> 0.01 || sprite._needRepaint()){
			var temp=context.ctx.globalAlpha;
			context.ctx.globalAlpha *=alpha;
			var next=this._next;
			next._fun.call(next,sprite,context,x,y);
			context.ctx.globalAlpha=temp;
		}
	}

	__proto._transform=function(sprite,context,x,y){
		var transform=sprite.transform,_next=this._next;
		if (transform && _next !=RenderSprite.NORENDER){
			context.save();
			context.transform(transform.a,transform.b,transform.c,transform.d,transform.tx+x,transform.ty+y);
			_next._fun.call(_next,sprite,context,0,0);
			context.restore();
		}else
		_next._fun.call(_next,sprite,context,x,y);
	}

	__proto._childs=function(sprite,context,x,y){
		var style=sprite._style;
		var tf=style._tf;
		x=x-tf.translateX+style.paddingLeft;
		y=y-tf.translateY+style.paddingTop;
		if (style._calculation){
			var words=sprite._getWords();
			if (words){
				var tStyle=style;
				if (tStyle){
					if (tStyle.stroke){
						context.fillBorderWords(words,x,y,tStyle.font,tStyle.color,tStyle.strokeColor,tStyle.stroke);
						}else{
						context.fillWords(words,x,y,tStyle.font,tStyle.color,(tStyle.textDecoration!="none"&&tStyle.underLine)?1:0);
					}
				}
			}
		};
		var childs=sprite._childs,n=childs.length,ele;
		if (sprite.viewport || (sprite.optimizeScrollRect && sprite._style.scrollRect)){
			var rect=sprite.viewport || sprite._style.scrollRect;
			var left=rect.x;
			var top=rect.y;
			var right=rect.right;
			var bottom=rect.bottom;
			var _x=NaN,_y=NaN;
			for (i=0;i < n;++i){
				if ((ele=childs [i]).visible && ((_x=ele._x)< right && (_x+ele.width)> left && (_y=ele._y)< bottom && (_y+ele.height)> top)){
					ele.render(context,x,y);
				}
			}
			}else {
			for (var i=0;i < n;++i)
			(ele=(childs [i]))._style.visible && ele.render(context,x,y);
		}
	}

	//}
	__proto._canvas=function(sprite,context,x,y){
		var _cacheCanvas=sprite._$P.cacheCanvas;
		if (!_cacheCanvas){
			this._next._fun.call(this._next,sprite,context,x,y);
			return;
		}
		_cacheCanvas.type==='bitmap' ? (Stat.canvasBitmap++):(Stat.canvasNormal++);
		var tx=_cacheCanvas.ctx;
		if (sprite._needRepaint()|| !tx){
			this._canvas_repaint(sprite,context,x,y);
		}
		else{
			var tRec=_cacheCanvas._cacheRec;
			context.drawCanvas(tx.canvas,x+tRec.x,y+tRec.y,tRec.width,tRec.height);
		}
	}

	__proto._canvas_repaint=function(sprite,context,x,y){
		var _cacheCanvas=sprite._$P.cacheCanvas;
		var _next=this._next;
		if (!_cacheCanvas){
			_next._fun.call(_next,sprite,tx,x,y);
			return;
		};
		var tx=_cacheCanvas.ctx;
		var _repaint=sprite._needRepaint()|| (!tx);
		var canvas;
		var left;
		var top;
		var tRec;
		var tCacheType=_cacheCanvas.type;
		tCacheType==='bitmap' ? (Stat.canvasBitmap++):(Stat.canvasNormal++);
		if (_repaint){
			if (!_cacheCanvas._cacheRec)
				_cacheCanvas._cacheRec=new Rectangle();
			var w,h;
			if (!Render.isWebGL || tCacheType==="bitmap"){
				tRec=sprite.getSelfBounds();
				tRec.x=tRec.x-sprite.pivotX;
				tRec.y=tRec.y-sprite.pivotY;
				tRec.x=tRec.x-16;
				tRec.y=tRec.y-16;
				tRec.width=tRec.width+32;
				tRec.height=tRec.height+32;
				tRec.x=Math.floor(tRec.x+x)-x;
				tRec.y=Math.floor(tRec.y+y)-y;
				tRec.width=Math.floor(tRec.width);
				tRec.height=Math.floor(tRec.height);
				_cacheCanvas._cacheRec.copyFrom(tRec);
				}else{
				_cacheCanvas._cacheRec.setTo(-sprite.pivotX,-sprite.pivotY,1,1);
			}
			tRec=_cacheCanvas._cacheRec;
			var scaleX=Render.isWebGL ? 1 :Browser.pixelRatio *Laya.stage.clientScaleX;
			var scaleY=Render.isWebGL ? 1 :Browser.pixelRatio *Laya.stage.clientScaleY;
			if (!Render.isWebGL){
				var chainScaleX=1;
				var chainScaleY=1;
				var tar;
				tar=sprite;
				while (tar && tar !=Laya.stage){
					chainScaleX *=tar.scaleX;
					chainScaleY *=tar.scaleY;
					tar=tar.parent;
				}
				if (Render.isWebGL){
					if (chainScaleX < 1)scaleX *=chainScaleX;
					if (chainScaleY < 1)scaleY *=chainScaleY;
					}else {
					if (chainScaleX > 1)scaleX *=chainScaleX;
					if (chainScaleY > 1)scaleY *=chainScaleY;
				}
			}
			if (sprite.scrollRect){
				var scrollRect=sprite.scrollRect;
				tRec.x-=scrollRect.x;
				tRec.y-=scrollRect.y;
			}
			w=tRec.width *scaleX;
			h=tRec.height *scaleY;
			left=tRec.x;
			top=tRec.y;
			if (Render.isWebGL && tCacheType==='bitmap' && (w > 2048 || h > 3200)){
				//console.warn("cache bitmap size larger than 2048,cache ignored");
				if (_cacheCanvas.ctx){
					Pool.recover("RenderContext",_cacheCanvas.ctx);
					_cacheCanvas.ctx.canvas.size(0,0);
					_cacheCanvas.ctx=null;
				}
				_next._fun.call(_next,sprite,context,x,y);
				return;
			}
			if (!tx){
				tx=_cacheCanvas.ctx=Pool.getItem("RenderContext")|| new RenderContext(w,h,HTMLCanvas.create(/*laya.resource.HTMLCanvas.TYPEAUTO*/"AUTO"));
			}
			tx.ctx.sprite=sprite;
			canvas=tx.canvas;
			canvas.clear();
			(canvas.width !=w || canvas.height !=h)&& canvas.size(w,h);
			if (tCacheType==='bitmap')canvas.context.asBitmap=true;
			else if(tCacheType==='normal')canvas.context.asBitmap=false;
			var t;
			if (scaleX !=1 || scaleY !=1){
				var ctx=(tx).ctx;
				ctx.save();
				ctx.scale(scaleX,scaleY);
				if (!Render.isConchWebGL && Render.isConchApp){
					t=sprite._$P.cf;
					t && ctx.setFilterMatrix && ctx.setFilterMatrix(t._mat,t._alpha);
				}
				_next._fun.call(_next,sprite,tx,-left,-top);
				ctx.restore();
				if (!Render.isConchApp || Render.isConchWebGL)sprite._applyFilters();
				}else {
				ctx=(tx).ctx;
				if (!Render.isConchWebGL && Render.isConchApp){
					t=sprite._$P.cf;
					t && ctx.setFilterMatrix && ctx.setFilterMatrix(t._mat,t._alpha);
				}
				_next._fun.call(_next,sprite,tx,-left,-top);
				if (!Render.isConchApp || Render.isConchWebGL)sprite._applyFilters();
			}
			if (sprite._$P.staticCache)_cacheCanvas.reCache=false;
			Stat.canvasReCache++;
			}else {
			tRec=_cacheCanvas._cacheRec;
			left=tRec.x;
			top=tRec.y;
			canvas=tx.canvas;
		}
		context.drawCanvas(canvas,x+left,y+top,tRec.width,tRec.height);
	}

	RenderSprite.__init__=function(){
		var i=0,len=0;
		var initRender;
		initRender=RunDriver.createRenderSprite(0x11111,null);
		len=RenderSprite.renders.length=0x800 *2;
		for (i=0;i < len;i++)
		RenderSprite.renders[i]=initRender;
		RenderSprite.renders[0]=RunDriver.createRenderSprite(0,null);
		function _initSame (value,o){
			var n=0;
			for (var i=0;i < value.length;i++){
				n |=value[i];
				RenderSprite.renders[n]=o;
			}
		}
		_initSame([0x01,0x200,0x04,0x02],new RenderSprite(0x01,null));
		RenderSprite.renders[0x01 | 0x200]=RunDriver.createRenderSprite(0x01 | 0x200,null);
		RenderSprite.renders[0x01 | 0x04 | 0x200]=new RenderSprite(0x01 | 0x04 | 0x200,null);
	}

	RenderSprite._initRenderFun=function(sprite,context,x,y){
		var type=sprite._renderType;
		var r=RenderSprite.renders[type]=RenderSprite._getTypeRender(type);
		r._fun(sprite,context,x,y);
	}

	RenderSprite._getTypeRender=function(type){
		var rst=null;
		var tType=0x800;
		while (tType > 1){
			if (tType & type)
				rst=RunDriver.createRenderSprite(tType,rst);
			tType=tType >> 1;
		}
		return rst;
	}

	RenderSprite.IMAGE=0x01;
	RenderSprite.ALPHA=0x02;
	RenderSprite.TRANSFORM=0x04;
	RenderSprite.BLEND=0x08;
	RenderSprite.CANVAS=0x10;
	RenderSprite.FILTERS=0x20;
	RenderSprite.MASK=0x40;
	RenderSprite.CLIP=0x80;
	RenderSprite.STYLE=0x100;
	RenderSprite.GRAPHICS=0x200;
	RenderSprite.CUSTOM=0x400;
	RenderSprite.CHILDS=0x800;
	RenderSprite.INIT=0x11111;
	RenderSprite.renders=[];
	RenderSprite.NORENDER=new RenderSprite(0,null);
	return RenderSprite;
})()


/**
*@private
*Context扩展类
*/
//class laya.resource.Context
var Context=(function(){
	function Context(){
		/***@private */
		//this._canvas=null;
		this._repaint=false;
	}

	__class(Context,'laya.resource.Context');
	var __proto=Context.prototype;
	__proto.replaceReset=function(){
		var i=0,len=0;
		len=Context.replaceKeys.length;
		var key;
		for (i=0;i < len;i++){
			key=Context.replaceKeys[i];
			this[Context.newKeys[i]]=this[key];
		}
	}

	__proto.replaceResotre=function(){
		/*__JS__ */this.__restore();
		/*__JS__ */this.__reset();
	}

	__proto.setIsMainContext=function(){}
	__proto.drawTextures=function(tex,pos,tx,ty){
		Stat.drawCall+=pos.length / 2;
		var w=tex.width;
		var h=tex.height;
		for (var i=0,sz=pos.length;i < sz;i+=2){
			this.drawTexture(tex,pos[i],pos[i+1],w,h,tx,ty);
		}
	}

	/***@private */
	__proto.drawCanvas=function(canvas,x,y,width,height){
		Stat.drawCall++;
		this.drawImage(canvas.source,x,y,width,height);
	}

	/***@private */
	__proto.fillRect=function(x,y,width,height,style){
		Stat.drawCall++;
		style && (this.fillStyle=style);
		/*__JS__ */this.__fillRect(x,y,width,height);
	}

	/***@private */
	__proto.fillText=function(text,x,y,font,color,textAlign){
		Stat.drawCall++;
		if (arguments.length > 3 && font !=null){
			this.font=font;
			this.fillStyle=color;
			/*__JS__ */this.textAlign=textAlign;
			this.textBaseline="top";
		}
		/*__JS__ */this.__fillText(text,x,y);
	}

	/***@private */
	__proto.fillBorderText=function(text,x,y,font,fillColor,borderColor,lineWidth,textAlign){
		Stat.drawCall++;
		this.font=font;
		this.fillStyle=fillColor;
		this.textBaseline="top";
		/*__JS__ */this.strokeStyle=borderColor;
		/*__JS__ */this.lineWidth=lineWidth;
		/*__JS__ */this.textAlign=textAlign;
		/*__JS__ */this.__strokeText(text,x,y);
		/*__JS__ */this.__fillText(text,x,y);
	}

	/***@private */
	__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
		Stat.drawCall++;
		if (arguments.length > 3 && font !=null){
			this.font=font;
			/*__JS__ */this.strokeStyle=color;
			/*__JS__ */this.lineWidth=lineWidth;
			/*__JS__ */this.textAlign=textAlign;
			this.textBaseline="top";
		}
		/*__JS__ */this.__strokeText(text,x,y);
	}

	/***@private */
	__proto.transformByMatrix=function(value){
		this.transform(value.a,value.b,value.c,value.d,value.tx,value.ty);
	}

	/***@private */
	__proto.setTransformByMatrix=function(value){
		this.setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
	}

	/***@private */
	__proto.clipRect=function(x,y,width,height){
		Stat.drawCall++;
		this.beginPath();
		this.rect(x,y,width,height);
		this.clip();
	}

	/***@private */
	__proto.drawTexture=function(tex,x,y,width,height,tx,ty){
		Stat.drawCall++;
		var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
		this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x+tx,y+ty,width,height);
	}

	/***@private */
	__proto.drawTextureWithTransform=function(tex,x,y,width,height,m,tx,ty,alpha){
		Stat.drawCall++;
		var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
		this.save();
		alpha !=1 && (this.globalAlpha *=alpha);
		if (m){
			this.transform(m.a,m.b,m.c,m.d,m.tx+tx,m.ty+ty);
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x ,y,width,height);
			}else {
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x+tx ,y+ty,width,height);
		}
		this.restore();
	}

	/***@private */
	__proto.drawTexture2=function(x,y,pivotX,pivotY,m,alpha,blendMode,args2){
		var tex=args2[0];
		if (!(tex.loaded && tex.bitmap && tex.source)){
			return;
		}
		Stat.drawCall++;
		var alphaChanged=alpha!==1;
		if (alphaChanged){
			var temp=this.globalAlpha;
			this.globalAlpha *=alpha;
		};
		var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
		if (m){
			this.save();
			this.transform(m.a,m.b,m.c,m.d,m.tx+x,m.ty+y);
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,args2[1]-pivotX ,args2[2]-pivotY,args2[3],args2[4]);
			this.restore();
			}else {
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,args2[1]-pivotX+x ,args2[2]-pivotY+y,args2[3],args2[4]);
		}
		if (alphaChanged)this.globalAlpha=temp;
	}

	__proto.fillTexture=function(texture,x,y,width,height,type,offset,other){
		if (!other.pat){
			if (texture.uv !=Texture.DEF_UV){
				var canvas=new HTMLCanvas("2D");
				canvas.getContext('2d');
				canvas.size(texture.width,texture.height);
				canvas.context.drawTexture(texture,0,0,texture.width,texture.height,0,0);
				texture=new Texture(canvas);
			}
			other.pat=this.createPattern(texture.bitmap.source,type);
		};
		var oX=x,oY=y;
		var sX=0,sY=0;
		if (offset){
			oX+=offset.x % texture.width;
			oY+=offset.y % texture.height;
			sX-=offset.x % texture.width;
			sY-=offset.y % texture.height;
		}
		this.translate(oX,oY);
		this.fillRect(sX,sY,width,height,other.pat);
		this.translate(-oX,-oY);
	}

	__proto.drawTriangle=function(texture,vertices,uvs,index0,index1,index2,matrix,canvasPadding){
		var source=texture.bitmap;
		var textureSource=source.source;
		var textureWidth=texture.width;
		var textureHeight=texture.height;
		var sourceWidth=source.width;
		var sourceHeight=source.height;
		var u0=uvs[index0] *sourceWidth;
		var u1=uvs[index1] *sourceWidth;
		var u2=uvs[index2] *sourceWidth;
		var v0=uvs[index0+1] *sourceHeight;
		var v1=uvs[index1+1] *sourceHeight;
		var v2=uvs[index2+1] *sourceHeight;
		var x0=vertices[index0];
		var x1=vertices[index1];
		var x2=vertices[index2];
		var y0=vertices[index0+1];
		var y1=vertices[index1+1];
		var y2=vertices[index2+1];
		if (canvasPadding){
			var paddingX=1;
			var paddingY=1;
			var centerX=(x0+x1+x2)/ 3;
			var centerY=(y0+y1+y2)/ 3;
			var normX=x0-centerX;
			var normY=y0-centerY;
			var dist=Math.sqrt((normX *normX)+(normY *normY));
			x0=centerX+((normX / dist)*(dist+paddingX));
			y0=centerY+((normY / dist)*(dist+paddingY));
			normX=x1-centerX;
			normY=y1-centerY;
			dist=Math.sqrt((normX *normX)+(normY *normY));
			x1=centerX+((normX / dist)*(dist+paddingX));
			y1=centerY+((normY / dist)*(dist+paddingY));
			normX=x2-centerX;
			normY=y2-centerY;
			dist=Math.sqrt((normX *normX)+(normY *normY));
			x2=centerX+((normX / dist)*(dist+paddingX));
			y2=centerY+((normY / dist)*(dist+paddingY));
		}
		this.save();
		if (matrix)
			this.transform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
		this.beginPath();
		this.moveTo(x0,y0);
		this.lineTo(x1,y1);
		this.lineTo(x2,y2);
		this.closePath();
		this.clip();
		var delta=(u0 *v1)+(v0 *u2)+(u1 *v2)-(v1 *u2)-(v0 *u1)-(u0 *v2);
		var dDelta=1 / delta;
		var deltaA=(x0 *v1)+(v0 *x2)+(x1 *v2)-(v1 *x2)-(v0 *x1)-(x0 *v2);
		var deltaB=(u0 *x1)+(x0 *u2)+(u1 *x2)-(x1 *u2)-(x0 *u1)-(u0 *x2);
		var deltaC=(u0 *v1 *x2)+(v0 *x1 *u2)+(x0 *u1 *v2)-(x0 *v1 *u2)-(v0 *u1 *x2)-(u0 *x1 *v2);
		var deltaD=(y0 *v1)+(v0 *y2)+(y1 *v2)-(v1 *y2)-(v0 *y1)-(y0 *v2);
		var deltaE=(u0 *y1)+(y0 *u2)+(u1 *y2)-(y1 *u2)-(y0 *u1)-(u0 *y2);
		var deltaF=(u0 *v1 *y2)+(v0 *y1 *u2)+(y0 *u1 *v2)-(y0 *v1 *u2)-(v0 *u1 *y2)-(u0 *y1 *v2);
		this.transform(deltaA *dDelta,deltaD *dDelta,deltaB *dDelta,deltaE *dDelta,deltaC *dDelta,deltaF *dDelta);
		this.drawImage(textureSource,texture.uv[0] *sourceWidth,texture.uv[1] *sourceHeight,textureWidth,textureHeight,texture.uv[0] *sourceWidth,texture.uv[1] *sourceHeight,textureWidth,textureHeight);
		this.restore();
	}

	/***@private */
	__proto.flush=function(){
		return 0;
	}

	/***@private */
	__proto.fillWords=function(words,x,y,font,color,underLine){
		font && (this.font=font);
		color && (this.fillStyle=color);
		var _this=this;
		this.textBaseline="top";
		/*__JS__ */this.textAlign='left';
		for (var i=0,n=words.length;i < n;i++){
			var a=words[i];
			/*__JS__ */this.__fillText(a.char,a.x+x,a.y+y);
			if (underLine===1){
				var tHeight=a.height;
				var dX=a.style.letterSpacing*0.5;
				if (!dX)dX=0;
				this.beginPath();
				this.strokeStyle=color;
				this.lineWidth=1;
				this.moveTo(x+a.x-dX+0.5,y+a.y+tHeight+0.5);
				this.lineTo(x+a.x+a.width+dX+0.5,y+a.y+tHeight+0.5);
				this.stroke();
			}
		}
	}

	/***@private */
	__proto.fillBorderWords=function(words,x,y,font,color,borderColor,lineWidth){
		font && (this.font=font);
		color && (this.fillStyle=color);
		this.textBaseline="top";
		/*__JS__ */this.lineWidth=lineWidth;
		/*__JS__ */this.textAlign='left';
		/*__JS__ */this.strokeStyle=borderColor;
		for (var i=0,n=words.length;i < n;i++){
			var a=words[i];
			/*__JS__ */this.__strokeText(a.char,a.x+x,a.y+y);
			/*__JS__ */this.__fillText(a.char,a.x+x,a.y+y);
		}
	}

	/***@private */
	__proto.destroy=function(){
		/*__JS__ */this.canvas.width=this.canvas.height=0;
	}

	/***@private */
	__proto.clear=function(){
		this.clearRect(0,0,this._canvas.width,this._canvas.height);
		this._repaint=false;
	}

	__proto.drawCurves=function(x,y,args){
		this.beginPath();
		this.strokeStyle=args[3];
		this.lineWidth=args[4];
		var points=args[2];
		x+=args[0],y+=args[1];
		this.moveTo(x+points[0],y+points[1]);
		var i=2,n=points.length;
		while (i < n){
			this.quadraticCurveTo(x+points[i++],y+points[i++],x+points[i++],y+points[i++]);
		}
		this.stroke();
	}

	Context.__init__=function(to){
		var from=laya.resource.Context.prototype;
		to=to || /*__JS__ */CanvasRenderingContext2D.prototype;
		if (to.inited)return;
		to.inited=true;
		to.__fillText=to.fillText;
		to.__fillRect=to.fillRect;
		to.__strokeText=to.strokeText;
		var funs=['drawTextures',"drawTriangle",'fillWords','fillBorderWords','setIsMainContext','fillRect','strokeText','fillTexture','fillText','transformByMatrix','setTransformByMatrix','clipRect','drawTexture','drawTexture2','drawTextureWithTransform','flush','clear','destroy','drawCanvas','fillBorderText','drawCurves'];
		funs.forEach(function(i){
			to[i]=from[i];
		});
	}

	Context.replaceCanvasGetSet=function(tar,key){
		var oldO=/*__JS__ */Object.getOwnPropertyDescriptor(tar,key);
		if (!oldO||!oldO.configurable)return false;
		var newO={};
		var tkey;
		for (tkey in oldO){
			if (tkey !="set"){
				newO[tkey]=oldO[tkey];
			}
		};
		var preFun=oldO["set"];
		newO["set"]=function (v){
			var _self=/*__JS__ */this;
			preFun.call(_self,v);
			var _ct=_self.getContext("2d");
			if (_ct && "__reset" in _ct){
				_ct.__reset();
			}
		}
		/*__JS__ */Object.defineProperty(tar,key,newO);
		return true;
	}

	Context.replaceGetSet=function(tar,key){
		var oldO=/*__JS__ */Object.getOwnPropertyDescriptor(tar,key);
		if (!oldO||!oldO.configurable)return false;
		var newO={};
		var tkey;
		for (tkey in oldO){
			if (tkey !="set"){
				newO[tkey]=oldO[tkey];
			}
		};
		var preFun=oldO["set"];
		var dataKey="___"+key+"__";
		Context.newKeys.push(dataKey);
		newO["set"]=function (v){
			var _self=/*__JS__ */this;
			if (v !=_self[dataKey]){
				_self[dataKey]=v;
				preFun.call(_self,v);
			}
		}
		/*__JS__ */Object.defineProperty(tar,key,newO);
		return true;
	}

	Context._default=new Context();
	Context.newKeys=[];
	__static(Context,
	['replaceKeys',function(){return this.replaceKeys=["font","fillStyle","textBaseline"];}
	]);
	return Context;
})()


/**
*@private
*<code>ResourceManager</code> 是资源管理类。它用于资源的载入、获取、销毁。
*/
//class laya.resource.ResourceManager
var ResourceManager=(function(){
	function ResourceManager(name){
		/**唯一标识ID。*/
		this._id=0;
		/**名字。*/
		this._name=null;
		/**所管理资源。*/
		this._resources=null;
		/**所管理资源的累计内存,以字节为单位。*/
		this._memorySize=0;
		/**垃圾回收比例，范围是0到1。*/
		this._garbageCollectionRate=NaN;
		/**自动释放机制中内存是否溢出。*/
		this._isOverflow=false;
		/**是否启用自动释放机制。*/
		this.autoRelease=false;
		/**自动释放机制的内存触发上限,以字节为单位。*/
		this.autoReleaseMaxSize=0;
		this._id=++ResourceManager._uniqueIDCounter;
		this._name=name ? name :"Content Manager";
		ResourceManager._isResourceManagersSorted=false;
		this._memorySize=0;
		this._isOverflow=false;
		this.autoRelease=false;
		this.autoReleaseMaxSize=1024 *1024 *512;
		this._garbageCollectionRate=0.2;
		ResourceManager._resourceManagers.push(this);
		this._resources=[];
	}

	__class(ResourceManager,'laya.resource.ResourceManager');
	var __proto=ResourceManager.prototype;
	Laya.imps(__proto,{"laya.resource.IDispose":true})
	/**
	*获取指定索引的资源 Resource 对象。
	*@param 索引。
	*@return 资源 Resource 对象。
	*/
	__proto.getResourceByIndex=function(index){
		return this._resources[index];
	}

	/**
	*获取此管理器所管理的资源个数。
	*@return 资源个数。
	*/
	__proto.getResourcesLength=function(){
		return this._resources.length;
	}

	/**
	*添加指定资源。
	*@param resource 需要添加的资源 Resource 对象。
	*@return 是否添加成功。
	*/
	__proto.addResource=function(resource){
		if (resource.resourceManager)
			resource.resourceManager.removeResource(resource);
		var index=this._resources.indexOf(resource);
		if (index===-1){
			resource._resourceManager=this;
			this._resources.push(resource);
			this.addSize(resource.memorySize);
			return true;
		}
		return false;
	}

	/**
	*移除指定资源。
	*@param resource 需要移除的资源 Resource 对象
	*@return 是否移除成功。
	*/
	__proto.removeResource=function(resource){
		var index=this._resources.indexOf(resource);
		if (index!==-1){
			this._resources.splice(index,1);
			resource._resourceManager=null;
			this._memorySize-=resource.memorySize;
			return true;
		}
		return false;
	}

	/**
	*卸载此资源管理器载入的资源。
	*/
	__proto.unload=function(){
		var tempResources=this._resources.slice(0,this._resources.length);
		for (var i=0;i < tempResources.length;i++){
			var resource=tempResources[i];
			resource.destroy();
		}
		tempResources.length=0;
	}

	/**释放资源。*/
	__proto.dispose=function(){
		if (this===ResourceManager._systemResourceManager)
			throw new Error("systemResourceManager不能被释放！");
		ResourceManager._resourceManagers.splice(ResourceManager._resourceManagers.indexOf(this),1);
		ResourceManager._isResourceManagersSorted=false;
		var tempResources=this._resources.slice(0,this._resources.length);
		for (var i=0;i < tempResources.length;i++){
			var resource=tempResources[i];
			resource.resourceManager.removeResource(resource);
			resource.destroy();
		}
		tempResources.length=0;
	}

	/**
	*增加内存。
	*@param add 需要增加的内存大小。
	*/
	__proto.addSize=function(add){
		if (add){
			if (this.autoRelease && add > 0)
				((this._memorySize+add)> this.autoReleaseMaxSize)&& (this.garbageCollection((1-this._garbageCollectionRate)*this.autoReleaseMaxSize));
			this._memorySize+=add;
		}
	}

	/**
	*垃圾回收。
	*@param reserveSize 保留尺寸。
	*/
	__proto.garbageCollection=function(reserveSize){
		var all=this._resources;
		all=all.slice();
		all.sort(function(a,b){
			if (!a || !b)
				throw new Error("a或b不能为空！");
			if (a.released && b.released)
				return 0;
			else if (a.released)
			return 1;
			else if (b.released)
			return-1;
			return a._lastUseFrameCount-b._lastUseFrameCount;
		});
		var currentFrameCount=Stat.loopCount;
		for (var i=0,n=all.length;i < n;i++){
			var resou=all[i];
			if (currentFrameCount-resou._lastUseFrameCount > 1){
				resou.releaseResource();
				}else {
				if (this._memorySize >=reserveSize)
					this._isOverflow=true;
				return;
			}
			if (this._memorySize < reserveSize){
				this._isOverflow=false;
				return;
			}
		}
	}

	/**
	*唯一标识 ID 。
	*/
	__getset(0,__proto,'id',function(){
		return this._id;
	});

	/**
	*名字。
	*/
	__getset(0,__proto,'name',function(){
		return this._name;
		},function(value){
		if ((value || value!=="")&& this._name!==value){
			this._name=value;
			ResourceManager._isResourceManagersSorted=false;
		}
	});

	/**
	*此管理器所管理资源的累计内存，以字节为单位。
	*/
	__getset(0,__proto,'memorySize',function(){
		return this._memorySize;
	});

	/**
	*系统资源管理器。
	*/
	__getset(1,ResourceManager,'systemResourceManager',function(){
		return ResourceManager._systemResourceManager;
	});

	ResourceManager.__init__=function(){
		ResourceManager.currentResourceManager=ResourceManager.systemResourceManager;
	}

	ResourceManager.getLoadedResourceManagerByIndex=function(index){
		return ResourceManager._resourceManagers[index];
	}

	ResourceManager.getLoadedResourceManagersCount=function(){
		return ResourceManager._resourceManagers.length;
	}

	ResourceManager.recreateContentManagers=function(force){
		(force===void 0)&& (force=false);
		var temp=ResourceManager.currentResourceManager;
		for (var i=0;i < ResourceManager._resourceManagers.length;i++){
			ResourceManager.currentResourceManager=ResourceManager._resourceManagers[i];
			for (var j=0;j < ResourceManager.currentResourceManager._resources.length;j++){
				ResourceManager.currentResourceManager._resources[j].releaseResource(force);
				ResourceManager.currentResourceManager._resources[j].activeResource(force);
			}
		}
		ResourceManager.currentResourceManager=temp;
	}

	ResourceManager.releaseContentManagers=function(force){
		(force===void 0)&& (force=false);
		var temp=ResourceManager.currentResourceManager;
		for (var i=0;i < ResourceManager._resourceManagers.length;i++){
			ResourceManager.currentResourceManager=ResourceManager._resourceManagers[i];
			for (var j=0;j < ResourceManager.currentResourceManager._resources.length;j++){
				var resource=ResourceManager.currentResourceManager._resources[j];
				(!resource.released)&& (resource.releaseResource(force));
			}
		}
		ResourceManager.currentResourceManager=temp;
	}

	ResourceManager._uniqueIDCounter=0;
	ResourceManager._isResourceManagersSorted=false;
	ResourceManager._resourceManagers=[];
	__static(ResourceManager,
	['_systemResourceManager',function(){return this._systemResourceManager=new ResourceManager("System Resource Manager");},'currentResourceManager',function(){return this.currentResourceManager=ResourceManager._systemResourceManager;}
	]);
	return ResourceManager;
})()


/**
*@private
*/
//class laya.system.System
var System=(function(){
	function System(){}
	__class(System,'laya.system.System');
	System.changeDefinition=function(name,classObj){
		Laya[name]=classObj;
		var str=name+"=classObj";
		Laya._runScript(str);
	}

	System.__init__=function(){
		if (Render.isConchApp){
			/*__JS__ */conch.disableConchResManager();
			/*__JS__ */conch.disableConchAutoRestoreLostedDevice();
		}
	}

	return System;
})()


SoundManager;
/**
*<code>Browser</code> 是浏览器代理类。封装浏览器及原生 js 提供的一些功能。
*/
//class laya.utils.Browser
var Browser=(function(){
	function Browser(){}
	__class(Browser,'laya.utils.Browser');
	/**设备像素比。*/
	__getset(1,Browser,'pixelRatio',function(){
		Browser.__init__();
		if (Browser.userAgent.indexOf("Mozilla/6.0(Linux; Android 6.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10)")>-1)return 2;
		return RunDriver.getPixelRatio();
	});

	/**浏览器窗口物理高度，其值等于clientHeight *pixelRatio，并且浏览器发生反转之后，宽高会互换。*/
	__getset(1,Browser,'height',function(){
		Browser.__init__();
		return ((Laya.stage && Laya.stage.canvasRotation)? Browser.clientWidth :Browser.clientHeight)*Browser.pixelRatio;
	});

	/**
	*浏览器窗口可视宽度。
	*通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerWidth(包含滚动条宽度)> document.body.clientWidth(不包含滚动条宽度)，如果前者为0或为空，则选择后者。
	*/
	__getset(1,Browser,'clientWidth',function(){
		Browser.__init__();
		return Browser.window.innerWidth || Browser.document.body.clientWidth;
	});

	/**浏览器原生 window 对象的引用。*/
	__getset(1,Browser,'window',function(){
		Browser.__init__();
		return Browser._window;
	});

	/**
	*浏览器窗口可视高度。
	*通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerHeight(包含滚动条高度)> document.body.clientHeight(不包含滚动条高度)> document.documentElement.clientHeight(不包含滚动条高度)，如果前者为0或为空，则选择后者。
	*/
	__getset(1,Browser,'clientHeight',function(){
		Browser.__init__();
		return Browser.window.innerHeight || Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight;
	});

	/**浏览器窗口物理宽度，其值等于clientWidth *pixelRatio，并且浏览器发生反转之后，宽高会互换。*/
	__getset(1,Browser,'width',function(){
		Browser.__init__();
		return ((Laya.stage && Laya.stage.canvasRotation)? Browser.clientHeight :Browser.clientWidth)*Browser.pixelRatio;
	});

	/**画布容器，用来盛放画布的容器。方便对画布进行控制*/
	__getset(1,Browser,'container',function(){
		Browser.__init__();
		if (!Browser._container){
			Browser._container=Browser.createElement("div");
			Browser._container.id="layaContainer";
			Browser.document.body.appendChild(Browser._container);
		}
		return Browser._container;
		},function(value){
		Browser._container=value;
	});

	/**浏览器原生 document 对象的引用。*/
	__getset(1,Browser,'document',function(){
		Browser.__init__();
		return Browser._document;
	});

	Browser.__init__=function(){
		SoundManager;
		if (Browser._window)return;
		Browser._window=RunDriver.getWindow();
		Browser._document=Browser.window.document;
		Browser._window.addEventListener('message',function(e){
			laya.utils.Browser._onMessage(e);
		},false);
		/*__JS__ */Browser.document.__createElement=Browser.document.createElement;
		/*__JS__ */window.requestAnimationFrame=window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (c){return window.setTimeout(c,1000 / 60);};;
		/*__JS__ */var $BS=window.document.body.style;$BS['-webkit-user-select']='none';$BS['-webkit-tap-highlight-color']='rgba(200,200,200,0)';;
		Browser.userAgent=/*[SAFE]*/ Browser.window.navigator.userAgent;
		Browser.u=/*[SAFE]*/ Browser.userAgent;
		Browser.onIOS=/*[SAFE]*/ !!Browser.u.match(/\(i[^;]+;(U;)? CPU.+Mac OS X/);
		Browser.onMobile=/*[SAFE]*/ Browser.u.indexOf("Mobile")>-1;
		Browser.onIPhone=/*[SAFE]*/ Browser.u.indexOf("iPhone")>-1;
		Browser.onMac=/*[SAFE]*/ Browser.u.indexOf("Mac OS X")>-1;
		Browser.onIPad=/*[SAFE]*/ Browser.u.indexOf("iPad")>-1;
		Browser.onAndroid=/*[SAFE]*/ Browser.u.indexOf('Android')>-1 || Browser.u.indexOf('Adr')>-1;
		Browser.onWP=/*[SAFE]*/ Browser.u.indexOf("Windows Phone")>-1;
		Browser.onQQBrowser=/*[SAFE]*/ Browser.u.indexOf("QQBrowser")>-1;
		Browser.onMQQBrowser=/*[SAFE]*/ Browser.u.indexOf("MQQBrowser")>-1 || (Browser.u.indexOf("Mobile")>-1 && Browser.u.indexOf("QQ")>-1);
		Browser.onIE=/*[SAFE]*/ !!Browser.window.ActiveXObject || "ActiveXObject" in Browser.window;
		Browser.onWeiXin=/*[SAFE]*/ Browser.u.indexOf('MicroMessenger')>-1;
		Browser.onPC=/*[SAFE]*/ !Browser.onMobile;
		Browser.onSafari=/*[SAFE]*/ Browser.u.indexOf("Safari")>-1;
		Browser.onFirefox=/*[SAFE]*/ Browser.u.indexOf('Firefox')>-1;
		Browser.onEdge=/*[SAFE]*/ Browser.u.indexOf('Edge')>-1;
		Browser.onMiniGame=/*[SAFE]*/ Browser.u.indexOf('MiniGame')>-1;
		Browser.onLimixiu=/*[SAFE]*/ Browser.u.indexOf('limixiu')>-1;
		Browser.httpProtocol=/*[SAFE]*/ Browser.window.location.protocol=="http:";
		if (Browser.onMiniGame && Browser.window.focus==null){
			console.error("请先初始化小游戏适配库，详细教程https://ldc.layabox.com/doc/?nav=zh-ts-5-0-0");
		}
		Browser.webAudioEnabled=/*[SAFE]*/ Browser.window["AudioContext"] || Browser.window["webkitAudioContext"] || Browser.window["mozAudioContext"] ? true :false;
		Browser.soundType=/*[SAFE]*/ Browser.webAudioEnabled ? "WEBAUDIOSOUND" :"AUDIOSOUND";
		/*__JS__ */Sound=Browser.webAudioEnabled?WebAudioSound:AudioSound;;
		/*__JS__ */if (Browser.webAudioEnabled)WebAudioSound.initWebAudio();;
		AudioSound._initMusicAudio();
		/*__JS__ */Browser.enableTouch=(('ontouchstart' in window)|| window.DocumentTouch && document instanceof DocumentTouch);
		/*__JS__ */window.focus();
		/*__JS__ */SoundManager._soundClass=Sound;;
		SoundManager._musicClass=AudioSound;
		Render._mainCanvas=Render._mainCanvas || HTMLCanvas.create('2D');
		if (Browser.canvas)return;
		Browser.canvas=HTMLCanvas.create('2D');
		Browser.context=Browser.canvas.getContext('2d');
	}

	Browser._onMessage=function(e){
		if (!e.data)return;
		if (e.data.name=="size"){
			Browser.window.innerWidth=e.data.width;
			Browser.window.innerHeight=e.data.height;
			Browser.window.__innerHeight=e.data.clientHeight;
			if (!Browser.document.createEvent){
				console.warn("no document.createEvent");
				return;
			};
			var evt=Browser.document.createEvent("HTMLEvents");
			evt.initEvent("resize",false,false);
			Browser.window.dispatchEvent(evt);
			return;
		}
	}

	Browser.createElement=function(type){
		Browser.__init__();
		return Browser.document.__createElement(type);
	}

	Browser.getElementById=function(type){
		Browser.__init__();
		return Browser.document.getElementById(type);
	}

	Browser.removeElement=function(ele){
		if (ele && ele.parentNode)ele.parentNode.removeChild(ele);
	}

	Browser.now=function(){
		return RunDriver.now();
	}

	Browser._window=null;
	Browser._document=null;
	Browser._container=null;
	Browser.userAgent=null;
	Browser.u=null;
	Browser.onIOS=false;
	Browser.onMac=false;
	Browser.onMobile=false;
	Browser.onIPhone=false;
	Browser.onIPad=false;
	Browser.onAndroid=false;
	Browser.onWP=false;
	Browser.onQQBrowser=false;
	Browser.onMQQBrowser=false;
	Browser.onSafari=false;
	Browser.onFirefox=false;
	Browser.onEdge=false;
	Browser.onIE=false;
	Browser.onWeiXin=false;
	Browser.onMiniGame=false;
	Browser.onLimixiu=false;
	Browser.onPC=false;
	Browser.httpProtocol=false;
	Browser.webAudioEnabled=false;
	Browser.soundType=null;
	Browser.enableTouch=false;
	Browser.canvas=null;
	Browser.context=null;
	Browser.__init$=function(){
		AudioSound;
		WebAudioSound;
	}

	return Browser;
})()


/**
*<p> <code>Byte</code> 类提供用于优化读取、写入以及处理二进制数据的方法和属性。</p>
*<p><b>注意：</b> <code>Byte</code> 类适用于需要在字节层访问数据的高级开发人员。</p>
*/
//class laya.utils.Byte
var Byte=(function(){
	function Byte(data){
		/**
		*@private
		*是否为小端数据。
		*/
		this._xd_=true;
		this._allocated_=8;
		/**
		*@private
		*原始数据。
		*/
		//this._d_=null;
		/**
		*@private
		*DataView
		*/
		//this._u8d_=null;
		/**@private */
		this._pos_=0;
		/**@private */
		this._length=0;
		if (data){
			this._u8d_=new Uint8Array(data);
			this._d_=new DataView(this._u8d_.buffer);
			this._length=this._d_.byteLength;
			}else {
			this.___resizeBuffer(this._allocated_);
		}
	}

	__class(Byte,'laya.utils.Byte');
	var __proto=Byte.prototype;
	/**@private */
	__proto.___resizeBuffer=function(len){
		try {
			var newByteView=new Uint8Array(len);
			if (this._u8d_ !=null){
				if (this._u8d_.length <=len)newByteView.set(this._u8d_);
				else newByteView.set(this._u8d_.subarray(0,len));
			}
			this._u8d_=newByteView;
			this._d_=new DataView(newByteView.buffer);
			}catch (err){
			throw "___resizeBuffer err:"+len;
		}
	}

	/**
	*<p>常用于解析固定格式的字节流。</p>
	*<p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>
	*@return 读取的字符串。
	*/
	__proto.getString=function(){
		return this.rUTF(this.getUint16());
	}

	/**
	*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。
	*@param start 开始位置。
	*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
	*@return 读取的 Float32Array 对象。
	*/
	__proto.getFloat32Array=function(start,len){
		var end=start+len;
		end=(end > this._length)? this._length :end;
		var v=new Float32Array(this._d_.buffer.slice(start,end));
		this._pos_=end;
		return v;
	}

	/**
	*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。
	*@param start 开始位置。
	*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
	*@return 读取的 Uint8Array 对象。
	*/
	__proto.getUint8Array=function(start,len){
		var end=start+len;
		end=(end > this._length)? this._length :end;
		var v=new Uint8Array(this._d_.buffer.slice(start,end));
		this._pos_=end;
		return v;
	}

	/**
	*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。
	*@param start 开始读取的字节偏移量位置。
	*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
	*@return 读取的 Uint8Array 对象。
	*/
	__proto.getInt16Array=function(start,len){
		var end=start+len;
		end=(end > this._length)? this._length :end;
		var v=new Int16Array(this._d_.buffer.slice(start,end));
		this._pos_=end;
		return v;
	}

	/**
	*从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。
	*@return 单精度（32 位）浮点数。
	*/
	__proto.getFloat32=function(){
		if (this._pos_+4 > this._length)throw "getFloat32 error - Out of bounds";
		var v=this._d_.getFloat32(this._pos_,this._xd_);
		this._pos_+=4;
		return v;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。
	*@return 双精度（64 位）浮点数。
	*/
	__proto.getFloat64=function(){
		if (this._pos_+8 > this._length)throw "getFloat64 error - Out of bounds";
		var v=this._d_.getFloat64(this._pos_,this._xd_);
		this._pos_+=8;
		return v;
	}

	/**
	*在字节流的当前字节偏移量位置处写入一个 IEEE 754 单精度（32 位）浮点数。
	*@param value 单精度（32 位）浮点数。
	*/
	__proto.writeFloat32=function(value){
		this.ensureWrite(this._pos_+4);
		this._d_.setFloat32(this._pos_,value,this._xd_);
		this._pos_+=4;
	}

	/**
	*在字节流的当前字节偏移量位置处写入一个 IEEE 754 双精度（64 位）浮点数。
	*@param value 双精度（64 位）浮点数。
	*/
	__proto.writeFloat64=function(value){
		this.ensureWrite(this._pos_+8);
		this._d_.setFloat64(this._pos_,value,this._xd_);
		this._pos_+=8;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Int32 值。
	*@return Int32 值。
	*/
	__proto.getInt32=function(){
		if (this._pos_+4 > this._length)throw "getInt32 error - Out of bounds";
		var float=this._d_.getInt32(this._pos_,this._xd_);
		this._pos_+=4;
		return float;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Uint32 值。
	*@return Uint32 值。
	*/
	__proto.getUint32=function(){
		if (this._pos_+4 > this._length)throw "getUint32 error - Out of bounds";
		var v=this._d_.getUint32(this._pos_,this._xd_);
		this._pos_+=4;
		return v;
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Int32 值。
	*@param value 需要写入的 Int32 值。
	*/
	__proto.writeInt32=function(value){
		this.ensureWrite(this._pos_+4);
		this._d_.setInt32(this._pos_,value,this._xd_);
		this._pos_+=4;
	}

	/**
	*在字节流的当前字节偏移量位置处写入 Uint32 值。
	*@param value 需要写入的 Uint32 值。
	*/
	__proto.writeUint32=function(value){
		this.ensureWrite(this._pos_+4);
		this._d_.setUint32(this._pos_,value,this._xd_);
		this._pos_+=4;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Int16 值。
	*@return Int16 值。
	*/
	__proto.getInt16=function(){
		if (this._pos_+2 > this._length)throw "getInt16 error - Out of bounds";
		var us=this._d_.getInt16(this._pos_,this._xd_);
		this._pos_+=2;
		return us;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Uint16 值。
	*@return Uint16 值。
	*/
	__proto.getUint16=function(){
		if (this._pos_+2 > this._length)throw "getUint16 error - Out of bounds";
		var us=this._d_.getUint16(this._pos_,this._xd_);
		this._pos_+=2;
		return us;
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Uint16 值。
	*@param value 需要写入的Uint16 值。
	*/
	__proto.writeUint16=function(value){
		this.ensureWrite(this._pos_+2);
		this._d_.setUint16(this._pos_,value,this._xd_);
		this._pos_+=2;
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Int16 值。
	*@param value 需要写入的 Int16 值。
	*/
	__proto.writeInt16=function(value){
		this.ensureWrite(this._pos_+2);
		this._d_.setInt16(this._pos_,value,this._xd_);
		this._pos_+=2;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Uint8 值。
	*@return Uint8 值。
	*/
	__proto.getUint8=function(){
		if (this._pos_+1 > this._length)throw "getUint8 error - Out of bounds";
		return this._d_.getUint8(this._pos_++);
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Uint8 值。
	*@param value 需要写入的 Uint8 值。
	*/
	__proto.writeUint8=function(value){
		this.ensureWrite(this._pos_+1);
		this._d_.setUint8(this._pos_,value);
		this._pos_++;
	}

	/**
	*@private
	*从字节流的指定字节偏移量位置处读取一个 Uint8 值。
	*@param pos 字节读取位置。
	*@return Uint8 值。
	*/
	__proto._getUInt8=function(pos){
		return this._d_.getUint8(pos);
	}

	/**
	*@private
	*从字节流的指定字节偏移量位置处读取一个 Uint16 值。
	*@param pos 字节读取位置。
	*@return Uint16 值。
	*/
	__proto._getUint16=function(pos){
		return this._d_.getUint16(pos,this._xd_);
	}

	/**
	*@private
	*使用 getFloat32()读取6个值，用于创建并返回一个 Matrix 对象。
	*@return Matrix 对象。
	*/
	__proto._getMatrix=function(){
		var rst=new Matrix(this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32());
		return rst;
	}

	/**
	*@private
	*读取指定长度的 UTF 型字符串。
	*@param len 需要读取的长度。
	*@return 读取的字符串。
	*/
	__proto.rUTF=function(len){
		var v="",max=this._pos_+len,c=0,c2=0,c3=0,f=String.fromCharCode;
		var u=this._u8d_,i=0;
		while (this._pos_ < max){
			c=u[this._pos_++];
			if (c < 0x80){
				if (c !=0){
					v+=f(c);
				}
				}else if (c < 0xE0){
				v+=f(((c & 0x3F)<< 6)| (u[this._pos_++] & 0x7F));
				}else if (c < 0xF0){
				c2=u[this._pos_++];
				v+=f(((c & 0x1F)<< 12)| ((c2 & 0x7F)<< 6)| (u[this._pos_++] & 0x7F));
				}else {
				c2=u[this._pos_++];
				c3=u[this._pos_++];
				v+=f(((c & 0x0F)<< 18)| ((c2 & 0x7F)<< 12)| ((c3 << 6)& 0x7F)| (u[this._pos_++] & 0x7F));
			}
			i++;
		}
		return v;
	}

	/**
	*@private
	*读取 <code>len</code> 参数指定的长度的字符串。
	*@param len 要读取的字符串的长度。
	*@return 指定长度的字符串。
	*/
	__proto.getCustomString=function(len){
		var v="",ulen=0,c=0,c2=0,f=String.fromCharCode;
		var u=this._u8d_,i=0;
		while (len > 0){
			c=u[this._pos_];
			if (c < 0x80){
				v+=f(c);
				this._pos_++;
				len--;
				}else {
				ulen=c-0x80;
				this._pos_++;
				len-=ulen;
				while (ulen > 0){
					c=u[this._pos_++];
					c2=u[this._pos_++];
					v+=f((c2 << 8)| c);
					ulen--;
				}
			}
		}
		return v;
	}

	/**
	*清除字节数组的内容，并将 length 和 pos 属性重置为 0。调用此方法将释放 Byte 实例占用的内存。
	*/
	__proto.clear=function(){
		this._pos_=0;
		this.length=0;
	}

	/**
	*@private
	*获取此对象的 ArrayBuffer 引用。
	*@return
	*/
	__proto.__getBuffer=function(){
		return this._d_.buffer;
	}

	/**
	*<p>将 UTF-8 字符串写入字节流。类似于 writeUTF()方法，但 writeUTFBytes()不使用 16 位长度的字为字符串添加前缀。</p>
	*<p>对应的读取方法为： getUTFBytes 。</p>
	*@param value 要写入的字符串。
	*/
	__proto.writeUTFBytes=function(value){
		value=value+"";
		for (var i=0,sz=value.length;i < sz;i++){
			var c=value.charCodeAt(i);
			if (c <=0x7F){
				this.writeByte(c);
				}else if (c <=0x7FF){
				this.ensureWrite(this._pos_+2);
				this._u8d_.set([0xC0 | (c >> 6),0x80 | (c & 0x3F)],this._pos_);
				this._pos_+=2;
				}else if (c <=0xFFFF){
				this.ensureWrite(this._pos_+3);
				this._u8d_.set([0xE0 | (c >> 12),0x80 | ((c >> 6)& 0x3F),0x80 | (c & 0x3F)],this._pos_);
				this._pos_+=3;
				}else {
				this.ensureWrite(this._pos_+4);
				this._u8d_.set([0xF0 | (c >> 18),0x80 | ((c >> 12)& 0x3F),0x80 | ((c >> 6)& 0x3F),0x80 | (c & 0x3F)],this._pos_);
				this._pos_+=4;
			}
		}
	}

	/**
	*<p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节。</p>
	*<p>对应的读取方法为： getUTFString 。</p>
	*@param value 要写入的字符串值。
	*/
	__proto.writeUTFString=function(value){
		var tPos=this.pos;
		this.writeUint16(1);
		this.writeUTFBytes(value);
		var dPos=this.pos-tPos-2;
		if (dPos >=65536){
			throw "writeUTFString byte len more than 65536";
		}
		this._d_.setUint16(tPos,dPos,this._xd_);
	}

	/**
	*@private
	*读取 UTF-8 字符串。
	*@return 读取的字符串。
	*/
	__proto.readUTFString=function(){
		return this.readUTFBytes(this.getUint16());
	}

	/**
	*<p>从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是一个无符号的短整型（以此字节表示要读取的长度）。</p>
	*<p>对应的写入方法为： writeUTFString 。</p>
	*@return 读取的字符串。
	*/
	__proto.getUTFString=function(){
		return this.readUTFString();
	}

	/**
	*@private
	*读字符串，必须是 writeUTFBytes 方法写入的字符串。
	*@param len 要读的buffer长度，默认将读取缓冲区全部数据。
	*@return 读取的字符串。
	*/
	__proto.readUTFBytes=function(len){
		(len===void 0)&& (len=-1);
		if (len==0)return "";
		var lastBytes=this.bytesAvailable;
		if (len > lastBytes)throw "readUTFBytes error - Out of bounds";
		len=len > 0 ? len :lastBytes;
		return this.rUTF(len);
	}

	/**
	*<p>从字节流中读取一个由 length 参数指定的长度的 UTF-8 字节序列，并返回一个字符串。</p>
	*<p>一般读取的是由 writeUTFBytes 方法写入的字符串。</p>
	*@param len 要读的buffer长度，默认将读取缓冲区全部数据。
	*@return 读取的字符串。
	*/
	__proto.getUTFBytes=function(len){
		(len===void 0)&& (len=-1);
		return this.readUTFBytes(len);
	}

	/**
	*<p>在字节流中写入一个字节。</p>
	*<p>使用参数的低 8 位。忽略高 24 位。</p>
	*@param value
	*/
	__proto.writeByte=function(value){
		this.ensureWrite(this._pos_+1);
		this._d_.setInt8(this._pos_,value);
		this._pos_+=1;
	}

	/**
	*@private
	*从字节流中读取带符号的字节。
	*/
	__proto.readByte=function(){
		if (this._pos_+1 > this._length)throw "readByte error - Out of bounds";
		return this._d_.getInt8(this._pos_++);
	}

	/**
	*<p>从字节流中读取带符号的字节。</p>
	*<p>返回值的范围是从-128 到 127。</p>
	*@return 介于-128 和 127 之间的整数。
	*/
	__proto.getByte=function(){
		return this.readByte();
	}

	/**
	*<p>保证该字节流的可用长度不小于 <code>lengthToEnsure</code> 参数指定的值。</p>
	*@param lengthToEnsure 指定的长度。
	*/
	__proto.ensureWrite=function(lengthToEnsure){
		if (this._length < lengthToEnsure)this._length=lengthToEnsure;
		if (this._allocated_ < lengthToEnsure)this.length=lengthToEnsure;
	}

	/**
	*<p>将指定 arraybuffer 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>
	*<p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>
	*<p>如果 offset 或 length 小于0，本函数将抛出异常。</p>
	*$NEXTBIG 由于没有判断length和arraybuffer的合法性，当开发者填写了错误的length值时，会导致写入多余的空白数据甚至内存溢出，为了避免影响开发者正在使用此方法的功能，下个重大版本会修复这些问题。
	*@param arraybuffer 需要写入的 Arraybuffer 对象。
	*@param offset Arraybuffer 对象的索引的偏移量（以字节为单位）
	*@param length 从 Arraybuffer 对象写入到 Byte 对象的长度（以字节为单位）
	*/
	__proto.writeArrayBuffer=function(arraybuffer,offset,length){
		(offset===void 0)&& (offset=0);
		(length===void 0)&& (length=0);
		if (offset < 0 || length < 0)throw "writeArrayBuffer error - Out of bounds";
		if (length==0)length=arraybuffer.byteLength-offset;
		this.ensureWrite(this._pos_+length);
		var uint8array=new Uint8Array(arraybuffer);
		this._u8d_.set(uint8array.subarray(offset,offset+length),this._pos_);
		this._pos_+=length;
	}

	/**
	*获取此对象的 ArrayBuffer 数据，数据只包含有效数据部分。
	*/
	__getset(0,__proto,'buffer',function(){
		var rstBuffer=this._d_.buffer;
		if (rstBuffer.byteLength==this.length)return rstBuffer;
		return rstBuffer.slice(0,this.length);
	});

	/**
	*<p> <code>Byte</code> 实例的字节序。取值为：<code>BIG_ENDIAN</code> 或 <code>BIG_ENDIAN</code> 。</p>
	*<p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>
	*<p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>
	*<code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
	*/
	__getset(0,__proto,'endian',function(){
		return this._xd_ ? "littleEndian" :"bigEndian";
		},function(endianStr){
		this._xd_=(endianStr=="littleEndian");
	});

	/**
	*<p> <code>Byte</code> 对象的长度（以字节为单位）。</p>
	*<p>如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧；如果将长度设置为小于当前长度的值，将会截断该字节数组。</p>
	*<p>如果要设置的长度大于当前已分配的内存空间的字节长度，则重新分配内存空间，大小为以下两者较大者：要设置的长度、当前已分配的长度的2倍，并将原有数据拷贝到新的内存空间中；如果要设置的长度小于当前已分配的内存空间的字节长度，也会重新分配内存空间，大小为要设置的长度，并将原有数据从头截断为要设置的长度存入新的内存空间中。</p>
	*/
	__getset(0,__proto,'length',function(){
		return this._length;
		},function(value){
		if (this._allocated_ < value)
			this.___resizeBuffer(this._allocated_=Math.floor(Math.max(value,this._allocated_ *2)));
		else if (this._allocated_ > value)
		this.___resizeBuffer(this._allocated_=value);
		this._length=value;
	});

	/**
	*移动或返回 Byte 对象的读写指针的当前位置（以字节为单位）。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。
	*/
	__getset(0,__proto,'pos',function(){
		return this._pos_;
		},function(value){
		this._pos_=value;
	});

	/**
	*可从字节流的当前位置到末尾读取的数据的字节数。
	*/
	__getset(0,__proto,'bytesAvailable',function(){
		return this._length-this._pos_;
	});

	Byte.getSystemEndian=function(){
		if (!Byte._sysEndian){
			var buffer=new ArrayBuffer(2);
			new DataView(buffer).setInt16(0,256,true);
			Byte._sysEndian=(new Int16Array(buffer))[0]===256 ? /*CLASS CONST:laya.utils.Byte.LITTLE_ENDIAN*/"littleEndian" :/*CLASS CONST:laya.utils.Byte.BIG_ENDIAN*/"bigEndian";
		}
		return Byte._sysEndian;
	}

	Byte.BIG_ENDIAN="bigEndian";
	Byte.LITTLE_ENDIAN="littleEndian";
	Byte._sysEndian=null;
	return Byte;
})()


/**
*@private
*对象缓存统一管理类
*/
//class laya.utils.CacheManager
var CacheManager=(function(){
	function CacheManager(){}
	__class(CacheManager,'laya.utils.CacheManager');
	CacheManager.regCacheByFunction=function(disposeFunction,getCacheListFunction){
		CacheManager.unRegCacheByFunction(disposeFunction,getCacheListFunction);
		var cache;
		cache={tryDispose:disposeFunction,getCacheList:getCacheListFunction};
		CacheManager._cacheList.push(cache);
	}

	CacheManager.unRegCacheByFunction=function(disposeFunction,getCacheListFunction){
		var i=0,len=0;
		len=CacheManager._cacheList.length;
		for (i=0;i < len;i++){
			if (CacheManager._cacheList[i].tryDispose==disposeFunction && CacheManager._cacheList[i].getCacheList==getCacheListFunction){
				CacheManager._cacheList.splice(i,1);
				return;
			}
		}
	}

	CacheManager.forceDispose=function(){
		var i=0,len=CacheManager._cacheList.length;
		for (i=0;i < len;i++){
			CacheManager._cacheList[i].tryDispose(true);
		}
	}

	CacheManager.beginCheck=function(waitTime){
		(waitTime===void 0)&& (waitTime=15000);
		Laya.timer.loop(waitTime,null,CacheManager._checkLoop);
	}

	CacheManager.stopCheck=function(){
		Laya.timer.clear(null,CacheManager._checkLoop);
	}

	CacheManager._checkLoop=function(){
		var cacheList=CacheManager._cacheList;
		if (cacheList.length < 1)return;
		var tTime=Browser.now();
		var count=0;
		var len=0;
		len=count=cacheList.length;
		while (count > 0){
			CacheManager._index++;
			CacheManager._index=CacheManager._index % len;
			cacheList[CacheManager._index].tryDispose(false);
			if (Browser.now()-tTime > CacheManager.loopTimeLimit)break ;
			count--;
		}
	}

	CacheManager.loopTimeLimit=2;
	CacheManager._cacheList=[];
	CacheManager._index=0;
	return CacheManager;
})()


/**
*<code>ClassUtils</code> 是一个类工具类。
*/
//class laya.utils.ClassUtils
var ClassUtils=(function(){
	function ClassUtils(){}
	__class(ClassUtils,'laya.utils.ClassUtils');
	ClassUtils.regClass=function(className,classDef){
		ClassUtils._classMap[className]=classDef;
	}

	ClassUtils.getRegClass=function(className){
		return ClassUtils._classMap[className];
	}

	ClassUtils.getInstance=function(className){
		var compClass=ClassUtils.getClass(className);
		if (compClass)
			return new compClass();
		else
		console.warn("[error] Undefined class:",className);
		return null;
	}

	ClassUtils.createByJson=function(json,node,root,customHandler,instanceHandler){
		if ((typeof json=='string'))
			json=JSON.parse(json);
		var props=json.props;
		if (!node){
			node=instanceHandler ? instanceHandler.runWith(json):ClassUtils.getInstance(props.runtime || json.type);
			if (!node)
				return null;
		};
		var child=json.child;
		if (child){
			for (var i=0,n=child.length;i < n;i++){
				var data=child[i];
				if ((data.props.name==="render" || data.props.renderType==="render")&& node["_$set_itemRender"])
					node.itemRender=data;
				else {
					if (data.type=="Graphic"){
						ClassUtils.addGraphicsToSprite(data,node);
						}else if (ClassUtils.isDrawType(data.type)){
						ClassUtils.addGraphicToSprite(data,node,true);
						}else {
						var tChild=ClassUtils.createByJson(data,null,root,customHandler,instanceHandler)
						if (data.type=="Script"){
							if (tChild.hasOwnProperty("owner")){
								tChild["owner"]=node;
								}else if (tChild.hasOwnProperty("target")){
								tChild["target"]=node;
							}
							}else if (data.props.renderType=="mask"){
							node.mask=tChild;
							}else {
							node.addChild(tChild);
						}
					}
				}
			}
		}
		if (props){
			for (var prop in props){
				var value=props[prop];
				if (prop==="var" && root){
					root[value]=node;
					}else if ((value instanceof Array)&& (typeof (node[prop])=='function')){
					node[prop].apply(node,value);
					}else {
					node[prop]=value;
				}
			}
		}
		if (customHandler && json.customProps){
			customHandler.runWith([node,json]);
		}
		if (node["created"])
			node.created();
		return node;
	}

	ClassUtils.addGraphicsToSprite=function(graphicO,sprite){
		var graphics;
		graphics=graphicO.child;
		if (!graphics || graphics.length < 1)
			return;
		var g;
		g=ClassUtils._getGraphicsFromSprite(graphicO,sprite);
		var ox=0;
		var oy=0;
		if (graphicO.props){
			ox=ClassUtils._getObjVar(graphicO.props,"x",0);
			oy=ClassUtils._getObjVar(graphicO.props,"y",0);
		}
		if (ox !=0 && oy !=0){
			g.translate(ox,oy);
		};
		var i=0,len=0;
		len=graphics.length;
		for (i=0;i < len;i++){
			ClassUtils._addGraphicToGraphics(graphics[i],g);
		}
		if (ox !=0 && oy !=0){
			g.translate(-ox,-oy);
		}
	}

	ClassUtils.addGraphicToSprite=function(graphicO,sprite,isChild){
		(isChild===void 0)&& (isChild=false);
		var g;
		g=isChild ? ClassUtils._getGraphicsFromSprite(graphicO,sprite):sprite.graphics;
		ClassUtils._addGraphicToGraphics(graphicO,g);
	}

	ClassUtils._getGraphicsFromSprite=function(dataO,sprite){
		var g;
		if (!dataO || !dataO.props)
			return sprite.graphics;
		var propsName;
		propsName=dataO.props.renderType;
		switch (propsName){
			case "hit":
			case "unHit":;
				var hitArea;
				if (!sprite.hitArea){
					sprite.hitArea=new HitArea();
				}
				hitArea=sprite.hitArea;
				if (!hitArea[propsName]){
					hitArea[propsName]=new Graphics();
				}
				g=hitArea[propsName];
				break ;
			default :
			}
		if (!g)
			g=sprite.graphics;
		return g;
	}

	ClassUtils._getTransformData=function(propsO){
		var m;
		if (propsO.hasOwnProperty("pivotX")|| propsO.hasOwnProperty("pivotY")){
			m=m || new Matrix();
			m.translate(-ClassUtils._getObjVar(propsO,"pivotX",0),-ClassUtils._getObjVar(propsO,"pivotY",0));
		};
		var sx=ClassUtils._getObjVar(propsO,"scaleX",1),sy=ClassUtils._getObjVar(propsO,"scaleY",1);
		var rotate=ClassUtils._getObjVar(propsO,"rotation",0);
		var skewX=ClassUtils._getObjVar(propsO,"skewX",0);
		var skewY=ClassUtils._getObjVar(propsO,"skewY",0);
		if (sx !=1 || sy !=1 || rotate !=0){
			m=m || new Matrix();
			m.scale(sx,sy);
			m.rotate(rotate *0.0174532922222222);
		}
		return m;
	}

	ClassUtils._addGraphicToGraphics=function(graphicO,graphic){
		var propsO;
		propsO=graphicO.props;
		if (!propsO)
			return;
		var drawConfig;
		drawConfig=ClassUtils.DrawTypeDic[graphicO.type];
		if (!drawConfig)
			return;
		var g;
		g=graphic;
		var m;
		var params=ClassUtils._getParams(propsO,drawConfig[1],drawConfig[2],drawConfig[3]);
		m=ClassUtils._tM;
		if (m || ClassUtils._alpha !=1){
			g.save();
			if (m)
				g.transform(m);
			if (ClassUtils._alpha !=1)
				g.alpha(ClassUtils._alpha);
		}
		g[drawConfig[0]].apply(g,params);
		if (m || ClassUtils._alpha !=1){
			g.restore();
		}
	}

	ClassUtils._adptLineData=function(params){
		params[2]=parseFloat(params[0])+parseFloat(params[2]);
		params[3]=parseFloat(params[1])+parseFloat(params[3]);
		return params;
	}

	ClassUtils._adptTextureData=function(params){
		params[0]=Loader.getRes(params[0]);
		return params;
	}

	ClassUtils._adptLinesData=function(params){
		params[2]=ClassUtils._getPointListByStr(params[2]);
		return params;
	}

	ClassUtils.isDrawType=function(type){
		if (type=="Image")
			return false;
		return ClassUtils.DrawTypeDic.hasOwnProperty(type);
	}

	ClassUtils._getParams=function(obj,params,xPos,adptFun){
		(xPos===void 0)&& (xPos=0);
		var rst;
		rst=ClassUtils._temParam;
		rst.length=params.length;
		var i=0,len=0;
		len=params.length;
		for (i=0;i < len;i++){
			rst[i]=ClassUtils._getObjVar(obj,params[i][0],params[i][1]);
		}
		ClassUtils._alpha=ClassUtils._getObjVar(obj,"alpha",1);
		var m;
		m=ClassUtils._getTransformData(obj);
		if (m){
			if (!xPos)xPos=0;
			m.translate(rst[xPos],rst[xPos+1]);
			rst[xPos]=rst[xPos+1]=0;
			ClassUtils._tM=m;
			}else {
			ClassUtils._tM=null;
		}
		if (adptFun && ClassUtils[adptFun]){
			rst=ClassUtils[adptFun](rst);
		}
		return rst;
	}

	ClassUtils._getPointListByStr=function(str){
		var pointArr;
		pointArr=str.split(",");
		var i=0,len=0;
		len=pointArr.length;
		for (i=0;i < len;i++){
			pointArr[i]=parseFloat(pointArr[i]);
		}
		return pointArr;
	}

	ClassUtils._getObjVar=function(obj,key,noValue){
		if (obj.hasOwnProperty(key)){
			return obj[key];
		}
		return noValue;
	}

	ClassUtils._temParam=[];
	ClassUtils._classMap={'Sprite':'laya.display.Sprite','Text':'laya.display.Text','Animation':'laya.display.Animation','Skeleton':'laya.ani.bone.Skeleton','Particle2D':'laya.particle.Particle2D','div':'laya.html.dom.HTMLDivElement','p':'laya.html.dom.HTMLElement','img':'laya.html.dom.HTMLImageElement','span':'laya.html.dom.HTMLElement','br':'laya.html.dom.HTMLBrElement','style':'laya.html.dom.HTMLStyleElement','font':'laya.html.dom.HTMLElement','a':'laya.html.dom.HTMLElement','#text':'laya.html.dom.HTMLElement'};
	ClassUtils.getClass=function(className){
		var classObject=ClassUtils._classMap[className] || className;
		if ((typeof classObject=='string'))
			return Laya["__classmap"][classObject];
		return classObject;
	}

	ClassUtils._tM=null;
	ClassUtils._alpha=NaN;
	__static(ClassUtils,
	['DrawTypeDic',function(){return this.DrawTypeDic={"Rect":["drawRect",[["x",0],["y",0],["width",0],["height",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Circle":["drawCircle",[["x",0],["y",0],["radius",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Pie":["drawPie",[["x",0],["y",0],["radius",0],["startAngle",0],["endAngle",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Image":["drawTexture",[["x",0],["y",0],["width",0],["height",0]]],"Texture":["drawTexture",[["skin",null],["x",0],["y",0],["width",0],["height",0]],1,"_adptTextureData"],"FillTexture":["fillTexture",[["skin",null],["x",0],["y",0],["width",0],["height",0],["repeat",null]],1,"_adptTextureData"],"FillText":["fillText",[["text",""],["x",0],["y",0],["font",null],["color",null],["textAlign",null]],1],"Line":["drawLine",[["x",0],["y",0],["toX",0],["toY",0],["lineColor",null],["lineWidth",0]],0,"_adptLineData"],"Lines":["drawLines",[["x",0],["y",0],["points",""],["lineColor",null],["lineWidth",0]],0,"_adptLinesData"],"Curves":["drawCurves",[["x",0],["y",0],["points",""],["lineColor",null],["lineWidth",0]],0,"_adptLinesData"],"Poly":["drawPoly",[["x",0],["y",0],["points",""],["fillColor",null],["lineColor",null],["lineWidth",1]],0,"_adptLinesData"]};}
	]);
	return ClassUtils;
})()


/**
*@private
*<code>Color</code> 是一个颜色值处理类。
*/
//class laya.utils.Color
var Color=(function(){
	function Color(str){
		/**@private */
		this._color=[];
		/**字符串型颜色值。*/
		//this.strColor=null;
		/**uint 型颜色值。*/
		//this.numColor=0;
		//this._drawStyle=null;
		if ((typeof str=='string')){
			this.strColor=str;
			if (str===null)str="#000000";
			str.charAt(0)=='#' && (str=str.substr(1));
			var len=str.length;
			if (len==3 || len==4){
				var temp="";
				for (var i=0;i < len;i++){
					temp+=(str[i]+str[i]);
				}
				str=temp;
			};
			var color=this.numColor=parseInt(str,16);
			var flag=(str.length==8);
			if (flag){
				this._color=[parseInt(str.substr(0,2),16)/ 255,((0x00FF0000 & color)>> 16)/ 255,((0x0000FF00 & color)>> 8)/ 255,(0x000000FF & color)/ 255];
				return;
			}
			}else {
			color=this.numColor=str;
			this.strColor=Utils.toHexColor(color);
		}
		this._color=[((0xFF0000 & color)>> 16)/ 255,((0xFF00 & color)>> 8)/ 255,(0xFF & color)/ 255,1];
		(this._color).__id=++Color._COLODID;
	}

	__class(Color,'laya.utils.Color');
	Color._initDefault=function(){
		Color._DEFAULT={};
		for (var i in Color._COLOR_MAP)Color._SAVE[i]=Color._DEFAULT[i]=new Color(Color._COLOR_MAP[i]);
		return Color._DEFAULT;
	}

	Color._initSaveMap=function(){
		Color._SAVE_SIZE=0;
		Color._SAVE={};
		for (var i in Color._DEFAULT)Color._SAVE[i]=Color._DEFAULT[i];
	}

	Color.create=function(str){
		var color=Color._SAVE[str+""];
		if (color !=null)return color;
		(Color._SAVE_SIZE < 1000)|| Color._initSaveMap();
		return Color._SAVE[str+""]=new Color(str);
	}

	Color._SAVE={};
	Color._SAVE_SIZE=0;
	Color._COLOR_MAP={"white":'#FFFFFF',"red":'#FF0000',"green":'#00FF00',"blue":'#0000FF',"black":'#000000',"yellow":'#FFFF00','gray':'#AAAAAA'};
	Color._DEFAULT=Color._initDefault();
	Color._COLODID=1;
	return Color;
})()


/**
*<code>Dictionary</code> 是一个字典型的数据存取类。
*/
//class laya.utils.Dictionary
var Dictionary=(function(){
	function Dictionary(){
		this._values=[];
		this._keys=[];
	}

	__class(Dictionary,'laya.utils.Dictionary');
	var __proto=Dictionary.prototype;
	/**
	*给指定的键名设置值。
	*@param key 键名。
	*@param value 值。
	*/
	__proto.set=function(key,value){
		var index=this.indexOf(key);
		if (index >=0){
			this._values[index]=value;
			return;
		}
		this._keys.push(key);
		this._values.push(value);
	}

	/**
	*获取指定对象的键名索引。
	*@param key 键名对象。
	*@return 键名索引。
	*/
	__proto.indexOf=function(key){
		var index=this._keys.indexOf(key);
		if (index >=0)return index;
		key=((typeof key=='string'))? Number(key):(((typeof key=='number'))? key.toString():key);
		return this._keys.indexOf(key);
	}

	/**
	*返回指定键名的值。
	*@param key 键名对象。
	*@return 指定键名的值。
	*/
	__proto.get=function(key){
		var index=this.indexOf(key);
		return index < 0 ? null :this._values[index];
	}

	/**
	*移除指定键名的值。
	*@param key 键名对象。
	*@return 是否成功移除。
	*/
	__proto.remove=function(key){
		var index=this.indexOf(key);
		if (index >=0){
			this._keys.splice(index,1);
			this._values.splice(index,1);
			return true;
		}
		return false;
	}

	/**
	*清除此对象的键名列表和键值列表。
	*/
	__proto.clear=function(){
		this._values.length=0;
		this._keys.length=0;
	}

	/**
	*获取所有的子元素列表。
	*/
	__getset(0,__proto,'values',function(){
		return this._values;
	});

	/**
	*获取所有的子元素键名列表。
	*/
	__getset(0,__proto,'keys',function(){
		return this._keys;
	});

	return Dictionary;
})()


/**
*@private
*<code>Dragging</code> 类是触摸滑动控件。
*/
//class laya.utils.Dragging
var Dragging=(function(){
	function Dragging(){
		/**被拖动的对象。*/
		//this.target=null;
		/**缓动衰减系数。*/
		this.ratio=0.92;
		/**单帧最大偏移量。*/
		this.maxOffset=60;
		/**滑动范围。*/
		//this.area=null;
		/**表示拖动是否有惯性。*/
		//this.hasInertia=false;
		/**橡皮筋最大值。*/
		//this.elasticDistance=NaN;
		/**橡皮筋回弹时间，单位为毫秒。*/
		//this.elasticBackTime=NaN;
		/**事件携带数据。*/
		//this.data=null;
		this._dragging=false;
		this._clickOnly=true;
		//this._elasticRateX=NaN;
		//this._elasticRateY=NaN;
		//this._lastX=NaN;
		//this._lastY=NaN;
		//this._offsetX=NaN;
		//this._offsetY=NaN;
		//this._offsets=null;
		//this._disableMouseEvent=false;
		//this._tween=null;
		//this._parent=null;
	}

	__class(Dragging,'laya.utils.Dragging');
	var __proto=Dragging.prototype;
	/**
	*开始拖拽。
	*@param target 待拖拽的 <code>Sprite</code> 对象。
	*@param area 滑动范围。
	*@param hasInertia 拖动是否有惯性。
	*@param elasticDistance 橡皮筋最大值。
	*@param elasticBackTime 橡皮筋回弹时间，单位为毫秒。
	*@param data 事件携带数据。
	*@param disableMouseEvent 鼠标事件是否有效。
	*@param ratio 惯性阻尼系数
	*/
	__proto.start=function(target,area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio){
		(ratio===void 0)&& (ratio=0.92);
		this.clearTimer();
		this.target=target;
		this.area=area;
		this.hasInertia=hasInertia;
		this.elasticDistance=area ? elasticDistance :0;
		this.elasticBackTime=elasticBackTime;
		this.data=data;
		this._disableMouseEvent=disableMouseEvent;
		this.ratio=ratio;
		if (target.globalScaleX !=1 || target.globalScaleY !=1){
			this._parent=target.parent;
			}else {
			this._parent=Laya.stage;
		}
		this._clickOnly=true;
		this._dragging=true;
		this._elasticRateX=this._elasticRateY=1;
		this._lastX=this._parent.mouseX;
		this._lastY=this._parent.mouseY;
		Laya.stage.on(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp);
		Laya.stage.on(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onStageMouseUp);
		Laya.timer.frameLoop(1,this,this.loop);
	}

	/**
	*清除计时器。
	*/
	__proto.clearTimer=function(){
		Laya.timer.clear(this,this.loop);
		Laya.timer.clear(this,this.tweenMove);
		if (this._tween){
			this._tween.recover();
			this._tween=null;
		}
	}

	/**
	*停止拖拽。
	*/
	__proto.stop=function(){
		if (this._dragging){
			MouseManager.instance.disableMouseEvent=false;
			Laya.stage.off(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp);
			Laya.stage.off(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onStageMouseUp);
			this._dragging=false;
			this.target && this.area && this.backToArea();
			this.clear();
		}
	}

	/**
	*拖拽的循环处理函数。
	*/
	__proto.loop=function(){
		var point=this._parent.getMousePoint();
		var mouseX=point.x;
		var mouseY=point.y;
		var offsetX=mouseX-this._lastX;
		var offsetY=mouseY-this._lastY;
		if (this._clickOnly){
			if (Math.abs(offsetX *Laya.stage._canvasTransform.getScaleX())> 1 || Math.abs(offsetY *Laya.stage._canvasTransform.getScaleY())> 1){
				this._clickOnly=false;
				this._offsets || (this._offsets=[]);
				this._offsets.length=0;
				this.target.event(/*laya.events.Event.DRAG_START*/"dragstart",this.data);
				MouseManager.instance.disableMouseEvent=this._disableMouseEvent;
				this.target._set$P("$_MOUSEDOWN",false);
			}else return;
			}else {
			this._offsets.push(offsetX,offsetY);
		}
		if (offsetX===0 && offsetY===0)return;
		this._lastX=mouseX;
		this._lastY=mouseY;
		this.target.x+=offsetX *this._elasticRateX;
		this.target.y+=offsetY *this._elasticRateY;
		this.area && this.checkArea();
		this.target.event(/*laya.events.Event.DRAG_MOVE*/"dragmove",this.data);
	}

	/**
	*拖拽区域检测。
	*/
	__proto.checkArea=function(){
		if (this.elasticDistance <=0){
			this.backToArea();
			}else {
			if (this.target.x < this.area.x){
				var offsetX=this.area.x-this.target.x;
				}else if (this.target.x > this.area.x+this.area.width){
				offsetX=this.target.x-this.area.x-this.area.width;
				}else {
				offsetX=0;
			}
			this._elasticRateX=Math.max(0,1-(offsetX / this.elasticDistance));
			if (this.target.y < this.area.y){
				var offsetY=this.area.y-this.target.y;
				}else if (this.target.y > this.area.y+this.area.height){
				offsetY=this.target.y-this.area.y-this.area.height;
				}else {
				offsetY=0;
			}
			this._elasticRateY=Math.max(0,1-(offsetY / this.elasticDistance));
		}
	}

	/**
	*移动至设定的拖拽区域。
	*/
	__proto.backToArea=function(){
		this.target.x=Math.min(Math.max(this.target.x,this.area.x),this.area.x+this.area.width);
		this.target.y=Math.min(Math.max(this.target.y,this.area.y),this.area.y+this.area.height);
	}

	/**
	*舞台的抬起事件侦听函数。
	*@param e Event 对象。
	*/
	__proto.onStageMouseUp=function(e){
		MouseManager.instance.disableMouseEvent=false;
		Laya.stage.off(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp);
		Laya.stage.off(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onStageMouseUp);
		Laya.timer.clear(this,this.loop);
		if (this._clickOnly || !this.target)return;
		if (this.hasInertia){
			if (this._offsets.length < 1){
				this._offsets.push(this._parent.mouseX-this._lastX,this._parent.mouseY-this._lastY);
			}
			this._offsetX=this._offsetY=0;
			var len=this._offsets.length;
			var n=Math.min(len,6);
			var m=this._offsets.length-n;
			for (var i=len-1;i > m;i--){
				this._offsetY+=this._offsets[i--];
				this._offsetX+=this._offsets[i];
			}
			this._offsetX=this._offsetX / n *2;
			this._offsetY=this._offsetY / n *2;
			if (Math.abs(this._offsetX)> this.maxOffset)this._offsetX=this._offsetX > 0 ? this.maxOffset :-this.maxOffset;
			if (Math.abs(this._offsetY)> this.maxOffset)this._offsetY=this._offsetY > 0 ? this.maxOffset :-this.maxOffset;
			Laya.timer.frameLoop(1,this,this.tweenMove);
			}else if (this.elasticDistance > 0){
			this.checkElastic();
			}else {
			this.clear();
		}
	}

	/**
	*橡皮筋效果检测。
	*/
	__proto.checkElastic=function(){
		var tx=NaN;
		var ty=NaN;
		if (this.target.x < this.area.x)tx=this.area.x;
		else if (this.target.x > this.area.x+this.area.width)tx=this.area.x+this.area.width;
		if (this.target.y < this.area.y)ty=this.area.y;
		else if (this.target.y > this.area.y+this.area.height)ty=this.area.y+this.area.height;
		if (!isNaN(tx)|| !isNaN(ty)){
			var obj={};
			if (!isNaN(tx))obj.x=tx;
			if (!isNaN(ty))obj.y=ty;
			this._tween=Tween.to(this.target,obj,this.elasticBackTime,Ease.sineOut,Handler.create(this,this.clear),0,false,false);
			}else {
			this.clear();
		}
	}

	/**
	*移动。
	*/
	__proto.tweenMove=function(){
		this._offsetX *=this.ratio *this._elasticRateX;
		this._offsetY *=this.ratio *this._elasticRateY;
		this.target.x+=this._offsetX;
		this.target.y+=this._offsetY;
		this.area && this.checkArea();
		this.target.event(/*laya.events.Event.DRAG_MOVE*/"dragmove",this.data);
		if ((Math.abs(this._offsetX)< 1 && Math.abs(this._offsetY)< 1)|| this._elasticRateX < 0.5 || this._elasticRateY < 0.5){
			Laya.timer.clear(this,this.tweenMove);
			if (this.elasticDistance > 0)this.checkElastic();
			else this.clear();
		}
	}

	/**
	*结束拖拽。
	*/
	__proto.clear=function(){
		if (this.target){
			this.clearTimer();
			var sp=this.target;
			this.target=null;
			this._parent=null;
			sp.event(/*laya.events.Event.DRAG_END*/"dragend",this.data);
		}
	}

	return Dragging;
})()


/**
*<code>Ease</code> 类定义了缓动函数，以便实现 <code>Tween</code> 动画的缓动效果。
*/
//class laya.utils.Ease
var Ease=(function(){
	function Ease(){}
	__class(Ease,'laya.utils.Ease');
	Ease.linearNone=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.linearIn=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.linearInOut=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.linearOut=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.bounceIn=function(t,b,c,d){
		return c-Ease.bounceOut(d-t,0,c,d)+b;
	}

	Ease.bounceInOut=function(t,b,c,d){
		if (t < d *0.5)return Ease.bounceIn(t *2,0,c,d)*.5+b;
		else return Ease.bounceOut(t *2-d,0,c,d)*.5+c *.5+b;
	}

	Ease.bounceOut=function(t,b,c,d){
		if ((t /=d)< (1 / 2.75))return c *(7.5625 *t *t)+b;
		else if (t < (2 / 2.75))return c *(7.5625 *(t-=(1.5 / 2.75))*t+.75)+b;
		else if (t < (2.5 / 2.75))return c *(7.5625 *(t-=(2.25 / 2.75))*t+.9375)+b;
		else return c *(7.5625 *(t-=(2.625 / 2.75))*t+.984375)+b;
	}

	Ease.backIn=function(t,b,c,d,s){
		(s===void 0)&& (s=1.70158);
		return c *(t /=d)*t *((s+1)*t-s)+b;
	}

	Ease.backInOut=function(t,b,c,d,s){
		(s===void 0)&& (s=1.70158);
		if ((t /=d *0.5)< 1)return c *0.5 *(t *t *(((s *=(1.525))+1)*t-s))+b;
		return c / 2 *((t-=2)*t *(((s *=(1.525))+1)*t+s)+2)+b;
	}

	Ease.backOut=function(t,b,c,d,s){
		(s===void 0)&& (s=1.70158);
		return c *((t=t / d-1)*t *((s+1)*t+s)+1)+b;
	}

	Ease.elasticIn=function(t,b,c,d,a,p){
		(a===void 0)&& (a=0);
		(p===void 0)&& (p=0);
		var s;
		if (t==0)return b;
		if ((t /=d)==1)return b+c;
		if (!p)p=d *.3;
		if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
			a=c;
			s=p / 4;
		}else s=p / Ease.PI2 *Math.asin(c / a);
		return-(a *Math.pow(2,10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p))+b;
	}

	Ease.elasticInOut=function(t,b,c,d,a,p){
		(a===void 0)&& (a=0);
		(p===void 0)&& (p=0);
		var s;
		if (t==0)return b;
		if ((t /=d *0.5)==2)return b+c;
		if (!p)p=d *(.3 *1.5);
		if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
			a=c;
			s=p / 4;
		}else s=p / Ease.PI2 *Math.asin(c / a);
		if (t < 1)return-.5 *(a *Math.pow(2,10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p))+b;
		return a *Math.pow(2,-10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p)*.5+c+b;
	}

	Ease.elasticOut=function(t,b,c,d,a,p){
		(a===void 0)&& (a=0);
		(p===void 0)&& (p=0);
		var s;
		if (t==0)return b;
		if ((t /=d)==1)return b+c;
		if (!p)p=d *.3;
		if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
			a=c;
			s=p / 4;
		}else s=p / Ease.PI2 *Math.asin(c / a);
		return (a *Math.pow(2,-10 *t)*Math.sin((t *d-s)*Ease.PI2 / p)+c+b);
	}

	Ease.strongIn=function(t,b,c,d){
		return c *(t /=d)*t *t *t *t+b;
	}

	Ease.strongInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t *t+b;
		return c *0.5 *((t-=2)*t *t *t *t+2)+b;
	}

	Ease.strongOut=function(t,b,c,d){
		return c *((t=t / d-1)*t *t *t *t+1)+b;
	}

	Ease.sineInOut=function(t,b,c,d){
		return-c *0.5 *(Math.cos(Math.PI *t / d)-1)+b;
	}

	Ease.sineIn=function(t,b,c,d){
		return-c *Math.cos(t / d *Ease.HALF_PI)+c+b;
	}

	Ease.sineOut=function(t,b,c,d){
		return c *Math.sin(t / d *Ease.HALF_PI)+b;
	}

	Ease.quintIn=function(t,b,c,d){
		return c *(t /=d)*t *t *t *t+b;
	}

	Ease.quintInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t *t+b;
		return c *0.5 *((t-=2)*t *t *t *t+2)+b;
	}

	Ease.quintOut=function(t,b,c,d){
		return c *((t=t / d-1)*t *t *t *t+1)+b;
	}

	Ease.quartIn=function(t,b,c,d){
		return c *(t /=d)*t *t *t+b;
	}

	Ease.quartInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t+b;
		return-c *0.5 *((t-=2)*t *t *t-2)+b;
	}

	Ease.quartOut=function(t,b,c,d){
		return-c *((t=t / d-1)*t *t *t-1)+b;
	}

	Ease.cubicIn=function(t,b,c,d){
		return c *(t /=d)*t *t+b;
	}

	Ease.cubicInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t+b;
		return c *0.5 *((t-=2)*t *t+2)+b;
	}

	Ease.cubicOut=function(t,b,c,d){
		return c *((t=t / d-1)*t *t+1)+b;
	}

	Ease.quadIn=function(t,b,c,d){
		return c *(t /=d)*t+b;
	}

	Ease.quadInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t+b;
		return-c *0.5 *((--t)*(t-2)-1)+b;
	}

	Ease.quadOut=function(t,b,c,d){
		return-c *(t /=d)*(t-2)+b;
	}

	Ease.expoIn=function(t,b,c,d){
		return (t==0)? b :c *Math.pow(2,10 *(t / d-1))+b-c *0.001;
	}

	Ease.expoInOut=function(t,b,c,d){
		if (t==0)return b;
		if (t==d)return b+c;
		if ((t /=d *0.5)< 1)return c *0.5 *Math.pow(2,10 *(t-1))+b;
		return c *0.5 *(-Math.pow(2,-10 *--t)+2)+b;
	}

	Ease.expoOut=function(t,b,c,d){
		return (t==d)? b+c :c *(-Math.pow(2,-10 *t / d)+1)+b;
	}

	Ease.circIn=function(t,b,c,d){
		return-c *(Math.sqrt(1-(t /=d)*t)-1)+b;
	}

	Ease.circInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return-c *0.5 *(Math.sqrt(1-t *t)-1)+b;
		return c *0.5 *(Math.sqrt(1-(t-=2)*t)+1)+b;
	}

	Ease.circOut=function(t,b,c,d){
		return c *Math.sqrt(1-(t=t / d-1)*t)+b;
	}

	Ease.HALF_PI=Math.PI *0.5;
	Ease.PI2=Math.PI *2;
	return Ease;
})()


/**
*鼠标点击区域，可以设置绘制一系列矢量图作为点击区域和非点击区域（目前只支持圆形，矩形，多边形）
*/
//class laya.utils.HitArea
var HitArea=(function(){
	function HitArea(){
		/**@private */
		this._hit=null;
		/**@private */
		this._unHit=null;
	}

	__class(HitArea,'laya.utils.HitArea');
	var __proto=HitArea.prototype;
	/**
	*是否包含某个点
	*@param x x坐标
	*@param y y坐标
	*@return 是否点击到
	*/
	__proto.isHit=function(x,y){
		if (!HitArea.isHitGraphic(x,y,this.hit))return false;
		return !HitArea.isHitGraphic(x,y,this.unHit);
	}

	/**
	*检测对象是否包含指定的点。
	*@param x 点的 X 轴坐标值（水平位置）。
	*@param y 点的 Y 轴坐标值（垂直位置）。
	*@return 如果包含指定的点，则值为 true；否则为 false。
	*/
	__proto.contains=function(x,y){
		return this.isHit(x,y);
	}

	/**
	*可点击区域，可以设置绘制一系列矢量图作为点击区域（目前只支持圆形，矩形，多边形）
	*/
	__getset(0,__proto,'hit',function(){
		if (!this._hit)this._hit=new Graphics();
		return this._hit;
		},function(value){
		this._hit=value;
	});

	/**
	*不可点击区域，可以设置绘制一系列矢量图作为非点击区域（目前只支持圆形，矩形，多边形）
	*/
	__getset(0,__proto,'unHit',function(){
		if (!this._unHit)this._unHit=new Graphics();
		return this._unHit;
		},function(value){
		this._unHit=value;
	});

	HitArea.isHitGraphic=function(x,y,graphic){
		if (!graphic)return false;
		var cmds;
		cmds=graphic.cmds;
		if (!cmds && graphic._one){
			cmds=HitArea._cmds;
			cmds.length=1;
			cmds[0]=graphic._one;
		}
		if (!cmds)return false;
		var i=0,len=0;
		len=cmds.length;
		var cmd;
		for (i=0;i < len;i++){
			cmd=cmds[i];
			if (!cmd)continue ;
			var context=Render._context;
			switch (cmd.callee){
				case context._translate:
				case 6:
					x-=cmd[0];
					y-=cmd[1];
				default :
				}
			if (HitArea.isHitCmd(x,y,cmd))return true;
		}
		return false;
	}

	HitArea.isHitCmd=function(x,y,cmd){
		if (!cmd)return false;
		var context=Render._context;
		var rst=false;
		switch (cmd["callee"]){
			case context._drawRect:
			case 13:
				HitArea._rec.setTo(cmd[0],cmd[1],cmd[2],cmd[3]);
				rst=HitArea._rec.contains(x,y);
				break ;
			case context._drawCircle:
			case context._fillCircle:
			case 14:;
				var d=NaN;
				x-=cmd[0];
				y-=cmd[1];
				d=x *x+y *y;
				rst=d < cmd[2] *cmd[2];
				break ;
			case context._drawPoly:
			case 18:
				x-=cmd[0];
				y-=cmd[1];
				rst=HitArea.ptInPolygon(x,y,cmd[2]);
				break ;
			default :
				break ;
			}
		return rst;
	}

	HitArea.ptInPolygon=function(x,y,areaPoints){
		var p;
		p=HitArea._ptPoint;
		p.setTo(x,y);
		var nCross=0;
		var p1x=NaN,p1y=NaN,p2x=NaN,p2y=NaN;
		var len=0;
		len=areaPoints.length;
		for (var i=0;i < len;i+=2){
			p1x=areaPoints[i];
			p1y=areaPoints[i+1];
			p2x=areaPoints[(i+2)% len];
			p2y=areaPoints[(i+3)% len];
			if (p1y==p2y)
				continue ;
			if (p.y < Math.min(p1y,p2y))
				continue ;
			if (p.y >=Math.max(p1y,p2y))
				continue ;
			var tx=(p.y-p1y)*(p2x-p1x)/ (p2y-p1y)+p1x;
			if (tx > p.x){
				nCross++;
			}
		}
		return (nCross % 2==1);
	}

	HitArea._cmds=[];
	__static(HitArea,
	['_rec',function(){return this._rec=new Rectangle();},'_ptPoint',function(){return this._ptPoint=new Point();}
	]);
	return HitArea;
})()


/**
*@private
*<code>HTMLChar</code> 是一个 HTML 字符类。
*/
//class laya.utils.HTMLChar
var HTMLChar=(function(){
	function HTMLChar(char,w,h,style){
		//this._sprite=null;
		//this._x=NaN;
		//this._y=NaN;
		//this._w=NaN;
		//this._h=NaN;
		/**表示是否是正常单词(英文|.|数字)。*/
		//this.isWord=false;
		/**字符。*/
		//this.char=null;
		/**字符数量。*/
		//this.charNum=NaN;
		/**CSS 样式。*/
		//this.style=null;
		this.char=char;
		this.charNum=char.charCodeAt(0);
		this._x=this._y=0;
		this.width=w;
		this.height=h;
		this.style=style;
		this.isWord=!HTMLChar._isWordRegExp.test(char);
	}

	__class(HTMLChar,'laya.utils.HTMLChar');
	var __proto=HTMLChar.prototype;
	Laya.imps(__proto,{"laya.display.ILayout":true})
	/**
	*设置与此对象绑定的显示对象 <code>Sprite</code> 。
	*@param sprite 显示对象 <code>Sprite</code> 。
	*/
	__proto.setSprite=function(sprite){
		this._sprite=sprite;
	}

	/**
	*获取与此对象绑定的显示对象 <code>Sprite</code>。
	*@return
	*/
	__proto.getSprite=function(){
		return this._sprite;
	}

	/**@private */
	__proto._isChar=function(){
		return true;
	}

	/**@private */
	__proto._getCSSStyle=function(){
		return this.style;
	}

	/**
	*宽度。
	*/
	__getset(0,__proto,'width',function(){
		return this._w;
		},function(value){
		this._w=value;
	});

	/**
	*此对象存储的 X 轴坐标值。
	*当设置此值时，如果此对象有绑定的 Sprite 对象，则改变 Sprite 对象的属性 x 的值。
	*/
	__getset(0,__proto,'x',function(){
		return this._x;
		},function(value){
		if (this._sprite){
			this._sprite.x=value;
		}
		this._x=value;
	});

	/**
	*此对象存储的 Y 轴坐标值。
	*当设置此值时，如果此对象有绑定的 Sprite 对象，则改变 Sprite 对象的属性 y 的值。
	*/
	__getset(0,__proto,'y',function(){
		return this._y;
		},function(value){
		if (this._sprite){
			this._sprite.y=value;
		}
		this._y=value;
	});

	/**
	*高度。
	*/
	__getset(0,__proto,'height',function(){
		return this._h;
		},function(value){
		this._h=value;
	});

	HTMLChar._isWordRegExp=new RegExp("[\\w\.]","");
	return HTMLChar;
})()


/**
*<code>Log</code> 类用于在界面内显示日志记录信息。
*/
//class laya.utils.Log
var Log=(function(){
	function Log(){}
	__class(Log,'laya.utils.Log');
	Log.enable=function(){
		if (!Log._logdiv){
			Log._logdiv=Browser.window.document.createElement('div');
			Browser.window.document.body.appendChild(Log._logdiv);
			Log._logdiv.style.cssText="pointer-events:none;border:white;overflow:hidden;z-index:1000000;background:rgba(100,100,100,0.6);color:white;position: absolute;left:0px;top:0px;width:50%;height:50%;";
		}
	}

	Log.toggle=function(){
		var style=Log._logdiv.style;
		if (style.width=="1px"){
			style.width=style.height="50%";
			}else {
			style.width=style.height="1px";
		}
	}

	Log.print=function(value){
		if (Log._logdiv){
			if (Log._count >=Log.maxCount)Log.clear();
			Log._count++;
			Log._logdiv.innerText+=value+"\n";
			Log._logdiv.scrollTop=Log._logdiv.scrollHeight;
		}
	}

	Log.clear=function(){
		Log._logdiv.innerText="";
		Log._count=0;
	}

	Log._logdiv=null;
	Log._count=0;
	Log.maxCount=20;
	return Log;
})()


/**
*<code>Mouse</code> 类用于控制鼠标光标。
*/
//class laya.utils.Mouse
var Mouse=(function(){
	function Mouse(){}
	__class(Mouse,'laya.utils.Mouse');
	/**
	*设置鼠标样式
	*@param cursorStr
	*例如auto move no-drop col-resize
	*all-scroll pointer not-allowed row-resize
	*crosshair progress e-resize ne-resize
	*default text n-resize nw-resize
	*help vertical-text s-resize se-resize
	*inherit wait w-resize sw-resize
	*
	*/
	__getset(1,Mouse,'cursor',function(){
		return Mouse._style.cursor;
		},function(cursorStr){
		Mouse._style.cursor=cursorStr;
	});

	Mouse.hide=function(){
		if (Mouse.cursor !="none"){
			Mouse._preCursor=Mouse.cursor;
			Mouse.cursor="none";
		}
	}

	Mouse.show=function(){
		if (Mouse.cursor=="none"){
			if (Mouse._preCursor){
				Mouse.cursor=Mouse._preCursor;
				}else {
				Mouse.cursor="auto";
			}
		}
	}

	Mouse._preCursor=null;
	__static(Mouse,
	['_style',function(){return this._style=Browser.document.body.style;}
	]);
	return Mouse;
})()


/**
*<p> <code>Pool</code> 是对象池类，用于对象的存贮、重复使用。</p>
*<p>合理使用对象池，可以有效减少对象创建的开销，避免频繁的垃圾回收，从而优化游戏流畅度。</p>
*/
//class laya.utils.Pool
var Pool=(function(){
	function Pool(){}
	__class(Pool,'laya.utils.Pool');
	Pool.getPoolBySign=function(sign){
		return Pool._poolDic[sign] || (Pool._poolDic[sign]=[]);
	}

	Pool.clearBySign=function(sign){
		if (Pool._poolDic[sign])Pool._poolDic[sign].length=0;
	}

	Pool.recover=function(sign,item){
		if (item["__InPool"])return;
		item["__InPool"]=true;
		Pool.getPoolBySign(sign).push(item);
	}

	Pool.getItemByClass=function(sign,cls){
		var pool=Pool.getPoolBySign(sign);
		var rst=pool.length ? pool.pop():new cls();
		rst["__InPool"]=false;
		return rst;
	}

	Pool.getItemByCreateFun=function(sign,createFun,caller){
		var pool=Pool.getPoolBySign(sign);
		var rst=pool.length ? pool.pop():createFun.call(caller);
		rst["__InPool"]=false;
		return rst;
	}

	Pool.getItem=function(sign){
		var pool=Pool.getPoolBySign(sign);
		var rst=pool.length ? pool.pop():null;
		if (rst){
			rst["__InPool"]=false;
		}
		return rst;
	}

	Pool._poolDic={};
	Pool.InPoolSign="__InPool";
	return Pool;
})()


/**
*@private
*基于个数的对象缓存管理器
*/
//class laya.utils.PoolCache
var PoolCache=(function(){
	function PoolCache(){
		/**
		*对象在Pool中的标识
		*/
		this.sign=null;
		/**
		*允许缓存的最大数量
		*/
		this.maxCount=1000;
	}

	__class(PoolCache,'laya.utils.PoolCache');
	var __proto=PoolCache.prototype;
	/**
	*获取缓存的对象列表
	*@return
	*
	*/
	__proto.getCacheList=function(){
		return Pool.getPoolBySign(this.sign);
	}

	/**
	*尝试清理缓存
	*@param force 是否强制清理
	*
	*/
	__proto.tryDispose=function(force){
		var list;
		list=Pool.getPoolBySign(this.sign);
		if (list.length > this.maxCount){
			list.splice(this.maxCount,list.length-this.maxCount);
		}
	}

	PoolCache.addPoolCacheManager=function(sign,maxCount){
		(maxCount===void 0)&& (maxCount=100);
		var cache;
		cache=new PoolCache();
		cache.sign=sign;
		cache.maxCount=maxCount;
		CacheManager.regCacheByFunction(Utils.bind(cache.tryDispose,cache),Utils.bind(cache.getCacheList,cache));
	}

	return PoolCache;
})()


/**
*<p> <code>Stat</code> 是一个性能统计面板，可以实时更新相关的性能参数。</p>
*<p>参与统计的性能参数如下（所有参数都是每大约1秒进行更新）：<br/>
*FPS(Canvas)/FPS(WebGL)：Canvas 模式或者 WebGL 模式下的帧频，也就是每秒显示的帧数，值越高、越稳定，感觉越流畅；<br/>
*Sprite：统计所有渲染节点（包括容器）数量，它的大小会影响引擎进行节点遍历、数据组织和渲染的效率。其值越小，游戏运行效率越高；<br/>
*DrawCall：此值是决定性能的重要指标，其值越小，游戏运行效率越高。Canvas模式下表示每大约1秒的图像绘制次数；WebGL模式下表示每大约1秒的渲染提交批次，每次准备数据并通知GPU渲染绘制的过程称为1次DrawCall，在每次DrawCall中除了在通知GPU的渲染上比较耗时之外，切换材质与shader也是非常耗时的操作；<br/>
*CurMem：Canvas模式下，表示内存占用大小，值越小越好，过高会导致游戏闪退；WebGL模式下，表示内存与显存的占用，值越小越好；<br/>
*Shader：是 WebGL 模式独有的性能指标，表示每大约1秒 Shader 提交次数，值越小越好；<br/>
*Canvas：由三个数值组成，只有设置 CacheAs 后才会有值，默认为0/0/0。从左到右数值的意义分别为：每帧重绘的画布数量 / 缓存类型为"normal"类型的画布数量 / 缓存类型为"bitmap"类型的画布数量。</p>
*/
//class laya.utils.Stat
var Stat=(function(){
	function Stat(){}
	__class(Stat,'laya.utils.Stat');
	/**
	*点击性能统计显示区域的处理函数。
	*/
	__getset(1,Stat,'onclick',null,function(fn){
		if (Stat._sp){
			Stat._sp.on("click",Stat._sp,fn);
		}
		if (Stat._canvas){
			Stat._canvas.source.onclick=fn;
			Stat._canvas.source.style.pointerEvents='';
		}
	});

	Stat.show=function(x,y){
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		if (Render.isConchApp && !Render.isConchWebGL){
			Browser.window.conch.showFPS && Browser.window.conch.showFPS(x,y);
			return;
		}
		if (!Render.isConchWebGL && !Browser.onMiniGame &&! Browser.onLimixiu)Stat._useCanvas=true;
		Stat._show=true;
		Stat._fpsData.length=60;
		Stat._view[0]={title:"FPS(Canvas)",value:"_fpsStr",color:"yellow",units:"int"};
		Stat._view[1]={title:"Sprite",value:"_spriteStr",color:"white",units:"int"};
		Stat._view[2]={title:"DrawCall",value:"drawCall",color:"white",units:"int"};
		Stat._view[3]={title:"CurMem",value:"currentMemorySize",color:"yellow",units:"M"};
		if (Render.isWebGL){
			Stat._view[4]={title:"Shader",value:"shaderCall",color:"white",units:"int"};
			if (!Render.is3DMode){
				Stat._view[0].title="FPS(WebGL)";
				Stat._view[5]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"};
				}else {
				Stat._view[0].title="FPS(3D)";
				Stat._view[5]={title:"TriFaces",value:"trianglesFaces",color:"white",units:"int"};
				Stat._view[6]={title:"treeNodeColl",value:"treeNodeCollision",color:"white",units:"int"};
				Stat._view[7]={title:"treeSpriteColl",value:"treeSpriteCollision",color:"white",units:"int"};
			}
			}else {
			Stat._view[4]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"};
		}
		if (Stat._useCanvas){
			Stat.createUIPre(x,y);
		}else
		Stat.createUI(x,y);
		Stat.enable();
	}

	Stat.createUIPre=function(x,y){
		var pixel=Browser.pixelRatio;
		Stat._width=pixel *130;
		Stat._vx=pixel *75;
		Stat._height=pixel *(Stat._view.length *12+3 *pixel)+4;
		Stat._fontSize=12 *pixel;
		for (var i=0;i < Stat._view.length;i++){
			Stat._view[i].x=4;
			Stat._view[i].y=i *Stat._fontSize+2 *pixel;
		}
		if (!Stat._canvas){
			Stat._canvas=new HTMLCanvas('2D');
			Stat._canvas.size(Stat._width,Stat._height);
			Stat._ctx=Stat._canvas.getContext('2d');
			Stat._ctx.textBaseline="top";
			Stat._ctx.font=Stat._fontSize+"px Sans-serif";
			Stat._canvas.source.style.cssText="pointer-events:none;background:rgba(150,150,150,0.8);z-index:100000;position: absolute;direction:ltr;left:"+x+"px;top:"+y+"px;width:"+(Stat._width / pixel)+"px;height:"+(Stat._height / pixel)+"px;";
		}
		Stat._first=true;
		Stat.loop();
		Stat._first=false;
		Browser.container.appendChild(Stat._canvas.source);
	}

	Stat.createUI=function(x,y){
		var stat=Stat._sp;
		var pixel=Browser.pixelRatio;
		if (!stat){
			stat=new Sprite();
			Stat._leftText=new Text();
			Stat._leftText.pos(5,5);
			Stat._leftText.color="#ffffff";
			stat.addChild(Stat._leftText);
			Stat._txt=new Text();
			Stat._txt.pos(80*pixel,5);
			Stat._txt.color="#ffffff";
			stat.addChild(Stat._txt);
			Stat._sp=stat;
		}
		stat.pos(x,y);
		var text="";
		for (var i=0;i < Stat._view.length;i++){
			var one=Stat._view[i];
			text+=one.title+"\n";
		}
		Stat._leftText.text=text;
		var width=pixel *138;
		var height=pixel *(Stat._view.length *12+3 *pixel)+4;
		Stat._txt.fontSize=Stat._fontSize *pixel;
		Stat._leftText.fontSize=Stat._fontSize *pixel;
		stat.size(width,height);
		stat.graphics.clear();
		stat.graphics.setAlpha(0.5);
		stat.graphics.drawRect(0,0,width,height,"#999999");
		stat.graphics.setAlpha(1);
		Stat.loop();
	}

	Stat.enable=function(){
		Laya.timer.frameLoop(1,Stat,Stat.loop);
	}

	Stat.hide=function(){
		Stat._show=false;
		Laya.timer.clear(Stat,Stat.loop);
		if (Stat._canvas){
			Browser.removeElement(Stat._canvas.source);
		}
	}

	Stat.clear=function(){
		Stat.trianglesFaces=Stat.drawCall=Stat.shaderCall=Stat.spriteCount=Stat.spriteRenderUseCacheCount=Stat.treeNodeCollision=Stat.treeSpriteCollision=Stat.canvasNormal=Stat.canvasBitmap=Stat.canvasReCache=0;
	}

	Stat.loop=function(){
		Stat._count++;
		var timer=Browser.now();
		if (timer-Stat._timer < 1000)return;
		var count=Stat._count;
		Stat.FPS=Math.round((count *1000)/ (timer-Stat._timer));
		if (Stat._show){
			Stat.trianglesFaces=Math.round(Stat.trianglesFaces / count);
			if (!Stat._useCanvas){
				Stat.drawCall=Math.round(Stat.drawCall / count)-2;
				Stat.shaderCall=Math.round(Stat.shaderCall / count)-4;
				Stat.spriteCount=Math.round(Stat.spriteCount / count)-4;
				}else{
				Stat.drawCall=Math.round(Stat.drawCall / count)-2;
				Stat.shaderCall=Math.round(Stat.shaderCall / count);
				Stat.spriteCount=Math.round(Stat.spriteCount / count)-1;
			}
			Stat.spriteRenderUseCacheCount=Math.round(Stat.spriteRenderUseCacheCount / count);
			Stat.canvasNormal=Math.round(Stat.canvasNormal / count);
			Stat.canvasBitmap=Math.round(Stat.canvasBitmap / count);
			Stat.canvasReCache=Math.ceil(Stat.canvasReCache / count);
			Stat.treeNodeCollision=Math.round(Stat.treeNodeCollision / count);
			Stat.treeSpriteCollision=Math.round(Stat.treeSpriteCollision / count);
			var delay=Stat.FPS > 0 ? Math.floor(1000 / Stat.FPS).toString():" ";
			Stat._fpsStr=Stat.FPS+(Stat.renderSlow ? " slow" :"")+" "+delay;
			Stat._spriteStr=Stat.spriteCount+(Stat.spriteRenderUseCacheCount ? ("/"+Stat.spriteRenderUseCacheCount):'');
			Stat._canvasStr=Stat.canvasReCache+"/"+Stat.canvasNormal+"/"+Stat.canvasBitmap;
			Stat.currentMemorySize=ResourceManager.systemResourceManager.memorySize;
			if (Stat._useCanvas){
				Stat.renderInfoPre();
			}else
			Stat.renderInfo();
			Stat.clear();
		}
		Stat._count=0;
		Stat._timer=timer;
	}

	Stat.renderInfoPre=function(){
		if (Stat._canvas){
			var ctx=Stat._ctx;
			ctx.clearRect(Stat._first ? 0 :Stat._vx,0,Stat._width,Stat._height);
			for (var i=0;i < Stat._view.length;i++){
				var one=Stat._view[i];
				if (Stat._first){
					ctx.fillStyle="white";
					ctx.fillText(one.title,one.x,one.y,null,null,null);
				}
				ctx.fillStyle=one.color;
				var value=Stat[one.value];
				(one.units=="M")&& (value=Math.floor(value / (1024 *1024)*100)/ 100+" M");
				ctx.fillText(value+"",one.x+Stat._vx,one.y,null,null,null);
			}
		}
	}

	Stat.renderInfo=function(){
		var text="";
		for (var i=0;i < Stat._view.length;i++){
			var one=Stat._view[i];
			var value=Stat[one.value];
			(one.units=="M")&& (value=Math.floor(value / (1024 *1024)*100)/ 100+" M");
			(one.units=="K")&& (value=Math.floor(value / (1024)*100)/ 100+" K");
			text+=value+"\n";
		}
		Stat._txt.text=text;
	}

	Stat.FPS=0;
	Stat.loopCount=0;
	Stat.shaderCall=0;
	Stat.drawCall=0;
	Stat.trianglesFaces=0;
	Stat.spriteCount=0;
	Stat.spriteRenderUseCacheCount=0;
	Stat.treeNodeCollision=0;
	Stat.treeSpriteCollision=0;
	Stat.canvasNormal=0;
	Stat.canvasBitmap=0;
	Stat.canvasReCache=0;
	Stat.renderSlow=false;
	Stat.currentMemorySize=0;
	Stat._fpsStr=null;
	Stat._canvasStr=null;
	Stat._spriteStr=null;
	Stat._fpsData=[];
	Stat._timer=0;
	Stat._count=0;
	Stat._view=[];
	Stat._fontSize=12;
	Stat._txt=null;
	Stat._leftText=null;
	Stat._sp=null;
	Stat._show=false;
	Stat._useCanvas=false;
	Stat._canvas=null;
	Stat._ctx=null;
	Stat._first=false;
	Stat._vx=NaN;
	Stat._width=0;
	Stat._height=100;
	return Stat;
})()


/**
*@private
*<code>StringKey</code> 类用于存取字符串对应的数字。
*/
//class laya.utils.StringKey
var StringKey=(function(){
	function StringKey(){
		this._strsToID={};
		this._idToStrs=[];
		this._length=0;
	}

	__class(StringKey,'laya.utils.StringKey');
	var __proto=StringKey.prototype;
	/**
	*添加一个字符。
	*@param str 字符，将作为key 存储相应生成的数字。
	*@return 此字符对应的数字。
	*/
	__proto.add=function(str){
		var index=this._strsToID[str];
		if (index !=null)return index;
		this._idToStrs[this._length]=str;
		return this._strsToID[str]=this._length++;
	}

	/**
	*获取指定字符对应的ID。
	*@param str 字符。
	*@return 此字符对应的ID。
	*/
	__proto.getID=function(str){
		var index=this._strsToID[str];
		return index==null ?-1 :index;
	}

	/**
	*根据指定ID获取对应字符。
	*@param id ID。
	*@return 此id对应的字符。
	*/
	__proto.getName=function(id){
		var str=this._idToStrs[id];
		return str==null ? undefined :str;
	}

	return StringKey;
})()


/**
*<code>Timer</code> 是时钟管理类。它是一个单例，不要手动实例化此类，应该通过 Laya.timer 访问。
*/
//class laya.utils.Timer
var Timer=(function(){
	var TimerHandler;
	function Timer(){
		/**两帧之间的时间间隔,单位毫秒。*/
		this._delta=0;
		/**时针缩放。*/
		this.scale=1;
		/**当前的帧数。*/
		this.currFrame=0;
		/**@private */
		this._mid=1;
		/**@private */
		this._map=[];
		/**@private */
		this._laters=[];
		/**@private */
		this._handlers=[];
		/**@private */
		this._temp=[];
		/**@private */
		this._count=0;
		this.currTimer=this._now();
		this._lastTimer=this._now();
		this._init();
	}

	__class(Timer,'laya.utils.Timer');
	var __proto=Timer.prototype;
	/**@private */
	__proto._init=function(){
		Laya.timer && Laya.timer.frameLoop(1,this,this._update);
	}

	/**@private */
	__proto._now=function(){
		return /*__JS__ */Date.now();
	}

	/**
	*@private
	*帧循环处理函数。
	*/
	__proto._update=function(){
		if (this.scale <=0){
			this._lastTimer=this._now();
			return;
		};
		var frame=this.currFrame=this.currFrame+this.scale;
		var now=this._now();
		this._delta=(now-this._lastTimer)*this.scale;
		var timer=this.currTimer=this.currTimer+this._delta;
		this._lastTimer=now;
		var handlers=this._handlers;
		this._count=0;
		for (i=0,n=handlers.length;i < n;i++){
			handler=handlers[i];
			if (handler.method!==null){
				var t=handler.userFrame ? frame :timer;
				if (t >=handler.exeTime){
					if (handler.repeat){
						if (!handler.jumpFrame){
							handler.exeTime+=handler.delay;
							handler.run(false);
							if (t > handler.exeTime){
								handler.exeTime+=Math.ceil((t-handler.exeTime)/ handler.delay)*handler.delay;
							}
							}else {
							while (t >=handler.exeTime){
								handler.exeTime+=handler.delay;
								handler.run(false);
							}
						}
						}else {
						handler.run(true);
					}
				}
				}else {
				this._count++;
			}
		}
		if (this._count > 30 || frame % 200===0)this._clearHandlers();
		var laters=this._laters;
		for (var i=0,n=laters.length-1;i <=n;i++){
			var handler=laters[i];
			if (handler.method!==null){
				this._map[handler.key]=null;
				handler.run(false);
			}
			this._recoverHandler(handler);
			i===n && (n=laters.length-1);
		}
		laters.length=0;
	}

	/**@private */
	__proto._clearHandlers=function(){
		var handlers=this._handlers;
		for (var i=0,n=handlers.length;i < n;i++){
			var handler=handlers[i];
			if (handler.method!==null)this._temp.push(handler);
			else this._recoverHandler(handler);
		}
		this._handlers=this._temp;
		this._temp=handlers;
		this._temp.length=0;
	}

	/**@private */
	__proto._recoverHandler=function(handler){
		if(this._map[handler.key]==handler)this._map[handler.key]=null;
		handler.clear();
		Timer._pool.push(handler);
	}

	/**@private */
	__proto._create=function(useFrame,repeat,delay,caller,method,args,coverBefore){
		if (!delay){
			method.apply(caller,args);
			return null;
		}
		if (coverBefore){
			var handler=this._getHandler(caller,method);
			if (handler){
				handler.repeat=repeat;
				handler.userFrame=useFrame;
				handler.delay=delay;
				handler.caller=caller;
				handler.method=method;
				handler.args=args;
				handler.exeTime=delay+(useFrame ? this.currFrame :this.currTimer+this._now()-this._lastTimer);
				return handler;
			}
		}
		handler=Timer._pool.length > 0 ? Timer._pool.pop():new TimerHandler();
		handler.repeat=repeat;
		handler.userFrame=useFrame;
		handler.delay=delay;
		handler.caller=caller;
		handler.method=method;
		handler.args=args;
		handler.exeTime=delay+(useFrame ? this.currFrame :this.currTimer+this._now()-this._lastTimer)+1;
		this._indexHandler(handler);
		this._handlers.push(handler);
		return handler;
	}

	/**@private */
	__proto._indexHandler=function(handler){
		var caller=handler.caller;
		var method=handler.method;
		var cid=caller ? caller.$_GID || (caller.$_GID=Utils.getGID()):0;
		var mid=method.$_TID || (method.$_TID=(this._mid++)*100000);
		handler.key=cid+mid;
		this._map[handler.key]=handler;
	}

	/**
	*定时执行一次。
	*@param delay 延迟时间(单位为毫秒)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*/
	__proto.once=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this._create(false,false,delay,caller,method,args,coverBefore);
	}

	/**
	*定时重复执行。
	*@param delay 间隔时间(单位毫秒)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*@param jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
	*/
	__proto.loop=function(delay,caller,method,args,coverBefore,jumpFrame){
		(coverBefore===void 0)&& (coverBefore=true);
		(jumpFrame===void 0)&& (jumpFrame=false);
		var handler=this._create(false,true,delay,caller,method,args,coverBefore);
		if (handler)handler.jumpFrame=jumpFrame;
	}

	/**
	*定时执行一次(基于帧率)。
	*@param delay 延迟几帧(单位为帧)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*/
	__proto.frameOnce=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this._create(true,false,delay,caller,method,args,coverBefore);
	}

	/**
	*定时重复执行(基于帧率)。
	*@param delay 间隔几帧(单位为帧)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*/
	__proto.frameLoop=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this._create(true,true,delay,caller,method,args,coverBefore);
	}

	/**返回统计信息。*/
	__proto.toString=function(){
		return "callLater:"+this._laters.length+" handlers:"+this._handlers.length+" pool:"+Timer._pool.length;
	}

	/**
	*清理定时器。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*/
	__proto.clear=function(caller,method){
		var handler=this._getHandler(caller,method);
		if (handler){
			this._map[handler.key]=null;handler.key=0;
			handler.clear();
		}
	}

	/**
	*清理对象身上的所有定时器。
	*@param caller 执行域(this)。
	*/
	__proto.clearAll=function(caller){
		if (!caller)return;
		for (var i=0,n=this._handlers.length;i < n;i++){
			var handler=this._handlers[i];
			if (handler.caller===caller){
				this._map[handler.key]=null;handler.key=0;
				handler.clear();
			}
		}
	}

	/**@private */
	__proto._getHandler=function(caller,method){
		var cid=caller ? caller.$_GID || (caller.$_GID=Utils.getGID()):0;
		var mid=method.$_TID || (method.$_TID=(this._mid++)*100000);
		return this._map[cid+mid];
	}

	/**
	*延迟执行。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*/
	__proto.callLater=function(caller,method,args){
		if (this._getHandler(caller,method)==null){
			if (Timer._pool.length)
				var handler=Timer._pool.pop();
			else handler=new TimerHandler();
			handler.caller=caller;
			handler.method=method;
			handler.args=args;
			this._indexHandler(handler);
			this._laters.push(handler);
		}
	}

	/**
	*立即执行 callLater 。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*/
	__proto.runCallLater=function(caller,method){
		var handler=this._getHandler(caller,method);
		if (handler && handler.method !=null){
			this._map[handler.key]=null;
			handler.run(true);
		}
	}

	/**
	*立即提前执行定时器，执行之后从队列中删除
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*/
	__proto.runTimer=function(caller,method){
		this.runCallLater(caller,method);
	}

	/**
	*两帧之间的时间间隔,单位毫秒。
	*/
	__getset(0,__proto,'delta',function(){
		return this._delta;
	});

	Timer._pool=[];
	Timer.__init$=function(){
		/**@private */
		//class TimerHandler
		TimerHandler=(function(){
			function TimerHandler(){
				this.key=0;
				this.repeat=false;
				this.delay=0;
				this.userFrame=false;
				this.exeTime=0;
				this.caller=null;
				this.method=null;
				this.args=null;
				this.jumpFrame=false;
			}
			__class(TimerHandler,'');
			var __proto=TimerHandler.prototype;
			__proto.clear=function(){
				this.caller=null;
				this.method=null;
				this.args=null;
			}
			__proto.run=function(withClear){
				var caller=this.caller;
				if (caller && caller.destroyed)return this.clear();
				var method=this.method;
				var args=this.args;
				withClear && this.clear();
				if (method==null)return;
				args ? method.apply(caller,args):method.call(caller);
			}
			return TimerHandler;
		})()
	}

	return Timer;
})()


/**
*<code>Tween</code> 是一个缓动类。使用此类能够实现对目标对象属性的渐变。
*/
//class laya.utils.Tween
var Tween=(function(){
	function Tween(){
		/**@private */
		//this._complete=null;
		/**@private */
		//this._target=null;
		/**@private */
		//this._ease=null;
		/**@private */
		//this._props=null;
		/**@private */
		//this._duration=0;
		/**@private */
		//this._delay=0;
		/**@private */
		//this._startTimer=0;
		/**@private */
		//this._usedTimer=0;
		/**@private */
		//this._usedPool=false;
		/**@private */
		//this._delayParam=null;
		/**@private 唯一标识，TimeLintLite用到*/
		this.gid=0;
		/**更新回调，缓动数值发生变化时，回调变化的值*/
		//this.update=null;
	}

	__class(Tween,'laya.utils.Tween');
	var __proto=Tween.prototype;
	/**
	*缓动对象的props属性到目标值。
	*@param target 目标对象(即将更改属性值的对象)。
	*@param props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
	*@param duration 花费的时间，单位毫秒。
	*@param ease 缓动类型，默认为匀速运动。
	*@param complete 结束回调函数。
	*@param delay 延迟执行时间。
	*@param coverBefore 是否覆盖之前的缓动。
	*@return 返回Tween对象。
	*/
	__proto.to=function(target,props,duration,ease,complete,delay,coverBefore){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		return this._create(target,props,duration,ease,complete,delay,coverBefore,true,false,true);
	}

	/**
	*从props属性，缓动到当前状态。
	*@param target 目标对象(即将更改属性值的对象)。
	*@param props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
	*@param duration 花费的时间，单位毫秒。
	*@param ease 缓动类型，默认为匀速运动。
	*@param complete 结束回调函数。
	*@param delay 延迟执行时间。
	*@param coverBefore 是否覆盖之前的缓动。
	*@return 返回Tween对象。
	*/
	__proto.from=function(target,props,duration,ease,complete,delay,coverBefore){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		return this._create(target,props,duration,ease,complete,delay,coverBefore,false,false,true);
	}

	/**@private */
	__proto._create=function(target,props,duration,ease,complete,delay,coverBefore,isTo,usePool,runNow){
		if (!target)throw new Error("Tween:target is null");
		this._target=target;
		this._duration=duration;
		this._ease=ease || props.ease || Tween.easeNone;
		this._complete=complete || props.complete;
		this._delay=delay;
		this._props=[];
		this._usedTimer=0;
		this._startTimer=Browser.now();
		this._usedPool=usePool;
		this._delayParam=null;
		this.update=props.update;
		var gid=(target.$_GID || (target.$_GID=Utils.getGID()));
		if (!Tween.tweenMap[gid]){
			Tween.tweenMap[gid]=[this];
			}else {
			if (coverBefore)Tween.clearTween(target);
			Tween.tweenMap[gid].push(this);
		}
		if (runNow){
			if (delay <=0)this.firstStart(target,props,isTo);
			else{
				this._delayParam=[target,props,isTo];
				Laya.scaleTimer.once(delay,this,this.firstStart,this._delayParam);
			}
			}else {
			this._initProps(target,props,isTo);
		}
		return this;
	}

	__proto.firstStart=function(target,props,isTo){
		this._delayParam=null;
		if (target.destroyed){
			this.clear();
			return;
		}
		this._initProps(target,props,isTo);
		this._beginLoop();
	}

	__proto._initProps=function(target,props,isTo){
		for (var p in props){
			if ((typeof (target[p])=='number')){
				var start=isTo ? target[p] :props[p];
				var end=isTo ? props[p] :target[p];
				this._props.push([p,start,end-start]);
				if (!isTo)target[p]=start;
			}
		}
	}

	__proto._beginLoop=function(){
		Laya.scaleTimer.frameLoop(1,this,this._doEase);
	}

	/**执行缓动**/
	__proto._doEase=function(){
		this._updateEase(Browser.now());
	}

	/**@private */
	__proto._updateEase=function(time){
		var target=this._target;
		if (!target)return;
		if (target.destroyed)return Tween.clearTween(target);
		var usedTimer=this._usedTimer=time-this._startTimer-this._delay;
		if (usedTimer < 0)return;
		if (usedTimer >=this._duration)return this.complete();
		var ratio=usedTimer > 0 ? this._ease(usedTimer,0,1,this._duration):0;
		var props=this._props;
		for (var i=0,n=props.length;i < n;i++){
			var prop=props[i];
			target[prop[0]]=prop[1]+(ratio *prop[2]);
		}
		if (this.update)this.update.run();
	}

	/**
	*立即结束缓动并到终点。
	*/
	__proto.complete=function(){
		if (!this._target)return;
		Laya.scaleTimer.runTimer(this,this.firstStart);
		var target=this._target;
		var props=this._props;
		var handler=this._complete;
		for (var i=0,n=props.length;i < n;i++){
			var prop=props[i];
			target[prop[0]]=prop[1]+prop[2];
		}
		if (this.update)this.update.run();
		this.clear();
		handler && handler.run();
	}

	/**
	*暂停缓动，可以通过resume或restart重新开始。
	*/
	__proto.pause=function(){
		Laya.scaleTimer.clear(this,this._beginLoop);
		Laya.scaleTimer.clear(this,this._doEase);
		Laya.scaleTimer.clear(this,this.firstStart);
		var time=Browser.now();
		var dTime=NaN;
		dTime=time-this._startTimer-this._delay;
		if (dTime < 0){
			this._usedTimer=dTime;
		}
	}

	/**
	*设置开始时间。
	*@param startTime 开始时间。
	*/
	__proto.setStartTime=function(startTime){
		this._startTimer=startTime;
	}

	/**
	*停止并清理当前缓动。
	*/
	__proto.clear=function(){
		if (this._target){
			this._remove();
			this._clear();
		}
	}

	/**
	*@private
	*/
	__proto._clear=function(){
		this.pause();
		Laya.scaleTimer.clear(this,this.firstStart);
		this._complete=null;
		this._target=null;
		this._ease=null;
		this._props=null;
		this._delayParam=null;
		if (this._usedPool){
			this.update=null;
			Pool.recover("tween",this);
		}
	}

	/**回收到对象池。*/
	__proto.recover=function(){
		this._usedPool=true;
		this._clear();
	}

	__proto._remove=function(){
		var tweens=Tween.tweenMap[this._target.$_GID];
		if (tweens){
			for (var i=0,n=tweens.length;i < n;i++){
				if (tweens[i]===this){
					tweens.splice(i,1);
					break ;
				}
			}
		}
	}

	/**
	*重新开始暂停的缓动。
	*/
	__proto.restart=function(){
		this.pause();
		this._usedTimer=0;
		this._startTimer=Browser.now();
		if (this._delayParam){
			Laya.scaleTimer.once(this._delay,this,this.firstStart,this._delayParam);
			return;
		};
		var props=this._props;
		for (var i=0,n=props.length;i < n;i++){
			var prop=props[i];
			this._target[prop[0]]=prop[1];
		}
		Laya.scaleTimer.once(this._delay,this,this._beginLoop);
	}

	/**
	*恢复暂停的缓动。
	*/
	__proto.resume=function(){
		if (this._usedTimer >=this._duration)return;
		this._startTimer=Browser.now()-this._usedTimer-this._delay;
		if (this._delayParam){
			if (this._usedTimer < 0){
				Laya.scaleTimer.once(-this._usedTimer,this,this.firstStart,this._delayParam);
				}else{
				this.firstStart.apply(this,this._delayParam);
			}
			}else{
			this._beginLoop();
		}
	}

	/**设置当前执行比例**/
	__getset(0,__proto,'progress',null,function(v){
		var uTime=v *this._duration;
		this._startTimer=Browser.now()-this._delay-uTime;
	});

	Tween.to=function(target,props,duration,ease,complete,delay,coverBefore,autoRecover){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		(autoRecover===void 0)&& (autoRecover=true);
		return Pool.getItemByClass("tween",Tween)._create(target,props,duration,ease,complete,delay,coverBefore,true,autoRecover,true);
	}

	Tween.from=function(target,props,duration,ease,complete,delay,coverBefore,autoRecover){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		(autoRecover===void 0)&& (autoRecover=true);
		return Pool.getItemByClass("tween",Tween)._create(target,props,duration,ease,complete,delay,coverBefore,false,autoRecover,true);
	}

	Tween.clearAll=function(target){
		if (!target || !target.$_GID)return;
		var tweens=Tween.tweenMap[target.$_GID];
		if (tweens){
			for (var i=0,n=tweens.length;i < n;i++){
				tweens[i]._clear();
			}
			tweens.length=0;
		}
	}

	Tween.clear=function(tween){
		tween.clear();
	}

	Tween.clearTween=function(target){
		Tween.clearAll(target);
	}

	Tween.easeNone=function(t,b,c,d){
		return c *t / d+b;
	}

	Tween.tweenMap={};
	return Tween;
})()


/**
*<code>Utils</code> 是工具类。
*/
//class laya.utils.Utils
var Utils=(function(){
	function Utils(){}
	__class(Utils,'laya.utils.Utils');
	Utils.toRadian=function(angle){
		return angle *Utils._pi2;
	}

	Utils.toAngle=function(radian){
		return radian *Utils._pi;
	}

	Utils.toHexColor=function(color){
		if (color < 0 || isNaN(color))return null;
		var str=color.toString(16);
		while (str.length < 6)str="0"+str;
		return "#"+str;
	}

	Utils.getGID=function(){
		return Utils._gid++;
	}

	Utils.concatArray=function(source,array){
		if (!array)return source;
		if (!source)return array;
		var i=0,len=array.length;
		for (i=0;i < len;i++){
			source.push(array[i]);
		}
		return source;
	}

	Utils.clearArray=function(array){
		if (!array)return array;
		array.length=0;
		return array;
	}

	Utils.copyArray=function(source,array){
		source || (source=[]);
		if (!array)return source;
		source.length=array.length;
		var i=0,len=array.length;
		for (i=0;i < len;i++){
			source[i]=array[i];
		}
		return source;
	}

	Utils.getGlobalRecByPoints=function(sprite,x0,y0,x1,y1){
		var newLTPoint;
		newLTPoint=new Point(x0,y0);
		newLTPoint=sprite.localToGlobal(newLTPoint);
		var newRBPoint;
		newRBPoint=new Point(x1,y1);
		newRBPoint=sprite.localToGlobal(newRBPoint);
		return Rectangle._getWrapRec([newLTPoint.x,newLTPoint.y,newRBPoint.x,newRBPoint.y]);
	}

	Utils.getGlobalPosAndScale=function(sprite){
		return Utils.getGlobalRecByPoints(sprite,0,0,1,1);
	}

	Utils.bind=function(fun,scope){
		var rst=fun;
		/*__JS__ */rst=fun.bind(scope);;
		return rst;
	}

	Utils.measureText=function(txt,font){
		return RunDriver.measureText(txt,font);
	}

	Utils.updateOrder=function(array){
		if (!array || array.length < 2)return false;
		var i=1,j=0,len=array.length,key=NaN,c;
		while (i < len){
			j=i;
			c=array[j];
			key=array[j]._zOrder;
			while (--j >-1){
				if (array[j]._zOrder > key)array[j+1]=array[j];
				else break ;
			}
			array[j+1]=c;
			i++;
		};
		var model=c.parent.conchModel;
		if (model){
			if (model.updateZOrder !=null){
				model.updateZOrder();
				}else {
				for (i=0;i < len;i++){
					model.removeChild(array[i].conchModel);
				}
				for (i=0;i < len;i++){
					model.addChildAt(array[i].conchModel,i);
				}
			}
		}
		return true;
	}

	Utils.transPointList=function(points,x,y){
		var i=0,len=points.length;
		for (i=0;i < len;i+=2){
			points[i]+=x;
			points[i+1]+=y;
		}
	}

	Utils.parseInt=function(str,radix){
		(radix===void 0)&& (radix=0);
		var result=Browser.window.parseInt(str,radix);
		if (isNaN(result))return 0;
		return result;
	}

	Utils.getFileExtension=function(path){
		Utils._extReg.lastIndex=path.lastIndexOf(".");
		var result=Utils._extReg.exec(path);
		if (result && result.length > 1){
			return result[1].toLowerCase();
		}
		return null;
	}

	Utils.getTransformRelativeToWindow=function(coordinateSpace,x,y){
		var stage=Laya.stage;
		var globalTransform=laya.utils.Utils.getGlobalPosAndScale(coordinateSpace);
		var canvasMatrix=stage._canvasTransform.clone();
		var canvasLeft=canvasMatrix.tx;
		var canvasTop=canvasMatrix.ty;
		canvasMatrix.rotate(-Math.PI / 180 *Laya.stage.canvasDegree);
		canvasMatrix.scale(Laya.stage.clientScaleX,Laya.stage.clientScaleY);
		var perpendicular=(Laya.stage.canvasDegree % 180 !=0);
		var tx=NaN,ty=NaN;
		if (perpendicular){
			tx=y+globalTransform.y;
			ty=x+globalTransform.x;
			tx *=canvasMatrix.d;
			ty *=canvasMatrix.a;
			if (Laya.stage.canvasDegree==90){
				tx=canvasLeft-tx;
				ty+=canvasTop;
			}
			else {
				tx+=canvasLeft;
				ty=canvasTop-ty;
			}
		}
		else {
			tx=x+globalTransform.x;
			ty=y+globalTransform.y;
			tx *=canvasMatrix.a;
			ty *=canvasMatrix.d;
			tx+=canvasLeft;
			ty+=canvasTop;
		};
		var domScaleX=NaN,domScaleY=NaN;
		if (perpendicular){
			domScaleX=canvasMatrix.d *globalTransform.height;
			domScaleY=canvasMatrix.a *globalTransform.width;
			}else {
			domScaleX=canvasMatrix.a *globalTransform.width;
			domScaleY=canvasMatrix.d *globalTransform.height;
		}
		return {x:tx,y:ty,scaleX:domScaleX,scaleY:domScaleY};
	}

	Utils.fitDOMElementInArea=function(dom,coordinateSpace,x,y,width,height){
		if (!dom._fitLayaAirInitialized){
			dom._fitLayaAirInitialized=true;
			dom.style.transformOrigin=dom.style.webKittransformOrigin="left top";
			dom.style.position="absolute"
		};
		var transform=Utils.getTransformRelativeToWindow(coordinateSpace,x,y);
		dom.style.transform=dom.style.webkitTransform="scale("+transform.scaleX+","+transform.scaleY+") rotate("+(Laya.stage.canvasDegree)+"deg)";
		dom.style.width=width+'px';
		dom.style.height=height+'px';
		dom.style.left=transform.x+'px';
		dom.style.top=transform.y+'px';
	}

	Utils.isOkTextureList=function(textureList){
		if (!textureList)return false;
		var i=0,len=textureList.length;
		var tTexture;
		for (i=0;i < len;i++){
			tTexture=textureList[i];
			if (!tTexture||!tTexture.source)return false;
		}
		return true;
	}

	Utils.isOKCmdList=function(cmds){
		if (!cmds)return false;
		var i=0,len=cmds.length;
		var context=Render._context;
		var cmd;
		var tex;
		for (i=0;i < len;i++){
			cmd=cmds[i];
			switch(cmd.callee){
				case context._drawTexture:
				case context._fillTexture:
				case context._drawTextureWithTransform:
					tex=cmd[0];
					if (!tex || !tex.source)return false;
				}
		}
		return true;
	}

	Utils._gid=1;
	Utils._pi=180 / Math.PI;
	Utils._pi2=Math.PI / 180;
	Utils._extReg=/\.(\w+)\??/g;
	Utils.parseXMLFromString=function(value){
		var rst;
		value=value.replace(/>\s+</g,'><');
		/*__JS__ */rst=(new DOMParser()).parseFromString(value,'text/xml');
		if (rst.firstChild.textContent.indexOf("This page contains the following errors")>-1){
			throw new Error(rst.firstChild.firstChild.textContent);
		}
		return rst;
	}

	return Utils;
})()


/**
*@private
*/
//class laya.utils.VectorGraphManager
var VectorGraphManager=(function(){
	function VectorGraphManager(){
		this.useDic={};
		this.shapeDic={};
		this.shapeLineDic={};
		this._id=0;
		this._checkKey=false;
		this._freeIdArray=[];
		if (Render.isWebGL){
			CacheManager.regCacheByFunction(Utils.bind(this.startDispose,this),Utils.bind(this.getCacheList,this));
		}
	}

	__class(VectorGraphManager,'laya.utils.VectorGraphManager');
	var __proto=VectorGraphManager.prototype;
	/**
	*得到个空闲的ID
	*@return
	*/
	__proto.getId=function(){
		return this._id++;
	}

	/**
	*添加一个图形到列表中
	*@param id
	*@param shape
	*/
	__proto.addShape=function(id,shape){
		this.shapeDic[id]=shape;
		if (!this.useDic[id]){
			this.useDic[id]=true;
		}
	}

	/**
	*添加一个线图形到列表中
	*@param id
	*@param Line
	*/
	__proto.addLine=function(id,Line){
		this.shapeLineDic[id]=Line;
		if (!this.shapeLineDic[id]){
			this.shapeLineDic[id]=true;
		}
	}

	/**
	*检测一个对象是否在使用中
	*@param id
	*/
	__proto.getShape=function(id){
		if (this._checkKey){
			if (this.useDic[id] !=null){
				this.useDic[id]=true;
			}
		}
	}

	/**
	*删除一个图形对象
	*@param id
	*/
	__proto.deleteShape=function(id){
		if (this.shapeDic[id]){
			this.shapeDic[id]=null;
			delete this.shapeDic[id];
		}
		if (this.shapeLineDic[id]){
			this.shapeLineDic[id]=null;
			delete this.shapeLineDic[id];
		}
		if (this.useDic[id] !=null){
			delete this.useDic[id];
		}
	}

	/**
	*得到缓存列表
	*@return
	*/
	__proto.getCacheList=function(){
		var str;
		var list=[];
		for (str in this.shapeDic){
			list.push(this.shapeDic[str]);
		}
		for (str in this.shapeLineDic){
			list.push(this.shapeLineDic[str]);
		}
		return list;
	}

	/**
	*开始清理状态，准备销毁
	*/
	__proto.startDispose=function(key){
		var str;
		for (str in this.useDic){
			this.useDic[str]=false;
		}
		this._checkKey=true;
	}

	/**
	*确认销毁
	*/
	__proto.endDispose=function(){
		if (this._checkKey){
			var str;
			for (str in this.useDic){
				if (!this.useDic[str]){
					this.deleteShape(str);
				}
			}
			this._checkKey=false;
		}
	}

	VectorGraphManager.getInstance=function(){
		return VectorGraphManager.instance=VectorGraphManager.instance|| new VectorGraphManager();
	}

	VectorGraphManager.instance=null;
	return VectorGraphManager;
})()


/**
*封装弱引用WeakMap
*如果支持WeakMap，则使用WeakMap，如果不支持，则用Object代替
*注意：如果采用Object，为了防止内存泄漏，则采用定时清理缓存策略
*/
//class laya.utils.WeakObject
var WeakObject=(function(){
	function WeakObject(){
		/**@private */
		this._obj=null;
		this._obj=WeakObject.supportWeakMap ? new Browser.window.WeakMap():{};
		if (!WeakObject.supportWeakMap)WeakObject._maps.push(this);
	}

	__class(WeakObject,'laya.utils.WeakObject');
	var __proto=WeakObject.prototype;
	/**
	*设置缓存
	*@param key kye对象，可被回收
	*@param value object对象，可被回收
	*/
	__proto.set=function(key,value){
		if (key==null)return;
		if (WeakObject.supportWeakMap){
			var objKey=key;
			if ((typeof key=='string')|| (typeof key=='number')){
				objKey=WeakObject._keys[key];
				if (!objKey)objKey=WeakObject._keys[key]={k:key};
			}
			this._obj.set(objKey,value);
			}else {
			if ((typeof key=='string')|| (typeof key=='number')){
				this._obj[key]=value;
				}else {
				key.$_GID || (key.$_GID=Utils.getGID());
				this._obj[key.$_GID]=value;
			}
		}
	}

	/**
	*获取缓存
	*@param key kye对象，可被回收
	*/
	__proto.get=function(key){
		if (key==null)return null;
		if (WeakObject.supportWeakMap){
			var objKey=((typeof key=='string')|| (typeof key=='number'))? WeakObject._keys[key] :key;
			if (!objKey)return null;
			return this._obj.get(objKey);
			}else {
			if ((typeof key=='string')|| (typeof key=='number'))return this._obj[key];
			return this._obj[key.$_GID];
		}
	}

	/**
	*删除缓存
	*/
	__proto.del=function(key){
		if (key==null)return;
		if (WeakObject.supportWeakMap){
			var objKey=((typeof key=='string')|| (typeof key=='number'))? WeakObject._keys[key] :key;
			if (!objKey)return;
			/*__JS__ */this._obj.delete(objKey);
			}else {
			if ((typeof key=='string')|| (typeof key=='number'))delete this._obj[key];
			else delete this._obj[this._obj.$_GID];
		}
	}

	/**
	*是否有缓存
	*/
	__proto.has=function(key){
		if (key==null)return false;
		if (WeakObject.supportWeakMap){
			var objKey=((typeof key=='string')|| (typeof key=='number'))? WeakObject._keys[key] :key;
			return this._obj.has(objKey);
			}else {
			if ((typeof key=='string')|| (typeof key=='number'))return this._obj[key] !=null;
			return this._obj[this._obj.$_GID] !=null;
		}
	}

	WeakObject.__init__=function(){
		WeakObject.supportWeakMap=Browser.window.WeakMap !=null;
		if (!WeakObject.supportWeakMap)Laya.timer.loop(WeakObject.delInterval,null,WeakObject.clearCache);
	}

	WeakObject.clearCache=function(){
		for (var i=0,n=WeakObject._maps.length;i < n;i++){
			var obj=WeakObject._maps[i];
			obj._obj={};
		}
	}

	WeakObject.supportWeakMap=false;
	WeakObject.delInterval=5 *60 *1000;
	WeakObject._keys={};
	WeakObject._maps=[];
	__static(WeakObject,
	['I',function(){return this.I=new WeakObject();}
	]);
	return WeakObject;
})()


/**
*@private
*/
//class laya.utils.WordText
var WordText=(function(){
	function WordText(){
		this.id=NaN;
		this.save=[];
		this.toUpperCase=null;
		this.changed=false;
		this._text=null;
	}

	__class(WordText,'laya.utils.WordText');
	var __proto=WordText.prototype;
	__proto.setText=function(txt){
		this.changed=true;
		this._text=txt;
	}

	__proto.toString=function(){
		return this._text;
	}

	__proto.charCodeAt=function(i){
		return this._text ? this._text.charCodeAt(i):NaN;
	}

	__proto.charAt=function(i){
		return this._text ? this._text.charAt(i):null;
	}

	__getset(0,__proto,'length',function(){
		return this._text ? this._text.length :0;
	});

	return WordText;
})()


/**
*<code>Node</code> 类是可放在显示列表中的所有对象的基类。该显示列表管理 Laya 运行时中显示的所有对象。使用 Node 类排列显示列表中的显示对象。Node 对象可以有子显示对象。
*/
//class laya.display.Node extends laya.events.EventDispatcher
var Node=(function(_super){
	function Node(){
		/**@private */
		this._bits=0;
		/**@private 是否在显示列表中显示*/
		this._displayedInStage=false;
		/**@private 父节点对象*/
		this._parent=null;
		/**@private */
		this.conchModel=null;
		/**节点名称。*/
		this.name="";
		/**[只读]是否已经销毁。对象销毁后不能再使用。*/
		this._destroyed=false;
		Node.__super.call(this);
		this._childs=Node.ARRAY_EMPTY;
		this._$P=Node.PROP_EMPTY;
		this.timer=Laya.scaleTimer;
		this.conchModel=Render.isConchNode ? this.createConchModel():null;
	}

	__class(Node,'laya.display.Node',_super);
	var __proto=Node.prototype;
	/**@private */
	__proto._setBit=function(type,value){
		if (type==0x1){
			var preValue=this._getBit(type);
			if (preValue !=value){
				this._updateDisplayedInstage();
			}
		}
		if (value){
			this._bits |=type;
			}else {
			this._bits &=~type;
		}
	}

	/**@private */
	__proto._getBit=function(type){
		return (this._bits & type)!=0;
	}

	/**@private */
	__proto._setUpNoticeChain=function(){
		if (this._getBit(0x1)){
			this._setUpNoticeType(0x1);
		}
	}

	/**@private */
	__proto._setUpNoticeType=function(type){
		var ele=this;
		ele._setBit(type,true);
		ele=ele.parent;
		while (ele){
			if (ele._getBit(type))return;
			ele._setBit(type,true);
			ele=ele.parent;
		}
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.on=function(type,caller,listener,args){
		if (type===/*laya.events.Event.DISPLAY*/"display" || type===/*laya.events.Event.UNDISPLAY*/"undisplay"){
			if (!this._getBit(0x1)){
				this._setUpNoticeType(0x1);
			}
		}
		return this._createListener(type,caller,listener,args,false);
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.once=function(type,caller,listener,args){
		if (type===/*laya.events.Event.DISPLAY*/"display" || type===/*laya.events.Event.UNDISPLAY*/"undisplay"){
			if (!this._getBit(0x1)){
				this._setUpNoticeType(0x1);
			}
		}
		return this._createListener(type,caller,listener,args,true);
	}

	/**@private */
	__proto.createConchModel=function(){
		return null;
	}

	/**
	*<p>销毁此对象。destroy对象默认会把自己从父节点移除，并且清理自身引用关系，等待js自动垃圾回收机制回收。destroy后不能再使用。</p>
	*<p>destroy时会移除自身的事情监听，自身的timer监听，移除子对象及从父节点移除自己。</p>
	*@param destroyChild （可选）是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
	*/
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._destroyed=true;
		this._parent && this._parent.removeChild(this);
		if (this._childs){
			if (destroyChild)this.destroyChildren();
			else this.removeChildren();
		}
		this._childs=null;
		this._$P=null;
		this.offAll();
		this.timer.clearAll(this);
	}

	/**
	*销毁所有子对象，不销毁自己本身。
	*/
	__proto.destroyChildren=function(){
		if (this._childs){
			for (var i=this._childs.length-1;i >-1;i--){
				this._childs[i].destroy(true);
			}
		}
	}

	/**
	*添加子节点。
	*@param node 节点对象
	*@return 返回添加的节点
	*/
	__proto.addChild=function(node){
		if (!node || this.destroyed || node===this)return node;
		if ((node).zOrder)this._set$P("hasZorder",true);
		if (node._parent===this){
			var index=this.getChildIndex(node);
			if (index!==this._childs.length-1){
				this._childs.splice(index,1);
				this._childs.push(node);
				if (this.conchModel){
					this.conchModel.removeChild(node.conchModel);
					this.conchModel.addChildAt(node.conchModel,this._childs.length-1);
				}
				this._childChanged();
			}
			}else {
			node.parent && node.parent.removeChild(node);
			this._childs===Node.ARRAY_EMPTY && (this._childs=[]);
			this._childs.push(node);
			this.conchModel && this.conchModel.addChildAt(node.conchModel,this._childs.length-1);
			node.parent=this;
			this._childChanged();
		}
		return node;
	}

	/**
	*批量增加子节点
	*@param ...args 无数子节点。
	*/
	__proto.addChildren=function(__args){
		var args=arguments;
		var i=0,n=args.length;
		while (i < n){
			this.addChild(args[i++]);
		}
	}

	/**
	*添加子节点到指定的索引位置。
	*@param node 节点对象。
	*@param index 索引位置。
	*@return 返回添加的节点。
	*/
	__proto.addChildAt=function(node,index){
		if (!node || this.destroyed || node===this)return node;
		if ((node).zOrder)this._set$P("hasZorder",true);
		if (index >=0 && index <=this._childs.length){
			if (node._parent===this){
				var oldIndex=this.getChildIndex(node);
				this._childs.splice(oldIndex,1);
				this._childs.splice(index,0,node);
				if (this.conchModel){
					this.conchModel.removeChild(node.conchModel);
					this.conchModel.addChildAt(node.conchModel,index);
				}
				this._childChanged();
				}else {
				node.parent && node.parent.removeChild(node);
				this._childs===Node.ARRAY_EMPTY && (this._childs=[]);
				this._childs.splice(index,0,node);
				this.conchModel && this.conchModel.addChildAt(node.conchModel,index);
				node.parent=this;
			}
			return node;
			}else {
			throw new Error("appendChildAt:The index is out of bounds");
		}
	}

	/**
	*根据子节点对象，获取子节点的索引位置。
	*@param node 子节点。
	*@return 子节点所在的索引位置。
	*/
	__proto.getChildIndex=function(node){
		return this._childs.indexOf(node);
	}

	/**
	*根据子节点的名字，获取子节点对象。
	*@param name 子节点的名字。
	*@return 节点对象。
	*/
	__proto.getChildByName=function(name){
		var nodes=this._childs;
		if (nodes){
			for (var i=0,n=nodes.length;i < n;i++){
				var node=nodes[i];
				if (node.name===name)return node;
			}
		}
		return null;
	}

	/**@private */
	__proto._get$P=function(key){
		return this._$P[key];
	}

	/**@private */
	__proto._set$P=function(key,value){
		if (!this.destroyed){
			this._$P===Node.PROP_EMPTY && (this._$P={});
			this._$P[key]=value;
		}
		return value;
	}

	/**
	*根据子节点的索引位置，获取子节点对象。
	*@param index 索引位置
	*@return 子节点
	*/
	__proto.getChildAt=function(index){
		return this._childs[index];
	}

	/**
	*设置子节点的索引位置。
	*@param node 子节点。
	*@param index 新的索引。
	*@return 返回子节点本身。
	*/
	__proto.setChildIndex=function(node,index){
		var childs=this._childs;
		if (index < 0 || index >=childs.length){
			throw new Error("setChildIndex:The index is out of bounds.");
		};
		var oldIndex=this.getChildIndex(node);
		if (oldIndex < 0)throw new Error("setChildIndex:node is must child of this object.");
		childs.splice(oldIndex,1);
		childs.splice(index,0,node);
		if (this.conchModel){
			this.conchModel.removeChild(node.conchModel);
			this.conchModel.addChildAt(node.conchModel,index);
		}
		this._childChanged();
		return node;
	}

	/**
	*@private
	*子节点发生改变。
	*@param child 子节点。
	*/
	__proto._childChanged=function(child){}
	/**
	*删除子节点。
	*@param node 子节点
	*@return 被删除的节点
	*/
	__proto.removeChild=function(node){
		if (!this._childs)return node;
		var index=this._childs.indexOf(node);
		return this.removeChildAt(index);
	}

	/**
	*从父容器删除自己，如已经被删除不会抛出异常。
	*@return 当前节点（ Node ）对象。
	*/
	__proto.removeSelf=function(){
		this._parent && this._parent.removeChild(this);
		return this;
	}

	/**
	*根据子节点名字删除对应的子节点对象，如果找不到不会抛出异常。
	*@param name 对象名字。
	*@return 查找到的节点（ Node ）对象。
	*/
	__proto.removeChildByName=function(name){
		var node=this.getChildByName(name);
		node && this.removeChild(node);
		return node;
	}

	/**
	*根据子节点索引位置，删除对应的子节点对象。
	*@param index 节点索引位置。
	*@return 被删除的节点。
	*/
	__proto.removeChildAt=function(index){
		var node=this.getChildAt(index);
		if (node){
			this._childs.splice(index,1);
			this.conchModel && this.conchModel.removeChild(node.conchModel);
			node.parent=null;
		}
		return node;
	}

	/**
	*删除指定索引区间的所有子对象。
	*@param beginIndex 开始索引。
	*@param endIndex 结束索引。
	*@return 当前节点对象。
	*/
	__proto.removeChildren=function(beginIndex,endIndex){
		(beginIndex===void 0)&& (beginIndex=0);
		(endIndex===void 0)&& (endIndex=0x7fffffff);
		if (this._childs && this._childs.length > 0){
			var childs=this._childs;
			if (beginIndex===0 && endIndex >=n){
				var arr=childs;
				this._childs=Node.ARRAY_EMPTY;
				}else {
				arr=childs.splice(beginIndex,endIndex-beginIndex);
			}
			for (var i=0,n=arr.length;i < n;i++){
				arr[i].parent=null;
				this.conchModel && this.conchModel.removeChild(arr[i].conchModel);
			}
		}
		return this;
	}

	/**
	*替换子节点。
	*@internal 将传入的新节点对象替换到已有子节点索引位置处。
	*@param newNode 新节点。
	*@param oldNode 老节点。
	*@return 返回新节点。
	*/
	__proto.replaceChild=function(newNode,oldNode){
		var index=this._childs.indexOf(oldNode);
		if (index >-1){
			this._childs.splice(index,1,newNode);
			if (this.conchModel){
				this.conchModel.removeChild(oldNode.conchModel);
				this.conchModel.addChildAt(newNode.conchModel,index);
			}
			oldNode.parent=null;
			newNode.parent=this;
			return newNode;
		}
		return null;
	}

	/**@private */
	__proto._updateDisplayedInstage=function(){
		var ele;
		ele=this;
		var stage=Laya.stage;
		this._displayedInStage=false;
		while (ele){
			if (ele._getBit(0x1)){
				this._displayedInStage=ele._displayedInStage;
				break ;
			}
			if (ele==stage || ele._displayedInStage){
				this._displayedInStage=true;
				break ;
			}
			ele=ele.parent;
		}
	}

	/**@private */
	__proto._setDisplay=function(value){
		if (this._displayedInStage!==value){
			this._displayedInStage=value;
			if (value)this.event(/*laya.events.Event.DISPLAY*/"display");
			else this.event(/*laya.events.Event.UNDISPLAY*/"undisplay");
		}
	}

	/**
	*@private
	*设置指定节点对象是否可见(是否在渲染列表中)。
	*@param node 节点。
	*@param display 是否可见。
	*/
	__proto._displayChild=function(node,display){
		var childs=node._childs;
		if (childs){
			for (var i=0,n=childs.length;i < n;i++){
				var child=childs[i];
				if (!child._getBit(0x1))continue ;
				if (child._childs.length > 0){
					this._displayChild(child,display);
					}else {
					child._setDisplay(display);
				}
			}
		}
		node._setDisplay(display);
	}

	/**
	*当前容器是否包含指定的 <code>Node</code> 节点对象 。
	*@param node 指定的 <code>Node</code> 节点对象 。
	*@return 一个布尔值表示是否包含指定的 <code>Node</code> 节点对象 。
	*/
	__proto.contains=function(node){
		if (node===this)return true;
		while (node){
			if (node.parent===this)return true;
			node=node.parent;
		}
		return false;
	}

	/**
	*定时重复执行某函数。功能同Laya.timer.timerLoop()。
	*@param delay 间隔时间(单位毫秒)。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*@param args （可选）回调参数。
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
	*@param jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
	*/
	__proto.timerLoop=function(delay,caller,method,args,coverBefore,jumpFrame){
		(coverBefore===void 0)&& (coverBefore=true);
		(jumpFrame===void 0)&& (jumpFrame=false);
		this.timer.loop(delay,caller,method,args,coverBefore,jumpFrame);
	}

	/**
	*定时执行某函数一次。功能同Laya.timer.timerOnce()。
	*@param delay 延迟时间(单位毫秒)。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*@param args （可选）回调参数。
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
	*/
	__proto.timerOnce=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this.timer._create(false,false,delay,caller,method,args,coverBefore);
	}

	/**
	*定时重复执行某函数(基于帧率)。功能同Laya.timer.frameLoop()。
	*@param delay 间隔几帧(单位为帧)。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*@param args （可选）回调参数。
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
	*/
	__proto.frameLoop=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this.timer._create(true,true,delay,caller,method,args,coverBefore);
	}

	/**
	*定时执行一次某函数(基于帧率)。功能同Laya.timer.frameOnce()。
	*@param delay 延迟几帧(单位为帧)。
	*@param caller 执行域(this)
	*@param method 结束时的回调方法
	*@param args （可选）回调参数
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true
	*/
	__proto.frameOnce=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this.timer._create(true,false,delay,caller,method,args,coverBefore);
	}

	/**
	*清理定时器。功能同Laya.timer.clearTimer()。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*/
	__proto.clearTimer=function(caller,method){
		this.timer.clear(caller,method);
	}

	/**
	*子对象数量。
	*/
	__getset(0,__proto,'numChildren',function(){
		return this._childs.length;
	});

	/**
	*[只读]是否已经销毁。对象销毁后不能再使用。
	*@return
	*/
	__getset(0,__proto,'destroyed',function(){
		return this._destroyed;
	});

	/**父节点。*/
	__getset(0,__proto,'parent',function(){
		return this._parent;
		},function(value){
		if (this._parent!==value){
			if (value){
				this._parent=value;
				this.event(/*laya.events.Event.ADDED*/"added");
				if (this._getBit(0x1)){
					this._setUpNoticeChain();
					value.displayedInStage && this._displayChild(this,true);
				}
				value._childChanged(this);
				}else {
				this.event(/*laya.events.Event.REMOVED*/"removed");
				this._parent._childChanged();
				if (this._getBit(0x1))this._displayChild(this,false);
				this._parent=value;
			}
		}
	});

	/**表示是否在显示列表中显示。*/
	__getset(0,__proto,'displayedInStage',function(){
		if (this._getBit(0x1))return this._displayedInStage;
		this._setUpNoticeType(0x1);
		return this._displayedInStage;
	});

	Node.ARRAY_EMPTY=[];
	Node.PROP_EMPTY={};
	Node.NOTICE_DISPLAY=0x1;
	Node.MOUSEENABLE=0x2;
	return Node;
})(EventDispatcher)


/**
*@private
*<code>CSSStyle</code> 类是元素CSS样式定义类。
*/
//class laya.display.css.CSSStyle extends laya.display.css.Style
var CSSStyle=(function(_super){
	function CSSStyle(ower){
		this._bgground=null;
		this._border=null;
		//this._ower=null;
		this._rect=null;
		/**@private */
		this.underLine=0;
		/**行高。 */
		this.lineHeight=0;
		CSSStyle.__super.call(this);
		this._padding=CSSStyle._PADDING;
		this._spacing=CSSStyle._SPACING;
		this._aligns=CSSStyle._ALIGNS;
		this._font=Font.EMPTY;
		this._ower=ower;
	}

	__class(CSSStyle,'laya.display.css.CSSStyle',_super);
	var __proto=CSSStyle.prototype;
	/**@inheritDoc */
	__proto.destroy=function(){
		this._ower=null;
		this._font=null;
		this._rect=null;
	}

	/**
	*复制传入的 CSSStyle 属性值。
	*@param src 待复制的 CSSStyle 对象。
	*/
	__proto.inherit=function(src){
		this._font=src._font;
		this._spacing=src._spacing===CSSStyle._SPACING ? CSSStyle._SPACING :src._spacing.slice();
		this.lineHeight=src.lineHeight;
	}

	/**@private */
	__proto._widthAuto=function(){
		return (this._type & 0x40000)!==0;
	}

	/**@inheritDoc */
	__proto.widthed=function(sprite){
		return (this._type & 0x8)!=0;
	}

	/**
	*@private
	*/
	__proto._calculation=function(type,value){
		if (value.indexOf('%')< 0)return false;
		var ower=this._ower;
		var parent=ower.parent;
		var rect=this._rect;
		function getValue (pw,w,nums){
			return (pw *nums[0]+w *nums[1]+nums[2]);
		}
		function onParentResize (type){
			var pw=parent.width,w=ower.width;
			rect.width && (ower.width=getValue(pw,w,rect.width));
			rect.height && (ower.height=getValue(pw,w,rect.height));
			rect.left && (ower.x=getValue(pw,w,rect.left));
			rect.top && (ower.y=getValue(pw,w,rect.top));
		}
		if (rect===null){
			parent._getCSSStyle()._type |=0x80000;
			parent.on(/*laya.events.Event.RESIZE*/"resize",this,onParentResize);
			this._rect=rect={input:{}};
		};
		var nums=value.split(' ');
		nums[0]=parseFloat(nums[0])/ 100;
		if (nums.length==1)
			nums[1]=nums[2]=0;
		else {
			nums[1]=parseFloat(nums[1])/ 100;
			nums[2]=parseFloat(nums[2]);
		}
		rect[type]=nums;
		rect.input[type]=value;
		onParentResize(type);
		return true;
	}

	/**
	*是否已设置高度。
	*@param sprite 显示对象 Sprite。
	*@return 一个Boolean 表示是否已设置高度。
	*/
	__proto.heighted=function(sprite){
		return (this._type & 0x2000)!=0;
	}

	/**
	*设置宽高。
	*@param w 宽度。
	*@param h 高度。
	*/
	__proto.size=function(w,h){
		var ower=this._ower;
		var resize=false;
		if (w!==-1 && w !=this._ower.width){
			this._type |=0x8;
			this._ower.width=w;
			resize=true;
		}
		if (h!==-1 && h !=this._ower.height){
			this._type |=0x2000;
			this._ower.height=h;
			resize=true;
		}
		if (resize){
			ower._layoutLater();
			(this._type & 0x80000)&& ower.event(/*laya.events.Event.RESIZE*/"resize",this);
		}
	}

	/**@private */
	__proto._getAlign=function(){
		return this._aligns[0];
	}

	/**@private */
	__proto._getValign=function(){
		return this._aligns[1];
	}

	/**@private */
	__proto._getCssFloat=function(){
		return (this._type & 0x8000)!=0 ? 0x8000 :0;
	}

	__proto._createFont=function(){
		return (this._type & 0x1000)? this._font :(this._type |=0x1000,this._font=new Font(this._font));
	}

	/**@inheritDoc */
	__proto.render=function(sprite,context,x,y){
		var w=sprite.width;
		var h=sprite.height;
		x-=sprite.pivotX;
		y-=sprite.pivotY;
		this._bgground && this._bgground.color !=null && context.ctx.fillRect(x,y,w,h,this._bgground.color);
		this._border && this._border.color && context.drawRect(x,y,w,h,this._border.color.strColor,this._border.size);
	}

	/**@inheritDoc */
	__proto.getCSSStyle=function(){
		return this;
	}

	/**
	*设置 CSS 样式字符串。
	*@param text CSS样式字符串。
	*/
	__proto.cssText=function(text){
		this.attrs(CSSStyle.parseOneCSS(text,';'));
	}

	/**
	*根据传入的属性名、属性值列表，设置此对象的属性值。
	*@param attrs 属性名与属性值列表。
	*/
	__proto.attrs=function(attrs){
		if (attrs){
			for (var i=0,n=attrs.length;i < n;i++){
				var attr=attrs[i];
				this[attr[0]]=attr[1];
			}
		}
	}

	/**@inheritDoc */
	__proto.setTransform=function(value){
		(value==='none')? (this._tf=Style._TF_EMPTY):this.attrs(CSSStyle.parseOneCSS(value,','));
	}

	/**
	*定义 X 轴、Y 轴移动转换。
	*@param x X 轴平移量。
	*@param y Y 轴平移量。
	*/
	__proto.translate=function(x,y){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.translateX=x;
		this._tf.translateY=y;
	}

	/**
	*定义 缩放转换。
	*@param x X 轴缩放值。
	*@param y Y 轴缩放值。
	*/
	__proto.scale=function(x,y){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleX=x;
		this._tf.scaleY=y;
	}

	/**@private */
	__proto._enableLayout=function(){
		return (this._type & 0x2)===0 && (this._type & 0x4)===0;
	}

	/**
	*是否显示为块级元素。
	*/
	__getset(0,__proto,'block',_super.prototype._$get_block,function(value){
		value ? (this._type |=0x1):(this._type &=(~0x1));
	});

	/**
	*垂直对齐方式。
	*/
	__getset(0,__proto,'valign',function(){
		return CSSStyle._valigndef[this._aligns[1]];
		},function(value){
		this._aligns===CSSStyle._ALIGNS && (this._aligns=[0,0,0]);
		this._aligns[1]=CSSStyle._valigndef[value];
	});

	/**
	*高度。
	*/
	__getset(0,__proto,'height',null,function(h){
		this._type |=0x2000;
		if ((typeof h=='string')){
			if (this._calculation("height",h))return;
			h=parseInt(h);
		}
		this.size(-1,h);
	});

	/**
	*宽度。
	*/
	__getset(0,__proto,'width',null,function(w){
		this._type |=0x8;
		if ((typeof w=='string')){
			var offset=w.indexOf('auto');
			if (offset >=0){
				this._type |=0x40000;
				w=w.substr(0,offset);
			}
			if (this._calculation("width",w))return;
			w=parseInt(w);
		}
		this.size(w,-1);
	});

	/**
	*字体粗细。
	*/
	__getset(0,__proto,'fontWeight',function(){
		return this._font.weight;
		},function(value){
		this._createFont().weight=value;
	});

	/**
	*表示左边距。
	*/
	__getset(0,__proto,'left',null,function(value){
		var ower=this._ower;
		if (((typeof value=='string'))){
			if (value==="center")
				value="50% -50% 0";
			else if (value==="right")
			value="100% -100% 0";
			if (this._calculation("left",value))return;
			value=parseInt(value);
		}
		ower.x=value;
	});

	__getset(0,__proto,'_translate',null,function(value){
		this.translate(value[0],value[1]);
	});

	/**@inheritDoc */
	__getset(0,__proto,'absolute',function(){
		return (this._type & 0x4)!==0;
	});

	/**
	*表示上边距。
	*/
	__getset(0,__proto,'top',null,function(value){
		var ower=this._ower;
		if (((typeof value=='string'))){
			if (value==="middle")
				value="50% -50% 0";
			else if (value==="bottom")
			value="100% -100% 0";
			if (this._calculation("top",value))return;
			value=parseInt(value);
		}
		ower.y=value;
	});

	/**
	*水平对齐方式。
	*/
	__getset(0,__proto,'align',function(){
		return CSSStyle._aligndef[this._aligns[0]];
		},function(value){
		this._aligns===CSSStyle._ALIGNS && (this._aligns=[0,0,0]);
		this._aligns[0]=CSSStyle._aligndef[value];
	});

	/**
	*表示是否加粗。
	*/
	__getset(0,__proto,'bold',function(){
		return this._font.bold;
		},function(value){
		this._createFont().bold=value;
	});

	/**
	*边距信息。
	*/
	__getset(0,__proto,'padding',function(){
		return this._padding;
		},function(value){
		this._padding=value;
	});

	/**
	*行间距。
	*/
	__getset(0,__proto,'leading',function(){
		return this._spacing[1];
		},function(d){
		((typeof d=='string'))&& (d=parseInt(d+""));
		this._spacing===CSSStyle._SPACING && (this._spacing=[0,0]);
		this._spacing[1]=d;
	});

	/**
	*是否是行元素。
	*/
	__getset(0,__proto,'lineElement',function(){
		return (this._type & 0x10000)!=0;
		},function(value){
		value ? (this._type |=0x10000):(this._type &=(~0x10000));
	});

	/**
	*浮动方向。
	*/
	__getset(0,__proto,'cssFloat',function(){
		return (this._type & 0x8000)!=0 ? "right" :"left";
		},function(value){
		this.lineElement=false;
		value==="right" ? (this._type |=0x8000):(this._type &=(~0x8000));
	});

	/**
	*添加到文本的修饰。
	*/
	__getset(0,__proto,'textDecoration',function(){
		return this._font.decoration;
		},function(value){
		this._createFont().decoration=value;
	});

	/**
	*设置如何处理元素内的空白。
	*/
	__getset(0,__proto,'whiteSpace',function(){
		return (this._type & 0x20000)? "nowrap" :"";
		},function(type){
		type==="nowrap" && (this._type |=0x20000);
		type==="none" && (this._type &=~0x20000);
	});

	__getset(0,__proto,'background',null,function(value){
		if (!value){
			this._bgground=null;
			return;
		}
		this._bgground || (this._bgground={});
		this._bgground.color=value;
		this._ower.conchModel && this._ower.conchModel.bgColor(value);
		this._type |=0x4000;
		this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
	});

	/**
	*表示是否换行。
	*/
	__getset(0,__proto,'wordWrap',function(){
		return (this._type & 0x20000)===0;
		},function(value){
		value ? (this._type &=~0x20000):(this._type |=0x20000);
	});

	/**
	*字体颜色。
	*/
	__getset(0,__proto,'color',function(){
		return this._font.color;
		},function(value){
		this._createFont().color=value;
	});

	/**
	*<p>指定文本字段是否是密码文本字段。</p>
	*如果此属性的值为 true，则文本字段被视为密码文本字段，并使用星号而不是实际字符来隐藏输入的字符。如果为 false，则不会将文本字段视为密码文本字段。
	*/
	__getset(0,__proto,'password',function(){
		return this._font.password;
		},function(value){
		this._createFont().password=value;
	});

	/**
	*背景颜色。
	*/
	__getset(0,__proto,'backgroundColor',function(){
		return this._bgground ? this._bgground.color :null;
		},function(value){
		if (value==='none')this._bgground=null;
		else (this._bgground || (this._bgground={}),this._bgground.color=value);
		this._ower.conchModel && this._ower.conchModel.bgColor(value);
		this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
	});

	/**
	*字体信息。
	*/
	__getset(0,__proto,'font',function(){
		return this._font.toString();
		},function(value){
		this._createFont().set(value);
	});

	/**
	*文本的粗细。
	*/
	__getset(0,__proto,'weight',null,function(value){
		this._createFont().weight=value;
	});

	/**
	*间距。
	*/
	__getset(0,__proto,'letterSpacing',function(){
		return this._spacing[0];
		},function(d){
		((typeof d=='string'))&& (d=parseInt(d+""));
		this._spacing===CSSStyle._SPACING && (this._spacing=[0,0]);
		this._spacing[0]=d;
	});

	/**
	*字体大小。
	*/
	__getset(0,__proto,'fontSize',function(){
		return this._font.size;
		},function(value){
		this._createFont().size=value;
	});

	/**
	*表示是否为斜体。
	*/
	__getset(0,__proto,'italic',function(){
		return this._font.italic;
		},function(value){
		this._createFont().italic=value;
	});

	/**
	*字体系列。
	*/
	__getset(0,__proto,'fontFamily',function(){
		return this._font.family;
		},function(value){
		this._createFont().family=value;
	});

	/**
	*<p>描边宽度（以像素为单位）。</p>
	*默认值0，表示不描边。
	*@default 0
	*/
	__getset(0,__proto,'stroke',function(){
		return this._font.stroke[0];
		},function(value){
		if (this._createFont().stroke===Font._STROKE)this._font.stroke=[0,"#000000"];
		this._font.stroke[0]=value;
	});

	/**
	*<p>描边颜色，以字符串表示。</p>
	*@default "#000000";
	*/
	__getset(0,__proto,'strokeColor',function(){
		return this._font.stroke[1];
		},function(value){
		if (this._createFont().stroke===Font._STROKE)this._font.stroke=[0,"#000000"];
		this._font.stroke[1]=value;
	});

	/**
	*边框属性，比如border="5px solid red"
	*/
	__getset(0,__proto,'border',function(){
		return this._border ? this._border.value :"";
		},function(value){
		if (value=='none'){
			this._border=null;
			return;
		}
		this._border || (this._border={});
		this._border.value=value;
		var values=value.split(' ');
		this._border.color=Color.create(values[values.length-1]);
		if (values.length==1){
			this._border.size=1;
			this._border.type='solid';
			return;
		};
		var i=0;
		if (values[0].indexOf('px')> 0){
			this._border.size=parseInt(values[0]);
			i++;
		}else this._border.size=1;
		this._border.type=values[i];
		this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
	});

	/**
	*边框的颜色。
	*/
	__getset(0,__proto,'borderColor',function(){
		return (this._border && this._border.color)? this._border.color.strColor :null;
		},function(value){
		if (!value){
			this._border=null;
			return;
		}
		this._border || (this._border={size:1,type:'solid'});
		this._border.color=(value==null)? null :Color.create(value);
		this._ower.conchModel && this._ower.conchModel.border(this._border.color.strColor);
		this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
	});

	/**
	*元素的定位类型。
	*/
	__getset(0,__proto,'position',function(){
		return (this._type & 0x4)? "absolute" :"";
		},function(value){
		value=="absolute" ? (this._type |=0x4):(this._type &=~0x4);
	});

	/**
	*规定元素应该生成的框的类型。
	*/
	__getset(0,__proto,'display',null,function(value){
		switch (value){
			case '':
				this._type &=~0x2;
				this.visible=true;
				break ;
			case 'none':
				this._type |=0x2;
				this.visible=false;
				this._ower._layoutLater();
				break ;
			}
	});

	/**@inheritDoc */
	__getset(0,__proto,'paddingLeft',function(){
		return this.padding[3];
	});

	/**@inheritDoc */
	__getset(0,__proto,'paddingTop',function(){
		return this.padding[0];
	});

	__getset(0,__proto,'_scale',null,function(value){
		this._ower.scale(value[0],value[1]);
	});

	__getset(0,__proto,'_rotate',null,function(value){
		this._ower.rotation=value;
	});

	CSSStyle.parseOneCSS=function(text,clipWord){
		var out=[];
		var attrs=text.split(clipWord);
		var valueArray;
		for (var i=0,n=attrs.length;i < n;i++){
			var attr=attrs[i];
			var ofs=attr.indexOf(':');
			var name=attr.substr(0,ofs).replace(/^\s+|\s+$/g,'');
			if (name.length==0)
				continue ;
			var value=attr.substr(ofs+1).replace(/^\s+|\s+$/g,'');
			var one=[name,value];
			switch (name){
				case 'italic':
				case 'bold':
					one[1]=value=="true";
					break ;
				case 'line-height':
					one[0]='lineHeight';
					one[1]=parseInt(value);
					break ;
				case 'font-size':
					one[0]='fontSize';
					one[1]=parseInt(value);
					break ;
				case 'padding':
					valueArray=value.split(' ');
					valueArray.length > 1 || (valueArray[1]=valueArray[2]=valueArray[3]=valueArray[0]);
					one[1]=[parseInt(valueArray[0]),parseInt(valueArray[1]),parseInt(valueArray[2]),parseInt(valueArray[3])];
					break ;
				case 'rotate':
					one[0]="_rotate";
					one[1]=parseFloat(value);
					break ;
				case 'scale':
					valueArray=value.split(' ');
					one[0]="_scale";
					one[1]=[parseFloat(valueArray[0]),parseFloat(valueArray[1])];
					break ;
				case 'translate':
					valueArray=value.split(' ');
					one[0]="_translate";
					one[1]=[parseInt(valueArray[0]),parseInt(valueArray[1])];
					break ;
				default :
					(one[0]=CSSStyle._CSSTOVALUE[name])|| (one[0]=name);
				}
			out.push(one);
		}
		return out;
	}

	CSSStyle.parseCSS=function(text,uri){
		var one;
		while ((one=CSSStyle._parseCSSRegExp.exec(text))!=null){
			CSSStyle.styleSheets[one[1]]=CSSStyle.parseOneCSS(one[2],';');
		}
	}

	CSSStyle.EMPTY=new CSSStyle(null);
	CSSStyle._CSSTOVALUE={'letter-spacing':'letterSpacing','line-spacing':'lineSpacing','white-space':'whiteSpace','line-height':'lineHeight','scale-x':'scaleX','scale-y':'scaleY','translate-x':'translateX','translate-y':'translateY','font-family':'fontFamily','font-weight':'fontWeight','vertical-align':'valign','text-decoration':'textDecoration','background-color':'backgroundColor','border-color':'borderColor','float':'cssFloat'};
	CSSStyle._parseCSSRegExp=new RegExp("([\.\#]\\w+)\\s*{([\\s\\S]*?)}","g");
	CSSStyle._aligndef={'left':0,'center':1,'right':2,0:'left',1:'center',2:'right'};
	CSSStyle._valigndef={'top':0,'middle':1,'bottom':2,0:'top',1:'middle',2:'bottom'};
	CSSStyle.styleSheets={};
	CSSStyle.ALIGN_CENTER=1;
	CSSStyle.ALIGN_RIGHT=2;
	CSSStyle.VALIGN_MIDDLE=1;
	CSSStyle.VALIGN_BOTTOM=2;
	CSSStyle._CSS_BLOCK=0x1;
	CSSStyle._DISPLAY_NONE=0x2;
	CSSStyle._ABSOLUTE=0x4;
	CSSStyle._WIDTH_SET=0x8;
	CSSStyle._PADDING=[0,0,0,0];
	CSSStyle._RECT=[-1,-1,-1,-1];
	CSSStyle._SPACING=[0,0];
	CSSStyle._ALIGNS=[0,0,0];
	CSSStyle.ADDLAYOUTED=0x200;
	CSSStyle._NEWFONT=0x1000;
	CSSStyle._HEIGHT_SET=0x2000;
	CSSStyle._BACKGROUND_SET=0x4000;
	CSSStyle._FLOAT_RIGHT=0x8000;
	CSSStyle._LINE_ELEMENT=0x10000;
	CSSStyle._NOWARP=0x20000;
	CSSStyle._WIDTHAUTO=0x40000;
	CSSStyle._LISTERRESZIE=0x80000;
	return CSSStyle;
})(Style)


/**
*@private
*使用Audio标签播放声音
*/
//class laya.media.h5audio.AudioSound extends laya.events.EventDispatcher
var AudioSound=(function(_super){
	function AudioSound(){
		/**
		*声音URL
		*/
		this.url=null;
		/**
		*播放用的audio标签
		*/
		this.audio=null;
		/**
		*是否已加载完成
		*/
		this.loaded=false;
		AudioSound.__super.call(this);
	}

	__class(AudioSound,'laya.media.h5audio.AudioSound',_super);
	var __proto=AudioSound.prototype;
	/**
	*释放声音
	*
	*/
	__proto.dispose=function(){
		var ad=AudioSound._audioCache[this.url];
		if (ad){
			ad.src="";
			delete AudioSound._audioCache[this.url];
		}
	}

	/**
	*加载声音
	*@param url
	*
	*/
	__proto.load=function(url){
		url=URL.formatURL(url);
		this.url=url;
		var ad;
		if (url==SoundManager._tMusic){
			AudioSound._initMusicAudio();
			ad=AudioSound._musicAudio;
			if (ad.src !=url){
				AudioSound._audioCache[ad.src]=null;
				ad=null;
			}
			}else{
			ad=AudioSound._audioCache[url];
		}
		if (ad && ad.readyState >=2){
			this.event(/*laya.events.Event.COMPLETE*/"complete");
			return;
		}
		if (!ad){
			if (url==SoundManager._tMusic){
				AudioSound._initMusicAudio();
				ad=AudioSound._musicAudio;
				}else{
				ad=Browser.createElement("audio");
			}
			AudioSound._audioCache[url]=ad;
			ad.src=url;
		}
		ad.addEventListener("canplaythrough",onLoaded);
		ad.addEventListener("error",onErr);
		var me=this;
		function onLoaded (){
			offs();
			me.loaded=true;
			me.event(/*laya.events.Event.COMPLETE*/"complete");
		}
		function onErr (){
			ad.load=null;
			offs();
			me.event(/*laya.events.Event.ERROR*/"error");
		}
		function offs (){
			ad.removeEventListener("canplaythrough",onLoaded);
			ad.removeEventListener("error",onErr);
		}
		this.audio=ad;
		if (ad.load){
			ad.load();
			}else {
			onErr();
		}
	}

	/**
	*播放声音
	*@param startTime 起始时间
	*@param loops 循环次数
	*@return
	*
	*/
	__proto.play=function(startTime,loops){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		if (!this.url)return null;
		var ad;
		if (this.url==SoundManager._tMusic){
			ad=AudioSound._musicAudio;
			}else{
			ad=AudioSound._audioCache[this.url];
		}
		if (!ad)return null;
		var tAd;
		tAd=Pool.getItem("audio:"+this.url);
		if (Render.isConchApp){
			if (!tAd){
				tAd=Browser.createElement("audio");
				tAd.src=this.url;
			}
		}
		else {
			if (this.url==SoundManager._tMusic){
				AudioSound._initMusicAudio();
				tAd=AudioSound._musicAudio;
				tAd.src=this.url;
				}else{
				tAd=tAd ? tAd :ad.cloneNode(true);
			}
		};
		var channel=new AudioSoundChannel(tAd);
		channel.url=this.url;
		channel.loops=loops;
		channel.startTime=startTime;
		channel.play();
		SoundManager.addChannel(channel);
		return channel;
	}

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		var ad;
		ad=AudioSound._audioCache[this.url];
		if (!ad)
			return 0;
		return ad.duration;
	});

	AudioSound._initMusicAudio=function(){
		if (AudioSound._musicAudio)return;
		if (!AudioSound._musicAudio)AudioSound._musicAudio=Browser.createElement("audio");
		if (!Render.isConchApp){
			Browser.document.addEventListener("mousedown",AudioSound._makeMusicOK);
		}
	}

	AudioSound._makeMusicOK=function(){
		Browser.document.removeEventListener("mousedown",AudioSound._makeMusicOK);
		if (!AudioSound._musicAudio.src){
			AudioSound._musicAudio.src="";
			AudioSound._musicAudio.load();
			}else{
			AudioSound._musicAudio.play();
		}
	}

	AudioSound._audioCache={};
	AudioSound._musicAudio=null;
	return AudioSound;
})(EventDispatcher)


/**
*<p> <code>SoundChannel</code> 用来控制程序中的声音。每个声音均分配给一个声道，而且应用程序可以具有混合在一起的多个声道。</p>
*<p> <code>SoundChannel</code> 类包含控制声音的播放、暂停、停止、音量的方法，以及获取声音的播放状态、总时间、当前播放时间、总循环次数、播放地址等信息的方法。</p>
*/
//class laya.media.SoundChannel extends laya.events.EventDispatcher
var SoundChannel=(function(_super){
	function SoundChannel(){
		/**
		*声音地址。
		*/
		this.url=null;
		/**
		*循环次数。
		*/
		this.loops=0;
		/**
		*开始时间。
		*/
		this.startTime=NaN;
		/**
		*表示声音是否已暂停。
		*/
		this.isStopped=false;
		/**
		*播放完成处理器。
		*/
		this.completeHandler=null;
		SoundChannel.__super.call(this);
	}

	__class(SoundChannel,'laya.media.SoundChannel',_super);
	var __proto=SoundChannel.prototype;
	/**
	*播放。
	*/
	__proto.play=function(){}
	/**
	*停止。
	*/
	__proto.stop=function(){}
	/**
	*暂停。
	*/
	__proto.pause=function(){}
	/**
	*继续播放。
	*/
	__proto.resume=function(){}
	/**
	*private
	*/
	__proto.__runComplete=function(handler){
		if (handler){
			handler.run();
		}
	}

	/**
	*音量范围从 0（静音）至 1（最大音量）。
	*/
	__getset(0,__proto,'volume',function(){
		return 1;
		},function(v){
	});

	/**
	*获取当前播放时间。
	*/
	__getset(0,__proto,'position',function(){
		return 0;
	});

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		return 0;
	});

	return SoundChannel;
})(EventDispatcher)


/**
*<code>Sound</code> 类是用来播放控制声音的类。
*/
//class laya.media.Sound extends laya.events.EventDispatcher
var Sound=(function(_super){
	function Sound(){
		Sound.__super.call(this);;
	}

	__class(Sound,'laya.media.Sound',_super);
	var __proto=Sound.prototype;
	/**
	*加载声音。
	*@param url 地址。
	*
	*/
	__proto.load=function(url){}
	/**
	*播放声音。
	*@param startTime 开始时间,单位秒
	*@param loops 循环次数,0表示一直循环
	*@return 声道 SoundChannel 对象。
	*
	*/
	__proto.play=function(startTime,loops){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		return null;
	}

	/**
	*释放声音资源。
	*
	*/
	__proto.dispose=function(){}
	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		return 0;
	});

	return Sound;
})(EventDispatcher)


/**
*@private
*web audio api方式播放声音
*/
//class laya.media.webaudio.WebAudioSound extends laya.events.EventDispatcher
var WebAudioSound=(function(_super){
	function WebAudioSound(){
		/**
		*声音URL
		*/
		this.url=null;
		/**
		*是否已加载完成
		*/
		this.loaded=false;
		/**
		*声音文件数据
		*/
		this.data=null;
		/**
		*声音原始文件数据
		*/
		this.audioBuffer=null;
		/**
		*待播放的声音列表
		*/
		this.__toPlays=null;
		/**
		*@private
		*/
		this._disposed=false;
		WebAudioSound.__super.call(this);
	}

	__class(WebAudioSound,'laya.media.webaudio.WebAudioSound',_super);
	var __proto=WebAudioSound.prototype;
	/**
	*加载声音
	*@param url
	*
	*/
	__proto.load=function(url){
		var me=this;
		url=URL.formatURL(url);
		this.url=url;
		this.audioBuffer=WebAudioSound._dataCache[url];
		if (this.audioBuffer){
			this._loaded(this.audioBuffer);
			return;
		}
		WebAudioSound.e.on("loaded:"+url,this,this._loaded);
		WebAudioSound.e.on("err:"+url,this,this._err);
		if (WebAudioSound.__loadingSound[url]){
			return;
		}
		WebAudioSound.__loadingSound[url]=true;
		var request=new Browser.window.XMLHttpRequest();
		request.open("GET",url,true);
		request.responseType="arraybuffer";
		request.onload=function (){
			if (me._disposed){
				me._removeLoadEvents();
				return;
			}
			me.data=request.response;
			WebAudioSound.buffs.push({"buffer":me.data,"url":me.url});
			WebAudioSound.decode();
		};
		request.onerror=function (e){
			me._err();
		}
		request.send();
	}

	__proto._err=function(){
		this._removeLoadEvents();
		WebAudioSound.__loadingSound[this.url]=false;
		this.event(/*laya.events.Event.ERROR*/"error");
		if (!this.__toPlays)return;
		var i=0,len=0;
		var toPlays;
		toPlays=this.__toPlays;
		len=toPlays.length;
		var tParams;
		for (i=0;i < len;i++){
			tParams=toPlays[i];
			if (tParams[2] && !(tParams [2]).isStopped){
				(tParams [2]).event(/*laya.events.Event.ERROR*/"error");
			}
		}
		this.__toPlays.length=0;
	}

	__proto._loaded=function(audioBuffer){
		this._removeLoadEvents();
		if (this._disposed){
			return;
		}
		this.audioBuffer=audioBuffer;
		WebAudioSound._dataCache[this.url]=this.audioBuffer;
		this.loaded=true;
		this.event(/*laya.events.Event.COMPLETE*/"complete");
	}

	__proto._removeLoadEvents=function(){
		WebAudioSound.e.off("loaded:"+this.url,this,this._loaded);
		WebAudioSound.e.off("err:"+this.url,this,this._err);
	}

	__proto.__playAfterLoaded=function(){
		if (!this.__toPlays)return;
		var i=0,len=0;
		var toPlays;
		toPlays=this.__toPlays;
		len=toPlays.length;
		var tParams;
		for (i=0;i < len;i++){
			tParams=toPlays[i];
			if (tParams[2] && !(tParams [2]).isStopped){
				this.play(tParams[0],tParams[1],tParams[2]);
			}
		}
		this.__toPlays.length=0;
	}

	/**
	*播放声音
	*@param startTime 起始时间
	*@param loops 循环次数
	*@return
	*
	*/
	__proto.play=function(startTime,loops,channel){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		channel=channel ? channel :new WebAudioSoundChannel();
		if (!this.audioBuffer){
			if (this.url){
				if (!this.__toPlays)this.__toPlays=[];
				this.__toPlays.push([startTime,loops,channel]);
				this.once(/*laya.events.Event.COMPLETE*/"complete",this,this.__playAfterLoaded);
				this.load(this.url);
			}
		}
		channel.url=this.url;
		channel.loops=loops;
		channel["audioBuffer"]=this.audioBuffer;
		channel.startTime=startTime;
		channel.play();
		SoundManager.addChannel(channel);
		return channel;
	}

	__proto.dispose=function(){
		this._disposed=true;
		delete WebAudioSound._dataCache[this.url];
		delete WebAudioSound.__loadingSound[this.url];
		this.audioBuffer=null;
		this.data=null;
		this.__toPlays=[];
	}

	__getset(0,__proto,'duration',function(){
		if (this.audioBuffer){
			return this.audioBuffer.duration;
		}
		return 0;
	});

	WebAudioSound.decode=function(){
		if (WebAudioSound.buffs.length <=0 || WebAudioSound.isDecoding){
			return;
		}
		WebAudioSound.isDecoding=true;
		WebAudioSound.tInfo=WebAudioSound.buffs.shift();
		WebAudioSound.ctx.decodeAudioData(WebAudioSound.tInfo["buffer"],WebAudioSound._done,WebAudioSound._fail);
	}

	WebAudioSound._done=function(audioBuffer){
		WebAudioSound.e.event("loaded:"+WebAudioSound.tInfo.url,audioBuffer);
		WebAudioSound.isDecoding=false;
		WebAudioSound.decode();
	}

	WebAudioSound._fail=function(){
		WebAudioSound.e.event("err:"+WebAudioSound.tInfo.url,null);
		WebAudioSound.isDecoding=false;
		WebAudioSound.decode();
	}

	WebAudioSound._playEmptySound=function(){
		if (WebAudioSound.ctx==null){
			return;
		};
		var source=WebAudioSound.ctx.createBufferSource();
		source.buffer=WebAudioSound._miniBuffer;
		source.connect(WebAudioSound.ctx.destination);
		source.start(0,0,0);
	}

	WebAudioSound._unlock=function(){
		if (WebAudioSound._unlocked){
			return;
		}
		WebAudioSound._playEmptySound();
		if (WebAudioSound.ctx.state=="running"){
			Browser.document.removeEventListener("mousedown",WebAudioSound._unlock,true);
			Browser.document.removeEventListener("touchend",WebAudioSound._unlock,true);
			Browser.document.removeEventListener("touchstart",WebAudioSound._unlock,true);
			WebAudioSound._unlocked=true;
		}
	}

	WebAudioSound.initWebAudio=function(){
		if (WebAudioSound.ctx.state !="running"){
			WebAudioSound._unlock();
			Browser.document.addEventListener("mousedown",WebAudioSound._unlock,true);
			Browser.document.addEventListener("touchend",WebAudioSound._unlock,true);
			Browser.document.addEventListener("touchstart",WebAudioSound._unlock,true);
		}
	}

	WebAudioSound._dataCache={};
	WebAudioSound.buffs=[];
	WebAudioSound.isDecoding=false;
	WebAudioSound._unlocked=false;
	WebAudioSound.tInfo=null;
	WebAudioSound.__loadingSound={};
	__static(WebAudioSound,
	['window',function(){return this.window=Browser.window;},'webAudioEnabled',function(){return this.webAudioEnabled=WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"];},'ctx',function(){return this.ctx=WebAudioSound.webAudioEnabled ? new (WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"])():undefined;},'_miniBuffer',function(){return this._miniBuffer=WebAudioSound.ctx.createBuffer(1,1,22050);},'e',function(){return this.e=new EventDispatcher();}
	]);
	return WebAudioSound;
})(EventDispatcher)


/**
*<p> <code>HttpRequest</code> 通过封装 HTML <code>XMLHttpRequest</code> 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。 <code>HttpRequest</code> 只提供以异步的形式返回 Web 服务器的响应，并且能够以文本或者二进制的形式返回内容。</p>
*<p><b>注意：</b>建议每次请求都使用新的 <code>HttpRequest</code> 对象，因为每次调用该对象的send方法时，都会清空之前设置的数据，并重置 HTTP 请求的状态，这会导致之前还未返回响应的请求被重置，从而得不到之前请求的响应结果。</p>
*/
//class laya.net.HttpRequest extends laya.events.EventDispatcher
var HttpRequest=(function(_super){
	function HttpRequest(){
		/**@private */
		this._responseType=null;
		/**@private */
		this._data=null;
		HttpRequest.__super.call(this);
		this._http=new Browser.window.XMLHttpRequest();
	}

	__class(HttpRequest,'laya.net.HttpRequest',_super);
	var __proto=HttpRequest.prototype;
	/**
	*发送 HTTP 请求。
	*@param url 请求的地址。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。
	*@param data (default=null)发送的数据。
	*@param method (default="get")用于请求的 HTTP 方法。值包括 "get"、"post"、"head"。
	*@param responseType (default="text")Web 服务器的响应类型，可设置为 "text"、"json"、"xml"、"arraybuffer"。
	*@param headers (default=null)HTTP 请求的头部信息。参数形如key-value数组：key是头部的名称，不应该包括空白、冒号或换行；value是头部的值，不应该包括换行。比如["Content-Type","application/json"]。
	*/
	__proto.send=function(url,data,method,responseType,headers){
		(method===void 0)&& (method="get");
		(responseType===void 0)&& (responseType="text");
		this._responseType=responseType;
		this._data=null;
		var _this=this;
		var http=this._http;
		http.open(method,url,true);
		if (headers){
			for (var i=0;i < headers.length;i++){
				http.setRequestHeader(headers[i++],headers[i]);
			}
			}else if (!Render.isConchApp){
			if (!data || (typeof data=='string'))http.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
			else http.setRequestHeader("Content-Type","application/json");
		}
		http.responseType=responseType!=="arraybuffer" ? "text" :"arraybuffer";
		http.onerror=function (e){
			_this._onError(e);
		}
		http.onabort=function (e){
			_this._onAbort(e);
		}
		http.onprogress=function (e){
			_this._onProgress(e);
		}
		http.onload=function (e){
			_this._onLoad(e);
		}
		http.send(data);
	}

	/**
	*@private
	*请求进度的侦听处理函数。
	*@param e 事件对象。
	*/
	__proto._onProgress=function(e){
		if (e && e.lengthComputable)this.event(/*laya.events.Event.PROGRESS*/"progress",e.loaded / e.total);
	}

	/**
	*@private
	*请求中断的侦听处理函数。
	*@param e 事件对象。
	*/
	__proto._onAbort=function(e){
		this.error("Request was aborted by user");
	}

	/**
	*@private
	*请求出错侦的听处理函数。
	*@param e 事件对象。
	*/
	__proto._onError=function(e){
		this.error("Request failed Status:"+this._http.status+" text:"+this._http.statusText);
	}

	/**
	*@private
	*请求消息返回的侦听处理函数。
	*@param e 事件对象。
	*/
	__proto._onLoad=function(e){
		var http=this._http;
		var status=http.status!==undefined ? http.status :200;
		if (status===200 || status===204 || status===0){
			this.complete();
			}else {
			this.error("["+http.status+"]"+http.statusText+":"+http.responseURL);
		}
	}

	/**
	*@private
	*请求错误的处理函数。
	*@param message 错误信息。
	*/
	__proto.error=function(message){
		this.clear();
		this.event(/*laya.events.Event.ERROR*/"error",message);
	}

	/**
	*@private
	*请求成功完成的处理函数。
	*/
	__proto.complete=function(){
		this.clear();
		var flag=true;
		try {
			if (this._responseType==="json"){
				this._data=JSON.parse(this._http.responseText);
				}else if (this._responseType==="xml"){
				this._data=Utils.parseXMLFromString(this._http.responseText);
				}else {
				this._data=this._http.response || this._http.responseText;
			}
			}catch (e){
			flag=false;
			this.error(e.message);
		}
		flag && this.event(/*laya.events.Event.COMPLETE*/"complete",(this._data instanceof Array)? [this._data] :this._data);
	}

	/**
	*@private
	*清除当前请求。
	*/
	__proto.clear=function(){
		var http=this._http;
		http.onerror=http.onabort=http.onprogress=http.onload=null;
	}

	/**请求的地址。*/
	__getset(0,__proto,'url',function(){
		return this._http.responseURL;
	});

	/**
	*本对象所封装的原生 XMLHttpRequest 引用。
	*/
	__getset(0,__proto,'http',function(){
		return this._http;
	});

	/**返回的数据。*/
	__getset(0,__proto,'data',function(){
		return this._data;
	});

	return HttpRequest;
})(EventDispatcher)


/**
*<code>Loader</code> 类可用来加载文本、JSON、XML、二进制、图像等资源。
*/
//class laya.net.Loader extends laya.events.EventDispatcher
var Loader=(function(_super){
	function Loader(){
		/**@private 加载后的数据对象，只读*/
		this._data=null;
		/**@private */
		this._class=null;
		/**@private */
		this._url=null;
		/**@private */
		this._type=null;
		/**@private */
		this._cache=false;
		/**@private */
		this._http=null;
		/**@private 自定义解析不派发complete事件，但会派发loaded事件，手动调用endLoad方法再派发complete事件*/
		this._customParse=false;
		Loader.__super.call(this);
	}

	__class(Loader,'laya.net.Loader',_super);
	var __proto=Loader.prototype;
	/**
	*加载资源。加载错误会派发 Event.ERROR 事件，参数为错误信息。
	*@param url 资源地址。
	*@param type (default=null)资源类型。可选值为：Loader.TEXT、Loader.JSON、Loader.XML、Loader.BUFFER、Loader.IMAGE、Loader.SOUND、Loader.ATLAS、Loader.FONT。如果为null，则根据文件后缀分析类型。
	*@param cache (default=true)是否缓存数据。
	*@param group (default=null)分组名称。
	*@param ignoreCache (default=false)是否忽略缓存，强制重新加载。
	*/
	__proto.load=function(url,type,cache,group,ignoreCache){
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		this._url=url;
		if (url.indexOf("data:image")===0)this._type=type="image";
		else {
			this._type=type || (type=this.getTypeFromUrl(url));
			url=URL.formatURL(url);
		}
		this._cache=cache;
		this._data=null;
		if (!ignoreCache && Loader.loadedMap[url]){
			this._data=Loader.loadedMap[url];
			this.event(/*laya.events.Event.PROGRESS*/"progress",1);
			this.event(/*laya.events.Event.COMPLETE*/"complete",this._data);
			return;
		}
		if (group)Loader.setGroup(url,group);
		if (Loader.parserMap[type] !=null){
			this._customParse=true;
			if (((Loader.parserMap[type])instanceof laya.utils.Handler ))Loader.parserMap[type].runWith(this);
			else Loader.parserMap[type].call(null,this);
			return;
		}
		if (type==="image" || type==="htmlimage" || type==="nativeimage")return this._loadImage(url);
		if (type==="sound")return this._loadSound(url);
		if (type==="ttf")return this._loadTTF(url);
		var contentType;
		switch (type){
			case "atlas":
			case "plf":
				contentType="json";
				break ;
			case "font":
				contentType="xml";
				break ;
			case "pkm":
				contentType="arraybuffer";
				break
			default :
				contentType=type;
			}
		if (Loader.preLoadedMap[url]){
			this.onLoaded(Loader.preLoadedMap[url]);
			}else{
			if (!this._http){
				this._http=new HttpRequest();
				this._http.on(/*laya.events.Event.PROGRESS*/"progress",this,this.onProgress);
				this._http.on(/*laya.events.Event.ERROR*/"error",this,this.onError);
				this._http.on(/*laya.events.Event.COMPLETE*/"complete",this,this.onLoaded);
			}
			this._http.send(url,null,"get",contentType);
		}
	}

	/**
	*获取指定资源地址的数据类型。
	*@param url 资源地址。
	*@return 数据类型。
	*/
	__proto.getTypeFromUrl=function(url){
		var type=Utils.getFileExtension(url);
		if (type)return Loader.typeMap[type];
		console.warn("Not recognize the resources suffix",url);
		return "text";
	}

	/**
	*@private
	*加载TTF资源。
	*@param url 资源地址。
	*/
	__proto._loadTTF=function(url){
		url=URL.formatURL(url);
		var ttfLoader=new TTFLoader();
		ttfLoader.complete=Handler.create(this,this.onLoaded);
		ttfLoader.load(url);
	}

	/**
	*@private
	*加载图片资源。
	*@param url 资源地址。
	*/
	__proto._loadImage=function(url){
		url=URL.formatURL(url);
		var _this=this;
		var image;
		function clear (){
			image.onload=null;
			image.onerror=null;
			delete Loader.imgCache[url]
		};
		var onload=function (){
			clear();
			_this.onLoaded(image);
		};
		var onerror=function (){
			clear();
			_this.event(/*laya.events.Event.ERROR*/"error","Load image failed");
		}
		if (this._type==="nativeimage"){
			image=new Browser.window.Image();
			image.crossOrigin="";
			image.onload=onload;
			image.onerror=onerror;
			image.src=url;
			Loader.imgCache[url]=image;
			}else {
			new HTMLImage.create(url,{onload:onload,onerror:onerror,onCreate:function (img){
					image=img;
					Loader.imgCache[url]=img;
			}});
		}
	}

	/**
	*@private
	*加载声音资源。
	*@param url 资源地址。
	*/
	__proto._loadSound=function(url){
		var sound=(new SoundManager._soundClass());
		var _this=this;
		sound.on(/*laya.events.Event.COMPLETE*/"complete",this,soundOnload);
		sound.on(/*laya.events.Event.ERROR*/"error",this,soundOnErr);
		sound.load(url);
		function soundOnload (){
			clear();
			_this.onLoaded(sound);
		}
		function soundOnErr (){
			clear();
			sound.dispose();
			_this.event(/*laya.events.Event.ERROR*/"error","Load sound failed");
		}
		function clear (){
			sound.offAll();
		}
	}

	/**@private */
	__proto.onProgress=function(value){
		if (this._type==="atlas")this.event(/*laya.events.Event.PROGRESS*/"progress",value *0.3);
		else this.event(/*laya.events.Event.PROGRESS*/"progress",value);
	}

	/**@private */
	__proto.onError=function(message){
		this.event(/*laya.events.Event.ERROR*/"error",message);
	}

	/**
	*资源加载完成的处理函数。
	*@param data 数据。
	*/
	__proto.onLoaded=function(data){
		var type=this._type;
		if (type=="plf"){
			this.parsePLFData(data);
			this.complete(data);
		}else
		if (type==="image"){
			var tex=new Texture(data);
			tex.url=this._url;
			this.complete(tex);
			}else if (type==="sound" || type==="htmlimage" || type==="nativeimage"){
			this.complete(data);
			}else if (type==="atlas"){
			if (!data.src && !data._setContext){
				if (!this._data){
					this._data=data;
					if (data.meta && data.meta.image){
						var toloadPics=data.meta.image.split(",");
						var split=this._url.indexOf("/")>=0 ? "/" :"\\";
						var idx=this._url.lastIndexOf(split);
						var folderPath=idx >=0 ? this._url.substr(0,idx+1):"";
						for (var i=0,len=toloadPics.length;i < len;i++){
							toloadPics[i]=folderPath+toloadPics[i];
						}
						}else {
						toloadPics=[this._url.replace(".json",".png")];
					}
					toloadPics.reverse();
					data.toLoads=toloadPics;
					data.pics=[];
				}
				this.event(/*laya.events.Event.PROGRESS*/"progress",0.3+1 / toloadPics.length *0.6);
				return this._loadImage(toloadPics.pop());
				}else {
				this._data.pics.push(data);
				if (this._data.toLoads.length > 0){
					this.event(/*laya.events.Event.PROGRESS*/"progress",0.3+1 / this._data.toLoads.length *0.6);
					return this._loadImage(this._data.toLoads.pop());
				};
				var frames=this._data.frames;
				var cleanUrl=this._url.split("?")[0];
				var directory=(this._data.meta && this._data.meta.prefix)? this._data.meta.prefix :cleanUrl.substring(0,cleanUrl.lastIndexOf("."))+"/";
				var pics=this._data.pics;
				var atlasURL=URL.formatURL(this._url);
				var map=Loader.atlasMap[atlasURL] || (Loader.atlasMap[atlasURL]=[]);
				map.dir=directory;
				var scaleRate=1;
				if (this._data.meta && this._data.meta.scale && this._data.meta.scale !=1){
					scaleRate=parseFloat(this._data.meta.scale);
					for (var name in frames){
						var obj=frames[name];
						var tPic=pics[obj.frame.idx ? obj.frame.idx :0];
						var url=URL.formatURL(directory+name);
						tPic.scaleRate=scaleRate;
						var tTexture;
						tTexture=Texture.create(tPic,obj.frame.x,obj.frame.y,obj.frame.w,obj.frame.h,obj.spriteSourceSize.x,obj.spriteSourceSize.y,obj.sourceSize.w,obj.sourceSize.h);
						Loader.cacheRes(url,tTexture);
						tTexture.url=url;
						map.push(url);
					}
					}else{
					for (name in frames){
						obj=frames[name];
						tPic=pics[obj.frame.idx ? obj.frame.idx :0];
						url=URL.formatURL(directory+name);
						Loader.cacheRes(url,Texture.create(tPic,obj.frame.x,obj.frame.y,obj.frame.w,obj.frame.h,obj.spriteSourceSize.x,obj.spriteSourceSize.y,obj.sourceSize.w,obj.sourceSize.h));
						Loader.loadedMap[url].url=url;
						map.push(url);
					}
				}
				delete this._data.pics;
				this.complete(this._data);
			}
			}else if (type=="font"){
			if (!data.src){
				this._data=data;
				this.event(/*laya.events.Event.PROGRESS*/"progress",0.5);
				return this._loadImage(this._url.replace(".fnt",".png"));
				}else {
				var bFont=new BitmapFont();
				bFont.parseFont(this._data,data);
				var tArr=this._url.split(".fnt")[0].split("/");
				var fontName=tArr[tArr.length-1];
				Text.registerBitmapFont(fontName,bFont);
				this._data=bFont;
				this.complete(this._data);
			}
			}else if (type=="pkm"){
			var image=HTMLImage.create(data,this._url);
			var tex1=new Texture(image);
			tex1.url=this._url;
			this.complete(tex1);
			}else {
			this.complete(data);
		}
	}

	__proto.parsePLFData=function(plfData){
		var type;
		var filePath;
		var fileDic;
		for (type in plfData){
			fileDic=plfData[type];
			switch(type){
				case "json":
				case "text":
					for (filePath in fileDic){
						Loader.preLoadedMap[URL.formatURL(filePath)]=fileDic[filePath]
					}
					break ;
				default :
					for (filePath in fileDic){
						Loader.preLoadedMap[URL.formatURL(filePath)]=fileDic[filePath]
					}
				}
		}
	}

	/**
	*加载完成。
	*@param data 加载的数据。
	*/
	__proto.complete=function(data){
		this._data=data;
		if (this._customParse){
			this.event(/*laya.events.Event.LOADED*/"loaded",(data instanceof Array)? [data] :data);
			}else {
			Loader._loaders.push(this);
			if (!Loader._isWorking)Loader.checkNext();
		}
	}

	/**
	*结束加载，处理是否缓存及派发完成事件 <code>Event.COMPLETE</code> 。
	*@param content 加载后的数据
	*/
	__proto.endLoad=function(content){
		content && (this._data=content);
		if (this._cache)Loader.cacheRes(this._url,this._data);
		this.event(/*laya.events.Event.PROGRESS*/"progress",1);
		this.event(/*laya.events.Event.COMPLETE*/"complete",(this.data instanceof Array)? [this.data] :this.data);
	}

	/**加载地址。*/
	__getset(0,__proto,'url',function(){
		return this._url;
	});

	/**返回的数据。*/
	__getset(0,__proto,'data',function(){
		return this._data;
	});

	/**是否缓存。*/
	__getset(0,__proto,'cache',function(){
		return this._cache;
	});

	/**加载类型。*/
	__getset(0,__proto,'type',function(){
		return this._type;
	});

	Loader.checkNext=function(){
		Loader._isWorking=true;
		var startTimer=Browser.now();
		var thisTimer=startTimer;
		while (Loader._startIndex < Loader._loaders.length){
			thisTimer=Browser.now();
			Loader._loaders[Loader._startIndex].endLoad();
			Loader._startIndex++;
			if (Browser.now()-startTimer > Loader.maxTimeOut){
				console.warn("loader callback cost a long time:"+(Browser.now()-startTimer)+" url="+Loader._loaders[Loader._startIndex-1].url);
				Laya.timer.frameOnce(1,null,Loader.checkNext);
				return;
			}
		}
		Loader._loaders.length=0;
		Loader._startIndex=0;
		Loader._isWorking=false;
	}

	Loader.clearRes=function(url,forceDispose){
		(forceDispose===void 0)&& (forceDispose=false);
		url=URL.formatURL(url);
		var arr=Loader.getAtlas(url);
		if (arr){
			for (var i=0,n=arr.length;i < n;i++){
				var resUrl=arr[i];
				var tex=Loader.getRes(resUrl);
				delete Loader.loadedMap[resUrl];
				if (tex)tex.destroy(forceDispose);
			}
			arr.length=0;
			delete Loader.atlasMap[url];
			delete Loader.loadedMap[url];
			}else {
			var res=Loader.loadedMap[url];
			if (res){
				delete Loader.loadedMap[url];
				if ((res instanceof laya.resource.Texture )&& res.bitmap)(res).destroy(forceDispose);
			}
		}
	}

	Loader.clearTextureRes=function(url){
		url=URL.formatURL(url);
		var arr=laya.net.Loader.getAtlas(url);
		var res=(arr && arr.length>0)? laya.net.Loader.getRes(arr[0]):laya.net.Loader.getRes(url);
		if (res && res.bitmap){
			if (Render.isConchApp && !Render.isConchWebGL){
				if (res.bitmap.source.releaseTexture){
					res.bitmap.source.releaseTexture();
				}
				}else if (res.bitmap._atlaser==null){
				res.bitmap.releaseResource(true);
			}
		}
	}

	Loader.getRes=function(url){
		return Loader.loadedMap[URL.formatURL(url)];
	}

	Loader.getAtlas=function(url){
		return Loader.atlasMap[URL.formatURL(url)];
	}

	Loader.cacheRes=function(url,data){
		url=URL.formatURL(url);
		if (Loader.loadedMap[url] !=null){
			console.warn("Resources already exist,is repeated loading:",url);
			}else {
			Loader.loadedMap[url]=data;
		}
	}

	Loader.setGroup=function(url,group){
		if (!Loader.groupMap[group])Loader.groupMap[group]=[];
		Loader.groupMap[group].push(url);
	}

	Loader.clearResByGroup=function(group){
		if (!Loader.groupMap[group])return;
		var arr=Loader.groupMap[group],i=0,len=arr.length;
		for (i=0;i < len;i++){
			Loader.clearRes(arr[i]);
		}
		arr.length=0;
	}

	Loader.TEXT="text";
	Loader.JSON="json";
	Loader.XML="xml";
	Loader.BUFFER="arraybuffer";
	Loader.IMAGE="image";
	Loader.SOUND="sound";
	Loader.ATLAS="atlas";
	Loader.FONT="font";
	Loader.TTF="ttf";
	Loader.PLF="plf";
	Loader.PKM="pkm";
	Loader.typeMap={"png":"image","jpg":"image","jpeg":"image","txt":"text","json":"json","xml":"xml","als":"atlas","atlas":"atlas","mp3":"sound","ogg":"sound","wav":"sound","part":"json","fnt":"font","pkm":"pkm","ttf":"ttf","plf":"plf"};
	Loader.parserMap={};
	Loader.groupMap={};
	Loader.maxTimeOut=100;
	Loader.loadedMap={};
	Loader.preLoadedMap={};
	Loader.atlasMap={};
	Loader._loaders=[];
	Loader._isWorking=false;
	Loader._startIndex=0;
	Loader.imgCache={};
	return Loader;
})(EventDispatcher)


/**
*<p> <code>LoaderManager</code> 类用于用于批量加载资源。此类是单例，不要手动实例化此类，请通过Laya.loader访问。</p>
*<p>全部队列加载完成，会派发 Event.COMPLETE 事件；如果队列中任意一个加载失败，会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
*<p> <code>LoaderManager</code> 类提供了以下几种功能：<br/>
*多线程：默认5个加载线程，可以通过maxLoader属性修改线程数量；<br/>
*多优先级：有0-4共5个优先级，优先级高的优先加载。0最高，4最低；<br/>
*重复过滤：自动过滤重复加载（不会有多个相同地址的资源同时加载）以及复用缓存资源，防止重复加载；<br/>
*错误重试：资源加载失败后，会重试加载（以最低优先级插入加载队列），retryNum设定加载失败后重试次数，retryDelay设定加载重试的时间间隔。</p>
*@see laya.net.Loader
*/
//class laya.net.LoaderManager extends laya.events.EventDispatcher
var LoaderManager=(function(_super){
	var ResInfo;
	function LoaderManager(){
		/**加载出错后的重试次数，默认重试一次*/
		this.retryNum=1;
		/**延迟时间多久再进行错误重试，默认立即重试*/
		this.retryDelay=0;
		/**最大下载线程，默认为5个*/
		this.maxLoader=5;
		/**@private */
		this._loaders=[];
		/**@private */
		this._loaderCount=0;
		/**@private */
		this._resInfos=[];
		/**@private */
		this._infoPool=[];
		/**@private */
		this._maxPriority=5;
		/**@private */
		this._failRes={};
		LoaderManager.__super.call(this);
		for (var i=0;i < this._maxPriority;i++)this._resInfos[i]=[];
	}

	__class(LoaderManager,'laya.net.LoaderManager',_super);
	var __proto=LoaderManager.prototype;
	/**
	*<p>根据clas类型创建一个未初始化资源的对象，随后进行异步加载，资源加载完成后，初始化对象的资源，并通过此对象派发 Event.LOADED 事件，事件回调参数值为此对象本身。套嵌资源的子资源会保留资源路径"?"后的部分。</p>
	*<p>如果url为数组，返回true；否则返回指定的资源类对象，可以通过侦听此对象的 Event.LOADED 事件来判断资源是否已经加载完毕。</p>
	*<p><b>注意：</b>cache参数只能对文件后缀为atlas的资源进行缓存控制，其他资源会忽略缓存，强制重新加载。</p>
	*@param url 资源地址或者数组。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：[{url:xx,clas:xx,priority:xx,params:xx},{url:xx,clas:xx,priority:xx,params:xx}]。
	*@param complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
	*@param progress 资源加载进度回调，回调参数值为当前资源加载的进度信息(0-1)。
	*@param clas 资源类名。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：Texture。
	*@param params 资源构造参数。
	*@param priority (default=1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
	*@param cache 是否缓存加载的资源。
	*@return 如果url为数组，返回true；否则返回指定的资源类对象。
	*/
	__proto.create=function(url,complete,progress,clas,params,priority,cache,group){
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		if ((url instanceof Array)){
			var items=url;
			var itemCount=items.length;
			var loadedCount=0;
			if (progress){
				var progress2=Handler.create(progress.caller,progress.method,progress.args,false);
			}
			for (var i=0;i < itemCount;i++){
				var item=items[i];
				if ((typeof item=='string'))
					item=items[i]={url:item};
				item.progress=0;
			}
			for (i=0;i < itemCount;i++){
				item=items[i];
				var progressHandler=progress ? Handler.create(null,onProgress,[item],false):null;
				var completeHandler=(progress || complete)? Handler.create(null,onComplete,[item]):null;
				this._create(item.url,completeHandler,progressHandler,item.clas || clas,item.params || params,item.priority || priority,cache,item.group || group);
			}
			function onComplete (item,content){
				loadedCount++;
				item.progress=1;
				if (loadedCount===itemCount && complete){
					complete.run();
				}
			}
			function onProgress (item,value){
				item.progress=value;
				var num=0;
				for (var j=0;j < itemCount;j++){
					var item1=items[j];
					num+=item1.progress;
				};
				var v=num / itemCount;
				progress2.runWith(v);
			}
			return true;
		}else return this._create(url,complete,progress,clas,params,priority,cache,group);
	}

	__proto._create=function(url,complete,progress,clas,params,priority,cache,group){
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		var formarUrl=URL.formatURL(url);
		var item=this.getRes(formarUrl);
		if (!item){
			var extension=Utils.getFileExtension(url);
			var creatItem=LoaderManager.createMap[extension];
			if (!creatItem)
				throw new Error("LoaderManager:unknown file("+url+") extension with: "+extension+".");
			if (!clas)clas=creatItem[0];
			var type=creatItem[1];
			if (extension=="atlas"){
				this.load(url,complete,progress,type,priority,cache);
				}else {
				if (clas===Texture)type="htmlimage";
				item=clas ? new clas():null;
				if (item.hasOwnProperty("_loaded"))
					item._loaded=false;
				item._setUrl(url);
				(group)&& (item._setGroup(group));
				this._createLoad(item,url,Handler.create(null,onLoaded),progress,type,priority,false,group,true);
				function onLoaded (data){
					(item && !item.destroyed && data)&& (item.onAsynLoaded.call(item,url,data,params));
					if (complete)complete.run();
					Laya.loader.event(url);
				}
				(cache)&& (this.cacheRes(formarUrl,item));
			}
			}else {
			if (!item.hasOwnProperty("loaded")|| item.loaded){
				progress && progress.runWith(1);
				complete && complete.run();
				}else if (complete){
				Laya.loader._createListener(url,complete.caller,complete.method,complete.args,true,false);
			}
		}
		return item;
	}

	/**
	*<p>加载资源。资源加载错误时，本对象会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
	*<p>因为返回值为 LoaderManager 对象本身，所以可以使用如下语法：Laya.loader.load(...).load(...);</p>
	*@param url 要加载的单个资源地址或资源信息数组。比如：简单数组：["a.png","b.png"]；复杂数组[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]。
	*@param complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
	*@param progress 加载进度回调。回调参数值为当前资源的加载进度信息(0-1)。
	*@param type 资源类型。比如：Loader.IMAGE。
	*@param priority (default=1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
	*@param cache 是否缓存加载结果。
	*@param group 分组，方便对资源进行管理。
	*@param ignoreCache 是否忽略缓存，强制重新加载。
	*@return 此 LoaderManager 对象本身。
	*/
	__proto.load=function(url,complete,progress,type,priority,cache,group,ignoreCache){
		var _$this=this;
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		if ((url instanceof Array))return this._loadAssets(url,complete,progress,type,priority,cache,group);
		var content=Loader.getRes(url);
		if (content !=null){
			Laya.timer.frameOnce(1,null,function(){
				progress && progress.runWith(1);
				complete && complete.runWith(content);
				_$this._loaderCount || _$this.event(/*laya.events.Event.COMPLETE*/"complete");
			});
			}else {
			var info=LoaderManager._resMap[url];
			if (!info){
				info=this._infoPool.length ? this._infoPool.pop():new ResInfo();
				info.url=url;
				info.type=type;
				info.cache=cache;
				info.group=group;
				info.ignoreCache=ignoreCache;
				complete && info.on(/*laya.events.Event.COMPLETE*/"complete",complete.caller,complete.method,complete.args);
				progress && info.on(/*laya.events.Event.PROGRESS*/"progress",progress.caller,progress.method,progress.args);
				LoaderManager._resMap[url]=info;
				priority=priority < this._maxPriority ? priority :this._maxPriority-1;
				this._resInfos[priority].push(info);
				this._next();
				}else {
				complete && info._createListener(/*laya.events.Event.COMPLETE*/"complete",complete.caller,complete.method,complete.args,false,false);
				progress && info._createListener(/*laya.events.Event.PROGRESS*/"progress",progress.caller,progress.method,progress.args,false,false);
			}
		}
		return this;
	}

	/**
	*@private
	*/
	__proto._createLoad=function(item,url,complete,progress,type,priority,cache,group,ignoreCache){
		var _$this=this;
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		if ((url instanceof Array))return this._loadAssets(url,complete,progress,type,priority,cache,group);
		var content=Loader.getRes(url);
		if (content !=null){
			Laya.timer.frameOnce(1,null,function(){
				progress && progress.runWith(1);
				complete && complete.runWith(content);
				_$this._loaderCount || _$this.event(/*laya.events.Event.COMPLETE*/"complete");
			});
			}else {
			var info=LoaderManager._resMap[url];
			if (!info){
				info=this._infoPool.length ? this._infoPool.pop():new ResInfo();
				info.url=url;
				info.clas=item;
				info.type=type;
				info.cache=cache;
				info.group=group;
				info.ignoreCache=ignoreCache;
				complete && info.on(/*laya.events.Event.COMPLETE*/"complete",complete.caller,complete.method,complete.args);
				progress && info.on(/*laya.events.Event.PROGRESS*/"progress",progress.caller,progress.method,progress.args);
				LoaderManager._resMap[url]=info;
				priority=priority < this._maxPriority ? priority :this._maxPriority-1;
				this._resInfos[priority].push(info);
				this._next();
				}else {
				complete && info._createListener(/*laya.events.Event.COMPLETE*/"complete",complete.caller,complete.method,complete.args,false,false);
				progress && info._createListener(/*laya.events.Event.PROGRESS*/"progress",progress.caller,progress.method,progress.args,false,false);
			}
		}
		return this;
	}

	__proto._next=function(){
		if (this._loaderCount >=this.maxLoader)return;
		for (var i=0;i < this._maxPriority;i++){
			var infos=this._resInfos[i];
			while (infos.length > 0){
				var info=infos.shift();
				if (info)return this._doLoad(info);
			}
		}
		this._loaderCount || this.event(/*laya.events.Event.COMPLETE*/"complete");
	}

	__proto._doLoad=function(resInfo){
		this._loaderCount++;
		var loader=this._loaders.length ? this._loaders.pop():new Loader();
		loader.on(/*laya.events.Event.COMPLETE*/"complete",null,onLoaded);
		loader.on(/*laya.events.Event.PROGRESS*/"progress",null,function(num){
			resInfo.event(/*laya.events.Event.PROGRESS*/"progress",num);
		});
		loader.on(/*laya.events.Event.ERROR*/"error",null,function(msg){
			onLoaded(null);
		});
		var _this=this;
		function onLoaded (data){
			loader.offAll();
			loader._data=null;
			loader._customParse=false;
			_this._loaders.push(loader);
			_this._endLoad(resInfo,(data instanceof Array)? [data] :data);
			_this._loaderCount--;
			_this._next();
		}
		loader._class=resInfo.clas;
		loader.load(resInfo.url,resInfo.type,resInfo.cache,resInfo.group,resInfo.ignoreCache);
	}

	__proto._endLoad=function(resInfo,content){
		var url=resInfo.url;
		if (content==null){
			var errorCount=this._failRes[url] || 0;
			if (errorCount < this.retryNum){
				console.warn("[warn]Retry to load:",url);
				this._failRes[url]=errorCount+1;
				Laya.timer.once(this.retryDelay,this,this._addReTry,[resInfo],false);
				return;
				}else {
				console.warn("[error]Failed to load:",url);
				this.event(/*laya.events.Event.ERROR*/"error",url);
			}
		}
		if (this._failRes[url])this._failRes[url]=0;
		delete LoaderManager._resMap[url];
		resInfo.event(/*laya.events.Event.COMPLETE*/"complete",content);
		resInfo.offAll();
		this._infoPool.push(resInfo);
	}

	__proto._addReTry=function(resInfo){
		this._resInfos[this._maxPriority-1].push(resInfo);
		this._next();
	}

	/**
	*清理指定资源地址缓存。
	*@param url 资源地址。
	*@param forceDispose 是否强制销毁，有些资源是采用引用计数方式销毁，如果forceDispose=true，则忽略引用计数，直接销毁，比如Texture，默认为false
	*/
	__proto.clearRes=function(url,forceDispose){
		(forceDispose===void 0)&& (forceDispose=false);
		Loader.clearRes(url,forceDispose);
	}

	/**
	*获取指定资源地址的资源。
	*@param url 资源地址。
	*@return 返回资源。
	*/
	__proto.getRes=function(url){
		return Loader.getRes(url);
	}

	/**
	*缓存资源。
	*@param url 资源地址。
	*@param data 要缓存的内容。
	*/
	__proto.cacheRes=function(url,data){
		Loader.cacheRes(url,data);
	}

	/**
	*销毁Texture使用的图片资源，保留texture壳，如果下次渲染的时候，发现texture使用的图片资源不存在，则会自动恢复
	*相比clearRes，clearTextureRes只是清理texture里面使用的图片资源，并不销毁texture，再次使用到的时候会自动恢复图片资源
	*而clearRes会彻底销毁texture，导致不能再使用；clearTextureRes能确保立即销毁图片资源，并且不用担心销毁错误，clearRes则采用引用计数方式销毁
	*【注意】如果图片本身在自动合集里面（默认图片小于512*512），内存是不能被销毁的，此图片被大图合集管理器管理
	*@param url 图集地址或者texture地址，比如 Loader.clearTextureRes("res/atlas/comp.atlas");Loader.clearTextureRes("hall/bg.jpg");
	*/
	__proto.clearTextureRes=function(url){
		Loader.clearTextureRes(url);
	}

	/**
	*设置资源分组。
	*@param url 资源地址。
	*@param group 分组名
	*/
	__proto.setGroup=function(url,group){
		Loader.setGroup(url,group);
	}

	/**
	*根据分组清理资源。
	*@param group 分组名
	*/
	__proto.clearResByGroup=function(group){
		Loader.clearResByGroup(group);
	}

	/**清理当前未完成的加载，所有未加载的内容全部停止加载。*/
	__proto.clearUnLoaded=function(){
		for (var i=0;i < this._maxPriority;i++){
			var infos=this._resInfos[i];
			for (var j=infos.length-1;j >-1;j--){
				var info=infos[j];
				if (info){
					info.offAll();
					this._infoPool.push(info);
				}
			}
			infos.length=0;
		}
		this._loaderCount=0;
		LoaderManager._resMap={};
	}

	/**
	*根据地址集合清理掉未加载的内容
	*@param urls 资源地址集合
	*/
	__proto.cancelLoadByUrls=function(urls){
		if (!urls)return;
		for (var i=0,n=urls.length;i < n;i++){
			this.cancelLoadByUrl(urls[i]);
		}
	}

	/**
	*根据地址清理掉未加载的内容
	*@param url 资源地址
	*/
	__proto.cancelLoadByUrl=function(url){
		for (var i=0;i < this._maxPriority;i++){
			var infos=this._resInfos[i];
			for (var j=infos.length-1;j >-1;j--){
				var info=infos[j];
				if (info && info.url===url){
					infos[j]=null;
					info.offAll();
					this._infoPool.push(info);
				}
			}
		}
		if (LoaderManager._resMap[url])delete LoaderManager._resMap[url];
	}

	/**
	*@private
	*加载数组里面的资源。
	*@param arr 简单：["a.png","b.png"]，复杂[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]*/
	__proto._loadAssets=function(arr,complete,progress,type,priority,cache,group){
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		var itemCount=arr.length;
		var loadedCount=0;
		var totalSize=0;
		var items=[];
		var success=true;
		for (var i=0;i < itemCount;i++){
			var item=arr[i];
			if ((typeof item=='string'))item={url:item,type:type,size:1,priority:priority};
			if (!item.size)item.size=1;
			item.progress=0;
			totalSize+=item.size;
			items.push(item);
			var progressHandler=progress ? Handler.create(null,loadProgress,[item],false):null;
			var completeHandler=(complete || progress)? Handler.create(null,loadComplete,[item]):null;
			this.load(item.url,completeHandler,progressHandler,item.type,item.priority || 1,cache,item.group || group);
		}
		function loadComplete (item,content){
			loadedCount++;
			item.progress=1;
			if (!content)success=false;
			if (loadedCount===itemCount && complete){
				complete.runWith(success);
			}
		}
		function loadProgress (item,value){
			if (progress !=null){
				item.progress=value;
				var num=0;
				for (var j=0;j < items.length;j++){
					var item1=items[j];
					num+=item1.size *item1.progress;
				};
				var v=num / totalSize;
				progress.runWith(v);
			}
		}
		return this;
	}

	LoaderManager.cacheRes=function(url,data){
		Loader.cacheRes(url,data);
	}

	LoaderManager._resMap={};
	__static(LoaderManager,
	['createMap',function(){return this.createMap={atlas:[null,/*laya.net.Loader.ATLAS*/"atlas"]};}
	]);
	LoaderManager.__init$=function(){
		//class ResInfo extends laya.events.EventDispatcher
		ResInfo=(function(_super){
			function ResInfo(){
				this.url=null;
				this.type=null;
				this.cache=false;
				this.group=null;
				this.ignoreCache=false;
				this.clas=null;
				ResInfo.__super.call(this);
			}
			__class(ResInfo,'',_super);
			return ResInfo;
		})(EventDispatcher)
	}

	return LoaderManager;
})(EventDispatcher)


/**
*<p><code>ColorFilter</code> 是颜色滤镜。使用 ColorFilter 类可以将 4 x 5 矩阵转换应用于输入图像上的每个像素的 RGBA 颜色和 Alpha 值，以生成具有一组新的 RGBA 颜色和 Alpha 值的结果。该类允许饱和度更改、色相旋转、亮度转 Alpha 以及各种其他效果。您可以将滤镜应用于任何显示对象（即，从 Sprite 类继承的对象）。</p>
*<p>注意：对于 RGBA 值，最高有效字节代表红色通道值，其后的有效字节分别代表绿色、蓝色和 Alpha 通道值。</p>
*/
//class laya.filters.ColorFilter extends laya.filters.Filter
var ColorFilter=(function(_super){
	function ColorFilter(mat){
		/**@private */
		//this._mat=null;
		/**@private */
		//this._alpha=null;
		ColorFilter.__super.call(this);
		if (!mat){
			mat=[0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0,0,0,1,0];
		}
		this._mat=new Float32Array(16);
		this._alpha=new Float32Array(4);
		var j=0;
		var z=0;
		for (var i=0;i < 20;i++){
			if (i % 5 !=4){
				this._mat[j++]=mat[i];
				}else {
				this._alpha[z++]=mat[i];
			}
		}
		this._action=RunDriver.createFilterAction(0x20);
		this._action.data=this;
	}

	__class(ColorFilter,'laya.filters.ColorFilter',_super);
	var __proto=ColorFilter.prototype;
	Laya.imps(__proto,{"laya.filters.IFilter":true})
	/**
	*@private 通知微端
	*/
	__proto.callNative=function(sp){
		var t=sp._$P.cf=this;
		sp.conchModel && sp.conchModel.setFilterMatrix && sp.conchModel.setFilterMatrix(this._mat,this._alpha);
	}

	/**@private */
	__getset(0,__proto,'type',function(){
		return 0x20;
	});

	/**@private */
	__getset(0,__proto,'action',function(){
		return this._action;
	});

	return ColorFilter;
})(Filter)


/**
*<p> <code>Socket</code> 封装了 HTML5 WebSocket ，允许服务器端与客户端进行全双工（full-duplex）的实时通信，并且允许跨域通信。在建立连接后，服务器和 Browser/Client Agent 都能主动的向对方发送或接收文本和二进制数据。</p>
*<p>要使用 <code>Socket</code> 类的方法，请先使用构造函数 <code>new Socket</code> 创建一个 <code>Socket</code> 对象。 <code>Socket</code> 以异步方式传输和接收数据。</p>
*/
//class laya.net.Socket extends laya.events.EventDispatcher
var Socket=(function(_super){
	function Socket(host,port,byteClass){
		/**@private */
		this._endian=null;
		/**@private */
		this._stamp=NaN;
		/**@private */
		this._socket=null;
		/**@private */
		this._connected=false;
		/**@private */
		this._addInputPosition=0;
		/**@private */
		this._input=null;
		/**@private */
		this._output=null;
		/**
		*@private
		*表示建立连接时需等待的毫秒数。
		*/
		this.timeout=0;
		/**
		*@private
		*在写入或读取对象时，控制所使用的 AMF 的版本。
		*/
		this.objectEncoding=0;
		/**
		*不再缓存服务端发来的数据。
		*/
		this.disableInput=false;
		/**
		*用来发送和接收数据的 <code>Byte</code> 类。
		*/
		this._byteClass=null;
		/**
		*<p>子协议名称。子协议名称字符串，或由多个子协议名称字符串构成的数组。必须在调用 connect 或者 connectByUrl 之前进行赋值，否则无效。</p>
		*<p>指定后，只有当服务器选择了其中的某个子协议，连接才能建立成功，否则建立失败，派发 Event.ERROR 事件。</p>
		*@see https://html.spec.whatwg.org/multipage/comms.html#dom-websocket
		*/
		this.protocols=[];
		(port===void 0)&& (port=0);
		Socket.__super.call(this);
		this._byteClass=byteClass ? byteClass :Byte;
		this.endian="bigEndian";
		this.timeout=20000;
		this._addInputPosition=0;
		if (host && port > 0 && port < 65535)
			this.connect(host,port);
	}

	__class(Socket,'laya.net.Socket',_super);
	var __proto=Socket.prototype;
	/**
	*<p>连接到指定的主机和端口。</p>
	*<p>连接成功派发 Event.OPEN 事件；连接失败派发 Event.ERROR 事件；连接被关闭派发 Event.CLOSE 事件；接收到数据派发 Event.MESSAGE 事件； 除了 Event.MESSAGE 事件参数为数据内容，其他事件参数都是原生的 HTML DOM Event 对象。</p>
	*@param host 服务器地址。
	*@param port 服务器端口。
	*/
	__proto.connect=function(host,port){
		var url="ws://"+host+":"+port;
		if (Browser.window.location.protocol=="https:"){
			url="wss://"+host+":"+port;
			}else {
			url="ws://"+host+":"+port;
		}
		this.connectByUrl(url);
	}

	/**
	*<p>连接到指定的服务端 WebSocket URL。 URL 类似 ws://yourdomain:port。</p>
	*<p>连接成功派发 Event.OPEN 事件；连接失败派发 Event.ERROR 事件；连接被关闭派发 Event.CLOSE 事件；接收到数据派发 Event.MESSAGE 事件； 除了 Event.MESSAGE 事件参数为数据内容，其他事件参数都是原生的 HTML DOM Event 对象。</p>
	*@param url 要连接的服务端 WebSocket URL。 URL 类似 ws://yourdomain:port。
	*/
	__proto.connectByUrl=function(url){
		var _$this=this;
		if (this._socket !=null)
			this.close();
		this._socket && this.cleanSocket();
		if (!this.protocols || this.protocols.length==0){
			this._socket=new Browser.window.WebSocket(url);
			}else {
			this._socket=new Browser.window.WebSocket(url,this.protocols);
		}
		this._socket.binaryType="arraybuffer";
		this._output=new this._byteClass();
		this._output.endian=this.endian;
		this._input=new this._byteClass();
		this._input.endian=this.endian;
		this._addInputPosition=0;
		this._socket.onopen=function (e){
			_$this._onOpen(e);
		};
		this._socket.onmessage=function (msg){
			_$this._onMessage(msg);
		};
		this._socket.onclose=function (e){
			_$this._onClose(e);
		};
		this._socket.onerror=function (e){
			_$this._onError(e);
		};
	}

	/**
	*清理socket。
	*/
	__proto.cleanSocket=function(){
		try {
			this._socket.close();
		}catch (e){}
		this._connected=false;
		this._socket.onopen=null;
		this._socket.onmessage=null;
		this._socket.onclose=null;
		this._socket.onerror=null;
		this._socket=null;
	}

	/**
	*关闭连接。
	*/
	__proto.close=function(){
		if (this._socket !=null){
			try {
				this._socket.close();
			}catch (e){}
		}
	}

	/**
	*@private
	*连接建立成功 。
	*/
	__proto._onOpen=function(e){
		this._connected=true;
		this.event(/*laya.events.Event.OPEN*/"open",e);
	}

	/**
	*@private
	*接收到数据处理方法。
	*@param msg 数据。
	*/
	__proto._onMessage=function(msg){
		if (!msg || !msg.data)return;
		var data=msg.data;
		// if (this.disableInput && data){
		// 	this.event(/*laya.events.Event.MESSAGE*/"message",data);
		// 	return;
		// }
		// if (this._input.length > 0 && this._input.bytesAvailable < 1){
		// 	this._input.clear();
		// 	this._addInputPosition=0;
		// };
		// var pre=this._input.pos;
		// !this._addInputPosition && (this._addInputPosition=0);
		// this._input.pos=this._addInputPosition;
		// if (data){
		// 	if ((typeof data=='string')){
		// 		this._input.writeUTFBytes(data);
		// 		}else {
		// 		this._input.writeArrayBuffer(data);
		// 	}
		// 	this._addInputPosition=this._input.pos;
		// 	this._input.pos=pre;
		// }
		this.event(/*laya.events.Event.MESSAGE*/"message",data);
	}

	/**
	*@private
	*连接被关闭处理方法。
	*/
	__proto._onClose=function(e){
		this._connected=false;
		this.event(/*laya.events.Event.CLOSE*/"close",e)
	}

	/**
	*@private
	*出现异常处理方法。
	*/
	__proto._onError=function(e){
		this.event(/*laya.events.Event.ERROR*/"error",e)
	}

	/**
	*发送数据到服务器。
	*@param data 需要发送的数据，可以是String或者ArrayBuffer。
	*/
	__proto.send=function(data){
		this._socket.send(data);
	}

	/**
	*发送缓冲区中的数据到服务器。
	*/
	__proto.flush=function(){
		if (this._output && this._output.length > 0){
			var evt;
			try {
				this._socket && this._socket.send(this._output.__getBuffer().slice(0,this._output.length));
				}catch (e){
				evt=e;
			}
			this._output.endian=this.endian;
			this._output.clear();
			if (evt)this.event(/*laya.events.Event.ERROR*/"error",evt);
		}
	}

	/**
	*缓存的服务端发来的数据。
	*/
	__getset(0,__proto,'input',function(){
		return this._input;
	});

	/**
	*表示需要发送至服务端的缓冲区中的数据。
	*/
	__getset(0,__proto,'output',function(){
		return this._output;
	});

	/**
	*表示此 Socket 对象目前是否已连接。
	*/
	__getset(0,__proto,'connected',function(){
		return this._connected;
	});

	/**
	*<p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。</p>
	*<p> LITTLE_ENDIAN ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
	*<p> BIG_ENDIAN ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。</p>
	*/
	__getset(0,__proto,'endian',function(){
		return this._endian;
		},function(value){
		this._endian=value;
		if (this._input !=null)this._input.endian=value;
		if (this._output !=null)this._output.endian=value;
	});

	Socket.LITTLE_ENDIAN="littleEndian";
	Socket.BIG_ENDIAN="bigEndian";
	return Socket;
})(EventDispatcher)


/**
*@private
*Worker Image加载器
*/
//class laya.net.WorkerLoader extends laya.events.EventDispatcher
var WorkerLoader=(function(_super){
	function WorkerLoader(){
		/**
		*使用的Worker对象。
		*/
		this.worker=null;
		WorkerLoader.__super.call(this);
		var _$this=this;
		this.worker=new Browser.window.Worker(WorkerLoader.workerPath);
		this.worker.onmessage=function (evt){
			_$this.workerMessage(evt.data);
		}
	}

	__class(WorkerLoader,'laya.net.WorkerLoader',_super);
	var __proto=WorkerLoader.prototype;
	/**
	*@private
	*/
	__proto.workerMessage=function(data){
		if (data){
			switch(data.type){
				case "Image":
					this.imageLoaded(data);
					break ;
				case "Msg":
					this.event("image_msg",data.msg);
					break ;
				}
		}
	}

	/**
	*@private
	*/
	__proto.imageLoaded=function(data){
		if (data && data.buffer && data.buffer.length < 10){
			WorkerLoader._enable=false;
			this._myTrace("buffer lost when postmessage ,disable workerloader");
			this.event(data.url,null);
			this.event("image_err",data.url+"\n"+data.msg);
			return;
		}
		if (!data.dataType){
			this.event(data.url,null);
			this.event("image_err",data.url+"\n"+data.msg);
			return;
		};
		var canvas,ctx;
		var imageData;
		switch(data.dataType){
			case "buffer":
				canvas=new HTMLCanvas("2D");
				ctx=canvas.source.getContext("2d");
				imageData=ctx.createImageData(data.width,data.height);
				imageData.data.set(data.buffer);
				canvas.size(imageData.width,imageData.height);
				ctx.putImageData(imageData,0,0);
				canvas.memorySize=0;
				break ;
			case "imagedata":
				canvas=new HTMLCanvas("2D");
				ctx=canvas.source.getContext("2d");
				imageData=data.imagedata;
				canvas.size(imageData.width,imageData.height);
				ctx.putImageData(imageData,0,0);
				imageData=data.imagedata;
				canvas.memorySize=0;
				break ;
			case "imageBitmap":
				imageData=data.imageBitmap;
				if (!Render.isWebGL){
					canvas=new HTMLCanvas("2D");
					ctx=canvas.source.getContext("2d");
					canvas.size(imageData.width,imageData.height);
					ctx.drawImage(imageData,0,0);
					canvas.src=data.url;
				}else
				canvas=imageData;
				break ;
			}
		if (Render.isWebGL)
			/*__JS__ */canvas=new laya.webgl.resource.WebGLImage(canvas,data.url);;
		this.event(data.url,canvas);
	}

	/**
	*@private
	*/
	__proto._myTrace=function(__arg){
		var arg=arguments;
		var rst=[];
		var i=0,len=arg.length;
		for(i=0;i<len;i++){
			rst.push(arg[i]);
		}
		this.event("image_msg",rst.join(" "));
	}

	/**
	*加载图片
	*@param url 图片地址
	*/
	__proto.loadImage=function(url){
		var data;
		data={};
		data.type="load";
		data.url=url;
		this.worker.postMessage(data);
	}

	/**
	*@private
	*加载图片资源。
	*@param url 资源地址。
	*/
	__proto._loadImage=function(url){
		var _this=this;
		if (!WorkerLoader._enable||url.toLowerCase().indexOf(".png")< 0){
			WorkerLoader._preLoadFun.call(_this,url);
			return;
		}
		url=URL.formatURL(url);
		function clear (){
			laya.net.WorkerLoader.I.off(url,_this,onload);
		};
		var onload=function (image){
			clear();
			if (image){
				_this["onLoaded"](image);
				}else{
				WorkerLoader._preLoadFun.call(_this,url);
			}
		};
		laya.net.WorkerLoader.I.on(url,_this,onload);
		laya.net.WorkerLoader.I.loadImage(url);
	}

	/**
	*是否启用。
	*/
	__getset(1,WorkerLoader,'enable',function(){
		return WorkerLoader._enable;
		},function(v){
		if (WorkerLoader.disableJSDecode && (!Browser.window.createImageBitmap))return;
		WorkerLoader._enable=v;
		if (WorkerLoader._enable && WorkerLoader._preLoadFun==null)WorkerLoader._enable=WorkerLoader.__init__();
	});

	WorkerLoader.__init__=function(){
		if (WorkerLoader._preLoadFun !=null)return false;
		if (!Browser.window.Worker)return false;
		WorkerLoader._preLoadFun=Loader["prototype"]["_loadImage"];
		Loader["prototype"]["_loadImage"]=WorkerLoader["prototype"]["_loadImage"];
		if (!WorkerLoader.I)WorkerLoader.I=new WorkerLoader();
		return true;
	}

	WorkerLoader.workerSupported=function(){
		return Browser.window.Worker?true:false;
	}

	WorkerLoader.IMAGE_LOADED="image_loaded";
	WorkerLoader.IMAGE_ERR="image_err";
	WorkerLoader.IMAGE_MSG="image_msg";
	WorkerLoader.I=null;
	WorkerLoader._preLoadFun=null;
	WorkerLoader._enable=false;
	WorkerLoader.workerPath="libs/worker.js";
	WorkerLoader.disableJSDecode=true;
	return WorkerLoader;
})(EventDispatcher)


/**
*@private
*<code>Resource</code> 资源存取类。
*/
//class laya.resource.Resource extends laya.events.EventDispatcher
var Resource=(function(_super){
	function Resource(){
		/**@private */
		//this.__loaded=false;
		/**@private */
		//this._id=0;
		/**@private */
		//this._memorySize=0;
		/**@private */
		//this._released=false;
		/**@private */
		//this._destroyed=false;
		/**@private */
		//this._referenceCount=0;
		/**@private */
		//this._group=null;
		/**@private */
		//this._url=null;
		/**@private */
		//this._resourceManager=null;
		/**@private */
		//this._lastUseFrameCount=0;
		/**是否加锁，如果true为不能使用自动释放机制。*/
		//this.lock=false;
		/**名称。 */
		//this.name=null;
		Resource.__super.call(this);
		this._$1__id=++Resource._uniqueIDCounter;
		this.__loaded=true;
		this._destroyed=false;
		this._referenceCount=0;
		Resource._idResourcesMap[this.id]=this;
		this._released=true;
		this.lock=false;
		this._memorySize=0;
		this._lastUseFrameCount=-1;
		(ResourceManager.currentResourceManager)&& (ResourceManager.currentResourceManager.addResource(this));
	}

	__class(Resource,'laya.resource.Resource',_super);
	var __proto=Resource.prototype;
	Laya.imps(__proto,{"laya.resource.ICreateResource":true,"laya.resource.IDispose":true})
	/**
	*@private
	*/
	__proto._setUrl=function(url){
		if (this._url!==url){
			var resList;
			if (this._url){
				resList=Resource._urlResourcesMap[this._url];
				resList.splice(resList.indexOf(this),1);
				(resList.length===0)&& (delete Resource._urlResourcesMap[this._url]);
			}
			if (url){
				resList=Resource._urlResourcesMap[url];
				(resList)|| (Resource._urlResourcesMap[url]=resList=[]);
				resList.push(this);
			}
			this._url=url;
		}
	}

	/**
	*@private
	*/
	__proto._getGroup=function(){
		return this._group;
	}

	/**
	*@private
	*/
	__proto._setGroup=function(value){
		if (this._group!==value){
			var groupList;
			if (this._group){
				groupList=Resource._groupResourcesMap[this._group];
				groupList.splice(groupList.indexOf(this),1);
				(groupList.length===0)&& (delete Resource._groupResourcesMap[this._group]);
			}
			if (value){
				groupList=Resource._groupResourcesMap[value];
				(groupList)|| (Resource._groupResourcesMap[value]=groupList=[]);
				groupList.push(this);
			}
			this._group=value;
		}
	}

	/**
	*@private
	*/
	__proto._addReference=function(){
		this._referenceCount++;
	}

	/**
	*@private
	*/
	__proto._removeReference=function(){
		this._referenceCount--;
	}

	/**
	*@private
	*/
	__proto._clearReference=function(){
		this._referenceCount=0;
	}

	/**
	*@private
	*/
	__proto._endLoaded=function(){
		this.__loaded=true;
		this.event(/*laya.events.Event.LOADED*/"loaded",this);
	}

	/**
	*@private
	*/
	__proto.recreateResource=function(){
		this.completeCreate();
	}

	/**
	*@private
	*/
	__proto.disposeResource=function(){}
	/**
	*激活资源，使用资源前应先调用此函数激活。
	*@param force 是否强制创建。
	*/
	__proto.activeResource=function(force){
		(force===void 0)&& (force=false);
		this._lastUseFrameCount=Stat.loopCount;
		if (!this._destroyed && this.__loaded && (this._released || force))
			this.recreateResource();
	}

	/**
	*释放资源。
	*@param force 是否强制释放。
	*@return 是否成功释放。
	*/
	__proto.releaseResource=function(force){
		(force===void 0)&& (force=false);
		if (!force && this.lock)
			return false;
		if (!this._released || force){
			this.disposeResource();
			this._released=true;
			this._lastUseFrameCount=-1;
			this.event(/*laya.events.Event.RELEASED*/"released",this);
			return true;
			}else {
			return false;
		}
	}

	/**
	*@private
	*/
	__proto.onAsynLoaded=function(url,data,params){
		throw new Error("Resource: must override this function!");
	}

	/**
	*<p>彻底处理资源，处理后不能恢复。</p>
	*<p><b>注意：</b>会强制解锁清理。</p>
	*/
	__proto.destroy=function(){
		if (this._destroyed)
			return;
		if (this._resourceManager!==null)
			this._resourceManager.removeResource(this);
		this._destroyed=true;
		this.lock=false;
		this.releaseResource();
		delete Resource._idResourcesMap[this.id];
		var resList;
		if (this._url){
			resList=Resource._urlResourcesMap[this._url];
			if (resList){
				resList.splice(resList.indexOf(this),1);
				(resList.length===0)&& (delete Resource._urlResourcesMap[this.url]);
			}
			Loader.clearRes(this._url);
			(this.__loaded)||(RunDriver.cancelLoadByUrl(this._url));
		}
		if (this._group){
			resList=Resource._groupResourcesMap[this._group];
			resList.splice(resList.indexOf(this),1);
			(resList.length===0)&& (delete Resource._groupResourcesMap[this.url]);
		}
	}

	/**完成资源激活。*/
	__proto.completeCreate=function(){
		this._released=false;
		this.event(/*laya.events.Event.RECOVERED*/"recovered",this);
	}

	/**
	*@private
	*/
	__proto.dispose=function(){
		this.destroy();
	}

	/**
	*@private
	*/
	/**
	*占用内存尺寸。
	*/
	__getset(0,__proto,'memorySize',function(){
		return this._memorySize;
		},function(value){
		var offsetValue=value-this._memorySize;
		this._memorySize=value;
		this.resourceManager && this.resourceManager.addSize(offsetValue);
	});

	/**
	*@private
	*/
	__getset(0,__proto,'_loaded',null,function(value){
		this.__loaded=value;
	});

	/**
	*获取是否已加载完成。
	*/
	__getset(0,__proto,'loaded',function(){
		return this.__loaded;
	});

	/**
	*获取唯一标识ID,通常用于识别。
	*/
	__getset(0,__proto,'id',function(){
		return this._$1__id;
	});

	/**
	*是否已处理。
	*/
	__getset(0,__proto,'destroyed',function(){
		return this._destroyed;
	});

	/**
	*设置资源组名。
	*/
	/**
	*获取资源组名。
	*/
	__getset(0,__proto,'group',function(){
		return this._getGroup();
		},function(value){
		this._setGroup(value);
	});

	/**
	*资源管理员。
	*/
	__getset(0,__proto,'resourceManager',function(){
		return this._resourceManager;
	});

	/**
	*获取资源的URL地址。
	*@return URL地址。
	*/
	__getset(0,__proto,'url',function(){
		return this._url;
	});

	/**
	*是否已释放。
	*/
	__getset(0,__proto,'released',function(){
		return this._released;
	});

	/**
	*获取资源的引用计数。
	*/
	__getset(0,__proto,'referenceCount',function(){
		return this._referenceCount;
	});

	Resource.getResourceByID=function(id){
		return Resource._idResourcesMap[id];
	}

	Resource.getResourceByURL=function(url,index){
		(index===void 0)&& (index=0);
		return Resource._urlResourcesMap[url][index];
	}

	Resource.getResourceCountByURL=function(url){
		return Resource._urlResourcesMap[url].length;
	}

	Resource.destroyUnusedResources=function(group){
		var res;
		if (group){
			var resouList=Resource._groupResourcesMap[group];
			if (resouList){
				var tempResouList=resouList.slice();
				for (var i=0,n=tempResouList.length;i < n;i++){
					res=tempResouList[i];
					if (!res.lock && res._referenceCount===0)
						res.destroy();
				}
			}
			}else {
			for (var k in Resource._idResourcesMap){
				res=Resource._idResourcesMap[k];
				if (!res.lock && res._referenceCount===0)
					res.destroy();
			}
		}
	}

	Resource._uniqueIDCounter=0;
	Resource._idResourcesMap={};
	Resource._urlResourcesMap={};
	Resource._groupResourcesMap={};
	return Resource;
})(EventDispatcher)


/**
*<code>Texture</code> 是一个纹理处理类。
*/
//class laya.resource.Texture extends laya.events.EventDispatcher
var Texture=(function(_super){
	function Texture(bitmap,uv){
		/**图片或者canvas 。*/
		//this.bitmap=null;
		/**UV信息。*/
		//this.uv=null;
		/**沿 X 轴偏移量。*/
		this.offsetX=0;
		/**沿 Y 轴偏移量。*/
		this.offsetY=0;
		/**原始宽度（包括被裁剪的透明区域）。*/
		this.sourceWidth=0;
		/**原始高度（包括被裁剪的透明区域）。*/
		this.sourceHeight=0;
		/**@private */
		//this._loaded=false;
		/**@private */
		this._w=0;
		/**@private */
		this._h=0;
		/**@private 唯一ID*/
		//this.$_GID=NaN;
		/**图片地址*/
		//this.url=null;
		/**@private */
		this._uvID=0;
		this._atlasID=-1;
		/**@private */
		this.scaleRate=1;
		Texture.__super.call(this);
		if (bitmap && bitmap._addReference!=null){
			bitmap._addReference();
		}
		this.setTo(bitmap,uv);
	}

	__class(Texture,'laya.resource.Texture',_super);
	var __proto=Texture.prototype;
	/**
	*@private
	*/
	__proto._setUrl=function(url){
		this.url=url;
	}

	/**
	*设置此对象的位图资源、UV数据信息。
	*@param bitmap 位图资源
	*@param uv UV数据信息
	*/
	__proto.setTo=function(bitmap,uv){
		if (/*__JS__ */bitmap instanceof window.HTMLElement){
			var canvas=HTMLCanvas.create("2D",bitmap);
			this.bitmap=canvas;
			}else{
			this.bitmap=bitmap;
		}
		this.uv=uv || Texture.DEF_UV;
		if (bitmap){
			this._w=bitmap.width;
			this._h=bitmap.height;
			this.sourceWidth=this.sourceWidth || this._w;
			this.sourceHeight=this.sourceHeight || this._h
			this._loaded=this._w > 0;
			var _this=this;
			if (this._loaded){
				RunDriver.addToAtlas && RunDriver.addToAtlas(_this);
				}else {
				var bm=bitmap;
				if ((bm instanceof laya.resource.HTMLImage )&& bm.image)
					bm.image.addEventListener('load',function(e){
					RunDriver.addToAtlas && RunDriver.addToAtlas(_this);
				},false);
			}
		}
	}

	/**@private 激活资源。*/
	__proto.active=function(){
		if (this.bitmap)this.bitmap.activeResource();
	}

	/**
	*销毁纹理（分直接销毁，跟计数销毁两种）。
	*@param forceDispose (default=false)true为强制销毁主纹理，false是通过计数销毁纹理。
	*/
	__proto.destroy=function(forceDispose){
		(forceDispose===void 0)&& (forceDispose=false);
		if (this.bitmap && (this.bitmap).referenceCount > 0){
			var temp=this.bitmap;
			if (forceDispose){
				if (Render.isConchApp && temp.source && temp.source.conchDestroy){
					this.bitmap.source.conchDestroy();
				}
				this.bitmap=null;
				temp.dispose();
				(temp)._clearReference();
				}else {
				(temp)._removeReference();
				if ((temp).referenceCount==0){
					if (Render.isConchApp && temp.source && temp.source.conchDestroy){
						this.bitmap.source.conchDestroy();
					}
					this.bitmap=null;
					temp.dispose();
				}
			}
			if (this.url && this===Laya.loader.getRes(this.url))Laya.loader.clearRes(this.url,forceDispose);
			this._loaded=false;
		}
	}

	/**
	*加载指定地址的图片。
	*@param url 图片地址。
	*/
	__proto.load=function(url){
		var _$this=this;
		this._loaded=false;
		url=URL.customFormat(url);
		var fileBitmap=(this.bitmap || (this.bitmap=HTMLImage.create(url)));
		if (fileBitmap)fileBitmap._addReference();
		var _this=this;
		fileBitmap.onload=function (){
			fileBitmap.onload=null;
			_this._loaded=true;
			_$this.sourceWidth=_$this._w=fileBitmap.width;
			_$this.sourceHeight=_$this._h=fileBitmap.height;
			_this.event(/*laya.events.Event.LOADED*/"loaded",this);
			(RunDriver.addToAtlas)&& (RunDriver.addToAtlas(_this));
		};
	}

	/**@private */
	__proto.addTextureToAtlas=function(e){
		RunDriver.addTextureToAtlas(this);
	}

	/**
	*获取Texture上的某个区域的像素点
	*@param x
	*@param y
	*@param width
	*@param height
	*@return 返回像素点集合
	*/
	__proto.getPixels=function(x,y,width,height){
		if (Render.isConchApp){
			var temp=this.bitmap;
			if (temp.source && temp.source.getImageData){
				var arraybuffer=temp.source.getImageData(x,y,width,height);
				var tUint8Array=new Uint8Array(arraybuffer);
				return /*__JS__ */Array.from(tUint8Array);
			}
			return null;
			}else if (Render.isWebGL){
			return RunDriver.getTexturePixels(this,x,y,width,height);
			}else {
			Browser.canvas.size(width,height);
			Browser.canvas.clear();
			Browser.context.drawTexture(this,-x,-y,this.width,this.height,0,0);
			var info=Browser.context.getImageData(0,0,width,height);
		}
		return info.data;
	}

	/**@private */
	__proto.onAsynLoaded=function(url,bitmap){
		if (bitmap)bitmap._addReference();
		this.setTo(bitmap,this.uv);
	}

	/**激活并获取资源。*/
	__getset(0,__proto,'source',function(){
		if (!this.bitmap)return null;
		this.bitmap.activeResource();
		return this.bitmap.source;
	});

	/**
	*表示是否加载成功，只能表示初次载入成功（通常包含下载和载入）,并不能完全表示资源是否可立即使用（资源管理机制释放影响等）。
	*/
	__getset(0,__proto,'loaded',function(){
		return this._loaded;
	});

	/**
	*表示资源是否已释放。
	*/
	__getset(0,__proto,'released',function(){
		if (!this.bitmap)return true;
		return this.bitmap.released;
	});

	/**实际宽度。*/
	__getset(0,__proto,'width',function(){
		if (this._w)return this._w;
		return (this.uv && this.uv!==Texture.DEF_UV)? (this.uv[2]-this.uv[0])*this.bitmap.width :this.bitmap.width;
		},function(value){
		this._w=value;
		this.sourceWidth || (this.sourceWidth=value);
	});

	/**
	*通过外部设置是否启用纹理平铺(后面要改成在着色器里计算)
	*/
	/**
	*获取当前纹理是否启用了纹理平铺
	*/
	__getset(0,__proto,'repeat',function(){
		if (Render.isWebGL && this.bitmap){
			return this.bitmap.repeat;
		}
		return true;
		},function(value){
		if (value){
			if (Render.isWebGL && this.bitmap){
				this.bitmap.repeat=value;
				if (value){
					this.bitmap.enableMerageInAtlas=false;
				}
			}
		}
	});

	/**实际高度。*/
	__getset(0,__proto,'height',function(){
		if (this._h)return this._h;
		return (this.uv && this.uv!==Texture.DEF_UV)? (this.uv[5]-this.uv[1])*this.bitmap.height :this.bitmap.height;
		},function(value){
		this._h=value;
		this.sourceHeight || (this.sourceHeight=value);
	});

	/**
	*设置线性采样的状态（目前只能第一次绘制前设置false生效,来关闭线性采样）。
	*/
	/**
	*获取当前纹理是否启用了线性采样。
	*/
	__getset(0,__proto,'isLinearSampling',function(){
		return Render.isWebGL ? (this.bitmap.minFifter !=0x2600):true;
		},function(value){
		if (!value && Render.isWebGL){
			if (!value && (this.bitmap.minFifter==-1)&& (this.bitmap.magFifter==-1)){
				this.bitmap.minFifter=0x2600;
				this.bitmap.magFifter=0x2600;
				this.bitmap.enableMerageInAtlas=false;
			}
		}
	});

	Texture.moveUV=function(offsetX,offsetY,uv){
		for (var i=0;i < 8;i+=2){
			uv[i]+=offsetX;
			uv[i+1]+=offsetY;
		}
		return uv;
	}

	Texture.create=function(source,x,y,width,height,offsetX,offsetY,sourceWidth,sourceHeight){
		(offsetX===void 0)&& (offsetX=0);
		(offsetY===void 0)&& (offsetY=0);
		(sourceWidth===void 0)&& (sourceWidth=0);
		(sourceHeight===void 0)&& (sourceHeight=0);
		var btex=(source instanceof laya.resource.Texture );
		var uv=btex ? source.uv :Texture.DEF_UV;
		var bitmap=btex ? source.bitmap :source;
		var bIsAtlas=RunDriver.isAtlas(bitmap);
		if (bIsAtlas){
			var atlaser=bitmap._atlaser;
			var nAtlasID=(source)._atlasID;
			if (nAtlasID==-1){
				throw new Error("create texture error");
			}
			bitmap=atlaser._inAtlasTextureBitmapValue[nAtlasID];
			uv=atlaser._inAtlasTextureOriUVValue[nAtlasID];
		};
		var tex=new Texture(bitmap,null);
		if (bitmap.width && (x+width)> bitmap.width)width=bitmap.width-x;
		if (bitmap.height && (y+height)> bitmap.height)height=bitmap.height-y;
		tex.width=width;
		tex.height=height;
		tex.offsetX=offsetX;
		tex.offsetY=offsetY;
		tex.sourceWidth=sourceWidth || width;
		tex.sourceHeight=sourceHeight || height;
		var dwidth=1 / bitmap.width;
		var dheight=1 / bitmap.height;
		x *=dwidth;
		y *=dheight;
		width *=dwidth;
		height *=dheight;
		var u1=tex.uv[0],v1=tex.uv[1],u2=tex.uv[4],v2=tex.uv[5];
		var inAltasUVWidth=(u2-u1),inAltasUVHeight=(v2-v1);
		var oriUV=Texture.moveUV(uv[0],uv[1],[x,y,x+width,y,x+width,y+height,x,y+height]);
		tex.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
		if (bIsAtlas){
			tex.addTextureToAtlas();
		};
		var bitmapScale=bitmap.scaleRate;
		if (bitmapScale && bitmapScale !=1){
			tex.sourceWidth /=bitmapScale;
			tex.sourceHeight /=bitmapScale;
			tex.width /=bitmapScale;
			tex.height /=bitmapScale;
			tex.scaleRate=bitmapScale;
			tex.offsetX /=bitmapScale;
			tex.offsetY /=bitmapScale;
			}else{
			tex.scaleRate=1;
		}
		return tex;
	}

	Texture.createFromTexture=function(texture,x,y,width,height){
		var texScaleRate=texture.scaleRate;
		if (texScaleRate !=1){
			x *=texScaleRate;
			y *=texScaleRate;
			width *=texScaleRate;
			height *=texScaleRate;
		};
		var rect=Rectangle.TEMP.setTo(x-texture.offsetX,y-texture.offsetY,width,height);
		var result=rect.intersection(Texture._rect1.setTo(0,0,texture.width,texture.height),Texture._rect2);
		if (result)
			var tex=Texture.create(texture,result.x,result.y,result.width,result.height,result.x-rect.x,result.y-rect.y,width,height);
		else return null;
		tex.bitmap._removeReference();
		return tex;
	}

	Texture.DEF_UV=[0,0,1.0,0,1.0,1.0,0,1.0];
	Texture.INV_UV=[0,1,1.0,1,1.0,0.0,0,0.0];
	Texture._rect1=new Rectangle();
	Texture._rect2=new Rectangle();
	return Texture;
})(EventDispatcher)


/**
*<code>TimeLine</code> 是一个用来创建时间轴动画的类。
*/
//class laya.utils.TimeLine extends laya.events.EventDispatcher
var TimeLine=(function(_super){
	var tweenData;
	function TimeLine(){
		this._labelDic=null;
		this._tweenDic={};
		this._tweenDataList=[];
		this._endTweenDataList=null;
		//以结束时间进行排序
		this._currTime=0;
		this._lastTime=0;
		this._startTime=0;
		/**当前动画数据播放到第几个了*/
		this._index=0;
		/**为TWEEN创建属于自己的唯一标识，方便管理*/
		this._gidIndex=0;
		/**保留所有对象第一次注册动画时的状态（根据时间跳转时，需要把对象的回复，再计算接下来的状态）*/
		this._firstTweenDic={};
		/**是否需要排序*/
		this._startTimeSort=false;
		this._endTimeSort=false;
		/**是否循环*/
		this._loopKey=false;
		/**缩放动画播放的速度。*/
		this.scale=1;
		this._frameRate=60;
		this._frameIndex=0;
		this._total=0;
		TimeLine.__super.call(this);
	}

	__class(TimeLine,'laya.utils.TimeLine',_super);
	var __proto=TimeLine.prototype;
	/**
	*控制一个对象，从当前点移动到目标点。
	*@param target 要控制的对象。
	*@param props 要控制对象的属性。
	*@param duration 对象TWEEN的时间。
	*@param ease 缓动类型
	*@param offset 相对于上一个对象，偏移多长时间（单位：毫秒）。
	*/
	__proto.to=function(target,props,duration,ease,offset){
		(offset===void 0)&& (offset=0);
		return this._create(target,props,duration,ease,offset,true);
	}

	/**
	*从 props 属性，缓动到当前状态。
	*@param target target 目标对象(即将更改属性值的对象)
	*@param props 要控制对象的属性
	*@param duration 对象TWEEN的时间
	*@param ease 缓动类型
	*@param offset 相对于上一个对象，偏移多长时间（单位：毫秒）
	*/
	__proto.from=function(target,props,duration,ease,offset){
		(offset===void 0)&& (offset=0);
		return this._create(target,props,duration,ease,offset,false);
	}

	/**@private */
	__proto._create=function(target,props,duration,ease,offset,isTo){
		var tTweenData=Pool.getItemByClass("tweenData",tweenData);
		tTweenData.isTo=isTo;
		tTweenData.type=0;
		tTweenData.target=target;
		tTweenData.duration=duration;
		tTweenData.data=props;
		tTweenData.startTime=this._startTime+offset;
		tTweenData.endTime=tTweenData.startTime+tTweenData.duration;
		tTweenData.ease=ease;
		this._startTime=Math.max(tTweenData.endTime,this._startTime);
		this._tweenDataList.push(tTweenData);
		this._startTimeSort=true;
		this._endTimeSort=true;
		return this;
	}

	/**
	*在时间队列中加入一个标签。
	*@param label 标签名称。
	*@param offset 标签相对于上个动画的偏移时间(单位：毫秒)。
	*/
	__proto.addLabel=function(label,offset){
		var tTweenData=Pool.getItemByClass("tweenData",tweenData);
		tTweenData.type=1;
		tTweenData.data=label;
		tTweenData.endTime=tTweenData.startTime=this._startTime+offset;
		this._labelDic || (this._labelDic={});
		this._labelDic[label]=tTweenData;
		this._tweenDataList.push(tTweenData);
		return this;
	}

	/**
	*移除指定的标签
	*@param label
	*/
	__proto.removeLabel=function(label){
		if (this._labelDic && this._labelDic[label]){
			var tTweenData=this._labelDic[label];
			if (tTweenData){
				var tIndex=this._tweenDataList.indexOf(tTweenData);
				if (tIndex >-1){
					this._tweenDataList.splice(tIndex,1);
				}
			}
			delete this._labelDic[label];
		}
	}

	/**
	*动画从整个动画的某一时间开始。
	*@param time(单位：毫秒)。
	*/
	__proto.gotoTime=function(time){
		if (this._tweenDataList==null || this._tweenDataList.length==0)return;
		var tTween;
		var tObject;
		for (var p in this._firstTweenDic){
			tObject=this._firstTweenDic[p];
			if (tObject){
				for (var tDataP in tObject){
					if (tObject.diyTarget.hasOwnProperty(tDataP)){
						tObject.diyTarget[tDataP]=tObject[tDataP];
					}
				}
			}
		}
		for (p in this._tweenDic){
			tTween=this._tweenDic[p];
			tTween.clear();
			delete this._tweenDic[p];
		}
		this._index=0;
		this._gidIndex=0;
		this._currTime=time;
		this._lastTime=Browser.now();
		var tTweenDataCopyList;
		if (this._endTweenDataList==null || this._endTimeSort){
			this._endTimeSort=false;
			this._endTweenDataList=tTweenDataCopyList=this._tweenDataList.concat();
			function Compare (paraA,paraB){
				if (paraA.endTime > paraB.endTime){
					return 1;
					}else if (paraA.endTime < paraB.endTime){
					return-1;
					}else {
					return 0;
				}
			}
			tTweenDataCopyList.sort(Compare);
			}else {
			tTweenDataCopyList=this._endTweenDataList
		};
		var tTweenData;
		for (var i=0,n=tTweenDataCopyList.length;i < n;i++){
			tTweenData=tTweenDataCopyList[i];
			if (tTweenData.type==0){
				if (time >=tTweenData.endTime){
					this._index=Math.max(this._index,i+1);
					var props=tTweenData.data;
					if (tTweenData.isTo){
						for (var tP in props){
							tTweenData.target[tP]=props[tP];
						}
					}
					}else {
					break ;
				}
			}
		}
		for (i=0,n=this._tweenDataList.length;i < n;i++){
			tTweenData=this._tweenDataList[i];
			if (tTweenData.type==0){
				if (time >=tTweenData.startTime && time < tTweenData.endTime){
					this._index=Math.max(this._index,i+1);
					this._gidIndex++;
					tTween=Pool.getItemByClass("tween",Tween);
					tTween._create(tTweenData.target,tTweenData.data,tTweenData.duration,tTweenData.ease,Handler.create(this,this._animComplete,[this._gidIndex]),0,false,tTweenData.isTo,true,false);
					tTween.setStartTime(this._currTime-(time-tTweenData.startTime));
					tTween._updateEase(this._currTime);
					tTween.gid=this._gidIndex;
					this._tweenDic[this._gidIndex]=tTween;
				}
			}
		}
	}

	/**
	*从指定的标签开始播。
	*@param Label 标签名。
	*/
	__proto.gotoLabel=function(Label){
		if (this._labelDic==null)return;
		var tLabelData=this._labelDic[Label];
		if (tLabelData)this.gotoTime(tLabelData.startTime);
	}

	/**
	*暂停整个动画。
	*/
	__proto.pause=function(){
		Laya.timer.clear(this,this._update);
	}

	/**
	*恢复暂停动画的播放。
	*/
	__proto.resume=function(){
		this.play(this._currTime,this._loopKey);
	}

	/**
	*播放动画。
	*@param timeOrLabel 开启播放的时间点或标签名。
	*@param loop 是否循环播放。
	*/
	__proto.play=function(timeOrLabel,loop){
		(timeOrLabel===void 0)&& (timeOrLabel=0);
		(loop===void 0)&& (loop=false);
		if (!this._tweenDataList)return;
		if (this._startTimeSort){
			this._startTimeSort=false;
			function Compare (paraA,paraB){
				if (paraA.startTime > paraB.startTime){
					return 1;
					}else if (paraA.startTime < paraB.startTime){
					return-1;
					}else {
					return 0;
				}
			}
			this._tweenDataList.sort(Compare);
			for (var i=0,n=this._tweenDataList.length;i < n;i++){
				var tTweenData=this._tweenDataList[i];
				if (tTweenData !=null && tTweenData.type==0){
					var tTarget=tTweenData.target;
					var gid=(tTarget.$_GID || (tTarget.$_GID=Utils.getGID()));
					var tSrcData=null;
					if (this._firstTweenDic[gid]==null){
						tSrcData={};
						tSrcData.diyTarget=tTarget;
						this._firstTweenDic[gid]=tSrcData;
						}else {
						tSrcData=this._firstTweenDic[gid];
					}
					for (var p in tTweenData.data){
						if (tSrcData[p]==null){
							tSrcData[p]=tTarget[p];
						}
					}
				}
			}
		}
		if ((typeof timeOrLabel=='string')){
			this.gotoLabel(timeOrLabel);
			}else {
			this.gotoTime(timeOrLabel);
		}
		this._loopKey=loop;
		this._lastTime=Browser.now();
		Laya.timer.frameLoop(1,this,this._update);
	}

	/**
	*更新当前动画。
	*/
	__proto._update=function(){
		if (this._currTime >=this._startTime){
			if (this._loopKey){
				this._complete();
				if (!this._tweenDataList)return;
				this.gotoTime(0);
				}else {
				for (var p in this._tweenDic){
					tTween=this._tweenDic[p];
					tTween.complete();
				}
				this._complete();
				this.pause();
				return;
			}
		};
		var tNow=Browser.now();
		var tFrameTime=tNow-this._lastTime;
		var tCurrTime=this._currTime+=tFrameTime *this.scale;
		this._lastTime=tNow;
		for (p in this._tweenDic){
			tTween=this._tweenDic[p];
			tTween._updateEase(tCurrTime);
		};
		var tTween;
		if (this._tweenDataList.length !=0 && this._index < this._tweenDataList.length){
			var tTweenData=this._tweenDataList[this._index];
			if (tCurrTime >=tTweenData.startTime){
				this._index++;
				if (tTweenData.type==0){
					this._gidIndex++;
					tTween=Pool.getItemByClass("tween",Tween);
					tTween._create(tTweenData.target,tTweenData.data,tTweenData.duration,tTweenData.ease,Handler.create(this,this._animComplete,[this._gidIndex]),0,false,tTweenData.isTo,true,false);
					tTween.setStartTime(tCurrTime);
					tTween.gid=this._gidIndex;
					this._tweenDic[this._gidIndex]=tTween;
					tTween._updateEase(tCurrTime);
					}else {
					this.event(/*laya.events.Event.LABEL*/"label",tTweenData.data);
				}
			}
		}
	}

	/**
	*指定的动画索引处的动画播放完成后，把此动画从列表中删除。
	*@param index
	*/
	__proto._animComplete=function(index){
		var tTween=this._tweenDic[index];
		if (tTween)delete this._tweenDic[index];
	}

	/**@private */
	__proto._complete=function(){
		this.event(/*laya.events.Event.COMPLETE*/"complete");
	}

	/**
	*重置所有对象，复用对象的时候使用。
	*/
	__proto.reset=function(){
		var p;
		if (this._labelDic){
			for (p in this._labelDic){
				delete this._labelDic[p];
			}
		};
		var tTween;
		for (p in this._tweenDic){
			tTween=this._tweenDic[p];
			tTween.clear();
			delete this._tweenDic[p];
		}
		for (p in this._firstTweenDic){
			delete this._firstTweenDic[p];
		}
		this._endTweenDataList=null;
		if (this._tweenDataList && this._tweenDataList.length){
			var i=0,len=0;
			len=this._tweenDataList.length;
			for (i=0;i < len;i++){
				if(this._tweenDataList[i])
					this._tweenDataList[i].destroy();
			}
		}
		this._tweenDataList.length=0;
		this._currTime=0;
		this._lastTime=0;
		this._startTime=0;
		this._index=0;
		this._gidIndex=0;
		this.scale=1;
		Laya.timer.clear(this,this._update);
	}

	/**
	*彻底销毁此对象。
	*/
	__proto.destroy=function(){
		this.reset();
		this._labelDic=null;
		this._tweenDic=null;
		this._tweenDataList=null;
		this._firstTweenDic=null;
	}

	/**
	*@private
	*设置帧索引
	*/
	/**
	*@private
	*得到帧索引
	*/
	__getset(0,__proto,'index',function(){
		return this._frameIndex;
		},function(value){
		this._frameIndex=value;
		this.gotoTime(this._frameIndex / this._frameRate *1000);
	});

	/**
	*得到总帧数。
	*/
	__getset(0,__proto,'total',function(){
		this._total=Math.floor(this._startTime / 1000 *this._frameRate);
		return this._total;
	});

	TimeLine.to=function(target,props,duration,ease,offset){
		(offset===void 0)&& (offset=0);
		return (new TimeLine()).to(target,props,duration,ease,offset);
	}

	TimeLine.from=function(target,props,duration,ease,offset){
		(offset===void 0)&& (offset=0);
		return (new TimeLine()).from(target,props,duration,ease,offset);
	}

	TimeLine.__init$=function(){
		//class tweenData
		tweenData=(function(){
			function tweenData(){
				this.type=0;
				//0代表TWEEN,1代表标签
				this.isTo=true;
				this.startTime=NaN;
				this.endTime=NaN;
				this.target=null;
				this.duration=NaN;
				this.ease=null;
				this.data=null;
			}
			__class(tweenData,'');
			var __proto=tweenData.prototype;
			__proto.destroy=function(){
				this.target=null;
				this.ease=null;
				this.data=null;
				this.isTo=true;
				this.type=0;
				Pool.recover("tweenData",this);
			}
			return tweenData;
		})()
	}

	return TimeLine;
})(EventDispatcher)


/**
*<p> <code>Sprite</code> 是基本的显示图形的显示列表节点。 <code>Sprite</code> 默认没有宽高，默认不接受鼠标事件。通过 <code>graphics</code> 可以绘制图片或者矢量图，支持旋转，缩放，位移等操作。<code>Sprite</code>同时也是容器类，可用来添加多个子节点。</p>
*<p>注意： <code>Sprite</code> 默认没有宽高，可以通过<code>getBounds</code>函数获取；也可手动设置宽高；还可以设置<code>autoSize=true</code>，然后再获取宽高。<code>Sprite</code>的宽高一般用于进行碰撞检测和排版，并不影响显示图像大小，如果需要更改显示图像大小，请使用 <code>scaleX</code> ， <code>scaleY</code> ， <code>scale</code>。</p>
*<p> <code>Sprite</code> 默认不接受鼠标事件，即<code>mouseEnabled=false</code>，但是只要对其监听任意鼠标事件，会自动打开自己以及所有父对象的<code>mouseEnabled=true</code>。所以一般也无需手动设置<code>mouseEnabled</code>。</p>
*<p>LayaAir引擎API设计精简巧妙。核心显示类只有一个<code>Sprite</code>。<code>Sprite</code>针对不同的情况做了渲染优化，所以保证一个类实现丰富功能的同时，又达到高性能。</p>
*
*@example <caption>创建了一个 <code>Sprite</code> 实例。</caption>
*package
*{
	*import laya.display.Sprite;
	*import laya.events.Event;
	*
	*public class Sprite_Example
	*{
		*private var sprite:Sprite;
		*private var shape:Sprite
		*public function Sprite_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
			*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
			*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
			*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
			*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
			*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
			*shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
			*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
			*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
			*shape.width=100;//设置 shape 对象的宽度。
			*shape.height=100;//设置 shape 对象的高度。
			*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
			*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
			*shape.on(Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
			*}
		*private function onClickSprite():void
		*{
			*trace("点击 sprite 对象。");
			*sprite.rotation+=5;//旋转 sprite 对象。
			*}
		*private function onClickShape():void
		*{
			*trace("点击 shape 对象。");
			*shape.rotation+=5;//旋转 shape 对象。
			*}
		*}
	*}
*
*@example
*var sprite;
*var shape;
*Sprite_Example();
*function Sprite_Example()
*{
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*onInit();
	*}
*function onInit()
*{
	*sprite=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
	*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
	*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
	*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
	*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
	*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
	*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
	*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
	*shape=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
	*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
	*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
	*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
	*shape.width=100;//设置 shape 对象的宽度。
	*shape.height=100;//设置 shape 对象的高度。
	*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
	*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
	*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
	*shape.on(laya.events.Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
	*}
*function onClickSprite()
*{
	*console.log("点击 sprite 对象。");
	*sprite.rotation+=5;//旋转 sprite 对象。
	*}
*function onClickShape()
*{
	*console.log("点击 shape 对象。");
	*shape.rotation+=5;//旋转 shape 对象。
	*}
*
*@example
*import Sprite=laya.display.Sprite;
*class Sprite_Example {
	*private sprite:Sprite;
	*private shape:Sprite
	*public Sprite_Example(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*this.sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*this.sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
		*this.sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
		*this.sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
		*this.sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
		*this.sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(this.sprite);//将此 sprite 对象添加到显示列表。
		*this.sprite.on(laya.events.Event.CLICK,this,this.onClickSprite);//给 sprite 对象添加点击事件侦听。
		*this.shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*this.shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
		*this.shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
		*this.shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
		*this.shape.width=100;//设置 shape 对象的宽度。
		*this.shape.height=100;//设置 shape 对象的高度。
		*this.shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
		*this.shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(this.shape);//将此 shape 对象添加到显示列表。
		*this.shape.on(laya.events.Event.CLICK,this,this.onClickShape);//给 shape 对象添加点击事件侦听。
		*}
	*private onClickSprite():void {
		*console.log("点击 sprite 对象。");
		*this.sprite.rotation+=5;//旋转 sprite 对象。
		*}
	*private onClickShape():void {
		*console.log("点击 shape 对象。");
		*this.shape.rotation+=5;//旋转 shape 对象。
		*}
	*}
*/
//class laya.display.Sprite extends laya.display.Node
var Sprite=(function(_super){
	function Sprite(){
		/**@private 矩阵变换信息。*/
		this._transform=null;
		/**@private */
		this._tfChanged=false;
		/**@private */
		this._x=0;
		/**@private */
		this._y=0;
		/**@private */
		this._width=0;
		/**@private */
		this._height=0;
		/**@private */
		this._repaint=1;
		/**@private 鼠标状态，0:auto,1:mouseEnabled=false,2:mouseEnabled=true。*/
		this._mouseEnableState=0;
		/**@private Z排序，数值越大越靠前。*/
		this._zOrder=0;
		/**@private */
		this._graphics=null;
		/**@private */
		this._renderType=0;
		/**@private */
		this._optimizeScrollRect=false;
		/**@private */
		this._texture=null;
		/**
		*<p>鼠标事件与此对象的碰撞检测是否可穿透。碰撞检测发生在鼠标事件的捕获阶段，此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象。</p>
		*<p>穿透表示鼠标事件发生的位置处于本对象绘图区域内时，才算命中，而与对象宽高和值为Rectangle对象的hitArea属性无关。如果sprite.hitArea值是HitArea对象，表示显式声明了此对象的鼠标事件响应区域，而忽略对象的宽高、mouseThrough属性。</p>
		*<p>影响对象鼠标事件响应区域的属性为：width、height、hitArea，优先级顺序为：hitArea(type:HitArea)>hitArea(type:Rectangle)>width/height。</p>
		*@default false 不可穿透，此对象的鼠标响应区域由width、height、hitArea属性决定。</p>
		*/
		this.mouseThrough=false;
		/**
		*<p>指定是否自动计算宽高数据。默认值为 false 。</p>
		*<p>Sprite宽高默认为0，并且不会随着绘制内容的变化而变化，如果想根据绘制内容获取宽高，可以设置本属性为true，或者通过getBounds方法获取。设置为true，对性能有一定影响。</p>
		*/
		this.autoSize=false;
		/**
		*<p>指定鼠标事件检测是优先检测自身，还是优先检测其子对象。鼠标事件检测发生在鼠标事件的捕获阶段，此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象。</p>
		*<p>如果为false，优先检测子对象，当有子对象被命中时，中断检测，获得命中目标。如果未命中任何子对象，最后再检测此对象；如果为true，则优先检测本对象，如果本对象没有被命中，直接中断检测，表示没有命中目标；如果本对象被命中，则进一步递归检测其子对象，以确认最终的命中目标。</p>
		*<p>合理使用本属性，能减少鼠标事件检测的节点，提高性能。可以设置为true的情况：开发者并不关心此节点的子节点的鼠标事件检测结果，也就是以此节点作为其子节点的鼠标事件检测依据。</p>
		*<p>Stage对象和UI的View组件默认为true。</p>
		*@default false 优先检测此对象的子对象，当递归检测完所有子对象后，仍然没有找到目标对象，最后再检测此对象。
		*/
		this.hitTestPrior=false;
		/**
		*<p>视口大小，视口外的子对象，将不被渲染(如果想实现裁剪效果，请使用srollRect)，合理使用能提高渲染性能。比如由一个个小图片拼成的地图块，viewport外面的小图片将不渲染</p>
		*<p>srollRect和viewport的区别：<br/>
		*1. srollRect自带裁剪效果，viewport只影响子对象渲染是否渲染，不具有裁剪效果（性能更高）。<br/>
		*2. 设置rect的x,y属性均能实现区域滚动效果，但scrollRect会保持0,0点位置不变。</p>
		*@default null
		*/
		this.viewport=null;
		Sprite.__super.call(this);
		this._style=Style.EMPTY;
	}

	__class(Sprite,'laya.display.Sprite',_super);
	var __proto=Sprite.prototype;
	Laya.imps(__proto,{"laya.display.ILayout":true})
	/**@private */
	__proto.createConchModel=function(){
		return /*__JS__ */new ConchNode();
	}

	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._releaseMem();
		_super.prototype.destroy.call(this,destroyChild);
		this._style && this._style.destroy();
		this._transform && this._transform.destroy();
		this._transform=null;
		this._style=null;
		this._graphics=null;
	}

	/**根据zOrder进行重新排序。*/
	__proto.updateZOrder=function(){
		Utils.updateOrder(this._childs)&& this.repaint();
	}

	/**在设置cacheAs的情况下，调用此方法会重新刷新缓存。*/
	__proto.reCache=function(){
		if (this._$P.cacheCanvas)this._$P.cacheCanvas.reCache=true;
		this._repaint=1;
	}

	/**
	*<p>设置对象在自身坐标系下的边界范围。与 <code>getSelfBounds</code> 对应。当 autoSize==true 时，会影响对象宽高。设置后，当需要获取自身边界范围时，就不再需要计算，合理使用能提高性能。比如 <code>getBounds</code> 会优先使用 <code>setBounds</code> 指定的值，如果没有指定则进行计算，此计算会对性能消耗比较大。</p>
	*<p><b>注意：</b> <code>setBounds</code> 与 <code>getBounds</code> 并非对应相等关系， <code>getBounds</code> 获取的是本对象在父容器坐标系下的边界范围，通过设置 <code>setBounds</code> 会影响 <code>getBounds</code> 的结果。</p>
	*@param bound bounds矩形区域
	*/
	__proto.setBounds=function(bound){
		this._set$P("uBounds",bound);
	}

	/**
	*<p>获取本对象在父容器坐标系的矩形显示区域。</p>
	*<p><b>注意：</b> 1.计算量较大，尽量少用，如果需要频繁使用，可以通过手动设置 <code>setBounds</code> 来缓存自身边界信息，从而避免比较消耗性能的计算。2. <code>setBounds</code> 与 <code>getBounds</code> 并非对应相等关系， <code>getBounds</code> 获取的是本对象在父容器坐标系下的边界范围，通过设置 <code>setBounds</code> 会影响 <code>getBounds</code> 的结果。</p>
	*@return 矩形区域。
	*/
	__proto.getBounds=function(){
		if (!this._$P.mBounds)this._set$P("mBounds",new Rectangle());
		return Rectangle._getWrapRec(this._boundPointsToParent(),this._$P.mBounds);
	}

	/**
	*获取对象在自身坐标系的边界范围。与 <code>setBounds</code> 对应。
	*<p><b>注意：</b>计算量较大，尽量少用，如果需要频繁使用，可以提前手动设置 <code>setBounds</code> 来缓存自身边界信息，从而避免比较消耗性能的计算。</p>
	*@return 矩形区域。
	*/
	__proto.getSelfBounds=function(){
		if (this._$P.uBounds)return this._$P.uBounds;
		if (!this._$P.mBounds)this._set$P("mBounds",new Rectangle());
		return Rectangle._getWrapRec(this._getBoundPointsM(false),this._$P.mBounds);
	}

	/**
	*@private
	*获取本对象在父容器坐标系的显示区域多边形顶点列表。
	*当显示对象链中有旋转时，返回多边形顶点列表，无旋转时返回矩形的四个顶点。
	*@param ifRotate （可选）之前的对象链中是否有旋转。
	*@return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。
	*/
	__proto._boundPointsToParent=function(ifRotate){
		(ifRotate===void 0)&& (ifRotate=false);
		var pX=0,pY=0;
		if (this._style){
			pX=this._style._tf.translateX;
			pY=this._style._tf.translateY;
			ifRotate=ifRotate || (this._style._tf.rotate!==0);
			if (this._style.scrollRect){
				pX+=this._style.scrollRect.x;
				pY+=this._style.scrollRect.y;
			}
		};
		var pList=this._getBoundPointsM(ifRotate);
		if (!pList || pList.length < 1)return pList;
		if (pList.length !=8){
			pList=ifRotate ? GrahamScan.scanPList(pList):Rectangle._getWrapRec(pList,Rectangle.TEMP)._getBoundPoints();
		}
		if (!this.transform){
			Utils.transPointList(pList,this._x-pX,this._y-pY);
			return pList;
		};
		var tPoint=Point.TEMP;
		var i=0,len=pList.length;
		for (i=0;i < len;i+=2){
			tPoint.x=pList[i];
			tPoint.y=pList[i+1];
			this.toParentPoint(tPoint);
			pList[i]=tPoint.x;
			pList[i+1]=tPoint.y;
		}
		return pList;
	}

	/**
	*返回此实例中的绘图对象（ <code>Graphics</code> ）的显示区域，不包括子对象。
	*@param realSize （可选）使用图片的真实大小，默认为false
	*@return 一个 Rectangle 对象，表示获取到的显示区域。
	*/
	__proto.getGraphicBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		if (!this._graphics)return Rectangle.TEMP.setTo(0,0,0,0);
		return this._graphics.getBounds(realSize);
	}

	/**
	*@private
	*获取自己坐标系的显示区域多边形顶点列表
	*@param ifRotate （可选）当前的显示对象链是否由旋转
	*@return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。
	*/
	__proto._getBoundPointsM=function(ifRotate){
		(ifRotate===void 0)&& (ifRotate=false);
		if (this._$P.uBounds)return this._$P.uBounds._getBoundPoints();
		if (!this._$P.temBM)this._set$P("temBM",[]);
		if (this.scrollRect){
			var rst=Utils.clearArray(this._$P.temBM);
			var rec=Rectangle.TEMP;
			rec.copyFrom(this.scrollRect);
			Utils.concatArray(rst,rec._getBoundPoints());
			return rst;
		};
		var pList=this._graphics ? this._graphics.getBoundPoints():Utils.clearArray(this._$P.temBM);
		var child;
		var cList;
		var __childs;
		__childs=this._childs;
		for (var i=0,n=__childs.length;i < n;i++){
			child=__childs [i];
			if ((child instanceof laya.display.Sprite )&& child.visible==true){
				cList=child._boundPointsToParent(ifRotate);
				if (cList)
					pList=pList ? Utils.concatArray(pList,cList):cList;
			}
		}
		return pList;
	}

	/**
	*@private
	*获取样式。
	*@return 样式 Style 。
	*/
	__proto.getStyle=function(){
		this._style===Style.EMPTY && (this._style=new Style());
		return this._style;
	}

	/**
	*@private
	*设置样式。
	*@param value 样式。
	*/
	__proto.setStyle=function(value){
		this._style=value;
	}

	/**@private */
	__proto._adjustTransform=function(){
		this._tfChanged=false;
		var style=this._style;
		var tf=style._tf;
		var sx=tf.scaleX,sy=tf.scaleY;
		var m;
		if (tf.rotate || sx!==1 || sy!==1 || tf.skewX || tf.skewY){
			m=this._transform || (this._transform=Matrix.create());
			m.bTransform=true;
			var skx=(tf.rotate-tf.skewX)*0.0174532922222222;
			var sky=(tf.rotate+tf.skewY)*0.0174532922222222;
			var cx=Math.cos(sky);
			var ssx=Math.sin(sky);
			var cy=Math.sin(skx);
			var ssy=Math.cos(skx);
			m.a=sx *cx;
			m.b=sx *ssx;
			m.c=-sy *cy;
			m.d=sy *ssy;
			m.tx=m.ty=0;
			return m;
			}else {
			this._transform && this._transform.destroy();
			this._transform=null;
			this._renderType &=~ /*laya.renders.RenderSprite.TRANSFORM*/0x04;
		}
		return m;
	}

	/**
	*<p>设置坐标位置。相当于分别设置x和y属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pos(...).scale(...);</p>
	*@param x X轴坐标。
	*@param y Y轴坐标。
	*@param speedMode （可选）是否极速模式，正常是调用this.x=value进行赋值，极速模式直接调用内部函数处理，如果未重写x,y属性，建议设置为急速模式性能更高。
	*@return 返回对象本身。
	*/
	__proto.pos=function(x,y,speedMode){
		(speedMode===void 0)&& (speedMode=false);
		if (this._x!==x || this._y!==y){
			if (this.destroyed)return this;
			if (speedMode){
				this._x=x;
				this._y=y;
				this.conchModel && this.conchModel.pos(this._x,this._y);
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
				if (this._$P.maskParent && this._$P.maskParent._repaint===0){
					this._$P.maskParent._repaint=1;
					this._$P.maskParent.parentRepaint();
				}
				}else {
				this.x=x;
				this.y=y;
			}
		}
		return this;
	}

	/**
	*<p>设置轴心点。相当于分别设置pivotX和pivotY属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pivot(...).pos(...);</p>
	*@param x X轴心点。
	*@param y Y轴心点。
	*@return 返回对象本身。
	*/
	__proto.pivot=function(x,y){
		this.pivotX=x;
		this.pivotY=y;
		return this;
	}

	/**
	*<p>设置宽高。相当于分别设置width和height属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.size(...).pos(...);</p>
	*@param width 宽度值。
	*@param hegiht 高度值。
	*@return 返回对象本身。
	*/
	__proto.size=function(width,height){
		this.width=width;
		this.height=height;
		return this;
	}

	/**
	*<p>设置缩放。相当于分别设置scaleX和scaleY属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.scale(...).pos(...);</p>
	*@param scaleX X轴缩放比例。
	*@param scaleY Y轴缩放比例。
	*@param speedMode （可选）是否极速模式，正常是调用this.scaleX=value进行赋值，极速模式直接调用内部函数处理，如果未重写scaleX,scaleY属性，建议设置为急速模式性能更高。
	*@return 返回对象本身。
	*/
	__proto.scale=function(scaleX,scaleY,speedMode){
		(speedMode===void 0)&& (speedMode=false);
		var style=this.getStyle();
		var _tf=style._tf;
		if (_tf.scaleX !=scaleX || _tf.scaleY !=scaleY){
			if (this.destroyed)return this;
			if (speedMode){
				style.setScale(scaleX,scaleY);
				this._tfChanged=true;
				this.conchModel && this.conchModel.scale(scaleX,scaleY);
				this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
				}else {
				this.scaleX=scaleX;
				this.scaleY=scaleY;
			}
		}
		return this;
	}

	/**
	*<p>设置倾斜角度。相当于分别设置skewX和skewY属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.skew(...).pos(...);</p>
	*@param skewX 水平倾斜角度。
	*@param skewY 垂直倾斜角度。
	*@return 返回对象本身
	*/
	__proto.skew=function(skewX,skewY){
		this.skewX=skewX;
		this.skewY=skewY;
		return this;
	}

	/**
	*更新、呈现显示对象。由系统调用。
	*@param context 渲染的上下文引用。
	*@param x X轴坐标。
	*@param y Y轴坐标。
	*/
	__proto.render=function(context,x,y){
		Stat.spriteCount++;
		RenderSprite.renders[this._renderType]._fun(this,context,x+this._x,y+this._y);
		this._repaint=0;
	}

	/**
	*<p>绘制 当前<code>Sprite</code> 到 <code>Canvas</code> 上，并返回一个HtmlCanvas。</p>
	*<p>绘制的结果可以当作图片源，再次绘制到其他Sprite里面，示例：</p>
	*
	*var htmlCanvas:HTMLCanvas=sprite.drawToCanvas(100,100,0,0);//把精灵绘制到canvas上面
	*var texture:Texture=new Texture(htmlCanvas);//使用htmlCanvas创建Texture
	*var sp:Sprite=new Sprite().pos(0,200);//创建精灵并把它放倒200位置
	*sp.graphics.drawTexture(texture);//把截图绘制到精灵上
	*Laya.stage.addChild(sp);//把精灵显示到舞台
	*
	*<p>也可以获取原始图片数据，分享到网上，从而实现截图效果，示例：</p>
	*
	*var htmlCanvas:HTMLCanvas=sprite.drawToCanvas(100,100,0,0);//把精灵绘制到canvas上面
	*
	*htmlCanvas.toBase64("image/png",0.92,function(base64){//webgl和canvas模式下为同步方法，加速器下是异步方法
		*trace(base64);//打印图片base64信息，可以发给服务器或者保存为图片
		*});
	*
	*@param canvasWidth 画布宽度。
	*@param canvasHeight 画布高度。
	*@param x 绘制的 X 轴偏移量。
	*@param y 绘制的 Y 轴偏移量。
	*@return HTMLCanvas 对象。
	*/
	__proto.drawToCanvas=function(canvasWidth,canvasHeight,offsetX,offsetY){
		if (Render.isConchNode){
			var canvas=HTMLCanvas.create("2D");
			var context=new RenderContext(canvasWidth,canvasHeight,canvas);
			context.ctx.setCanvasType(1);
			this.conchModel.drawToCanvas(canvas.source,offsetX,offsetY);
			return canvas;
			}else {
			return RunDriver.drawToCanvas(this,this._renderType,canvasWidth,canvasHeight,offsetX,offsetY);
		}
	}

	/**
	*<p>自定义更新、呈现显示对象。一般用来扩展渲染模式，请合理使用，可能会导致在加速器上无法渲染。</p>
	*<p><b>注意</b>不要在此函数内增加或删除树节点，否则会对树节点遍历造成影响。</p>
	*@param context 渲染的上下文引用。
	*@param x X轴坐标。
	*@param y Y轴坐标。
	*/
	__proto.customRender=function(context,x,y){
		this._renderType |=/*laya.renders.RenderSprite.CUSTOM*/0x400;
	}

	/**
	*@private
	*应用滤镜。
	*/
	__proto._applyFilters=function(){
		if (Render.isWebGL)return;
		var _filters;
		_filters=this._$P.filters;
		if (!_filters || _filters.length < 1)return;
		for (var i=0,n=_filters.length;i < n;i++){
			_filters[i].action.apply(this._$P.cacheCanvas);
		}
	}

	/**
	*@private
	*查看当前原件中是否包含发光滤镜。
	*@return 一个 Boolean 值，表示当前原件中是否包含发光滤镜。
	*/
	__proto._isHaveGlowFilter=function(){
		var i=0,len=0;
		if (this.filters){
			for (i=0;i < this.filters.length;i++){
				if (this.filters[i].type==/*laya.filters.Filter.GLOW*/0x08){
					return true;
				}
			}
		}
		for (i=0,len=this._childs.length;i < len;i++){
			if (this._childs[i]._isHaveGlowFilter()){
				return true;
			}
		}
		return false;
	}

	/**
	*把本地坐标转换为相对stage的全局坐标。
	*@param point 本地坐标点。
	*@param createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
	*@return 转换后的坐标的点。
	*/
	__proto.localToGlobal=function(point,createNewPoint){
		(createNewPoint===void 0)&& (createNewPoint=false);
		if (createNewPoint===true){
			point=new Point(point.x,point.y);
		};
		var ele=this;
		while (ele){
			if (ele==Laya.stage)break ;
			point=ele.toParentPoint(point);
			ele=ele.parent;
		}
		return point;
	}

	/**
	*把stage的全局坐标转换为本地坐标。
	*@param point 全局坐标点。
	*@param createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
	*@return 转换后的坐标的点。
	*/
	__proto.globalToLocal=function(point,createNewPoint){
		(createNewPoint===void 0)&& (createNewPoint=false);
		if (createNewPoint){
			point=new Point(point.x,point.y);
		};
		var ele=this;
		var list=[];
		while (ele){
			if (ele==Laya.stage)break ;
			list.push(ele);
			ele=ele.parent;
		};
		var i=list.length-1;
		while (i >=0){
			ele=list[i];
			point=ele.fromParentPoint(point);
			i--;
		}
		return point;
	}

	/**
	*将本地坐标系坐标转转换到父容器坐标系。
	*@param point 本地坐标点。
	*@return 转换后的点。
	*/
	__proto.toParentPoint=function(point){
		if (!point)return point;
		point.x-=this.pivotX;
		point.y-=this.pivotY;
		if (this.transform){
			this._transform.transformPoint(point);
		}
		point.x+=this._x;
		point.y+=this._y;
		var scroll=this._style.scrollRect;
		if (scroll){
			point.x-=scroll.x;
			point.y-=scroll.y;
		}
		return point;
	}

	/**
	*将父容器坐标系坐标转换到本地坐标系。
	*@param point 父容器坐标点。
	*@return 转换后的点。
	*/
	__proto.fromParentPoint=function(point){
		if (!point)return point;
		point.x-=this._x;
		point.y-=this._y;
		var scroll=this._style.scrollRect;
		if (scroll){
			point.x+=scroll.x;
			point.y+=scroll.y;
		}
		if (this.transform){
			this._transform.invertTransformPoint(point);
		}
		point.x+=this.pivotX;
		point.y+=this.pivotY;
		return point;
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.on=function(type,caller,listener,args){
		if (this._mouseEnableState!==1 && this.isMouseEvent(type)){
			this.mouseEnabled=true;
			this._setBit(/*laya.display.Node.MOUSEENABLE*/0x2,true);
			if (this._parent){
				this._$2__onDisplay();
			}
			return this._createListener(type,caller,listener,args,false);
		}
		return _super.prototype.on.call(this,type,caller,listener,args);
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.once=function(type,caller,listener,args){
		if (this._mouseEnableState!==1 && this.isMouseEvent(type)){
			this.mouseEnabled=true;
			this._setBit(/*laya.display.Node.MOUSEENABLE*/0x2,true);
			if (this._parent){
				this._$2__onDisplay();
			}
			return this._createListener(type,caller,listener,args,true);
		}
		return _super.prototype.once.call(this,type,caller,listener,args);
	}

	/**@private */
	__proto._$2__onDisplay=function(){
		if (this._mouseEnableState!==1){
			var ele=this;
			ele=ele.parent;
			while (ele && ele._mouseEnableState!==1){
				if (ele._getBit(/*laya.display.Node.MOUSEENABLE*/0x2))break ;
				ele.mouseEnabled=true;
				ele._setBit(/*laya.display.Node.MOUSEENABLE*/0x2,true);
				ele=ele.parent;
			}
		}
	}

	/**
	*<p>加载并显示一个图片。功能等同于graphics.loadImage方法。支持异步加载。</p>
	*<p>注意：多次调用loadImage绘制不同的图片，会同时显示。</p>
	*@param url 图片地址。
	*@param x （可选）显示图片的x位置。
	*@param y （可选）显示图片的y位置。
	*@param width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
	*@param height （可选）显示图片的高度，设置为0表示使用图片默认高度。
	*@param complete （可选）加载完成回调。
	*@return 返回精灵对象本身。
	*/
	__proto.loadImage=function(url,x,y,width,height,complete){
		var _$this=this;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		function loaded (tex){
			if (!_$this.destroyed){
				_$this.size(x+(width || tex.width),y+(height || tex.height));
				_$this.repaint();
				complete && complete.runWith(tex);
			}
		}
		this.graphics.loadImage(url,x,y,width,height,loaded);
		return this;
	}

	/**cacheAs后，设置自己和父对象缓存失效。*/
	__proto.repaint=function(){
		this.conchModel && this.conchModel.repaint && this.conchModel.repaint();
		if (this._repaint===0){
			this._repaint=1;
			this.parentRepaint();
		}
		if (this._$P && this._$P.maskParent){
			this._$P.maskParent.repaint();
		}
	}

	/**
	*@private
	*获取是否重新缓存。
	*@return 如果重新缓存值为 true，否则值为 false。
	*/
	__proto._needRepaint=function(){
		return (this._repaint!==0)&& this._$P.cacheCanvas && this._$P.cacheCanvas.reCache;
	}

	/**@private */
	__proto._childChanged=function(child){
		if (this._childs.length)this._renderType |=/*laya.renders.RenderSprite.CHILDS*/0x800;
		else this._renderType &=~ /*laya.renders.RenderSprite.CHILDS*/0x800;
		if (child && this._get$P("hasZorder"))Laya.timer.callLater(this,this.updateZOrder);
		this.repaint();
	}

	/**cacheAs时，设置所有父对象缓存失效。 */
	__proto.parentRepaint=function(){
		var p=this._parent;
		if (p && p._repaint===0){
			p._repaint=1;
			p.parentRepaint();
		}
	}

	/**
	*开始拖动此对象。
	*@param area （可选）拖动区域，此区域为当前对象注册点活动区域（不包括对象宽高），可选。
	*@param hasInertia （可选）鼠标松开后，是否还惯性滑动，默认为false，可选。
	*@param elasticDistance （可选）橡皮筋效果的距离值，0为无橡皮筋效果，默认为0，可选。
	*@param elasticBackTime （可选）橡皮筋回弹时间，单位为毫秒，默认为300毫秒，可选。
	*@param data （可选）拖动事件携带的数据，可选。
	*@param disableMouseEvent （可选）禁用其他对象的鼠标检测，默认为false，设置为true能提高性能。
	*@param ratio （可选）惯性阻尼系数，影响惯性力度和时长。
	*/
	__proto.startDrag=function(area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio){
		(hasInertia===void 0)&& (hasInertia=false);
		(elasticDistance===void 0)&& (elasticDistance=0);
		(elasticBackTime===void 0)&& (elasticBackTime=300);
		(disableMouseEvent===void 0)&& (disableMouseEvent=false);
		(ratio===void 0)&& (ratio=0.92);
		this._$P.dragging || (this._set$P("dragging",new Dragging()));
		this._$P.dragging.start(this,area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio);
	}

	/**停止拖动此对象。*/
	__proto.stopDrag=function(){
		this._$P.dragging && this._$P.dragging.stop();
	}

	__proto._releaseMem=function(){
		if (!this._$P)return;
		var cc=this._$P.cacheCanvas;
		if (cc && cc.ctx){
			Pool.recover("RenderContext",cc.ctx);
			cc.ctx.canvas.size(0,0);
			cc.ctx=null;
		};
		var fc=this._$P._filterCache;
		if (fc){
			fc.destroy();
			fc.recycle();
			this._set$P('_filterCache',null);
		}
		this._$P._isHaveGlowFilter && this._set$P('_isHaveGlowFilter',false);
		this._$P._isHaveGlowFilter=null;
	}

	/**@private */
	__proto._setDisplay=function(value){
		if (!value)this._releaseMem();
		_super.prototype._setDisplay.call(this,value);
	}

	/**
	*检测某个点是否在此对象内。
	*@param x 全局x坐标。
	*@param y 全局y坐标。
	*@return 表示是否在对象内。
	*/
	__proto.hitTestPoint=function(x,y){
		var point=this.globalToLocal(Point.TEMP.setTo(x,y));
		x=point.x;
		y=point.y;
		var rect=this._$P.hitArea ? this._$P.hitArea :(this._width > 0 && this._height > 0)? Rectangle.TEMP.setTo(0,0,this._width,this._height):this.getSelfBounds();
		return rect.contains(x,y);
	}

	/**获得相对于本对象上的鼠标坐标信息。*/
	__proto.getMousePoint=function(){
		return this.globalToLocal(Point.TEMP.setTo(Laya.stage.mouseX,Laya.stage.mouseY));
	}

	/**@private */
	__proto._getWords=function(){
		return null;
	}

	/**@private */
	__proto._addChildsToLayout=function(out){
		var words=this._getWords();
		if (words==null && this._childs.length==0)return false;
		if (words){
			for (var i=0,n=words.length;i < n;i++){
				out.push(words[i]);
			}
		}
		this._childs.forEach(function(o,index,array){
			o._style._enableLayout()&& o._addToLayout(out);
		});
		return true;
	}

	/**@private */
	__proto._addToLayout=function(out){
		if (this._style.absolute)return;
		this._style.block ? out.push(this):(this._addChildsToLayout(out)&& (this.x=this.y=0));
	}

	/**@private */
	__proto._isChar=function(){
		return false;
	}

	/**@private */
	__proto._getCSSStyle=function(){
		return this._style.getCSSStyle();
	}

	/**
	*@private
	*设置指定属性名的属性值。
	*@param name 属性名。
	*@param value 属性值。
	*/
	__proto._setAttributes=function(name,value){
		switch (name){
			case 'x':
				this.x=parseFloat(value);
				break ;
			case 'y':
				this.y=parseFloat(value);
				break ;
			case 'width':
				this.width=parseFloat(value);
				break ;
			case 'height':
				this.height=parseFloat(value);
				break ;
			default :
				this[name]=value;
			}
	}

	/**
	*@private
	*/
	__proto._layoutLater=function(){
		this.parent && (this.parent)._layoutLater();
	}

	/**
	*<p>指定是否对使用了 scrollRect 的显示对象进行优化处理。默认为false(不优化)。</p>
	*<p>当值为ture时：将对此对象使用了scrollRect 设定的显示区域以外的显示内容不进行渲染，以提高性能(如果子对象有旋转缩放或者中心点偏移，则显示筛选会不精确)。</p>
	*/
	__getset(0,__proto,'optimizeScrollRect',function(){
		return this._optimizeScrollRect;
		},function(b){
		if (this._optimizeScrollRect !=b){
			this._optimizeScrollRect=b;
			this.conchModel && this.conchModel.optimizeScrollRect(b);
		}
	});

	/**
	*设置是否开启自定义渲染，只有开启自定义渲染，才能使用customRender函数渲染。
	*/
	__getset(0,__proto,'customRenderEnable',null,function(b){
		if (b){
			this._renderType |=/*laya.renders.RenderSprite.CUSTOM*/0x400;
			if (Render.isConchNode){
				Sprite.CustomList.push(this);
				var canvas=new HTMLCanvas("2d");
				canvas._setContext(/*__JS__ */new CanvasRenderingContext2D());
				/*__JS__ */this.customContext=new RenderContext(0,0,canvas);
				canvas.context.setCanvasType && canvas.context.setCanvasType(2);
				this.conchModel.custom(canvas.context);
			}
		}
	});

	/**
	*指定显示对象是否缓存为静态图像。功能同cacheAs的normal模式。建议优先使用cacheAs代替。
	*/
	__getset(0,__proto,'cacheAsBitmap',function(){
		return this.cacheAs!=="none";
		},function(value){
		this.cacheAs=value ? (this._$P["hasFilter"] ? "none" :"normal"):"none";
	});

	/**
	*<p>指定显示对象是否缓存为静态图像，cacheAs时，子对象发生变化，会自动重新缓存，同时也可以手动调用reCache方法更新缓存。</p>
	*<p>建议把不经常变化的“复杂内容”缓存为静态图像，能极大提高渲染性能。cacheAs有"none"，"normal"和"bitmap"三个值可选。
	*<li>默认为"none"，不做任何缓存。</li>
	*<li>当值为"normal"时，canvas模式下进行画布缓存，webgl模式下进行命令缓存。</li>
	*<li>当值为"bitmap"时，canvas模式下进行依然是画布缓存，webgl模式下使用renderTarget缓存。</li></p>
	*<p>webgl下renderTarget缓存模式缺点：会额外创建renderTarget对象，增加内存开销，缓存面积有最大2048限制，不断重绘时会增加CPU开销。优点：大幅减少drawcall，渲染性能最高。
	*webgl下命令缓存模式缺点：只会减少节点遍历及命令组织，不会减少drawcall数，性能中等。优点：没有额外内存开销，无需renderTarget支持。</p>
	*/
	__getset(0,__proto,'cacheAs',function(){
		return this._$P.cacheCanvas==null ? "none" :this._$P.cacheCanvas.type;
		},function(value){
		var cacheCanvas=this._$P.cacheCanvas;
		if (value===(cacheCanvas ? cacheCanvas.type :"none"))return;
		if (value!=="none"){
			if (!this._getBit(/*laya.display.Node.NOTICE_DISPLAY*/0x1))this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
			cacheCanvas || (cacheCanvas=this._set$P("cacheCanvas",Pool.getItemByClass("cacheCanvas",Object)));
			cacheCanvas.type=value;
			cacheCanvas.reCache=true;
			this._renderType |=/*laya.renders.RenderSprite.CANVAS*/0x10;
			if (value=="bitmap")this.conchModel && this.conchModel.cacheAs(1);
			this._set$P("cacheForFilters",false);
			}else {
			if (this._$P["_mask"]){
			}else
			if (this._$P["hasFilter"]){
				this._set$P("cacheForFilters",true);
				}else {
				if (cacheCanvas){
					var cc=cacheCanvas;
					if (cc && cc.ctx){
						Pool.recover("RenderContext",cc.ctx);
						cc.ctx.canvas.size(0,0);
						cc.ctx=null;
					}
					Pool.recover("cacheCanvas",cacheCanvas);
				}
				this._$P.cacheCanvas=null;
				this._renderType &=~ /*laya.renders.RenderSprite.CANVAS*/0x10;
				this.conchModel && this.conchModel.cacheAs(0);
			}
		}
		this.repaint();
	});

	/**z排序，更改此值，则会按照值的大小对同一容器的所有对象重新排序。值越大，越靠上。默认为0，则根据添加顺序排序。*/
	__getset(0,__proto,'zOrder',function(){
		return this._zOrder;
		},function(value){
		if (this._zOrder !=value){
			this._zOrder=value;
			this.conchModel && this.conchModel.setZOrder && this.conchModel.setZOrder(value);
			if (this._parent){
				value && this._parent._set$P("hasZorder",true);
				Laya.timer.callLater(this._parent,this.updateZOrder);
			}
		}
	});

	/**旋转角度，默认值为0。以角度为单位。*/
	__getset(0,__proto,'rotation',function(){
		return this._style._tf.rotate;
		},function(value){
		var style=this.getStyle();
		if (style._tf.rotate!==value){
			style.setRotate(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.rotate(value);
			this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**
	*<p>显示对象的宽度，单位为像素，默认为0。</p>
	*<p>此宽度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>
	*<p>可以通过getbounds获取显示对象图像的实际宽度。</p>
	*/
	__getset(0,__proto,'width',function(){
		if (!this.autoSize)return this._width;
		return this.getSelfBounds().width;
		},function(value){
		if (this._width!==value){
			this._width=value;
			this.conchModel && this.conchModel.size(value,this._height)
			this.repaint();
		}
	});

	/**表示显示对象相对于父容器的水平方向坐标值。*/
	__getset(0,__proto,'x',function(){
		return this._x;
		},function(value){
		if (this._x!==value){
			if (this.destroyed)return;
			this._x=value;
			this.conchModel && this.conchModel.pos(value,this._y);
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
			if (this._$P.maskParent && this._$P.maskParent._repaint===0){
				this._$P.maskParent._repaint=1;
				this._$P.maskParent.parentRepaint();
			}
		}
	});

	/**
	*获得相对于stage的全局Y轴缩放值（会叠加父亲节点的缩放值）。
	*/
	__getset(0,__proto,'globalScaleY',function(){
		var scale=1;
		var ele=this;
		while (ele){
			if (ele===Laya.stage)break ;
			scale *=ele.scaleY;
			ele=ele.parent;
		}
		return scale;
	});

	/**
	*<p>可以设置一个Rectangle区域作为点击区域，或者设置一个<code>HitArea</code>实例作为点击区域，HitArea内可以设置可点击和不可点击区域。</p>
	*<p>如果不设置hitArea，则根据宽高形成的区域进行碰撞。</p>
	*/
	__getset(0,__proto,'hitArea',function(){
		return this._$P.hitArea;
		},function(value){
		this._set$P("hitArea",value);
	});

	/**
	*是否静态缓存此对象的当前帧的最终属性。为 true 时，子对象变化时不会自动更新缓存，但是可以通过调用 reCache 方法手动刷新。
	*<b>注意：</b> 1. 设置 cacheAs 为非空和非"none"时才有效。 2. 由于渲染的时机在脚本执行之后，也就是说当前帧渲染的是对象的最终属性，所以如果在当前帧渲染之前、设置静态缓存之后改变对象属性，则最终渲染结果表现的是对象的最终属性。
	*/
	__getset(0,__proto,'staticCache',function(){
		return this._$P.staticCache;
		},function(value){
		this._set$P("staticCache",value);
		if (!value)this.reCache();
	});

	/**设置一个Texture实例，并显示此图片（如果之前有其他绘制，则会被清除掉）。等同于graphics.clear();graphics.drawTexture()*/
	__getset(0,__proto,'texture',function(){
		return this._texture;
		},function(value){
		if (this._texture !=value){
			this._texture=value;
			this.graphics.cleanByTexture(value,0,0);
		}
	});

	/**表示显示对象相对于父容器的垂直方向坐标值。*/
	__getset(0,__proto,'y',function(){
		return this._y;
		},function(value){
		if (this._y!==value){
			if (this.destroyed)return;
			this._y=value;
			this.conchModel && this.conchModel.pos(this._x,value);
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
			if (this._$P.maskParent && this._$P.maskParent._repaint===0){
				this._$P.maskParent._repaint=1;
				this._$P.maskParent.parentRepaint();
			}
		}
	});

	/**
	*<p>显示对象的高度，单位为像素，默认为0。</p>
	*<p>此高度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>
	*<p>可以通过getbounds获取显示对象图像的实际高度。</p>
	*/
	__getset(0,__proto,'height',function(){
		if (!this.autoSize)return this._height;
		return this.getSelfBounds().height;
		},function(value){
		if (this._height!==value){
			this._height=value;
			this.conchModel && this.conchModel.size(this._width,value);
			this.repaint();
		}
	});

	/**指定要使用的混合模式。目前只支持"lighter"。*/
	__getset(0,__proto,'blendMode',function(){
		return this._style.blendMode;
		},function(value){
		this.getStyle().blendMode=value;
		this.conchModel && this.conchModel.blendMode(value);
		if (value && value !="source-over")this._renderType |=/*laya.renders.RenderSprite.BLEND*/0x08;
		else this._renderType &=~ /*laya.renders.RenderSprite.BLEND*/0x08;
		this.parentRepaint();
	});

	/**X轴缩放值，默认值为1。设置为负数，可以实现水平反转效果，比如scaleX=-1。*/
	__getset(0,__proto,'scaleX',function(){
		return this._style._tf.scaleX;
		},function(value){
		var style=this.getStyle();
		if (style._tf.scaleX!==value){
			style.setScaleX(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.scale(value,style._tf.scaleY);
			this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**Y轴缩放值，默认值为1。设置为负数，可以实现垂直反转效果，比如scaleX=-1。*/
	__getset(0,__proto,'scaleY',function(){
		return this._style._tf.scaleY;
		},function(value){
		var style=this.getStyle();
		if (style._tf.scaleY!==value){
			style.setScaleY(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.scale(style._tf.scaleX,value);
			this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**对舞台 <code>stage</code> 的引用。*/
	__getset(0,__proto,'stage',function(){
		return Laya.stage;
	});

	/**水平倾斜角度，默认值为0。以角度为单位。*/
	__getset(0,__proto,'skewX',function(){
		return this._style._tf.skewX;
		},function(value){
		var style=this.getStyle();
		if (style._tf.skewX!==value){
			style.setSkewX(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.skew(value,style._tf.skewY);
			this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**
	*<p>显示对象的滚动矩形范围，具有裁剪效果(如果只想限制子对象渲染区域，请使用viewport)，设置optimizeScrollRect=true，可以优化裁剪区域外的内容不进行渲染。</p>
	*<p> srollRect和viewport的区别：<br/>
	*1.srollRect自带裁剪效果，viewport只影响子对象渲染是否渲染，不具有裁剪效果（性能更高）。<br/>
	*2.设置rect的x,y属性均能实现区域滚动效果，但scrollRect会保持0,0点位置不变。</p>
	*/
	__getset(0,__proto,'scrollRect',function(){
		return this._style.scrollRect;
		},function(value){
		this.getStyle().scrollRect=value;
		this.repaint();
		if (value){
			this._renderType |=/*laya.renders.RenderSprite.CLIP*/0x80;
			this.conchModel && this.conchModel.scrollRect(value.x,value.y,value.width,value.height);
			}else {
			this._renderType &=~ /*laya.renders.RenderSprite.CLIP*/0x80;
			if (this.conchModel){
				if (Sprite.RUNTIMEVERION < "0.9.1")
					this.conchModel.removeType(0x40);
				else
				this.conchModel.removeType(/*laya.renders.RenderSprite.CLIP*/0x80);
			}
		}
	});

	/**垂直倾斜角度，默认值为0。以角度为单位。*/
	__getset(0,__proto,'skewY',function(){
		return this._style._tf.skewY;
		},function(value){
		var style=this.getStyle();
		if (style._tf.skewY!==value){
			style.setSkewY(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.skew(style._tf.skewX,value);
			this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**
	*<p>对象的矩阵信息。通过设置矩阵可以实现节点旋转，缩放，位移效果。</p>
	*<p>矩阵更多信息请参考 <code>Matrix</code></p>
	*/
	__getset(0,__proto,'transform',function(){
		return this._tfChanged ? this._adjustTransform():this._transform;
		},function(value){
		this._tfChanged=false;
		this._transform=value;
		if (value){
			this._x=value.tx;
			this._y=value.ty;
			value.tx=value.ty=0;
			this.conchModel && this.conchModel.transform(value.a,value.b,value.c,value.d,this._x,this._y);
		}
		if (value)this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
		else {
			this._renderType &=~ /*laya.renders.RenderSprite.TRANSFORM*/0x04;
			this.conchModel && this.conchModel.removeType(/*laya.renders.RenderSprite.TRANSFORM*/0x04);
		}
		this.parentRepaint();
	});

	/**X轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/
	__getset(0,__proto,'pivotX',function(){
		return this._style._tf.translateX;
		},function(value){
		this.getStyle().setTranslateX(value);
		this.conchModel && this.conchModel.pivot(value,this._style._tf.translateY);
		this.repaint();
	});

	/**Y轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/
	__getset(0,__proto,'pivotY',function(){
		return this._style._tf.translateY;
		},function(value){
		this.getStyle().setTranslateY(value);
		this.conchModel && this.conchModel.pivot(this._style._tf.translateX,value);
		this.repaint();
	});

	/**透明度，值为0-1，默认值为1，表示不透明。更改alpha值会影响drawcall。*/
	__getset(0,__proto,'alpha',function(){
		return this._style.alpha;
		},function(value){
		if (this._style && this._style.alpha!==value){
			value=value < 0 ? 0 :(value > 1 ? 1 :value);
			this.getStyle().alpha=value;
			this.conchModel && this.conchModel.alpha(value);
			if (value!==1)this._renderType |=/*laya.renders.RenderSprite.ALPHA*/0x02;
			else this._renderType &=~ /*laya.renders.RenderSprite.ALPHA*/0x02;
			this.parentRepaint();
		}
	});

	/**表示是否可见，默认为true。如果设置不可见，节点将不被渲染。*/
	__getset(0,__proto,'visible',function(){
		return this._style.visible;
		},function(value){
		if (this._style && this._style.visible!==value){
			this.getStyle().visible=value;
			this.conchModel && this.conchModel.visible(value);
			this.parentRepaint();
		}
	});

	/**绘图对象。封装了绘制位图和矢量图的接口，Sprite所有的绘图操作都通过Graphics来实现的。*/
	__getset(0,__proto,'graphics',function(){
		return this._graphics || (this.graphics=RunDriver.createGraphics());
		},function(value){
		if (this._graphics)this._graphics._sp=null;
		this._graphics=value;
		if (value){
			this._renderType &=~ /*laya.renders.RenderSprite.IMAGE*/0x01;
			this._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200;
			value._sp=this;
			this.conchModel && this.conchModel.graphics(this._graphics);
			}else {
			this._renderType &=~ /*laya.renders.RenderSprite.GRAPHICS*/0x200;
			this._renderType &=~ /*laya.renders.RenderSprite.IMAGE*/0x01;
			if (this.conchModel){
				if (Sprite.RUNTIMEVERION < "0.9.1")
					this.conchModel.removeType(0x100);
				else
				this.conchModel.removeType(/*laya.renders.RenderSprite.GRAPHICS*/0x200);
			}
		}
		this.repaint();
	});

	/**滤镜集合。可以设置多个滤镜组合。*/
	__getset(0,__proto,'filters',function(){
		return this._$P.filters;
		},function(value){
		value && value.length===0 && (value=null);
		if (this._$P.filters==value)return;
		this._set$P("filters",value ? value.slice():null);
		if (Render.isConchApp){
			if (this.conchModel){
				if (Sprite.RUNTIMEVERION < "0.9.1")
					this.conchModel.removeType(0x10);
				else
				this.conchModel.removeType(/*laya.renders.RenderSprite.FILTERS*/0x20);
			}
			if (this._$P.filters && this._$P.filters.length==1){
				this._$P.filters[0].callNative(this);
			}
		}
		if (Render.isWebGL){
			if (value && value.length){
				this._renderType |=/*laya.renders.RenderSprite.FILTERS*/0x20;
				}else {
				this._renderType &=~ /*laya.renders.RenderSprite.FILTERS*/0x20;
			}
		}
		if (value && value.length > 0){
			if (!this._getBit(/*laya.display.Node.NOTICE_DISPLAY*/0x1))this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
			if (!(Render.isWebGL && value.length==1 && (((value[0])instanceof laya.filters.ColorFilter )))){
				if (this.cacheAs !="bitmap"){
					if (!Render.isConchNode)this.cacheAs="bitmap";
					this._set$P("cacheForFilters",true);
				}
				this._set$P("hasFilter",true);
			}
			}else {
			this._set$P("hasFilter",false);
			if (this._$P["cacheForFilters"] && this.cacheAs=="bitmap"){
				this.cacheAs="none";
			}
		}
		this.repaint();
	});

	__getset(0,__proto,'parent',_super.prototype._$get_parent,function(value){
		Laya.superSet(Node,this,'parent',value);
		if (value && this._getBit(/*laya.display.Node.MOUSEENABLE*/0x2)){
			this._$2__onDisplay();
		}
	});

	/**
	*<p>遮罩，可以设置一个对象(支持位图和矢量图)，根据对象形状进行遮罩显示。</p>
	*<p>【注意】遮罩对象坐标系是相对遮罩对象本身的，和Flash机制不同</p>
	*/
	__getset(0,__proto,'mask',function(){
		return this._$P._mask;
		},function(value){
		if (value && this.mask && this.mask._$P.maskParent)return;
		if (value){
			this.cacheAs="bitmap";
			this._set$P("_mask",value);
			value._set$P("maskParent",this);
			}else {
			this.mask && this.mask._set$P("maskParent",null);
			this._set$P("_mask",value);
			this.cacheAs="none";
		}
		this.conchModel && this.conchModel.mask(value ? value.conchModel :null);
		this._renderType |=/*laya.renders.RenderSprite.MASK*/0x40;
		this.parentRepaint();
	});

	/**
	*是否接受鼠标事件。
	*默认为false，如果监听鼠标事件，则会自动设置本对象及父节点的属性 mouseEnable 的值都为 true（如果父节点手动设置为false，则不会更改）。
	**/
	__getset(0,__proto,'mouseEnabled',function(){
		return this._mouseEnableState > 1;
		},function(value){
		this._mouseEnableState=value ? 2 :1;
	});

	/**
	*获得相对于stage的全局X轴缩放值（会叠加父亲节点的缩放值）。
	*/
	__getset(0,__proto,'globalScaleX',function(){
		var scale=1;
		var ele=this;
		while (ele){
			if (ele===Laya.stage)break ;
			scale *=ele.scaleX;
			ele=ele.parent;
		}
		return scale;
	});

	/**
	*返回鼠标在此对象坐标系上的 X 轴坐标信息。
	*/
	__getset(0,__proto,'mouseX',function(){
		return this.getMousePoint().x;
	});

	/**
	*返回鼠标在此对象坐标系上的 Y 轴坐标信息。
	*/
	__getset(0,__proto,'mouseY',function(){
		return this.getMousePoint().y;
	});

	Sprite.fromImage=function(url){
		return new Sprite().loadImage(url);
	}

	Sprite.CustomList=[];
	__static(Sprite,
	['RUNTIMEVERION',function(){return this.RUNTIMEVERION=/*__JS__ */window.conch?conchConfig.getRuntimeVersion().substr(conchConfig.getRuntimeVersion().lastIndexOf('-')+1):'';}
	]);
	return Sprite;
})(Node)


/**
*@private
*audio标签播放声音的音轨控制
*/
//class laya.media.h5audio.AudioSoundChannel extends laya.media.SoundChannel
var AudioSoundChannel=(function(_super){
	function AudioSoundChannel(audio){
		/**
		*播放用的audio标签
		*/
		this._audio=null;
		this._onEnd=null;
		this._resumePlay=null;
		AudioSoundChannel.__super.call(this);
		this._onEnd=Utils.bind(this.__onEnd,this);
		this._resumePlay=Utils.bind(this.__resumePlay,this);
		audio.addEventListener("ended",this._onEnd);
		this._audio=audio;
	}

	__class(AudioSoundChannel,'laya.media.h5audio.AudioSoundChannel',_super);
	var __proto=AudioSoundChannel.prototype;
	__proto.__onEnd=function(){
		if (this.loops==1){
			if (this.completeHandler){
				Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
				this.completeHandler=null;
			}
			this.stop();
			this.event(/*laya.events.Event.COMPLETE*/"complete");
			return;
		}
		if (this.loops > 0){
			this.loops--;
		}
		this.startTime=0;
		this.play();
	}

	__proto.__resumePlay=function(){
		if(this._audio)this._audio.removeEventListener("canplay",this._resumePlay);
		try {
			this._audio.currentTime=this.startTime;
			Browser.container.appendChild(this._audio);
			this._audio.play();
			}catch (e){
			this.event(/*laya.events.Event.ERROR*/"error");
		}
	}

	/**
	*播放
	*/
	__proto.play=function(){
		this.isStopped=false;
		try {
			this._audio.playbackRate=SoundManager.playbackRate;
			this._audio.currentTime=this.startTime;
			}catch (e){
			this._audio.addEventListener("canplay",this._resumePlay);
			return;
		}
		SoundManager.addChannel(this);
		Browser.container.appendChild(this._audio);
		if("play" in this._audio)
			this._audio.play();
	}

	/**
	*停止播放
	*
	*/
	__proto.stop=function(){
		this.isStopped=true;
		SoundManager.removeChannel(this);
		this.completeHandler=null;
		if (!this._audio)
			return;
		if ("pause" in this._audio)
			if (Render.isConchApp){
			this._audio.stop();
		}
		this._audio.pause();
		this._audio.removeEventListener("ended",this._onEnd);
		this._audio.removeEventListener("canplay",this._resumePlay);
		if (!Browser.onIE){
			if (this._audio!=AudioSound._musicAudio){
				Pool.recover("audio:"+this.url,this._audio);
			}
		}
		Browser.removeElement(this._audio);
		this._audio=null;
	}

	__proto.pause=function(){
		this.isStopped=true;
		SoundManager.removeChannel(this);
		if("pause" in this._audio)
			this._audio.pause();
	}

	__proto.resume=function(){
		if (!this._audio)
			return;
		this.isStopped=false;
		SoundManager.addChannel(this);
		if("play" in this._audio)
			this._audio.play();
	}

	/**
	*当前播放到的位置
	*@return
	*
	*/
	__getset(0,__proto,'position',function(){
		if (!this._audio)
			return 0;
		return this._audio.currentTime;
	});

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		if (!this._audio)
			return 0;
		return this._audio.duration;
	});

	/**
	*设置音量
	*@param v
	*
	*/
	/**
	*获取音量
	*@return
	*
	*/
	__getset(0,__proto,'volume',function(){
		if (!this._audio)return 1;
		return this._audio.volume;
		},function(v){
		if (!this._audio)return;
		this._audio.volume=v;
	});

	return AudioSoundChannel;
})(SoundChannel)


/**
*@private
*web audio api方式播放声音的音轨控制
*/
//class laya.media.webaudio.WebAudioSoundChannel extends laya.media.SoundChannel
var WebAudioSoundChannel=(function(_super){
	function WebAudioSoundChannel(){
		/**
		*声音原始文件数据
		*/
		this.audioBuffer=null;
		/**
		*gain节点
		*/
		this.gain=null;
		/**
		*播放用的数据
		*/
		this.bufferSource=null;
		/**
		*当前时间
		*/
		this._currentTime=0;
		/**
		*当前音量
		*/
		this._volume=1;
		/**
		*播放开始时的时间戳
		*/
		this._startTime=0;
		this._pauseTime=0;
		this._onPlayEnd=null;
		this.context=WebAudioSound.ctx;
		WebAudioSoundChannel.__super.call(this);
		this._onPlayEnd=Utils.bind(this.__onPlayEnd,this);
		if (this.context["createGain"]){
			this.gain=this.context["createGain"]();
			}else {
			this.gain=this.context["createGainNode"]();
		}
	}

	__class(WebAudioSoundChannel,'laya.media.webaudio.WebAudioSoundChannel',_super);
	var __proto=WebAudioSoundChannel.prototype;
	/**
	*播放声音
	*/
	__proto.play=function(){
		SoundManager.addChannel(this);
		this.isStopped=false;
		this._clearBufferSource();
		if (!this.audioBuffer)return;
		var context=this.context;
		var gain=this.gain;
		var bufferSource=context.createBufferSource();
		this.bufferSource=bufferSource;
		bufferSource.buffer=this.audioBuffer;
		bufferSource.connect(gain);
		if (gain)
			gain.disconnect();
		gain.connect(context.destination);
		bufferSource.onended=this._onPlayEnd;
		if (this.startTime >=this.duration)this.startTime=0;
		this._startTime=Browser.now();
		if (this.gain.gain.setTargetAtTime){
			this.gain.gain.setTargetAtTime(this._volume,this.context.currentTime,0.1);
		}else
		this.gain.gain.value=this._volume;
		if (this.loops==0){
			bufferSource.loop=true;
		}
		if (bufferSource.playbackRate.setTargetAtTime){
			bufferSource.playbackRate.setTargetAtTime(SoundManager.playbackRate,this.context.currentTime,0.1)
		}else
		bufferSource.playbackRate.value=SoundManager.playbackRate;
		bufferSource.start(0,this.startTime);
		this._currentTime=0;
	}

	__proto.__onPlayEnd=function(){
		if (this.loops==1){
			if (this.completeHandler){
				Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
				this.completeHandler=null;
			}
			this.stop();
			this.event(/*laya.events.Event.COMPLETE*/"complete");
			return;
		}
		if (this.loops > 0){
			this.loops--;
		}
		this.startTime=0;
		this.play();
	}

	__proto._clearBufferSource=function(){
		if (this.bufferSource){
			var sourceNode=this.bufferSource;
			if (sourceNode.stop){
				sourceNode.stop(0);
				}else {
				sourceNode.noteOff(0);
			}
			sourceNode.disconnect(0);
			sourceNode.onended=null;
			if (!WebAudioSoundChannel._tryCleanFailed)this._tryClearBuffer(sourceNode);
			this.bufferSource=null;
		}
	}

	__proto._tryClearBuffer=function(sourceNode){
		if (!Browser.onMac){
			try{
				sourceNode.buffer=null;
				}catch (e){
				WebAudioSoundChannel._tryCleanFailed=true;
			}
			return;
		}
		try {sourceNode.buffer=WebAudioSound._miniBuffer;}catch (e){WebAudioSoundChannel._tryCleanFailed=true;}
	}

	/**
	*停止播放
	*/
	__proto.stop=function(){
		this._clearBufferSource();
		this.audioBuffer=null;
		if (this.gain)
			this.gain.disconnect();
		this.isStopped=true;
		SoundManager.removeChannel(this);
		this.completeHandler=null;
		if(SoundManager.autoReleaseSound)
			Laya.timer.once(5000,null,SoundManager.disposeSoundIfNotUsed,[this.url],false);
	}

	__proto.pause=function(){
		if (!this.isStopped){
			this._pauseTime=this.position;
		}
		this._clearBufferSource();
		if (this.gain)
			this.gain.disconnect();
		this.isStopped=true;
		SoundManager.removeChannel(this);
		if(SoundManager.autoReleaseSound)
			Laya.timer.once(5000,null,SoundManager.disposeSoundIfNotUsed,[this.url],false);
	}

	__proto.resume=function(){
		this.startTime=this._pauseTime;
		this.play();
	}

	/**
	*获取当前播放位置
	*/
	__getset(0,__proto,'position',function(){
		if (this.bufferSource){
			return (Browser.now()-this._startTime)/ 1000+this.startTime;
		}
		return 0;
	});

	__getset(0,__proto,'duration',function(){
		if (this.audioBuffer){
			return this.audioBuffer.duration;
		}
		return 0;
	});

	/**
	*设置音量
	*/
	/**
	*获取音量
	*/
	__getset(0,__proto,'volume',function(){
		return this._volume;
		},function(v){
		if (this.isStopped){
			return;
		}
		this._volume=v;
		if (this.gain.gain.setTargetAtTime){
			this.gain.gain.setTargetAtTime(v,this.context.currentTime,0.1);
		}else
		this.gain.gain.value=v;
	});

	WebAudioSoundChannel._tryCleanFailed=false;
	return WebAudioSoundChannel;
})(SoundChannel)


/**
*@private
*<code>Bitmap</code> 是图片资源类。
*/
//class laya.resource.Bitmap extends laya.resource.Resource
var Bitmap=(function(_super){
	function Bitmap(){
		/**@private
		*HTML Image或HTML Canvas或WebGL Texture。
		**/
		//this._source=null;
		/**@private 宽度*/
		//this._w=NaN;
		/**@private 高度*/
		//this._h=NaN;
		Bitmap.__super.call(this);
		this._w=0;
		this._h=0;
	}

	__class(Bitmap,'laya.resource.Bitmap',_super);
	var __proto=Bitmap.prototype;
	/***
	*宽度。
	*/
	__getset(0,__proto,'width',function(){
		return this._w;
	});

	/***
	*高度。
	*/
	__getset(0,__proto,'height',function(){
		return this._h;
	});

	/***
	*HTML Image 或 HTML Canvas 或 WebGL Texture 。
	*/
	__getset(0,__proto,'source',function(){
		return this._source;
	});

	return Bitmap;
})(Resource)


/**
*<p>动画播放基类，提供了基础的动画播放控制方法和帧标签事件相关功能。</p>
*<p>可以继承此类，但不要直接实例化此类，因为有些方法需要由子类实现。</p>
*/
//class laya.display.AnimationPlayerBase extends laya.display.Sprite
var AnimationPlayerBase=(function(_super){
	function AnimationPlayerBase(){
		/**
		*是否循环播放，调用play(...)方法时，会将此值设置为指定的参数值。
		*/
		this.loop=false;
		/**
		*<p>播放顺序类型：AnimationPlayerBase.WRAP_POSITIVE为正序播放，AnimationPlayerBase.WRAP_REVERSE为倒序播放，AnimationPlayerBase.WRAP_PINGPONG为pingpong播放(当按指定顺序播放完结尾后，如果继续播发，则会改变播放顺序)。</p>
		*<p>默认为正序播放。</p>
		*/
		this.wrapMode=0;
		/**@private */
		this._index=0;
		/**@private */
		this._count=0;
		/**@private */
		this._isPlaying=false;
		/**@private */
		this._labels=null;
		/**是否是逆序播放*/
		this._isReverse=false;
		/**@private */
		this._frameRateChanged=false;
		/**@private */
		this._controlNode=null;
		/**@private */
		this._actionName=null;
		AnimationPlayerBase.__super.call(this);
		this._interval=Config.animationInterval;
		this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
	}

	__class(AnimationPlayerBase,'laya.display.AnimationPlayerBase',_super);
	var __proto=AnimationPlayerBase.prototype;
	/**
	*<p>开始播放动画。play(...)方法被设计为在创建实例后的任何时候都可以被调用，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否正在播放中，如果是，则进行播放。</p>
	*<p>配合wrapMode属性，可设置动画播放顺序类型。</p>
	*@param start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
	*@param loop （可选）是否循环播放。
	*@param name （可选）动画名称。
	*@param showWarn（可选）是否动画不存在时打印警告
	*/
	__proto.play=function(start,loop,name,showWarn){
		(start===void 0)&& (start=0);
		(loop===void 0)&& (loop=true);
		(name===void 0)&& (name="");
		(showWarn===void 0)&& (showWarn=true);
		this._isPlaying=true;
		this.index=((typeof start=='string'))? this._getFrameByLabel(start):start;
		this.loop=loop;
		this._actionName=name;
		this._isReverse=this.wrapMode==1;
		if (this.interval > 0){
			this.timerLoop(this.interval,this,this._frameLoop,null,true,true);
		}
	}

	/**@private */
	__proto._getFrameByLabel=function(label){
		var i=0;
		for (i=0;i < this._count;i++){
			if (this._labels[i] && (this._labels [i]).indexOf(label)>=0)return i;
		}
		return 0;
	}

	/**@private */
	__proto._frameLoop=function(){
		if (this._isReverse){
			this._index--;
			if (this._index < 0){
				if (this.loop){
					if (this.wrapMode==2){
						this._index=this._count > 0 ? 1 :0;
						this._isReverse=false;
						}else {
						this._index=this._count-1;
					}
					this.event(/*laya.events.Event.COMPLETE*/"complete");
					}else {
					this._index=0;
					this.stop();
					this.event(/*laya.events.Event.COMPLETE*/"complete");
					return;
				}
			}
			}else {
			this._index++;
			if (this._index >=this._count){
				if (this.loop){
					if (this.wrapMode==2){
						this._index=this._count-2 >=0 ? this._count-2 :0;
						this._isReverse=true;
						}else {
						this._index=0;
					}
					this.event(/*laya.events.Event.COMPLETE*/"complete");
					}else {
					this._index--;
					this.stop();
					this.event(/*laya.events.Event.COMPLETE*/"complete");
					return;
				}
			}
		}
		this.index=this._index;
	}

	/**@private */
	__proto._setControlNode=function(node){
		if (this._controlNode){
			this._controlNode.off(/*laya.events.Event.DISPLAY*/"display",this,this._checkResumePlaying);
			this._controlNode.off(/*laya.events.Event.UNDISPLAY*/"undisplay",this,this._checkResumePlaying);
		}
		this._controlNode=node;
		if (node && node !=this){
			node.on(/*laya.events.Event.DISPLAY*/"display",this,this._checkResumePlaying);
			node.on(/*laya.events.Event.UNDISPLAY*/"undisplay",this,this._checkResumePlaying);
		}
	}

	/**@private */
	__proto._setDisplay=function(value){
		_super.prototype._setDisplay.call(this,value);
		this._checkResumePlaying();
	}

	/**@private */
	__proto._checkResumePlaying=function(){
		if (this._isPlaying){
			if (this._controlNode.displayedInStage)this.play(this._index,this.loop,this._actionName);
			else this.clearTimer(this,this._frameLoop);
		}
	}

	/**
	*停止动画播放。
	*/
	__proto.stop=function(){
		this._isPlaying=false;
		this.clearTimer(this,this._frameLoop);
	}

	/**
	*增加一个帧标签到指定索引的帧上。当动画播放到此索引的帧时会派发Event.LABEL事件，派发事件是在完成当前帧画面更新之后。
	*@param label 帧标签名称
	*@param index 帧索引
	*/
	__proto.addLabel=function(label,index){
		if (!this._labels)this._labels={};
		if (!this._labels[index])this._labels[index]=[];
		this._labels[index].push(label);
	}

	/**
	*删除指定的帧标签。
	*@param label 帧标签名称。注意：如果为空，则删除所有帧标签！
	*/
	__proto.removeLabel=function(label){
		if (!label)this._labels=null;
		else if (this._labels){
			for (var name in this._labels){
				this._removeLabelFromLabelList(this._labels[name],label);
			}
		}
	}

	/**@private */
	__proto._removeLabelFromLabelList=function(list,label){
		if (!list)return;
		for (var i=list.length-1;i >=0;i--){
			if (list[i]==label){
				list.splice(i,1);
			}
		}
	}

	/**
	*将动画切换到指定帧并停在那里。
	*@param position 帧索引或帧标签
	*/
	__proto.gotoAndStop=function(position){
		this.index=((typeof position=='string'))? this._getFrameByLabel(position):position;
		this.stop();
	}

	/**
	*@private
	*显示到某帧
	*@param value 帧索引
	*/
	__proto._displayToIndex=function(value){}
	/**
	*停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
	*/
	__proto.clear=function(){
		this.stop();
		this._labels=null;
	}

	/**
	*<p>动画播放的帧间隔时间(单位：毫秒)。默认值依赖于Config.animationInterval=50，通过Config.animationInterval可以修改默认帧间隔时间。</p>
	*<p>要想为某动画设置独立的帧间隔时间，可以使用set interval，注意：如果动画正在播放，设置后会重置帧循环定时器的起始时间为当前时间，也就是说，如果频繁设置interval，会导致动画帧更新的时间间隔会比预想的要慢，甚至不更新。</p>
	*/
	__getset(0,__proto,'interval',function(){
		return this._interval;
		},function(value){
		if (this._interval !=value){
			this._frameRateChanged=true;
			this._interval=value;
			if (this._isPlaying && value > 0){
				this.timerLoop(value,this,this._frameLoop,null,true,true);
			}
		}
	});

	/**
	*是否正在播放中。
	*/
	__getset(0,__proto,'isPlaying',function(){
		return this._isPlaying;
	});

	/**
	*动画当前帧的索引。
	*/
	__getset(0,__proto,'index',function(){
		return this._index;
		},function(value){
		this._index=value;
		this._displayToIndex(value);
		if (this._labels && this._labels[value]){
			var tArr=this._labels[value];
			for (var i=0,len=tArr.length;i < len;i++){
				this.event(/*laya.events.Event.LABEL*/"label",tArr[i]);
			}
		}
	});

	/**
	*当前动画中帧的总数。
	*/
	__getset(0,__proto,'count',function(){
		return this._count;
	});

	AnimationPlayerBase.WRAP_POSITIVE=0;
	AnimationPlayerBase.WRAP_REVERSE=1;
	AnimationPlayerBase.WRAP_PINGPONG=2;
	return AnimationPlayerBase;
})(Sprite)


/**
*<p> <code>Text</code> 类用于创建显示对象以显示文本。</p>
*<p>
*注意：如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。
*</p>
*@example
*package
*{
	*import laya.display.Text;
	*public class Text_Example
	*{
		*public function Text_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*var text:Text=new Text();//创建一个 Text 类的实例对象 text 。
			*text.text="这个是一个 Text 文本示例。";
			*text.color="#008fff";//设置 text 的文本颜色。
			*text.font="Arial";//设置 text 的文本字体。
			*text.bold=true;//设置 text 的文本显示为粗体。
			*text.fontSize=30;//设置 text 的字体大小。
			*text.wordWrap=true;//设置 text 的文本自动换行。
			*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
			*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
			*text.width=300;//设置 text 的宽度。
			*text.height=200;//设置 text 的高度。
			*text.italic=true;//设置 text 的文本显示为斜体。
			*text.borderColor="#fff000";//设置 text 的文本边框颜色。
			*Laya.stage.addChild(text);//将 text 添加到显示列表。
			*}
		*}
	*}
*@example
*Text_Example();
*function Text_Example()
*{
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*onInit();
	*}
*function onInit()
*{
	*var text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
	*text.text="这个是一个 Text 文本示例。";
	*text.color="#008fff";//设置 text 的文本颜色。
	*text.font="Arial";//设置 text 的文本字体。
	*text.bold=true;//设置 text 的文本显示为粗体。
	*text.fontSize=30;//设置 text 的字体大小。
	*text.wordWrap=true;//设置 text 的文本自动换行。
	*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
	*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
	*text.width=300;//设置 text 的宽度。
	*text.height=200;//设置 text 的高度。
	*text.italic=true;//设置 text 的文本显示为斜体。
	*text.borderColor="#fff000";//设置 text 的文本边框颜色。
	*Laya.stage.addChild(text);//将 text 添加到显示列表。
	*}
*@example
*class Text_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*var text:laya.display.Text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
		*text.text="这个是一个 Text 文本示例。";
		*text.color="#008fff";//设置 text 的文本颜色。
		*text.font="Arial";//设置 text 的文本字体。
		*text.bold=true;//设置 text 的文本显示为粗体。
		*text.fontSize=30;//设置 text 的字体大小。
		*text.wordWrap=true;//设置 text 的文本自动换行。
		*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
		*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
		*text.width=300;//设置 text 的宽度。
		*text.height=200;//设置 text 的高度。
		*text.italic=true;//设置 text 的文本显示为斜体。
		*text.borderColor="#fff000";//设置 text 的文本边框颜色。
		*Laya.stage.addChild(text);//将 text 添加到显示列表。
		*}
	*}
*/
//class laya.display.Text extends laya.display.Sprite
var Text=(function(_super){
	function Text(){
		/**@private */
		this._clipPoint=null;
		/**当前使用的位置字体。*/
		this._currBitmapFont=null;
		/**@private 表示文本内容字符串。*/
		this._text=null;
		/**@private 表示文本内容是否发生改变。*/
		this._isChanged=false;
		/**@private 表示文本的宽度，以像素为单位。*/
		this._textWidth=0;
		/**@private 表示文本的高度，以像素为单位。*/
		this._textHeight=0;
		/**@private 存储文字行数信息。*/
		this._lines=[];
		/**@private 保存每行宽度*/
		this._lineWidths=[];
		/**@private 文本的内容位置 X 轴信息。*/
		this._startX=NaN;
		/**@private 文本的内容位置X轴信息。 */
		this._startY=NaN;
		/**@private 当前可视行索引。*/
		this._lastVisibleLineIndex=-1;
		/**@private 当前可视行索引。*/
		this._words=null;
		/**@private */
		this._charSize={};
		/**
		*是否显示下划线。
		*/
		this.underline=false;
		/**
		*下划线的颜色，为null则使用字体颜色。
		*/
		this._underlineColor=null;
		Text.__super.call(this);
		this.overflow=Text.VISIBLE;
		this._style=new CSSStyle(this);
		(this._style).wordWrap=false;
	}

	__class(Text,'laya.display.Text',_super);
	var __proto=Text.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._lines=null;
		if (this._words){
			this._words.length=0;
			this._words=null;
		}
	}

	/**
	*@private
	*@inheritDoc
	*/
	__proto._getBoundPointsM=function(ifRotate){
		(ifRotate===void 0)&& (ifRotate=false);
		var rec=Rectangle.TEMP;
		rec.setTo(0,0,this.width,this.height);
		return rec._getBoundPoints();
	}

	/**
	*@inheritDoc
	*/
	__proto.getGraphicBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		var rec=Rectangle.TEMP;
		rec.setTo(0,0,this.width,this.height);
		return rec;
	}

	/**
	*@private
	*@inheritDoc
	*/
	__proto._getCSSStyle=function(){
		return this._style;
	}

	/**
	*<p>根据指定的文本，从语言包中取当前语言的文本内容。并对此文本中的{i}文本进行替换。</p>
	*<p>设置Text.langPacks语言包后，即可使用lang获取里面的语言</p>
	*<p>例如：
	*<li>（1）text 的值为“我的名字”，先取到这个文本对应的当前语言版本里的值“My name”，将“My name”设置为当前文本的内容。</li>
	*<li>（2）text 的值为“恭喜你赢得{0}个钻石，{1}经验。”，arg1 的值为100，arg2 的值为200。
	*则先取到这个文本对应的当前语言版本里的值“Congratulations on your winning {0}diamonds,{1}experience.”，
	*然后将文本里的{0}、{1}，依据括号里的数字从0开始替换为 arg1、arg2 的值。
	*将替换处理后的文本“Congratulations on your winning 100 diamonds,200 experience.”设置为当前文本的内容。
	*</li>
	*</p>
	*@param text 文本内容。
	*@param ...args 文本替换参数。
	*/
	__proto.lang=function(text,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10){
		text=Text.langPacks && Text.langPacks[text] ? Text.langPacks[text] :text;
		if (arguments.length < 2){
			this._text=text;
			}else {
			for (var i=0,n=arguments.length;i < n;i++){
				text=text.replace("{"+i+"}",arguments[i+1]);
			}
			this._text=text;
		}
	}

	/**
	*@private
	*/
	__proto._isPassWordMode=function(){
		var style=this._style;
		var password=style.password;
		if (("prompt" in this)&& this['prompt']==this._text)
			password=false;
		return password;
	}

	/**
	*@private
	*/
	__proto._getPassWordTxt=function(txt){
		var len=txt.length;
		var word;
		word="";
		for (var j=len;j > 0;j--){
			word+="●";
		}
		return word;
	}

	/**
	*渲染文字。
	*@param begin 开始渲染的行索引。
	*@param visibleLineCount 渲染的行数。
	*/
	__proto.renderText=function(begin,visibleLineCount){
		var graphics=this.graphics;
		graphics.clear(true);
		var ctxFont=(this.italic ? "italic " :"")+(this.bold ? "bold " :"")+this.fontSize+"px "+(Browser.onIPhone ? (laya.display.Text._fontFamilyMap[this.font] || this.font):this.font);
		Browser.context.font=ctxFont;
		var padding=this.padding;
		var startX=padding[3];
		var textAlgin="left";
		var lines=this._lines;
		var lineHeight=this.leading+this._charSize.height;
		var tCurrBitmapFont=this._currBitmapFont;
		if (tCurrBitmapFont){
			lineHeight=this.leading+tCurrBitmapFont.getMaxHeight();
		};
		var startY=padding[0];
		if ((!tCurrBitmapFont)&& this._width > 0 && this._textWidth <=this._width){
			if (this.align=="right"){
				textAlgin="right";
				startX=this._width-padding[1];
				}else if (this.align=="center"){
				textAlgin="center";
				startX=this._width *0.5+padding[3]-padding[1];
			}
		}
		if (this._height > 0){
			var tempVAlign=(this._textHeight > this._height)? "top" :this.valign;
			if (tempVAlign==="middle")
				startY=(this._height-visibleLineCount *lineHeight)*0.5+padding[0]-padding[2];
			else if (tempVAlign==="bottom")
			startY=this._height-visibleLineCount *lineHeight-padding[2];
		};
		var style=this._style;
		if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
			var bitmapScale=tCurrBitmapFont.fontSize / this.fontSize;
		}
		if (this._clipPoint){
			graphics.save();
			if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
				var tClipWidth=0;
				var tClipHeight=0;
				this._width ? tClipWidth=(this._width-padding[3]-padding[1]):tClipWidth=this._textWidth;
				this._height ? tClipHeight=(this._height-padding[0]-padding[2]):tClipHeight=this._textHeight;
				tClipWidth *=bitmapScale;
				tClipHeight *=bitmapScale;
				graphics.clipRect(padding[3],padding[0],tClipWidth,tClipHeight);
				}else {
				graphics.clipRect(padding[3],padding[0],this._width ? (this._width-padding[3]-padding[1]):this._textWidth,this._height ? (this._height-padding[0]-padding[2]):this._textHeight);
			}
		};
		var password=style.password;
		if (("prompt" in this)&& this['prompt']==this._text)
			password=false;
		var x=0,y=0;
		var end=Math.min(this._lines.length,visibleLineCount+begin)|| 1;
		for (var i=begin;i < end;i++){
			var word=lines[i];
			var _word;
			if (password){
				var len=word.length;
				word="";
				for (var j=len;j > 0;j--){
					word+="●";
				}
			}
			x=startX-(this._clipPoint ? this._clipPoint.x :0);
			y=startY+lineHeight *i-(this._clipPoint ? this._clipPoint.y :0);
			this.underline && this.drawUnderline(textAlgin,x,y,i);
			if (tCurrBitmapFont){
				var tWidth=this.width;
				if (tCurrBitmapFont.autoScaleSize){
					tWidth=this.width *bitmapScale;
				}
				tCurrBitmapFont.drawText(word,this,x,y,this.align,tWidth);
				}else {
				if (Render.isWebGL){
					this._words || (this._words=[]);
					_word=this._words.length > (i-begin)? this._words[i-begin] :new WordText();
					_word.setText(word);
					}else {
					_word=word;
				}
				style.stroke ? graphics.fillBorderText(_word,x,y,ctxFont,this.color,style.strokeColor,style.stroke,textAlgin):graphics.fillText(_word,x,y,ctxFont,this.color,textAlgin);
			}
		}
		if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
			var tScale=1 / bitmapScale;
			this.scale(tScale,tScale);
		}
		if (this._clipPoint)
			graphics.restore();
		this._startX=startX;
		this._startY=startY;
	}

	/**
	*绘制下划线
	*@param x 本行坐标
	*@param y 本行坐标
	*@param lineIndex 本行索引
	*/
	__proto.drawUnderline=function(align,x,y,lineIndex){
		var lineWidth=this._lineWidths[lineIndex];
		switch (align){
			case 'center':
				x-=lineWidth / 2;
				break ;
			case 'right':
				x-=lineWidth;
				break ;
			case 'left':
			default :
				break ;
			}
		y+=this._charSize.height;
		this._graphics.drawLine(x,y,x+lineWidth,y,this.underlineColor || this.color,1);
	}

	/**
	*<p>排版文本。</p>
	*<p>进行宽高计算，渲染、重绘文本。</p>
	*/
	__proto.typeset=function(){
		this._isChanged=false;
		if (!this._text){
			this._clipPoint=null;
			this._textWidth=this._textHeight=0;
			this.graphics.clear(true);
			return;
		}
		Browser.context.font=this._getCSSStyle().font;
		this._lines.length=0;
		this._lineWidths.length=0;
		if (this._isPassWordMode()){
			this.parseLines(this._getPassWordTxt(this._text));
		}else
		this.parseLines(this._text);
		this.evalTextSize();
		if (this.checkEnabledViewportOrNot())
			this._clipPoint || (this._clipPoint=new Point(0,0));
		else
		this._clipPoint=null;
		var lineCount=this._lines.length;
		if (this.overflow !=Text.VISIBLE){
			var func=this.overflow==Text.HIDDEN ? Math.floor :Math.ceil;
			lineCount=Math.min(lineCount,func((this.height-this.padding[0]-this.padding[2])/ (this.leading+this._charSize.height)));
		};
		var startLine=this.scrollY / (this._charSize.height+this.leading)| 0;
		this.renderText(startLine,lineCount);
		this.repaint();
	}

	__proto.evalTextSize=function(){
		var nw=NaN,nh=NaN;
		nw=Math.max.apply(this,this._lineWidths);
		if (this._currBitmapFont)
			nh=this._lines.length *(this._currBitmapFont.getMaxHeight()+this.leading)+this.padding[0]+this.padding[2];
		else
		nh=this._lines.length *(this._charSize.height+this.leading)+this.padding[0]+this.padding[2];
		if (nw !=this._textWidth || nh !=this._textHeight){
			this._textWidth=nw;
			this._textHeight=nh;
			if (!this._width || !this._height)
				this.conchModel && this.conchModel.size(this._width || this._textWidth,this._height || this._textHeight);
		}
	}

	__proto.checkEnabledViewportOrNot=function(){
		return this.overflow==Text.SCROLL && ((this._width > 0 && this._textWidth > this._width)|| (this._height > 0 && this._textHeight > this._height));
	}

	/**
	*<p>快速更改显示文本。不进行排版计算，效率较高。</p>
	*<p>如果只更改文字内容，不更改文字样式，建议使用此接口，能提高效率。</p>
	*@param text 文本内容。
	*/
	__proto.changeText=function(text){
		if (this._text!==text){
			this.lang(text+"");
			if (this._graphics && this._graphics.replaceText(this._text)){
				}else {
				this.typeset();
			}
		}
	}

	/**
	*@private
	*分析文本换行。
	*/
	__proto.parseLines=function(text){
		var needWordWrapOrTruncate=this.wordWrap || this.overflow==Text.HIDDEN;
		if (needWordWrapOrTruncate){
			var wordWrapWidth=this.getWordWrapWidth();
		}
		if (this._currBitmapFont){
			this._charSize.width=this._currBitmapFont.getMaxWidth();
			this._charSize.height=this._currBitmapFont.getMaxHeight();
			}else {
			var measureResult=Browser.context.measureText(Text._testWord);
			if (Render.isConchApp && measureResult.width===0 && measureResult.height===0){
				measureResult=Browser.context.measureText('W');
			}
			this._charSize.width=measureResult.width;
			this._charSize.height=(measureResult.height || this.fontSize);
		};
		var lines=text.replace(/\r\n/g,"\n").split("\n");
		for (var i=0,n=lines.length;i < n;i++){
			var line=lines[i];
			if (needWordWrapOrTruncate)
				this.parseLine(line,wordWrapWidth);
			else {
				this._lineWidths.push(this.getTextWidth(line));
				this._lines.push(line);
			}
		}
	}

	/**
	*@private
	*解析行文本。
	*@param line 某行的文本。
	*@param wordWrapWidth 文本的显示宽度。
	*/
	__proto.parseLine=function(line,wordWrapWidth){
		var ctx=Browser.context;
		var lines=this._lines;
		var maybeIndex=0;
		var execResult;
		var charsWidth=NaN;
		var wordWidth=NaN;
		var startIndex=0;
		charsWidth=this.getTextWidth(line);
		if (charsWidth <=wordWrapWidth){
			lines.push(line);
			this._lineWidths.push(charsWidth);
			return;
		}
		charsWidth=this._charSize.width;
		maybeIndex=Math.floor(wordWrapWidth / charsWidth);
		(maybeIndex==0)&& (maybeIndex=1);
		charsWidth=this.getTextWidth(line.substring(0,maybeIndex));
		wordWidth=charsWidth;
		for (var j=maybeIndex,m=line.length;j < m;j++){
			charsWidth=this.getTextWidth(line.charAt(j));
			wordWidth+=charsWidth;
			if (wordWidth > wordWrapWidth){
				if (this.wordWrap){
					var newLine=line.substring(startIndex,j);
					if (newLine.charCodeAt(newLine.length-1)< 255){
						execResult=/(?:\w|-)+$/.exec(newLine);
						if (execResult){
							j=execResult.index+startIndex;
							if (execResult.index==0)
								j+=newLine.length;
							else
							newLine=line.substring(startIndex,j);
						}
					}else
					if (Text.RightToLeft){
						execResult=/([\u0600-\u06FF])+$/.exec(newLine);
						if(execResult){
							j=execResult.index+startIndex;
							if (execResult.index==0)
								j+=newLine.length;
							else
							newLine=line.substring(startIndex,j);
						}
					}
					lines.push(newLine);
					this._lineWidths.push(wordWidth-charsWidth);
					startIndex=j;
					if (j+maybeIndex < m){
						j+=maybeIndex;
						charsWidth=this.getTextWidth(line.substring(startIndex,j));
						wordWidth=charsWidth;
						j--;
						}else {
						lines.push(line.substring(startIndex,m));
						this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
						startIndex=-1;
						break ;
					}
					}else if (this.overflow==Text.HIDDEN){
					lines.push(line.substring(0,j));
					this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
					return;
				}
			}
		}
		if (this.wordWrap && startIndex !=-1){
			lines.push(line.substring(startIndex,m));
			this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
		}
	}

	__proto.getTextWidth=function(text){
		if (this._currBitmapFont)
			return this._currBitmapFont.getTextWidth(text);
		else
		return Browser.context.measureText(text).width;
	}

	/**
	*获取换行所需的宽度。
	*/
	__proto.getWordWrapWidth=function(){
		var p=this.padding;
		var w=NaN;
		if (this._currBitmapFont && this._currBitmapFont.autoScaleSize)
			w=this._width *(this._currBitmapFont.fontSize / this.fontSize);
		else
		w=this._width;
		if (w <=0){
			w=this.wordWrap ? 100 :Browser.width;
		}
		w <=0 && (w=100);
		return w-p[3]-p[1];
	}

	/**
	*返回字符在本类实例的父坐标系下的坐标。
	*@param charIndex 索引位置。
	*@param out （可选）输出的Point引用。
	*@return Point 字符在本类实例的父坐标系下的坐标。如果out参数不为空，则将结果赋值给指定的Point对象，否则创建一个新的Point对象返回。建议使用Point.TEMP作为out参数，可以省去Point对象创建和垃圾回收的开销，尤其是在需要频繁执行的逻辑中，比如帧循环和MOUSE_MOVE事件回调函数里面。
	*/
	__proto.getCharPoint=function(charIndex,out){
		this._isChanged && Laya.timer.runCallLater(this,this.typeset);
		var len=0,lines=this._lines,startIndex=0;
		for (var i=0,n=lines.length;i < n;i++){
			len+=lines[i].length;
			if (charIndex < len){
				var line=i;
				break ;
			}
			startIndex=len;
		};
		var ctxFont=(this.italic ? "italic " :"")+(this.bold ? "bold " :"")+this.fontSize+"px "+this.font;
		Browser.context.font=ctxFont;
		var width=this.getTextWidth(this._text.substring(startIndex,charIndex));
		var point=out || new Point();
		return point.setTo(this._startX+width-(this._clipPoint ? this._clipPoint.x :0),this._startY+line *(this._charSize.height+this.leading)-(this._clipPoint ? this._clipPoint.y :0));
	}

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'width',function(){
		if (this._width)
			return this._width;
		return this.textWidth+this.padding[1]+this.padding[3];
		},function(value){
		if (value !=this._width){
			Laya.superSet(Sprite,this,'width',value);
			this.isChanged=true;
		}
	});

	/**
	*表示文本的宽度，以像素为单位。
	*/
	__getset(0,__proto,'textWidth',function(){
		this._isChanged && Laya.timer.runCallLater(this,this.typeset);
		return this._textWidth;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'height',function(){
		if (this._height)return this._height;
		return this.textHeight;
		},function(value){
		if (value !=this._height){
			Laya.superSet(Sprite,this,'height',value);
			this.isChanged=true;
		}
	});

	/**
	*表示文本的高度，以像素为单位。
	*/
	__getset(0,__proto,'textHeight',function(){
		this._isChanged && Laya.timer.runCallLater(this,this.typeset);
		return this._textHeight;
	});

	/**
	*<p>边距信息。</p>
	*<p>数据格式：[上边距，右边距，下边距，左边距]（边距以像素为单位）。</p>
	*/
	__getset(0,__proto,'padding',function(){
		return this._getCSSStyle().padding;
		},function(value){
		this._getCSSStyle().padding=value;
		this.isChanged=true;
	});

	/**
	*<p>指定文本是否为粗体字。</p>
	*<p>默认值为 false，这意味着不使用粗体字。如果值为 true，则文本为粗体字。</p>
	*/
	__getset(0,__proto,'bold',function(){
		return this._getCSSStyle().bold;
		},function(value){
		this._getCSSStyle().bold=value;
		this.isChanged=true;
	});

	/**当前文本的内容字符串。*/
	__getset(0,__proto,'text',function(){
		return this._text || "";
		},function(value){
		if (this._text!==value){
			this.lang(value+"");
			this.isChanged=true;
			this.event(/*laya.events.Event.CHANGE*/"change");
		}
	});

	/**
	*<p>表示文本的颜色值。可以通过 <code>Text.defaultColor</code> 设置默认颜色。</p>
	*<p>默认值为黑色。</p>
	*/
	__getset(0,__proto,'color',function(){
		return this._getCSSStyle().color;
		},function(value){
		if (this._getCSSStyle().color !=value){
			this._getCSSStyle().color=value;
			if (!this._isChanged && this._graphics){
				this._graphics.replaceTextColor(this.color)
				}else {
				this.isChanged=true;
			}
		}
	});

	/**
	*<p>文本的字体名称，以字符串形式表示。</p>
	*<p>默认值为："Arial"，可以通过Font.defaultFont设置默认字体。</p>
	*<p>如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。</p>
	*@see laya.display.css.Font#defaultFamily
	*/
	__getset(0,__proto,'font',function(){
		return this._getCSSStyle().fontFamily;
		},function(value){
		if (this._currBitmapFont){
			this._currBitmapFont=null;
			this.scale(1,1);
		}
		if (Text._bitmapFonts && Text._bitmapFonts[value]){
			this._currBitmapFont=Text._bitmapFonts[value];
		}
		this._getCSSStyle().fontFamily=value;
		this.isChanged=true;
	});

	/**
	*<p>指定文本的字体大小（以像素为单位）。</p>
	*<p>默认为20像素，可以通过 <code>Text.defaultSize</code> 设置默认大小。</p>
	*/
	__getset(0,__proto,'fontSize',function(){
		return this._getCSSStyle().fontSize;
		},function(value){
		this._getCSSStyle().fontSize=value;
		this.isChanged=true;
	});

	/**
	*<p>表示使用此文本格式的文本是否为斜体。</p>
	*<p>默认值为 false，这意味着不使用斜体。如果值为 true，则文本为斜体。</p>
	*/
	__getset(0,__proto,'italic',function(){
		return this._getCSSStyle().italic;
		},function(value){
		this._getCSSStyle().italic=value;
		this.isChanged=true;
	});

	/**
	*<p>表示文本的水平显示方式。</p>
	*<p><b>取值：</b>
	*<li>"left"： 居左对齐显示。</li>
	*<li>"center"： 居中对齐显示。</li>
	*<li>"right"： 居右对齐显示。</li>
	*</p>
	*/
	__getset(0,__proto,'align',function(){
		return this._getCSSStyle().align;
		},function(value){
		this._getCSSStyle().align=value;
		this.isChanged=true;
	});

	/**
	*<p>表示文本的垂直显示方式。</p>
	*<p><b>取值：</b>
	*<li>"top"： 居顶部对齐显示。</li>
	*<li>"middle"： 居中对齐显示。</li>
	*<li>"bottom"： 居底部对齐显示。</li>
	*</p>
	*/
	__getset(0,__proto,'valign',function(){
		return this._getCSSStyle().valign;
		},function(value){
		this._getCSSStyle().valign=value;
		this.isChanged=true;
	});

	/**
	*<p>表示文本是否自动换行，默认为false。</p>
	*<p>若值为true，则自动换行；否则不自动换行。</p>
	*/
	__getset(0,__proto,'wordWrap',function(){
		return this._getCSSStyle().wordWrap;
		},function(value){
		this._getCSSStyle().wordWrap=value;
		this.isChanged=true;
	});

	/**
	*垂直行间距（以像素为单位）。
	*/
	__getset(0,__proto,'leading',function(){
		return this._getCSSStyle().leading;
		},function(value){
		this._getCSSStyle().leading=value;
		this.isChanged=true;
	});

	/**
	*文本背景颜色，以字符串表示。
	*/
	__getset(0,__proto,'bgColor',function(){
		return this._getCSSStyle().backgroundColor;
		},function(value){
		this._getCSSStyle().backgroundColor=value;
		this.isChanged=true;
	});

	/**
	*文本边框背景颜色，以字符串表示。
	*/
	__getset(0,__proto,'borderColor',function(){
		return this._getCSSStyle().borderColor;
		},function(value){
		this._getCSSStyle().borderColor=value;
		this.isChanged=true;
	});

	/**
	*<p>描边宽度（以像素为单位）。</p>
	*<p>默认值0，表示不描边。</p>
	*/
	__getset(0,__proto,'stroke',function(){
		return this._getCSSStyle().stroke;
		},function(value){
		this._getCSSStyle().stroke=value;
		this.isChanged=true;
	});

	/**
	*<p>描边颜色，以字符串表示。</p>
	*<p>默认值为 "#000000"（黑色）;</p>
	*/
	__getset(0,__proto,'strokeColor',function(){
		return this._getCSSStyle().strokeColor;
		},function(value){
		this._getCSSStyle().strokeColor=value;
		this.isChanged=true;
	});

	/**
	*一个布尔值，表示文本的属性是否有改变。若为true表示有改变。
	*/
	__getset(0,__proto,'isChanged',null,function(value){
		if (this._isChanged!==value){
			this._isChanged=value;
			value && Laya.timer.callLater(this,this.typeset);
		}
	});

	/**
	*<p>设置横向滚动量。</p>
	*<p>即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。</p>
	*/
	/**
	*获取横向滚动量。
	*/
	__getset(0,__proto,'scrollX',function(){
		if (!this._clipPoint)
			return 0;
		return this._clipPoint.x;
		},function(value){
		if (this.overflow !=Text.SCROLL || (this.textWidth < this._width || !this._clipPoint))
			return;
		value=value < this.padding[3] ? this.padding[3] :value;
		var maxScrollX=this._textWidth-this._width;
		value=value > maxScrollX ? maxScrollX :value;
		var visibleLineCount=this._height / (this._charSize.height+this.leading)| 0+1;
		this._clipPoint.x=value;
		this.renderText(this._lastVisibleLineIndex,visibleLineCount);
	});

	/**
	*设置纵向滚动量（px)。即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。
	*/
	/**
	*获取纵向滚动量。
	*/
	__getset(0,__proto,'scrollY',function(){
		if (!this._clipPoint)
			return 0;
		return this._clipPoint.y;
		},function(value){
		if (this.overflow !=Text.SCROLL || (this.textHeight < this._height || !this._clipPoint))
			return;
		value=value < this.padding[0] ? this.padding[0] :value;
		var maxScrollY=this._textHeight-this._height;
		value=value > maxScrollY ? maxScrollY :value;
		var startLine=value / (this._charSize.height+this.leading)| 0;
		this._lastVisibleLineIndex=startLine;
		var visibleLineCount=(this._height / (this._charSize.height+this.leading)| 0)+1;
		this._clipPoint.y=value;
		this.renderText(startLine,visibleLineCount);
	});

	/**
	*获取横向可滚动最大值。
	*/
	__getset(0,__proto,'maxScrollX',function(){
		return (this.textWidth < this._width)? 0 :this._textWidth-this._width;
	});

	/**
	*获取纵向可滚动最大值。
	*/
	__getset(0,__proto,'maxScrollY',function(){
		return (this.textHeight < this._height)? 0 :this._textHeight-this._height;
	});

	__getset(0,__proto,'lines',function(){
		if (this._isChanged)
			this.typeset();
		return this._lines;
	});

	__getset(0,__proto,'underlineColor',function(){
		return this._underlineColor;
		},function(value){
		this._underlineColor=value;
		this._isChanged=true;
		this.typeset();
	});

	Text.registerBitmapFont=function(name,bitmapFont){
		Text._bitmapFonts || (Text._bitmapFonts={});
		Text._bitmapFonts[name]=bitmapFont;
	}

	Text.unregisterBitmapFont=function(name,destroy){
		(destroy===void 0)&& (destroy=true);
		if (Text._bitmapFonts && Text._bitmapFonts[name]){
			var tBitmapFont=Text._bitmapFonts[name];
			if (destroy){
				tBitmapFont.destroy();
			}
			delete Text._bitmapFonts[name];
		}
	}

	Text.setTextRightToLeft=function(){
		var style;
		style=Browser.canvas.source.style;
		style.display="none";
		style.position="absolute";
		style.direction="rtl";
		Render._mainCanvas.source.style.direction="rtl";
		laya.display.Text.RightToLeft=true;
		Browser.document.body.appendChild(Browser.canvas.source);
	}

	Text.supportFont=function(font){
		Browser.context.font="10px sans-serif";
		var defaultFontWidth=Browser.context.measureText("abcji").width;
		Browser.context.font="10px "+font;
		var customFontWidth=Browser.context.measureText("abcji").width;
		console.log(defaultFontWidth,customFontWidth);
		if (defaultFontWidth===customFontWidth)return false;
		else return true;
	}

	Text._testWord="游";
	Text.langPacks=null;
	Text.VISIBLE="visible";
	Text.SCROLL="scroll";
	Text.HIDDEN="hidden";
	Text.CharacterCache=true;
	Text.RightToLeft=false;
	Text._bitmapFonts=null;
	__static(Text,
	['_fontFamilyMap',function(){return this._fontFamilyMap={"报隶" :"报隶-简","黑体" :"黑体-简","楷体" :"楷体-简","兰亭黑" :"兰亭黑-简","隶变" :"隶变-简","凌慧体" :"凌慧体-简","翩翩体" :"翩翩体-简","苹方" :"苹方-简","手札体" :"手札体-简","宋体" :"宋体-简","娃娃体" :"娃娃体-简","魏碑" :"魏碑-简","行楷" :"行楷-简","雅痞" :"雅痞-简","圆体" :"圆体-简"};}
	]);
	return Text;
})(Sprite)


/**
*<p> <code>Stage</code> 是舞台类，显示列表的根节点，所有显示对象都在舞台上显示。通过 Laya.stage 单例访问。</p>
*<p>Stage提供几种适配模式，不同的适配模式会产生不同的画布大小，画布越大，渲染压力越大，所以要选择合适的适配方案。</p>
*<p>Stage提供不同的帧率模式，帧率越高，渲染压力越大，越费电，合理使用帧率甚至动态更改帧率有利于改进手机耗电。</p>
*/
//class laya.display.Stage extends laya.display.Sprite
var Stage=(function(_super){
	function Stage(){
		/**当前焦点对象，此对象会影响当前键盘事件的派发主体。*/
		this.focus=null;
		/**设计宽度（初始化时设置的宽度Laya.init(width,height)）*/
		this.designWidth=0;
		/**设计高度（初始化时设置的高度Laya.init(width,height)）*/
		this.designHeight=0;
		/**画布是否发生翻转。*/
		this.canvasRotation=false;
		/**画布的旋转角度。*/
		this.canvasDegree=0;
		/**
		*<p>设置是否渲染，设置为false，可以停止渲染，画面会停留到最后一次渲染上，减少cpu消耗，此设置不影响时钟。</p>
		*<p>比如非激活状态，可以设置renderingEnabled=false以节省消耗。</p>
		**/
		this.renderingEnabled=true;
		/**是否启用屏幕适配，可以适配后，在某个时候关闭屏幕适配，防止某些操作导致的屏幕以外改变*/
		this.screenAdaptationEnabled=true;
		/**@private */
		this._screenMode="none";
		/**@private */
		this._scaleMode="noscale";
		/**@private */
		this._alignV="top";
		/**@private */
		this._alignH="left";
		/**@private */
		this._bgColor="black";
		/**@private */
		this._mouseMoveTime=0;
		/**@private */
		this._renderCount=0;
		/**@private */
		this._frameStartTime=NaN;
		/**@private */
		this._isFocused=false;
		/**@private */
		this._isVisibility=false;
		/**@private 3D场景*/
		this._scenes=null;
		/**@private */
		this._frameRate="fast";
		Stage.__super.call(this);
		this.offset=new Point();
		this._canvasTransform=new Matrix();
		this._previousOrientation=Browser.window.orientation;
		var _$this=this;
		this.transform=Matrix.create();
		this._scenes=[];
		this.mouseEnabled=true;
		this.hitTestPrior=true;
		this.autoSize=false;
		this._displayedInStage=true;
		this._isFocused=true;
		this._isVisibility=true;
		var window=Browser.window;
		var _this=this;
		window.addEventListener("focus",function(){
			_$this._isFocused=true;
			_this.event(/*laya.events.Event.FOCUS*/"focus");
			_this.event(/*laya.events.Event.FOCUS_CHANGE*/"focuschange");
		});
		window.addEventListener("blur",function(){
			_$this._isFocused=false;
			_this.event(/*laya.events.Event.BLUR*/"blur");
			_this.event(/*laya.events.Event.FOCUS_CHANGE*/"focuschange");
			if (_this._isInputting())Input["inputElement"].target.focus=false;
		});
		var hidden="hidden",state="visibilityState",visibilityChange="visibilitychange";
		var document=window.document;
		if (typeof document.hidden!=="undefined"){
			visibilityChange="visibilitychange";
			state="visibilityState";
			}else if (typeof document.mozHidden!=="undefined"){
			visibilityChange="mozvisibilitychange";
			state="mozVisibilityState";
			}else if (typeof document.msHidden!=="undefined"){
			visibilityChange="msvisibilitychange";
			state="msVisibilityState";
			}else if (typeof document.webkitHidden!=="undefined"){
			visibilityChange="webkitvisibilitychange";
			state="webkitVisibilityState";
		}
		window.document.addEventListener(visibilityChange,visibleChangeFun);
		function visibleChangeFun (){
			if (Browser.document[state]=="hidden"){
				_this._setStageVisible(false);
				}else {
				_this._setStageVisible(true);
			}
		}
		window.document.addEventListener("qbrowserVisibilityChange",qbroserVisibleChangeFun);
		function qbroserVisibleChangeFun (e){
			_this._setStageVisible(!e.hidden);
		}
		window.addEventListener("resize",function(){
			var orientation=Browser.window.orientation;
			if (orientation !=null && orientation !=_$this._previousOrientation && _this._isInputting()){
				Input["inputElement"].target.focus=false;
			}
			_$this._previousOrientation=orientation;
			if (_this._isInputting())return;
			_this._resetCanvas();
		});
		window.addEventListener("orientationchange",function(e){
			_this._resetCanvas();
		});
		this.on(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this._onmouseMove);
		if (Browser.onMobile)this.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onmouseMove);
	}

	__class(Stage,'laya.display.Stage',_super);
	var __proto=Stage.prototype;
	__proto._setStageVisible=function(value){
		if (this._isVisibility==value)return;
		this._isVisibility=value;
		if (!this._isVisibility)if (this._isInputting())Input["inputElement"].target.focus=false;
		this.event(/*laya.events.Event.VISIBILITY_CHANGE*/"visibilitychange");
	}

	/**
	*@private
	*在移动端输入时，输入法弹出期间不进行画布尺寸重置。
	*/
	__proto._isInputting=function(){
		return (Browser.onMobile && Input.isInputting);
	}

	/**@private */
	__proto._changeCanvasSize=function(){
		this.setScreenSize(Browser.clientWidth *Browser.pixelRatio,Browser.clientHeight *Browser.pixelRatio);
	}

	/**@private */
	__proto._resetCanvas=function(){
		if (!this.screenAdaptationEnabled)return;
		var canvas=Render._mainCanvas;
		var canvasStyle=canvas.source.style;
		canvas.size(1,1);
		Laya.timer.once(100,this,this._changeCanvasSize);
	}

	/**
	*设置屏幕大小，场景会根据屏幕大小进行适配。可以动态调用此方法，来更改游戏显示的大小。
	*@param screenWidth 屏幕宽度。
	*@param screenHeight 屏幕高度。
	*/
	__proto.setScreenSize=function(screenWidth,screenHeight){
		var rotation=false;
		if (this._screenMode!=="none"){
			var screenType=screenWidth / screenHeight < 1 ? "vertical" :"horizontal";
			rotation=screenType!==this._screenMode;
			if (rotation){
				var temp=screenHeight;
				screenHeight=screenWidth;
				screenWidth=temp;
			}
		}
		this.canvasRotation=rotation;
		var canvas=Render._mainCanvas;
		var canvasStyle=canvas.source.style;
		var mat=this._canvasTransform.identity();
		var scaleMode=this._scaleMode;
		var scaleX=screenWidth / this.designWidth;
		var scaleY=screenHeight / this.designHeight;
		var canvasWidth=this.designWidth;
		var canvasHeight=this.designHeight;
		var realWidth=screenWidth;
		var realHeight=screenHeight;
		var pixelRatio=Browser.pixelRatio;
		this._width=this.designWidth;
		this._height=this.designHeight;
		switch (scaleMode){
			case "noscale":
				scaleX=scaleY=1;
				realWidth=this.designWidth;
				realHeight=this.designHeight;
				break ;
			case "showall":
				scaleX=scaleY=Math.min(scaleX,scaleY);
				canvasWidth=realWidth=Math.round(this.designWidth *scaleX);
				canvasHeight=realHeight=Math.round(this.designHeight *scaleY);
				break ;
			case "noborder":
				scaleX=scaleY=Math.max(scaleX,scaleY);
				realWidth=Math.round(this.designWidth *scaleX);
				realHeight=Math.round(this.designHeight *scaleY);
				break ;
			case "full":
				scaleX=scaleY=1;
				this._width=canvasWidth=screenWidth;
				this._height=canvasHeight=screenHeight;
				break ;
			case "fixedwidth":
				scaleY=scaleX;
				this._height=canvasHeight=Math.round(screenHeight / scaleX);
				break ;
			case "fixedheight":
				scaleX=scaleY;
				this._width=canvasWidth=Math.round(screenWidth / scaleY);
				break ;
			case "fixedauto":
				if ((screenWidth / screenHeight)< (this.designWidth / this.designHeight)){
					scaleY=scaleX;
					this._height=canvasHeight=Math.round(screenHeight / scaleX);
					}else {
					scaleX=scaleY;
					this._width=canvasWidth=Math.round(screenWidth / scaleY);
				}
				break ;
			}
		if (this.conchModel)this.conchModel.size(this._width,this._height);
		scaleX *=this.scaleX;
		scaleY *=this.scaleY;
		if (scaleX===1 && scaleY===1){
			this.transform.identity();
			}else {
			this.transform.a=this._formatData(scaleX / (realWidth / canvasWidth));
			this.transform.d=this._formatData(scaleY / (realHeight / canvasHeight));
			this.conchModel && this.conchModel.scale(this.transform.a,this.transform.d);
		}
		canvas.size(canvasWidth,canvasHeight);
		RunDriver.changeWebGLSize(canvasWidth,canvasHeight);
		mat.scale(realWidth / canvasWidth / pixelRatio,realHeight / canvasHeight / pixelRatio);
		if (this._alignH==="left")this.offset.x=0;
		else if (this._alignH==="right")this.offset.x=(screenWidth-realWidth)/pixelRatio;
		else this.offset.x=(screenWidth-realWidth)*0.5 / pixelRatio;
		if (this._alignV==="top")this.offset.y=0;
		else if (this._alignV==="bottom")this.offset.y=(screenHeight-realHeight)/pixelRatio;
		else this.offset.y=(screenHeight-realHeight)*0.5 / pixelRatio;
		this.offset.x=Math.round(this.offset.x);
		this.offset.y=Math.round(this.offset.y);
		mat.translate(this.offset.x,this.offset.y);
		this.canvasDegree=0;
		if (rotation){
			if (this._screenMode==="horizontal"){
				mat.rotate(Math.PI / 2);
				mat.translate(screenHeight / pixelRatio,0);
				this.canvasDegree=90;
				}else {
				mat.rotate(-Math.PI / 2);
				mat.translate(0,screenWidth / pixelRatio);
				this.canvasDegree=-90;
			}
		}
		mat.a=this._formatData(mat.a);
		mat.d=this._formatData(mat.d);
		mat.tx=this._formatData(mat.tx);
		mat.ty=this._formatData(mat.ty);
		canvasStyle.transformOrigin=canvasStyle.webkitTransformOrigin=canvasStyle.msTransformOrigin=canvasStyle.mozTransformOrigin=canvasStyle.oTransformOrigin="0px 0px 0px";
		canvasStyle.transform=canvasStyle.webkitTransform=canvasStyle.msTransform=canvasStyle.mozTransform=canvasStyle.oTransform="matrix("+mat.toString()+")";
		mat.translate(parseInt(canvasStyle.left)|| 0,parseInt(canvasStyle.top)|| 0);
		this.visible=true;
		this._repaint=1;
		this.event(/*laya.events.Event.RESIZE*/"resize");
	}

	/**@private */
	__proto._formatData=function(value){
		if (Math.abs(value)< 0.000001)return 0;
		if (Math.abs(1-value)< 0.001)return value > 0 ? 1 :-1;
		return value;
	}

	/**@inheritDoc */
	__proto.getMousePoint=function(){
		return Point.TEMP.setTo(this.mouseX,this.mouseY);
	}

	/**@inheritDoc */
	__proto.repaint=function(){
		this._repaint=1;
	}

	/**@inheritDoc */
	__proto.parentRepaint=function(){}
	/**@private */
	__proto._loop=function(){
		this.render(Render.context,0,0);
		return true;
	}

	/**@private */
	__proto._onmouseMove=function(e){
		this._mouseMoveTime=Browser.now();
	}

	/**
	*<p>获得距当前帧开始后，过了多少时间，单位为毫秒。</p>
	*<p>可以用来判断函数内时间消耗，通过合理控制每帧函数处理消耗时长，避免一帧做事情太多，对复杂计算分帧处理，能有效降低帧率波动。</p>
	*/
	__proto.getTimeFromFrameStart=function(){
		return Browser.now()-this._frameStartTime;
	}

	/**@inheritDoc */
	__proto.render=function(context,x,y){
		if (this._frameRate==="sleep" && !Render.isConchApp){
			var now=Browser.now();
			if (now-this._frameStartTime >=1000)this._frameStartTime=now;
			else return;
		}
		this._renderCount++;
		Render.isFlash && this.repaint();
		if (!this._style.visible){
			if (this._renderCount % 5===0){
				Stat.loopCount++;
				MouseManager.instance.runEvent();
				Laya.timer._update();
			}
			return;
		}
		this._frameStartTime=Browser.now();
		var frameMode=this._frameRate==="mouse" ? (((this._frameStartTime-this._mouseMoveTime)< 2000)? "fast" :"slow"):this._frameRate;
		var isFastMode=(frameMode!=="slow");
		var isDoubleLoop=(this._renderCount % 2===0);
		Stat.renderSlow=!isFastMode;
		if (isFastMode || isDoubleLoop || Render.isConchApp){
			Stat.loopCount++;
			MouseManager.instance.runEvent();
			Laya.timer._update();
			RunDriver.update3DLoop();
			var scene;
			var i=0,n=0;
			if (Render.isConchNode){
				for (i=0,n=this._scenes.length;i < n;i++){
					scene=this._scenes[i];
					(scene)&& (scene._updateSceneConch());
				}
				}else {
				for (i=0,n=this._scenes.length;i < n;i++){
					scene=this._scenes[i];
					(scene)&& (scene._updateScene());
				}
			}
			if (Render.isConchNode){
				var customList=Sprite["CustomList"];
				for (i=0,n=customList.length;i < n;i++){
					var customItem=customList[i];
					customItem.customRender(customItem.customContext,0,0);
				}
				return;
			}
		}
		if (Render.isConchNode)return;
		if (this.renderingEnabled && (isFastMode || !isDoubleLoop || Render.isConchWebGL)){
			if (Render.isWebGL){
				context.clear();
				_super.prototype.render.call(this,context,x,y);
				Stat._show&& Stat._sp && Stat._sp.render(context,x,y);
				RunDriver.clear(this._bgColor);
				RunDriver.beginFlush();
				context.flush();
				RunDriver.endFinish();
				VectorGraphManager.instance && VectorGraphManager.getInstance().endDispose();
				}else {
				RunDriver.clear(this._bgColor);
				_super.prototype.render.call(this,context,x,y);
				Stat._show&& Stat._sp && Stat._sp.render(context,x,y);
			}
		}
	}

	/**@private */
	__proto._requestFullscreen=function(){
		var element=Browser.document.documentElement;
		if (element.requestFullscreen){
			element.requestFullscreen();
			}else if (element.mozRequestFullScreen){
			element.mozRequestFullScreen();
			}else if (element.webkitRequestFullscreen){
			element.webkitRequestFullscreen();
			}else if (element.msRequestFullscreen){
			element.msRequestFullscreen();
		}
	}

	/**@private */
	__proto._fullScreenChanged=function(){
		Laya.stage.event(/*laya.events.Event.FULL_SCREEN_CHANGE*/"fullscreenchange");
	}

	/**退出全屏模式*/
	__proto.exitFullscreen=function(){
		var document=Browser.document;
		if (document.exitFullscreen){
			document.exitFullscreen();
			}else if (document.mozCancelFullScreen){
			document.mozCancelFullScreen();
			}else if (document.webkitExitFullscreen){
			document.webkitExitFullscreen();
		}
	}

	/**当前视窗由缩放模式导致的 X 轴缩放系数。*/
	__getset(0,__proto,'clientScaleX',function(){
		return this._transform ? this._transform.getScaleX():1;
	});

	//[Deprecated]
	__getset(0,__proto,'desginHeight',function(){
		console.debug("desginHeight已经弃用，请使用designHeight代替");
		return this.designHeight;
	});

	/**帧率类型，支持三种模式：fast-60帧(默认)，slow-30帧，mouse-30帧（鼠标活动后会自动加速到60，鼠标不动2秒后降低为30帧，以节省消耗），sleep-1帧。*/
	__getset(0,__proto,'frameRate',function(){
		return this._frameRate;
		},function(value){
		this._frameRate=value;
		if (Render.isConchApp){
			switch (this._frameRate){
				case "slow":
					Browser.window.conch && Browser.window.conchConfig.setSlowFrame && Browser.window.conchConfig.setSlowFrame(true);
					break ;
				case "fast":
					Browser.window.conch && Browser.window.conchConfig.setSlowFrame && Browser.window.conchConfig.setSlowFrame(false);
					break ;
				case "mouse":
					Browser.window.conch && Browser.window.conchConfig.setMouseFrame && Browser.window.conchConfig.setMouseFrame(2000);
					break ;
				case "sleep":
					Browser.window.conch && Browser.window.conchConfig.setLimitFPS && Browser.window.conchConfig.setLimitFPS(1);
					break ;
				default :
					throw new Error("Stage:frameRate invalid.");
					break ;
				}
		}
	});

	/**当前视窗由缩放模式导致的 Y 轴缩放系数。*/
	__getset(0,__proto,'clientScaleY',function(){
		return this._transform ? this._transform.getScaleY():1;
	});

	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		this.designWidth=value;
		Laya.superSet(Sprite,this,'width',value);
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**
	*<p>水平对齐方式。默认值为"left"。</p>
	*<p><ul>取值范围：
	*<li>"left" ：居左对齐；</li>
	*<li>"center" ：居中对齐；</li>
	*<li>"right" ：居右对齐；</li>
	*</ul></p>
	*/
	__getset(0,__proto,'alignH',function(){
		return this._alignH;
		},function(value){
		this._alignH=value;
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**
	*舞台是否获得焦点。
	*/
	__getset(0,__proto,'isFocused',function(){
		return this._isFocused;
	});

	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		this.designHeight=value;
		Laya.superSet(Sprite,this,'height',value);
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	__getset(0,__proto,'transform',function(){
		if (this._tfChanged)this._adjustTransform();
		return this._transform=this._transform|| Matrix.create();
	},_super.prototype._$set_transform);

	/**
	*舞台是否处于可见状态(是否进入后台)。
	*/
	__getset(0,__proto,'isVisibility',function(){
		return this._isVisibility;
	});

	//[Deprecated]
	__getset(0,__proto,'desginWidth',function(){
		console.debug("desginWidth已经弃用，请使用designWidth代替");
		return this.designWidth;
	});

	/**
	*<p>缩放模式。默认值为 "noscale"。</p>
	*<p><ul>取值范围：
	*<li>"noscale" ：不缩放；</li>
	*<li>"exactfit" ：全屏不等比缩放；</li>
	*<li>"showall" ：最小比例缩放；</li>
	*<li>"noborder" ：最大比例缩放；</li>
	*<li>"full" ：不缩放，stage的宽高等于屏幕宽高；</li>
	*<li>"fixedwidth" ：宽度不变，高度根据屏幕比缩放；</li>
	*<li>"fixedheight" ：高度不变，宽度根据屏幕比缩放；</li>
	*<li>"fixedauto" ：根据宽高比，自动选择使用fixedwidth或fixedheight；</li>
	*</ul></p>
	*/
	__getset(0,__proto,'scaleMode',function(){
		return this._scaleMode;
		},function(value){
		this._scaleMode=value;
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**
	*<p>垂直对齐方式。默认值为"top"。</p>
	*<p><ul>取值范围：
	*<li>"top" ：居顶部对齐；</li>
	*<li>"middle" ：居中对齐；</li>
	*<li>"bottom" ：居底部对齐；</li>
	*</ul></p>
	*/
	__getset(0,__proto,'alignV',function(){
		return this._alignV;
		},function(value){
		this._alignV=value;
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**舞台的背景颜色，默认为黑色，null为透明。*/
	__getset(0,__proto,'bgColor',function(){
		return this._bgColor;
		},function(value){
		this._bgColor=value;
		this.conchModel && this.conchModel.bgColor(value);
		if (Render.isWebGL){
			if (value){
				Stage._wgColor=Color.create(value)._color;
				}else {
				if (!Browser.onMiniGame)Stage._wgColor=null;
			}
		}
		if (Browser.onLimixiu){
			Stage._wgColor=Color.create(value)._color;
		}else
		if (value){
			Render.canvas.style.background=value;
			}else {
			Render.canvas.style.background="none";
		}
	});

	/**鼠标在 Stage 上的 X 轴坐标。*/
	__getset(0,__proto,'mouseX',function(){
		return Math.round(MouseManager.instance.mouseX / this.clientScaleX);
	});

	/**鼠标在 Stage 上的 Y 轴坐标。*/
	__getset(0,__proto,'mouseY',function(){
		return Math.round(MouseManager.instance.mouseY / this.clientScaleY);
	});

	/**
	*<p>场景布局类型。</p>
	*<p><ul>取值范围：
	*<li>"none" ：不更改屏幕</li>
	*<li>"horizontal" ：自动横屏</li>
	*<li>"vertical" ：自动竖屏</li>
	*</ul></p>
	*/
	__getset(0,__proto,'screenMode',function(){
		return this._screenMode;
		},function(value){
		this._screenMode=value;
	});

	__getset(0,__proto,'visible',_super.prototype._$get_visible,function(value){
		if (this.visible!==value){
			Laya.superSet(Sprite,this,'visible',value);
			var style=Render._mainCanvas.source.style;
			style.visibility=value ? "visible" :"hidden";
		}
	});

	/**
	*<p>是否开启全屏，用户点击后进入全屏。</p>
	*<p>兼容性提示：部分浏览器不允许点击进入全屏，比如Iphone等。</p>
	*/
	__getset(0,__proto,'fullScreenEnabled',null,function(value){
		var document=Browser.document;
		var canvas=Render.canvas;
		if (value){
			canvas.addEventListener('mousedown',this._requestFullscreen);
			canvas.addEventListener('touchstart',this._requestFullscreen);
			document.addEventListener("fullscreenchange",this._fullScreenChanged);
			document.addEventListener("mozfullscreenchange",this._fullScreenChanged);
			document.addEventListener("webkitfullscreenchange",this._fullScreenChanged);
			document.addEventListener("msfullscreenchange",this._fullScreenChanged);
			}else {
			canvas.removeEventListener('mousedown',this._requestFullscreen);
			canvas.removeEventListener('touchstart',this._requestFullscreen);
			document.removeEventListener("fullscreenchange",this._fullScreenChanged);
			document.removeEventListener("mozfullscreenchange",this._fullScreenChanged);
			document.removeEventListener("webkitfullscreenchange",this._fullScreenChanged);
			document.removeEventListener("msfullscreenchange",this._fullScreenChanged);
		}
	});

	Stage.SCALE_NOSCALE="noscale";
	Stage.SCALE_EXACTFIT="exactfit";
	Stage.SCALE_SHOWALL="showall";
	Stage.SCALE_NOBORDER="noborder";
	Stage.SCALE_FULL="full";
	Stage.SCALE_FIXED_WIDTH="fixedwidth";
	Stage.SCALE_FIXED_HEIGHT="fixedheight";
	Stage.SCALE_FIXED_AUTO="fixedauto";
	Stage.ALIGN_LEFT="left";
	Stage.ALIGN_RIGHT="right";
	Stage.ALIGN_CENTER="center";
	Stage.ALIGN_TOP="top";
	Stage.ALIGN_MIDDLE="middle";
	Stage.ALIGN_BOTTOM="bottom";
	Stage.SCREEN_NONE="none";
	Stage.SCREEN_HORIZONTAL="horizontal";
	Stage.SCREEN_VERTICAL="vertical";
	Stage.FRAME_FAST="fast";
	Stage.FRAME_SLOW="slow";
	Stage.FRAME_MOUSE="mouse";
	Stage.FRAME_SLEEP="sleep";
	Stage.FRAME_MOUSE_THREDHOLD=2000;
	__static(Stage,
	['_wgColor',function(){return this._wgColor=[0,0,0,1];}
	]);
	return Stage;
})(Sprite)


/**
*@private
*/
//class laya.media.SoundNode extends laya.display.Sprite
var SoundNode=(function(_super){
	function SoundNode(){
		this.url=null;
		this._channel=null;
		this._tar=null;
		this._playEvents=null;
		this._stopEvents=null;
		SoundNode.__super.call(this);
		this.visible=false;
		this.on(/*laya.events.Event.ADDED*/"added",this,this._onParentChange);
		this.on(/*laya.events.Event.REMOVED*/"removed",this,this._onParentChange);
	}

	__class(SoundNode,'laya.media.SoundNode',_super);
	var __proto=SoundNode.prototype;
	/**@private */
	__proto._onParentChange=function(){
		this.target=this.parent;
	}

	/**
	*播放
	*@param loops 循环次数
	*@param complete 完成回调
	*
	*/
	__proto.play=function(loops,complete){
		(loops===void 0)&& (loops=1);
		if (isNaN(loops)){
			loops=1;
		}
		if (!this.url)return;
		this.stop();
		this._channel=SoundManager.playSound(this.url,loops,complete);
	}

	/**
	*停止播放
	*
	*/
	__proto.stop=function(){
		if (this._channel && !this._channel.isStopped){
			this._channel.stop();
		}
		this._channel=null;
	}

	/**@private */
	__proto._setPlayAction=function(tar,event,action,add){
		(add===void 0)&& (add=true);
		if (!this[action])return;
		if (!tar)return;
		if (add){
			tar.on(event,this,this[action]);
			}else {
			tar.off(event,this,this[action]);
		}
	}

	/**@private */
	__proto._setPlayActions=function(tar,events,action,add){
		(add===void 0)&& (add=true);
		if (!tar)return;
		if (!events)return;
		var eventArr=events.split(",");
		var i=0,len=0;
		len=eventArr.length;
		for (i=0;i < len;i++){
			this._setPlayAction(tar,eventArr[i],action,add);
		}
	}

	/**
	*设置触发播放的事件
	*@param events
	*
	*/
	__getset(0,__proto,'playEvent',null,function(events){
		this._playEvents=events;
		if (!events)return;
		if (this._tar){
			this._setPlayActions(this._tar,events,"play");
		}
	});

	/**
	*设置控制播放的对象
	*@param tar
	*
	*/
	__getset(0,__proto,'target',null,function(tar){
		if (this._tar){
			this._setPlayActions(this._tar,this._playEvents,"play",false);
			this._setPlayActions(this._tar,this._stopEvents,"stop",false);
		}
		this._tar=tar;
		if (this._tar){
			this._setPlayActions(this._tar,this._playEvents,"play",true);
			this._setPlayActions(this._tar,this._stopEvents,"stop",true);
		}
	});

	/**
	*设置触发停止的事件
	*@param events
	*
	*/
	__getset(0,__proto,'stopEvent',null,function(events){
		this._stopEvents=events;
		if (!events)return;
		if (this._tar){
			this._setPlayActions(this._tar,events,"stop");
		}
	});

	return SoundNode;
})(Sprite)


/**
*@private
*<code>FileBitmap</code> 是图片文件资源类。
*/
//class laya.resource.FileBitmap extends laya.resource.Bitmap
var FileBitmap=(function(_super){
	function FileBitmap(){
		/**@private 文件路径全名。*/
		this._src=null;
		/**@private onload触发函数*/
		this._onload=null;
		/**@private onerror触发函数*/
		this._onerror=null;
		FileBitmap.__super.call(this);
	}

	__class(FileBitmap,'laya.resource.FileBitmap',_super);
	var __proto=FileBitmap.prototype;
	/**
	*文件路径全名。
	*/
	__getset(0,__proto,'src',function(){
		return this._src;
		},function(value){
		this._src=value;
	});

	/**
	*载入完成处理函数。
	*/
	__getset(0,__proto,'onload',null,function(value){
	});

	/**
	*错误处理函数。
	*/
	__getset(0,__proto,'onerror',null,function(value){
	});

	return FileBitmap;
})(Bitmap)


/**
*<code>HTMLCanvas</code> 是 Html Canvas 的代理类，封装了 Canvas 的属性和方法。。请不要直接使用 new HTMLCanvas！
*/
//class laya.resource.HTMLCanvas extends laya.resource.Bitmap
var HTMLCanvas=(function(_super){
	function HTMLCanvas(type,canvas){
		//this._ctx=null;
		this._is2D=false;
		HTMLCanvas.__super.call(this);
		var _$this=this;
		this._source=this;
		if (type==="2D" || (type==="AUTO" && !Render.isWebGL)){
			this._is2D=true;
			this._source=canvas || Browser.createElement("canvas");
			this._w=this._source.width;
			this._h=this._source.height;
			var o=this;
			o.getContext=function (contextID,other){
				if (_$this._ctx)return _$this._ctx;
				var ctx=_$this._ctx=_$this._source.getContext(contextID,other);
				if (ctx){
					ctx._canvas=o;
					if(!Render.isFlash&&!Browser.onLimixiu)ctx.size=function (w,h){
					};
				}
				return ctx;
			}
		}
		this.lock=true;
	}

	__class(HTMLCanvas,'laya.resource.HTMLCanvas',_super);
	var __proto=HTMLCanvas.prototype;
	/**
	*清空画布内容。
	*/
	__proto.clear=function(){
		this._ctx && this._ctx.clear();
	}

	/**
	*销毁。
	*/
	__proto.destroy=function(){
		this._ctx && this._ctx.destroy();
		this._ctx=null;
		laya.resource.Resource.prototype.destroy.call(this);
	}

	/**
	*释放。
	*/
	__proto.release=function(){}
	/**
	*@private
	*设置 Canvas 渲染上下文。
	*@param context Canvas 渲染上下文。
	*/
	__proto._setContext=function(context){
		this._ctx=context;
	}

	/**
	*获取 Canvas 渲染上下文。
	*@param contextID 上下文ID.
	*@param other
	*@return Canvas 渲染上下文 Context 对象。
	*/
	__proto.getContext=function(contextID,other){
		return this._ctx ? this._ctx :(this._ctx=HTMLCanvas._createContext(this));
	}

	/**
	*获取内存大小。
	*@return 内存大小。
	*/
	__proto.getMemSize=function(){
		return 0;
	}

	/**
	*设置宽高。
	*@param w 宽度。
	*@param h 高度。
	*/
	__proto.size=function(w,h){
		if (this._w !=w || this._h !=h ||(this._source && (this._source.width!=w || this._source.height!=h))){
			this._w=w;
			this._h=h;
			this.memorySize=this._w *this._h *4;
			this._ctx && this._ctx.size(w,h);
			this._source && (this._source.height=h,this._source.width=w);
		}
	}

	__proto.getCanvas=function(){
		return this._source;
	}

	__proto.toBase64=function(type,encoderOptions,callBack){
		if (this._source){
			if (Render.isConchApp && this._source.toBase64){
				this._source.toBase64(type,encoderOptions,callBack);
			}
			else {
				var base64Data=this._source.toDataURL(type,encoderOptions);
				callBack.call(this,base64Data);
			}
		}
	}

	/**
	*Canvas 渲染上下文。
	*/
	__getset(0,__proto,'context',function(){
		return this._ctx;
	});

	/**
	*是否当作 Bitmap 对象。
	*/
	__getset(0,__proto,'asBitmap',null,function(value){
	});

	HTMLCanvas.create=function(type,canvas){
		return new HTMLCanvas(type,canvas);
	}

	HTMLCanvas.TYPE2D="2D";
	HTMLCanvas.TYPE3D="3D";
	HTMLCanvas.TYPEAUTO="AUTO";
	HTMLCanvas._createContext=null;
	return HTMLCanvas;
})(Bitmap)


/**
*@private
*/
//class laya.resource.HTMLSubImage extends laya.resource.Bitmap
var HTMLSubImage=(function(_super){
	//请不要直接使用new HTMLSubImage
	function HTMLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas){
		HTMLSubImage.__super.call(this);
		throw new Error("不允许new！");
	}

	__class(HTMLSubImage,'laya.resource.HTMLSubImage',_super);
	HTMLSubImage.create=function(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas){
		(allowMerageInAtlas===void 0)&& (allowMerageInAtlas=false);
		return new HTMLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas);
	}

	return HTMLSubImage;
})(Bitmap)


/**
*<p> <code>Animation</code> 是Graphics动画类。实现了基于Graphics的动画创建、播放、控制接口。</p>
*<p>本类使用了动画模版缓存池，它以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
*<p>动画模版缓存池，以key-value键值对存储，key可以自定义，也可以从指定的配置文件中读取，value为对应的动画模版，是一个Graphics对象数组，每个Graphics对象对应一个帧图像，动画的播放实质就是定时切换Graphics对象。</p>
*<p>使用set source、loadImages(...)、loadAtlas(...)、loadAnimation(...)方法可以创建动画模版。使用play(...)可以播放指定动画。</p>
*@example <caption>以下示例代码，创建了一个 <code>Text</code> 实例。</caption>
*package
*{
	*import laya.display.Animation;
	*import laya.net.Loader;
	*import laya.utils.Handler;
	*public class Animation_Example
	*{
		*public function Animation_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*init();//初始化
			*}
		*private function init():void
		*{
			*var animation:Animation=new Animation();//创建一个 Animation 类的实例对象 animation 。
			*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
			*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
			*animation.play();//播放动画。
			*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
			*}
		*}
	*}
*
*@example
*Animation_Example();
*function Animation_Example(){
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*init();//初始化
	*}
*function init()
*{
	*var animation=new Laya.Animation();//创建一个 Animation 类的实例对象 animation 。
	*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
	*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
	*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
	*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
	*animation.play();//播放动画。
	*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
	*}
*
*@example
*import Animation=laya.display.Animation;
*class Animation_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.init();
		*}
	*private init():void {
		*var animation:Animation=new Laya.Animation();//创建一个 Animation 类的实例对象 animation 。
		*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
		*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
		*animation.play();//播放动画。
		*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
		*}
	*}
*new Animation_Example();
*/
//class laya.display.Animation extends laya.display.AnimationPlayerBase
var Animation=(function(_super){
	function Animation(){
		/**@private */
		this._frames=null;
		/**@private */
		this._url=null;
		Animation.__super.call(this);
		this._setControlNode(this);
	}

	__class(Animation,'laya.display.Animation',_super);
	var __proto=Animation.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this.stop();
		laya.display.Sprite.prototype.destroy.call(this,destroyChild);
		this._frames=null;
		this._labels=null;
	}

	/**
	*<p>开始播放动画。会在动画模版缓存池中查找key值为name的动画模版，存在则用此动画模版初始化当前序列帧， 如果不存在，则使用当前序列帧。</p>
	*<p>play(...)方法被设计为在创建实例后的任何时候都可以被调用，调用后就处于播放状态，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否处于播放状态，如果是，则开始播放。</p>
	*<p>配合wrapMode属性，可设置动画播放顺序类型。</p>
	*@param start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
	*@param loop （可选）是否循环播放。
	*@param name （可选）动画模板在动画模版缓存池中的key，也可认为是动画名称。如果name为空，则播放当前动画序列帧；如果不为空，则在动画模版缓存池中寻找key值为name的动画模版，如果存在则用此动画模版初始化当前序列帧并播放，如果不存在，则仍然播放当前动画序列帧；如果没有当前动画的帧数据，则不播放，但该实例仍然处于播放状态。
	*@param showWarn（可选）是否动画不存在时打印警告
	*/
	__proto.play=function(start,loop,name,showWarn){
		(start===void 0)&& (start=0);
		(loop===void 0)&& (loop=true);
		(name===void 0)&& (name="");
		(showWarn===void 0)&& (showWarn=true);
		if (name)this._setFramesFromCache(name,showWarn);
		this._isPlaying=true;
		this.index=((typeof start=='string'))? this._getFrameByLabel(start):start;
		this.loop=loop;
		this._actionName=name;
		this._isReverse=this.wrapMode==1;
		if (this._frames && this.interval > 0){
			this.timerLoop(this.interval,this,this._frameLoop,null,true,true);
		}
	}

	/**@private */
	__proto._setFramesFromCache=function(name,showWarn){
		(showWarn===void 0)&& (showWarn=false);
		if (this._url)name=this._url+"#"+name;
		if (name && Animation.framesMap[name]){
			var tAniO;
			tAniO=Animation.framesMap[name];
			if ((tAniO instanceof Array)){
				this._frames=Animation.framesMap[name];
				this._count=this._frames.length;
				}else {
				if (tAniO.nodeRoot){
					Animation.framesMap[name]=this._parseGraphicAnimationByData(tAniO);
					tAniO=Animation.framesMap[name];
				}
				this._frames=tAniO.frames;
				this._count=this._frames.length;
				if (!this._frameRateChanged)this._interval=tAniO.interval;
				this._labels=this._copyLabels(tAniO.labels);
			}
			return true;
			}else {
			if (showWarn)console.log("ani not found:",name);
		}
		return false;
	}

	/**@private */
	__proto._copyLabels=function(labels){
		if (!labels)return null;
		var rst;
		rst={};
		var key;
		for (key in labels){
			rst[key]=Utils.copyArray([],labels[key]);
		}
		return rst;
	}

	/**@private */
	__proto._frameLoop=function(){
		if (this._style.visible && this._style.alpha > 0.01){
			_super.prototype._frameLoop.call(this);
		}
	}

	/**@private */
	__proto._displayToIndex=function(value){
		if (this._frames)this.graphics=this._frames[value];
	}

	/**
	*停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
	*/
	__proto.clear=function(){
		this.stop();
		this.graphics=null;
		this._frames=null;
		this._labels=null;
	}

	/**
	*<p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图片集合并创建动画模版。注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
	*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadImages(...).loadImages(...).play(...);。</p>
	*@param urls 图片路径集合。需要创建动画模版时，会以此为数据源。参数形如：[url1,url2,url3,...]。
	*@param cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
	*@return 返回Animation对象本身。
	*/
	__proto.loadImages=function(urls,cacheName){
		(cacheName===void 0)&& (cacheName="");
		this._url="";
		if (!this._setFramesFromCache(cacheName)){
			this.frames=Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] :Animation.createFrames(urls,cacheName);
		}
		return this;
	}

	/**
	*<p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图集并创建动画模版。</p>
	*<p>注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
	*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadAtlas(...).loadAtlas(...).play(...);。</p>
	*@param url 图集路径。需要创建动画模版时，会以此为数据源。
	*@param loaded （可选）使用指定图集初始化动画完毕的回调。
	*@param cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
	*@return 返回动画本身。
	*/
	__proto.loadAtlas=function(url,loaded,cacheName){
		(cacheName===void 0)&& (cacheName="");
		this._url="";
		var _this_=this;
		function onLoaded (loadUrl){
			if (url===loadUrl){
				_this_.frames=Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] :Animation.createFrames(url,cacheName);
				if (loaded)loaded.run();
			}
		}
		if (!_this_._setFramesFromCache(cacheName)){
			if (Loader.getAtlas(url))onLoaded(url);
			else Laya.loader.load(url,Handler.create(null,onLoaded,[url]),null,/*laya.net.Loader.ATLAS*/"atlas");
		}
		return this;
	}

	/**
	*<p>加载并解析由LayaAir IDE制作的动画文件，此文件中可能包含多个动画。默认帧率为在IDE中设计的帧率，如果调用过set interval，则使用此帧间隔对应的帧率。加载后创建动画模版，并缓存到动画模版缓存池，key "url#动画名称" 对应相应动画名称的动画模板，key "url#" 对应动画模版集合的默认动画模版。</p>
	*<p>注意：如果调用本方法前，还没有预加载动画使用的图集，请将atlas参数指定为对应的图集路径，否则会导致动画创建失败。</p>
	*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadAnimation(...).loadAnimation(...).play(...);。</p>
	*@param url 动画文件路径。可由LayaAir IDE创建并发布。
	*@param loaded （可选）使用指定动画资源初始化动画完毕的回调。
	*@param atlas （可选）动画用到的图集地址（可选）。
	*@return 返回动画本身。
	*/
	__proto.loadAnimation=function(url,loaded,atlas){
		this._url=url;
		var _this_=this;
		if (!this._actionName)this._actionName="";
		if (!_this_._setFramesFromCache("")){
			if (!atlas || Loader.getAtlas(atlas)){
				this._loadAnimationData(url,loaded,atlas);
				}else {
				Laya.loader.load(atlas,Handler.create(this,this._loadAnimationData,[url,loaded,atlas]),null,/*laya.net.Loader.ATLAS*/"atlas")
			}
			}else {
			_this_._setFramesFromCache(this._actionName,true);
			this.index=0;
			if (loaded)loaded.run();
		}
		return this;
	}

	/**@private */
	__proto._loadAnimationData=function(url,loaded,atlas){
		var _$this=this;
		if (atlas && !Loader.getAtlas(atlas)){
			console.warn("atlas load fail:"+atlas);
			return;
		};
		var _this_=this;
		function onLoaded (loadUrl){
			if (!Loader.getRes(loadUrl))return;
			if (url===loadUrl){
				var tAniO;
				if (!Animation.framesMap[url+"#"]){
					var aniData=_this_._parseGraphicAnimation(Loader.getRes(url));
					if (!aniData)return;
					var aniList=aniData.animationList;
					var i=0,len=aniList.length;
					var defaultO;
					for (i=0;i < len;i++){
						tAniO=aniList[i];
						Animation.framesMap[url+"#"+tAniO.name]=tAniO;
						if (!defaultO)defaultO=tAniO;
					}
					if (defaultO){
						Animation.framesMap[url+"#"]=defaultO;
						_this_._setFramesFromCache(_$this._actionName,true);
						_$this.index=0;
					}
					_$this._checkResumePlaying();
					}else {
					_this_._setFramesFromCache(_$this._actionName,true);
					_$this.index=0;
					_$this._checkResumePlaying();
				}
				if (loaded)loaded.run();
			}
		}
		if (Loader.getRes(url))onLoaded(url);
		else Laya.loader.load(url,Handler.create(null,onLoaded,[url]),null,/*laya.net.Loader.JSON*/"json");
		Loader.clearRes(url);
	}

	/**@private */
	__proto._parseGraphicAnimation=function(animationData){
		return GraphicAnimation.parseAnimationData(animationData);
	}

	/**@private */
	__proto._parseGraphicAnimationByData=function(animationObject){
		return GraphicAnimation.parseAnimationByData(animationObject);
	}

	/**
	*当前动画的帧图像数组。本类中，每个帧图像是一个Graphics对象，而动画播放就是定时切换Graphics对象的过程。
	*/
	__getset(0,__proto,'frames',function(){
		return this._frames;
		},function(value){
		this._frames=value;
		if (value){
			this._count=value.length;
			if (this._isPlaying)this.play(this._index,this.loop,this._actionName);
			else this.index=this._index;
		}
	});

	/**
	*是否自动播放，默认为false。如果设置为true，则动画被创建并添加到舞台后自动播放。
	*/
	__getset(0,__proto,'autoPlay',null,function(value){
		if (value)this.play();
		else this.stop();
	});

	/**
	*<p>动画数据源。</p>
	*<p>类型如下：<br/>
	*1. LayaAir IDE动画文件路径：使用此类型需要预加载所需的图集资源，否则会创建失败，如果不想预加载或者需要创建完毕的回调，请使用loadAnimation(...)方法；<br/>
	*2. 图集路径：使用此类型创建的动画模版不会被缓存到动画模版缓存池中，如果需要缓存或者创建完毕的回调，请使用loadAtlas(...)方法；<br/>
	*3. 图片路径集合：使用此类型创建的动画模版不会被缓存到动画模版缓存池中，如果需要缓存，请使用loadImages(...)方法。</p>
	*@param value 数据源。比如：图集："xx/a1.atlas"；图片集合："a1.png,a2.png,a3.png"；LayaAir IDE动画"xx/a1.ani"。
	*/
	__getset(0,__proto,'source',null,function(value){
		if (value.indexOf(".ani")>-1)this.loadAnimation(value);
		else if (value.indexOf(".json")>-1 || value.indexOf("als")>-1 || value.indexOf("atlas")>-1)this.loadAtlas(value);
		else this.loadImages(value.split(","));
	});

	/**
	*设置自动播放的动画名称，在LayaAir IDE中可以创建的多个动画组成的动画集合，选择其中一个动画名称进行播放。
	*/
	__getset(0,__proto,'autoAnimation',null,function(value){
		this.play(0,true,value,false);
	});

	Animation.createFrames=function(url,name){
		var arr,i=0,n=0,g;
		if ((typeof url=='string')){
			var atlas=Loader.getAtlas(url);
			if (atlas && atlas.length){
				arr=[];
				for (i=0,n=atlas.length;i < n;i++){
					g=new RunDriver.createGraphics();
					g.drawTexture(Loader.getRes(atlas[i]),0,0);
					arr.push(g);
				}
			}
			}else if ((url instanceof Array)){
			arr=[];
			for (i=0,n=url.length;i < n;i++){
				g=new RunDriver.createGraphics();
				g.loadImage(url[i],0,0);
				arr.push(g);
			}
		}
		if (name)Animation.framesMap[name]=arr;
		return arr;
	}

	Animation.clearCache=function(key){
		var cache=Animation.framesMap;
		var val;
		var key2=key+"#";
		for (val in cache){
			if (val===key || val.indexOf(key2)==0){
				delete Animation.framesMap[val];
			}
		}
	}

	Animation.framesMap={};
	return Animation;
})(AnimationPlayerBase)


/**
*关键帧动画播放类。
*/
//class laya.display.FrameAnimation extends laya.display.AnimationPlayerBase
var FrameAnimation=(function(_super){
	function FrameAnimation(){
		/**
		*@private
		*id对象表
		*/
		this._targetDic=null;
		/**
		*@private
		*动画数据
		*/
		this._animationData=null;
		/**@private */
		this._animationNewFrames=null;
		FrameAnimation.__super.call(this);
		if (FrameAnimation._sortIndexFun==null){
			FrameAnimation._sortIndexFun=MathUtil.sortByKey("index",false,true);
		}
	}

	__class(FrameAnimation,'laya.display.FrameAnimation',_super);
	var __proto=FrameAnimation.prototype;
	/**
	*@private
	*初始化动画数据
	*@param targetDic 对象表
	*@param animationData 动画数据
	*
	*/
	__proto._setUp=function(targetDic,animationData){
		this._labels=null;
		this._animationNewFrames=null;
		this._targetDic=targetDic;
		this._animationData=animationData;
		this.interval=1000 / animationData.frameRate;
		if (animationData.parsed){
			this._count=animationData.count;
			this._labels=animationData.labels;
			this._animationNewFrames=animationData.animationNewFrames;
			}else {
			this._animationNewFrames=[];
			this._calculateDatas();
		}
		animationData.parsed=true;
		animationData.labels=this._labels;
		animationData.count=this._count;
		animationData.animationNewFrames=this._animationNewFrames;
	}

	/**@inheritDoc */
	__proto.clear=function(){
		_super.prototype.clear.call(this);
		this._targetDic=null;
		this._animationData=null;
	}

	/**@inheritDoc */
	__proto._displayToIndex=function(value){
		if (!this._animationData)return;
		if (value < 0)value=0;
		if (value > this._count)value=this._count;
		var nodes=this._animationData.nodes,i=0,len=nodes.length;
		for (i=0;i < len;i++){
			this._displayNodeToFrame(nodes[i],value);
		}
	}

	/**
	*@private
	*将节点设置到某一帧的状态
	*@param node 节点ID
	*@param frame
	*@param targetDic 节点表
	*
	*/
	__proto._displayNodeToFrame=function(node,frame,targetDic){
		if (!targetDic)targetDic=this._targetDic;
		var target=targetDic[node.target];
		if (!target){
			return;
		};
		var frames=node.frames,key,propFrames,value;
		var keys=node.keys,i=0,len=keys.length;
		for (i=0;i < len;i++){
			key=keys[i];
			propFrames=frames[key];
			if (propFrames.length > frame){
				value=propFrames[frame];
				}else {
				value=propFrames[propFrames.length-1];
			}
			target[key]=value;
		}
	}

	/**
	*@private
	*计算帧数据
	*
	*/
	__proto._calculateDatas=function(){
		if (!this._animationData)return;
		var nodes=this._animationData.nodes,i=0,len=nodes.length,tNode;
		this._count=0;
		for (i=0;i < len;i++){
			tNode=nodes[i];
			this._calculateNodeKeyFrames(tNode);
		}
		this._count+=1;
	}

	/**
	*@private
	*计算某个节点的帧数据
	*@param node
	*
	*/
	__proto._calculateNodeKeyFrames=function(node){
		var keyFrames=node.keyframes,key,tKeyFrames,target=node.target;
		if (!node.frames){
			node.frames={};
		}
		if (!node.keys){
			node.keys=[];
			}else {
			node.keys.length=0;
		}
		if (!node.initValues){
			node.initValues={};
		}
		for (key in keyFrames){
			tKeyFrames=keyFrames[key];
			if (!node.frames[key]){
				node.frames[key]=[];
			}
			if (this._targetDic && this._targetDic[target]){
				node.initValues[key]=this._targetDic[target][key];
			}
			tKeyFrames.sort(FrameAnimation._sortIndexFun);
			node.keys.push(key);
			this._calculateNodePropFrames(tKeyFrames,node.frames[key],key,target);
		}
	}

	/**
	*将动画控制对象还原到动画控制之前的状态
	*/
	__proto.resetToInitState=function(){
		if (!this._targetDic)return;
		if (!this._animationData)return;
		var nodes=this._animationData.nodes,i=0,len=nodes.length;
		var tNode;
		var initValues;
		for (i=0;i < len;i++){
			tNode=nodes[i];
			initValues=tNode.initValues;
			if (!initValues)continue ;
			var target=this._targetDic[tNode.target];
			if (!target)continue ;
			var key;
			for (key in initValues){
				target[key]=initValues[key];
			}
		}
	}

	/**
	*@private
	*计算节点某个属性的帧数据
	*@param keyframes
	*@param frames
	*@param key
	*@param target
	*
	*/
	__proto._calculateNodePropFrames=function(keyframes,frames,key,target){
		var i=0,len=keyframes.length-1;
		frames.length=keyframes[len].index+1;
		for (i=0;i < len;i++){
			this._dealKeyFrame(keyframes[i]);
			this._calculateFrameValues(keyframes[i],keyframes[i+1],frames);
		}
		if (len==0){
			frames[keyframes[0].index]=keyframes[0].value;
			if (this._animationNewFrames)
				this._animationNewFrames[keyframes[0].index]=true;
		}
		this._dealKeyFrame(keyframes[i]);
	}

	/**
	*@private
	*
	*/
	__proto._dealKeyFrame=function(keyFrame){
		if (keyFrame.label && keyFrame.label !="")this.addLabel(keyFrame.label,keyFrame.index);
	}

	/**
	*@private
	*计算两个关键帧直接的帧数据
	*@param startFrame
	*@param endFrame
	*@param result
	*
	*/
	__proto._calculateFrameValues=function(startFrame,endFrame,result){
		var i=0,easeFun;
		var start=startFrame.index,end=endFrame.index;
		var startValue=startFrame.value;
		var dValue=endFrame.value-startFrame.value;
		var dLen=end-start;
		if (end > this._count)this._count=end;
		if (startFrame.tween){
			easeFun=Ease[startFrame.tweenMethod];
			if (easeFun==null){
				easeFun=Ease.linearNone;
			}
			for (i=start;i < end;i++){
				result[i]=easeFun(i-start,startValue,dValue,dLen);
				if (this._animationNewFrames){
					this._animationNewFrames[i]=true;
				}
			}
			}else {
			for (i=start;i < end;i++){
				result[i]=startValue;
			}
		}
		if (this._animationNewFrames){
			this._animationNewFrames[startFrame.index]=true;
			this._animationNewFrames[endFrame.index]=true;
		}
		result[endFrame.index]=endFrame.value;
	}

	FrameAnimation._sortIndexFun=null;
	return FrameAnimation;
})(AnimationPlayerBase)


/**
*<p><code>Input</code> 类用于创建显示对象以显示和输入文本。</p>
*<p>Input 类封装了原生的文本输入框，由于不同浏览器的差异，会导致此对象的默认文本的位置与用户点击输入时的文本的位置有少许的偏差。</p>
*/
//class laya.display.Input extends laya.display.Text
var Input=(function(_super){
	function Input(){
		/**@private */
		this._focus=false;
		/**@private */
		this._multiline=false;
		/**@private */
		this._editable=true;
		/**@private */
		this._restrictPattern=null;
		this._type="text";
		/**输入提示符。*/
		this._prompt='';
		/**输入提示符颜色。*/
		this._promptColor="#A9A9A9";
		this._originColor="#000000";
		this._content='';
		Input.__super.call(this);
		this._maxChars=1E5;
		this._width=100;
		this._height=20;
		this.multiline=false;
		this.overflow=Text.SCROLL;
		this.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onMouseDown);
		this.on(/*laya.events.Event.UNDISPLAY*/"undisplay",this,this._onUnDisplay);
	}

	__class(Input,'laya.display.Input',_super);
	var __proto=Input.prototype;
	/**
	*设置光标位置和选取字符。
	*@param startIndex 光标起始位置。
	*@param endIndex 光标结束位置。
	*/
	__proto.setSelection=function(startIndex,endIndex){
		this.focus=true;
		laya.display.Input.inputElement.selectionStart=startIndex;
		laya.display.Input.inputElement.selectionEnd=endIndex;
	}

	__proto._onUnDisplay=function(e){
		this.focus=false;
	}

	__proto._onMouseDown=function(e){
		this.focus=true;
	}

	/**
	*在输入期间，如果 Input 实例的位置改变，调用_syncInputTransform同步输入框的位置。
	*/
	__proto._syncInputTransform=function(){
		var inputElement=this.nativeInput;
		var transform=Utils.getTransformRelativeToWindow(this,this.padding[3],this.padding[0]);
		var inputWid=this._width-this.padding[1]-this.padding[3];
		var inputHei=this._height-this.padding[0]-this.padding[2];
		if (Render.isConchApp){
			inputElement.setScale(transform.scaleX,transform.scaleY);
			inputElement.setSize(inputWid,inputHei);
			inputElement.setPos(transform.x,transform.y);
			}else {
			Input.inputContainer.style.transform=Input.inputContainer.style.webkitTransform="scale("+transform.scaleX+","+transform.scaleY+") rotate("+(Laya.stage.canvasDegree)+"deg)";
			inputElement.style.width=inputWid+'px';
			inputElement.style.height=inputHei+'px';
			Input.inputContainer.style.left=transform.x+'px';
			Input.inputContainer.style.top=transform.y+'px';
		}
	}

	/**选中当前实例的所有文本。*/
	__proto.select=function(){
		this.nativeInput.select();
	}

	__proto._setInputMethod=function(){
		Input.input.parentElement && (Input.inputContainer.removeChild(Input.input));
		Input.area.parentElement && (Input.inputContainer.removeChild(Input.area));
		Input.inputElement=(this._multiline ? Input.area :Input.input);
		Input.inputContainer.appendChild(Input.inputElement);
		if (Text.RightToLeft){
			Input.inputElement.style.direction="rtl";
		}
	}

	__proto._focusIn=function(){
		laya.display.Input.isInputting=true;
		var input=this.nativeInput;
		this._focus=true;
		var cssStyle=input.style;
		cssStyle.whiteSpace=(this.wordWrap ? "pre-wrap" :"nowrap");
		this._setPromptColor();
		input.readOnly=!this._editable;
		if (Render.isConchApp){
			input.setType(this._type);
			input.setForbidEdit(!this._editable);
		}
		input.maxLength=this._maxChars;
		var padding=this.padding;
		input.type=this._type;
		input.value=this._content;
		input.placeholder=this._prompt;
		Laya.stage.off(/*laya.events.Event.KEY_DOWN*/"keydown",this,this._onKeyDown);
		Laya.stage.on(/*laya.events.Event.KEY_DOWN*/"keydown",this,this._onKeyDown);
		Laya.stage.focus=this;
		this.event(/*laya.events.Event.FOCUS*/"focus");
		if (Browser.onPC)input.focus();
		if(!Browser.onMiniGame){
			var temp=this._text;
			this._text=null;
		}
		this.typeset();
		input.setColor(this._originColor);
		input.setFontSize(this.fontSize);
		input.setFontFace(Browser.onIPhone ? (Text._fontFamilyMap[this.font] || this.font):this.font);
		if (Render.isConchApp){
			input.setMultiAble && input.setMultiAble(this._multiline);
		}
		cssStyle.lineHeight=(this.leading+this.fontSize)+"px";
		cssStyle.fontStyle=(this.italic ? "italic" :"normal");
		cssStyle.fontWeight=(this.bold ? "bold" :"normal");
		cssStyle.textAlign=this.align;
		cssStyle.padding="0 0";
		this._syncInputTransform();
		if (!Render.isConchApp && Browser.onPC)
			Laya.timer.frameLoop(1,this,this._syncInputTransform);
	}

	// 设置DOM输入框提示符颜色。
	__proto._setPromptColor=function(){
		Input.promptStyleDOM=Browser.getElementById("promptStyle");
		if (!Input.promptStyleDOM){
			Input.promptStyleDOM=Browser.createElement("style");
			Input.promptStyleDOM.setAttribute("id","promptStyle");
			Browser.document.head.appendChild(Input.promptStyleDOM);
		}
		Input.promptStyleDOM.innerText="input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {"+"color:"+this._promptColor+"}"+"input:-moz-placeholder, textarea:-moz-placeholder {"+"color:"+this._promptColor+"}"+"input::-moz-placeholder, textarea::-moz-placeholder {"+"color:"+this._promptColor+"}"+"input:-ms-input-placeholder, textarea:-ms-input-placeholder {"+"color:"+this._promptColor+"}";
	}

	/**@private */
	__proto._focusOut=function(){
		laya.display.Input.isInputting=false;
		this._focus=false;
		this._text=null;
		this._content=this.nativeInput.value;
		if (!this._content){
			Laya.superSet(Text,this,'text',this._prompt);
			Laya.superSet(Text,this,'color',this._promptColor);
			}else {
			Laya.superSet(Text,this,'text',this._content);
			Laya.superSet(Text,this,'color',this._originColor);
		}
		Laya.stage.off(/*laya.events.Event.KEY_DOWN*/"keydown",this,this._onKeyDown);
		Laya.stage.focus=null;
		this.event(/*laya.events.Event.BLUR*/"blur");
		if (Render.isConchApp)this.nativeInput.blur();
		Browser.onPC && Laya.timer.clear(this,this._syncInputTransform);
	}

	/**@private */
	__proto._onKeyDown=function(e){
		if (e.keyCode===13){
			if (Browser.onMobile && !this._multiline)
				this.focus=false;
			this.event(/*laya.events.Event.ENTER*/"enter");
		}
	}

	__proto.changeText=function(text){
		this._content=text;
		if (this._focus){
			this.nativeInput.value=text || '';
			this.event(/*laya.events.Event.CHANGE*/"change");
		}else
		_super.prototype.changeText.call(this,text);
	}

	/**@inheritDoc */
	__getset(0,__proto,'color',_super.prototype._$get_color,function(value){
		if (this._focus)
			this.nativeInput.setColor(value);
		Laya.superSet(Text,this,'color',this._content?value:this._promptColor);
		this._originColor=value;
	});

	//[Deprecated]
	__getset(0,__proto,'inputElementYAdjuster',function(){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。");
		return 0;
		},function(value){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。");
	});

	/**表示是否是多行输入框。*/
	__getset(0,__proto,'multiline',function(){
		return this._multiline;
		},function(value){
		this._multiline=value;
		this.valign=value ? "top" :"middle";
	});

	/**
	*<p>字符数量限制，默认为10000。</p>
	*<p>设置字符数量限制时，小于等于0的值将会限制字符数量为10000。</p>
	*/
	__getset(0,__proto,'maxChars',function(){
		return this._maxChars;
		},function(value){
		if (value <=0)
			value=1E5;
		this._maxChars=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'text',function(){
		if (this._focus)
			return this.nativeInput.value;
		else
		return this._content || "";
		},function(value){
		Laya.superSet(Text,this,'color',this._originColor);
		value+='';
		if (this._focus){
			this.nativeInput.value=value || '';
			this.event(/*laya.events.Event.CHANGE*/"change");
			}else {
			if (!this._multiline)
				value=value.replace(/\r?\n/g,'');
			this._content=value;
			if (value)
				Laya.superSet(Text,this,'text',value);
			else {
				Laya.superSet(Text,this,'text',this._prompt);
				Laya.superSet(Text,this,'color',this.promptColor);
			}
		}
	});

	/**
	*获取对输入框的引用实例。
	*/
	__getset(0,__proto,'nativeInput',function(){
		return this._multiline ? Input.area :Input.input;
	});

	/**
	*设置输入提示符。
	*/
	__getset(0,__proto,'prompt',function(){
		return this._prompt;
		},function(value){
		if (!this._text && value)
			Laya.superSet(Text,this,'color',this._promptColor);
		this.promptColor=this._promptColor;
		if (this._text)
			Laya.superSet(Text,this,'text',(this._text==this._prompt)?value:this._text);
		else
		Laya.superSet(Text,this,'text',value);
		this._prompt=Text.langPacks && Text.langPacks[value] ? Text.langPacks[value] :value;
	});

	// 因此 调用focus接口是无法都在移动平台立刻弹出键盘的
	/**
	*表示焦点是否在此实例上。
	*/
	__getset(0,__proto,'focus',function(){
		return this._focus;
		},function(value){
		var input=this.nativeInput;
		if (this._focus!==value){
			if (value){
				if (input.target){
					input.target._focusOut();
					}else {
					this._setInputMethod();
				}
				input.target=this;
				this._focusIn();
				}else {
				input.target=null;
				this._focusOut();
				Browser.document.body.scrollTop=0;
				input.blur();
				if (Render.isConchApp){
					input.setPos(-10000,-10000);
				}else if (Input.inputContainer.contains(input))
				Input.inputContainer.removeChild(input);
			}
		}
	});

	/**限制输入的字符。*/
	__getset(0,__proto,'restrict',function(){
		if (this._restrictPattern){
			return this._restrictPattern.source;
		}
		return "";
		},function(pattern){
		if (pattern){
			pattern="[^"+pattern+"]";
			if (pattern.indexOf("^^")>-1)
				pattern=pattern.replace("^^","");
			this._restrictPattern=new RegExp(pattern,"g");
		}else
		this._restrictPattern=null;
	});

	/**
	*是否可编辑。
	*/
	__getset(0,__proto,'editable',function(){
		return this._editable;
		},function(value){
		this._editable=value;
		if (Render.isConchApp){
			Input.input.setForbidEdit(!value);
		}
	});

	/**
	*设置输入提示符颜色。
	*/
	__getset(0,__proto,'promptColor',function(){
		return this._promptColor;
		},function(value){
		this._promptColor=value;
		if (!this._content)Laya.superSet(Text,this,'color',value);
	});

	/**
	*<p>输入框类型为Input静态常量之一。</p>
	*<ul>
	*<li>TYPE_TEXT</li>
	*<li>TYPE_PASSWORD</li>
	*<li>TYPE_EMAIL</li>
	*<li>TYPE_URL</li>
	*<li>TYPE_NUMBER</li>
	*<li>TYPE_RANGE</li>
	*<li>TYPE_DATE</li>
	*<li>TYPE_MONTH</li>
	*<li>TYPE_WEEK</li>
	*<li>TYPE_TIME</li>
	*<li>TYPE_DATE_TIME</li>
	*<li>TYPE_DATE_TIME_LOCAL</li>
	*</ul>
	*<p>平台兼容性参见http://www.w3school.com.cn/html5/html_5_form_input_types.asp。</p>
	*/
	__getset(0,__proto,'type',function(){
		return this._type;
		},function(value){
		if (value=="password")
			this._getCSSStyle().password=true;
		else
		this._getCSSStyle().password=false;
		this._type=value;
		if (Render.isConchApp){
			this.nativeInput.setType(value);
		}
	});

	/**
	*<p>原生输入框 X 轴调整值，用来调整输入框坐标。</p>
	*<p>由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。</p>
	*@deprecated
	*/
	__getset(0,__proto,'inputElementXAdjuster',function(){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。");
		return 0;
		},function(value){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。");
	});

	//[Deprecated(replacement="Input.type")]
	__getset(0,__proto,'asPassword',function(){
		return this._getCSSStyle().password;
		},function(value){
		this._getCSSStyle().password=value;
		this._type=/*CLASS CONST:laya.display.Input.TYPE_PASSWORD*/"password";
		console.warn("deprecated: 使用type=\"password\"替代设置asPassword, asPassword将在下次重大更新时删去");
		this.isChanged=true;
	});

	Input.__init__=function(){
		Input._createInputElement();
		if (Browser.onMobile)
			Render.canvas.addEventListener(Input.IOS_IFRAME ?(Browser.onMiniGame ? "touchend" :"click"):"touchend",Input._popupInputMethod);
	}

	Input._popupInputMethod=function(e){
		if (!laya.display.Input.isInputting)return;
		var input=laya.display.Input.inputElement;
		input.focus();
	}

	Input._createInputElement=function(){
		Input._initInput(Input.area=Browser.createElement("textarea"));
		Input._initInput(Input.input=Browser.createElement("input"));
		Input.inputContainer=Browser.createElement("div");
		Input.inputContainer.style.position="absolute";
		Input.inputContainer.style.zIndex=1E5;
		Browser.container.appendChild(Input.inputContainer);
		Input.inputContainer.setPos=function (x,y){Input.inputContainer.style.left=x+'px';Input.inputContainer.style.top=y+'px';};
	}

	Input._initInput=function(input){
		var style=input.style;
		style.cssText="position:absolute;overflow:hidden;resize:none;transform-origin:0 0;-webkit-transform-origin:0 0;-moz-transform-origin:0 0;-o-transform-origin:0 0;";
		style.resize='none';
		style.backgroundColor='transparent';
		style.border='none';
		style.outline='none';
		style.zIndex=1;
		input.addEventListener('input',Input._processInputting);
		input.addEventListener('mousemove',Input._stopEvent);
		input.addEventListener('mousedown',Input._stopEvent);
		input.addEventListener('touchmove',Input._stopEvent);
		input.setFontFace=function (fontFace){input.style.fontFamily=fontFace;};
		if(!Render.isConchApp){
			input.setColor=function (color){input.style.color=color;};
			input.setFontSize=function (fontSize){input.style.fontSize=fontSize+'px';};
		}
	}

	Input._processInputting=function(e){
		var input=laya.display.Input.inputElement.target;
		if (!input)return;
		var value=laya.display.Input.inputElement.value;
		if (input._restrictPattern){
			value=value.replace(/\u2006|\x27/g,"");
			if (input._restrictPattern.test(value)){
				value=value.replace(input._restrictPattern,"");
				laya.display.Input.inputElement.value=value;
			}
		}
		input._text=value;
		input.event(/*laya.events.Event.INPUT*/"input");
	}

	Input._stopEvent=function(e){
		if (e.type=='touchmove')
			e.preventDefault();
		e.stopPropagation && e.stopPropagation();
	}

	Input.TYPE_TEXT="text";
	Input.TYPE_PASSWORD="password";
	Input.TYPE_EMAIL="email";
	Input.TYPE_URL="url";
	Input.TYPE_NUMBER="number";
	Input.TYPE_RANGE="range";
	Input.TYPE_DATE="date";
	Input.TYPE_MONTH="month";
	Input.TYPE_WEEK="week";
	Input.TYPE_TIME="time";
	Input.TYPE_DATE_TIME="datetime";
	Input.TYPE_DATE_TIME_LOCAL="datetime-local";
	Input.TYPE_SEARCH="search";
	Input.input=null;
	Input.area=null;
	Input.inputElement=null;
	Input.inputContainer=null;
	Input.confirmButton=null;
	Input.promptStyleDOM=null;
	Input.inputHeight=45;
	Input.isInputting=false;
	Input.stageMatrix=null;
	__static(Input,
	['IOS_IFRAME',function(){return this.IOS_IFRAME=(Browser.onIOS && Browser.window.top !=Browser.window.self);}
	]);
	return Input;
})(Text)


/**
*@private
*<p> <code>HTMLImage</code> 用于创建 HTML Image 元素。</p>
*<p>请使用 <code>HTMLImage.create()<code>获取新实例，不要直接使用 <code>new HTMLImage<code> 。</p>
*/
//class laya.resource.HTMLImage extends laya.resource.FileBitmap
var HTMLImage=(function(_super){
	function HTMLImage(src,def){
		/**异步加载锁*/
		this._recreateLock=false;
		/**异步加载完成后是否需要释放（有可能在恢复过程中,再次被释放，用此变量做标记）*/
		this._needReleaseAgain=false;
		this._enableMerageInAtlas=true;
		HTMLImage.__super.call(this);
		this._init_(src,def);
	}

	__class(HTMLImage,'laya.resource.HTMLImage',_super);
	var __proto=HTMLImage.prototype;
	__proto._init_=function(src,def){
		this._src=src;
		this._source=new Browser.window.Image();
		if (def){
			def.onload && (this.onload=def.onload);
			def.onerror && (this.onerror=def.onerror);
			def.onCreate && def.onCreate(this);
		}
		if (src.indexOf("data:image")!=0)this._source.crossOrigin="";
		(src)&& (this._source.src=src);
	}

	/**
	*@inheritDoc
	*/
	__proto.recreateResource=function(){
		var _$this=this;
		if (this._src==="")
			throw new Error("src no null！");
		this._needReleaseAgain=false;
		if (!this._source){
			this._recreateLock=true;
			var _this=this;
			this._source=new Browser.window.Image();
			this._source.crossOrigin="";
			this._source.onload=function (){
				if (_this._needReleaseAgain){
					_this._needReleaseAgain=false;
					_this._source.onload=null;
					_this._source=null;
					return;
				}
				_this._source.onload=null;
				_this.memorySize=_$this._w *_$this._h *4;
				_this._recreateLock=false;
				_this.completeCreate();
			};
			this._source.src=this._src;
			}else {
			if (this._recreateLock)
				return;
			this.memorySize=this._w *this._h *4;
			this._recreateLock=false;
			this.completeCreate();
		}
	}

	/**
	*@inheritDoc
	*/
	__proto.disposeResource=function(){
		if (this._recreateLock)
			this._needReleaseAgain=true;
		(this._source)&& (this._source=null,this.memorySize=0);
	}

	/***调整尺寸。*/
	__proto.onresize=function(){
		this._w=this._source.width;
		this._h=this._source.height;
	}

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'onload',null,function(value){
		var _$this=this;
		this._onload=value;
		this._source && (this._source.onload=this._onload !=null ? (function(){
			_$this.onresize();
			_$this._onload();
		}):null);
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'onerror',null,function(value){
		var _$this=this;
		this._onerror=value;
		this._source && (this._source.onerror=this._onerror !=null ? (function(){
			_$this._onerror()
		}):null);
	});

	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._enableMerageInAtlas;
		},function(value){
		this._enableMerageInAtlas=value;
		if (Render.isConchApp){
			if (this._source)this._source.enableMerageInAtlas=value;
		}
	});

	HTMLImage.create=function(src,def){
		return new HTMLImage(src,def);
	}

	return HTMLImage;
})(FileBitmap)


/**
*<p> 动效模板。用于为指定目标对象添加动画效果。每个动效有唯一的目标对象，而同一个对象可以添加多个动效。 当一个动效开始播放时，其他动效会自动停止播放。</p>
*<p> 可以通过LayaAir IDE创建。 </p>
*/
//class laya.display.EffectAnimation extends laya.display.FrameAnimation
var EffectAnimation=(function(_super){
	function EffectAnimation(){
		/**@private */
		this._target=null;
		/**@private */
		this._playEvents=null;
		/**@private */
		this._initData={};
		/**@private */
		this._aniKeys=null;
		/**@private */
		this._effectClass=null;
		EffectAnimation.__super.call(this);
	}

	__class(EffectAnimation,'laya.display.EffectAnimation',_super);
	var __proto=EffectAnimation.prototype;
	/**@private */
	__proto._onOtherBegin=function(effect){
		if (effect==this)
			return;
		this.stop();
	}

	/**@private */
	__proto.addEvent=function(){
		if (!this._target || !this._playEvents)
			return;
		this._setControlNode(this._target);
		this._target.on(this._playEvents,this,this._onPlayAction);
	}

	/**@private */
	__proto._onPlayAction=function(){
		this.play(0,false);
	}

	__proto.play=function(start,loop,name,showWarn){
		(start===void 0)&& (start=0);
		(loop===void 0)&& (loop=true);
		(name===void 0)&& (name="");
		(showWarn===void 0)&& (showWarn=true);
		if (!this._target)
			return;
		this._target.event("effectanimationbegin",[this]);
		this._recordInitData();
		laya.display.AnimationPlayerBase.prototype.play.call(this,start,loop,name,showWarn);
	}

	/**@private */
	__proto._recordInitData=function(){
		if (!this._aniKeys)
			return;
		var i=0,len=0;
		len=this._aniKeys.length;
		var key;
		for (i=0;i < len;i++){
			key=this._aniKeys[i];
			this._initData[key]=this._target[key];
		}
	}

	/**@private */
	__proto._displayToIndex=function(value){
		if (!this._animationData)
			return;
		if (value < 0)
			value=0;
		if (value > this._count)
			value=this._count;
		var nodes=this._animationData.nodes,i=0,len=nodes.length;
		len=len > 1 ? 1 :len;
		for (i=0;i < len;i++){
			this._displayNodeToFrame(nodes[i],value);
		}
	}

	/**@private */
	__proto._displayNodeToFrame=function(node,frame,targetDic){
		if (!this._target)
			return;
		var target;
		target=this._target;
		var frames=node.frames,key,propFrames,value;
		var keys=node.keys,i=0,len=keys.length;
		var secondFrames;
		secondFrames=node.secondFrames;
		var tSecondFrame=0;
		var easeFun;
		var tKeyFrames;
		var startFrame;
		var endFrame;
		for (i=0;i < len;i++){
			key=keys[i];
			propFrames=frames[key];
			tSecondFrame=secondFrames[key];
			if (tSecondFrame==-1){
				value=this._initData[key];
				}else {
				if (frame < tSecondFrame){
					tKeyFrames=node.keyframes[key];
					startFrame=tKeyFrames[0];
					if (startFrame.tween){
						easeFun=Ease[startFrame.tweenMethod];
						if (easeFun==null){
							easeFun=Ease.linearNone;
						}
						endFrame=tKeyFrames[1];
						value=easeFun(frame,this._initData[key],endFrame.value-this._initData[key],endFrame.index);
						}else {
						value=this._initData[key];
					}
					}else {
					if (propFrames.length > frame){
						value=propFrames[frame];
						}else {
						value=propFrames[propFrames.length-1];
					}
				}
			}
			target[key]=value;
		}
	}

	/**@private */
	__proto._calculateNodeKeyFrames=function(node){
		_super.prototype._calculateNodeKeyFrames.call(this,node);
		var keyFrames=node.keyframes,key,tKeyFrames,target=node.target;
		var secondFrames;
		secondFrames={};
		node.secondFrames=secondFrames;
		for (key in keyFrames){
			tKeyFrames=keyFrames[key];
			if (tKeyFrames.length <=1){
				secondFrames[key]=-1;
				}else {
				secondFrames[key]=tKeyFrames[1].index;
			}
		}
	}

	/**
	*本实例的目标对象。通过本实例控制目标对象的属性变化。
	*@param v 指定的目标对象。
	*/
	__getset(0,__proto,'target',function(){
		return this._target;
		},function(v){
		if (this._target){
			this._target.off("effectanimationbegin",this,this._onOtherBegin);
		}
		this._target=v;
		if (this._target){
			this._target.on("effectanimationbegin",this,this._onOtherBegin);
		}
		this.addEvent();
	});

	/**
	*设置开始播放的事件。本实例会侦听目标对象的指定事件，触发后播放相应动画效果。
	*@param event
	*/
	__getset(0,__proto,'playEvent',null,function(event){
		this._playEvents=event;
		if (!event)
			return;
		this.addEvent();
	});

	/**
	*设置动画数据。
	*@param uiData
	*/
	__getset(0,__proto,'effectData',null,function(uiData){
		if (uiData){
			var aniData;
			aniData=uiData["animations"];
			if (aniData && aniData[0]){
				this._setUp({},aniData[0]);
				if (aniData[0].nodes && aniData[0].nodes[0]){
					this._aniKeys=aniData[0].nodes[0].keys;
				}
			}
		}
	});

	/**
	*设置提供数据的类。
	*@param classStr 类路径
	*/
	__getset(0,__proto,'effectClass',null,function(classStr){
		this._effectClass=ClassUtils.getClass(classStr);
		if (this._effectClass){
			var uiData;
			uiData=this._effectClass["uiView"];
			if (uiData){
				var aniData;
				aniData=uiData["animations"];
				if (aniData && aniData[0]){
					this._setUp({},aniData[0]);
					if (aniData[0].nodes && aniData[0].nodes[0]){
						this._aniKeys=aniData[0].nodes[0].keys;
					}
				}
			}
		}
	});

	EffectAnimation.EffectAnimationBegin="effectanimationbegin";
	return EffectAnimation;
})(FrameAnimation)


/**
*@private
*/
//class laya.utils.GraphicAnimation extends laya.display.FrameAnimation
var GraphicAnimation=(function(_super){
	var GraphicNode;
	function GraphicAnimation(){
		/**
		*@private
		*/
		this.animationList=null;
		/**
		*@private
		*/
		this.animationDic=null;
		/**
		*@private
		*/
		this._nodeList=null;
		/**
		*@private
		*/
		this._nodeDefaultProps=null;
		/**
		*@private
		*/
		this._gList=null;
		/**
		*@private
		*/
		this._nodeIDAniDic={};
		this._rootNode=null;
		this._nodeGDic=null;
		GraphicAnimation.__super.call(this);
	}

	__class(GraphicAnimation,'laya.utils.GraphicAnimation',_super);
	var __proto=GraphicAnimation.prototype;
	/**
	*@private
	*/
	__proto._parseNodeList=function(uiView){
		if (!this._nodeList){
			this._nodeList=[];
		}
		this._nodeDefaultProps[uiView.compId]=uiView.props;
		if (uiView.compId)
			this._nodeList.push(uiView.compId);
		var childs=uiView.child;
		if (childs){
			var i=0,len=childs.length;
			for (i=0;i < len;i++){
				this._parseNodeList(childs[i]);
			}
		}
	}

	/**
	*@private
	*/
	__proto._calGraphicData=function(aniData){
		this._setUp(null,aniData);
		this._createGraphicData();
		if (this._nodeIDAniDic){
			var key;
			for (key in this._nodeIDAniDic){
				this._nodeIDAniDic[key]=null;
			}
		}
	}

	/**
	*@private
	*/
	__proto._createGraphicData=function(){
		var gList=[];
		var i=0,len=this.count;
		var animationDataNew=this._animationNewFrames;
		if (!animationDataNew)animationDataNew=[];
		var preGraphic;
		for (i=0;i < len;i++){
			if (animationDataNew[i] || !preGraphic){
				preGraphic=this._createFrameGraphic(i);
			}
			gList.push(preGraphic);
		}
		this._gList=gList;
	}

	/**
	*@private
	*/
	__proto._createFrameGraphic=function(frame){
		var g=RunDriver.createGraphics();
		if (!GraphicAnimation._rootMatrix)
			GraphicAnimation._rootMatrix=new Matrix();
		this._updateNodeGraphic(this._rootNode,frame,GraphicAnimation._rootMatrix,g);
		return g;
	}

	__proto._updateNodeGraphic=function(node,frame,parentTransfrom,g,alpha){
		(alpha===void 0)&& (alpha=1);
		var tNodeG;
		tNodeG=this._nodeGDic[node.compId]=this._getNodeGraphicData(node.compId,frame,this._nodeGDic[node.compId]);
		var tGraphicAlpha=tNodeG.alpha *alpha;
		if (tGraphicAlpha < 0.01)return;
		if (!tNodeG.resultTransform){
			tNodeG.resultTransform=Matrix.create();
		};
		var tResultTransform;
		tResultTransform=tNodeG.resultTransform;
		Matrix.mul(tNodeG.transform,parentTransfrom,tResultTransform);
		var tTex;
		if (tNodeG.skin){
			tTex=this._getTextureByUrl(tNodeG.skin);
			if (tTex){
				if (tResultTransform._checkTransform()){
					g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height,tResultTransform,tGraphicAlpha);
					tNodeG.resultTransform=null;
					}else {
					g.drawTexture(tTex,tResultTransform.tx,tResultTransform.ty,tNodeG.width,tNodeG.height,null,tGraphicAlpha);
				}
			}
		};
		var childs;
		childs=node.child;
		if (!childs)
			return;
		var i=0,len=0;
		len=childs.length;
		for (i=0;i < len;i++){
			this._updateNodeGraphic(childs[i],frame,tResultTransform,g,tGraphicAlpha);
		}
	}

	__proto._updateNoChilds=function(tNodeG,g){
		if (!tNodeG.skin)
			return;
		var tTex=this._getTextureByUrl(tNodeG.skin);
		if (!tTex)
			return;
		var tTransform=tNodeG.transform;
		tTransform._checkTransform();
		var onlyTranslate=false;
		onlyTranslate=!tTransform.bTransform;
		if (!onlyTranslate){
			g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height,tTransform.clone(),tNodeG.alpha);
			}else {
			g.drawTexture(tTex,tTransform.tx,tTransform.ty,tNodeG.width,tNodeG.height,null,tNodeG.alpha);
		}
	}

	__proto._updateNodeGraphic2=function(node,frame,g){
		var tNodeG;
		tNodeG=this._nodeGDic[node.compId]=this._getNodeGraphicData(node.compId,frame,this._nodeGDic[node.compId]);
		if (!node.child){
			this._updateNoChilds(tNodeG,g);
			return;
		};
		var tTransform=tNodeG.transform;
		tTransform._checkTransform();
		var onlyTranslate=false;
		onlyTranslate=!tTransform.bTransform;
		var hasTrans=false;
		hasTrans=onlyTranslate && (tTransform.tx !=0 || tTransform.ty !=0);
		var ifSave=false;
		ifSave=(tTransform.bTransform)|| tNodeG.alpha !=1;
		if (ifSave){
			g.save();
		}
		if (tNodeG.alpha !=1){
			g.alpha(tNodeG.alpha);
		}
		if (!onlyTranslate){
			g.transform(tTransform.clone());
			}else if (hasTrans){
			g.translate(tTransform.tx,tTransform.ty);
		};
		var childs;
		childs=node.child;
		var tTex;
		if (tNodeG.skin){
			tTex=this._getTextureByUrl(tNodeG.skin);
			if (tTex){
				g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height);
			}
		}
		if (childs){
			var i=0,len=0;
			len=childs.length;
			for (i=0;i < len;i++){
				this._updateNodeGraphic2(childs[i],frame,g);
			}
		}
		if (ifSave){
			g.restore();
			}else {
			if (!onlyTranslate){
				g.transform(tTransform.clone().invert());
				}else if (hasTrans){
				g.translate(-tTransform.tx,-tTransform.ty);
			}
		}
	}

	/**
	*@private
	*/
	__proto._calculateNodeKeyFrames=function(node){
		_super.prototype._calculateNodeKeyFrames.call(this,node);
		this._nodeIDAniDic[node.target]=node;
	}

	/**
	*@private
	*/
	__proto.getNodeDataByID=function(nodeID){
		return this._nodeIDAniDic[nodeID];
	}

	/**
	*@private
	*/
	__proto._getParams=function(obj,params,frame,obj2){
		var rst=GraphicAnimation._temParam;
		rst.length=params.length;
		var i=0,len=params.length;
		for (i=0;i < len;i++){
			rst[i]=this._getObjVar(obj,params[i][0],frame,params[i][1],obj2);
		}
		return rst;
	}

	/**
	*@private
	*/
	__proto._getObjVar=function(obj,key,frame,noValue,obj2){
		if (obj.hasOwnProperty(key)){
			var vArr=obj[key];
			if (frame >=vArr.length)
				frame=vArr.length-1;
			if(obj[key][frame]!=undefined)
				return obj[key][frame];
		}
		if (obj2.hasOwnProperty(key)){
			return obj2[key];
		}
		return noValue;
	}

	__proto._getNodeGraphicData=function(nodeID,frame,rst){
		if (!rst)
			rst=GraphicNode.create();
		if (!rst.transform){
			rst.transform=Matrix.create();
			}else{
			rst.transform.identity();
		};
		var node=this.getNodeDataByID(nodeID);
		if (!node)
			return rst;
		var frameData=node.frames;
		var params=this._getParams(frameData,GraphicAnimation._drawTextureCmd,frame,this._nodeDefaultProps[nodeID]);
		var url=params[0];
		var width=NaN,height=NaN;
		var px=params[5],py=params[6];
		var aX=params[13],aY=params[14];
		var sx=params[7],sy=params[8];
		var rotate=params[9];
		var skewX=params[11],skewY=params[12]
		width=params[3];
		height=params[4];
		if (width==0 || height==0)url=null;
		if (width==-1)width=0;
		if (height==-1)height=0;
		var tex;
		rst.skin=url;
		rst.width=width;
		rst.height=height;
		if (url){
			tex=this._getTextureByUrl(url);
			if (tex){
				if (!width)
					width=tex.sourceWidth;
				if (!height)
					height=tex.sourceHeight;
				}else {
				console.warn("lost skin:",url,",you may load pics first");
			}
		}
		rst.alpha=params[10];
		var m;
		m=rst.transform;
		if (aX !=0){
			px=aX *width;
		}
		if (aY !=0){
			py=aY *height;
		}
		if (px !=0 || py !=0){
			m.translate(-px,-py);
		};
		var tm=null;
		if (rotate || sx!==1 || sy!==1 || skewX || skewY){
			tm=GraphicAnimation._tempMt;
			tm.identity();
			tm.bTransform=true;
			var skx=(rotate-skewX)*0.0174532922222222;
			var sky=(rotate+skewY)*0.0174532922222222;
			var cx=Math.cos(sky);
			var ssx=Math.sin(sky);
			var cy=Math.sin(skx);
			var ssy=Math.cos(skx);
			tm.a=sx *cx;
			tm.b=sx *ssx;
			tm.c=-sy *cy;
			tm.d=sy *ssy;
			tm.tx=tm.ty=0;
		}
		if (tm){
			m=Matrix.mul(m,tm,m);
		}
		m.translate(params[1],params[2]);
		return rst;
	}

	/**
	*@private
	*/
	__proto._getTextureByUrl=function(url){
		return Loader.getRes(url);
	}

	/**
	*@private
	*/
	__proto.setAniData=function(uiView,aniName){
		if (uiView.animations){
			this._nodeDefaultProps={};
			this._nodeGDic={};
			if (this._nodeList)
				this._nodeList.length=0;
			this._rootNode=uiView;
			this._parseNodeList(uiView);
			var aniDic={};
			var anilist=[];
			var animations=uiView.animations;
			var i=0,len=animations.length;
			var tAniO;
			for (i=0;i < len;i++){
				tAniO=animations[i];
				this._labels=null;
				if (aniName && aniName !=tAniO.name){
					continue ;
				}
				if (!tAniO)
					continue ;
				try {
					this._calGraphicData(tAniO);
					}catch (e){
					console.warn("parse animation fail:"+tAniO.name+",empty animation created");
					this._gList=[];
				};
				var frameO={};
				frameO.interval=1000 / tAniO["frameRate"];
				frameO.frames=this._gList;
				frameO.labels=this._labels;
				frameO.name=tAniO.name;
				anilist.push(frameO);
				aniDic[tAniO.name]=frameO;
			}
			this.animationList=anilist;
			this.animationDic=aniDic;
		}
		GraphicAnimation._temParam.length=0;
	}

	__proto.parseByData=function(aniData){
		var rootNode,aniO;
		rootNode=aniData.nodeRoot;
		aniO=aniData.aniO;
		delete aniData.nodeRoot;
		delete aniData.aniO;
		this._nodeDefaultProps={};
		this._nodeGDic={};
		if (this._nodeList)
			this._nodeList.length=0;
		this._rootNode=rootNode;
		this._parseNodeList(rootNode);
		this._labels=null;
		try {
			this._calGraphicData(aniO);
			}catch (e){
			console.warn("parse animation fail:"+aniO.name+",empty animation created");
			this._gList=[];
		};
		var frameO=aniData;
		frameO.interval=1000 / aniO["frameRate"];
		frameO.frames=this._gList;
		frameO.labels=this._labels;
		frameO.name=aniO.name;
		return frameO;
	}

	/**
	*@private
	*/
	__proto.setUpAniData=function(uiView){
		if (uiView.animations){
			var aniDic={};
			var anilist=[];
			var animations=uiView.animations;
			var i=0,len=animations.length;
			var tAniO;
			for (i=0;i < len;i++){
				tAniO=animations[i];
				if (!tAniO)
					continue ;
				var frameO={};
				frameO.name=tAniO.name;
				frameO.aniO=tAniO;
				frameO.nodeRoot=uiView;
				anilist.push(frameO);
				aniDic[tAniO.name]=frameO;
			}
			this.animationList=anilist;
			this.animationDic=aniDic;
		}
	}

	/**
	*@private
	*/
	__proto._clear=function(){
		this.animationList=null;
		this.animationDic=null;
		this._gList=null;
		if (this._nodeGDic){
			var key;
			var tGNode;
			for (key in this._nodeGDic){
				tGNode=this._nodeGDic[key];
				if (tGNode)tGNode.recover();
			}
		}
		this._nodeGDic=null;
	}

	GraphicAnimation.parseAnimationByData=function(animationObject){
		if (!GraphicAnimation._I)
			GraphicAnimation._I=new GraphicAnimation();
		var rst;
		rst=GraphicAnimation._I.parseByData(animationObject);
		GraphicAnimation._I._clear();
		return rst;
	}

	GraphicAnimation.parseAnimationData=function(aniData){
		if (!GraphicAnimation._I)
			GraphicAnimation._I=new GraphicAnimation();
		GraphicAnimation._I.setUpAniData(aniData);
		var rst;
		rst={};
		rst.animationList=GraphicAnimation._I.animationList;
		rst.animationDic=GraphicAnimation._I.animationDic;
		GraphicAnimation._I._clear();
		return rst;
	}

	GraphicAnimation._drawTextureCmd=[["skin",null],["x",0],["y",0],["width",-1],["height",-1],["pivotX",0],["pivotY",0],["scaleX",1],["scaleY",1],["rotation",0],["alpha",1],["skewX",0],["skewY",0],["anchorX",0],["anchorY",0]];
	GraphicAnimation._temParam=[];
	GraphicAnimation._I=null;
	GraphicAnimation._rootMatrix=null;
	__static(GraphicAnimation,
	['_tempMt',function(){return this._tempMt=new Matrix();}
	]);
	GraphicAnimation.__init$=function(){
		//class GraphicNode
		GraphicNode=(function(){
			function GraphicNode(){
				this.skin=null;
				this.transform=null;
				this.resultTransform=null;
				this.width=NaN;
				this.height=NaN;
				this.alpha=1;
			}
			__class(GraphicNode,'');
			var __proto=GraphicNode.prototype;
			__proto.recover=function(){
				this.skin=null;
				this.width=0;
				this.height=0;
				this.alpha=1;
				if (this.transform){
					this.transform.destroy();
					this.transform=null;
				}
				if (this.resultTransform){
					this.resultTransform.destroy();
					this.resultTransform=null;
				}
				Pool.recover("GraphicNode",this);
			}
			GraphicNode.create=function(){
				return Pool.getItemByClass("GraphicNode",GraphicNode);
			}
			return GraphicNode;
		})()
	}

	return GraphicAnimation;
})(FrameAnimation)


	Laya.__init([EventDispatcher,LoaderManager,Render,Browser,Timer,LocalStorage,TimeLine,GraphicAnimation]);
})(window,document,Laya);

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;
//class LayaMain
var LayaMain=(function(){
	/*[COMPILER OPTIONS:normal]*/
	function LayaMain(){}
	__class(LayaMain,'LayaMain');
	return LayaMain;
})()



	/**LayaGameStart**/
	new LayaMain();

})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Browser=laya.utils.Browser,Event=laya.events.Event,EventDispatcher=laya.events.EventDispatcher;
	var HTMLImage=laya.resource.HTMLImage,Handler=laya.utils.Handler,Input=laya.display.Input,Loader=laya.net.Loader;
	var LocalStorage=laya.net.LocalStorage,Matrix=laya.maths.Matrix,Render=laya.renders.Render,RunDriver=laya.utils.RunDriver;
	var SoundChannel=laya.media.SoundChannel,SoundManager=laya.media.SoundManager,URL=laya.net.URL,Utils=laya.utils.Utils;
//class laya.wx.mini.MiniAdpter
var MiniAdpter=(function(){
	function MiniAdpter(){}
	__class(MiniAdpter,'laya.wx.mini.MiniAdpter');
	MiniAdpter.getJson=function(data){
		return JSON.parse(data);
	}

	MiniAdpter.init=function(isPosMsg,isSon){
		(isPosMsg===void 0)&& (isPosMsg=false);
		(isSon===void 0)&& (isSon=false);
		if (MiniAdpter._inited)return;
		MiniAdpter._inited=true;
		MiniAdpter.window=/*__JS__ */window;
		if(MiniAdpter.window.navigator.userAgent.indexOf('MiniGame')<0)return;
		MiniAdpter.isZiYu=isSon;
		MiniAdpter.isPosMsgYu=isPosMsg;
		MiniAdpter.EnvConfig={};
		try{
			/*__JS__ */laya.webgl.resource.WebGLCanvas.premulAlpha=true;
			}catch(e){
		}
		if(!MiniAdpter.isZiYu){
			MiniFileMgr.setNativeFileDir("/layaairGame");
			MiniFileMgr.existDir(MiniFileMgr.fileNativeDir,Handler.create(MiniAdpter,MiniAdpter.onMkdirCallBack));
		}
		MiniAdpter.systemInfo=/*__JS__ */wx.getSystemInfoSync();
		MiniAdpter.window.focus=function (){
		};
		Laya['_getUrlPath']=function (){
		};
		MiniAdpter.window.logtime=function (str){
		};
		MiniAdpter.window.alertTimeLog=function (str){
		};
		MiniAdpter.window.resetShareInfo=function (){
		};
		MiniAdpter.window.CanvasRenderingContext2D=function (){
		};
		MiniAdpter.window.CanvasRenderingContext2D.prototype=MiniAdpter.window.wx.createCanvas().getContext('2d').__proto__;
		MiniAdpter.window.document.body.appendChild=function (){
		};
		MiniAdpter.EnvConfig.pixelRatioInt=0;
		RunDriver.getPixelRatio=MiniAdpter.pixelRatio;
		MiniAdpter._preCreateElement=Browser.createElement;
		Browser["createElement"]=MiniAdpter.createElement;
		RunDriver.createShaderCondition=MiniAdpter.createShaderCondition;
		Utils['parseXMLFromString']=MiniAdpter.parseXMLFromString;
		Input['_createInputElement']=MiniInput['_createInputElement'];
		MiniAdpter.EnvConfig.load=Loader.prototype.load;
		Loader.prototype.load=MiniLoader.prototype.load;
		Loader.prototype._loadImage=MiniImage.prototype._loadImage;
		MiniLocalStorage.__init__();
		LocalStorage._baseClass=MiniLocalStorage;
	}

	MiniAdpter.getUrlEncode=function(url,type){
		if(url.indexOf(".fnt")!=-1)
			return "utf8";
		else if(type=="arraybuffer")
		return "";
		return "ascii";
	}

	MiniAdpter.downLoadFile=function(fileUrl,fileType,callBack,encoding){
		(fileType===void 0)&& (fileType="");
		(encoding===void 0)&& (encoding="ascii");
		var fileObj=MiniFileMgr.getFileInfo(fileUrl);
		if(!fileObj)
			MiniFileMgr.downLoadFile(fileUrl,fileType,callBack,encoding);
		else{
			callBack !=null && callBack.runWith([0]);
		}
	}

	MiniAdpter.remove=function(fileUrl,callBack){
		MiniFileMgr.deleteFile("",fileUrl,callBack,"",0);
	}

	MiniAdpter.removeAll=function(){
		MiniFileMgr.deleteAll();
	}

	MiniAdpter.hasNativeFile=function(fileUrl){
		return MiniFileMgr.isLocalNativeFile(fileUrl);
	}

	MiniAdpter.getFileInfo=function(fileUrl){
		return MiniFileMgr.getFileInfo(fileUrl);
	}

	MiniAdpter.getFileList=function(){
		return MiniFileMgr.filesListObj;
	}

	MiniAdpter.exitMiniProgram=function(){
		MiniAdpter.window["wx"].exitMiniProgram();
	}

	MiniAdpter.onMkdirCallBack=function(errorCode,data){
		if (!errorCode)
			MiniFileMgr.filesListObj=JSON.parse(data.data);
	}

	MiniAdpter.pixelRatio=function(){
		if (!MiniAdpter.EnvConfig.pixelRatioInt){
			try {
				MiniAdpter.EnvConfig.pixelRatioInt=MiniAdpter.systemInfo.pixelRatio;
				return MiniAdpter.systemInfo.pixelRatio;
			}catch (error){}
		}
		return MiniAdpter.EnvConfig.pixelRatioInt;
	}

	MiniAdpter.createElement=function(type){
		if (type=="canvas"){
			var _source;
			if (MiniAdpter.idx==1){
				if(MiniAdpter.isZiYu){
					_source=/*__JS__ */sharedCanvas;
					_source.style={};
					}else{
					_source=/*__JS__ */window.canvas;
				}
				}else {
				_source=/*__JS__ */window.wx.createCanvas();
			}
			MiniAdpter.idx++;
			return _source;
			}else if (type=="textarea" || type=="input"){
			return MiniAdpter.onCreateInput(type);
			}else if (type=="div"){
			var node=MiniAdpter._preCreateElement(type);
			node.contains=function (value){
				return null
			};
			node.removeChild=function (value){
			};
			return node;
			}else {
			return MiniAdpter._preCreateElement(type);
		}
	}

	MiniAdpter.onCreateInput=function(type){
		var node=MiniAdpter._preCreateElement(type);
		node.focus=MiniInput.wxinputFocus;
		node.blur=MiniInput.wxinputblur;
		node.style={};
		node.value=0;
		node.parentElement={};
		node.placeholder={};
		node.type={};
		node.setColor=function (value){
		};
		node.setType=function (value){
		};
		node.setFontFace=function (value){
		};
		node.addEventListener=function (value){
		};
		node.contains=function (value){
			return null
		};
		node.removeChild=function (value){
		};
		return node;
	}

	MiniAdpter.createShaderCondition=function(conditionScript){
		var _$this=this;
		var func=function (){
			var abc=conditionScript;
			return _$this[conditionScript.replace("this.","")];
		}
		return func;
	}

	MiniAdpter.EnvConfig=null;
	MiniAdpter.window=null;
	MiniAdpter._preCreateElement=null;
	MiniAdpter._inited=false;
	MiniAdpter.systemInfo=null;
	MiniAdpter.isZiYu=false;
	MiniAdpter.isPosMsgYu=false;
	MiniAdpter.autoCacheFile=true;
	MiniAdpter.minClearSize=(5 *1024 *1024);
	MiniAdpter.parseXMLFromString=function(value){
		var rst;
		var Parser;
		value=value.replace(/>\s+</g,'><');
		try {
			/*__JS__ */rst=(new window.Parser.DOMParser()).parseFromString(value,'text/xml');
			}catch (error){
			throw "需要引入xml解析库文件";
		}
		return rst;
	}

	MiniAdpter.idx=1;
	__static(MiniAdpter,
	['nativefiles',function(){return this.nativefiles=["layaNativeDir","wxlocal"];}
	]);
	return MiniAdpter;
})()


/**@private **/
//class laya.wx.mini.MiniFileMgr
var MiniFileMgr=(function(){
	function MiniFileMgr(){}
	__class(MiniFileMgr,'laya.wx.mini.MiniFileMgr');
	MiniFileMgr.isLocalNativeFile=function(url){
		for(var i=0,sz=MiniAdpter.nativefiles.length;i<sz;i++){
			if(url.indexOf(MiniAdpter.nativefiles[i])!=-1)
				return true;
		}
		return false;
	}

	MiniFileMgr.getFileInfo=function(fileUrl){
		var fileNativePath=fileUrl;
		var fileObj=MiniFileMgr.filesListObj[fileNativePath];
		if (fileObj==null)
			return null;
		else
		return fileObj;
		return null;
	}

	MiniFileMgr.read=function(filePath,encoding,callBack,readyUrl,isSaveFile,fileType){
		(encoding===void 0)&& (encoding="ascill");
		(readyUrl===void 0)&& (readyUrl="");
		(isSaveFile===void 0)&& (isSaveFile=false);
		(fileType===void 0)&& (fileType="");
		var fileUrl;
		if(readyUrl!="" && (readyUrl.indexOf("http://")!=-1 || readyUrl.indexOf("https://")!=-1)){
			fileUrl=MiniFileMgr.getFileNativePath(filePath)
			}else{
			fileUrl=filePath;
		}
		MiniFileMgr.fs.readFile({filePath:fileUrl,encoding:encoding,success:function (data){
				callBack !=null && callBack.runWith([0,data]);
				},fail:function (data){
				if (data && readyUrl !="")
					MiniFileMgr.downFiles(readyUrl,encoding,callBack,readyUrl,isSaveFile,fileType);
				else
				callBack !=null && callBack.runWith([1]);
		}});
	}

	MiniFileMgr.downFiles=function(fileUrl,encoding,callBack,readyUrl,isSaveFile,fileType,isAutoClear){
		(encoding===void 0)&& (encoding="ascii");
		(readyUrl===void 0)&& (readyUrl="");
		(isSaveFile===void 0)&& (isSaveFile=false);
		(fileType===void 0)&& (fileType="");
		(isAutoClear===void 0)&& (isAutoClear=true);
		var downloadTask=MiniFileMgr.wxdown({url:fileUrl,success:function (data){
				if (data.statusCode===200)
					MiniFileMgr.readFile(data.tempFilePath,encoding,callBack,readyUrl,isSaveFile,fileType,isAutoClear);
				},fail:function (data){
				callBack !=null && callBack.runWith([1,data]);
		}});
		downloadTask.onProgressUpdate(function(data){
			callBack !=null && callBack.runWith([2,data.progress]);
		});
	}

	MiniFileMgr.readFile=function(filePath,encoding,callBack,readyUrl,isSaveFile,fileType,isAutoClear){
		(encoding===void 0)&& (encoding="ascill");
		(readyUrl===void 0)&& (readyUrl="");
		(isSaveFile===void 0)&& (isSaveFile=false);
		(fileType===void 0)&& (fileType="");
		(isAutoClear===void 0)&& (isAutoClear=true);
		MiniFileMgr.fs.readFile({filePath:filePath,encoding:encoding,success:function (data){
				if (filePath.indexOf("http://")!=-1 || filePath.indexOf("https://")!=-1){
					if(MiniAdpter.autoCacheFile || isSaveFile){
						MiniFileMgr.copyFile(filePath,readyUrl,callBack,encoding,isAutoClear);
					}
				}
				else
				callBack !=null && callBack.runWith([0,data]);
				},fail:function (data){
				if (data)
					callBack !=null && callBack.runWith([1,data]);
		}});
	}

	MiniFileMgr.downOtherFiles=function(fileUrl,callBack,readyUrl,isSaveFile,isAutoClear){
		(readyUrl===void 0)&& (readyUrl="");
		(isSaveFile===void 0)&& (isSaveFile=false);
		(isAutoClear===void 0)&& (isAutoClear=true);
		MiniFileMgr.wxdown({url:fileUrl,success:function (data){
				if (data.statusCode===200){
					if((MiniAdpter.autoCacheFile || isSaveFile)&& readyUrl.indexOf("wx.qlogo.cn")==-1 && readyUrl.indexOf(".php")==-1)
						MiniFileMgr.copyFile(data.tempFilePath,readyUrl,callBack,"",isAutoClear);
					else
					callBack !=null && callBack.runWith([0,data.tempFilePath]);
				}
				},fail:function (data){
				callBack !=null && callBack.runWith([1,data]);
		}});
	}

	MiniFileMgr.downLoadFile=function(fileUrl,fileType,callBack,encoding){
		(fileType===void 0)&& (fileType="");
		(encoding===void 0)&& (encoding="ascii");
		if(fileType==/*laya.net.Loader.IMAGE*/"image" || fileType==/*laya.net.Loader.SOUND*/"sound")
			MiniFileMgr.downOtherFiles(fileUrl,callBack,fileUrl,true,false);
		else
		MiniFileMgr.downFiles(fileUrl,encoding,callBack,fileUrl,true,fileType,false);
	}

	MiniFileMgr.copyFile=function(tempFilePath,readyUrl,callBack,encoding,isAutoClear){
		(encoding===void 0)&& (encoding="");
		(isAutoClear===void 0)&& (isAutoClear=true);
		var temp=tempFilePath.split("/");
		var tempFileName=temp[temp.length-1];
		var fileurlkey=readyUrl;
		var fileObj=MiniFileMgr.getFileInfo(readyUrl);
		var saveFilePath=MiniFileMgr.getFileNativePath(tempFileName);
		var totalSize=50 *1024 *1024;
		var chaSize=4 *1024 *1024;
		var fileUseSize=MiniFileMgr.getCacheUseSize();
		if (fileObj){
			if (fileObj.readyUrl !=readyUrl){
				MiniFileMgr.fs.getFileInfo({
					filePath:tempFilePath,
					success:function (data){
						if((isAutoClear && (fileUseSize+chaSize+data.size)>=totalSize)){
							if(data.size > MiniAdpter.minClearSize)
								MiniAdpter.minClearSize=data.size;
							MiniFileMgr.onClearCacheRes();
						}
						MiniFileMgr.deleteFile(tempFileName,readyUrl,callBack,encoding,data.size);
					},
					fail:function (data){
						callBack !=null && callBack.runWith([1,data]);
					}
				});
			}
			else
			callBack !=null && callBack.runWith([0]);
			}else{
			MiniFileMgr.fs.getFileInfo({
				filePath:tempFilePath,
				success:function (data){
					if((isAutoClear && (fileUseSize+chaSize+data.size)>=totalSize)){
						if(data.size > MiniAdpter.minClearSize)
							MiniAdpter.minClearSize=data.size;
						MiniFileMgr.onClearCacheRes();
					}
					MiniFileMgr.fs.copyFile({srcPath:tempFilePath,destPath:saveFilePath,success:function (data2){
							MiniFileMgr.onSaveFile(readyUrl,tempFileName,true,encoding,callBack,data.size);
							},fail:function (data){
							callBack !=null && callBack.runWith([1,data]);
					}});
				},
				fail:function (data){
					callBack !=null && callBack.runWith([1,data]);
				}
			});
		}
	}

	MiniFileMgr.onClearCacheRes=function(){
		var memSize=MiniAdpter.minClearSize;
		var tempFileListArr=[];
		for(var key in MiniFileMgr.filesListObj){
			tempFileListArr.push(MiniFileMgr.filesListObj[key]);
		}
		MiniFileMgr.sortOn(tempFileListArr,"time",16);
		var clearSize=0;
		for(var i=1,sz=tempFileListArr.length;i<sz;i++){
			var fileObj=tempFileListArr[i];
			if(clearSize >=memSize)
				break ;
			clearSize+=fileObj.size;
			MiniFileMgr.deleteFile("",fileObj.readyUrl);
		}
	}

	MiniFileMgr.sortOn=function(array,name,options){
		(options===void 0)&& (options=0);
		if (options==16)return array.sort(function(a,b){return a[name]-b[name];});
		if (options==(16 | 2))return array.sort(function(a,b){return b[name]-a[name];});
		return array.sort(function(a,b){return a[name]-b[name] });
	}

	MiniFileMgr.getFileNativePath=function(fileName){
		return laya.wx.mini.MiniFileMgr.fileNativeDir+"/"+fileName;
	}

	MiniFileMgr.deleteFile=function(tempFileName,readyUrl,callBack,encoding,fileSize){
		(readyUrl===void 0)&& (readyUrl="");
		(encoding===void 0)&& (encoding="");
		(fileSize===void 0)&& (fileSize=0);
		var fileObj=MiniFileMgr.getFileInfo(readyUrl);
		var deleteFileUrl=MiniFileMgr.getFileNativePath(fileObj.md5);
		MiniFileMgr.fs.unlink({filePath:deleteFileUrl,success:function (data){
				var isAdd=tempFileName !="" ? true :false;
				if(tempFileName !=""){
					var saveFilePath=MiniFileMgr.getFileNativePath(tempFileName);
					MiniFileMgr.fs.copyFile({srcPath:tempFileName,destPath:saveFilePath,success:function (data){
							MiniFileMgr.onSaveFile(readyUrl,tempFileName,isAdd,encoding,callBack,data.size);
							},fail:function (data){
							callBack !=null && callBack.runWith([1,data]);
					}});
					}else{
					MiniFileMgr.onSaveFile(readyUrl,tempFileName,isAdd,encoding,callBack,fileSize);
				}
				},fail:function (data){
		}});
	}

	MiniFileMgr.deleteAll=function(){
		var tempFileListArr=[];
		for(var key in MiniFileMgr.filesListObj){
			tempFileListArr.push(MiniFileMgr.filesListObj[key]);
		}
		for(var i=1,sz=tempFileListArr.length;i<sz;i++){
			var fileObj=tempFileListArr[i];
			MiniFileMgr.deleteFile("",fileObj.readyUrl);
		}
	}

	MiniFileMgr.onSaveFile=function(readyUrl,md5Name,isAdd,encoding,callBack,fileSize){
		(isAdd===void 0)&& (isAdd=true);
		(encoding===void 0)&& (encoding="");
		(fileSize===void 0)&& (fileSize=0);
		var fileurlkey=readyUrl;
		if(MiniFileMgr.filesListObj['fileUsedSize']==null)
			MiniFileMgr.filesListObj['fileUsedSize']=0;
		if(isAdd){
			var fileNativeName=MiniFileMgr.getFileNativePath(md5Name);
			MiniFileMgr.filesListObj[fileurlkey]={md5:md5Name,readyUrl:readyUrl,size:fileSize,times:Browser.now(),encoding:encoding};
			MiniFileMgr.filesListObj['fileUsedSize']=parseInt(MiniFileMgr.filesListObj['fileUsedSize'])+fileSize;
			MiniFileMgr.writeFilesList(fileurlkey,JSON.stringify(MiniFileMgr.filesListObj),true);
			callBack !=null && callBack.runWith([0]);
			}else{
			if(MiniFileMgr.filesListObj[fileurlkey]){
				var deletefileSize=parseInt(MiniFileMgr.filesListObj[fileurlkey].size);
				MiniFileMgr.filesListObj['fileUsedSize']=parseInt(MiniFileMgr.filesListObj['fileUsedSize'])-deletefileSize;
				delete MiniFileMgr.filesListObj[fileurlkey];
				MiniFileMgr.writeFilesList(fileurlkey,JSON.stringify(MiniFileMgr.filesListObj),false);
				callBack !=null && callBack.runWith([0]);
			}
		}
	}

	MiniFileMgr.writeFilesList=function(fileurlkey,filesListStr,isAdd){
		var listFilesPath=MiniFileMgr.fileNativeDir+"/"+MiniFileMgr.fileListName;
		MiniFileMgr.fs.writeFile({filePath:listFilesPath,encoding:'utf8',data:filesListStr,success:function (data){
				},fail:function (data){
		}});
		if(!MiniAdpter.isZiYu &&MiniAdpter.isPosMsgYu){
			/*__JS__ */wx.postMessage({url:fileurlkey,data:MiniFileMgr.filesListObj[fileurlkey],isLoad:"filenative",isAdd:isAdd});
		}
	}

	MiniFileMgr.getCacheUseSize=function(){
		if(MiniFileMgr.filesListObj && MiniFileMgr.filesListObj['fileUsedSize'])
			return MiniFileMgr.filesListObj['fileUsedSize'];
		return 0;
	}

	MiniFileMgr.existDir=function(dirPath,callBack){
		MiniFileMgr.fs.mkdir({dirPath:dirPath,success:function (data){
				callBack !=null && callBack.runWith([0,{data:JSON.stringify({})}]);
				},fail:function (data){
				if (data.errMsg.indexOf("file already exists")!=-1)
					MiniFileMgr.readSync(MiniFileMgr.fileListName,"utf8",callBack);
				else
				callBack !=null && callBack.runWith([1,data]);
		}});
	}

	MiniFileMgr.readSync=function(filePath,encoding,callBack,readyUrl){
		(encoding===void 0)&& (encoding="ascill");
		(readyUrl===void 0)&& (readyUrl="");
		var fileUrl=MiniFileMgr.getFileNativePath(filePath);
		var filesListStr
		try{
			filesListStr=MiniFileMgr.fs.readFileSync(fileUrl,encoding);
			callBack !=null && callBack.runWith([0,{data:filesListStr}]);
		}
		catch(error){
			callBack !=null && callBack.runWith([1]);
		}
	}

	MiniFileMgr.setNativeFileDir=function(value){
		MiniFileMgr.fileNativeDir=/*__JS__ */wx.env.USER_DATA_PATH+value;
	}

	MiniFileMgr.filesListObj={};
	MiniFileMgr.fileNativeDir=null;
	MiniFileMgr.fileListName="layaairfiles.txt";
	MiniFileMgr.ziyuFileData={};
	MiniFileMgr.loadPath="";
	MiniFileMgr.DESCENDING=2;
	MiniFileMgr.NUMERIC=16;
	__static(MiniFileMgr,
	['fs',function(){return this.fs=/*__JS__ */wx.getFileSystemManager();},'wxdown',function(){return this.wxdown=/*__JS__ */wx.downloadFile;}
	]);
	return MiniFileMgr;
})()


/**@private **/
//class laya.wx.mini.MiniImage
var MiniImage=(function(){
	function MiniImage(){}
	__class(MiniImage,'laya.wx.mini.MiniImage');
	var __proto=MiniImage.prototype;
	/**@private **/
	__proto._loadImage=function(url){
		var thisLoader=this;
		if (MiniAdpter.isZiYu){
			MiniImage.onCreateImage(url,thisLoader,true);
			return;
		};
		var isTransformUrl=false;
		if (!MiniFileMgr.isLocalNativeFile(url)){
			isTransformUrl=true;
			url=URL.formatURL(url);
			}else{
			if (url.indexOf("http://")!=-1 || url.indexOf("https://")!=-1){
				if(MiniFileMgr.loadPath !=""){
					url=url.split(MiniFileMgr.loadPath)[1];
					}else{
					var tempStr=URL.rootPath !="" ? URL.rootPath :URL.basePath;
					if(tempStr !="")
						url=url.split(tempStr)[1];
				}
			}
		}
		if (!MiniFileMgr.getFileInfo(url)){
			if (url.indexOf("http://")!=-1 || url.indexOf("https://")!=-1){
				if(MiniAdpter.isZiYu){
					MiniImage.onCreateImage(url,thisLoader,true);
					}else{
					MiniFileMgr.downOtherFiles(url,new Handler(MiniImage,MiniImage.onDownImgCallBack,[url,thisLoader]),url);
				}
			}
			else
			MiniImage.onCreateImage(url,thisLoader,true);
			}else {
			MiniImage.onCreateImage(url,thisLoader,!isTransformUrl);
		}
	}

	MiniImage.onDownImgCallBack=function(sourceUrl,thisLoader,errorCode,tempFilePath){
		(tempFilePath===void 0)&& (tempFilePath="");
		if (!errorCode)
			MiniImage.onCreateImage(sourceUrl,thisLoader,false,tempFilePath);
		else {
			thisLoader.onError(null);
		}
	}

	MiniImage.onCreateImage=function(sourceUrl,thisLoader,isLocal,tempFilePath){
		(isLocal===void 0)&& (isLocal=false);
		(tempFilePath===void 0)&& (tempFilePath="");
		var fileNativeUrl;
		if(MiniAdpter.autoCacheFile){
			if (!isLocal){
				if(tempFilePath !=""){
					fileNativeUrl=tempFilePath;
					}else{
					var fileObj=MiniFileMgr.getFileInfo(sourceUrl);
					var fileMd5Name=fileObj.md5;
					fileNativeUrl=MiniFileMgr.getFileNativePath(fileMd5Name);
				}
			}else
			fileNativeUrl=sourceUrl;
			}else{
			if(!isLocal)
				fileNativeUrl=tempFilePath;
			else
			fileNativeUrl=sourceUrl;
		}
		if (thisLoader.imgCache==null)
			thisLoader.imgCache={};
		var image;
		function clear (){
			image.onload=null;
			image.onerror=null;
			delete thisLoader.imgCache[sourceUrl]
		};
		var onload=function (){
			clear();
			thisLoader._url=URL.formatURL(thisLoader._url);
			thisLoader.onLoaded(image);
		};
		var onerror=function (){
			clear();
			thisLoader.event(/*laya.events.Event.ERROR*/"error","Load image failed");
		}
		if (thisLoader._type=="nativeimage"){
			image=new Browser.window.Image();
			image.crossOrigin="";
			image.onload=onload;
			image.onerror=onerror;
			image.src=fileNativeUrl;
			thisLoader.imgCache[sourceUrl]=image;
			}else {
			new HTMLImage.create(fileNativeUrl,{onload:onload,onerror:onerror,onCreate:function (img){
					image=img;
					thisLoader.imgCache[sourceUrl]=img;
			}});
		}
	}

	return MiniImage;
})()


/**@private **/
//class laya.wx.mini.MiniInput
var MiniInput=(function(){
	function MiniInput(){}
	__class(MiniInput,'laya.wx.mini.MiniInput');
	MiniInput._createInputElement=function(){
		Input['_initInput'](Input['area']=Browser.createElement("textarea"));
		Input['_initInput'](Input['input']=Browser.createElement("input"));
		Input['inputContainer']=Browser.createElement("div");
		Input['inputContainer'].style.position="absolute";
		Input['inputContainer'].style.zIndex=1E5;
		Browser.container.appendChild(Input['inputContainer']);
		Input['inputContainer'].setPos=function (x,y){Input['inputContainer'].style.left=x+'px';Input['inputContainer'].style.top=y+'px';};
		Laya.stage.on("resize",null,MiniInput._onStageResize);
		/*__JS__ */wx.onWindowResize && /*__JS__ */wx.onWindowResize(function(res){
			/*__JS__ */window.dispatchEvent && /*__JS__ */window.dispatchEvent("resize");
		});
		SoundManager._soundClass=MiniSound;
		SoundManager._musicClass=MiniSound;
		var model=MiniAdpter.systemInfo.model;
		var system=MiniAdpter.systemInfo.system;
		if(model.indexOf("iPhone")!=-1){
			Browser.onIPhone=true;
			Browser.onIOS=true;
			Browser.onIPad=true;
			Browser.onAndroid=false;
		}
		if(system.indexOf("Android")!=-1 || system.indexOf("Adr")!=-1){
			Browser.onAndroid=true;
			Browser.onIPhone=false;
			Browser.onIOS=false;
			Browser.onIPad=false;
		}
	}

	MiniInput._onStageResize=function(){
		var ts=Laya.stage._canvasTransform.identity();
		ts.scale((Browser.width / Render.canvas.width / RunDriver.getPixelRatio()),Browser.height / Render.canvas.height / RunDriver.getPixelRatio());
	}

	MiniInput.wxinputFocus=function(e){
		var _inputTarget=Input['inputElement'].target;
		if (_inputTarget && !_inputTarget.editable){
			return;
		}
		MiniAdpter.window.wx.offKeyboardConfirm();
		MiniAdpter.window.wx.offKeyboardInput();
		MiniAdpter.window.wx.showKeyboard({defaultValue:_inputTarget.text,maxLength:_inputTarget.maxChars,multiple:_inputTarget.multiline,confirmHold:true,confirmType:'done',success:function (res){
				},fail:function (res){
		}});
		MiniAdpter.window.wx.onKeyboardConfirm(function(res){
			var str=res ? res.value :"";
			_inputTarget.text=str;
			_inputTarget.event(/*laya.events.Event.INPUT*/"input");
			laya.wx.mini.MiniInput.inputEnter();
		})
		MiniAdpter.window.wx.onKeyboardInput(function(res){
			var str=res ? res.value :"";
			if (!_inputTarget.multiline){
				if (str.indexOf("\n")!=-1){
					laya.wx.mini.MiniInput.inputEnter();
					return;
				}
			}
			_inputTarget.text=str;
			_inputTarget.event(/*laya.events.Event.INPUT*/"input");
		});
	}

	MiniInput.inputEnter=function(){
		Input['inputElement'].target.focus=false;
	}

	MiniInput.wxinputblur=function(){
		MiniInput.hideKeyboard();
	}

	MiniInput.hideKeyboard=function(){
		MiniAdpter.window.wx.offKeyboardConfirm();
		MiniAdpter.window.wx.offKeyboardInput();
		MiniAdpter.window.wx.hideKeyboard({success:function (res){
				console.log('隐藏键盘')
				},fail:function (res){
				console.log("隐藏键盘出错:"+(res ? res.errMsg :""));
		}});
	}

	return MiniInput;
})()


/**@private **/
//class laya.wx.mini.MiniLocalStorage
var MiniLocalStorage=(function(){
	function MiniLocalStorage(){}
	__class(MiniLocalStorage,'laya.wx.mini.MiniLocalStorage');
	MiniLocalStorage.__init__=function(){
		MiniLocalStorage.items=MiniLocalStorage;
	}

	MiniLocalStorage.setItem=function(key,value){
		/*__JS__ */wx.setStorageSync(key,value);
	}

	MiniLocalStorage.getItem=function(key){
		return /*__JS__ */wx.getStorageSync(key);
	}

	MiniLocalStorage.setJSON=function(key,value){
		MiniLocalStorage.setItem(key,value);
	}

	MiniLocalStorage.getJSON=function(key){
		return MiniLocalStorage.getItem(key);
	}

	MiniLocalStorage.removeItem=function(key){
		/*__JS__ */wx.removeStorageSync(key);
	}

	MiniLocalStorage.clear=function(){
		/*__JS__ */wx.clearStorageSync();
	}

	MiniLocalStorage.getStorageInfoSync=function(){
		try {
			var res=/*__JS__ */wx.getStorageInfoSync()
			console.log(res.keys)
			console.log(res.currentSize)
			console.log(res.limitSize)
			return res;
		}catch (e){}
		return null;
	}

	MiniLocalStorage.support=true;
	MiniLocalStorage.items=null;
	return MiniLocalStorage;
})()


/**@private **/
//class laya.wx.mini.MiniLocation
var MiniLocation=(function(){
	function MiniLocation(){}
	__class(MiniLocation,'laya.wx.mini.MiniLocation');
	MiniLocation.__init__=function(){
		MiniAdpter.window.navigator.geolocation.getCurrentPosition=MiniLocation.getCurrentPosition;
		MiniAdpter.window.navigator.geolocation.watchPosition=MiniLocation.watchPosition;
		MiniAdpter.window.navigator.geolocation.clearWatch=MiniLocation.clearWatch;
	}

	MiniLocation.getCurrentPosition=function(success,error,options){
		var paramO;
		paramO={};
		paramO.success=getSuccess;
		paramO.fail=error;
		MiniAdpter.window.wx.getLocation(paramO);
		function getSuccess (res){
			if (success !=null){
				success(res);
			}
		}
	}

	MiniLocation.watchPosition=function(success,error,options){
		MiniLocation._curID++;
		var curWatchO;
		curWatchO={};
		curWatchO.success=success;
		curWatchO.error=error;
		MiniLocation._watchDic[MiniLocation._curID]=curWatchO;
		Laya.timer.loop(1000,null,MiniLocation._myLoop);
		return MiniLocation._curID;
	}

	MiniLocation.clearWatch=function(id){
		delete MiniLocation._watchDic[id];
		if (!MiniLocation._hasWatch()){
			Laya.timer.clear(null,MiniLocation._myLoop);
		}
	}

	MiniLocation._hasWatch=function(){
		var key;
		for (key in MiniLocation._watchDic){
			if (MiniLocation._watchDic[key])return true;
		}
		return false;
	}

	MiniLocation._myLoop=function(){
		MiniLocation.getCurrentPosition(MiniLocation._mySuccess,MiniLocation._myError);
	}

	MiniLocation._mySuccess=function(res){
		var rst={};
		rst.coords=res;
		rst.timestamp=Browser.now();
		var key;
		for (key in MiniLocation._watchDic){
			if (MiniLocation._watchDic[key].success){
				MiniLocation._watchDic[key].success(rst);
			}
		}
	}

	MiniLocation._myError=function(res){
		var key;
		for (key in MiniLocation._watchDic){
			if (MiniLocation._watchDic[key].error){
				MiniLocation._watchDic[key].error(res);
			}
		}
	}

	MiniLocation._watchDic={};
	MiniLocation._curID=0;
	return MiniLocation;
})()


/**@private **/
//class laya.wx.mini.MiniAccelerator extends laya.events.EventDispatcher
var MiniAccelerator=(function(_super){
	function MiniAccelerator(){
		MiniAccelerator.__super.call(this);
	}

	__class(MiniAccelerator,'laya.wx.mini.MiniAccelerator',_super);
	var __proto=MiniAccelerator.prototype;
	/**
	*侦听加速器运动。
	*@param observer 回调函数接受4个参数，见类说明。
	*/
	__proto.on=function(type,caller,listener,args){
		_super.prototype.on.call(this,type,caller,listener,args);
		MiniAccelerator.startListen(this["onDeviceOrientationChange"]);
		return this;
	}

	/**
	*取消侦听加速器。
	*@param handle 侦听加速器所用处理器。
	*/
	__proto.off=function(type,caller,listener,onceOnly){
		(onceOnly===void 0)&& (onceOnly=false);
		if (!this.hasListener(type))
			MiniAccelerator.stopListen();
		return _super.prototype.off.call(this,type,caller,listener,onceOnly);
	}

	MiniAccelerator.__init__=function(){
		try{
			var Acc;
			Acc=/*__JS__ */laya.device.motion.Accelerator;
			if (!Acc)return;
			Acc["prototype"]["on"]=MiniAccelerator["prototype"]["on"];
			Acc["prototype"]["off"]=MiniAccelerator["prototype"]["off"];
			}catch (e){
		}
	}

	MiniAccelerator.startListen=function(callBack){
		MiniAccelerator._callBack=callBack;
		if (MiniAccelerator._isListening)return;
		MiniAccelerator._isListening=true;
		try{
			/*__JS__ */wx.onAccelerometerChange(MiniAccelerator.onAccelerometerChange);
		}catch(e){}
	}

	MiniAccelerator.stopListen=function(){
		MiniAccelerator._isListening=false;
		try{
			/*__JS__ */wx.stopAccelerometer({});
		}catch(e){}
	}

	MiniAccelerator.onAccelerometerChange=function(res){
		var e;
		e={};
		e.acceleration=res;
		e.accelerationIncludingGravity=res;
		e.rotationRate={};
		if (MiniAccelerator._callBack !=null){
			MiniAccelerator._callBack(e);
		}
	}

	MiniAccelerator._isListening=false;
	MiniAccelerator._callBack=null;
	return MiniAccelerator;
})(EventDispatcher)


/**@private **/
//class laya.wx.mini.MiniLoader extends laya.events.EventDispatcher
var MiniLoader=(function(_super){
	function MiniLoader(){
		MiniLoader.__super.call(this);
	}

	__class(MiniLoader,'laya.wx.mini.MiniLoader',_super);
	var __proto=MiniLoader.prototype;
	/**
	*@private
	*@param url
	*@param type
	*@param cache
	*@param group
	*@param ignoreCache
	*/
	__proto.load=function(url,type,cache,group,ignoreCache){
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		var thisLoader=this;
		thisLoader._url=url;
		if (url.indexOf("data:image")===0)thisLoader._type=type=/*laya.net.Loader.IMAGE*/"image";
		else {
			thisLoader._type=type || (type=thisLoader.getTypeFromUrl(url));
		}
		thisLoader._cache=cache;
		thisLoader._data=null;
		if (!ignoreCache && Loader.loadedMap[URL.formatURL(url)]){
			thisLoader._data=Loader.loadedMap[URL.formatURL(url)];
			this.event(/*laya.events.Event.PROGRESS*/"progress",1);
			this.event(/*laya.events.Event.COMPLETE*/"complete",thisLoader._data);
			return;
		}
		if (Loader.parserMap[type] !=null){
			thisLoader._customParse=true;
			if (((Loader.parserMap[type])instanceof laya.utils.Handler ))Loader.parserMap[type].runWith(this);
			else Loader.parserMap[type].call(null,this);
			return;
		};
		var encoding=MiniAdpter.getUrlEncode(url,type);
		var urlType=Utils.getFileExtension(url);
		if ((MiniLoader._fileTypeArr.indexOf(urlType)!=-1)){
			MiniAdpter.EnvConfig.load.call(this,url,type,cache,group,ignoreCache);
			}else {
			if(MiniAdpter.isZiYu && MiniFileMgr.ziyuFileData[url]){
				var tempData=MiniFileMgr.ziyuFileData[url];
				thisLoader.onLoaded(tempData);
				return;
			}
			if (!MiniFileMgr.getFileInfo(url)){
				if (MiniFileMgr.isLocalNativeFile(url)){
					MiniFileMgr.read(url,encoding,new Handler(MiniLoader,MiniLoader.onReadNativeCallBack,[encoding,url,type,cache,group,ignoreCache,thisLoader]));
					return;
				};
				var tempUrl=url;
				url=URL.formatURL(url);
				if (url.indexOf("http://")!=-1 || url.indexOf("https://")!=-1){
					MiniAdpter.EnvConfig.load.call(thisLoader,tempUrl,type,cache,group,ignoreCache);
					}else {
					MiniFileMgr.readFile(url,encoding,new Handler(MiniLoader,MiniLoader.onReadNativeCallBack,[encoding,url,type,cache,group,ignoreCache,thisLoader]),url);
				}
				}else {
				var fileObj=MiniFileMgr.getFileInfo(url);
				fileObj.encoding=fileObj.encoding==null ? "ascii" :fileObj.encoding;
				MiniFileMgr.readFile(url,fileObj.encoding,new Handler(MiniLoader,MiniLoader.onReadNativeCallBack,[encoding,url,type,cache,group,ignoreCache,thisLoader]),url);
			}
		}
	}

	MiniLoader.onReadNativeCallBack=function(encoding,url,type,cache,group,ignoreCache,thisLoader,errorCode,data){
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		(errorCode===void 0)&& (errorCode=0);
		if (!errorCode){
			var tempData;
			if (type==/*laya.net.Loader.JSON*/"json" || type==/*laya.net.Loader.ATLAS*/"atlas"){
				tempData=MiniAdpter.getJson(data.data);
				}else if (type==/*laya.net.Loader.XML*/"xml"){
				tempData=Utils.parseXMLFromString(data.data);
				}else {
				tempData=data.data;
			}
			if(!MiniAdpter.isZiYu &&MiniAdpter.isPosMsgYu && type !=/*laya.net.Loader.BUFFER*/"arraybuffer"){
				/*__JS__ */wx.postMessage({url:url,data:tempData,isLoad:"filedata"});
			}
			thisLoader.onLoaded(tempData);
			}else if (errorCode==1){
			MiniAdpter.EnvConfig.load.call(thisLoader,url,type,cache,group,ignoreCache);
		}
	}

	__static(MiniLoader,
	['_fileTypeArr',function(){return this._fileTypeArr=['png','jpg','bmp','jpeg','gif'];}
	]);
	return MiniLoader;
})(EventDispatcher)


/**@private **/
//class laya.wx.mini.MiniSound extends laya.events.EventDispatcher
var MiniSound=(function(_super){
	function MiniSound(){
		/**@private **/
		this._sound=null;
		/**
		*@private
		*声音URL
		*/
		this.url=null;
		/**
		*@private
		*是否已加载完成
		*/
		this.loaded=false;
		/**@private **/
		this.readyUrl=null;
		MiniSound.__super.call(this);
	}

	__class(MiniSound,'laya.wx.mini.MiniSound',_super);
	var __proto=MiniSound.prototype;
	/**
	*@private
	*加载声音。
	*@param url 地址。
	*
	*/
	__proto.load=function(url){
		url=URL.formatURL(url);
		this.url=url;
		this.readyUrl=url;
		if (MiniSound._audioCache[this.readyUrl]){
			this.event(/*laya.events.Event.COMPLETE*/"complete");
			return;
		}
		if(MiniAdpter.autoCacheFile&&MiniFileMgr.getFileInfo(url)){
			this.onDownLoadCallBack(url,0);
			}else{
			if(!MiniAdpter.autoCacheFile){
				this.onDownLoadCallBack(url,0);
				}else{
				MiniFileMgr.downOtherFiles(url,Handler.create(this,this.onDownLoadCallBack,[url]),url);
			}
		}
	}

	/**@private **/
	__proto.onDownLoadCallBack=function(sourceUrl,errorCode){
		if (!errorCode){
			var fileNativeUrl;
			if(MiniAdpter.autoCacheFile){
				var fileObj=MiniFileMgr.getFileInfo(sourceUrl);
				var fileMd5Name=fileObj.md5;
				fileNativeUrl=MiniFileMgr.getFileNativePath(fileMd5Name);
				this._sound=MiniSound._createSound();
				this._sound.src=this.url=fileNativeUrl;
				}else{
				this._sound=MiniSound._createSound();
				this._sound.src=sourceUrl;
			}
			this._sound.onCanplay(MiniSound.bindToThis(this.onCanPlay,this));
			this._sound.onError(MiniSound.bindToThis(this.onError,this));
			}else{
			this.event(/*laya.events.Event.ERROR*/"error");
		}
	}

	/**@private **/
	__proto.onError=function(error){
		try{
			console.log("-----1---------------minisound-----id:"+MiniSound._id);
			console.log(error);
		}
		catch(error){
			console.log("-----2---------------minisound-----id:"+MiniSound._id);
			console.log(error);
		}
		this.event(/*laya.events.Event.ERROR*/"error");
		this._sound.offError(null);
	}

	/**@private **/
	__proto.onCanPlay=function(){
		this.loaded=true;
		this.event(/*laya.events.Event.COMPLETE*/"complete");
		this._sound.offCanplay(null);
	}

	/**
	*@private
	*播放声音。
	*@param startTime 开始时间,单位秒
	*@param loops 循环次数,0表示一直循环
	*@return 声道 SoundChannel 对象。
	*
	*/
	__proto.play=function(startTime,loops){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		var tSound;
		if (this.url==SoundManager._tMusic){
			if (!MiniSound._musicAudio)MiniSound._musicAudio=MiniSound._createSound();
			tSound=MiniSound._musicAudio;
			}else {
			if(MiniSound._audioCache[this.readyUrl]){
				tSound=MiniSound._audioCache[this.readyUrl]._sound;
				}else{
				tSound=MiniSound._createSound();
			}
		}
		if(MiniAdpter.autoCacheFile&&MiniFileMgr.getFileInfo(this.url)){
			var fileNativeUrl;
			var fileObj=MiniFileMgr.getFileInfo(this.url);
			var fileMd5Name=fileObj.md5;
			tSound.src=this.url=MiniFileMgr.getFileNativePath(fileMd5Name);
			}else{
			tSound.src=this.url;
		};
		var channel=new MiniSoundChannel(tSound,this);
		channel.url=this.url;
		channel.loops=loops;
		channel.loop=(loops===0 ? true :false);
		channel.startTime=startTime;
		channel.play();
		SoundManager.addChannel(channel);
		return channel;
	}

	/**
	*@private
	*释放声音资源。
	*
	*/
	__proto.dispose=function(){
		var ad=MiniSound._audioCache[this.readyUrl];
		if (ad){
			ad.src="";
			if(ad._sound){
				ad._sound.destroy();
				ad._sound=null;
				ad=null;
			}
			delete MiniSound._audioCache[this.readyUrl];
		}
	}

	/**
	*@private
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		return this._sound.duration;
	});

	MiniSound._createSound=function(){
		MiniSound._id++;
		return MiniAdpter.window.wx.createInnerAudioContext();
	}

	MiniSound.bindToThis=function(fun,scope){
		var rst=fun;
		/*__JS__ */rst=fun.bind(scope);;
		return rst;
	}

	MiniSound._musicAudio=null;
	MiniSound._id=0;
	MiniSound._audioCache={};
	return MiniSound;
})(EventDispatcher)


/**@private **/
//class laya.wx.mini.MiniSoundChannel extends laya.media.SoundChannel
var MiniSoundChannel=(function(_super){
	function MiniSoundChannel(audio,miniSound){
		/**@private **/
		this._audio=null;
		/**@private **/
		this._onEnd=null;
		/**@private **/
		this._miniSound=null;
		MiniSoundChannel.__super.call(this);
		this._audio=audio;
		this._miniSound=miniSound;
		this._onEnd=MiniSoundChannel.bindToThis(this.__onEnd,this);
		audio.onEnded(this._onEnd);
	}

	__class(MiniSoundChannel,'laya.wx.mini.MiniSoundChannel',_super);
	var __proto=MiniSoundChannel.prototype;
	/**@private **/
	__proto.__onEnd=function(){
		if (this.loops==1){
			if (this.completeHandler){
				Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
				this.completeHandler=null;
			}
			this.stop();
			this.event(/*laya.events.Event.COMPLETE*/"complete");
			return;
		}
		if (this.loops > 0){
			this.loops--;
		}
		this.startTime=0;
		this.play();
	}

	/**
	*@private
	*播放
	*/
	__proto.play=function(){
		this.isStopped=false;
		SoundManager.addChannel(this);
		this._audio.play();
	}

	/**
	*@private
	*停止播放
	*
	*/
	__proto.stop=function(){
		this.isStopped=true;
		SoundManager.removeChannel(this);
		this.completeHandler=null;
		if (!this._audio)
			return;
		this._audio.pause();
		this._audio.offEnded(null);
		this._audio=null;
		this._miniSound=null;
		this._onEnd=null;
	}

	/**@private **/
	__proto.pause=function(){
		this.isStopped=true;
		this._audio.pause();
	}

	/**@private **/
	__proto.resume=function(){
		if (!this._audio)
			return;
		this.isStopped=false;
		SoundManager.addChannel(this);
		this._audio.play();
	}

	/**@private **/
	/**
	*@private
	*自动播放
	*@param value
	*/
	__getset(0,__proto,'autoplay',function(){
		return this._audio.autoplay;
		},function(value){
		this._audio.autoplay=value;
	});

	/**
	*@private
	*当前播放到的位置
	*@return
	*
	*/
	__getset(0,__proto,'position',function(){
		if (!this._audio)
			return 0;
		return this._audio.currentTime;
	});

	/**
	*@private
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		if (!this._audio)
			return 0;
		return this._audio.duration;
	});

	/**@private **/
	/**@private **/
	__getset(0,__proto,'loop',function(){
		return this._audio.loop;
		},function(value){
		this._audio.loop=value;
	});

	/**
	*@private
	*设置音量
	*@param v
	*
	*/
	/**
	*@private
	*获取音量
	*@return
	*/
	__getset(0,__proto,'volume',function(){
		if (!this._audio)return 1;
		return this._audio.volume;
		},function(v){
		if (!this._audio)return;
		this._audio.volume=v;
	});

	MiniSoundChannel.bindToThis=function(fun,scope){
		var rst=fun;
		/*__JS__ */rst=fun.bind(scope);;
		return rst;
	}

	return MiniSoundChannel;
})(SoundChannel)



})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Arith=laya.maths.Arith,Bezier=laya.maths.Bezier,Bitmap=laya.resource.Bitmap,Browser=laya.utils.Browser;
	var Byte=laya.utils.Byte,Color=laya.utils.Color,ColorFilter=laya.filters.ColorFilter,Config=Laya.Config,Context=laya.resource.Context;
	var Event=laya.events.Event,Filter=laya.filters.Filter,Graphics=laya.display.Graphics,HTMLCanvas=laya.resource.HTMLCanvas;
	var HTMLChar=laya.utils.HTMLChar,HTMLImage=laya.resource.HTMLImage,HTMLSubImage=laya.resource.HTMLSubImage;
	var Handler=laya.utils.Handler,Loader=laya.net.Loader,Matrix=laya.maths.Matrix,Point=laya.maths.Point,Rectangle=laya.maths.Rectangle;
	var Render=laya.renders.Render,RenderContext=laya.renders.RenderContext,RenderSprite=laya.renders.RenderSprite;
	var Resource=laya.resource.Resource,ResourceManager=laya.resource.ResourceManager,RunDriver=laya.utils.RunDriver;
	var Sprite=laya.display.Sprite,Stage=laya.display.Stage,Stat=laya.utils.Stat,StringKey=laya.utils.StringKey;
	var Style=laya.display.css.Style,System=laya.system.System,Text=laya.display.Text,Texture=laya.resource.Texture;
	var TransformInfo=laya.display.css.TransformInfo,URL=laya.net.URL,Utils=laya.utils.Utils,VectorGraphManager=laya.utils.VectorGraphManager;
	var WordText=laya.utils.WordText;
Laya.interface('laya.webgl.shapes.IShape');
Laya.interface('laya.webgl.submit.ISubmit');
Laya.interface('laya.webgl.text.ICharSegment');
Laya.interface('laya.webgl.canvas.save.ISaveData');
Laya.interface('laya.webgl.resource.IMergeAtlasBitmap');
Laya.interface('laya.filters.IFilterActionGL','laya.filters.IFilterAction');
//class laya.filters.webgl.FilterActionGL
var FilterActionGL=(function(){
	function FilterActionGL(){}
	__class(FilterActionGL,'laya.filters.webgl.FilterActionGL');
	var __proto=FilterActionGL.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
	__proto.setValue=function(shader){}
	__proto.setValueMix=function(shader){}
	__proto.apply3d=function(scope,sprite,context,x,y){return null;}
	__proto.apply=function(srcCanvas){return null;}
	__getset(0,__proto,'typeMix',function(){
		return 0;
	});

	return FilterActionGL;
})()


//class laya.webgl.shader.ShaderValue
var ShaderValue=(function(){
	function ShaderValue(){}
	__class(ShaderValue,'laya.webgl.shader.ShaderValue');
	return ShaderValue;
})()


//class laya.webgl.atlas.AtlasGrid
var AtlasGrid=(function(){
	var TexRowInfo,TexMergeTexSize;
	function AtlasGrid(width,height,atlasID){
		this._atlasID=0;
		this._width=0;
		this._height=0;
		this._texCount=0;
		this._rowInfo=null;
		this._cells=null;
		this._failSize=new TexMergeTexSize();
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		(atlasID===void 0)&& (atlasID=0);
		this._cells=null;
		this._rowInfo=null;
		this._init(width,height);
		this._atlasID=atlasID;
	}

	__class(AtlasGrid,'laya.webgl.atlas.AtlasGrid');
	var __proto=AtlasGrid.prototype;
	//------------------------------------------------------------------------------
	__proto.getAltasID=function(){
		return this._atlasID;
	}

	//------------------------------------------------------------------------------
	__proto.setAltasID=function(atlasID){
		if (atlasID >=0){
			this._atlasID=atlasID;
		}
	}

	//------------------------------------------------------------------
	__proto.addTex=function(type,width,height){
		var result=this._get(width,height);
		if (result.ret==false){
			return result;
		}
		this._fill(result.x,result.y,width,height,type);
		this._texCount++;
		return result;
	}

	//------------------------------------------------------------------------------
	__proto._release=function(){
		if (this._cells !=null){
			this._cells.length=0;
			this._cells=null;
		}
		if (this._rowInfo){
			this._rowInfo.length=0;
			this._rowInfo=null;
		}
	}

	//------------------------------------------------------------------------------
	__proto._init=function(width,height){
		this._width=width;
		this._height=height;
		this._release();
		if (this._width==0)return false;
		this._cells=new Uint8Array(this._width *this._height*3);
		this._rowInfo=__newvec(this._height);
		for (var i=0;i < this._height;i++){
			this._rowInfo[i]=new TexRowInfo();
		}
		this._clear();
		return true;
	}

	//------------------------------------------------------------------
	__proto._get=function(width,height){
		var pFillInfo=new MergeFillInfo();
		if (width >=this._failSize.width && height >=this._failSize.height){
			return pFillInfo;
		};
		var rx=-1;
		var ry=-1;
		var nWidth=this._width;
		var nHeight=this._height;
		var pCellBox=this._cells;
		for (var y=0;y < nHeight;y++){
			if (this._rowInfo[y].spaceCount < width)continue ;
			for (var x=0;x < nWidth;){
				var tm=(y *nWidth+x)*3;
				if (pCellBox[tm] !=0 || pCellBox[tm+1] < width || pCellBox[tm+2] < height){
					x+=pCellBox[tm+1];
					continue ;
				}
				rx=x;
				ry=y;
				for (var xx=0;xx < width;xx++){
					if (pCellBox[3*xx+tm+2] < height){
						rx=-1;
						break ;
					}
				}
				if (rx < 0){
					x+=pCellBox[tm+1];
					continue ;
				}
				pFillInfo.ret=true;
				pFillInfo.x=rx;
				pFillInfo.y=ry;
				return pFillInfo;
			}
		}
		return pFillInfo;
	}

	//------------------------------------------------------------------
	__proto._fill=function(x,y,w,h,type){
		var nWidth=this._width;
		var nHeghit=this._height;
		this._check((x+w)<=nWidth && (y+h)<=nHeghit);
		for (var yy=y;yy < (h+y);++yy){
			this._check(this._rowInfo[yy].spaceCount >=w);
			this._rowInfo[yy].spaceCount-=w;
			for (var xx=0;xx < w;xx++){
				var tm=(x+yy *nWidth+xx)*3;
				this._check(this._cells[tm]==0);
				this._cells[tm]=type;
				this._cells[tm+1]=w;
				this._cells[tm+2]=h;
			}
		}
		if (x > 0){
			for (yy=0;yy < h;++yy){
				var s=0;
				for (xx=x-1;xx >=0;--xx,++s){
					if (this._cells[((y+yy)*nWidth+xx)*3] !=0)break ;
				}
				for (xx=s;xx > 0;--xx){
					this._cells[((y+yy)*nWidth+x-xx)*3+1]=xx;
					this._check(xx > 0);
				}
			}
		}
		if (y > 0){
			for (xx=x;xx < (x+w);++xx){
				s=0;
				for (yy=y-1;yy >=0;--yy,s++){
					if (this._cells[(xx+yy *nWidth)*3] !=0)break ;
				}
				for (yy=s;yy > 0;--yy){
					this._cells[(xx+(y-yy)*nWidth)*3+2]=yy;
					this._check(yy > 0);
				}
			}
		}
	}

	__proto._check=function(ret){
		if (ret==false){
			console.log("xtexMerger 错误啦");
		}
	}

	//------------------------------------------------------------------
	__proto._clear=function(){
		this._texCount=0;
		for (var y=0;y < this._height;y++){
			this._rowInfo[y].spaceCount=this._width;
		}
		for (var i=0;i < this._height;i++){
			for (var j=0;j < this._width;j++){
				var tm=(i *this._width+j)*3;
				this._cells[tm]=0;
				this._cells[tm+1]=this._width-j;
				this._cells[tm+2]=this._width-i;
			}
		}
		this._failSize.width=this._width+1;
		this._failSize.height=this._height+1;
	}

	AtlasGrid.__init$=function(){
		//------------------------------------------------------------------------------
		//class TexRowInfo
		TexRowInfo=(function(){
			function TexRowInfo(){
				this.spaceCount=0;
			}
			__class(TexRowInfo,'');
			return TexRowInfo;
		})()
		//------------------------------------------------------------------------------
		//class TexMergeTexSize
		TexMergeTexSize=(function(){
			function TexMergeTexSize(){
				this.width=0;
				this.height=0;
			}
			__class(TexMergeTexSize,'');
			return TexMergeTexSize;
		})()
	}

	return AtlasGrid;
})()


//class laya.webgl.atlas.AtlasResourceManager
var AtlasResourceManager=(function(){
	function AtlasResourceManager(width,height,gridSize,maxTexNum){
		this._currentAtlasCount=0;
		this._maxAtlaserCount=0;
		this._width=0;
		this._height=0;
		this._gridSize=0;
		this._gridNumX=0;
		this._gridNumY=0;
		this._init=false;
		this._curAtlasIndex=0;
		this._setAtlasParam=false;
		this._atlaserArray=null;
		this._needGC=false;
		this._setAtlasParam=true;
		this._width=width;
		this._height=height;
		this._gridSize=gridSize;
		this._maxAtlaserCount=maxTexNum;
		this._gridNumX=width / gridSize;
		this._gridNumY=height / gridSize;
		this._curAtlasIndex=0;
		this._atlaserArray=[];
	}

	__class(AtlasResourceManager,'laya.webgl.atlas.AtlasResourceManager');
	var __proto=AtlasResourceManager.prototype;
	__proto.setAtlasParam=function(width,height,gridSize,maxTexNum){
		if (this._setAtlasParam==true){
			AtlasResourceManager._sid_=0;
			this._width=width;
			this._height=height;
			this._gridSize=gridSize;
			this._maxAtlaserCount=maxTexNum;
			this._gridNumX=width / gridSize;
			this._gridNumY=height / gridSize;
			this._curAtlasIndex=0;
			this.freeAll();
			return true;
			}else {
			console.log("设置大图合集参数错误，只能在开始页面设置各种参数");
			throw-1;
			return false;
		}
		return false;
	}

	//添加 图片到大图集
	__proto.pushData=function(texture){
		var bitmap=texture.bitmap;
		var nWebGLImageIndex=-1;
		var curAtlas=null;
		var i=0,n=0,altasIndex=0;
		for (i=0,n=this._atlaserArray.length;i < n;i++){
			altasIndex=(this._curAtlasIndex+i)% n;
			curAtlas=this._atlaserArray[altasIndex];
			nWebGLImageIndex=curAtlas.findBitmapIsExist(bitmap);
			if (nWebGLImageIndex !=-1){
				break ;
			}
		}
		if (nWebGLImageIndex !=-1){
			var offset=curAtlas.InAtlasWebGLImagesOffsetValue[nWebGLImageIndex];
			offsetX=offset[0];
			offsetY=offset[1];
			curAtlas.addToAtlas(texture,offsetX,offsetY);
			return true;
			}else {
			var tex=texture;
			this._setAtlasParam=false;
			var bFound=false;
			var nImageGridX=(Math.ceil((texture.bitmap.width+2)/ this._gridSize));
			var nImageGridY=(Math.ceil((texture.bitmap.height+2)/ this._gridSize));
			var bSuccess=false;
			for (var k=0;k < 2;k++){
				var maxAtlaserCount=this._maxAtlaserCount;
				for (i=0;i < maxAtlaserCount;i++){
					altasIndex=(this._curAtlasIndex+i)% maxAtlaserCount;
					(this._atlaserArray.length-1 >=altasIndex)|| (this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasResourceManager._sid_++)));
					var atlas=this._atlaserArray[altasIndex];
					var offsetX=0,offsetY=0;
					var fillInfo=atlas.addTex(1,nImageGridX,nImageGridY);
					if (fillInfo.ret){
						offsetX=fillInfo.x *this._gridSize+1;
						offsetY=fillInfo.y *this._gridSize+1;
						bitmap.lock=true;
						atlas.addToAtlasTexture((bitmap),offsetX,offsetY);
						atlas.addToAtlas(texture,offsetX,offsetY);
						bSuccess=true;
						this._curAtlasIndex=altasIndex;
						break ;
					}
				}
				if (bSuccess)
					break ;
				this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasResourceManager._sid_++));
				this._needGC=true;
				this.garbageCollection();
				this._curAtlasIndex=this._atlaserArray.length-1;
			}
			if (!bSuccess){
				console.log(">>>AtlasManager pushData error");
			}
			return bSuccess;
		}
	}

	__proto.addToAtlas=function(tex){
		laya.webgl.atlas.AtlasResourceManager.instance.pushData(tex);
	}

	/**
	*回收大图合集,不建议手动调用
	*@return
	*/
	__proto.garbageCollection=function(){
		if (this._needGC===true){
			var n=this._atlaserArray.length-this._maxAtlaserCount;
			for (var i=0;i < n;i++){
				this._atlaserArray[i].dispose();
				console.log("AtlasResourceManager:Dispose the inner Atlas。");
			}
			console.log(">>>>altas garbageCollection ="+n);
			this._atlaserArray.splice(0,n);
			this._needGC=false;
		}
		return true;
	}

	__proto.freeAll=function(){
		for (var i=0,n=this._atlaserArray.length;i < n;i++){
			this._atlaserArray[i].dispose();
		}
		this._atlaserArray.length=0;
		this._curAtlasIndex=0;
	}

	__proto.getAtlaserCount=function(){
		return this._atlaserArray.length;
	}

	__proto.getAtlaserByIndex=function(index){
		return this._atlaserArray[index];
	}

	__getset(1,AtlasResourceManager,'instance',function(){
		if (!AtlasResourceManager._Instance){
			AtlasResourceManager._Instance=new AtlasResourceManager(laya.webgl.atlas.AtlasResourceManager.atlasTextureWidth,laya.webgl.atlas.AtlasResourceManager.atlasTextureHeight,/*CLASS CONST:laya.webgl.atlas.AtlasResourceManager.gridSize*/16,laya.webgl.atlas.AtlasResourceManager.maxTextureCount);
		}
		return AtlasResourceManager._Instance;
	});

	__getset(1,AtlasResourceManager,'enabled',function(){
		return Config.atlasEnable;
	});

	__getset(1,AtlasResourceManager,'atlasLimitWidth',function(){
		return AtlasResourceManager._atlasLimitWidth;
		},function(value){
		AtlasResourceManager._atlasLimitWidth=value;
	});

	__getset(1,AtlasResourceManager,'atlasLimitHeight',function(){
		return AtlasResourceManager._atlasLimitHeight;
		},function(value){
		AtlasResourceManager._atlasLimitHeight=value;
	});

	AtlasResourceManager._enable=function(){
		Config.atlasEnable=true;
	}

	AtlasResourceManager._disable=function(){
		Config.atlasEnable=false;
	}

	AtlasResourceManager.__init__=function(){
		AtlasResourceManager.atlasTextureWidth=2048;
		AtlasResourceManager.atlasTextureHeight=2048;
		AtlasResourceManager.maxTextureCount=6;
		AtlasResourceManager.atlasLimitWidth=512;
		AtlasResourceManager.atlasLimitHeight=512;
	}

	AtlasResourceManager._atlasLimitWidth=0;
	AtlasResourceManager._atlasLimitHeight=0;
	AtlasResourceManager.gridSize=16;
	AtlasResourceManager.atlasTextureWidth=0;
	AtlasResourceManager.atlasTextureHeight=0;
	AtlasResourceManager.maxTextureCount=0;
	AtlasResourceManager._atlasRestore=0;
	AtlasResourceManager.BOARDER_TYPE_NO=0;
	AtlasResourceManager.BOARDER_TYPE_RIGHT=1;
	AtlasResourceManager.BOARDER_TYPE_LEFT=2;
	AtlasResourceManager.BOARDER_TYPE_BOTTOM=4;
	AtlasResourceManager.BOARDER_TYPE_TOP=8;
	AtlasResourceManager.BOARDER_TYPE_ALL=15;
	AtlasResourceManager._sid_=0;
	AtlasResourceManager._Instance=null;
	return AtlasResourceManager;
})()


//class laya.webgl.atlas.MergeFillInfo
var MergeFillInfo=(function(){
	function MergeFillInfo(){
		this.x=0;
		this.y=0;
		this.ret=false;
		this.ret=false;
		this.x=0;
		this.y=0;
	}

	__class(MergeFillInfo,'laya.webgl.atlas.MergeFillInfo');
	return MergeFillInfo;
})()


;
//class laya.webgl.canvas.BlendMode
var BlendMode=(function(){
	function BlendMode(){}
	__class(BlendMode,'laya.webgl.canvas.BlendMode');
	BlendMode._init_=function(gl){
		BlendMode.fns=[BlendMode.BlendNormal,BlendMode.BlendAdd,BlendMode.BlendMultiply,BlendMode.BlendScreen,BlendMode.BlendOverlay,BlendMode.BlendLight,BlendMode.BlendMask,BlendMode.BlendDestinationOut];
		BlendMode.targetFns=[BlendMode.BlendNormalTarget,BlendMode.BlendAddTarget,BlendMode.BlendMultiplyTarget,BlendMode.BlendScreenTarget,BlendMode.BlendOverlayTarget,BlendMode.BlendLightTarget,BlendMode.BlendMask,BlendMode.BlendDestinationOut];
	}

	BlendMode.BlendNormal=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
	}

	BlendMode.BlendAdd=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.DST_ALPHA*/0x0304);
	}

	BlendMode.BlendMultiply=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.DST_COLOR*/0x0306,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
	}

	BlendMode.BlendScreen=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
	}

	BlendMode.BlendOverlay=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_COLOR*/0x0301);
	}

	BlendMode.BlendLight=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
	}

	BlendMode.BlendNormalTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
	}

	BlendMode.BlendAddTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.DST_ALPHA*/0x0304);
	}

	BlendMode.BlendMultiplyTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.DST_COLOR*/0x0306,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
	}

	BlendMode.BlendScreenTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
	}

	BlendMode.BlendOverlayTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_COLOR*/0x0301);
	}

	BlendMode.BlendLightTarget=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
	}

	BlendMode.BlendMask=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ZERO*/0,/*laya.webgl.WebGLContext.SRC_ALPHA*/0x0302);
	}

	BlendMode.BlendDestinationOut=function(gl){
		gl.blendFunc(/*laya.webgl.WebGLContext.ZERO*/0,/*laya.webgl.WebGLContext.ZERO*/0);
	}

	BlendMode.activeBlendFunction=null;
	BlendMode.NAMES=["normal","add","multiply","screen","overlay","light","mask","destination-out"];
	BlendMode.TOINT={"normal":0,"add":1,"multiply":2,"screen":3 ,"lighter":1,"overlay":4,"light":5,"mask":6,"destination-out":7};
	BlendMode.NORMAL="normal";
	BlendMode.ADD="add";
	BlendMode.MULTIPLY="multiply";
	BlendMode.SCREEN="screen";
	BlendMode.LIGHT="light";
	BlendMode.OVERLAY="overlay";
	BlendMode.DESTINATIONOUT="destination-out";
	BlendMode.fns=[];
	BlendMode.targetFns=[];
	return BlendMode;
})()


//class laya.webgl.canvas.DrawStyle
var DrawStyle=(function(){
	function DrawStyle(value){
		this._color=Color.create("black");
		this.setValue(value);
	}

	__class(DrawStyle,'laya.webgl.canvas.DrawStyle');
	var __proto=DrawStyle.prototype;
	__proto.setValue=function(value){
		if (value){
			if ((typeof value=='string')){
				this._color=Color.create(value);
				return;
			}
			if ((value instanceof laya.utils.Color )){
				this._color=value;
				return;
			}
		}
	}

	__proto.reset=function(){
		this._color=Color.create("black");
	}

	__proto.equal=function(value){
		if ((typeof value=='string'))return this._color.strColor===value;
		if ((value instanceof laya.utils.Color ))return this._color.numColor===(value).numColor;
		return false;
	}

	__proto.toColorStr=function(){
		return this._color.strColor;
	}

	DrawStyle.create=function(value){
		if (value){
			var color;
			if ((typeof value=='string'))color=Color.create(value);
			else if ((value instanceof laya.utils.Color ))color=value;
			if (color){
				return color._drawStyle || (color._drawStyle=new DrawStyle(value));
			}
		}
		return laya.webgl.canvas.DrawStyle.DEFAULT;
	}

	__static(DrawStyle,
	['DEFAULT',function(){return this.DEFAULT=new DrawStyle("#000000");}
	]);
	return DrawStyle;
})()


//class laya.webgl.canvas.Path
var Path=(function(){
	function Path(){
		this._x=0;
		this._y=0;
		//this._rect=null;
		//this.ib=null;
		//this.vb=null;
		this.dirty=false;
		//this.geomatrys=null;
		//this._curGeomatry=null;
		this.offset=0;
		this.count=0;
		this.geoStart=0;
		this.tempArray=[];
		this.closePath=false;
		this.geomatrys=[];
		var gl=WebGL.mainContext;
		this.ib=IndexBuffer2D.create(/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
		this.vb=VertexBuffer2D.create(5);
	}

	__class(Path,'laya.webgl.canvas.Path');
	var __proto=Path.prototype;
	__proto.addPoint=function(pointX,pointY){
		this.tempArray.push(pointX,pointY);
	}

	__proto.getEndPointX=function(){
		return this.tempArray[this.tempArray.length-2];
	}

	__proto.getEndPointY=function(){
		return this.tempArray[this.tempArray.length-1];
	}

	__proto.polygon=function(x,y,points,color,borderWidth,borderColor){
		var geo;
		this.geomatrys.push(this._curGeomatry=geo=new Polygon(x,y,points,color,borderWidth,borderColor));
		if (!color)geo.fill=false;
		if (borderColor==undefined)geo.borderWidth=0;
		return geo;
	}

	__proto.setGeomtry=function(shape){
		this.geomatrys.push(this._curGeomatry=shape);
	}

	__proto.drawLine=function(x,y,points,width,color){
		var geo;
		if (this.closePath){
			this.geomatrys.push(this._curGeomatry=geo=new LoopLine(x,y,points,width,color));
			}else {
			this.geomatrys.push(this._curGeomatry=geo=new Line(x,y,points,width,color));
		}
		geo.fill=false;
		return geo;
	}

	__proto.update=function(){
		var si=this.ib._byteLength;
		var len=this.geomatrys.length;
		this.offset=si;
		for (var i=this.geoStart;i < len;i++){
			this.geomatrys[i].getData(this.ib,this.vb,this.vb._byteLength / 20);
		}
		this.geoStart=len;
		this.count=(this.ib._byteLength-si)/ CONST3D2D.BYTES_PIDX;
	}

	__proto.reset=function(){
		this.vb.clear();
		this.ib.clear();
		this.offset=this.count=this.geoStart=0;
		this.geomatrys.length=0;
	}

	__proto.recover=function(){
		this._curGeomatry=null;
		this.vb.destory();
		this.vb=null;
		this.ib.destory();
		this.ib=null;
	}

	return Path;
})()


//class laya.webgl.canvas.save.SaveBase
var SaveBase=(function(){
	function SaveBase(){
		//this._valueName=null;
		//this._value=null;
		//this._dataObj=null;
		//this._newSubmit=false;
	}

	__class(SaveBase,'laya.webgl.canvas.save.SaveBase');
	var __proto=SaveBase.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		this._dataObj[this._valueName]=this._value;
		SaveBase._cache[SaveBase._cache._length++]=this;
		this._newSubmit && (context._curSubmit=Submit.RENDERBASE,context._renderKey=0);
	}

	SaveBase._createArray=function(){
		var value=[];
		value._length=0;
		return value;
	}

	SaveBase._init=function(){
		var namemap=SaveBase._namemap={};
		namemap[0x1]="ALPHA";
		namemap[0x2]="fillStyle";
		namemap[0x8]="font";
		namemap[0x100]="lineWidth";
		namemap[0x200]="strokeStyle";
		namemap[0x2000]="_mergeID";
		namemap[0x400]=namemap[0x800]=namemap[0x1000]=[];
		namemap[0x4000]="textBaseline";
		namemap[0x8000]="textAlign";
		namemap[0x10000]="_nBlendType";
		namemap[0x100000]="shader";
		namemap[0x200000]="filters";
		return namemap;
	}

	SaveBase.save=function(context,type,dataObj,newSubmit){
		if ((context._saveMark._saveuse & type)!==type){
			context._saveMark._saveuse |=type;
			var cache=SaveBase._cache;
			var o=cache._length > 0 ? cache[--cache._length] :(new SaveBase());
			o._value=dataObj[o._valueName=SaveBase._namemap[type]];
			o._dataObj=dataObj;
			o._newSubmit=newSubmit;
			var _save=context._save;
			_save[_save._length++]=o;
		}
	}

	SaveBase._cache=laya.webgl.canvas.save.SaveBase._createArray();
	SaveBase._namemap=SaveBase._init();
	return SaveBase;
})()


//class laya.webgl.canvas.save.SaveClipRect
var SaveClipRect=(function(){
	function SaveClipRect(){
		//this._clipSaveRect=null;
		//this._submitScissor=null;
		this._clipRect=new Rectangle();
	}

	__class(SaveClipRect,'laya.webgl.canvas.save.SaveClipRect');
	var __proto=SaveClipRect.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		context._clipRect=this._clipSaveRect;
		SaveClipRect._cache[SaveClipRect._cache._length++]=this;
		this._submitScissor.submitLength=context._submits._length-this._submitScissor.submitIndex;
		context._curSubmit=Submit.RENDERBASE;
		context._renderKey=0;
	}

	SaveClipRect.save=function(context,submitScissor){
		if ((context._saveMark._saveuse & /*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT*/0x20000)==/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT*/0x20000)return;
		context._saveMark._saveuse |=/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT*/0x20000;
		var cache=SaveClipRect._cache;
		var o=cache._length > 0 ? cache[--cache._length] :(new SaveClipRect());
		o._clipSaveRect=context._clipRect;
		context._clipRect=o._clipRect.copyFrom(context._clipRect);
		o._submitScissor=submitScissor;
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveClipRect,
	['_cache',function(){return this._cache=SaveBase._createArray();}
	]);
	return SaveClipRect;
})()


//class laya.webgl.canvas.save.SaveClipRectStencil
var SaveClipRectStencil=(function(){
	function SaveClipRectStencil(){
		//this._clipSaveRect=null;
		//this._saveMatrix=null;
		this._contextX=0;
		this._contextY=0;
		//this._submitStencil=null;
		this._clipRect=new Rectangle();
		this._rect=new Rectangle();
		this._matrix=new Matrix();
	}

	__class(SaveClipRectStencil,'laya.webgl.canvas.save.SaveClipRectStencil');
	var __proto=SaveClipRectStencil.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		SubmitStencil.restore(context,this._rect,this._saveMatrix,this._contextX,this._contextY);
		context._clipRect=this._clipSaveRect;
		context._curMat=this._saveMatrix;
		context._x=this._contextX;
		context._y=this._contextY;
		SaveClipRectStencil._cache[SaveClipRectStencil._cache._length++]=this;
		context._curSubmit=Submit.RENDERBASE;
	}

	SaveClipRectStencil.save=function(context,submitStencil,x,y,width,height,clipX,clipY,clipWidth,clipHeight){
		if ((context._saveMark._saveuse & /*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT_STENCIL*/0x40000)==/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT_STENCIL*/0x40000)return;
		context._saveMark._saveuse |=/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT_STENCIL*/0x40000;
		var cache=SaveClipRectStencil._cache;
		var o=cache._length > 0 ? cache[--cache._length] :(new SaveClipRectStencil());
		o._clipSaveRect=context._clipRect;
		o._clipRect.setTo(clipX,clipY,clipWidth,clipHeight);
		context._clipRect=o._clipRect;
		o._rect.x=x;
		o._rect.y=y;
		o._rect.width=width;
		o._rect.height=height;
		o._contextX=context._x;
		o._contextY=context._y;
		o._saveMatrix=context._curMat;
		context._curMat.copyTo(o._matrix);
		context._curMat=o._matrix;
		o._submitStencil=submitStencil;
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveClipRectStencil,
	['_cache',function(){return this._cache=SaveBase._createArray();}
	]);
	return SaveClipRectStencil;
})()


//class laya.webgl.canvas.save.SaveMark
var SaveMark=(function(){
	function SaveMark(){
		this._saveuse=0;
		//this._preSaveMark=null;
		;
	}

	__class(SaveMark,'laya.webgl.canvas.save.SaveMark');
	var __proto=SaveMark.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){
		return true;
	}

	__proto.restore=function(context){
		context._saveMark=this._preSaveMark;
		SaveMark._no[SaveMark._no._length++]=this;
	}

	SaveMark.Create=function(context){
		var no=SaveMark._no;
		var o=no._length > 0 ? no[--no._length] :(new SaveMark());
		o._saveuse=0;
		o._preSaveMark=context._saveMark;
		context._saveMark=o;
		return o;
	}

	__static(SaveMark,
	['_no',function(){return this._no=SaveBase._createArray();}
	]);
	return SaveMark;
})()


//class laya.webgl.canvas.save.SaveTransform
var SaveTransform=(function(){
	function SaveTransform(){
		//this._savematrix=null;
		this._matrix=new Matrix();
	}

	__class(SaveTransform,'laya.webgl.canvas.save.SaveTransform');
	var __proto=SaveTransform.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		context._curMat=this._savematrix;
		SaveTransform._no[SaveTransform._no._length++]=this;
	}

	SaveTransform.save=function(context){
		var _saveMark=context._saveMark;
		if ((_saveMark._saveuse & /*laya.webgl.canvas.save.SaveBase.TYPE_TRANSFORM*/0x800)===/*laya.webgl.canvas.save.SaveBase.TYPE_TRANSFORM*/0x800)return;
		_saveMark._saveuse |=/*laya.webgl.canvas.save.SaveBase.TYPE_TRANSFORM*/0x800;
		var no=SaveTransform._no;
		var o=no._length > 0 ? no[--no._length] :(new SaveTransform());
		o._savematrix=context._curMat;
		context._curMat=context._curMat.copyTo(o._matrix);
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveTransform,
	['_no',function(){return this._no=SaveBase._createArray();}
	]);
	return SaveTransform;
})()


//class laya.webgl.canvas.save.SaveTranslate
var SaveTranslate=(function(){
	function SaveTranslate(){
		//this._x=NaN;
		//this._y=NaN;
	}

	__class(SaveTranslate,'laya.webgl.canvas.save.SaveTranslate');
	var __proto=SaveTranslate.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		var mat=context._curMat;
		context._x=this._x;
		context._y=this._y;
		SaveTranslate._no[SaveTranslate._no._length++]=this;
	}

	SaveTranslate.save=function(context){
		var no=SaveTranslate._no;
		var o=no._length > 0 ? no[--no._length] :(new SaveTranslate());
		o._x=context._x;
		o._y=context._y;
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveTranslate,
	['_no',function(){return this._no=SaveBase._createArray();}
	]);
	return SaveTranslate;
})()


//class laya.webgl.resource.RenderTargetMAX
var RenderTargetMAX=(function(){
	function RenderTargetMAX(){
		//public var targets:Vector.<OneTarget>;//没用到
		this.target=null;
		this.repaint=false;
		this._width=NaN;
		this._height=NaN;
		this._sp=null;
		this._clipRect=new Rectangle();
	}

	__class(RenderTargetMAX,'laya.webgl.resource.RenderTargetMAX');
	var __proto=RenderTargetMAX.prototype;
	__proto.setSP=function(sp){
		this._sp=sp;
	}

	__proto.size=function(w,h){
		var _$this=this;
		if (this._width===w && this._height===h){
			this.target.size(w,h);
			return;
		}
		this.repaint=true;
		this._width=w;
		this._height=h;
		if (!this.target)
			this.target=RenderTarget2D.create(w,h);
		else
		this.target.size(w,h);
		if (!this.target.hasListener(/*laya.events.Event.RECOVERED*/"recovered")){
			this.target.on(/*laya.events.Event.RECOVERED*/"recovered",this,function(e){
				Laya.timer.callLater(_$this._sp,_$this._sp.repaint);
			});
		}
	}

	__proto._flushToTarget=function(context,target){
		if (target._destroy)return;
		var worldScissorTest=RenderState2D.worldScissorTest;
		var preworldClipRect=RenderState2D.worldClipRect;
		RenderState2D.worldClipRect=this._clipRect;
		this._clipRect.x=this._clipRect.y=0;
		this._clipRect.width=this._width;
		this._clipRect.height=this._height;
		RenderState2D.worldScissorTest=false;
		WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		var preAlpha=RenderState2D.worldAlpha;
		var preMatrix4=RenderState2D.worldMatrix4;
		var preMatrix=RenderState2D.worldMatrix;
		var preFilters=RenderState2D.worldFilters;
		var preShaderDefines=RenderState2D.worldShaderDefines;
		RenderState2D.worldMatrix=Matrix.EMPTY;
		RenderState2D.restoreTempArray();
		RenderState2D.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;
		RenderState2D.worldAlpha=1;
		RenderState2D.worldFilters=null;
		RenderState2D.worldShaderDefines=null;
		BaseShader.activeShader=null;
		target.start();
		Config.showCanvasMark ? target.clear(0,1,0,0.3):target.clear(0,0,0,0);
		context.flush();
		target.end();
		BaseShader.activeShader=null;
		RenderState2D.worldAlpha=preAlpha;
		RenderState2D.worldMatrix4=preMatrix4;
		RenderState2D.worldMatrix=preMatrix;
		RenderState2D.worldFilters=preFilters;
		RenderState2D.worldShaderDefines=preShaderDefines;
		RenderState2D.worldScissorTest=worldScissorTest
		if (worldScissorTest){
			var y=RenderState2D.height-preworldClipRect.y-preworldClipRect.height;
			WebGL.mainContext.scissor(preworldClipRect.x,y,preworldClipRect.width,preworldClipRect.height);
			WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		}
		RenderState2D.worldClipRect=preworldClipRect;
	}

	__proto.flush=function(context){
		if (this.repaint){
			this._flushToTarget(context,this.target);
			this.repaint=false;
		}
	}

	__proto.drawTo=function(context,x,y,width,height){
		context.drawTexture(this.target.getTexture(),x,y,width,height,0,0);
	}

	__proto.destroy=function(){
		if (this.target){
			this.target.destroy();
			this.target=null;
			this._sp=null;
		}
	}

	return RenderTargetMAX;
})()


//class laya.webgl.shader.d2.Shader2D
var Shader2D=(function(){
	function Shader2D(){
		this.ALPHA=1;
		//this.glTexture=null;
		//this.shader=null;
		//this.filters=null;
		this.shaderType=0;
		//this.colorAdd=null;
		//this.strokeStyle=null;
		//this.fillStyle=null;
		this.defines=new ShaderDefines2D();
	}

	__class(Shader2D,'laya.webgl.shader.d2.Shader2D');
	var __proto=Shader2D.prototype;
	__proto.destroy=function(){
		this.defines=null;
		this.filters=null;
		this.glTexture=null;
		this.strokeStyle=null;
		this.fillStyle=null;
	}

	Shader2D.__init__=function(){
		Shader.addInclude("parts/ColorFilter_ps_uniform.glsl","uniform vec4 colorAlpha;\nuniform mat4 colorMat;");
		Shader.addInclude("parts/ColorFilter_ps_logic.glsl","mat4 alphaMat =colorMat;\n\nalphaMat[0][3] *= gl_FragColor.a;\nalphaMat[1][3] *= gl_FragColor.a;\nalphaMat[2][3] *= gl_FragColor.a;\n\ngl_FragColor = gl_FragColor * alphaMat;\ngl_FragColor += colorAlpha/255.0*gl_FragColor.a;\n");
		Shader.addInclude("parts/GlowFilter_ps_uniform.glsl","uniform vec4 u_color;\nuniform float u_strength;\nuniform float u_blurX;\nuniform float u_blurY;\nuniform float u_offsetX;\nuniform float u_offsetY;\nuniform float u_textW;\nuniform float u_textH;");
		Shader.addInclude("parts/GlowFilter_ps_logic.glsl","const float c_IterationTime = 10.0;\nfloat floatIterationTotalTime = c_IterationTime * c_IterationTime;\nvec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\nvec2 vec2FilterDir = vec2(-(u_offsetX)/u_textW,-(u_offsetY)/u_textH);\nvec2 vec2FilterOff = vec2(u_blurX/u_textW/c_IterationTime * 2.0,u_blurY/u_textH/c_IterationTime * 2.0);\nfloat maxNum = u_blurX * u_blurY;\nvec2 vec2Off = vec2(0.0,0.0);\nfloat floatOff = c_IterationTime/2.0;\nfor(float i = 0.0;i<=c_IterationTime; ++i){\n	for(float j = 0.0;j<=c_IterationTime; ++j){\n		vec2Off = vec2(vec2FilterOff.x * (i - floatOff),vec2FilterOff.y * (j - floatOff));\n		vec4Color += texture2D(texture, v_texcoord + vec2FilterDir + vec2Off)/floatIterationTotalTime;\n	}\n}\ngl_FragColor = vec4(u_color.rgb,vec4Color.a * u_strength);\ngl_FragColor.rgb *= gl_FragColor.a;");
		Shader.addInclude("parts/BlurFilter_ps_logic.glsl","gl_FragColor =   blur();\ngl_FragColor.w*=alpha;");
		Shader.addInclude("parts/BlurFilter_ps_uniform.glsl","uniform vec4 strength_sig2_2sig2_gauss1;\nuniform vec2 blurInfo;\n\n#define PI 3.141593\n\n//float sigma=strength/3.0;//3σ以外影响很小。即当σ=1的时候，半径为3\n//float sig2 = sigma*sigma;\n//float _2sig2 = 2.0*sig2;\n//return 1.0/(2*PI*sig2)*exp(-(x*x+y*y)/_2sig2)\n//float gauss1 = 1.0/(2.0*PI*sig2);\n\nfloat getGaussian(float x, float y){\n    return strength_sig2_2sig2_gauss1.w*exp(-(x*x+y*y)/strength_sig2_2sig2_gauss1.z);\n}\n\nvec4 blur(){\n    const float blurw = 9.0;\n    vec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\n    vec2 halfsz=vec2(blurw,blurw)/2.0/blurInfo;    \n    vec2 startpos=v_texcoord-halfsz;\n    vec2 ctexcoord = startpos;\n    vec2 step = 1.0/blurInfo;  //每个像素      \n    \n    for(float y = 0.0;y<=blurw; ++y){\n        ctexcoord.x=startpos.x;\n        for(float x = 0.0;x<=blurw; ++x){\n            //TODO 纹理坐标的固定偏移应该在vs中处理\n            vec4Color += texture2D(texture, ctexcoord)*getGaussian(x-blurw/2.0,y-blurw/2.0);\n            ctexcoord.x+=step.x;\n        }\n        ctexcoord.y+=step.y;\n    }\n    return vec4Color;\n}");
		Shader.addInclude("parts/ColorAdd_ps_uniform.glsl","uniform vec4 colorAdd;\n");
		Shader.addInclude("parts/ColorAdd_ps_logic.glsl","gl_FragColor = vec4(colorAdd.rgb,colorAdd.a*gl_FragColor.a);\ngl_FragColor.xyz *= colorAdd.a;");
		var vs,ps;
		vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}";
		ps="precision mediump float;\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec4 color= texture2D(texture, v_texcoord);\n   color.a*=alpha;\n   color.rgb*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}";
		Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,vs,ps,null);
		vs="attribute vec4 position;\nuniform vec2 size;\nuniform mat4 mmat;\nvoid main() {\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n}";
		ps="precision mediump float;\nuniform vec4 color;\nuniform float alpha;\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\nvoid main() {\n	vec4 a = vec4(color.r, color.g, color.b, color.a);\n	a.w = alpha;\n	a.xyz *= alpha;\n	gl_FragColor = a;\n	#include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n}";
		Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,vs,ps,null);
		vs="attribute vec4 position;\nattribute vec3 a_color;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nuniform vec2 u_pos;\nuniform vec2 size;\nvarying vec3 color;\nvoid main(){\n  vec4 tPos = vec4(position.x + u_pos.x,position.y + u_pos.y,position.z,position.w);\n  vec4 pos=mmat*u_mmat2*tPos;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  color=a_color;\n}";
		ps="precision mediump float;\n//precision mediump float;\nvarying vec3 color;\nuniform float alpha;\nvoid main(){\n	//vec4 a=vec4(color.r, color.g, color.b, 1);\n	//a.a*=alpha;\n    gl_FragColor=vec4(color.r, color.g, color.b, alpha);\n	gl_FragColor.rgb*=alpha;\n}";
		Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,vs,ps,null);
		vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}";
		ps="#ifdef FSHIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\nuniform vec4 u_TexRange;\nuniform vec2 u_offset;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec2 newTexCoord;\n   newTexCoord.x = mod(u_offset.x + v_texcoord.x,u_TexRange.y) + u_TexRange.x;\n   newTexCoord.y = mod(u_offset.y + v_texcoord.y,u_TexRange.w) + u_TexRange.z;\n   vec4 color= texture2D(texture, newTexCoord);\n   color.a*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}";
		Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,vs,ps,null);
		vs="attribute vec2 position;\nattribute vec2 texcoord;\nattribute vec4 color;\nuniform vec2 size;\nuniform float offsetX;\nuniform float offsetY;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nvoid main() {\n  vec4 pos=mmat*u_mmat2*vec4(offsetX+position.x,offsetY+position.y,0,1 );\n  gl_Position = vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  v_color = color;\n  v_color.rgb *= v_color.a;\n  v_texcoord = texcoord;  \n}";
		ps="precision mediump float;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nuniform sampler2D texture;\nuniform float alpha;\nvoid main() {\n	vec4 t_color = texture2D(texture, v_texcoord);\n	gl_FragColor = t_color.rgba * v_color;\n	gl_FragColor *= alpha;\n}";
		Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,vs,ps,null);
	}

	return Shader2D;
})()


//class laya.webgl.shader.ShaderDefines
var ShaderDefines=(function(){
	function ShaderDefines(name2int,int2name,int2nameMap){
		this._value=0;
		//this._name2int=null;
		//this._int2name=null;
		//this._int2nameMap=null;
		this._name2int=name2int;
		this._int2name=int2name;
		this._int2nameMap=int2nameMap;
	}

	__class(ShaderDefines,'laya.webgl.shader.ShaderDefines');
	var __proto=ShaderDefines.prototype;
	__proto.add=function(value){
		if ((typeof value=='string'))value=this._name2int[value];
		this._value |=value;
		return this._value;
	}

	__proto.addInt=function(value){
		this._value |=value;
		return this._value;
	}

	__proto.remove=function(value){
		if ((typeof value=='string'))value=this._name2int[value];
		this._value &=(~value);
		return this._value;
	}

	__proto.isDefine=function(def){
		return (this._value & def)===def;
	}

	__proto.getValue=function(){
		return this._value;
	}

	__proto.setValue=function(value){
		this._value=value;
	}

	__proto.toNameDic=function(){
		var r=this._int2nameMap[this._value];
		return r ? r :ShaderDefines._toText(this._value,this._int2name,this._int2nameMap);
	}

	ShaderDefines._reg=function(name,value,_name2int,_int2name){
		_name2int[name]=value;
		_int2name[value]=name;
	}

	ShaderDefines._toText=function(value,_int2name,_int2nameMap){
		var r=_int2nameMap[value];
		if (r)return r;
		var o={};
		var d=1;
		for (var i=0;i < 32;i++){
			d=1 << i;
			if (d > value)break ;
			if (value & d){
				var name=_int2name[d];
				name && (o[name]="");
			}
		}
		_int2nameMap[value]=o;
		return o;
	}

	ShaderDefines._toInt=function(names,_name2int){
		var words=names.split('.');
		var num=0;
		for (var i=0,n=words.length;i < n;i++){
			var value=_name2int[words[i]];
			if (!value)throw new Error("Defines to int err:"+names+"/"+words[i]);
			num |=value;
		}
		return num;
	}

	return ShaderDefines;
})()


/**
*这里销毁的问题，后面待确认
*/
//class laya.webgl.shader.d2.skinAnishader.SkinMesh
var SkinMesh=(function(){
	function SkinMesh(){
		this.mVBBuffer=null;
		this.mIBBuffer=null;
		this.mVBData=null;
		this.mIBData=null;
		this.mEleNum=0;
		this.mTexture=null;
		this.transform=null;
		this._vs=null;
		this._ps=null;
		this._indexStart=-1;
		this._verticles=null;
		this._uvs=null;
		this._tempMatrix=new Matrix();
	}

	__class(SkinMesh,'laya.webgl.shader.d2.skinAnishader.SkinMesh');
	var __proto=SkinMesh.prototype;
	__proto.init=function(texture,vs,ps){
		if (vs){
			this._vs=vs;
			}else {
			this._vs=[];
			var tWidth=texture.width;
			var tHeight=texture.height;
			var tRed=1;
			var tGreed=1;
			var tBlue=1;
			var tAlpha=1;
			this._vs.push(0,0,0,0,tRed,tGreed,tBlue,tAlpha);
			this._vs.push(tWidth,0,1,0,tRed,tGreed,tBlue,tAlpha);
			this._vs.push(tWidth,tHeight,1,1,tRed,tGreed,tBlue,tAlpha);
			this._vs.push(0,tHeight,0,1,tRed,tGreed,tBlue,tAlpha);
		}
		if (ps){
			this._ps=ps;
			}else {
			if (!SkinMesh._defaultPS){
				SkinMesh._defaultPS=[];
				SkinMesh._defaultPS.push(0,1,3,3,1,2);
			}
			this._ps=SkinMesh._defaultPS;
		}
		this.mVBData=new Float32Array(this._vs);
		this.mIBData=new Uint16Array(this._ps.length);
		this.mIBData["start"]=-1;
		this.mEleNum=this._ps.length;
		this.mTexture=texture;
	}

	__proto.init2=function(texture,vs,ps,verticles,uvs){
		if (this.transform)this.transform=null;
		if (ps){
			this._ps=ps;
			}else {
			this._ps=[];
			this._ps.push(0,1,3,3,1,2);
		}
		this._verticles=verticles;
		this._uvs=uvs;
		this.mEleNum=this._ps.length;
		this.mTexture=texture;
		if (Render.isConchNode || Render.isConchApp){
			this._initMyData();
			this.mVBData=new Float32Array(this._vs);
		}
	}

	__proto._initMyData=function(){
		var vsI=0;
		var vI=0;
		var vLen=this._verticles.length;
		var tempVLen=vLen *4;
		this._vs=SkinMesh._tempVS;
		var insertNew=false;
		if (Render.isConchNode || Render.isConchApp){
			this._vs.length=tempVLen;
			insertNew=true;
			}else{
			if (this._vs.length < tempVLen){
				this._vs.length=tempVLen;
				insertNew=true;
			}
		}
		SkinMesh._tVSLen=tempVLen;
		if (insertNew){
			while (vsI < tempVLen){
				this._vs[vsI]=this._verticles[vI];
				this._vs[vsI+1]=this._verticles[vI+1];
				this._vs[vsI+2]=this._uvs[vI];
				this._vs[vsI+3]=this._uvs[vI+1];
				this._vs[vsI+4]=1;
				this._vs[vsI+5]=1;
				this._vs[vsI+6]=1;
				this._vs[vsI+7]=1;
				vsI+=8;
				vI+=2;
			}
			}else{
			while (vsI < tempVLen){
				this._vs[vsI]=this._verticles[vI];
				this._vs[vsI+1]=this._verticles[vI+1];
				this._vs[vsI+2]=this._uvs[vI];
				this._vs[vsI+3]=this._uvs[vI+1];
				vsI+=8;
				vI+=2;
			}
		}
	}

	__proto.getData2=function(vb,ib,start){
		this.mVBBuffer=vb;
		this.mIBBuffer=ib;
		this._initMyData();
		vb.appendEx2(this._vs,Float32Array,SkinMesh._tVSLen,4);
		this._indexStart=ib._byteLength;
		var tIB;
		tIB=SkinMesh._tempIB;
		if (tIB.length < this._ps.length){
			tIB.length=this._ps.length;
		}
		for (var i=0,n=this._ps.length;i < n;i++){
			tIB[i]=this._ps[i]+start;
		}
		ib.appendEx2(tIB,Uint16Array,this._ps.length,2);
	}

	__proto.getData=function(vb,ib,start){
		this.mVBBuffer=vb;
		this.mIBBuffer=ib;
		vb.append(this.mVBData);
		this._indexStart=ib._byteLength;
		if (this.mIBData["start"] !=start){
			for (var i=0,n=this._ps.length;i < n;i++){
				this.mIBData[i]=this._ps[i]+start;
			}
			this.mIBData["start"]=start;
		}
		ib.append(this.mIBData);
	}

	__proto.render=function(context,x,y){
		if (Render.isWebGL && this.mTexture){
			context._renderKey=0;
			context._shader2D.glTexture=null;
			SkinMeshBuffer.getInstance().addSkinMesh(this);
			var tempSubmit=Submit.createShape(context,this.mIBBuffer,this.mVBBuffer,this.mEleNum,this._indexStart,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,0));
			this.transform || (this.transform=Matrix.EMPTY);
			this.transform.translate(x,y);
			Matrix.mul(this.transform,context._curMat,this._tempMatrix);
			this.transform.translate(-x,-y);
			var tShaderValue=tempSubmit.shaderValue;
			var tArray=tShaderValue.u_mmat2||RenderState2D.getMatrArray();
			RenderState2D.mat2MatArray(this._tempMatrix,tArray);
			tShaderValue.textureHost=this.mTexture;
			tShaderValue.offsetX=0;
			tShaderValue.offsetY=0;
			tShaderValue.u_mmat2=tArray;
			tShaderValue.ALPHA=context._shader2D.ALPHA;
			context._submits[context._submits._length++]=tempSubmit;
		}
		else if (Render.isConchApp&&this.mTexture){
			this.transform || (this.transform=Matrix.EMPTY);
			context.setSkinMesh&&context.setSkinMesh(x,y,this._ps,this.mVBData,this.mEleNum,0,this.mTexture,this.transform);
		}
	}

	SkinMesh._tempVS=[];
	SkinMesh._tempIB=[];
	SkinMesh._defaultPS=null;
	SkinMesh._tVSLen=0;
	return SkinMesh;
})()


//class laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer
var SkinMeshBuffer=(function(){
	function SkinMeshBuffer(){
		this.ib=null;
		this.vb=null;
		var gl=WebGL.mainContext;
		this.ib=IndexBuffer2D.create(/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
		this.vb=VertexBuffer2D.create(8);
	}

	__class(SkinMeshBuffer,'laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer');
	var __proto=SkinMeshBuffer.prototype;
	__proto.addSkinMesh=function(skinMesh){
		skinMesh.getData2(this.vb,this.ib,this.vb._byteLength / 32);
	}

	__proto.reset=function(){
		this.vb.clear();
		this.ib.clear();
	}

	SkinMeshBuffer.getInstance=function(){
		return SkinMeshBuffer.instance=SkinMeshBuffer.instance|| new SkinMeshBuffer();
	}

	SkinMeshBuffer.instance=null;
	return SkinMeshBuffer;
})()


//此类可以减少代码
//class laya.webgl.shapes.BasePoly
var BasePoly=(function(){
	function BasePoly(x,y,width,height,edges,color,borderWidth,borderColor,round){
		//this.x=NaN;
		//this.y=NaN;
		//this.r=NaN;
		//this.width=NaN;
		//this.height=NaN;
		//this.edges=NaN;
		this.r0=0
		//this.color=0;
		//this.borderColor=NaN;
		//this.borderWidth=NaN;
		//this.round=0;
		this.fill=true;
		//this.mUint16Array=null;
		//this.mFloat32Array=null;
		this.r1=Math.PI / 2;
		(round===void 0)&& (round=0);
		this.x=x;
		this.y=y;
		this.width=width;
		this.height=height;
		this.edges=edges;
		this.color=color;
		this.borderWidth=borderWidth;
		this.borderColor=borderColor;
	}

	__class(BasePoly,'laya.webgl.shapes.BasePoly');
	var __proto=BasePoly.prototype;
	Laya.imps(__proto,{"laya.webgl.shapes.IShape":true})
	__proto.getData=function(ib,vb,start){}
	__proto.rebuild=function(points){}
	__proto.setMatrix=function(mat){}
	__proto.needUpdate=function(mat){
		return true;
	}

	__proto.sector=function(outVert,outIndex,start){
		var x=this.x,y=this.y,edges=this.edges,seg=(this.r1-this.r0)/ edges;
		var w=this.width,h=this.height,color=this.color;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		outVert.push(x,y,r,g,b);
		for (var i=0;i < edges+1;i++){
			outVert.push(x+Math.sin(seg *i+this.r0)*w,y+Math.cos(seg *i+this.r0)*h);
			outVert.push(r,g,b);
		}
		for (i=0;i < edges;i++){
			outIndex.push(start,start+i+1,start+i+2);
		}
	}

	//用于画线
	__proto.createLine2=function(p,indices,lineWidth,len,outVertex,indexCount){
		var points=p.concat();
		var result=outVertex;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		var length=points.length / 2;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[2];
		p2y=points[3];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx+this.x,p1y-perpy+this.y,r,g,b,p1x+perpx+this.x,p1y+perpy+this.y,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*2];
			p1y=points[(i-1)*2+1];
			p2x=points[(i)*2];
			p2y=points[(i)*2+1];
			p3x=points[(i+1)*2];
			p3y=points[(i+1)*2+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px+this.x,py+this.y,r,g,b,p2x-(px-p2x)+this.x,p2y-(py-p2y)+this.y,r,g,b);
		}
		p1x=points[points.length-4];
		p1y=points[points.length-3];
		p2x=points[points.length-2];
		p2y=points[points.length-1];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
		var groupLen=indexCount;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		return result;
	}

	// /*,outVertex:Array,outIndex:Array*/
	__proto.createLine=function(p,indices,lineWidth,len){
		var points=p.concat();
		var result=p;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		points.splice(0,5);
		var length=points.length / 5;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[5];
		p2y=points[6];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*5];
			p1y=points[(i-1)*5+1];
			p2x=points[(i)*5];
			p2y=points[(i)*5+1];
			p3x=points[(i+1)*5];
			p3y=points[(i+1)*5+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
		}
		p1x=points[points.length-10];
		p1y=points[points.length-9];
		p2x=points[points.length-5];
		p2y=points[points.length-4];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
		var groupLen=this.edges+1;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		return result;
	}

	//闭合路径
	__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
		var points=p.concat();
		var result=outVertex ? outVertex :p;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		points.splice(0,5);
		var firstPoint=[points[0],points[1]];
		var lastPoint=[points[points.length-5],points[points.length-4]];
		var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
		var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
		points.unshift(midPointX,midPointY,0,0,0);
		points.push(midPointX,midPointY,0,0,0);
		var length=points.length / 5;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[5];
		p2y=points[6];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*5];
			p1y=points[(i-1)*5+1];
			p2x=points[(i)*5];
			p2y=points[(i)*5+1];
			p3x=points[(i+1)*5];
			p3y=points[(i+1)*5+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
		}
		if (outIndex){
			indices=outIndex;
		};
		var groupLen=this.edges+1;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
		return result;
	}

	return BasePoly;
})()


//class laya.webgl.shapes.Earcut
var Earcut=(function(){
	function Earcut(){}
	__class(Earcut,'laya.webgl.shapes.Earcut');
	Earcut.earcut=function(data,holeIndices,dim){
		dim=dim || 2;
		var hasHoles=holeIndices && holeIndices.length,
		outerLen=hasHoles ? holeIndices[0] *dim :data.length,
		outerNode=Earcut.linkedList(data,0,outerLen,dim,true),
		triangles=[];
		if (!outerNode)return triangles;
		var minX,minY,maxX,maxY,x,y,invSize;
		if (hasHoles)outerNode=Earcut.eliminateHoles(data,holeIndices,outerNode,dim);
		if (data.length > 80 *dim){
			minX=maxX=data[0];
			minY=maxY=data[1];
			for (var i=dim;i < outerLen;i+=dim){
				x=data[i];
				y=data[i+1];
				if (x < minX)minX=x;
				if (y < minY)minY=y;
				if (x > maxX)maxX=x;
				if (y > maxY)maxY=y;
			}
			invSize=Math.max(maxX-minX,maxY-minY);
			invSize=invSize!==0 ? 1 / invSize :0;
		}
		Earcut.earcutLinked(outerNode,triangles,dim,minX,minY,invSize);
		return triangles;
	}

	Earcut.linkedList=function(data,start,end,dim,clockwise){
		var i,last;
		if (clockwise===(Earcut.signedArea(data,start,end,dim)> 0)){
			for (i=start;i < end;i+=dim)last=Earcut.insertNode(i,data[i],data[i+1],last);
			}else {
			for (i=end-dim;i >=start;i-=dim)last=Earcut.insertNode(i,data[i],data[i+1],last);
		}
		if (last && Earcut.equals(last,last.next)){
			Earcut.removeNode(last);
			last=last.next;
		}
		return last;
	}

	Earcut.filterPoints=function(start,end){
		if (!start)return start;
		if (!end)end=start;
		var p=start,
		again;
		do {
			again=false;
			if (!p.steiner && (Earcut.equals(p,p.next)|| Earcut.area(p.prev,p,p.next)===0)){
				Earcut.removeNode(p);
				p=end=p.prev;
				if (p===p.next)break ;
				again=true;
				}else {
				p=p.next;
			}
		}while (again || p!==end);
		return end;
	}

	Earcut.earcutLinked=function(ear,triangles,dim,minX,minY,invSize,pass){
		if (!ear)return;
		if (!pass && invSize)Earcut.indexCurve(ear,minX,minY,invSize);
		var stop=ear,
		prev,next;
		while (ear.prev!==ear.next){
			prev=ear.prev;
			next=ear.next;
			if (invSize ? Earcut.isEarHashed(ear,minX,minY,invSize):Earcut.isEar(ear)){
				triangles.push(prev.i / dim);
				triangles.push(ear.i / dim);
				triangles.push(next.i / dim);
				Earcut.removeNode(ear);
				ear=next.next;
				stop=next.next;
				continue ;
			}
			ear=next;
			if (ear===stop){
				if (!pass){
					Earcut.earcutLinked(Earcut.filterPoints(ear,null),triangles,dim,minX,minY,invSize,1);
					}else if (pass===1){
					ear=Earcut.cureLocalIntersections(ear,triangles,dim);
					Earcut.earcutLinked(ear,triangles,dim,minX,minY,invSize,2);
					}else if (pass===2){
					Earcut.splitEarcut(ear,triangles,dim,minX,minY,invSize);
				}
				break ;
			}
		}
	}

	Earcut.isEar=function(ear){
		var a=ear.prev,
		b=ear,
		c=ear.next;
		if (Earcut.area(a,b,c)>=0)return false;
		var p=ear.next.next;
		while (p!==ear.prev){
			if (Earcut.pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&
				Earcut.area(p.prev,p,p.next)>=0)return false;
			p=p.next;
		}
		return true;
	}

	Earcut.isEarHashed=function(ear,minX,minY,invSize){
		var a=ear.prev,
		b=ear,
		c=ear.next;
		if (Earcut.area(a,b,c)>=0)return false;
		var minTX=a.x < b.x ? (a.x < c.x ? a.x :c.x):(b.x < c.x ? b.x :c.x),
		minTY=a.y < b.y ? (a.y < c.y ? a.y :c.y):(b.y < c.y ? b.y :c.y),
		maxTX=a.x > b.x ? (a.x > c.x ? a.x :c.x):(b.x > c.x ? b.x :c.x),
		maxTY=a.y > b.y ? (a.y > c.y ? a.y :c.y):(b.y > c.y ? b.y :c.y);
		var minZ=Earcut.zOrder(minTX,minTY,minX,minY,invSize),
		maxZ=Earcut.zOrder(maxTX,maxTY,minX,minY,invSize);
		var p=ear.nextZ;
		while (p && p.z <=maxZ){
			if (p!==ear.prev && p!==ear.next &&
				Earcut.pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&
			Earcut.area(p.prev,p,p.next)>=0)return false;
			p=p.nextZ;
		}
		p=ear.prevZ;
		while (p && p.z >=minZ){
			if (p!==ear.prev && p!==ear.next &&
				Earcut.pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&
			Earcut.area(p.prev,p,p.next)>=0)return false;
			p=p.prevZ;
		}
		return true;
	}

	Earcut.cureLocalIntersections=function(start,triangles,dim){
		var p=start;
		do {
			var a=p.prev,
			b=p.next.next;
			if (!Earcut.equals(a,b)&& Earcut.intersects(a,p,p.next,b)&& Earcut.locallyInside(a,b)&& Earcut.locallyInside(b,a)){
				triangles.push(a.i / dim);
				triangles.push(p.i / dim);
				triangles.push(b.i / dim);
				Earcut.removeNode(p);
				Earcut.removeNode(p.next);
				p=start=b;
			}
			p=p.next;
		}while (p!==start);
		return p;
	}

	Earcut.splitEarcut=function(start,triangles,dim,minX,minY,invSize){
		var a=start;
		do {
			var b=a.next.next;
			while (b!==a.prev){
				if (a.i!==b.i && Earcut.isValidDiagonal(a,b)){
					var c=Earcut.splitPolygon(a,b);
					a=Earcut.filterPoints(a,a.next);
					c=Earcut.filterPoints(c,c.next);
					Earcut.earcutLinked(a,triangles,dim,minX,minY,invSize);
					Earcut.earcutLinked(c,triangles,dim,minX,minY,invSize);
					return;
				}
				b=b.next;
			}
			a=a.next;
		}while (a!==start);
	}

	Earcut.eliminateHoles=function(data,holeIndices,outerNode,dim){
		var queue=[],
		i,len,start,end,list;
		for (i=0,len=holeIndices.length;i < len;i++){
			start=holeIndices[i] *dim;
			end=i < len-1 ? holeIndices[i+1] *dim :data.length;
			list=Earcut.linkedList(data,start,end,dim,false);
			if (list===list.next)list.steiner=true;
			queue.push(Earcut.getLeftmost(list));
		}
		queue.sort(Earcut.compareX);
		for (i=0;i < queue.length;i++){
			Earcut.eliminateHole(queue[i],outerNode);
			outerNode=Earcut.filterPoints(outerNode,outerNode.next);
		}
		return outerNode;
	}

	Earcut.compareX=function(a,b){
		return a.x-b.x;
	}

	Earcut.eliminateHole=function(hole,outerNode){
		outerNode=Earcut.findHoleBridge(hole,outerNode);
		if (outerNode){
			var b=Earcut.splitPolygon(outerNode,hole);
			Earcut.filterPoints(b,b.next);
		}
	}

	Earcut.findHoleBridge=function(hole,outerNode){
		var p=outerNode,
		hx=hole.x,
		hy=hole.y,
		qx=-Infinity,
		m;
		do {
			if (hy <=p.y && hy >=p.next.y && p.next.y!==p.y){
				var x=p.x+(hy-p.y)*(p.next.x-p.x)/ (p.next.y-p.y);
				if (x <=hx && x > qx){
					qx=x;
					if (x===hx){
						if (hy===p.y)return p;
						if (hy===p.next.y)return p.next;
					}
					m=p.x < p.next.x ? p :p.next;
				}
			}
			p=p.next;
		}while (p!==outerNode);
		if (!m)return null;
		if (hx===qx)return m.prev;
		var stop=m,
		mx=m.x,
		my=m.y,
		tanMin=Infinity,
		tan;
		p=m.next;
		while (p!==stop){
			if (hx >=p.x && p.x >=mx && hx!==p.x &&
				Earcut.pointInTriangle(hy < my ? hx :qx,hy,mx,my,hy < my ? qx :hx,hy,p.x,p.y)){
				tan=Math.abs(hy-p.y)/ (hx-p.x);
				if ((tan < tanMin || (tan===tanMin && p.x > m.x))&& Earcut.locallyInside(p,hole)){
					m=p;
					tanMin=tan;
				}
			}
			p=p.next;
		}
		return m;
	}

	Earcut.indexCurve=function(start,minX,minY,invSize){
		var p=start;
		do {
			if (p.z===null)p.z=Earcut.zOrder(p.x,p.y,minX,minY,invSize);
			p.prevZ=p.prev;
			p.nextZ=p.next;
			p=p.next;
		}while (p!==start);
		p.prevZ.nextZ=null;
		p.prevZ=null;
		Earcut.sortLinked(p);
	}

	Earcut.sortLinked=function(list){
		var i,p,q,e,tail,numMerges,pSize,qSize,
		inSize=1;
		do {
			p=list;
			list=null;
			tail=null;
			numMerges=0;
			while (p){
				numMerges++;
				q=p;
				pSize=0;
				for (i=0;i < inSize;i++){
					pSize++;
					q=q.nextZ;
					if (!q)break ;
				}
				qSize=inSize;
				while (pSize > 0 || (qSize > 0 && q)){
					if (pSize!==0 && (qSize===0 || !q || p.z <=q.z)){
						e=p;
						p=p.nextZ;
						pSize--;
						}else {
						e=q;
						q=q.nextZ;
						qSize--;
					}
					if (tail)tail.nextZ=e;
					else list=e;
					e.prevZ=tail;
					tail=e;
				}
				p=q;
			}
			tail.nextZ=null;
			inSize *=2;
		}while (numMerges > 1);
		return list;
	}

	Earcut.zOrder=function(x,y,minX,minY,invSize){
		x=32767 *(x-minX)*invSize;
		y=32767 *(y-minY)*invSize;
		x=(x | (x << 8))& 0x00FF00FF;
		x=(x | (x << 4))& 0x0F0F0F0F;
		x=(x | (x << 2))& 0x33333333;
		x=(x | (x << 1))& 0x55555555;
		y=(y | (y << 8))& 0x00FF00FF;
		y=(y | (y << 4))& 0x0F0F0F0F;
		y=(y | (y << 2))& 0x33333333;
		y=(y | (y << 1))& 0x55555555;
		return x | (y << 1);
	}

	Earcut.getLeftmost=function(start){
		var p=start,
		leftmost=start;
		do {
			if (p.x < leftmost.x)leftmost=p;
			p=p.next;
		}while (p!==start);
		return leftmost;
	}

	Earcut.pointInTriangle=function(ax,ay,bx,by,cx,cy,px,py){
		return (cx-px)*(ay-py)-(ax-px)*(cy-py)>=0 &&
		(ax-px)*(by-py)-(bx-px)*(ay-py)>=0 &&
		(bx-px)*(cy-py)-(cx-px)*(by-py)>=0;
	}

	Earcut.isValidDiagonal=function(a,b){
		return a.next.i!==b.i && a.prev.i!==b.i && !Earcut.intersectsPolygon(a,b)&&
		Earcut.locallyInside(a,b)&& Earcut.locallyInside(b,a)&& Earcut.middleInside(a,b);
	}

	Earcut.area=function(p,q,r){
		return (q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);
	}

	Earcut.equals=function(p1,p2){
		return p1.x===p2.x && p1.y===p2.y;
	}

	Earcut.intersects=function(p1,q1,p2,q2){
		if ((Earcut.equals(p1,q1)&& Earcut.equals(p2,q2))||
			(Earcut.equals(p1,q2)&& Earcut.equals(p2,q1)))return true;
		return Earcut.area(p1,q1,p2)> 0!==Earcut.area(p1,q1,q2)> 0 &&
		Earcut.area(p2,q2,p1)> 0!==Earcut.area(p2,q2,q1)> 0;
	}

	Earcut.intersectsPolygon=function(a,b){
		var p=a;
		do {
			if (p.i!==a.i && p.next.i!==a.i && p.i!==b.i && p.next.i!==b.i &&
				Earcut.intersects(p,p.next,a,b))return true;
			p=p.next;
		}while (p!==a);
		return false;
	}

	Earcut.locallyInside=function(a,b){
		return Earcut.area(a.prev,a,a.next)< 0 ?
		Earcut.area(a,b,a.next)>=0 && Earcut.area(a,a.prev,b)>=0 :
		Earcut.area(a,b,a.prev)< 0 || Earcut.area(a,a.next,b)< 0;
	}

	Earcut.middleInside=function(a,b){
		var p=a,
		inside=false,
		px=(a.x+b.x)/ 2,
		py=(a.y+b.y)/ 2;
		do {
			if (((p.y > py)!==(p.next.y > py))&& p.next.y!==p.y &&
				(px < (p.next.x-p.x)*(py-p.y)/ (p.next.y-p.y)+p.x))
			inside=!inside;
			p=p.next;
		}while (p!==a);
		return inside;
	}

	Earcut.splitPolygon=function(a,b){
		var a2=new EarcutNode(a.i,a.x,a.y),
		b2=new EarcutNode(b.i,b.x,b.y),
		an=a.next,
		bp=b.prev;
		a.next=b;
		b.prev=a;
		a2.next=an;
		an.prev=a2;
		b2.next=a2;
		a2.prev=b2;
		bp.next=b2;
		b2.prev=bp;
		return b2;
	}

	Earcut.insertNode=function(i,x,y,last){
		var p=new EarcutNode(i,x,y);
		if (!last){
			p.prev=p;
			p.next=p;
			}else {
			p.next=last.next;
			p.prev=last;
			last.next.prev=p;
			last.next=p;
		}
		return p;
	}

	Earcut.removeNode=function(p){
		p.next.prev=p.prev;
		p.prev.next=p.next;
		if (p.prevZ)p.prevZ.nextZ=p.nextZ;
		if (p.nextZ)p.nextZ.prevZ=p.prevZ;
	}

	Earcut.signedArea=function(data,start,end,dim){
		var sum=0;
		for (var i=start,j=end-dim;i < end;i+=dim){
			sum+=(data[j]-data[i])*(data[i+1]+data[j+1]);
			j=i;
		}
		return sum;
	}

	return Earcut;
})()


//class laya.webgl.shapes.EarcutNode
var EarcutNode=(function(){
	function EarcutNode(i,x,y){
		this.i=null;
		this.x=null;
		this.y=null;
		this.prev=null;
		this.next=null;
		this.z=null;
		this.prevZ=null;
		this.nextZ=null;
		this.steiner=null;
		this.i=i;
		this.x=x;
		this.y=y;
		this.prev=null;
		this.next=null;
		this.z=null;
		this.prevZ=null;
		this.nextZ=null;
		this.steiner=false;
	}

	__class(EarcutNode,'laya.webgl.shapes.EarcutNode');
	return EarcutNode;
})()


//class laya.webgl.shapes.GeometryData
var GeometryData=(function(){
	function GeometryData(lineWidth,lineColor,lineAlpha,fillColor,fillAlpha,fill,shape){
		//this.lineWidth=NaN;
		//this.lineColor=NaN;
		//this.lineAlpha=NaN;
		//this.fillColor=NaN;
		//this.fillAlpha=NaN;
		//this.shape=null;
		//this.fill=false;
		this.lineWidth=lineWidth;
		this.lineColor=lineColor;
		this.lineAlpha=lineAlpha;
		this.fillColor=fillColor;
		this.fillAlpha=fillAlpha;
		this.shape=shape;
		this.fill=fill;
	}

	__class(GeometryData,'laya.webgl.shapes.GeometryData');
	var __proto=GeometryData.prototype;
	__proto.clone=function(){
		return new GeometryData(this.lineWidth,this.lineColor,this.lineAlpha,this.fillColor,this.fillAlpha,this.fill,this.shape);
	}

	__proto.getIndexData=function(){
		return null;
	}

	__proto.getVertexData=function(){
		return null;
	}

	__proto.destroy=function(){
		this.shape=null;
	}

	return GeometryData;
})()


//class laya.webgl.shapes.Vertex
var Vertex=(function(){
	function Vertex(p){
		//this.points=null;
		if((p instanceof Float32Array))
			this.points=p;
		else if((p instanceof Array)){
			var len=p.length;
			this.points=new Float32Array(p);
		}
	}

	__class(Vertex,'laya.webgl.shapes.Vertex');
	var __proto=Vertex.prototype;
	Laya.imps(__proto,{"laya.webgl.shapes.IShape":true})
	__proto.getData=function(ib,vb,start){}
	__proto.needUpdate=function(mat){
		return false;
	}

	__proto.rebuild=function(points){}
	// TODO Auto Generated method stub
	__proto.setMatrix=function(mat){}
	return Vertex;
})()


//class laya.webgl.submit.Submit
var Submit=(function(){
	function Submit(renderType){
		//this._selfVb=null;
		//this._ib=null;
		//this._blendFn=null;
		//this._renderType=0;
		//this._vb=null;
		// 从VB中什么地方开始画，画到哪
		//this._startIdx=0;
		//this._numEle=0;
		//this.shaderValue=null;
		(renderType===void 0)&& (renderType=10000);
		this._renderType=renderType;
	}

	__class(Submit,'laya.webgl.submit.Submit');
	var __proto=Submit.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.releaseRender=function(){
		var cache=Submit._cache;
		cache[cache._length++]=this;
		this.shaderValue.release();
		this._vb=null;
	}

	__proto.getRenderType=function(){
		return this._renderType;
	}

	__proto.renderSubmit=function(){
		if (this._numEle===0)return 1;
		var _tex=this.shaderValue.textureHost;
		if (_tex){
			var source=_tex.source;
			if (!_tex.bitmap || !source)
				return 1;
			this.shaderValue.texture=source;
		}
		this._vb.bind_upload(this._ib);
		var gl=WebGL.mainContext;
		this.shaderValue.upload();
		if (BlendMode.activeBlendFunction!==this._blendFn){
			gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
			this._blendFn(gl);
			BlendMode.activeBlendFunction=this._blendFn;
		}
		Stat.drawCall++;
		Stat.trianglesFaces+=this._numEle / 3;
		gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx);
		return 1;
	}

	Submit.__init__=function(){
		var s=Submit.RENDERBASE=new Submit(-1);
		s.shaderValue=new Value2D(0,0);
		s.shaderValue.ALPHA=-1234;
	}

	Submit.createSubmit=function(context,ib,vb,pos,sv){
		var o=Submit._cache._length ? Submit._cache[--Submit._cache._length] :new Submit();
		if (vb==null){
			vb=o._selfVb || (o._selfVb=VertexBuffer2D.create(-1));
			vb.clear();
			pos=0;
		}
		o._ib=ib;
		o._vb=vb;
		o._startIdx=pos *CONST3D2D.BYTES_PIDX;
		o._numEle=0;
		var blendType=context._nBlendType;
		o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		o.shaderValue=sv;
		o.shaderValue.setValue(context._shader2D);
		var filters=context._shader2D.filters;
		filters && o.shaderValue.setFilters(filters);
		return o;
	}

	Submit.createShape=function(ctx,ib,vb,numEle,offset,sv){
		var o=(!Submit._cache._length)? (new Submit()):Submit._cache[--Submit._cache._length];
		o._ib=ib;
		o._vb=vb;
		o._numEle=numEle;
		o._startIdx=offset;
		o.shaderValue=sv;
		o.shaderValue.setValue(ctx._shader2D);
		var blendType=ctx._nBlendType;
		o._blendFn=ctx._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		return o;
	}

	Submit.TYPE_2D=10000;
	Submit.TYPE_CANVAS=10003;
	Submit.TYPE_CMDSETRT=10004;
	Submit.TYPE_CUSTOM=10005;
	Submit.TYPE_BLURRT=10006;
	Submit.TYPE_CMDDESTORYPRERT=10007;
	Submit.TYPE_DISABLESTENCIL=10008;
	Submit.TYPE_OTHERIBVB=10009;
	Submit.TYPE_PRIMITIVE=10010;
	Submit.TYPE_RT=10011;
	Submit.TYPE_BLUR_RT=10012;
	Submit.TYPE_TARGET=10013;
	Submit.TYPE_CHANGE_VALUE=10014;
	Submit.TYPE_SHAPE=10015;
	Submit.TYPE_TEXTURE=10016;
	Submit.TYPE_FILLTEXTURE=10017;
	Submit.RENDERBASE=null;
	Submit._cache=(Submit._cache=[],Submit._cache._length=0,Submit._cache);
	return Submit;
})()


//class laya.webgl.submit.SubmitCMD
var SubmitCMD=(function(){
	function SubmitCMD(){
		this.fun=null;
		this.args=null;
	}

	__class(SubmitCMD,'laya.webgl.submit.SubmitCMD');
	var __proto=SubmitCMD.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.renderSubmit=function(){
		this.fun.apply(null,this.args);
		return 1;
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitCMD._cache;
		cache[cache._length++]=this;
	}

	SubmitCMD.create=function(args,fun){
		var o=SubmitCMD._cache._length?SubmitCMD._cache[--SubmitCMD._cache._length]:new SubmitCMD();
		o.fun=fun;
		o.args=args;
		return o;
	}

	SubmitCMD._cache=(SubmitCMD._cache=[],SubmitCMD._cache._length=0,SubmitCMD._cache);
	return SubmitCMD;
})()


//class laya.webgl.submit.SubmitCMDScope
var SubmitCMDScope=(function(){
	function SubmitCMDScope(){
		this.variables={};
	}

	__class(SubmitCMDScope,'laya.webgl.submit.SubmitCMDScope');
	var __proto=SubmitCMDScope.prototype;
	__proto.getValue=function(name){
		return this.variables[name];
	}

	__proto.addValue=function(name,value){
		return this.variables[name]=value;
	}

	__proto.setValue=function(name,value){
		if(this.variables.hasOwnProperty(name)){
			return this.variables[name]=value;
		}
		return null;
	}

	__proto.clear=function(){
		for(var key in this.variables){
			delete this.variables[key];
		}
	}

	__proto.recycle=function(){
		this.clear();
		SubmitCMDScope.POOL.push(this);
	}

	SubmitCMDScope.create=function(){
		var scope=SubmitCMDScope.POOL.pop();
		scope||(scope=new SubmitCMDScope());
		return scope;
	}

	SubmitCMDScope.POOL=[];
	return SubmitCMDScope;
})()


//class laya.webgl.submit.SubmitOtherIBVB
var SubmitOtherIBVB=(function(){
	function SubmitOtherIBVB(){
		this.offset=0;
		//this._vb=null;
		//this._ib=null;
		//this._blendFn=null;
		//this._mat=null;
		//this._shader=null;
		//this._shaderValue=null;
		//this._numEle=0;
		this.startIndex=0;
		;
		this._mat=Matrix.create();
	}

	__class(SubmitOtherIBVB,'laya.webgl.submit.SubmitOtherIBVB');
	var __proto=SubmitOtherIBVB.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.releaseRender=function(){
		var cache=SubmitOtherIBVB._cache;
		cache[cache._length++]=this;
	}

	__proto.getRenderType=function(){
		return /*laya.webgl.submit.Submit.TYPE_OTHERIBVB*/10009;
	}

	__proto.renderSubmit=function(){
		var _tex=this._shaderValue.textureHost;
		if (_tex){
			var source=_tex.source;
			if (!_tex.bitmap || !source)
				return 1;
			this._shaderValue.texture=source;
		}
		this._vb.bind_upload(this._ib);
		var w=RenderState2D.worldMatrix4;
		var wmat=Matrix.TEMP;
		Matrix.mulPre(this._mat,w[0],w[1],w[4],w[5],w[12],w[13],wmat);
		var tmp=RenderState2D.worldMatrix4=SubmitOtherIBVB.tempMatrix4;
		tmp[0]=wmat.a;
		tmp[1]=wmat.b;
		tmp[4]=wmat.c;
		tmp[5]=wmat.d;
		tmp[12]=wmat.tx;
		tmp[13]=wmat.ty;
		this._shader._offset=this.offset;
		this._shaderValue.refresh();
		this._shader.upload(this._shaderValue);
		this._shader._offset=0;
		var gl=WebGL.mainContext;
		if (BlendMode.activeBlendFunction!==this._blendFn){
			gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
			this._blendFn(gl);
			BlendMode.activeBlendFunction=this._blendFn;
		}
		Stat.drawCall++;
		Stat.trianglesFaces+=this._numEle / 3;
		gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this.startIndex);
		RenderState2D.worldMatrix4=w;
		BaseShader.activeShader=null;
		return 1;
	}

	SubmitOtherIBVB.create=function(context,vb,ib,numElement,shader,shaderValue,startIndex,offset,type){
		(type===void 0)&& (type=0);
		var o=(!SubmitOtherIBVB._cache._length)? (new SubmitOtherIBVB()):SubmitOtherIBVB._cache[--SubmitOtherIBVB._cache._length];
		o._ib=ib;
		o._vb=vb;
		o._numEle=numElement;
		o._shader=shader;
		o._shaderValue=shaderValue;
		var blendType=context._nBlendType;
		o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		switch(type){
			case 0:
				o.offset=0;
				o.startIndex=offset / (CONST3D2D.BYTES_PE *vb.vertexStride)*1.5;
				o.startIndex *=CONST3D2D.BYTES_PIDX;
				break ;
			case 1:
				o.startIndex=startIndex;
				o.offset=offset;
				break ;
			}
		return o;
	}

	SubmitOtherIBVB._cache=(SubmitOtherIBVB._cache=[],SubmitOtherIBVB._cache._length=0,SubmitOtherIBVB._cache);
	SubmitOtherIBVB.tempMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,];
	return SubmitOtherIBVB;
})()


//class laya.webgl.submit.SubmitScissor
var SubmitScissor=(function(){
	function SubmitScissor(){
		this.submitIndex=0;
		this.submitLength=0;
		this.context=null;
		this.clipRect=new Rectangle();
		this.screenRect=new Rectangle();
	}

	__class(SubmitScissor,'laya.webgl.submit.SubmitScissor');
	var __proto=SubmitScissor.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto._scissor=function(x,y,w,h){
		var m=RenderState2D.worldMatrix4;
		var a=m[0],d=m[5],tx=m[12],ty=m[13];
		x=x *a+tx;
		y=y *d+ty;
		w *=a;
		h *=d;
		if (w < 1 || h < 1){
			return false;
		};
		var r=x+w;
		var b=y+h;
		x < 0 && (x=0,w=r-x);
		y < 0 && (y=0,h=b-y);
		var screen=RenderState2D.worldClipRect;
		x=Math.max(x,screen.x);
		y=Math.max(y,screen.y);
		w=Math.min(r,screen.right)-x;
		h=Math.min(b,screen.bottom)-y;
		if (w < 1 || h < 1){
			return false;
		};
		var worldScissorTest=RenderState2D.worldScissorTest;
		this.screenRect.copyFrom(screen);
		screen.x=x;
		screen.y=y;
		screen.width=w;
		screen.height=h;
		RenderState2D.worldScissorTest=true;
		y=RenderState2D.height-y-h;
		WebGL.mainContext.scissor(x,y,w,h);
		WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
		if (worldScissorTest){
			y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
			WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
			WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		}
		else{
			WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			RenderState2D.worldScissorTest=false;
		}
		screen.copyFrom(this.screenRect);
		return true;
	}

	__proto._scissorWithTagart=function(x,y,w,h){
		if (w < 1 || h < 1){
			return false;
		};
		var r=x+w;
		var b=y+h;
		x < 0 && (x=0,w=r-x);
		y < 0 && (y=0,h=b-y);
		var screen=RenderState2D.worldClipRect;
		x=Math.max(x,screen.x);
		y=Math.max(y,screen.y);
		w=Math.min(r,screen.right)-x;
		h=Math.min(b,screen.bottom)-y;
		if (w < 1 || h < 1){
			return false;
		};
		var worldScissorTest=RenderState2D.worldScissorTest;
		this.screenRect.copyFrom(screen);
		RenderState2D.worldScissorTest=true;
		screen.x=x;
		screen.y=y;
		screen.width=w;
		screen.height=h;
		y=RenderState2D.height-y-h;
		WebGL.mainContext.scissor(x,y,w,h);
		WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
		if (worldScissorTest){
			y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
			WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
			WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
		}
		else{
			WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			RenderState2D.worldScissorTest=false;
		}
		screen.copyFrom(this.screenRect);
		return true;
	}

	__proto.renderSubmit=function(){
		this.submitLength=Math.min(this.context._submits._length-1,this.submitLength);
		if (this.submitLength < 1 || this.clipRect.width < 1 || this.clipRect.height < 1)
			return this.submitLength+1;
		if (this.context._targets)
			this._scissorWithTagart(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
		else this._scissor(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
		return this.submitLength+1;
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitScissor._cache;
		cache[cache._length++]=this;
		this.context=null;
	}

	SubmitScissor.create=function(context){
		var o=SubmitScissor._cache._length?SubmitScissor._cache[--SubmitScissor._cache._length]:new SubmitScissor();
		o.context=context;
		return o;
	}

	SubmitScissor._cache=(SubmitScissor._cache=[],SubmitScissor._cache._length=0,SubmitScissor._cache);
	return SubmitScissor;
})()


//class laya.webgl.submit.SubmitStencil
var SubmitStencil=(function(){
	function SubmitStencil(){
		this.step=0;
		this.blendMode=null;
		this.level=0;
	}

	__class(SubmitStencil,'laya.webgl.submit.SubmitStencil');
	var __proto=SubmitStencil.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.renderSubmit=function(){
		switch(this.step){
			case 1:
				this.do1();
				break ;
			case 2:
				this.do2();
				break ;
			case 3:
				this.do3();
				break ;
			case 4:
				this.do4();
				break ;
			case 5:
				this.do5();
				break ;
			case 6:
				this.do6();
				break ;
			case 7:
				this.do7();
				break ;
			case 8:
				this.do8();
				break ;
			}
		return 1;
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitStencil._cache;
		cache[cache._length++]=this;
	}

	__proto.do1=function(){
		var gl=WebGL.mainContext;
		gl.enable(/*laya.webgl.WebGLContext.STENCIL_TEST*/0x0B90);
		gl.clear(/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400);
		gl.colorMask(false,false,false,false);
		gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level,0xFF);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.INCR*/0x1E02);
	}

	//gl.stencilOp(WebGLContext.KEEP,WebGLContext.KEEP,WebGLContext.INVERT);//测试通过给模版缓冲 写入值 一开始是0 现在是 0xFF (模版缓冲中不知道是多少位的数据)
	__proto.do2=function(){
		var gl=WebGL.mainContext;
		gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level+1,0xFF);
		gl.colorMask(true,true,true,true);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
	}

	__proto.do3=function(){
		var gl=WebGL.mainContext;
		gl.colorMask(true,true,true,true);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
		gl.clear(/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400);
		gl.disable(/*laya.webgl.WebGLContext.STENCIL_TEST*/0x0B90);
	}

	__proto.do4=function(){
		var gl=WebGL.mainContext;
		if (this.level==0){
			gl.enable(/*laya.webgl.WebGLContext.STENCIL_TEST*/0x0B90);
			gl.clear(/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400);
		}
		gl.colorMask(false,false,false,false);
		gl.stencilFunc(/*laya.webgl.WebGLContext.ALWAYS*/0x0207,0,0xFF);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.INCR*/0x1E02);
	}

	__proto.do5=function(){
		var gl=WebGL.mainContext;
		gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level,0xFF);
		gl.colorMask(true,true,true,true);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
	}

	__proto.do6=function(){
		var gl=WebGL.mainContext;
		BlendMode.targetFns[BlendMode.TOINT[this.blendMode]](gl);
	}

	__proto.do7=function(){
		var gl=WebGL.mainContext;
		gl.colorMask(false,false,false,false);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.DECR*/0x1E03);
	}

	__proto.do8=function(){
		var gl=WebGL.mainContext;
		gl.colorMask(true,true,true,true);
		gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level,0xFF);
		gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
	}

	SubmitStencil.restore=function(context,clip,m,_x,_y){
		var submitStencil;
		context._renderKey=0;
		if (SubmitStencil._mask > 0){
			SubmitStencil._mask--;
		}
		if (SubmitStencil._mask==0){
			submitStencil=laya.webgl.submit.SubmitStencil.create(3);
			context.addRenderObject(submitStencil);
			context._curSubmit=Submit.RENDERBASE;
		}
		else{
			submitStencil=laya.webgl.submit.SubmitStencil.create(7);
			context.addRenderObject(submitStencil);
			var vb=context._vb;
			var nPos=(vb._byteLength >> 2);
			if (GlUtils.fillRectImgVb(vb,null,clip.x,clip.y,clip.width,clip.height,Texture.DEF_UV,m,_x,_y,0,0)){
				var shader=context._shader2D;
				shader.glTexture=null;
				var submit=context._curSubmit=Submit.createSubmit(context,context._ib,vb,((vb._byteLength-/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
				submit.shaderValue.ALPHA=1.0;
				context._submits[context._submits._length++]=submit;
				context._curSubmit._numEle+=6;
				context._curSubmit=Submit.RENDERBASE;
				}else {
				alert("clipRect calc stencil rect error");
			}
			submitStencil=laya.webgl.submit.SubmitStencil.create(8);
			context.addRenderObject(submitStencil);
		}
	}

	SubmitStencil.restore2=function(context,submit){
		var submitStencil;
		context._renderKey=0;
		if (SubmitStencil._mask > 0){
			SubmitStencil._mask--;
		}
		if (SubmitStencil._mask==0){
			submitStencil=laya.webgl.submit.SubmitStencil.create(3);
			context.addRenderObject(submitStencil);
			context._curSubmit=Submit.RENDERBASE;
		}
		else{
			submitStencil=laya.webgl.submit.SubmitStencil.create(7);
			context.addRenderObject(submitStencil);
			context._submits[context._submits._length++]=submit;
			submitStencil=laya.webgl.submit.SubmitStencil.create(8);
			context.addRenderObject(submitStencil);
		}
	}

	SubmitStencil.create=function(step){
		var o=SubmitStencil._cache._length?SubmitStencil._cache[--SubmitStencil._cache._length]:new SubmitStencil();
		o.step=step;
		if (step==5)
			++SubmitStencil._mask;
		o.level=SubmitStencil._mask;
		return o;
	}

	SubmitStencil._cache=(SubmitStencil._cache=[],SubmitStencil._cache._length=0,SubmitStencil._cache);
	SubmitStencil._mask=0;
	return SubmitStencil;
})()


//class laya.webgl.submit.SubmitTarget
var SubmitTarget=(function(){
	function SubmitTarget(){
		this._renderType=0;
		this._vb=null;
		this._ib=null;
		this._startIdx=0;
		this._numEle=0;
		this.shaderValue=null;
		this.blendType=0;
		this.proName=null;
		this.scope=null;
	}

	__class(SubmitTarget,'laya.webgl.submit.SubmitTarget');
	var __proto=SubmitTarget.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.renderSubmit=function(){
		this._vb.bind_upload(this._ib);
		var target=this.scope.getValue(this.proName);
		if (target){
			this.shaderValue.texture=target.source;
			if (this.shaderValue["strength"] && !this.shaderValue["blurInfo"]){
				this.shaderValue["blurInfo"]=[target.width,target.height];
			}
			this.shaderValue.upload();
			this.blend();
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle/3;
			WebGL.mainContext.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx);
		}
		return 1;
	}

	__proto.blend=function(){
		if (BlendMode.activeBlendFunction!==BlendMode.fns[this.blendType]){
			var gl=WebGL.mainContext;
			gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
			BlendMode.fns[this.blendType](gl);
			BlendMode.activeBlendFunction=BlendMode.fns[this.blendType];
		}
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitTarget._cache;
		cache[cache._length++]=this;
	}

	SubmitTarget.create=function(context,ib,vb,pos,sv,proName){
		var o=SubmitTarget._cache._length?SubmitTarget._cache[--SubmitTarget._cache._length]:new SubmitTarget();
		o._ib=ib;
		o._vb=vb;
		o.proName=proName;
		o._startIdx=pos *CONST3D2D.BYTES_PIDX;
		o._numEle=0;
		o.blendType=context._nBlendType;
		o.shaderValue=sv;
		o.shaderValue.setValue(context._shader2D);
		return o;
	}

	SubmitTarget._cache=(SubmitTarget._cache=[],SubmitTarget._cache._length=0,SubmitTarget._cache);
	return SubmitTarget;
})()


/**
*...特殊的字符，如泰文，必须重新实现这个类
*/
//class laya.webgl.text.CharSegment
var CharSegment=(function(){
	function CharSegment(){
		this._sourceStr=null;
	}

	__class(CharSegment,'laya.webgl.text.CharSegment');
	var __proto=CharSegment.prototype;
	Laya.imps(__proto,{"laya.webgl.text.ICharSegment":true})
	__proto.textToSpit=function(str){
		this._sourceStr=str;
	}

	__proto.getChar=function(i){
		return this._sourceStr.charAt(i);
	}

	__proto.getCharCode=function(i){
		return this._sourceStr.charCodeAt(i);
	}

	__proto.length=function(){
		return this._sourceStr.length;
	}

	return CharSegment;
})()


//class laya.webgl.text.DrawText
var DrawText=(function(){
	var CharValue;
	function DrawText(){}
	__class(DrawText,'laya.webgl.text.DrawText');
	DrawText.__init__=function(){
		DrawText._charsTemp=new Array;
		DrawText._drawValue=new CharValue();
		DrawText._charSeg=new CharSegment();
	}

	DrawText.customCharSeg=function(charseg){
		DrawText._charSeg=charseg;
	}

	DrawText.getChar=function(char,id,drawValue){
		var result=WebGLCharImage.createOneChar(char,drawValue);
		if(id!=-1)
			DrawText._charsCache[id]=result;
		return result;
	}

	DrawText._drawSlow=function(save,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine){
		var drawValue=DrawText._drawValue.value(font,fillColor,borderColor,lineWidth,sx,sy,underLine);
		var i=0,n=0;
		var chars=DrawText._charsTemp;
		var width=0,oneChar,htmlWord,id=NaN;
		if (words){
			chars.length=words.length;
			for (i=0,n=words.length;i < n;i++){
				htmlWord=words[i];
				id=htmlWord.charNum+drawValue.txtID;
				chars[i]=oneChar=DrawText._charsCache[id] || DrawText.getChar(htmlWord.char,id,drawValue);
				oneChar.active();
			}
			}else {
			var text=((txt instanceof laya.utils.WordText ))? txt.toString():txt;
			if (Text.CharacterCache){
				DrawText._charSeg.textToSpit(text);
				var len=/*if err,please use iflash.method.xmlLength()*/DrawText._charSeg.length();
				chars.length=len;
				for (i=0,n=len;i < n;i++){
					id=DrawText._charSeg.getCharCode(i)+drawValue.txtID;
					chars[i]=oneChar=DrawText._charsCache[id] || DrawText.getChar(DrawText._charSeg.getChar(i),id,drawValue);
					oneChar.active();
					width+=oneChar.cw;
				}
			}
			else {
				chars.length=0;
				oneChar=DrawText.getChar(text,-1,drawValue);
				oneChar.active();
				width+=oneChar.cw;
				chars[0]=oneChar;
			}
		};
		var dx=0;
		if (textAlign!==null && textAlign!=="left")
			dx=-(textAlign=="center" ? (width / 2):width);
		var uv,bdSz=NaN,texture,value,saveLength=0;
		if (words){
			for (i=0,n=chars.length;i < n;i++){
				oneChar=chars[i];
				if (!oneChar.isSpace){
					htmlWord=words[i];
					bdSz=oneChar.borderSize;
					texture=oneChar.texture;
					ctx._drawText(texture,x+dx+htmlWord.x *sx-bdSz,y+htmlWord.y *sy-bdSz,texture.width,texture.height,curMat,0,0,0,0);
				}
			}
			}else {
			for (i=0,n=chars.length;i < n;i++){
				oneChar=chars[i];
				if (!oneChar.isSpace){
					bdSz=oneChar.borderSize;
					texture=oneChar.texture;
					ctx._drawText(texture,x+dx-bdSz,y-bdSz,texture.width,texture.height,curMat,0,0,0,0);
					save && (value=save[saveLength++],value || (value=save[saveLength-1]=[]),value[0]=texture,value[1]=dx-bdSz,value[2]=-bdSz);
				}
				dx+=oneChar.cw;
			}
			save && (save.length=saveLength);
		}
	}

	DrawText._drawFast=function(save,ctx,curMat,x,y){
		var texture,value;
		for (var i=0,n=save.length;i < n;i++){
			value=save[i];
			texture=value[0];
			texture.active();
			ctx._drawText(texture,x+value[1],y+value[2],texture.width,texture.height,curMat,0,0,0,0);
		}
	}

	DrawText.drawText=function(ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,underLine){
		(underLine===void 0)&& (underLine=0);
		if ((txt && txt.length===0)|| (words && words.length===0))
			return;
		var sx=curMat.a,sy=curMat.d;
		(curMat.b!==0 || curMat.c!==0)&& (sx=sy=1);
		var scale=sx!==1 || sy!==1;
		if (scale && Laya.stage.transform){
			var t=Laya.stage.transform;
			scale=t.a===sx && t.d===sy;
		}else scale=false;
		if (scale){
			curMat=curMat.copyTo(WebGLContext2D._tmpMatrix);
			var tempTx=curMat.tx;
			var tempTy=curMat.ty;
			curMat.scale(1 / sx,1 / sy);
			curMat._checkTransform();
			x *=sx;
			y *=sy;
			x+=tempTx-curMat.tx;
			y+=tempTy-curMat.ty;
		}else sx=sy=1;
		if (words){
			DrawText._drawSlow(null,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
			}else {
			if (txt.toUpperCase===null){
				var idNum=sx+sy *100000;
				var myCache=txt;
				if (!myCache.changed && myCache.id===idNum){
					DrawText._drawFast(myCache.save,ctx,curMat,x,y);
					}else {
					myCache.id=idNum;
					myCache.changed=false;
					DrawText._drawSlow(myCache.save,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
				}
				return;
			};
			var id=txt+font.toString()+fillColor+borderColor+lineWidth+sx+sy+textAlign;
			var cache=DrawText._textsCache[id];
			if (Text.CharacterCache){
				if (cache){
					DrawText._drawFast(cache,ctx,curMat,x,y);
					}else {
					DrawText._textsCache.__length || (DrawText._textsCache.__length=0);
					if (DrawText._textsCache.__length > Config.WebGLTextCacheCount){
						DrawText._textsCache={};
						DrawText._textsCache.__length=0;
						DrawText._curPoolIndex=0;
					}
					DrawText._textCachesPool[DrawText._curPoolIndex] ? (cache=DrawText._textsCache[id]=DrawText._textCachesPool[DrawText._curPoolIndex],cache.length=0):(DrawText._textCachesPool[DrawText._curPoolIndex]=cache=DrawText._textsCache[id]=[]);
					DrawText._textsCache.__length++
					DrawText._curPoolIndex++;
					DrawText._drawSlow(cache,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
				}
			}
			else{
				DrawText._drawSlow(cache,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
			}
		}
	}

	DrawText._charsTemp=null;
	DrawText._textCachesPool=[];
	DrawText._curPoolIndex=0;
	DrawText._charsCache={};
	DrawText._textsCache={};
	DrawText._drawValue=null;
	DrawText.d=[];
	DrawText._charSeg=null;
	DrawText.__init$=function(){
		//class CharValue
		CharValue=(function(){
			function CharValue(){
				//this.txtID=NaN;
				//this.font=null;
				//this.fillColor=null;
				//this.borderColor=null;
				//this.lineWidth=0;
				//this.scaleX=NaN;
				//this.scaleY=NaN;
				//this.underLine=0;
			}
			__class(CharValue,'');
			var __proto=CharValue.prototype;
			__proto.value=function(font,fillColor,borderColor,lineWidth,scaleX,scaleY,underLine){
				this.font=font;
				this.fillColor=fillColor;
				this.borderColor=borderColor;
				this.lineWidth=lineWidth;
				this.scaleX=scaleX;
				this.scaleY=scaleY;
				this.underLine=underLine;
				var key=font.toString()+scaleX+scaleY+lineWidth+fillColor+borderColor+underLine;
				this.txtID=CharValue._keymap[key];
				if (!this.txtID){
					this.txtID=(++CharValue._keymapCount)*0.0000001;
					CharValue._keymap[key]=this.txtID;
				}
				return this;
			}
			CharValue.clear=function(){
				CharValue._keymap={};
				CharValue._keymapCount=1;
			}
			CharValue._keymap={};
			CharValue._keymapCount=1;
			return CharValue;
		})()
	}

	return DrawText;
})()


//class laya.webgl.text.FontInContext
var FontInContext=(function(){
	function FontInContext(font){
		//this._text=null;
		//this._words=null;
		this._index=0;
		this._size=14;
		this._italic=-2;
		FontInContext._cache2=FontInContext._cache2|| [];
		this.setFont(font || "14px Arial");
	}

	__class(FontInContext,'laya.webgl.text.FontInContext');
	var __proto=FontInContext.prototype;
	__proto.setFont=function(value){
		var arr=FontInContext._cache2[value];
		if (!arr){
			this._words=value.split(' ');
			for (var i=0,n=this._words.length;i < n;i++){
				if (this._words[i].indexOf('px')> 0){
					this._index=i;
					break ;
				}
			}
			this._size=parseInt(this._words[this._index]);
			FontInContext._cache2[value]=[this._words,this._size];
			}else {
			this._words=arr[0];
			this._size=arr[1];
		}
		this._text=null;
		this._italic=-2;
	}

	__proto.getItalic=function(){
		this._italic===-2 && (this._italic=this.hasType("italic"));
		return this._italic;
	}

	__proto.hasType=function(name){
		for (var i=0,n=this._words.length;i < n;i++)
		if (this._words[i]===name)return i;
		return-1;
	}

	__proto.removeType=function(name){
		for (var i=0,n=this._words.length;i < n;i++)
		if (this._words[i]===name){
			this._words.splice(i,1);
			if (this._index > i)this._index--;
			break ;
		}
		this._text=null;
		this._italic=-2;
	}

	__proto.copyTo=function(dec){
		dec._text=this._text;
		dec._size=this._size;
		dec._index=this._index;
		dec._words=this._words.slice();
		dec._italic=-2;
		return dec;
	}

	__proto.toString=function(){
		return this._text ? this._text :(this._text=this._words.join(' '));
	}

	__getset(0,__proto,'size',function(){
		return this._size;
		},function(value){
		this._size=value;
		this._words[this._index]=value+"px";
		this._text=null;
	});

	FontInContext.create=function(font){
		var r=FontInContext._cache[font];
		if (r)return r;
		r=FontInContext._cache[font]=new FontInContext(font);
		return r;
	}

	FontInContext.EMPTY=new FontInContext();
	FontInContext._cache={};
	FontInContext._cache2=null;
	return FontInContext;
})()


//class laya.webgl.utils.CONST3D2D
var CONST3D2D=(function(){
	function CONST3D2D(){}
	__class(CONST3D2D,'laya.webgl.utils.CONST3D2D');
	CONST3D2D.defaultMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	CONST3D2D.defaultMinusYMatrix4=[1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1];
	CONST3D2D.uniformMatrix3=[1,0,0,0,0,1,0,0,0,0,1,0];
	CONST3D2D._TMPARRAY=[];
	CONST3D2D._OFFSETX=0;
	CONST3D2D._OFFSETY=0;
	__static(CONST3D2D,
	['BYTES_PE',function(){return this.BYTES_PE=/*__JS__ */Float32Array.BYTES_PER_ELEMENT;},'BYTES_PIDX',function(){return this.BYTES_PIDX=/*__JS__ */Uint16Array.BYTES_PER_ELEMENT;}
	]);
	return CONST3D2D;
})()


//class laya.webgl.utils.GlUtils
var GlUtils=(function(){
	function GlUtils(){}
	__class(GlUtils,'laya.webgl.utils.GlUtils');
	GlUtils.make2DProjection=function(width,height,depth){
		return [2.0 / width,0,0,0,0,-2.0 / height,0,0,0,0,2.0 / depth,0,-1,1,0,1,];
	}

	GlUtils.fillIBQuadrangle=function(buffer,count){
		if (count > 65535 / 4){
			throw Error("IBQuadrangle count:"+count+" must<:"+Math.floor(65535 / 4));
			return false;
		}
		count=Math.floor(count);
		buffer._resizeBuffer((count+1)*6 */*laya.webgl.utils.Buffer2D.SHORT*/2,false);
		buffer.byteLength=buffer.bufferLength;
		var bufferData=buffer.getUint16Array();
		var idx=0;
		for (var i=0;i < count;i++){
			bufferData[idx++]=i *4;
			bufferData[idx++]=i *4+2;
			bufferData[idx++]=i *4+1;
			bufferData[idx++]=i *4;
			bufferData[idx++]=i *4+3;
			bufferData[idx++]=i *4+2;
		}
		buffer.setNeedUpload();
		return true;
	}

	GlUtils.expandIBQuadrangle=function(buffer,count){
		buffer.bufferLength >=(count *6 */*laya.webgl.utils.Buffer2D.SHORT*/2)|| GlUtils.fillIBQuadrangle(buffer,count);
	}

	GlUtils.mathCeilPowerOfTwo=function(value){
		value--;
		value |=value >> 1;
		value |=value >> 2;
		value |=value >> 4;
		value |=value >> 8;
		value |=value >> 16;
		value++;
		return value;
	}

	GlUtils.fillQuadrangleImgVb=function(vb,x,y,point4,uv,m,_x,_y){
		var vpos=(vb._byteLength >> 2)+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16;
		vb.byteLength=(vpos << 2);
		var vbdata=vb.getFloat32Array();
		vpos-=/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16;
		vbdata[vpos+2]=uv[0];
		vbdata[vpos+3]=uv[1];
		vbdata[vpos+6]=uv[2];
		vbdata[vpos+7]=uv[3];
		vbdata[vpos+10]=uv[4];
		vbdata[vpos+11]=uv[5];
		vbdata[vpos+14]=uv[6];
		vbdata[vpos+15]=uv[7];
		var a=m.a,b=m.b,c=m.c,d=m.d;
		if (a!==1 || b!==0 || c!==0 || d!==1){
			m.bTransform=true;
			var tx=m.tx+_x,ty=m.ty+_y;
			vbdata[vpos]=(point4[0]+x)*a+(point4[1]+y)*c+tx;
			vbdata[vpos+1]=(point4[0]+x)*b+(point4[1]+y)*d+ty;
			vbdata[vpos+4]=(point4[2]+x)*a+(point4[3]+y)*c+tx;
			vbdata[vpos+5]=(point4[2]+x)*b+(point4[3]+y)*d+ty;
			vbdata[vpos+8]=(point4[4]+x)*a+(point4[5]+y)*c+tx;
			vbdata[vpos+9]=(point4[4]+x)*b+(point4[5]+y)*d+ty;
			vbdata[vpos+12]=(point4[6]+x)*a+(point4[7]+y)*c+tx;
			vbdata[vpos+13]=(point4[6]+x)*b+(point4[7]+y)*d+ty;
			}else {
			m.bTransform=false;
			x+=m.tx+_x;
			y+=m.ty+_y;
			vbdata[vpos]=x+point4[0];
			vbdata[vpos+1]=y+point4[1];
			vbdata[vpos+4]=x+point4[2];
			vbdata[vpos+5]=y+point4[3];
			vbdata[vpos+8]=x+point4[4];
			vbdata[vpos+9]=y+point4[5];
			vbdata[vpos+12]=x+point4[6];
			vbdata[vpos+13]=y+point4[7];
		}
		vb._upload=true;
		return true;
	}

	GlUtils.fillTranglesVB=function(vb,x,y,points,m,_x,_y){
		var vpos=(vb._byteLength >> 2)+points.length;
		vb.byteLength=(vpos << 2);
		var vbdata=vb.getFloat32Array();
		vpos-=points.length;
		var len=points.length;
		var a=m.a,b=m.b,c=m.c,d=m.d;
		for (var i=0;i < len;i+=4){
			vbdata[vpos+i+2]=points[i+2];
			vbdata[vpos+i+3]=points[i+3];
			if (a!==1 || b!==0 || c!==0 || d!==1){
				m.bTransform=true;
				var tx=m.tx+_x,ty=m.ty+_y;
				vbdata[vpos+i]=(points[i]+x)*a+(points[i+1]+y)*c+tx;
				vbdata[vpos+i+1]=(points[i]+x)*b+(points[i+1]+y)*d+ty;
				}else {
				m.bTransform=false;
				x+=m.tx+_x;
				y+=m.ty+_y;
				vbdata[vpos+i]=x+points[i];
				vbdata[vpos+i+1]=y+points[i+1];
			}
		}
		vb._upload=true;
		return true;
	}

	GlUtils.copyPreImgVb=function(vb,dx,dy){
		var vpos=(vb._byteLength >> 2);
		vb.byteLength=((vpos+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16)<< 2);
		var vbdata=vb.getFloat32Array();
		for (var i=0,ci=vpos-16;i < 4;i++){
			vbdata[vpos]=vbdata[ci]+dx;
			++vpos;
			++ci;
			vbdata[vpos]=vbdata[ci]+dy;
			++vpos;
			++ci;
			vbdata[vpos]=vbdata[ci];
			++vpos;
			++ci;
			vbdata[vpos]=vbdata[ci];
			++vpos;
			++ci;
		}
		vb._upload=true;
	}

	GlUtils.fillRectImgVb=function(vb,clip,x,y,width,height,uv,m,_x,_y,dx,dy,round){
		(round===void 0)&& (round=false);
		var mType=1;
		var toBx,toBy,toEx,toEy;
		var cBx,cBy,cEx,cEy;
		var w0,h0,tx,ty;
		var finalX,finalY,offsetX,offsetY;
		var a=m.a,b=m.b,c=m.c,d=m.d;
		var useClip=clip && clip.width < /*laya.webgl.canvas.WebGLContext2D._MAXSIZE*/99999999;
		if (a!==1 || b!==0 || c!==0 || d!==1){
			m.bTransform=true;
			if (b===0 && c===0){
				mType=23;
				w0=width+x,h0=height+y;
				tx=m.tx+_x,ty=m.ty+_y;
				toBx=a *x+tx;
				toEx=a *w0+tx;
				toBy=d *y+ty;
				toEy=d *h0+ty;
			}
			}else {
			mType=23;
			m.bTransform=false;
			toBx=x+m.tx+_x;
			toEx=toBx+width;
			toBy=y+m.ty+_y;
			toEy=toBy+height;
		}
		if (useClip){
			cBx=clip.x,cBy=clip.y,cEx=clip.width+cBx,cEy=clip.height+cBy;
		}
		if (mType!==1){
			if (Math.min(toBx,toEx)>=cEx)return false;
			if (Math.min(toBy,toEy)>=cEy)return false;
			if (Math.max(toEx,toBx)<=cBx)return false;
			if (Math.max(toEy,toBy)<=cBy)return false;
		};
		var vpos=(vb._byteLength >> 2);
		vb.byteLength=((vpos+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16)<< 2);
		var vbdata=vb.getFloat32Array();
		vbdata[vpos+2]=uv[0];
		vbdata[vpos+3]=uv[1];
		vbdata[vpos+6]=uv[2];
		vbdata[vpos+7]=uv[3];
		vbdata[vpos+10]=uv[4];
		vbdata[vpos+11]=uv[5];
		vbdata[vpos+14]=uv[6];
		vbdata[vpos+15]=uv[7];
		switch (mType){
			case 1:
				tx=m.tx+_x,ty=m.ty+_y;
				w0=width+x,h0=height+y;
				var w1=x,h1=y;
				var aw1=a *w1,ch1=c *h1,dh1=d *h1,bw1=b *w1;
				var aw0=a *w0,ch0=c *h0,dh0=d *h0,bw0=b *w0;
				if (round){
					finalX=aw1+ch1+tx;
					offsetX=Math.round(finalX)-finalX;
					finalY=dh1+bw1+ty;
					offsetY=Math.round(finalY)-finalY;
					vbdata[vpos]=finalX+offsetX;
					vbdata[vpos+1]=finalY+offsetY;
					vbdata[vpos+4]=aw0+ch1+tx+offsetX;
					vbdata[vpos+5]=dh1+bw0+ty+offsetY;
					vbdata[vpos+8]=aw0+ch0+tx+offsetX;
					vbdata[vpos+9]=dh0+bw0+ty+offsetY;
					vbdata[vpos+12]=aw1+ch0+tx+offsetX;
					vbdata[vpos+13]=dh0+bw1+ty+offsetY;
					}else {
					vbdata[vpos]=aw1+ch1+tx;
					vbdata[vpos+1]=dh1+bw1+ty;
					vbdata[vpos+4]=aw0+ch1+tx;
					vbdata[vpos+5]=dh1+bw0+ty;
					vbdata[vpos+8]=aw0+ch0+tx;
					vbdata[vpos+9]=dh0+bw0+ty;
					vbdata[vpos+12]=aw1+ch0+tx;
					vbdata[vpos+13]=dh0+bw1+ty;
				}
				break ;
			case 23:
				if (round){
					finalX=toBx+dx;
					offsetX=Math.round(finalX)-finalX;
					finalY=toBy;
					offsetY=Math.round(finalY)-finalY;
					vbdata[vpos]=finalX+offsetX;
					vbdata[vpos+1]=finalY+offsetY;
					vbdata[vpos+4]=toEx+dx+offsetX;
					vbdata[vpos+5]=toBy+offsetY;
					vbdata[vpos+8]=toEx+offsetX;
					vbdata[vpos+9]=toEy+offsetY;
					vbdata[vpos+12]=toBx+offsetX;
					vbdata[vpos+13]=toEy+offsetY;
					}else {
					vbdata[vpos]=toBx+dx;
					vbdata[vpos+1]=toBy;
					vbdata[vpos+4]=toEx+dx;
					vbdata[vpos+5]=toBy;
					vbdata[vpos+8]=toEx;
					vbdata[vpos+9]=toEy;
					vbdata[vpos+12]=toBx;
					vbdata[vpos+13]=toEy;
				}
				break ;
			}
		vb._upload=true;
		return true;
	}

	GlUtils.fillLineVb=function(vb,clip,fx,fy,tx,ty,width,mat){
		var linew=width *.5;
		var data=GlUtils._fillLineArray;
		var perpx=-(fy-ty),perpy=fx-tx;
		var dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx /=dist,perpy /=dist,perpx *=linew,perpy *=linew;
		data[0]=fx-perpx,data[1]=fy-perpy,data[4]=fx+perpx,data[5]=fy+perpy,data[8]=tx+perpx,data[9]=ty+perpy,data[12]=tx-perpx,data[13]=ty-perpy;
		mat && mat.transformPointArray(data,data);
		var vpos=(vb._byteLength >> 2)+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16;
		vb.byteLength=(vpos << 2);
		vb.insertData(data,vpos-/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
		return true;
	}

	GlUtils._fillLineArray=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
	return GlUtils;
})()


//class laya.webgl.utils.MatirxArray
var MatirxArray=(function(){
	function MatirxArray(){}
	__class(MatirxArray,'laya.webgl.utils.MatirxArray');
	MatirxArray.ArrayMul=function(a,b,o){
		if (!a){
			MatirxArray.copyArray(b,o);
			return;
		}
		if (!b){
			MatirxArray.copyArray(a,o);
			return;
		};
		var ai0=NaN,ai1=NaN,ai2=NaN,ai3=NaN;
		for (var i=0;i < 4;i++){
			ai0=a[i];
			ai1=a[i+4];
			ai2=a[i+8];
			ai3=a[i+12];
			o[i]=ai0 *b[0]+ai1 *b[1]+ai2 *b[2]+ai3 *b[3];
			o[i+4]=ai0 *b[4]+ai1 *b[5]+ai2 *b[6]+ai3 *b[7];
			o[i+8]=ai0 *b[8]+ai1 *b[9]+ai2 *b[10]+ai3 *b[11];
			o[i+12]=ai0 *b[12]+ai1 *b[13]+ai2 *b[14]+ai3 *b[15];
		}
	}

	MatirxArray.copyArray=function(f,t){
		if (!f)return;
		if (!t)return;
		for (var i=0;i < f.length;i++){
			t[i]=f[i];
		}
	}

	return MatirxArray;
})()


/**
*Mesh2d只是保存数据。描述attribute用的。本身不具有渲染功能。
*/
//class laya.webgl.utils.Mesh2D
var Mesh2D=(function(){
	function Mesh2D(stride,vballoc,iballoc){
		this._stride=0;
		//顶点结构大小。每个mesh的顶点结构是固定的。
		this.vertNum=0;
		//当前的顶点的个数
		this.indexNum=0;
		//实际index 个数。例如一个三角形是3个。由于ib本身可能超过实际使用的数量，所以需要一个indexNum
		this._applied=false;
		//是否已经设置给webgl了
		this._vb=null;
		//vb和ib都可能需要在外部修改，所以public
		this._ib=null;
		this._vao=null;
		this._attribInfo=null;
		//保存起来的属性定义数组。
		this._quadNum=0;
		//public static var meshlist:Array=[];//活着的mesh对象列表。
		this.canReuse=false;
		this._stride=stride;
		this._vb=new VertexBuffer2D(stride,/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
		if (vballoc){
			this._vb._resizeBuffer(vballoc,false);
		}else{}
		this._ib=new IndexBuffer2D();
		if (iballoc){
			this._ib._resizeBuffer(iballoc,false);
		}
	}

	__class(Mesh2D,'laya.webgl.utils.Mesh2D');
	var __proto=Mesh2D.prototype;
	/**
	*重新创建一个mesh。复用这个对象的vertex结构，ib对象和attribinfo对象
	*/
	__proto.cloneWithNewVB=function(){
		var mesh=new Mesh2D(this._stride,0,0);
		mesh._ib=this._ib;
		mesh._quadNum=this._quadNum;
		mesh._attribInfo=this._attribInfo;
		return mesh;
	}

	/**
	*创建一个mesh，使用当前对象的vertex结构。vb和ib自己提供。
	*@return
	*/
	__proto.cloneWithNewVBIB=function(){
		var mesh=new Mesh2D(this._stride,0,0);
		mesh._attribInfo=this._attribInfo;
		return mesh;
	}

	/**
	*获得一个可以写的vb对象
	*/
	__proto.getVBW=function(){
		this._vb.setNeedUpload();
		return this._vb;
	}

	/**
	*获得一个只读vb
	*/
	__proto.getVBR=function(){
		return this._vb;
	}

	__proto.getIBR=function(){
		return this._ib;
	}

	/**
	*获得一个可写的ib
	*/
	__proto.getIBW=function(){
		this._ib.setNeedUpload();
		return this._ib;
	}

	/**
	*直接创建一个固定的ib。按照固定四边形的索引。
	*@param var QuadNum
	*/
	__proto.createQuadIB=function(QuadNum){
		this._quadNum=QuadNum;
		this._ib._resizeBuffer(QuadNum *6 *2,false);
		this._ib.byteLength=this._ib.bufferLength;
		var bd=this._ib.getUint16Array();
		var idx=0;
		var curvert=0;
		for (var i=0;i < QuadNum;i++){
			bd[idx++]=curvert;
			bd[idx++]=curvert+2;
			bd[idx++]=curvert+1;
			bd[idx++]=curvert;
			bd[idx++]=curvert+3;
			bd[idx++]=curvert+2;
			curvert+=4;
		}
		this._ib.setNeedUpload();
	}

	/**
	*设置mesh的属性。每3个一组，对应的location分别是0,1,2...
	*含义是：type,size,offset
	*不允许多流。因此stride是固定的，offset只是在一个vertex之内。
	*@param attribs
	*/
	__proto.setAttributes=function(attribs){
		this._attribInfo=attribs;
		if (this._attribInfo.length % 3 !=0){
			throw 'Mesh2D setAttributes error!';
		}
	}

	__proto.getEleNum=function(){
		return this._ib.getBuffer().byteLength / 2;
	}

	/**
	*子类实现。用来把自己放到对应的回收池中，以便复用。
	*/
	__proto.releaseMesh=function(){}
	/**
	*释放资源。
	*/
	__proto.destroy=function(){}
	/**
	*清理vb数据
	*/
	__proto.clearVB=function(){
		this._vb.clear();
	}

	Mesh2D._gvaoid=0;
	return Mesh2D;
})()


//class laya.webgl.utils.RenderState2D
var RenderState2D=(function(){
	function RenderState2D(){}
	__class(RenderState2D,'laya.webgl.utils.RenderState2D');
	RenderState2D.getMatrArray=function(){
		return [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	}

	RenderState2D.mat2MatArray=function(mat,matArray){
		var m=mat;
		var m4=matArray;
		m4[0]=m.a;
		m4[1]=m.b;
		m4[2]=RenderState2D.EMPTYMAT4_ARRAY[2];
		m4[3]=RenderState2D.EMPTYMAT4_ARRAY[3];
		m4[4]=m.c;
		m4[5]=m.d;
		m4[6]=RenderState2D.EMPTYMAT4_ARRAY[6];
		m4[7]=RenderState2D.EMPTYMAT4_ARRAY[7];
		m4[8]=RenderState2D.EMPTYMAT4_ARRAY[8];
		m4[9]=RenderState2D.EMPTYMAT4_ARRAY[9];
		m4[10]=RenderState2D.EMPTYMAT4_ARRAY[10];
		m4[11]=RenderState2D.EMPTYMAT4_ARRAY[11];
		m4[12]=m.tx;
		m4[13]=m.ty;
		m4[14]=RenderState2D.EMPTYMAT4_ARRAY[14];
		m4[15]=RenderState2D.EMPTYMAT4_ARRAY[15];
		return matArray;
	}

	RenderState2D.restoreTempArray=function(){
		RenderState2D.TEMPMAT4_ARRAY[0]=1;
		RenderState2D.TEMPMAT4_ARRAY[1]=0;
		RenderState2D.TEMPMAT4_ARRAY[4]=0;
		RenderState2D.TEMPMAT4_ARRAY[5]=1;
		RenderState2D.TEMPMAT4_ARRAY[12]=0;
		RenderState2D.TEMPMAT4_ARRAY[13]=0;
	}

	RenderState2D.clear=function(){
		RenderState2D.worldScissorTest=false;
		RenderState2D.worldShaderDefines=null;
		RenderState2D.worldFilters=null;
		RenderState2D.worldAlpha=1;
		RenderState2D.worldClipRect.x=RenderState2D.worldClipRect.y=0;
		RenderState2D.worldClipRect.width=RenderState2D.width;
		RenderState2D.worldClipRect.height=RenderState2D.height;
		RenderState2D.curRenderTarget=null;
	}

	RenderState2D._MAXSIZE=99999999;
	RenderState2D.EMPTYMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	RenderState2D.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	RenderState2D.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;
	RenderState2D.worldAlpha=1.0;
	RenderState2D.worldScissorTest=false;
	RenderState2D.worldFilters=null;
	RenderState2D.worldShaderDefines=null;
	RenderState2D.curRenderTarget=null;
	RenderState2D.width=0;
	RenderState2D.height=0;
	__static(RenderState2D,
	['worldMatrix',function(){return this.worldMatrix=new Matrix();},'worldClipRect',function(){return this.worldClipRect=new Rectangle(0,0,99999999,99999999);}
	]);
	return RenderState2D;
})()


/**
*@private
*<code>ShaderCompile</code> 类用于实现Shader编译。
*/
//class laya.webgl.utils.ShaderCompile
var ShaderCompile=(function(){
	var ShaderNode,InlcudeFile;
	function ShaderCompile(name,vs,ps,nameMap,defs){
		//this._nameMap=null;
		//this._VS=null;
		//this._PS=null;
		var _$this=this;
		function _compile (script){
			var includefiles=[];
			var top=new ShaderNode(includefiles);
			_$this._compileToTree(top,script.split('\n'),0,includefiles,defs);
			return top;
		};
		var startTime=Browser.now();
		this._VS=_compile(vs);
		this._PS=_compile(ps);
		this._nameMap=nameMap;
		if ((Browser.now()-startTime)> 2)
			console.log("ShaderCompile use time:"+(Browser.now()-startTime)+"  size:"+vs.length+"/"+ps.length);
	}

	__class(ShaderCompile,'laya.webgl.utils.ShaderCompile');
	var __proto=ShaderCompile.prototype;
	__proto._compileToTree=function(parent,lines,start,includefiles,defs){
		var node,preNode;
		var text,name,fname;
		var ofs=0,words,noUseNode;
		var i=0,n=0,j=0;
		for (i=start;i < lines.length;i++){
			text=lines[i];
			if (text.length < 1)continue ;
			ofs=text.indexOf("//");
			if (ofs===0)continue ;
			if (ofs >=0)text=text.substr(0,ofs);
			node=noUseNode || new ShaderNode(includefiles);
			noUseNode=null;
			node.text=text;
			node.noCompile=true;
			if ((ofs=text.indexOf("#"))>=0){
				name="#";
				for (j=ofs+1,n=text.length;j < n;j++){
					var c=text.charAt(j);
					if (c===' ' || c==='\t' || c==='?')break ;
					name+=c;
				}
				node.name=name;
				switch (name){
					case "#ifdef":
					case "#ifndef":
						node.src=text;
						node.noCompile=text.match(/[!&|()=<>]/)!=null;
						if (!node.noCompile){
							words=text.replace(/^\s*/,'').split(/\s+/);
							node.setCondition(words[1],name==="#ifdef" ? 1 :2);
							node.text="//"+node.text;
							}else {
							console.log("function():Boolean{return "+text.substr(ofs+node.name.length)+"}");
						}
						node.setParent(parent);
						parent=node;
						if (defs){
							words=text.substr(j).split(ShaderCompile._splitToWordExps3);
							for (j=0;j < words.length;j++){
								text=words[j];
								text.length && (defs[ text]=true);
							}
						}
						continue ;
					case "#if":
						node.src=text;
						node.noCompile=true;
						node.setParent(parent);
						parent=node;
						if (defs){
							words=text.substr(j).split(ShaderCompile._splitToWordExps3);
							for (j=0;j < words.length;j++){
								text=words[j];
								text.length && text!="defined" && (defs[ text]=true);
							}
						}
						continue ;
					case "#else":
						node.src=text;
						parent=parent.parent;
						preNode=parent.childs[parent.childs.length-1];
						node.noCompile=preNode.noCompile
						if (!(node.noCompile)){
							node.condition=preNode.condition;
							node.conditionType=preNode.conditionType==1 ? 2 :1;
							node.text="//"+node.text+" "+preNode.text+" "+node.conditionType;
						}
						node.setParent(parent);
						parent=node;
						continue ;
					case "#endif":
						parent=parent.parent;
						preNode=parent.childs[parent.childs.length-1];
						node.noCompile=preNode.noCompile;
						if (!(node.noCompile)){
							node.text="//"+node.text;
						}
						node.setParent(parent);
						continue ;
					case "#include":
						words=ShaderCompile.splitToWords(text,null);
						var inlcudeFile=ShaderCompile.includes[words[1]];
						if (!inlcudeFile){
							throw "ShaderCompile error no this include file:"+words[1];
							return;
						}
						if ((ofs=words[0].indexOf("?"))< 0){
							node.setParent(parent);
							text=inlcudeFile.getWith(words[2]=='with' ? words[3] :null);
							this._compileToTree(node,text.split('\n'),0,includefiles,defs);
							node.text="";
							continue ;
						}
						node.setCondition(words[0].substr(ofs+1),1);
						node.text=inlcudeFile.getWith(words[2]=='with' ? words[3] :null);
						break ;
					case "#import":
						words=ShaderCompile.splitToWords(text,null);
						fname=words[1];
						includefiles.push({node:node,file:ShaderCompile.includes[fname],ofs:node.text.length});
						continue ;
					}
				}else {
				preNode=parent.childs[parent.childs.length-1];
				if (preNode && !preNode.name){
					includefiles.length > 0 && ShaderCompile.splitToWords(text,preNode);
					noUseNode=node;
					preNode.text+="\n"+text;
					continue ;
				}
				includefiles.length > 0 && ShaderCompile.splitToWords(text,node);
			}
			node.setParent(parent);
		}
	}

	__proto.createShader=function(define,shaderName,createShader){
		var defMap={};
		var defineStr="";
		if (define){
			for (var i in define){
				defineStr+="#define "+i+"\n";
				defMap[i]=true;
			}
		};
		var vs=this._VS.toscript(defMap,[]);
		var ps=this._PS.toscript(defMap,[]);
		return (createShader || Shader.create)(defineStr+vs.join('\n'),defineStr+ps.join('\n'),shaderName,this._nameMap);
	}

	ShaderCompile._parseOne=function(attributes,uniforms,words,i,word,b){
		var one={type:ShaderCompile.shaderParamsMap[words[i+1]],name:words[i+2],size:isNaN(parseInt(words[i+3]))? 1 :parseInt(words[i+3])};
		if (b){
			if (word=="attribute"){
				attributes.push(one);
				}else {
				uniforms.push(one);
			}
		}
		if (words[i+3]==':'){
			one.type=words[i+4];
			i+=2;
		}
		i+=2;
		return i;
	}

	ShaderCompile.addInclude=function(fileName,txt){
		if (!txt || txt.length===0)
			throw new Error("add shader include file err:"+fileName);
		if (ShaderCompile.includes[fileName])
			throw new Error("add shader include file err, has add:"+fileName);
		ShaderCompile.includes[fileName]=new InlcudeFile(txt);
	}

	ShaderCompile.preGetParams=function(vs,ps){
		var text=[vs,ps];
		var result={};
		var attributes=[];
		var uniforms=[];
		var definesInfo={};
		var definesName=[];
		result.attributes=attributes;
		result.uniforms=uniforms;
		result.defines=definesInfo;
		var i=0,n=0,one;
		for (var s=0;s < 2;s++){
			text[s]=text[s].replace(ShaderCompile._removeAnnotation,"");
			var words=text[s].match(ShaderCompile._reg);
			var tempelse;
			for (i=0,n=words.length;i < n;i++){
				var word=words[i];
				if (word !="attribute" && word !="uniform"){
					if (word=="#define"){
						word=words[++i];
						definesName[word]=1;
						continue ;
						}else if (word=="#ifdef"){
						tempelse=words[++i];
						var def=definesInfo[tempelse]=definesInfo[tempelse] || [];
						for (i++;i < n;i++){
							word=words[i];
							if (word !="attribute" && word !="uniform"){
								if (word=="#else"){
									for (i++;i < n;i++){
										word=words[i];
										if (word !="attribute" && word !="uniform"){
											if (word=="#endif"){
												break ;
											}
											continue ;
										}
										i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,!definesName[tempelse]);
									}
								}
								continue ;
							}
							i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,definesName[tempelse]);
						}
					}
					continue ;
				}
				i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,true);
			}
		}
		return result;
	}

	ShaderCompile.splitToWords=function(str,block){
		var out=[];
		var c;
		var ofs=-1;
		var word;
		for (var i=0,n=str.length;i < n;i++){
			c=str.charAt(i);
			if (" \t=+-*/&%!<>()'\",;".indexOf(c)>=0){
				if (ofs >=0 && (i-ofs)> 1){
					word=str.substr(ofs,i-ofs);
					out.push(word);
				}
				if (c=='"' || c=="'"){
					var ofs2=str.indexOf(c,i+1);
					if (ofs2 < 0){
						throw "Sharder err:"+str;
					}
					out.push(str.substr(i+1,ofs2-i-1));
					i=ofs2;
					ofs=-1;
					continue ;
				}
				if (c=='(' && block && out.length > 0){
					word=out[out.length-1]+";";
					if ("vec4;main;".indexOf(word)< 0)
						block.useFuns+=word;
				}
				ofs=-1;
				continue ;
			}
			if (ofs < 0)ofs=i;
		}
		if (ofs < n && (n-ofs)> 1){
			word=str.substr(ofs,n-ofs);
			out.push(word);
		}
		return out;
	}

	ShaderCompile.IFDEF_NO=0;
	ShaderCompile.IFDEF_YES=1;
	ShaderCompile.IFDEF_ELSE=2;
	ShaderCompile.IFDEF_PARENT=3;
	ShaderCompile._removeAnnotation=new RegExp("(/\\*([^*]|[\\r\\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)|(//.*)","g");
	ShaderCompile._reg=new RegExp("(\".*\")|('.*')|([#\\w\\*-\\.+/()=<>{}\\\\]+)|([,;:\\\\])","g");
	ShaderCompile._splitToWordExps=new RegExp("[(\".*\")]+|[('.*')]+|([ \\t=\\+\\-*/&%!<>!%\(\),;])","g");
	ShaderCompile.includes={};
	__static(ShaderCompile,
	['shaderParamsMap',function(){return this.shaderParamsMap={"float":/*laya.webgl.WebGLContext.FLOAT*/0x1406,"int":/*laya.webgl.WebGLContext.INT*/0x1404,"bool":/*laya.webgl.WebGLContext.BOOL*/0x8B56,"vec2":/*laya.webgl.WebGLContext.FLOAT_VEC2*/0x8B50,"vec3":/*laya.webgl.WebGLContext.FLOAT_VEC3*/0x8B51,"vec4":/*laya.webgl.WebGLContext.FLOAT_VEC4*/0x8B52,"ivec2":/*laya.webgl.WebGLContext.INT_VEC2*/0x8B53,"ivec3":/*laya.webgl.WebGLContext.INT_VEC3*/0x8B54,"ivec4":/*laya.webgl.WebGLContext.INT_VEC4*/0x8B55,"bvec2":/*laya.webgl.WebGLContext.BOOL_VEC2*/0x8B57,"bvec3":/*laya.webgl.WebGLContext.BOOL_VEC3*/0x8B58,"bvec4":/*laya.webgl.WebGLContext.BOOL_VEC4*/0x8B59,"mat2":/*laya.webgl.WebGLContext.FLOAT_MAT2*/0x8B5A,"mat3":/*laya.webgl.WebGLContext.FLOAT_MAT3*/0x8B5B,"mat4":/*laya.webgl.WebGLContext.FLOAT_MAT4*/0x8B5C,"sampler2D":/*laya.webgl.WebGLContext.SAMPLER_2D*/0x8B5E,"samplerCube":/*laya.webgl.WebGLContext.SAMPLER_CUBE*/0x8B60};},'_splitToWordExps3',function(){return this._splitToWordExps3=new RegExp("[ \\t=\\+\\-*/&%!<>!%\(\),;\\|]","g");}
	]);
	ShaderCompile.__init$=function(){
		//class ShaderNode
		ShaderNode=(function(){
			function ShaderNode(includefiles){
				this.childs=[];
				this.text="";
				this.parent=null;
				this.name=null;
				this.noCompile=false;
				this.includefiles=null;
				this.condition=null;
				this.conditionType=0;
				this.useFuns="";
				this.z=0;
				this.src=null;
				this.includefiles=includefiles;
			}
			__class(ShaderNode,'');
			var __proto=ShaderNode.prototype;
			__proto.setParent=function(parent){
				parent.childs.push(this);
				this.z=parent.z+1;
				this.parent=parent;
			}
			__proto.setCondition=function(condition,type){
				if (condition){
					this.conditionType=type;
					condition=condition.replace(/(\s*$)/g,"");
					this.condition=function (){
						return this[condition];
					}
					this.condition.__condition=condition;
				}
			}
			__proto.toscript=function(def,out){
				return this._toscript(def,out,++ShaderNode.__id);
			}
			__proto._toscript=function(def,out,id){
				if (this.childs.length < 1 && !this.text)return out;
				var outIndex=out.length;
				if (this.condition){
					var ifdef=!!this.condition.call(def);
					this.conditionType===/*laya.webgl.utils.ShaderCompile.IFDEF_ELSE*/2 && (ifdef=!ifdef);
					if (!ifdef)return out;
				}
				this.text && out.push(this.text);
				this.childs.length > 0 && this.childs.forEach(function(o,index,arr){
					o._toscript(def,out,id);
				});
				if (this.includefiles.length > 0 && this.useFuns.length > 0){
					var funsCode;
					for (var i=0,n=this.includefiles.length;i < n;i++){
						if (this.includefiles[i].curUseID==id){
							continue ;
						}
						funsCode=this.includefiles[i].file.getFunsScript(this.useFuns);
						if (funsCode.length > 0){
							this.includefiles[i].curUseID=id;
							out[0]=funsCode+out[0];
						}
					}
				}
				return out;
			}
			ShaderNode.__id=1;
			return ShaderNode;
		})()
		//class InlcudeFile
		InlcudeFile=(function(){
			function InlcudeFile(txt){
				this.script=null;
				this.codes={};
				this.funs={};
				this.curUseID=-1;
				this.funnames="";
				this.script=txt;
				var begin=0,ofs=0,end=0;
				while (true){
					begin=txt.indexOf("#begin",begin);
					if (begin < 0)break ;
					end=begin+5;
					while (true){
						end=txt.indexOf("#end",end);
						if (end < 0)break ;
						if (txt.charAt(end+4)==='i')
							end+=5;
						else break ;
					}
					if (end < 0){
						throw "add include err,no #end:"+txt;
						return;
					}
					ofs=txt.indexOf('\n',begin);
					var words=ShaderCompile.splitToWords(txt.substr(begin,ofs-begin),null);
					if (words[1]=='code'){
						this.codes[words[2]]=txt.substr(ofs+1,end-ofs-1);
						}else if (words[1]=='function'){
						ofs=txt.indexOf("function",begin);
						ofs+="function".length;
						this.funs[words[3]]=txt.substr(ofs+1,end-ofs-1);
						this.funnames+=words[3]+";";
					}
					begin=end+1;
				}
			}
			__class(InlcudeFile,'');
			var __proto=InlcudeFile.prototype;
			__proto.getWith=function(name){
				var r=name ? this.codes[name] :this.script;
				if (!r){
					throw "get with error:"+name;
				}
				return r;
			}
			__proto.getFunsScript=function(funsdef){
				var r="";
				for (var i in this.funs){
					if (funsdef.indexOf(i+";")>=0){
						r+=this.funs[i];
					}
				}
				return r;
			}
			return InlcudeFile;
		})()
	}

	return ShaderCompile;
})()


/**
*@private
*/
//class laya.webgl.WebGL
var WebGL=(function(){
	function WebGL(){}
	__class(WebGL,'laya.webgl.WebGL');
	WebGL._uint8ArraySlice=function(){
		var _this=/*__JS__ */this;
		var sz=_this.length;
		var dec=new Uint8Array(_this.length);
		for (var i=0;i < sz;i++)dec[i]=_this[i];
		return dec;
	}

	WebGL._float32ArraySlice=function(){
		var _this=/*__JS__ */this;
		var sz=_this.length;
		var dec=new Float32Array(_this.length);
		for (var i=0;i < sz;i++)dec[i]=_this[i];
		return dec;
	}

	WebGL._uint16ArraySlice=function(__arg){
		var arg=arguments;
		var _this=/*__JS__ */this;
		var sz=0;
		var dec;
		var i=0;
		if (arg.length===0){
			sz=_this.length;
			dec=new Uint16Array(sz);
			for (i=0;i < sz;i++)
			dec[i]=_this[i];
			}else if (arg.length===2){
			var start=arg[0];
			var end=arg[1];
			if (end > start){
				sz=end-start;
				dec=new Uint16Array(sz);
				for (i=start;i < end;i++)
				dec[i-start]=_this[i];
				}else {
				dec=new Uint16Array(0);
			}
		}
		return dec;
	}

	WebGL.expandContext=function(){
		var from=Context.prototype;
		var to=/*__JS__ */CanvasRenderingContext2D.prototype;
		to.fillTrangles=from.fillTrangles;
		Buffer2D.__int__(null);
		to.setIBVB=function (x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset){
			(startIndex===void 0)&& (startIndex=0);
			(offset===void 0)&& (offset=0);
			if (ib===null){
				this._ib=this._ib || IndexBuffer2D.QuadrangleIB;
				ib=this._ib;
				GlUtils.expandIBQuadrangle(ib,(vb._byteLength / (4 *16)+8));
			}
			this._setIBVB(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset);
		};
		to.fillTrangles=function (tex,x,y,points,m){
			this._curMat=this._curMat || Matrix.create();
			this._vb=this._vb || VertexBuffer2D.create();
			if (!this._ib){
				this._ib=IndexBuffer2D.create();
				GlUtils.fillIBQuadrangle(this._ib,length / 4);
			};
			var vb=this._vb;
			var length=points.length >> 4;
			GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,0,0);
			GlUtils.expandIBQuadrangle(this._ib,(vb._byteLength / (4 *16)+8));
			var shaderValues=new Value2D(0x01,0);
			shaderValues.textureHost=tex;
			var sd=new Shader2X("attribute vec2 position; attribute vec2 texcoord; uniform vec2 size; uniform mat4 mmat; varying vec2 v_texcoord; void main() { vec4 p=vec4(position.xy,0.0,1.0);vec4 pos=mmat*p; gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0); v_texcoord = texcoord; }","precision mediump float; varying vec2 v_texcoord; uniform sampler2D texture; void main() {vec4 color= texture2D(texture, v_texcoord); color.a*=1.0; gl_FragColor= color;}");
			/*__JS__ */vb._vertType=3;
			this._setIBVB(x,y,this._ib,vb,length *6,m,sd,shaderValues,0,0);
		}
	}

	WebGL.enable=function(){
		Browser.__init__();
		if (Render.isConchApp){
			if (!Render.isConchWebGL){
				RunDriver.skinAniSprite=function (){
					var tSkinSprite=new SkinMesh()
					return tSkinSprite;
				}
				WebGL.expandContext();
				return false;
			}
		}
		RunDriver.getWebGLContext=function getWebGLContext (canvas){
			var gl;
			var names=["webgl","experimental-webgl","webkit-3d","moz-webgl"];
			for (var i=0;i < names.length;i++){
				try {
					gl=canvas.getContext(names[i],{stencil:Config.isStencil,alpha:Config.isAlpha,antialias:Config.isAntialias,premultipliedAlpha:Config.premultipliedAlpha,preserveDrawingBuffer:Config.preserveDrawingBuffer});
				}catch (e){}
				if (gl)
					return gl;
			}
			return null;
		}
		WebGL.mainContext=RunDriver.getWebGLContext(Render._mainCanvas);
		if (WebGL.mainContext==null)
			return false;
		if (Render.isWebGL)return true;
		HTMLImage.create=function (src,def){
			return new WebGLImage(src,def);
		}
		HTMLSubImage.create=function (canvas,offsetX,offsetY,width,height,atlasImage,src){
			return new WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src);
		}
		Render.WebGL=WebGL;
		Render.isWebGL=true;
		DrawText.__init__();
		RunDriver.createRenderSprite=function (type,next){
			return new RenderSprite3D(type,next);
		}
		RunDriver.createWebGLContext2D=function (c){
			return new WebGLContext2D(c);
		}
		RunDriver.changeWebGLSize=function (width,height){
			laya.webgl.WebGL.onStageResize(width,height);
		}
		RunDriver.createGraphics=function (){
			return new GraphicsGL();
		};
		var action=RunDriver.createFilterAction;
		RunDriver.createFilterAction=action ? action :function (type){
			return new ColorFilterActionGL()
		}
		RunDriver.clear=function (color){
			RenderState2D.worldScissorTest && laya.webgl.WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			var ctx=Render.context.ctx;
			var c=(ctx._submits._length==0 || Config.preserveDrawingBuffer)? Color.create(color)._color :Stage._wgColor;
			if (c)ctx.clearBG(c[0],c[1],c[2],c[3]);
			RenderState2D.clear();
		}
		RunDriver.addToAtlas=function (texture,force){
			(force===void 0)&& (force=false);
			var bitmap=texture.bitmap;
			if (!Render.optimizeTextureMemory(texture.url,texture)){
				(bitmap).enableMerageInAtlas=false;
				return;
			}
			if ((Laya.__typeof(bitmap,'laya.webgl.resource.IMergeAtlasBitmap'))&& ((bitmap).allowMerageInAtlas)){
				bitmap.on(/*laya.events.Event.RECOVERED*/"recovered",texture,texture.addTextureToAtlas);
			}
		}
		RunDriver.isAtlas=function (bitmap){
			return (bitmap instanceof laya.webgl.atlas.AtlasWebGLCanvas );
		}
		AtlasResourceManager._enable();
		RunDriver.beginFlush=function (){
			var atlasResourceManager=AtlasResourceManager.instance;
			var count=atlasResourceManager.getAtlaserCount();
			for (var i=0;i < count;i++){
				var atlerCanvas=atlasResourceManager.getAtlaserByIndex(i).texture;
				(atlerCanvas._flashCacheImageNeedFlush)&& (RunDriver.flashFlushImage(atlerCanvas));
			}
		}
		RunDriver.drawToCanvas=function (sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
			if (canvasWidth <=0 || canvasHeight <=0){
				console.log("[error] canvasWidth and canvasHeight should greater than zero");
			}
			canvasWidth |=0;canvasHeight |=0;offsetX |=0;offsetY |=0;
			var renderTarget=RenderTarget2D.create(canvasWidth,canvasHeight,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,0,false);
			renderTarget.start();
			renderTarget.clear(0,0,0,0);
			Render.context.clear();
			RenderSprite.renders[_renderType]._fun(sprite,Render.context,offsetX,RenderState2D.height-canvasHeight+offsetY);
			Render.context.flush();
			renderTarget.end();
			var pixels=renderTarget.getData(0,0,canvasWidth,canvasHeight);
			renderTarget.recycle();
			if (pixels.byteLength !=canvasWidth *canvasHeight *4){
				console.log('drawToCanvas error: w:'+canvasWidth+',h:'+canvasHeight+',datalen:'+pixels.byteLength);
				return;
			};
			var htmlCanvas=new WebGLCanvas();
			htmlCanvas._canvas=Browser.createElement("canvas");
			htmlCanvas.size(canvasWidth,canvasHeight);
			var context=htmlCanvas._canvas.getContext('2d');
			Browser.canvas.size(canvasWidth,canvasHeight);
			var tempContext=Browser.context;
			var imgData=tempContext.createImageData(canvasWidth,canvasHeight);
			imgData.data.set(/*__JS__ */new Uint8ClampedArray(pixels.buffer));
			htmlCanvas._imgData=imgData;
			tempContext.putImageData(imgData,0,0);
			context.save();
			context.translate(0,canvasHeight);
			context.scale(1,-1);
			context.drawImage(Browser.canvas.source,0,0);
			context.restore();
			return htmlCanvas;
		}
		RunDriver.createFilterAction=function (type){
			var action;
			switch (type){
				case /*laya.filters.Filter.COLOR*/0x20:
					action=new ColorFilterActionGL();
					break ;
				}
			return action;
		}
		RunDriver.addTextureToAtlas=function (texture){
			texture._uvID++;
			AtlasResourceManager._atlasRestore++;
			((texture.bitmap).enableMerageInAtlas)&& (AtlasResourceManager.instance.addToAtlas(texture));
		}
		RunDriver.getTexturePixels=function (value,x,y,width,height){
			(Render.context.ctx).clear();
			var tSprite=new Sprite();
			tSprite.graphics.drawTexture(value,-x,-y);
			var tRenderTarget=RenderTarget2D.create(width,height);
			tRenderTarget.start();
			tRenderTarget.clear(0,0,0,0);
			tSprite.render(Render.context,0,0);
			(Render.context.ctx).flush();
			tRenderTarget.end();
			var tUint8Array=tRenderTarget.getData(0,0,width,height);
			var tArray=[];
			var tIndex=0;
			for (var i=height-1;i >=0;i--){
				for (var j=0;j < width;j++){
					tIndex=(i *width+j)*4;
					tArray.push(tUint8Array[tIndex]);
					tArray.push(tUint8Array[tIndex+1]);
					tArray.push(tUint8Array[tIndex+2]);
					tArray.push(tUint8Array[tIndex+3]);
				}
			}
			return tArray;
		}
		RunDriver.skinAniSprite=function (){
			var tSkinSprite=new SkinMesh()
			return tSkinSprite;
		}
		HTMLCanvas.create=function (type,canvas){
			var ret=new WebGLCanvas();
			ret._imgData=canvas;
			ret.flipY=false;
			return ret;
		}
		Filter._filterStart=function (scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			var source=RenderTarget2D.create(b.width,b.height);
			source.start();
			source.clear(0,0,0,0);
			scope.addValue("src",source);
			scope.addValue("ScissorTest",RenderState2D.worldScissorTest);
			if (RenderState2D.worldScissorTest){
				var tClilpRect=new Rectangle();
				tClilpRect.copyFrom((context.ctx)._clipRect)
				scope.addValue("clipRect",tClilpRect);
				RenderState2D.worldScissorTest=false;
				laya.webgl.WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			}
		}
		Filter._filterEnd=function (scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			var source=scope.getValue("src");
			source.end();
			var out=RenderTarget2D.create(b.width,b.height);
			out.start();
			out.clear(0,0,0,0);
			scope.addValue("out",out);
			sprite._set$P('_filterCache',out);
			sprite._set$P('_isHaveGlowFilter',scope.getValue("_isHaveGlowFilter"));
		}
		Filter._EndTarget=function (scope,context){
			var source=scope.getValue("src");
			source.recycle();
			var out=scope.getValue("out");
			out.end();
			var b=scope.getValue("ScissorTest");
			if (b){
				RenderState2D.worldScissorTest=true;
				laya.webgl.WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
				context.ctx.save();
				var tClipRect=scope.getValue("clipRect");
				(context.ctx).clipRect(tClipRect.x,tClipRect.y,tClipRect.width,tClipRect.height);
			}
		}
		Filter._useSrc=function (scope){
			var source=scope.getValue("out");
			source.end();
			source=scope.getValue("src");
			source.start();
			source.clear(0,0,0,0);
		}
		Filter._endSrc=function (scope){
			var source=scope.getValue("src");
			source.end();
		}
		Filter._useOut=function (scope){
			var source=scope.getValue("src");
			source.end();
			source=scope.getValue("out");
			source.start();
			source.clear(0,0,0,0);
		}
		Filter._endOut=function (scope){
			var source=scope.getValue("out");
			source.end();
		}
		Filter._recycleScope=function (scope){
			scope.recycle();
		}
		Filter._filter=function (sprite,context,x,y){
			var next=this._next;
			if (next){
				var filters=sprite.filters,len=filters.length;
				if (len==1 && (filters[0].type==/*laya.filters.Filter.COLOR*/0x20)){
					context.ctx.save();
					context.ctx.setFilters([filters[0]]);
					next._fun.call(next,sprite,context,x,y);
					context.ctx.restore();
					return;
				};
				var shaderValue;
				var b;
				var scope=SubmitCMDScope.create();
				var p=Point.TEMP;
				var tMatrix=context.ctx._getTransformMatrix();
				var mat=Matrix.create();
				tMatrix.copyTo(mat);
				var tPadding=0;
				var tHalfPadding=0;
				var tIsHaveGlowFilter=false;
				var out=sprite._$P._filterCache ? sprite._$P._filterCache :null;
				if (!out || sprite._repaint){
					tIsHaveGlowFilter=sprite._isHaveGlowFilter();
					scope.addValue("_isHaveGlowFilter",tIsHaveGlowFilter);
					if (tIsHaveGlowFilter){
						tPadding=50;
						tHalfPadding=25;
					}
					b=new Rectangle();
					b.copyFrom((sprite).getSelfBounds());
					b.x+=(sprite).x;
					b.y+=(sprite).y;
					b.x-=(sprite).pivotX+4;
					b.y-=(sprite).pivotY+4;
					var tSX=b.x;
					var tSY=b.y;
					b.width+=(tPadding+8);
					b.height+=(tPadding+8);
					p.x=b.x *mat.a+b.y *mat.c;
					p.y=b.y *mat.d+b.x *mat.b;
					b.x=p.x;
					b.y=p.y;
					p.x=b.width *mat.a+b.height *mat.c;
					p.y=b.height *mat.d+b.width *mat.b;
					b.width=p.x;
					b.height=p.y;
					if (b.width <=0 || b.height <=0){
						return;
					}
					out && out.recycle();
					scope.addValue("bounds",b);
					var submit=SubmitCMD.create([scope,sprite,context,0,0],Filter._filterStart);
					context.addRenderObject(submit);
					(context.ctx)._renderKey=0;
					(context.ctx)._shader2D.glTexture=null;
					var tX=sprite.x-tSX+tHalfPadding;
					var tY=sprite.y-tSY+tHalfPadding;
					next._fun.call(next,sprite,context,tX,tY);
					submit=SubmitCMD.create([scope,sprite,context,0,0],Filter._filterEnd);
					context.addRenderObject(submit);
					for (var i=0;i < len;i++){
						if (i !=0){
							submit=SubmitCMD.create([scope],Filter._useSrc);
							context.addRenderObject(submit);
							shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
							Matrix.TEMP.identity();
							context.ctx.drawTarget(scope,0,0,b.width,b.height,Matrix.TEMP,"out",shaderValue,null,BlendMode.TOINT.overlay);
							submit=SubmitCMD.create([scope],Filter._useOut);
							context.addRenderObject(submit);
						};
						var fil=filters[i];
						fil.action.apply3d(scope,sprite,context,0,0);
					}
					submit=SubmitCMD.create([scope,context],Filter._EndTarget);
					context.addRenderObject(submit);
					}else {
					tIsHaveGlowFilter=sprite._$P._isHaveGlowFilter ? sprite._$P._isHaveGlowFilter :false;
					if (tIsHaveGlowFilter){
						tPadding=50;
						tHalfPadding=25;
					}
					b=sprite.getBounds();
					if (b.width <=0 || b.height <=0){
						return;
					}
					b.width+=tPadding;
					b.height+=tPadding;
					p.x=b.x *mat.a+b.y *mat.c;
					p.y=b.y *mat.d+b.x *mat.b;
					b.x=p.x;
					b.y=p.y;
					p.x=b.width *mat.a+b.height *mat.c;
					p.y=b.height *mat.d+b.width *mat.b;
					b.width=p.x;
					b.height=p.y;
					scope.addValue("out",out);
				}
				x=x-tHalfPadding-sprite.x;
				y=y-tHalfPadding-sprite.y;
				p.setTo(x,y);
				mat.transformPoint(p);
				x=p.x+b.x;
				y=p.y+b.y;
				shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
				Matrix.TEMP.identity();
				(context.ctx).drawTarget(scope,x,y,b.width,b.height,Matrix.TEMP,"out",shaderValue,null,BlendMode.TOINT.overlay);
				submit=SubmitCMD.create([scope],Filter._recycleScope);
				context.addRenderObject(submit);
				mat.destroy();
			}
		}
		Float32Array.prototype.slice || (Float32Array.prototype.slice=WebGL._float32ArraySlice);
		Uint16Array.prototype.slice || (Uint16Array.prototype.slice=WebGL._uint16ArraySlice);
		Uint8Array.prototype.slice || (Uint8Array.prototype.slice=WebGL._uint8ArraySlice);
		return true;
	}

	WebGL.onStageResize=function(width,height){
		if (WebGL.mainContext==null)return;
		WebGL.mainContext.viewport(0,0,width,height);
		RenderState2D.width=width;
		RenderState2D.height=height;
	}

	WebGL.onInvalidGLRes=function(){
		AtlasResourceManager.instance.freeAll();
		ResourceManager.releaseContentManagers(true);
		WebGL.doNodeRepaint(Laya.stage);
		WebGL.mainContext.viewport(0,0,RenderState2D.width,RenderState2D.height);
		Laya.stage.event(/*laya.events.Event.DEVICE_LOST*/"devicelost");
	}

	WebGL.doNodeRepaint=function(sprite){
		(sprite.numChildren==0)&& (sprite.repaint());
		for (var i=0;i < sprite.numChildren;i++)
		WebGL.doNodeRepaint(sprite.getChildAt(i));
	}

	WebGL.init=function(canvas,width,height){
		WebGL.mainCanvas=canvas;
		HTMLCanvas._createContext=function (canvas){
			return new WebGLContext2D(canvas);
		}
		WebGLCanvas._createContext=function (canvas){
			return new WebGLContext2D(canvas);
		};
		var gl=laya.webgl.WebGL.mainContext;
		if (gl.getShaderPrecisionFormat !=null){
			var vertexPrecisionFormat=gl.getShaderPrecisionFormat(/*laya.webgl.WebGLContext.VERTEX_SHADER*/0x8B31,/*laya.webgl.WebGLContext.HIGH_FLOAT*/0x8DF2);
			var framePrecisionFormat=gl.getShaderPrecisionFormat(/*laya.webgl.WebGLContext.FRAGMENT_SHADER*/0x8B30,/*laya.webgl.WebGLContext.HIGH_FLOAT*/0x8DF2);
			WebGL.shaderHighPrecision=(vertexPrecisionFormat.precision&&framePrecisionFormat.precision)? true :false;
			}else {
			WebGL.shaderHighPrecision=false;
		}
		WebGL.compressAstc=gl.getExtension("WEBGL_compressed_texture_astc");
		WebGL.compressAtc=gl.getExtension("WEBGL_compressed_texture_atc");
		WebGL.compressEtc=gl.getExtension("WEBGL_compressed_texture_etc");
		WebGL.compressEtc1=gl.getExtension("WEBGL_compressed_texture_etc1");
		WebGL.compressPvrtc=gl.getExtension("WEBGL_compressed_texture_pvrtc");
		WebGL.compressS3tc=gl.getExtension("WEBGL_compressed_texture_s3tc");
		WebGL.compressS3tc_srgb=gl.getExtension("WEBGL_compressed_texture_s3tc_srgb");
		gl.deleteTexture1=gl.deleteTexture;
		gl.deleteTexture=function (t){
			if (t==WebGLContext.curBindTexValue){
				WebGLContext.curBindTexValue=null;
			}
			gl.deleteTexture1(t);
		}
		WebGL.onStageResize(width,height);
		if (WebGL.mainContext==null)
			throw new Error("webGL getContext err!");
		System.__init__();
		AtlasResourceManager.__init__();
		ShaderDefines2D.__init__();
		Submit.__init__();
		WebGLContext2D.__init__();
		Value2D.__init__();
		Shader2D.__init__();
		Buffer2D.__int__(gl);
		BlendMode._init_(gl);
		if (Render.isConchApp){
			/*__JS__ */conch.setOnInvalidGLRes(WebGL.onInvalidGLRes);
		}
	}

	WebGL.compressAstc=null;
	WebGL.compressAtc=null;
	WebGL.compressEtc=null;
	WebGL.compressEtc1=null;
	WebGL.compressPvrtc=null;
	WebGL.compressS3tc=null;
	WebGL.compressS3tc_srgb=null;
	WebGL.mainCanvas=null;
	WebGL.mainContext=null;
	WebGL.antialias=true;
	WebGL.shaderHighPrecision=false;
	WebGL._bg_null=[0,0,0,0];
	return WebGL;
})()


//class laya.webgl.WebGLContext
var WebGLContext=(function(){
	function WebGLContext(){}
	__class(WebGLContext,'laya.webgl.WebGLContext');
	WebGLContext.UseProgram=function(program){
		if (WebGLContext._useProgram===program)return false;
		WebGL.mainContext.useProgram(program);
		WebGLContext._useProgram=program;
		return true;
	}

	WebGLContext.setDepthTest=function(gl,value){
		value!==WebGLContext._depthTest && (WebGLContext._depthTest=value,value?gl.enable(/*CLASS CONST:laya.webgl.WebGLContext.DEPTH_TEST*/0x0B71):gl.disable(/*CLASS CONST:laya.webgl.WebGLContext.DEPTH_TEST*/0x0B71));
	}

	WebGLContext.setDepthMask=function(gl,value){
		value!==WebGLContext._depthMask && (WebGLContext._depthMask=value,gl.depthMask(value));
	}

	WebGLContext.setDepthFunc=function(gl,value){
		value!==WebGLContext._depthFunc && (WebGLContext._depthFunc=value,gl.depthFunc(value));
	}

	WebGLContext.setBlend=function(gl,value){
		value!==WebGLContext._blend && (WebGLContext._blend=value,value?gl.enable(/*CLASS CONST:laya.webgl.WebGLContext.BLEND*/0x0BE2):gl.disable(/*CLASS CONST:laya.webgl.WebGLContext.BLEND*/0x0BE2));
	}

	WebGLContext.setBlendFunc=function(gl,sFactor,dFactor){
		(sFactor!==WebGLContext._sFactor||dFactor!==WebGLContext._dFactor)&& (WebGLContext._sFactor=sFactor,WebGLContext._dFactor=dFactor,gl.blendFunc(sFactor,dFactor));
	}

	WebGLContext.setCullFace=function(gl,value){
		value!==WebGLContext._cullFace && (WebGLContext._cullFace=value,value?gl.enable(/*CLASS CONST:laya.webgl.WebGLContext.CULL_FACE*/0x0B44):gl.disable(/*CLASS CONST:laya.webgl.WebGLContext.CULL_FACE*/0x0B44));
	}

	WebGLContext.setFrontFace=function(gl,value){
		value!==WebGLContext._frontFace && (WebGLContext._frontFace=value,gl.frontFace(value));
	}

	WebGLContext.bindTexture=function(gl,target,texture){
		gl.bindTexture(target,texture);
		WebGLContext.curBindTexTarget=target;
		WebGLContext.curBindTexValue=texture;
	}

	WebGLContext.DEPTH_BUFFER_BIT=0x00000100;
	WebGLContext.STENCIL_BUFFER_BIT=0x00000400;
	WebGLContext.COLOR_BUFFER_BIT=0x00004000;
	WebGLContext.POINTS=0x0000;
	WebGLContext.LINES=0x0001;
	WebGLContext.LINE_LOOP=0x0002;
	WebGLContext.LINE_STRIP=0x0003;
	WebGLContext.TRIANGLES=0x0004;
	WebGLContext.TRIANGLE_STRIP=0x0005;
	WebGLContext.TRIANGLE_FAN=0x0006;
	WebGLContext.ZERO=0;
	WebGLContext.ONE=1;
	WebGLContext.SRC_COLOR=0x0300;
	WebGLContext.ONE_MINUS_SRC_COLOR=0x0301;
	WebGLContext.SRC_ALPHA=0x0302;
	WebGLContext.ONE_MINUS_SRC_ALPHA=0x0303;
	WebGLContext.DST_ALPHA=0x0304;
	WebGLContext.ONE_MINUS_DST_ALPHA=0x0305;
	WebGLContext.DST_COLOR=0x0306;
	WebGLContext.ONE_MINUS_DST_COLOR=0x0307;
	WebGLContext.SRC_ALPHA_SATURATE=0x0308;
	WebGLContext.FUNC_ADD=0x8006;
	WebGLContext.BLEND_EQUATION=0x8009;
	WebGLContext.BLEND_EQUATION_RGB=0x8009;
	WebGLContext.BLEND_EQUATION_ALPHA=0x883D;
	WebGLContext.FUNC_SUBTRACT=0x800A;
	WebGLContext.FUNC_REVERSE_SUBTRACT=0x800B;
	WebGLContext.BLEND_DST_RGB=0x80C8;
	WebGLContext.BLEND_SRC_RGB=0x80C9;
	WebGLContext.BLEND_DST_ALPHA=0x80CA;
	WebGLContext.BLEND_SRC_ALPHA=0x80CB;
	WebGLContext.CONSTANT_COLOR=0x8001;
	WebGLContext.ONE_MINUS_CONSTANT_COLOR=0x8002;
	WebGLContext.CONSTANT_ALPHA=0x8003;
	WebGLContext.ONE_MINUS_CONSTANT_ALPHA=0x8004;
	WebGLContext.BLEND_COLOR=0x8005;
	WebGLContext.ARRAY_BUFFER=0x8892;
	WebGLContext.ELEMENT_ARRAY_BUFFER=0x8893;
	WebGLContext.ARRAY_BUFFER_BINDING=0x8894;
	WebGLContext.ELEMENT_ARRAY_BUFFER_BINDING=0x8895;
	WebGLContext.STREAM_DRAW=0x88E0;
	WebGLContext.STATIC_DRAW=0x88E4;
	WebGLContext.DYNAMIC_DRAW=0x88E8;
	WebGLContext.BUFFER_SIZE=0x8764;
	WebGLContext.BUFFER_USAGE=0x8765;
	WebGLContext.CURRENT_VERTEX_ATTRIB=0x8626;
	WebGLContext.FRONT=0x0404;
	WebGLContext.BACK=0x0405;
	WebGLContext.CULL_FACE=0x0B44;
	WebGLContext.FRONT_AND_BACK=0x0408;
	WebGLContext.BLEND=0x0BE2;
	WebGLContext.DITHER=0x0BD0;
	WebGLContext.STENCIL_TEST=0x0B90;
	WebGLContext.DEPTH_TEST=0x0B71;
	WebGLContext.SCISSOR_TEST=0x0C11;
	WebGLContext.POLYGON_OFFSET_FILL=0x8037;
	WebGLContext.SAMPLE_ALPHA_TO_COVERAGE=0x809E;
	WebGLContext.SAMPLE_COVERAGE=0x80A0;
	WebGLContext.NO_ERROR=0;
	WebGLContext.INVALID_ENUM=0x0500;
	WebGLContext.INVALID_VALUE=0x0501;
	WebGLContext.INVALID_OPERATION=0x0502;
	WebGLContext.OUT_OF_MEMORY=0x0505;
	WebGLContext.CW=0x0900;
	WebGLContext.CCW=0x0901;
	WebGLContext.LINE_WIDTH=0x0B21;
	WebGLContext.ALIASED_POINT_SIZE_RANGE=0x846D;
	WebGLContext.ALIASED_LINE_WIDTH_RANGE=0x846E;
	WebGLContext.CULL_FACE_MODE=0x0B45;
	WebGLContext.FRONT_FACE=0x0B46;
	WebGLContext.DEPTH_RANGE=0x0B70;
	WebGLContext.DEPTH_WRITEMASK=0x0B72;
	WebGLContext.DEPTH_CLEAR_VALUE=0x0B73;
	WebGLContext.DEPTH_FUNC=0x0B74;
	WebGLContext.STENCIL_CLEAR_VALUE=0x0B91;
	WebGLContext.STENCIL_FUNC=0x0B92;
	WebGLContext.STENCIL_FAIL=0x0B94;
	WebGLContext.STENCIL_PASS_DEPTH_FAIL=0x0B95;
	WebGLContext.STENCIL_PASS_DEPTH_PASS=0x0B96;
	WebGLContext.STENCIL_REF=0x0B97;
	WebGLContext.STENCIL_VALUE_MASK=0x0B93;
	WebGLContext.STENCIL_WRITEMASK=0x0B98;
	WebGLContext.STENCIL_BACK_FUNC=0x8800;
	WebGLContext.STENCIL_BACK_FAIL=0x8801;
	WebGLContext.STENCIL_BACK_PASS_DEPTH_FAIL=0x8802;
	WebGLContext.STENCIL_BACK_PASS_DEPTH_PASS=0x8803;
	WebGLContext.STENCIL_BACK_REF=0x8CA3;
	WebGLContext.STENCIL_BACK_VALUE_MASK=0x8CA4;
	WebGLContext.STENCIL_BACK_WRITEMASK=0x8CA5;
	WebGLContext.VIEWPORT=0x0BA2;
	WebGLContext.SCISSOR_BOX=0x0C10;
	WebGLContext.COLOR_CLEAR_VALUE=0x0C22;
	WebGLContext.COLOR_WRITEMASK=0x0C23;
	WebGLContext.UNPACK_ALIGNMENT=0x0CF5;
	WebGLContext.PACK_ALIGNMENT=0x0D05;
	WebGLContext.MAX_TEXTURE_SIZE=0x0D33;
	WebGLContext.MAX_VIEWPORT_DIMS=0x0D3A;
	WebGLContext.SUBPIXEL_BITS=0x0D50;
	WebGLContext.RED_BITS=0x0D52;
	WebGLContext.GREEN_BITS=0x0D53;
	WebGLContext.BLUE_BITS=0x0D54;
	WebGLContext.ALPHA_BITS=0x0D55;
	WebGLContext.DEPTH_BITS=0x0D56;
	WebGLContext.STENCIL_BITS=0x0D57;
	WebGLContext.POLYGON_OFFSET_UNITS=0x2A00;
	WebGLContext.POLYGON_OFFSET_FACTOR=0x8038;
	WebGLContext.TEXTURE_BINDING_2D=0x8069;
	WebGLContext.SAMPLE_BUFFERS=0x80A8;
	WebGLContext.SAMPLES=0x80A9;
	WebGLContext.SAMPLE_COVERAGE_VALUE=0x80AA;
	WebGLContext.SAMPLE_COVERAGE_INVERT=0x80AB;
	WebGLContext.NUM_COMPRESSED_TEXTURE_FORMATS=0x86A2;
	WebGLContext.COMPRESSED_TEXTURE_FORMATS=0x86A3;
	WebGLContext.DONT_CARE=0x1100;
	WebGLContext.FASTEST=0x1101;
	WebGLContext.NICEST=0x1102;
	WebGLContext.GENERATE_MIPMAP_HINT=0x8192;
	WebGLContext.BYTE=0x1400;
	WebGLContext.UNSIGNED_BYTE=0x1401;
	WebGLContext.SHORT=0x1402;
	WebGLContext.UNSIGNED_SHORT=0x1403;
	WebGLContext.INT=0x1404;
	WebGLContext.UNSIGNED_INT=0x1405;
	WebGLContext.FLOAT=0x1406;
	WebGLContext.DEPTH_COMPONENT=0x1902;
	WebGLContext.ALPHA=0x1906;
	WebGLContext.RGB=0x1907;
	WebGLContext.RGBA=0x1908;
	WebGLContext.LUMINANCE=0x1909;
	WebGLContext.LUMINANCE_ALPHA=0x190A;
	WebGLContext.UNSIGNED_SHORT_4_4_4_4=0x8033;
	WebGLContext.UNSIGNED_SHORT_5_5_5_1=0x8034;
	WebGLContext.UNSIGNED_SHORT_5_6_5=0x8363;
	WebGLContext.FRAGMENT_SHADER=0x8B30;
	WebGLContext.VERTEX_SHADER=0x8B31;
	WebGLContext.MAX_VERTEX_ATTRIBS=0x8869;
	WebGLContext.MAX_VERTEX_UNIFORM_VECTORS=0x8DFB;
	WebGLContext.MAX_VARYING_VECTORS=0x8DFC;
	WebGLContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS=0x8B4D;
	WebGLContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS=0x8B4C;
	WebGLContext.MAX_TEXTURE_IMAGE_UNITS=0x8872;
	WebGLContext.MAX_FRAGMENT_UNIFORM_VECTORS=0x8DFD;
	WebGLContext.SHADER_TYPE=0x8B4F;
	WebGLContext.DELETE_STATUS=0x8B80;
	WebGLContext.LINK_STATUS=0x8B82;
	WebGLContext.VALIDATE_STATUS=0x8B83;
	WebGLContext.ATTACHED_SHADERS=0x8B85;
	WebGLContext.ACTIVE_UNIFORMS=0x8B86;
	WebGLContext.ACTIVE_ATTRIBUTES=0x8B89;
	WebGLContext.SHADING_LANGUAGE_VERSION=0x8B8C;
	WebGLContext.CURRENT_PROGRAM=0x8B8D;
	WebGLContext.NEVER=0x0200;
	WebGLContext.LESS=0x0201;
	WebGLContext.EQUAL=0x0202;
	WebGLContext.LEQUAL=0x0203;
	WebGLContext.GREATER=0x0204;
	WebGLContext.NOTEQUAL=0x0205;
	WebGLContext.GEQUAL=0x0206;
	WebGLContext.ALWAYS=0x0207;
	WebGLContext.KEEP=0x1E00;
	WebGLContext.REPLACE=0x1E01;
	WebGLContext.INCR=0x1E02;
	WebGLContext.DECR=0x1E03;
	WebGLContext.INVERT=0x150A;
	WebGLContext.INCR_WRAP=0x8507;
	WebGLContext.DECR_WRAP=0x8508;
	WebGLContext.VENDOR=0x1F00;
	WebGLContext.RENDERER=0x1F01;
	WebGLContext.VERSION=0x1F02;
	WebGLContext.NEAREST=0x2600;
	WebGLContext.LINEAR=0x2601;
	WebGLContext.NEAREST_MIPMAP_NEAREST=0x2700;
	WebGLContext.LINEAR_MIPMAP_NEAREST=0x2701;
	WebGLContext.NEAREST_MIPMAP_LINEAR=0x2702;
	WebGLContext.LINEAR_MIPMAP_LINEAR=0x2703;
	WebGLContext.TEXTURE_MAG_FILTER=0x2800;
	WebGLContext.TEXTURE_MIN_FILTER=0x2801;
	WebGLContext.TEXTURE_WRAP_S=0x2802;
	WebGLContext.TEXTURE_WRAP_T=0x2803;
	WebGLContext.TEXTURE_2D=0x0DE1;
	WebGLContext.TEXTURE=0x1702;
	WebGLContext.TEXTURE_CUBE_MAP=0x8513;
	WebGLContext.TEXTURE_BINDING_CUBE_MAP=0x8514;
	WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_X=0x8515;
	WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_X=0x8516;
	WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Y=0x8517;
	WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Y=0x8518;
	WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Z=0x8519;
	WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Z=0x851A;
	WebGLContext.MAX_CUBE_MAP_TEXTURE_SIZE=0x851C;
	WebGLContext.TEXTURE0=0x84C0;
	WebGLContext.TEXTURE1=0x84C1;
	WebGLContext.TEXTURE2=0x84C2;
	WebGLContext.TEXTURE3=0x84C3;
	WebGLContext.TEXTURE4=0x84C4;
	WebGLContext.TEXTURE5=0x84C5;
	WebGLContext.TEXTURE6=0x84C6;
	WebGLContext.TEXTURE7=0x84C7;
	WebGLContext.TEXTURE8=0x84C8;
	WebGLContext.TEXTURE9=0x84C9;
	WebGLContext.TEXTURE10=0x84CA;
	WebGLContext.TEXTURE11=0x84CB;
	WebGLContext.TEXTURE12=0x84CC;
	WebGLContext.TEXTURE13=0x84CD;
	WebGLContext.TEXTURE14=0x84CE;
	WebGLContext.TEXTURE15=0x84CF;
	WebGLContext.TEXTURE16=0x84D0;
	WebGLContext.TEXTURE17=0x84D1;
	WebGLContext.TEXTURE18=0x84D2;
	WebGLContext.TEXTURE19=0x84D3;
	WebGLContext.TEXTURE20=0x84D4;
	WebGLContext.TEXTURE21=0x84D5;
	WebGLContext.TEXTURE22=0x84D6;
	WebGLContext.TEXTURE23=0x84D7;
	WebGLContext.TEXTURE24=0x84D8;
	WebGLContext.TEXTURE25=0x84D9;
	WebGLContext.TEXTURE26=0x84DA;
	WebGLContext.TEXTURE27=0x84DB;
	WebGLContext.TEXTURE28=0x84DC;
	WebGLContext.TEXTURE29=0x84DD;
	WebGLContext.TEXTURE30=0x84DE;
	WebGLContext.TEXTURE31=0x84DF;
	WebGLContext.ACTIVE_TEXTURE=0x84E0;
	WebGLContext.REPEAT=0x2901;
	WebGLContext.CLAMP_TO_EDGE=0x812F;
	WebGLContext.MIRRORED_REPEAT=0x8370;
	WebGLContext.FLOAT_VEC2=0x8B50;
	WebGLContext.FLOAT_VEC3=0x8B51;
	WebGLContext.FLOAT_VEC4=0x8B52;
	WebGLContext.INT_VEC2=0x8B53;
	WebGLContext.INT_VEC3=0x8B54;
	WebGLContext.INT_VEC4=0x8B55;
	WebGLContext.BOOL=0x8B56;
	WebGLContext.BOOL_VEC2=0x8B57;
	WebGLContext.BOOL_VEC3=0x8B58;
	WebGLContext.BOOL_VEC4=0x8B59;
	WebGLContext.FLOAT_MAT2=0x8B5A;
	WebGLContext.FLOAT_MAT3=0x8B5B;
	WebGLContext.FLOAT_MAT4=0x8B5C;
	WebGLContext.SAMPLER_2D=0x8B5E;
	WebGLContext.SAMPLER_CUBE=0x8B60;
	WebGLContext.VERTEX_ATTRIB_ARRAY_ENABLED=0x8622;
	WebGLContext.VERTEX_ATTRIB_ARRAY_SIZE=0x8623;
	WebGLContext.VERTEX_ATTRIB_ARRAY_STRIDE=0x8624;
	WebGLContext.VERTEX_ATTRIB_ARRAY_TYPE=0x8625;
	WebGLContext.VERTEX_ATTRIB_ARRAY_NORMALIZED=0x886A;
	WebGLContext.VERTEX_ATTRIB_ARRAY_POINTER=0x8645;
	WebGLContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=0x889F;
	WebGLContext.COMPILE_STATUS=0x8B81;
	WebGLContext.LOW_FLOAT=0x8DF0;
	WebGLContext.MEDIUM_FLOAT=0x8DF1;
	WebGLContext.HIGH_FLOAT=0x8DF2;
	WebGLContext.LOW_INT=0x8DF3;
	WebGLContext.MEDIUM_INT=0x8DF4;
	WebGLContext.HIGH_INT=0x8DF5;
	WebGLContext.FRAMEBUFFER=0x8D40;
	WebGLContext.RENDERBUFFER=0x8D41;
	WebGLContext.RGBA4=0x8056;
	WebGLContext.RGB5_A1=0x8057;
	WebGLContext.RGB565=0x8D62;
	WebGLContext.DEPTH_COMPONENT16=0x81A5;
	WebGLContext.STENCIL_INDEX=0x1901;
	WebGLContext.STENCIL_INDEX8=0x8D48;
	WebGLContext.DEPTH_STENCIL=0x84F9;
	WebGLContext.RENDERBUFFER_WIDTH=0x8D42;
	WebGLContext.RENDERBUFFER_HEIGHT=0x8D43;
	WebGLContext.RENDERBUFFER_INTERNAL_FORMAT=0x8D44;
	WebGLContext.RENDERBUFFER_RED_SIZE=0x8D50;
	WebGLContext.RENDERBUFFER_GREEN_SIZE=0x8D51;
	WebGLContext.RENDERBUFFER_BLUE_SIZE=0x8D52;
	WebGLContext.RENDERBUFFER_ALPHA_SIZE=0x8D53;
	WebGLContext.RENDERBUFFER_DEPTH_SIZE=0x8D54;
	WebGLContext.RENDERBUFFER_STENCIL_SIZE=0x8D55;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=0x8CD0;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=0x8CD1;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=0x8CD2;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=0x8CD3;
	WebGLContext.COLOR_ATTACHMENT0=0x8CE0;
	WebGLContext.DEPTH_ATTACHMENT=0x8D00;
	WebGLContext.STENCIL_ATTACHMENT=0x8D20;
	WebGLContext.DEPTH_STENCIL_ATTACHMENT=0x821A;
	WebGLContext.NONE=0;
	WebGLContext.FRAMEBUFFER_COMPLETE=0x8CD5;
	WebGLContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT=0x8CD6;
	WebGLContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=0x8CD7;
	WebGLContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS=0x8CD9;
	WebGLContext.FRAMEBUFFER_UNSUPPORTED=0x8CDD;
	WebGLContext.FRAMEBUFFER_BINDING=0x8CA6;
	WebGLContext.RENDERBUFFER_BINDING=0x8CA7;
	WebGLContext.MAX_RENDERBUFFER_SIZE=0x84E8;
	WebGLContext.INVALID_FRAMEBUFFER_OPERATION=0x0506;
	WebGLContext.UNPACK_FLIP_Y_WEBGL=0x9240;
	WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL=0x9241;
	WebGLContext.CONTEXT_LOST_WEBGL=0x9242;
	WebGLContext.UNPACK_COLORSPACE_CONVERSION_WEBGL=0x9243;
	WebGLContext.BROWSER_DEFAULT_WEBGL=0x9244;
	WebGLContext._useProgram=null;
	WebGLContext._depthTest=true;
	WebGLContext._depthMask=true;
	WebGLContext._blend=false;
	WebGLContext._cullFace=false;
	WebGLContext.curBindTexTarget=null;
	WebGLContext.curBindTexValue=null;
	__static(WebGLContext,
	['_depthFunc',function(){return this._depthFunc=/*CLASS CONST:laya.webgl.WebGLContext.LESS*/0x0201;},'_sFactor',function(){return this._sFactor=/*CLASS CONST:laya.webgl.WebGLContext.ONE*/1;},'_dFactor',function(){return this._dFactor=/*CLASS CONST:laya.webgl.WebGLContext.ZERO*/0;},'_frontFace',function(){return this._frontFace=/*CLASS CONST:laya.webgl.WebGLContext.CCW*/0x0901;}
	]);
	return WebGLContext;
})()


//class laya.webgl.display.GraphicsGL extends laya.display.Graphics
var GraphicsGL=(function(_super){
	function GraphicsGL(){
		GraphicsGL.__super.call(this);
	}

	__class(GraphicsGL,'laya.webgl.display.GraphicsGL',_super);
	var __proto=GraphicsGL.prototype;
	__proto.setShader=function(shader){
		this._saveToCmd(Render.context._setShader,[shader]);
	}

	__proto.setIBVB=function(x,y,ib,vb,numElement,shader){
		this._saveToCmd(Render.context._setIBVB,[x,y,ib,vb,numElement,shader]);
	}

	__proto.drawParticle=function(x,y,ps){
		var pt=RunDriver.createParticleTemplate2D(ps);
		pt.x=x;
		pt.y=y;
		this._saveToCmd(Render.context._drawParticle,[pt]);
	}

	return GraphicsGL;
})(Graphics)


//class laya.webgl.canvas.WebGLContext2D extends laya.resource.Context
var WebGLContext2D=(function(_super){
	var ContextParams;
	function WebGLContext2D(c){
		this._x=0;
		this._y=0;
		this._id=++WebGLContext2D._COUNT;
		//this._other=null;
		this._path=null;
		//this._primitiveValue2D=null;
		this._drawCount=1;
		this._maxNumEle=0;
		this._clear=false;
		this._isMain=false;
		this._atlasResourceChange=0;
		this._submits=null;
		this._curSubmit=null;
		this._ib=null;
		this._vb=null;
		//this._curMat=null;
		this._nBlendType=0;
		//this._save=null;
		//this._targets=null;
		//this._renderKey=NaN;
		this._saveMark=null;
		this._shader2D=null;
		//this._triangleMesh=null;
		//drawTriangles专用mesh。由于ib不固定，所以不能与_mesh通用
		this.meshlist=[];
		/**所cacheAs精灵*/
		//this.sprite=null;
		/*******************************************start矢量绘制***************************************************/
		this.mId=-1;
		this.mHaveKey=false;
		this.mHaveLineKey=false;
		this.mX=0;
		this.mY=0;
		WebGLContext2D.__super.call(this);
		this._width=99999999;
		this._height=99999999;
		this._clipRect=WebGLContext2D.MAXCLIPRECT;
		this.mOutPoint
		this._canvas=c;
		WebGLContext2D._contextcount++;
		if (Render.isFlash){
			this._ib=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
			GlUtils.fillIBQuadrangle(this._ib,16);
		}else
		this._ib=IndexBuffer2D.QuadrangleIB;
		this.clear();
	}

	__class(WebGLContext2D,'laya.webgl.canvas.WebGLContext2D',_super);
	var __proto=WebGLContext2D.prototype;
	__proto.setIsMainContext=function(){
		this._isMain=true;
	}

	__proto.clearBG=function(r,g,b,a){
		var gl=WebGL.mainContext;
		gl.clearColor(r,g,b,a);
		gl.clear(/*laya.webgl.WebGLContext.COLOR_BUFFER_BIT*/0x00004000);
	}

	__proto._getSubmits=function(){
		return this._submits;
	}

	__proto._releaseMem=function(){
		if (!this._submits)
			return;
		this._curMat.destroy();
		this._curMat=null;
		this._shader2D.destroy();
		this._shader2D=null;
		for (var i=0,n=this._submits._length;i < n;i++)
		this._submits[i].releaseRender();
		this._submits.length=0;
		this._submits._length=0;
		this._submits=null;
		this._curSubmit=null;
		this._path && this._path.recover();
		this._path=null;
		this._other && (this._other.font=null);
		this._save=null;
		if (this._vb){
			this._vb.releaseResource();
			this._vb.destroy();
			this._vb.destory();
			this._vb=null;
		}
	}

	__proto.destroy=function(){
		--WebGLContext2D._contextcount;
		this.sprite=null;
		this._releaseMem();
		this._targets && this._targets.destroy();
		this._targets=null;
		this._canvas=null;
		this._ib && (this._ib !=IndexBuffer2D.QuadrangleIB)&& this._ib.releaseResource();
	}

	__proto.clear=function(){
		if (!this._submits){
			this._other=ContextParams.DEFAULT;
			this._curMat=Matrix.create();
			this._vb=VertexBuffer2D.create(-1);
			this._submits=[];
			this._save=[SaveMark.Create(this)];
			this._save.length=10;
			this._shader2D=new Shader2D();
			this._triangleMesh=MeshTexture.getAMesh();
		}
		this._vb.clear();
		this._targets && (this._targets.repaint=true);
		this._other=ContextParams.DEFAULT;
		this._clear=true;
		this._repaint=false;
		this._drawCount=1;
		this._renderKey=0;
		this._other.lineWidth=this._shader2D.ALPHA=1.0;
		this._nBlendType=0;
		this._clipRect=WebGLContext2D.MAXCLIPRECT;
		this._curSubmit=Submit.RENDERBASE;
		this._shader2D.glTexture=null;
		this._shader2D.fillStyle=this._shader2D.strokeStyle=DrawStyle.DEFAULT;
		for (var i=0,n=this._submits._length;i < n;i++)
		this._submits[i].releaseRender();
		this._submits._length=0;
		this._curMat.identity();
		this._other.clear();
		this._saveMark=this._save[0];
		this._save._length=1;
	}

	__proto.size=function(w,h){
		if (this._width !=w || this._height !=h){
			if (w==0 || h==0){
				if (this._vb._byteLength !=0){
					this._width=w;
					this._height=h;
					this._vb.clear();
					this._vb.upload();
				}
				for (var i=0,n=this._submits._length;i < n;i++)
				this._submits[i].releaseRender();
				this._submits.length=0;
				this._submits._length=0;
				this._curSubmit=null;
				this._path && this._path.recover();
				this._path=null;
				this.sprite=null;
				this._targets && (this._targets.destroy());
				this._targets=null;
				}else {
				this._width=w;
				this._height=h;
				this._targets && (this._targets.size(w,h));
				this._canvas.memorySize-=this._canvas.memorySize;
			}
		}
		if (w===0 && h===0)this._releaseMem();
	}

	__proto._getTransformMatrix=function(){
		return this._curMat;
	}

	__proto.translate=function(x,y){
		if (x!==0 || y!==0){
			SaveTranslate.save(this);
			if (this._curMat.bTransform){
				SaveTransform.save(this);
				this._curMat.transformPointN(Point.TEMP.setTo(x,y));
				x=Point.TEMP.x;
				y=Point.TEMP.y;
			}
			this._x+=x;
			this._y+=y;
		}
	}

	__proto.save=function(){
		this._save[this._save._length++]=SaveMark.Create(this);
	}

	__proto.restore=function(){
		var sz=this._save._length;
		if (sz < 1)
			return;
		for (var i=sz-1;i >=0;i--){
			var o=this._save[i];
			o.restore(this);
			if (o.isSaveMark()){
				this._save._length=i;
				return;
			}
		}
	}

	__proto._fillText=function(txt,words,x,y,fontStr,color,strokeColor,lineWidth,textAlign,underLine){
		(underLine===void 0)&& (underLine=0);
		var shader=this._shader2D;
		var curShader=this._curSubmit.shaderValue;
		var font=fontStr ? FontInContext.create(fontStr):this._other.font;
		if (AtlasResourceManager.enabled){
			if (shader.ALPHA!==curShader.ALPHA)
				shader.glTexture=null;
			DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,strokeColor,lineWidth,x,y,underLine);
			}else {
			var preDef=this._shader2D.defines.getValue();
			var colorAdd=color ? Color.create(color)._color :shader.colorAdd;
			if (shader.ALPHA!==curShader.ALPHA || colorAdd!==shader.colorAdd || curShader.colorAdd!==shader.colorAdd){
				shader.glTexture=null;
				shader.colorAdd=colorAdd;
			}
			DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,strokeColor,lineWidth,x,y,underLine);
		}
	}

	//TODO:实现下划线
	__proto.fillWords=function(words,x,y,fontStr,color,underLine){
		this._fillText(null,words,x,y,fontStr,color,null,-1,null,underLine);
	}

	__proto.fillBorderWords=function(words,x,y,font,color,borderColor,lineWidth){
		this._fillBorderText(null,words,x,y,font,color,borderColor,lineWidth,null);
	}

	__proto.fillText=function(txt,x,y,fontStr,color,textAlign){
		this._fillText(txt,null,x,y,fontStr,color,null,-1,textAlign);
	}

	__proto.strokeText=function(txt,x,y,fontStr,color,lineWidth,textAlign){
		this._fillText(txt,null,x,y,fontStr,null,color,lineWidth || 1,textAlign);
	}

	__proto.fillBorderText=function(txt,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
		this._fillBorderText(txt,null,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign);
	}

	__proto._fillBorderText=function(txt,words,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
		if (!AtlasResourceManager.enabled){
			this._fillText(txt,words,x,y,fontStr,null,borderColor,lineWidth || 1,textAlign);
			this._fillText(txt,words,x,y,fontStr,fillColor,null,-1,textAlign);
			return;
		};
		var shader=this._shader2D;
		var curShader=this._curSubmit.shaderValue;
		if (shader.ALPHA!==curShader.ALPHA)
			shader.glTexture=null;
		var font=fontStr ? (WebGLContext2D._fontTemp.setFont(fontStr),WebGLContext2D._fontTemp):this._other.font;
		DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,fillColor,borderColor,lineWidth || 1,x,y,0);
	}

	__proto.fillRect=function(x,y,width,height,fillStyle){
		var vb=this._vb;
		if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,Texture.DEF_UV,this._curMat,this._x,this._y,0,0)){
			this._renderKey=0;
			var pre=this._shader2D.fillStyle;
			fillStyle && (this._shader2D.fillStyle=DrawStyle.create(fillStyle));
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			if (shader.fillStyle!==curShader.fillStyle || shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=null;
				var submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
				submit.shaderValue.color=shader.fillStyle._color._color;
				submit.shaderValue.ALPHA=shader.ALPHA;
				this._submits[this._submits._length++]=submit;
			}
			this._curSubmit._numEle+=6;
			this._shader2D.fillStyle=pre;
		}
	}

	__proto.fillTexture=function(texture,x,y,width,height,type,offset,other){
		if (!(texture.loaded && texture.bitmap && texture.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return;
		};
		var vb=this._vb;
		var w=texture.bitmap.width,h=texture.bitmap.height,uv=texture.uv;
		var ox=offset.x % texture.width,oy=offset.y % texture.height;
		if (w !=other.w || h !=other.h){
			if (!other.w && !other.h){
				other.oy=other.ox=0;
				switch (type){
					case "repeat":
						other.width=width;
						other.height=height;
						break ;
					case "repeat-x":
						other.width=width;
						if (oy < 0){
							if (texture.height+oy > height){
								other.height=height;
								}else {
								other.height=texture.height+oy;
							}
							}else {
							other.oy=oy;
							if (texture.height+oy > height){
								other.height=height-oy;
								}else {
								other.height=texture.height;
							}
						}
						break ;
					case "repeat-y":
						if (ox < 0){
							if (texture.width+ox > width){
								other.width=width;
								}else {
								other.width=texture.width+ox;
							}
							}else {
							other.ox=ox;
							if (texture.width+ox > width){
								other.width=width-ox;
								}else {
								other.width=texture.width;
							}
						}
						other.height=height;
						break ;
					case "no-repeat":
						if (ox < 0){
							if (texture.width+ox > width){
								other.width=width;
								}else {
								other.width=texture.width+ox;
							}
							}else {
							other.ox=ox;
							if (texture.width+ox > width){
								other.width=width-ox;
								}else {
								other.width=texture.width;
							}
						}
						if (oy < 0){
							if (texture.height+oy > height){
								other.height=height;
								}else {
								other.height=texture.height+oy;
							}
							}else {
							other.oy=oy;
							if (texture.height+oy > height){
								other.height=height-oy;
								}else {
								other.height=texture.height;
							}
						}
						break ;
					default :
						other.width=width;
						other.height=height;
						break ;
					}
			}
			other.w=w;
			other.h=h;
			other.uv=[0,0,other.width / w,0,other.width / w,other.height / h,0,other.height / h];
		}
		x+=other.ox;
		y+=other.oy;
		ox-=other.ox;
		oy-=other.oy;
		if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,other.width,other.height,other.uv,this._curMat,this._x,this._y,0,0)){
			this._renderKey=0;
			var submit=SubmitTexture.create(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,0));
			this._submits[this._submits._length++]=submit;
			var shaderValue=submit.shaderValue;
			shaderValue.textureHost=texture;
			var tTextureX=uv[0] *w;
			var tTextureY=uv[1] *h;
			var tTextureW=(uv[2]-uv[0])*w;
			var tTextureH=(uv[5]-uv[3])*h;
			var tx=-ox / w;
			var ty=-oy / h;
			shaderValue.u_TexRange[0]=tTextureX / w;
			shaderValue.u_TexRange[1]=tTextureW / w;
			shaderValue.u_TexRange[2]=tTextureY / h;
			shaderValue.u_TexRange[3]=tTextureH / h;
			shaderValue.u_offset[0]=tx;
			shaderValue.u_offset[1]=ty;
			if (AtlasResourceManager.enabled && !this._isMain)
				submit.addTexture(texture,(vb._byteLength >> 2)-/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
			this._curSubmit=submit;
			submit._renderType=/*laya.webgl.submit.Submit.TYPE_FILLTEXTURE*/10017;
			submit._numEle+=6;
		}
	}

	__proto.setShader=function(shader){
		SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_SHADER*/0x100000,this._shader2D,true);
		this._shader2D.shader=shader;
	}

	__proto.setFilters=function(value){
		SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_FILTERS*/0x200000,this._shader2D,true);
		this._shader2D.filters=value;
		this._curSubmit=Submit.RENDERBASE;
		this._renderKey=0;
		this._drawCount++;
	}

	__proto.drawTexture=function(tex,x,y,width,height,tx,ty){
		this._drawTextureM(tex,x,y,width,height,tx,ty,null,1);
	}

	__proto.addTextureVb=function(invb,x,y){
		var finalVB=this._curSubmit._vb || this._vb;
		var vpos=(finalVB._byteLength >> 2);
		finalVB.byteLength=((vpos+/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16)<< 2);
		var vbdata=finalVB.getFloat32Array();
		for (var i=0,ci=0;i < 16;i+=4){
			vbdata[vpos++]=invb[i]+x;
			vbdata[vpos++]=invb[i+1]+y;
			vbdata[vpos++]=invb[i+2];
			vbdata[vpos++]=invb[i+3];
		}
		this._curSubmit._numEle+=6;
		this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
		finalVB._upload=true;
	}

	__proto.willDrawTexture=function(tex,alpha){
		if (!(tex.loaded && tex.bitmap && tex.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return 0;
		};
		var webGLImg=tex.bitmap;
		var rid=webGLImg.id+this._shader2D.ALPHA *alpha+/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
		if (rid==this._renderKey)return rid;
		var shader=this._shader2D;
		var preAlpha=shader.ALPHA;
		var curShader=this._curSubmit.shaderValue;
		shader.ALPHA *=alpha;
		this._renderKey=rid;
		this._drawCount++;
		shader.glTexture=webGLImg;
		var vb=this._vb;
		var submit=null;
		var vbSize=(vb._byteLength / 32)*3;
		submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
		this._submits[this._submits._length++]=submit;
		submit.shaderValue.textureHost=tex;
		submit._renderType=/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
		submit._preIsSameTextureShader=this._curSubmit._renderType===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016 && shader.ALPHA===curShader.ALPHA;
		this._curSubmit=submit;
		shader.ALPHA=preAlpha;
		return rid;
	}

	__proto.drawTextures=function(tex,pos,tx,ty){
		if (!(tex.loaded && tex.bitmap && tex.source)){
			this.sprite && Laya.timer.callLater(this,this._repaintSprite);
			return;
		};
		var pre=this._clipRect;
		this._clipRect=WebGLContext2D.MAXCLIPRECT;
		if (!this._drawTextureM(tex,pos[0],pos[1],tex.width,tex.height,tx,ty,null,1)){
			alert("drawTextures err");
			return;
		}
		this._clipRect=pre;
		Stat.drawCall++;
		if (pos.length < 4)
			return;
		var finalVB=this._curSubmit._vb || this._vb;
		var sx=this._curMat.a,sy=this._curMat.d;
		for (var i=2,sz=pos.length;i < sz;i+=2){
			GlUtils.copyPreImgVb(finalVB,(pos[i]-pos[i-2])*sx,(pos[i+1]-pos[i-1])*sy);
			this._curSubmit._numEle+=6;
		}
		this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
	}

	__proto._drawTextureM=function(tex,x,y,width,height,tx,ty,m,alpha){
		if (!(tex.loaded && tex.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return false;
		};
		var finalVB=this._curSubmit._vb || this._vb;
		var webGLImg=tex.bitmap;
		x+=tx;
		y+=ty;
		this._drawCount++;
		var rid=webGLImg.id+this._shader2D.ALPHA *alpha+/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
		if (rid !=this._renderKey){
			this._renderKey=rid;
			var curShader=this._curSubmit.shaderValue;
			var shader=this._shader2D;
			var alphaBack=shader.ALPHA;
			shader.ALPHA *=alpha;
			shader.glTexture=webGLImg;
			var vb=this._vb;
			var submit=null;
			var vbSize=(vb._byteLength / 32)*3;
			submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
			this._submits[this._submits._length++]=submit;
			submit.shaderValue.textureHost=tex;
			submit._renderType=/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
			submit._preIsSameTextureShader=this._curSubmit._renderType===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016 && shader.ALPHA===curShader.ALPHA;
			this._curSubmit=submit;
			finalVB=this._curSubmit._vb || this._vb;
			shader.ALPHA=alphaBack;
		}
		if (GlUtils.fillRectImgVb(finalVB,this._clipRect,x,y,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,0,0)){
			if (AtlasResourceManager.enabled && !this._isMain)
				(this._curSubmit).addTexture(tex,(finalVB._byteLength >> 2)-/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
			this._curSubmit._numEle+=6;
			this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
			return true;
		}
		return false;
	}

	__proto._repaintSprite=function(){
		if(this.sprite)
			this.sprite.repaint();
	}

	//}
	__proto._drawText=function(tex,x,y,width,height,m,tx,ty,dx,dy){
		var webGLImg=tex.bitmap;
		this._drawCount++;
		var rid=webGLImg.id+this._shader2D.ALPHA+/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
		if (rid !=this._renderKey){
			this._renderKey=rid;
			var curShader=this._curSubmit.shaderValue;
			var shader=this._shader2D;
			shader.glTexture=webGLImg;
			var vb=this._vb;
			var submit=null;
			var submitID=NaN;
			var vbSize=(vb._byteLength / 32)*3;
			if (AtlasResourceManager.enabled){
				submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
				}else {
				submit=SubmitTexture.create(this,this._ib,vb,vbSize,TextSV.create());
			}
			submit._preIsSameTextureShader=this._curSubmit._renderType===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016 && shader.ALPHA===curShader.ALPHA;
			this._submits[this._submits._length++]=submit;
			submit.shaderValue.textureHost=tex;
			submit._renderType=/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
			this._curSubmit=submit;
		}
		tex.active();
		var finalVB=this._curSubmit._vb || this._vb;
		if (GlUtils.fillRectImgVb(finalVB,this._clipRect,x+tx,y+ty,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,dx,dy,true)){
			if (AtlasResourceManager.enabled && !this._isMain){
				(this._curSubmit).addTexture(tex,(finalVB._byteLength >> 2)-/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
			}
			this._curSubmit._numEle+=6;
			this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
		}
	}

	__proto.drawTextureWithTransform=function(tex,x,y,width,height,transform,tx,ty,alpha){
		if (!transform){
			this._drawTextureM(tex,x,y,width,height,tx,ty,null,alpha);
			return;
		};
		var curMat=this._curMat;
		var prex=this._x;
		var prey=this._y;
		(tx!==0 || ty!==0)&& (this._x=tx *curMat.a+ty *curMat.c,this._y=ty *curMat.d+tx *curMat.b);
		if (transform && curMat.bTransform){
			Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
			transform=WebGLContext2D._tmpMatrix;
			transform._checkTransform();
			}else {
			this._x+=curMat.tx;
			this._y+=curMat.ty;
		}
		this._drawTextureM(tex,x,y,width,height,0,0,transform,alpha);
		this._x=prex;
		this._y=prey;
	}

	__proto.fillQuadrangle=function(tex,x,y,point4,m){
		var submit=this._curSubmit;
		var vb=this._vb;
		var shader=this._shader2D;
		var curShader=submit.shaderValue;
		this._renderKey=0;
		if (tex.bitmap){
			var t_tex=tex.bitmap;
			if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=t_tex;
				submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
				submit.shaderValue.glTexture=t_tex;
				this._submits[this._submits._length++]=submit;
			}
			GlUtils.fillQuadrangleImgVb(vb,x,y,point4,tex.uv,m || this._curMat,this._x,this._y);
			}else {
			if (!submit.shaderValue.fillStyle || !submit.shaderValue.fillStyle.equal(tex)|| shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=null;
				submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
				submit.shaderValue.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02);
				submit.shaderValue.fillStyle=DrawStyle.create(tex);
				this._submits[this._submits._length++]=submit;
			}
			GlUtils.fillQuadrangleImgVb(vb,x,y,point4,Texture.DEF_UV,m || this._curMat,this._x,this._y);
		}
		submit._numEle+=6;
	}

	__proto.drawTexture2=function(x,y,pivotX,pivotY,transform,alpha,blendMode,args){
		if (alpha==0)return;
		var curMat=this._curMat;
		this._x=x *curMat.a+y *curMat.c;
		this._y=y *curMat.d+x *curMat.b;
		if (transform){
			if (curMat.bTransform || transform.bTransform){
				Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
				transform=WebGLContext2D._tmpMatrix;
				}else {
				this._x+=transform.tx+curMat.tx;
				this._y+=transform.ty+curMat.ty;
				transform=Matrix.EMPTY;
			}
		}
		if (alpha===1 && !blendMode)
			this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform,1);
		else {
			var preAlpha=this._shader2D.ALPHA;
			var preblendType=this._nBlendType;
			this._shader2D.ALPHA=alpha;
			blendMode && (this._nBlendType=BlendMode.TOINT(blendMode));
			this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform,1);
			this._shader2D.ALPHA=preAlpha;
			this._nBlendType=preblendType;
		}
		this._x=this._y=0;
	}

	__proto.drawCanvas=function(canvas,x,y,width,height){
		var src=canvas.context;
		this._renderKey=0;
		if (src._targets){
			this._submits[this._submits._length++]=SubmitCanvas.create(src,0,null);
			this._curSubmit=Submit.RENDERBASE;
			src._targets.drawTo(this,x,y,width,height);
			}else {
			var submit=this._submits[this._submits._length++]=SubmitCanvas.create(src,this._shader2D.ALPHA,this._shader2D.filters);
			var sx=width / canvas.width;
			var sy=height / canvas.height;
			var mat=submit._matrix;
			this._curMat.copyTo(mat);
			sx !=1 && sy !=1 && mat.scale(sx,sy);
			var tx=mat.tx,ty=mat.ty;
			mat.tx=mat.ty=0;
			mat.transformPoint(Point.TEMP.setTo(x,y));
			mat.translate(Point.TEMP.x+tx,Point.TEMP.y+ty);
			this._curSubmit=Submit.RENDERBASE;
		}
		if (Config.showCanvasMark){
			this.save();
			this.lineWidth=4;
			this.strokeStyle=src._targets ? "yellow" :"green";
			this.strokeRect(x-1,y-1,width+2,height+2,1);
			this.strokeRect(x,y,width,height,1);
			this.restore();
		}
	}

	__proto.drawTarget=function(scope,x,y,width,height,m,proName,shaderValue,uv,blend){
		(blend===void 0)&& (blend=-1);
		var vb=this._vb;
		if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,uv || Texture.DEF_UV,m || this._curMat,this._x,this._y,0,0)){
			this._renderKey=0;
			var shader=this._shader2D;
			shader.glTexture=null;
			var curShader=this._curSubmit.shaderValue;
			var submit=this._curSubmit=SubmitTarget.create(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,shaderValue,proName);
			if (blend==-1){
				submit.blendType=this._nBlendType;
				}else {
				submit.blendType=blend;
			}
			submit.scope=scope;
			this._submits[this._submits._length++]=submit;
			this._curSubmit._numEle+=6;
		}
	}

	/**
	*把颜色跟当前设置的alpha混合
	*@return
	*/
	__proto.mixRGBandAlpha=function(color){
		return this._mixRGBandAlpha(color,this._shader2D.ALPHA);
	}

	__proto._mixRGBandAlpha=function(color,alpha){
		var a=((color & 0xff000000)>>> 24);
		if (a !=0){
			a*=alpha;
			}else {
			a=alpha*255;
		}
		return (color & 0x00ffffff)| (a << 24);
	}

	__proto.drawTriangles=function(tex,x,y,vertices,uvs,indices,matrix,alpha,color,blendMode){
		if (!(tex.loaded && tex.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return false;
		}
		this._drawCount++;
		var webGLImg=tex.bitmap;
		var rgba=this._mixRGBandAlpha(0xffffffff,alpha);
		var vertNum=vertices.length / 2;
		var eleNum=indices.length;
		this._renderKey=-1;
		var submit=this._curSubmit=SubmitTexture.create(this,this._triangleMesh.getIBR(),this._triangleMesh.getVBR(),this._triangleMesh.indexNum,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
		submit.shaderValue.textureHost=tex;
		submit._renderType=/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
		this._submits[this._submits._length++]=submit;
		if(matrix){
			WebGLContext2D._tmpMatrix.a=matrix.a;WebGLContext2D._tmpMatrix.b=matrix.b;WebGLContext2D._tmpMatrix.c=matrix.c;WebGLContext2D._tmpMatrix.d=matrix.d;WebGLContext2D._tmpMatrix.tx=matrix.tx+x;WebGLContext2D._tmpMatrix.ty=matrix.ty+y;
			Matrix.mul(WebGLContext2D._tmpMatrix,this._curMat,WebGLContext2D._tmpMatrix);
			}else {
			WebGLContext2D._tmpMatrix.a=this._curMat.a;WebGLContext2D._tmpMatrix.b=this._curMat.b;WebGLContext2D._tmpMatrix.c=this._curMat.c;WebGLContext2D._tmpMatrix.d=this._curMat.d;WebGLContext2D._tmpMatrix.tx=this._curMat.tx+x;WebGLContext2D._tmpMatrix.ty=this._curMat.ty+y;
		}
		this._triangleMesh.addData(vertices,uvs,indices,WebGLContext2D._tmpMatrix,rgba,this);
		this._curSubmit._numEle+=eleNum;
		this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
		return true;
	}

	__proto.transform=function(a,b,c,d,tx,ty){
		SaveTransform.save(this);
		Matrix.mul(Matrix.TEMP.setTo(a,b,c,d,tx,ty),this._curMat,this._curMat);
		this._curMat._checkTransform();
	}

	__proto.setTransformByMatrix=function(value){
		value.copyTo(this._curMat);
	}

	__proto.transformByMatrix=function(value){
		SaveTransform.save(this);
		Matrix.mul(value,this._curMat,this._curMat);
		this._curMat._checkTransform();
	}

	__proto.rotate=function(angle){
		SaveTransform.save(this);
		this._curMat.rotateEx(angle);
	}

	__proto.scale=function(scaleX,scaleY){
		SaveTransform.save(this);
		this._curMat.scaleEx(scaleX,scaleY);
	}

	__proto.clipRect=function(x,y,width,height){
		if (this._curMat.b !=0 || this._curMat.c !=0){
			this._renderKey=0;
			var submitStencil0=SubmitStencil.create(4);
			this.addRenderObject(submitStencil0);
			var vb=this._vb;
			var nPos=(vb._byteLength >> 2);
			if (GlUtils.fillRectImgVb(vb,null,x,y,width,height,Texture.DEF_UV,this._curMat,this._x,this._y,0,0)){
				var shader=this._shader2D;
				shader.glTexture=null;
				var submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
				submit.shaderValue.ALPHA=1.0;
				this._submits[this._submits._length++]=submit;
				this._curSubmit._numEle+=6;
				}else {
				alert("clipRect calc stencil rect error");
			};
			var submitStencil1=SubmitStencil.create(5);
			this.addRenderObject(submitStencil1);
			var vbdata=vb.getFloat32Array();
			var minx=Math.min(Math.min(Math.min(vbdata[nPos+0],vbdata[nPos+4]),vbdata[nPos+8]),vbdata[nPos+12]);
			var maxx=Math.max(Math.max(Math.max(vbdata[nPos+0],vbdata[nPos+4]),vbdata[nPos+8]),vbdata[nPos+12]);
			var miny=Math.min(Math.min(Math.min(vbdata[nPos+1],vbdata[nPos+5]),vbdata[nPos+9]),vbdata[nPos+13]);
			var maxy=Math.max(Math.max(Math.max(vbdata[nPos+1],vbdata[nPos+5]),vbdata[nPos+9]),vbdata[nPos+13]);
			SaveClipRectStencil.save(this,submitStencil1,x,y,width,height,minx,miny,maxx-minx,maxy-miny);
			this._curSubmit=Submit.RENDERBASE;
			}else {
			width *=this._curMat.a;
			height *=this._curMat.d;
			var p=Point.TEMP;
			this._curMat.transformPoint(p.setTo(x,y));
			if (width < 0){
				p.x=p.x+width;
				width=-width;
			}
			if (height < 0){
				p.y=p.y+height;
				height=-height;
			}
			this._renderKey=0;
			var submitSc=this._curSubmit=SubmitScissor.create(this);
			this._submits[this._submits._length++]=submitSc;
			submitSc.submitIndex=this._submits._length;
			submitSc.submitLength=9999999;
			SaveClipRect.save(this,submitSc);
			var clip=this._clipRect;
			var x1=clip.x,y1=clip.y;
			var r=p.x+width,b=p.y+height;
			x1 < p.x && (clip.x=p.x);
			y1 < p.y && (clip.y=p.y);
			clip.width=Math.min(r,x1+clip.width)-clip.x;
			clip.height=Math.min(b,y1+clip.height)-clip.y;
			this._shader2D.glTexture=null;
			submitSc.clipRect.copyFrom(clip);
			this._curSubmit=Submit.RENDERBASE;
		}
	}

	__proto.setIBVB=function(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset,type){
		(startIndex===void 0)&& (startIndex=0);
		(offset===void 0)&& (offset=0);
		(type===void 0)&& (type=0);
		if (ib===null){
			if (!Render.isFlash){
				ib=this._ib;
				}else {
				var falshVB=vb;
				(falshVB._selfIB)|| (falshVB._selfIB=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4));
				falshVB._selfIB.clear();
				ib=falshVB._selfIB;
			}
			GlUtils.expandIBQuadrangle(ib,(vb._byteLength / (/*laya.webgl.utils.Buffer2D.FLOAT32*/4 *vb.vertexStride *4)));
		}
		if (!shaderValues || !shader)
			throw Error("setIBVB must input:shader shaderValues");
		var submit=SubmitOtherIBVB.create(this,vb,ib,numElement,shader,shaderValues,startIndex,offset,type);
		mat || (mat=Matrix.EMPTY);
		mat.translate(x,y);
		Matrix.mul(mat,this._curMat,submit._mat);
		mat.translate(-x,-y);
		this._submits[this._submits._length++]=submit;
		this._curSubmit=Submit.RENDERBASE;
		this._renderKey=0;
	}

	__proto.addRenderObject=function(o){
		this._submits[this._submits._length++]=o;
	}

	__proto.fillTrangles=function(tex,x,y,points,m){
		var submit=this._curSubmit;
		var vb=this._vb;
		var shader=this._shader2D;
		var curShader=submit.shaderValue;
		var length=points.length >> 4;
		var t_tex=tex.bitmap;
		this._renderKey=0;
		if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
			submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
			submit.shaderValue.textureHost=tex;
			this._submits[this._submits._length++]=submit;
		}
		GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,this._x,this._y);
		submit._numEle+=length *6;
	}

	__proto.submitElement=function(start,end){
		var renderList=this._submits;
		end < 0 && (end=renderList._length);
		while (start < end){
			start+=renderList[start].renderSubmit();
		}
	}

	__proto.finish=function(){
		WebGL.mainContext.finish();
	}

	__proto.flush=function(){
		var maxNum=Math.max(this._vb._byteLength / (/*laya.webgl.utils.Buffer2D.FLOAT32*/4 *16),this._maxNumEle / 6)+8;
		if (maxNum > (this._ib.bufferLength / (6 */*laya.webgl.utils.Buffer2D.SHORT*/2))){
			GlUtils.expandIBQuadrangle(this._ib,maxNum);
		}
		if (!this._isMain && AtlasResourceManager.enabled && AtlasResourceManager._atlasRestore > this._atlasResourceChange){
			this._atlasResourceChange=AtlasResourceManager._atlasRestore;
			var renderList=this._submits;
			for (var i=0,s=renderList._length;i < s;i++){
				var submit=renderList [i];
				if (submit.getRenderType()===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016)
					(submit).checkTexture();
			}
		}
		this.submitElement(0,this._submits._length);
		this._path && this._path.reset();
		SkinMeshBuffer.instance && SkinMeshBuffer.getInstance().reset();
		var sz=0;
		for (i=0,sz=this.meshlist.length;i < sz;i++){
			var curm=this.meshlist[i];
			curm.canReuse?(curm.releaseMesh()):(curm.destroy());
		}
		this.meshlist.length=0;
		this._curSubmit=Submit.RENDERBASE;
		this._renderKey=0;
		this._triangleMesh=MeshTexture.getAMesh();
		this.meshlist.push(this._triangleMesh);
		return this._submits._length;
	}

	__proto.setPathId=function(id){
		this.mId=id;
		if (this.mId !=-1){
			this.mHaveKey=false;
			var tVGM=VectorGraphManager.getInstance();
			if (tVGM.shapeDic[this.mId]){
				this.mHaveKey=true;
			}
			this.mHaveLineKey=false;
			if (tVGM.shapeLineDic[this.mId]){
				this.mHaveLineKey=true;
			}
		}
	}

	__proto.movePath=function(x,y){
		var _x1=x,_y1=y;
		x=this._curMat.a *_x1+this._curMat.c *_y1+this._curMat.tx;
		y=this._curMat.b *_x1+this._curMat.d *_y1+this._curMat.ty;
		this.mX+=x;
		this.mY+=y;
	}

	__proto.beginPath=function(){
		var tPath=this._getPath();
		tPath.tempArray.length=0;
		tPath.closePath=false;
		this.mX=0;
		this.mY=0;
	}

	__proto.closePath=function(){
		this._path.closePath=true;
	}

	__proto.fill=function(isConvexPolygon){
		(isConvexPolygon===void 0)&& (isConvexPolygon=false);
		var tPath=this._getPath();
		this.drawPoly(0,0,tPath.tempArray,this.fillStyle._color.numColor,0,0,isConvexPolygon);
	}

	__proto.stroke=function(){
		var tPath=this._getPath();
		if (this.lineWidth > 0){
			if (this.mId==-1){
				tPath.drawLine(0,0,tPath.tempArray,this.lineWidth,this.strokeStyle._color.numColor);
				}else {
				if (this.mHaveLineKey){
					var tShapeLine=VectorGraphManager.getInstance().shapeLineDic[this.mId];
					tShapeLine.rebuild(tPath.tempArray);
					tPath.setGeomtry(tShapeLine);
					}else {
					VectorGraphManager.getInstance().addLine(this.mId,tPath.drawLine(0,0,tPath.tempArray,this.lineWidth,this.strokeStyle._color.numColor));
				}
			}
			tPath.update();
			var tPosArray=[this.mX,this.mY];
			var tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
			tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
			(tempSubmit.shaderValue).u_pos=tPosArray;
			tempSubmit.shaderValue.u_mmat2=RenderState2D.TEMPMAT4_ARRAY;
			this._submits[this._submits._length++]=tempSubmit;
			this._renderKey=-1;
		}
	}

	__proto.line=function(fromX,fromY,toX,toY,lineWidth,mat){
		var submit=this._curSubmit;
		var vb=this._vb;
		if (GlUtils.fillLineVb(vb,this._clipRect,fromX,fromY,toX,toY,lineWidth,mat)){
			this._renderKey=0;
			var shader=this._shader2D;
			var curShader=submit.shaderValue;
			if (shader.strokeStyle!==curShader.strokeStyle || shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=null;
				submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
				submit.shaderValue.strokeStyle=shader.strokeStyle;
				submit.shaderValue.mainID=/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02;
				submit.shaderValue.ALPHA=shader.ALPHA;
				this._submits[this._submits._length++]=submit;
			}
			submit._numEle+=6;
		}
	}

	__proto.moveTo=function(x,y,b){
		(b===void 0)&& (b=true);
		var tPath=this._getPath();
		if (b){
			var _x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
		}
		tPath.addPoint(x,y);
	}

	__proto.lineTo=function(x,y,b){
		(b===void 0)&& (b=true);
		var tPath=this._getPath();
		if (b){
			var _x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
		}
		tPath.addPoint(x,y);
	}

	__proto.drawCurves=function(x,y,args){
		this.setPathId(-1);
		this.beginPath();
		this.strokeStyle=args[3];
		this.lineWidth=args[4];
		var points=args[2];
		x+=args[0],y+=args[1];
		this.movePath(x,y);
		this.moveTo(points[0],points[1]);
		var i=2,n=points.length;
		while (i < n){
			this.quadraticCurveTo(points[i++],points[i++],points[i++],points[i++]);
		}
		this.stroke();
	}

	__proto.arcTo=function(x1,y1,x2,y2,r){
		if (this.mId !=-1){
			if (this.mHaveKey){
				return;
			}
		};
		var i=0;
		var x=0,y=0;
		var tPath=this._getPath();
		this._curMat.copyTo(WebGLContext2D._tmpMatrix);
		WebGLContext2D._tmpMatrix.tx=WebGLContext2D._tmpMatrix.ty=0;
		WebGLContext2D._tempPoint.setTo(tPath.getEndPointX(),tPath.getEndPointY());
		WebGLContext2D._tmpMatrix.invertTransformPoint(WebGLContext2D._tempPoint);
		var dx=WebGLContext2D._tempPoint.x-x1;
		var dy=WebGLContext2D._tempPoint.y-y1;
		var len1=Math.sqrt(dx*dx+dy*dy);
		if (len1 <=0.000001){
			return;
		};
		var ndx=dx / len1;
		var ndy=dy / len1;
		var dx2=x2-x1;
		var dy2=y2-y1;
		var len22=dx2*dx2+dy2*dy2;
		var len2=Math.sqrt(len22);
		if (len2 <=0.000001){
			return;
		};
		var ndx2=dx2 / len2;
		var ndy2=dy2 / len2;
		var odx=ndx+ndx2;
		var ody=ndy+ndy2;
		var olen=Math.sqrt(odx*odx+ody*ody);
		if (olen <=0.000001){
			return;
		};
		var nOdx=odx / olen;
		var nOdy=ody / olen;
		var alpha=Math.acos(nOdx*ndx+nOdy*ndy);
		var halfAng=Math.PI / 2-alpha;
		len1=r / Math.tan(halfAng);
		var ptx1=len1*ndx+x1;
		var pty1=len1*ndy+y1;
		var orilen=Math.sqrt(len1*len1+r*r);
		var orix=x1+nOdx*orilen;
		var oriy=y1+nOdy*orilen;
		var ptx2=len1*ndx2+x1;
		var pty2=len1*ndy2+y1;
		var dir=ndx *ndy2-ndy *ndx2;
		var fChgAng=0;
		var sinx=0.0;
		var cosx=0.0;
		if (dir >=0){
			fChgAng=halfAng *2;
			var fda=fChgAng / WebGLContext2D.SEGNUM;
			sinx=Math.sin(fda);
			cosx=Math.cos(fda);
		}
		else {
			fChgAng=-halfAng *2;
			fda=fChgAng / WebGLContext2D.SEGNUM;
			sinx=Math.sin(fda);
			cosx=Math.cos(fda);
		}
		x=this._curMat.a *ptx1+this._curMat.c *pty1;
		y=this._curMat.b *ptx1+this._curMat.d *pty1;
		if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
			tPath.addPoint(x,y);
		};
		var cvx=ptx1-orix;
		var cvy=pty1-oriy;
		var tx=0.0;
		var ty=0.0;
		for (i=0;i < WebGLContext2D.SEGNUM;i++){
			var cx=cvx*cosx+cvy*sinx;
			var cy=-cvx*sinx+cvy*cosx;
			x=cx+orix;
			y=cy+oriy;
			x1=this._curMat.a *x+this._curMat.c *y;
			y1=this._curMat.b *x+this._curMat.d *y;
			x=x1;
			y=y1;
			if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
				tPath.addPoint(x,y);
			}
			cvx=cx;
			cvy=cy;
		}
	}

	__proto.arc=function(cx,cy,r,startAngle,endAngle,counterclockwise,b){
		(counterclockwise===void 0)&& (counterclockwise=false);
		(b===void 0)&& (b=true);
		if (this.mId !=-1){
			var tShape=VectorGraphManager.getInstance().shapeDic[this.mId];
			if (tShape){
				if (this.mHaveKey && !tShape.needUpdate(this._curMat))
					return;
			}
			cx=0;
			cy=0;
		};
		var a=0,da=0,hda=0,kappa=0;
		var dx=0,dy=0,x=0,y=0,tanx=0,tany=0;
		var px=0,py=0,ptanx=0,ptany=0;
		var i=0,ndivs=0,nvals=0;
		da=endAngle-startAngle;
		if (!counterclockwise){
			if (Math.abs(da)>=Math.PI *2){
				da=Math.PI *2;
				}else {
				while (da < 0.0){
					da+=Math.PI *2;
				}
			}
			}else {
			if (Math.abs(da)>=Math.PI *2){
				da=-Math.PI *2;
				}else {
				while (da > 0.0){
					da-=Math.PI *2;
				}
			}
		}
		if (r < 101){
			ndivs=Math.max(10,da *r / 5);
			}else if (r < 201){
			ndivs=Math.max(10,da *r / 20);
			}else {
			ndivs=Math.max(10,da *r / 40);
		}
		hda=(da / ndivs)/ 2.0;
		kappa=Math.abs(4 / 3 *(1-Math.cos(hda))/ Math.sin(hda));
		if (counterclockwise)
			kappa=-kappa;
		nvals=0;
		var tPath=this._getPath();
		var _x1=NaN,_y1=NaN;
		for (i=0;i <=ndivs;i++){
			a=startAngle+da *(i / ndivs);
			dx=Math.cos(a);
			dy=Math.sin(a);
			x=cx+dx *r;
			y=cy+dy *r;
			if (b){
				_x1=x,_y1=y;
				x=this._curMat.a *_x1+this._curMat.c *_y1;
				y=this._curMat.b *_x1+this._curMat.d *_y1;
			}
			if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
				tPath.addPoint(x,y);
			}
		}
		dx=Math.cos(endAngle);
		dy=Math.sin(endAngle);
		x=cx+dx *r;
		y=cy+dy *r;
		if (b){
			_x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
		}
		if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
			tPath.addPoint(x,y);
		}
	}

	__proto.quadraticCurveTo=function(cpx,cpy,x,y){
		var tBezier=Bezier.I;
		var tResultArray=[];
		var _x1=x,_y1=y;
		x=this._curMat.a *_x1+this._curMat.c *_y1;
		y=this._curMat.b *_x1+this._curMat.d *_y1;
		_x1=cpx,_y1=cpy;
		cpx=this._curMat.a *_x1+this._curMat.c *_y1;
		cpy=this._curMat.b *_x1+this._curMat.d *_y1;
		var tArray=tBezier.getBezierPoints([this._path.getEndPointX(),this._path.getEndPointY(),cpx,cpy,x,y],30,2);
		for (var i=0,n=tArray.length / 2;i < n;i++){
			this.lineTo(tArray[i *2],tArray[i *2+1],false);
		}
		this.lineTo(x,y,false);
	}

	__proto.rect=function(x,y,width,height){
		this._other=this._other.make();
		this._other.path || (this._other.path=new Path());
		this._other.path.rect(x,y,width,height);
	}

	__proto.strokeRect=function(x,y,width,height,parameterLineWidth){
		var tW=parameterLineWidth *0.5;
		this.line(x-tW,y,x+width+tW,y,parameterLineWidth,this._curMat);
		this.line(x+width,y,x+width,y+height,parameterLineWidth,this._curMat);
		this.line(x,y,x,y+height,parameterLineWidth,this._curMat);
		this.line(x-tW,y+height,x+width+tW,y+height,parameterLineWidth,this._curMat);
	}

	__proto.clip=function(){}
	/**
	*画多边形(用)
	*@param x
	*@param y
	*@param points
	*/
	__proto.drawPoly=function(x,y,points,color,lineWidth,boderColor,isConvexPolygon){
		(isConvexPolygon===void 0)&& (isConvexPolygon=false);
		this._renderKey=0;
		this._shader2D.glTexture=null;
		var tPath=this._getPath();
		if (this.mId==-1){
			tPath.polygon(x,y,points,color,lineWidth ? lineWidth :1,boderColor)
			}else {
			if (this.mHaveKey){
				var tShape=VectorGraphManager.getInstance().shapeDic[this.mId];
				tShape.setMatrix(this._curMat);
				tShape.rebuild(tPath.tempArray);
				tPath.setGeomtry(tShape);
				}else {
				var t=tPath.polygon(x,y,points,color,lineWidth ? lineWidth :1,boderColor);
				VectorGraphManager.getInstance().addShape(this.mId,t);
				t.setMatrix(this._curMat);
			}
		}
		tPath.update();
		var tPosArray=[this.mX,this.mY];
		var tempSubmit;
		tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
		tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
		(tempSubmit.shaderValue).u_pos=tPosArray;
		tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
		this._submits[this._submits._length++]=tempSubmit;
		if (lineWidth > 0){
			if (this.mHaveLineKey){
				var tShapeLine=VectorGraphManager.getInstance().shapeLineDic[this.mId];
				tShapeLine.rebuild(tPath.tempArray);
				tPath.setGeomtry(tShapeLine);
				}else {
				VectorGraphManager.getInstance().addShape(this.mId,tPath.drawLine(x,y,points,lineWidth,boderColor));
			}
			tPath.update();
			tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
			tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
			tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
			this._submits[this._submits._length++]=tempSubmit;
		}
	}

	/*******************************************end矢量绘制***************************************************/
	__proto.drawParticle=function(x,y,pt){
		pt.x=x;
		pt.y=y;
		this._submits[this._submits._length++]=pt;
	}

	__proto._getPath=function(){
		return this._path || (this._path=new Path());
	}

	/*,_shader2D.ALPHA=1*/
	__getset(0,__proto,'globalCompositeOperation',function(){
		return BlendMode.NAMES[this._nBlendType];
		},function(value){
		var n=BlendMode.TOINT[value];
		n==null || (this._nBlendType===n)|| (SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_GLOBALCOMPOSITEOPERATION*/0x10000,this,true),this._curSubmit=Submit.RENDERBASE,this._renderKey=0,this._nBlendType=n);
	});

	__getset(0,__proto,'strokeStyle',function(){
		return this._shader2D.strokeStyle;
		},function(value){
		this._shader2D.strokeStyle.equal(value)|| (SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_STROKESTYLE*/0x200,this._shader2D,false),this._shader2D.strokeStyle=DrawStyle.create(value));
	});

	__getset(0,__proto,'globalAlpha',function(){
		return this._shader2D.ALPHA;
		},function(value){
		value=Math.floor(value *1000)/ 1000;
		if (value !=this._shader2D.ALPHA){
			SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_ALPHA*/0x1,this._shader2D,true);
			this._shader2D.ALPHA=value;
		}
	});

	__getset(0,__proto,'asBitmap',null,function(value){
		if (value){
			this._targets || (this._targets=new RenderTargetMAX());
			this._targets.repaint=true;
			if (!this._width || !this._height)
				throw Error("asBitmap no size!");
			this._targets.setSP(this.sprite);
			this._targets.size(this._width,this._height);
		}else
		this._targets=null;
	});

	__getset(0,__proto,'fillStyle',function(){
		return this._shader2D.fillStyle;
		},function(value){
		this._shader2D.fillStyle.equal(value)|| (SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_FILESTYLE*/0x2,this._shader2D,false),this._shader2D.fillStyle=DrawStyle.create(value));
	});

	__getset(0,__proto,'textAlign',function(){
		return this._other.textAlign;
		},function(value){
		(this._other.textAlign===value)|| (this._other=this._other.make(),SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_TEXTALIGN*/0x8000,this._other,false),this._other.textAlign=value);
	});

	__getset(0,__proto,'lineWidth',function(){
		return this._other.lineWidth;
		},function(value){
		(this._other.lineWidth===value)|| (this._other=this._other.make(),SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_LINEWIDTH*/0x100,this._other,false),this._other.lineWidth=value);
	});

	__getset(0,__proto,'textBaseline',function(){
		return this._other.textBaseline;
		},function(value){
		(this._other.textBaseline===value)|| (this._other=this._other.make(),SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_TEXTBASELINE*/0x4000,this._other,false),this._other.textBaseline=value);
	});

	__getset(0,__proto,'font',null,function(str){
		if (str==this._other.font.toString())
			return;
		this._other=this._other.make();
		SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_FONT*/0x8,this._other,false);
		this._other.font===FontInContext.EMPTY ? (this._other.font=new FontInContext(str)):(this._other.font.setFont(str));
	});

	WebGLContext2D.__init__=function(){
		ContextParams.DEFAULT=new ContextParams();
	}

	WebGLContext2D._tempPoint=new Point();
	WebGLContext2D._SUBMITVBSIZE=32000;
	WebGLContext2D._MAXSIZE=99999999;
	WebGLContext2D._RECTVBSIZE=16;
	WebGLContext2D.MAXCLIPRECT=new Rectangle(0,0,99999999,99999999);
	WebGLContext2D._COUNT=0;
	WebGLContext2D._tmpMatrix=new Matrix();
	WebGLContext2D.SEGNUM=32;
	WebGLContext2D._contextcount=0;
	__static(WebGLContext2D,
	['_fontTemp',function(){return this._fontTemp=new FontInContext();},'_drawStyleTemp',function(){return this._drawStyleTemp=new DrawStyle(null);}
	]);
	WebGLContext2D.__init$=function(){
		//class ContextParams
		ContextParams=(function(){
			function ContextParams(){
				this.lineWidth=1;
				this.path=null;
				this.textAlign=null;
				this.textBaseline=null;
				this.font=FontInContext.EMPTY;
			}
			__class(ContextParams,'');
			var __proto=ContextParams.prototype;
			__proto.clear=function(){
				this.lineWidth=1;
				this.path && this.path.clear();
				this.textAlign=this.textBaseline=null;
				this.font=FontInContext.EMPTY;
			}
			__proto.make=function(){
				return this===ContextParams.DEFAULT ? new ContextParams():this;
			}
			ContextParams.DEFAULT=null;
			return ContextParams;
		})()
	}

	return WebGLContext2D;
})(Context)


//class laya.webgl.shader.d2.value.Value2D extends laya.webgl.shader.ShaderValue
var Value2D=(function(_super){
	function Value2D(mainID,subID){
		this.size=[0,0];
		this.alpha=1.0;
		//this.mmat=null;
		this.ALPHA=1.0;
		//this.shader=null;
		//this.mainID=0;
		this.subID=0;
		//this.filters=null;
		//this.textureHost=null;
		//this.texture=null;
		//this.fillStyle=null;
		//this.color=null;
		//this.strokeStyle=null;
		//this.colorAdd=null;
		//this.glTexture=null;
		//this.u_mmat2=null;
		//this._inClassCache=null;
		this._cacheID=0;
		Value2D.__super.call(this);
		this.defines=new ShaderDefines2D();
		this.position=Value2D._POSITION;
		this.mainID=mainID;
		this.subID=subID;
		this.textureHost=null;
		this.texture=null;
		this.fillStyle=null;
		this.color=null;
		this.strokeStyle=null;
		this.colorAdd=null;
		this.glTexture=null;
		this.u_mmat2=null;
		this._cacheID=mainID|subID;
		this._inClassCache=Value2D._cache[this._cacheID];
		if (mainID>0 && !this._inClassCache){
			this._inClassCache=Value2D._cache[this._cacheID]=[];
			this._inClassCache._length=0;
		}
		this.clear();
	}

	__class(Value2D,'laya.webgl.shader.d2.value.Value2D',_super);
	var __proto=Value2D.prototype;
	__proto.setValue=function(value){}
	//throw new Error("todo in subclass");
	__proto.refresh=function(){
		var size=this.size;
		size[0]=RenderState2D.width;
		size[1]=RenderState2D.height;
		this.alpha=this.ALPHA *RenderState2D.worldAlpha;
		this.mmat=RenderState2D.worldMatrix4;
		return this;
	}

	__proto._ShaderWithCompile=function(){
		return Shader.withCompile2D(0,this.mainID,this.defines.toNameDic(),this.mainID | this.defines._value,Shader2X.create);
	}

	__proto._withWorldShaderDefines=function(){
		var defs=RenderState2D.worldShaderDefines;
		var sd=Shader.sharders [this.mainID | this.defines._value | defs.getValue()];
		if (!sd){
			var def={};
			var dic;
			var name;
			dic=this.defines.toNameDic();for (name in dic)def[name]="";
			dic=defs.toNameDic();for (name in dic)def[name]="";
			sd=Shader.withCompile2D(0,this.mainID,def,this.mainID | this.defines._value| defs.getValue(),Shader2X.create);
		};
		var worldFilters=RenderState2D.worldFilters;
		if (!worldFilters)return sd;
		var n=worldFilters.length,f;
		for (var i=0;i < n;i++){
			((f=worldFilters[i]))&& f.action.setValue(this);
		}
		return sd;
	}

	__proto.upload=function(){
		var renderstate2d=RenderState2D;
		this.alpha=this.ALPHA *renderstate2d.worldAlpha;
		if (RenderState2D.worldMatrix4!==RenderState2D.TEMPMAT4_ARRAY)this.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.WORLDMAT*/0x80);
		(WebGL.shaderHighPrecision)&& (this.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.SHADERDEFINE_FSHIGHPRECISION*/0x400));
		var sd=renderstate2d.worldShaderDefines?this._withWorldShaderDefines():(Shader.sharders [this.mainID | this.defines._value] || this._ShaderWithCompile());
		var params;
		this.size[0]=renderstate2d.width,this.size[1]=renderstate2d.height;
		this.mmat=renderstate2d.worldMatrix4;
		if (BaseShader.activeShader!==sd){
			if (sd._shaderValueWidth!==renderstate2d.width || sd._shaderValueHeight!==renderstate2d.height){
				sd._shaderValueWidth=renderstate2d.width;
				sd._shaderValueHeight=renderstate2d.height;
			}
			else{
				params=sd._params2dQuick2 || sd._make2dQuick2();
			}
			sd.upload(this,params);
		}
		else{
			if (sd._shaderValueWidth!==renderstate2d.width || sd._shaderValueHeight!==renderstate2d.height){
				sd._shaderValueWidth=renderstate2d.width;
				sd._shaderValueHeight=renderstate2d.height;
			}
			else{
				params=(sd._params2dQuick1)|| sd._make2dQuick1();
			}
			sd.upload(this,params);
		}
	}

	__proto.setFilters=function(value){
		this.filters=value;
		if (!value)
			return;
		var n=value.length,f;
		for (var i=0;i < n;i++){
			f=value[i];
			if (f){
				this.defines.add(f.type);
				f.action.setValue(this);
			}
		}
	}

	__proto.clear=function(){
		this.defines.setValue(this.subID);
	}

	__proto.release=function(){
		this._inClassCache[this._inClassCache._length++]=this;
		this.fillStyle=null;
		this.strokeStyle=null;
		this.clear();
	}

	Value2D._initone=function(type,classT){
		Value2D._typeClass[type]=classT;
		Value2D._cache[type]=[];
		Value2D._cache[type]._length=0;
	}

	Value2D.__init__=function(){
		Value2D._POSITION=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,4 *CONST3D2D.BYTES_PE,0];
		Value2D._TEXCOORD=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,4 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,Color2dSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,PrimitiveSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,FillTextureSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,SkinSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,TextureSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01 | /*laya.webgl.shader.d2.ShaderDefines2D.COLORADD*/0x40,TextSV);
		Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01 | /*laya.webgl.shader.d2.ShaderDefines2D.FILTERGLOW*/0x08,TextureSV);
	}

	Value2D.create=function(mainType,subType){
		var types=Value2D._cache[mainType|subType];
		if (types._length)
			return types[--types._length];
		else
		return new Value2D._typeClass[mainType|subType](subType);
	}

	Value2D._POSITION=null;
	Value2D._TEXCOORD=null;
	Value2D._cache=[];
	Value2D._typeClass=[];
	Value2D.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	return Value2D;
})(ShaderValue)


//class laya.webgl.utils.RenderSprite3D extends laya.renders.RenderSprite
var RenderSprite3D=(function(_super){
	function RenderSprite3D(type,next){
		RenderSprite3D.__super.call(this,type,next);
	}

	__class(RenderSprite3D,'laya.webgl.utils.RenderSprite3D',_super);
	var __proto=RenderSprite3D.prototype;
	__proto.onCreate=function(type){
		switch (type){
			case 0x08:
				this._fun=this._blend;
				return;
			case 0x04:
				this._fun=this._transform;
				return;
			}
	}

	__proto._mask=function(sprite,context,x,y){
		var next=this._next;
		var mask=sprite.mask;
		var submitCMD;
		var submitStencil;
		if (mask){
			context.ctx.save();
			var preBlendMode=(context.ctx).globalCompositeOperation;
			var tRect=new Rectangle();
			tRect.copyFrom(mask.getBounds());
			tRect.width=Math.round(tRect.width);
			tRect.height=Math.round(tRect.height);
			tRect.x=Math.round(tRect.x);
			tRect.y=Math.round(tRect.y);
			if (tRect.width > 0 && tRect.height > 0){
				var tf=sprite._style._tf;
				var scope=SubmitCMDScope.create();
				scope.addValue("bounds",tRect);
				submitCMD=SubmitCMD.create([scope,context],laya.webgl.utils.RenderSprite3D.tmpTarget);
				context.addRenderObject(submitCMD);
				mask.render(context,-tRect.x,-tRect.y);
				submitCMD=SubmitCMD.create([scope],laya.webgl.utils.RenderSprite3D.endTmpTarget);
				context.addRenderObject(submitCMD);
				context.ctx.save();
				context.clipRect(x-tf.translateX+tRect.x,y-tf.translateY+tRect.y,tRect.width,tRect.height);
				next._fun.call(next,sprite,context,x,y);
				context.ctx.restore();
				submitStencil=SubmitStencil.create(6);
				preBlendMode=(context.ctx).globalCompositeOperation;
				submitStencil.blendMode="mask";
				context.addRenderObject(submitStencil);
				Matrix.TEMP.identity();
				var shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
				var uv=Texture.INV_UV;
				var w=tRect.width;
				var h=tRect.height;
				var tempLimit=32;
				if (tRect.width < tempLimit || tRect.height < tempLimit){
					uv=RenderSprite3D.tempUV;
					uv[0]=0;
					uv[1]=0;
					uv[2]=(tRect.width >=32)? 1 :tRect.width/tempLimit;
					uv[3]=0
					uv[4]=(tRect.width >=32)? 1 :tRect.width/tempLimit;
					uv[5]=(tRect.height >=32)? 1 :tRect.height/tempLimit;
					uv[6]=0;
					uv[7]=(tRect.height >=32)? 1 :tRect.height/tempLimit;
					tRect.width=(tRect.width >=32)? tRect.width :tempLimit;
					tRect.height=(tRect.height >=32)? tRect.height :tempLimit;
					uv[1] *=-1;uv[3] *=-1;uv[5] *=-1;uv[7] *=-1;
					uv[1]+=1;uv[3]+=1;uv[5]+=1;uv[7]+=1;
				}
				(context.ctx).drawTarget(scope,x+tRect.x-tf.translateX,y+tRect.y-tf.translateY,w,h,Matrix.TEMP,"tmpTarget",shaderValue,uv,6);
				submitCMD=SubmitCMD.create([scope],laya.webgl.utils.RenderSprite3D.recycleTarget);
				context.addRenderObject(submitCMD);
				submitStencil=SubmitStencil.create(6);
				submitStencil.blendMode=preBlendMode;
				context.addRenderObject(submitStencil);
			}
			context.ctx.restore();
		}
		else{
			next._fun.call(next,sprite,context,x,y);
		}
	}

	__proto._blend=function(sprite,context,x,y){
		var style=sprite._style;
		var next=this._next;
		if (style.blendMode){
			context.ctx.save();
			context.ctx.globalCompositeOperation=style.blendMode;
			next._fun.call(next,sprite,context,x,y);
			context.ctx.restore();
		}
		else{
			next._fun.call(next,sprite,context,x,y);
		}
	}

	__proto._transform=function(sprite,context,x,y){
		var transform=sprite.transform,_next=this._next;
		if (transform && _next !=RenderSprite.NORENDER){
			var ctx=context.ctx;
			var style=sprite._style;
			transform.tx=x;
			transform.ty=y;
			var m2=ctx._getTransformMatrix();
			var m1=m2.clone();
			Matrix.mul(transform,m2,m2);
			m2._checkTransform();
			transform.tx=transform.ty=0;
			_next._fun.call(_next,sprite,context,0,0);
			m1.copyTo(m2);
			m1.destroy();
			}else {
			_next._fun.call(_next,sprite,context,x,y);
		}
	}

	RenderSprite3D.tmpTarget=function(scope,context){
		var b=scope.getValue("bounds");
		var tmpTarget=RenderTarget2D.create(b.width,b.height);
		tmpTarget.start();
		tmpTarget.clear(0,0,0,0);
		scope.addValue("tmpTarget",tmpTarget);
	}

	RenderSprite3D.endTmpTarget=function(scope){
		var tmpTarget=scope.getValue("tmpTarget");
		tmpTarget.end();
	}

	RenderSprite3D.recycleTarget=function(scope){
		var tmpTarget=scope.getValue("tmpTarget");
		tmpTarget.recycle();
		scope.recycle();
	}

	__static(RenderSprite3D,
	['tempUV',function(){return this.tempUV=new Array(8);}
	]);
	return RenderSprite3D;
})(RenderSprite)


//class laya.filters.webgl.ColorFilterActionGL extends laya.filters.webgl.FilterActionGL
var ColorFilterActionGL=(function(_super){
	function ColorFilterActionGL(){
		this.data=null;
		ColorFilterActionGL.__super.call(this);
	}

	__class(ColorFilterActionGL,'laya.filters.webgl.ColorFilterActionGL',_super);
	var __proto=ColorFilterActionGL.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
	__proto.setValue=function(shader){
		shader.colorMat=this.data._mat;
		shader.colorAlpha=this.data._alpha;
	}

	__proto.apply3d=function(scope,sprite,context,x,y){
		var b=scope.getValue("bounds");
		var shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
		shaderValue.setFilters([this.data]);
		var tMatrix=Matrix.TEMP;
		tMatrix.identity();
		context.ctx.drawTarget(scope,0,0,b.width,b.height,tMatrix,"src",shaderValue);
	}

	return ColorFilterActionGL;
})(FilterActionGL)


//class laya.webgl.atlas.Atlaser extends laya.webgl.atlas.AtlasGrid
var Atlaser=(function(_super){
	function Atlaser(gridNumX,gridNumY,width,height,atlasID){
		this._atlasCanvas=null;
		this._inAtlasTextureKey=null;
		this._inAtlasTextureBitmapValue=null;
		this._inAtlasTextureOriUVValue=null;
		this._InAtlasWebGLImagesKey=null;
		this._InAtlasWebGLImagesOffsetValue=null;
		Atlaser.__super.call(this,gridNumX,gridNumY,atlasID);
		this._inAtlasTextureKey=[];
		this._inAtlasTextureBitmapValue=[];
		this._inAtlasTextureOriUVValue=[];
		this._InAtlasWebGLImagesKey={};
		this._InAtlasWebGLImagesOffsetValue=[];
		this._atlasCanvas=new AtlasWebGLCanvas();
		this._atlasCanvas._atlaser=this;
		this._atlasCanvas.width=width;
		this._atlasCanvas.height=height;
		this._atlasCanvas.activeResource();
		this._atlasCanvas.lock=true;
	}

	__class(Atlaser,'laya.webgl.atlas.Atlaser',_super);
	var __proto=Atlaser.prototype;
	__proto.computeUVinAtlasTexture=function(texture,oriUV,offsetX,offsetY){
		var tex=texture;
		var _width=AtlasResourceManager.atlasTextureWidth;
		var _height=AtlasResourceManager.atlasTextureHeight;
		var u1=offsetX / _width,v1=offsetY / _height,u2=(offsetX+texture.bitmap.width)/ _width,v2=(offsetY+texture.bitmap.height)/ _height;
		var inAltasUVWidth=texture.bitmap.width / _width,inAltasUVHeight=texture.bitmap.height / _height;
		texture.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
	}

	__proto.findBitmapIsExist=function(bitmap){
		if ((bitmap instanceof laya.webgl.resource.WebGLImage )){
			var webImage=bitmap;
			var sUrl=webImage.url;
			var object=this._InAtlasWebGLImagesKey[sUrl?sUrl:webImage.id]
			if (object){
				return object.offsetInfoID;
			}
		}
		return-1;
	}

	/**
	*
	*@param inAtlasRes
	*@return 是否已经存在队列中
	*/
	__proto.addToAtlasTexture=function(mergeAtlasBitmap,offsetX,offsetY){
		if ((mergeAtlasBitmap instanceof laya.webgl.resource.WebGLImage )){
			var webImage=mergeAtlasBitmap;
			var sUrl=webImage.url;
			this._InAtlasWebGLImagesKey[sUrl?sUrl:webImage.id]={bitmap:mergeAtlasBitmap,offsetInfoID:this._InAtlasWebGLImagesOffsetValue.length};
			this._InAtlasWebGLImagesOffsetValue.push([offsetX,offsetY]);
		}
		this._atlasCanvas.texSubImage2D(offsetX,offsetY,mergeAtlasBitmap.atlasSource);
		mergeAtlasBitmap.clearAtlasSource();
	}

	__proto.addToAtlas=function(texture,offsetX,offsetY){
		texture._atlasID=this._inAtlasTextureKey.length;
		var oriUV=texture.uv.slice();
		var oriBitmap=texture.bitmap;
		this._inAtlasTextureKey.push(texture);
		this._inAtlasTextureOriUVValue.push(oriUV);
		this._inAtlasTextureBitmapValue.push(oriBitmap);
		this.computeUVinAtlasTexture(texture,oriUV,offsetX,offsetY);
		texture.bitmap=this._atlasCanvas;
	}

	__proto.clear=function(){
		for (var i=0,n=this._inAtlasTextureKey.length;i < n;i++){
			this._inAtlasTextureKey[i].bitmap=this._inAtlasTextureBitmapValue[i];
			this._inAtlasTextureKey[i].uv=this._inAtlasTextureOriUVValue[i];
			this._inAtlasTextureKey[i]._atlasID=-1;
			this._inAtlasTextureKey[i].bitmap.lock=false;
			this._inAtlasTextureKey[i].bitmap.releaseResource();
		}
		this._inAtlasTextureKey.length=0;
		this._inAtlasTextureBitmapValue.length=0;
		this._inAtlasTextureOriUVValue.length=0;
		this._InAtlasWebGLImagesKey=null;
		this._InAtlasWebGLImagesOffsetValue.length=0;
	}

	__proto.dispose=function(){
		this.clear();
		this._atlasCanvas.destroy();
	}

	__getset(0,__proto,'InAtlasWebGLImagesOffsetValue',function(){
		return this._InAtlasWebGLImagesOffsetValue;
	});

	__getset(0,__proto,'texture',function(){
		return this._atlasCanvas;
	});

	__getset(0,__proto,'inAtlasWebGLImagesKey',function(){
		return this._InAtlasWebGLImagesKey;
	});

	return Atlaser;
})(AtlasGrid)


//class laya.webgl.shader.d2.ShaderDefines2D extends laya.webgl.shader.ShaderDefines
var ShaderDefines2D=(function(_super){
	function ShaderDefines2D(){
		ShaderDefines2D.__super.call(this,ShaderDefines2D.__name2int,ShaderDefines2D.__int2name,ShaderDefines2D.__int2nameMap);
	}

	__class(ShaderDefines2D,'laya.webgl.shader.d2.ShaderDefines2D',_super);
	ShaderDefines2D.__init__=function(){
		ShaderDefines2D.reg("TEXTURE2D",0x01);
		ShaderDefines2D.reg("COLOR2D",0x02);
		ShaderDefines2D.reg("PRIMITIVE",0x04);
		ShaderDefines2D.reg("GLOW_FILTER",0x08);
		ShaderDefines2D.reg("BLUR_FILTER",0x10);
		ShaderDefines2D.reg("COLOR_FILTER",0x20);
		ShaderDefines2D.reg("COLOR_ADD",0x40);
		ShaderDefines2D.reg("WORLDMAT",0x80);
		ShaderDefines2D.reg("FILLTEXTURE",0x100);
		ShaderDefines2D.reg("FSHIGHPRECISION",0x400);
	}

	ShaderDefines2D.reg=function(name,value){
		ShaderDefines._reg(name,value,ShaderDefines2D.__name2int,ShaderDefines2D.__int2name);
	}

	ShaderDefines2D.toText=function(value,int2name,int2nameMap){
		return ShaderDefines._toText(value,int2name,int2nameMap);
	}

	ShaderDefines2D.toInt=function(names){
		return ShaderDefines._toInt(names,ShaderDefines2D.__name2int);
	}

	ShaderDefines2D.TEXTURE2D=0x01;
	ShaderDefines2D.COLOR2D=0x02;
	ShaderDefines2D.PRIMITIVE=0x04;
	ShaderDefines2D.FILTERGLOW=0x08;
	ShaderDefines2D.FILTERBLUR=0x10;
	ShaderDefines2D.FILTERCOLOR=0x20;
	ShaderDefines2D.COLORADD=0x40;
	ShaderDefines2D.WORLDMAT=0x80;
	ShaderDefines2D.FILLTEXTURE=0x100;
	ShaderDefines2D.SKINMESH=0x200;
	ShaderDefines2D.SHADERDEFINE_FSHIGHPRECISION=0x400;
	ShaderDefines2D.__name2int={};
	ShaderDefines2D.__int2name=[];
	ShaderDefines2D.__int2nameMap=[];
	return ShaderDefines2D;
})(ShaderDefines)


//class laya.webgl.shapes.Ellipse extends laya.webgl.shapes.BasePoly
var Ellipse=(function(_super){
	function Ellipse(x,y,width,height,color,borderWidth,borderColor){
		Ellipse.__super.call(this,x,y,width,height,40,color,borderWidth,borderColor);
	}

	__class(Ellipse,'laya.webgl.shapes.Ellipse',_super);
	return Ellipse;
})(BasePoly)


//class laya.webgl.shapes.Line extends laya.webgl.shapes.BasePoly
var Line=(function(_super){
	function Line(x,y,points,borderWidth,color){
		this._points=[];
		this.rebuild(points);
		Line.__super.call(this,x,y,0,0,0,color,borderWidth,color,0);
	}

	__class(Line,'laya.webgl.shapes.Line',_super);
	var __proto=Line.prototype;
	__proto.rebuild=function(points){
		var len=points.length;
		var preLen=this._points.length;
		if (len !=preLen){
			this.mUint16Array=new Uint16Array((len/2-1)*6);
			this.mFloat32Array=new Float32Array(len*5);
		}
		this._points.length=0;
		var tCurrX=NaN;
		var tCurrY=NaN;
		var tLastX=-1;
		var tLastY=-1;
		var tLen=points.length / 2;
		for (var i=0;i < tLen;i++){
			tCurrX=points[i *2];
			tCurrY=points[i *2+1];
			if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)>0.01){
				this._points.push(tCurrX,tCurrY);
			}
			tLastX=tCurrX;
			tLastY=tCurrY;
		}
	}

	__proto.getData=function(ib,vb,start){
		var indices=[];
		var verts=[];
		(this.borderWidth > 0)&& this.createLine2(this._points,indices,this.borderWidth,start,verts,this._points.length / 2);
		this.mUint16Array.set(indices,0);
		this.mFloat32Array.set(verts,0);
		ib.append(this.mUint16Array);
		vb.append(this.mFloat32Array);
	}

	return Line;
})(BasePoly)


//class laya.webgl.shapes.LoopLine extends laya.webgl.shapes.BasePoly
var LoopLine=(function(_super){
	function LoopLine(x,y,points,width,color){
		this._points=[];
		var tCurrX=NaN;
		var tCurrY=NaN;
		var tLastX=-1;
		var tLastY=-1;
		var tLen=points.length / 2-1;
		for (var i=0;i < tLen;i++){
			tCurrX=points[i *2];
			tCurrY=points[i *2+1];
			if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)> 0.01){
				this._points.push(tCurrX,tCurrY);
			}
			tLastX=tCurrX;
			tLastY=tCurrY;
		}
		tCurrX=points[tLen *2];
		tCurrY=points[tLen *2+1];
		tLastX=this._points[0];
		tLastY=this._points[1];
		if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)> 0.01){
			this._points.push(tCurrX,tCurrY);
		}
		LoopLine.__super.call(this,x,y,0,0,this._points.length / 2,0,width,color);
	}

	__class(LoopLine,'laya.webgl.shapes.LoopLine',_super);
	var __proto=LoopLine.prototype;
	__proto.getData=function(ib,vb,start){
		if (this.borderWidth > 0){
			var color=this.color;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			var verts=[];
			var tLastX=-1,tLastY=-1;
			var tCurrX=0,tCurrY=0;
			var indices=[];
			var tLen=Math.floor(this._points.length / 2);
			for (var i=0;i < tLen;i++){
				tCurrX=this._points[i *2];
				tCurrY=this._points[i *2+1];
				verts.push(this.x+tCurrX,this.y+tCurrY,r,g,b);
			}
			this.createLoopLine(verts,indices,this.borderWidth,start+verts.length / 5);
			ib.append(new Uint16Array(indices));
			vb.append(new Float32Array(verts));
		}
	}

	__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
		var tLen=p.length / 5;
		var points=p.concat();
		var result=outVertex ? outVertex :p;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		var firstPoint=[points[0],points[1]];
		var lastPoint=[points[points.length-5],points[points.length-4]];
		var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
		var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
		points.unshift(midPointX,midPointY,0,0,0);
		points.push(midPointX,midPointY,0,0,0);
		var length=points.length / 5;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[5];
		p2y=points[6];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*5];
			p1y=points[(i-1)*5+1];
			p2x=points[(i)*5];
			p2y=points[(i)*5+1];
			p3x=points[(i+1)*5];
			p3y=points[(i+1)*5+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
		}
		if (outIndex){
			indices=outIndex;
		};
		var groupLen=this.edges+1;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
		return result;
	}

	return LoopLine;
})(BasePoly)


//class laya.webgl.shapes.Polygon extends laya.webgl.shapes.BasePoly
var Polygon=(function(_super){
	function Polygon(x,y,points,color,borderWidth,borderColor){
		this._points=null;
		this._start=-1;
		this._repaint=false;
		this.earcutTriangles=null;
		this._mat=Matrix.create();
		this._points=points.slice(0,points.length);
		Polygon.__super.call(this,x,y,0,0,this._points.length / 2,color,borderWidth,borderColor);
	}

	__class(Polygon,'laya.webgl.shapes.Polygon',_super);
	var __proto=Polygon.prototype;
	__proto.rebuild=function(point){
		if (!this._repaint){
			this._points.length=0;
			this._points=this._points.concat(point);
		}
	}

	__proto.setMatrix=function(mat){
		mat.copyTo(this._mat);
	}

	__proto.needUpdate=function(mat){
		this._repaint=(this._mat.a==mat.a && this._mat.b==mat.b && this._mat.c==mat.c && this._mat.d==mat.d && this._mat.tx==mat.tx && this._mat.ty==mat.ty);
		return !this._repaint;
	}

	__proto.getData=function(ib,vb,start){
		var indices,i=0;
		var tArray=this._points;
		var tLen=0;
		if (this.mUint16Array && this.mFloat32Array&&this._repaint){
			if (this._start !=start){
				this._start=start;
				indices=[];
				tLen=this.earcutTriangles.length;
				for (i=0;i < tLen;i++){
					indices.push(this.earcutTriangles[i]+start);
				}
				this.mUint16Array=new Uint16Array(indices);
			}
		}
		else {
			this._start=start;
			indices=[];
			var verts=[];
			var vertsEarcut=[];
			var color=this.color;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			tLen=Math.floor(tArray.length / 2);
			for (i=0;i < tLen;i++){
				verts.push(this.x+tArray[i *2],this.y+tArray[i *2+1],r,g,b);
				vertsEarcut.push(this.x+tArray[i *2],this.y+tArray[i *2+1]);
			}
			this.earcutTriangles=Earcut.earcut(vertsEarcut,null,2);
			tLen=this.earcutTriangles.length;
			for (i=0;i < tLen;i++){
				indices.push(this.earcutTriangles[i]+start);
			}
			this.mUint16Array=new Uint16Array(indices);
			this.mFloat32Array=new Float32Array(verts);
		}
		ib.append(this.mUint16Array);
		vb.append(this.mFloat32Array);
	}

	return Polygon;
})(BasePoly)


//class laya.webgl.submit.SubmitCanvas extends laya.webgl.submit.Submit
var SubmitCanvas=(function(_super){
	function SubmitCanvas(){
		//this._ctx_src=null;
		this._matrix=new Matrix();
		this._matrix4=CONST3D2D.defaultMatrix4.concat();
		SubmitCanvas.__super.call(this,/*laya.webgl.submit.Submit.TYPE_2D*/10000);
		this.shaderValue=new Value2D(0,0);
	}

	__class(SubmitCanvas,'laya.webgl.submit.SubmitCanvas',_super);
	var __proto=SubmitCanvas.prototype;
	__proto.renderSubmit=function(){
		if (this._ctx_src._targets){
			this._ctx_src._targets.flush(this._ctx_src);
			return 1;
		};
		var preAlpha=RenderState2D.worldAlpha;
		var preMatrix4=RenderState2D.worldMatrix4;
		var preMatrix=RenderState2D.worldMatrix;
		var preFilters=RenderState2D.worldFilters;
		var preWorldShaderDefines=RenderState2D.worldShaderDefines;
		var v=this.shaderValue;
		var m=this._matrix;
		var m4=this._matrix4;
		var mout=Matrix.TEMP;
		Matrix.mul(m,preMatrix,mout);
		m4[0]=mout.a;
		m4[1]=mout.b;
		m4[4]=mout.c;
		m4[5]=mout.d;
		m4[12]=mout.tx;
		m4[13]=mout.ty;
		RenderState2D.worldMatrix=mout.clone();
		RenderState2D.worldMatrix4=m4;
		RenderState2D.worldAlpha=RenderState2D.worldAlpha *v.alpha;
		if (v.filters && v.filters.length){
			RenderState2D.worldFilters=v.filters;
			RenderState2D.worldShaderDefines=v.defines;
		}
		this._ctx_src.flush();
		RenderState2D.worldAlpha=preAlpha;
		RenderState2D.worldMatrix4=preMatrix4;
		RenderState2D.worldMatrix.destroy();
		RenderState2D.worldMatrix=preMatrix;
		RenderState2D.worldFilters=preFilters;
		RenderState2D.worldShaderDefines=preWorldShaderDefines;
		return 1;
	}

	__proto.releaseRender=function(){
		var cache=SubmitCanvas._cache;
		this._ctx_src=null;
		cache[cache._length++]=this;
	}

	__proto.getRenderType=function(){
		return /*laya.webgl.submit.Submit.TYPE_CANVAS*/10003;
	}

	SubmitCanvas.create=function(ctx_src,alpha,filters){
		var o=(!SubmitCanvas._cache._length)? (new SubmitCanvas()):SubmitCanvas._cache[--SubmitCanvas._cache._length];
		o._ctx_src=ctx_src;
		var v=o.shaderValue;
		v.alpha=alpha;
		v.defines.setValue(0);
		filters && filters.length && v.setFilters(filters);
		return o;
	}

	SubmitCanvas._cache=(SubmitCanvas._cache=[],SubmitCanvas._cache._length=0,SubmitCanvas._cache);
	return SubmitCanvas;
})(Submit)


//class laya.webgl.submit.SubmitTexture extends laya.webgl.submit.Submit
var SubmitTexture=(function(_super){
	function SubmitTexture(renderType){
		this._preIsSameTextureShader=false;
		this._isSameTexture=true;
		this._texs=new Array;
		this._texsID=new Array;
		this._vbPos=new Array;
		(renderType===void 0)&& (renderType=10000);
		SubmitTexture.__super.call(this,renderType);
	}

	__class(SubmitTexture,'laya.webgl.submit.SubmitTexture',_super);
	var __proto=SubmitTexture.prototype;
	__proto.releaseRender=function(){
		var cache=SubmitTexture._cache;
		cache[cache._length++]=this;
		this.shaderValue.release();
		this._preIsSameTextureShader=false;
		this._vb=null;
		this._texs.length=0;
		this._vbPos.length=0;
		this._isSameTexture=true;
	}

	__proto.addTexture=function(tex,vbpos){
		this._texsID[this._texs.length]=tex._uvID;
		this._texs.push(tex);
		this._vbPos.push(vbpos);
	}

	//检查材质是否修改，修改UV，设置是否是同一材质
	__proto.checkTexture=function(){
		if (this._texs.length < 1){
			this._isSameTexture=true;
			return;
		};
		var _tex=this.shaderValue.textureHost;
		var webGLImg=_tex.bitmap;
		if (webGLImg===null)return;
		var vbdata=this._vb.getFloat32Array();
		for (var i=0,s=this._texs.length;i < s;i++){
			var tex=this._texs[i];
			tex.active();
			var newUV=tex.uv;
			if (this._texsID[i]!==tex._uvID){
				this._texsID[i]=tex._uvID;
				var vbPos=this._vbPos[i];
				vbdata[vbPos+2]=newUV[0];
				vbdata[vbPos+3]=newUV[1];
				vbdata[vbPos+6]=newUV[2];
				vbdata[vbPos+7]=newUV[3];
				vbdata[vbPos+10]=newUV[4];
				vbdata[vbPos+11]=newUV[5];
				vbdata[vbPos+14]=newUV[6];
				vbdata[vbPos+15]=newUV[7];
				this._vb.setNeedUpload();
			}
			if (tex.bitmap!==webGLImg){
				this._isSameTexture=false;
			}
		}
	}

	__proto.renderSubmit=function(){
		if (this._numEle===0){
			SubmitTexture._shaderSet=false;
			return 1;
		};
		var _tex=this.shaderValue.textureHost;
		if (_tex){
			var source=_tex.source;
			if (!_tex.bitmap || !source){
				SubmitTexture._shaderSet=false;
				return 1;
			}
			this.shaderValue.texture=source;
		}
		this._vb.bind_upload(this._ib);
		var gl=WebGL.mainContext;
		if (BlendMode.activeBlendFunction!==this._blendFn){
			gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
			this._blendFn(gl);
			BlendMode.activeBlendFunction=this._blendFn;
		}
		Stat.drawCall++;
		Stat.trianglesFaces+=this._numEle / 3;
		if (this._preIsSameTextureShader && BaseShader.activeShader && SubmitTexture._shaderSet)
			(BaseShader.activeShader).uploadTexture2D(this.shaderValue.texture);
		else this.shaderValue.upload();
		SubmitTexture._shaderSet=true;
		if (this._texs.length > 1 && !this._isSameTexture){
			var webGLImg=_tex.bitmap;
			var index=0;
			var shader=BaseShader.activeShader;
			for (var i=0,s=this._texs.length;i < s;i++){
				var tex2=this._texs[i];
				if (tex2.bitmap!==webGLImg || (i+1)===s){
					shader.uploadTexture2D(tex2.source);
					gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,(i-index+1)*6,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx+index *6 *CONST3D2D.BYTES_PIDX);
					webGLImg=tex2.bitmap;
					index=i;
				}
			}
			}else {
			gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx);
		}
		return 1;
	}

	SubmitTexture.create=function(context,ib,vb,pos,sv){
		var o=SubmitTexture._cache._length ? SubmitTexture._cache[--SubmitTexture._cache._length] :new SubmitTexture();
		if (vb==null){
			vb=o._selfVb || (o._selfVb=VertexBuffer2D.create(-1));
			vb.clear();
			pos=0;
		}
		o._ib=ib;
		o._vb=vb;
		o._startIdx=pos *CONST3D2D.BYTES_PIDX;
		o._numEle=0;
		var blendType=context._nBlendType;
		o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		o.shaderValue=sv;
		o.shaderValue.setValue(context._shader2D);
		var filters=context._shader2D.filters;
		filters && o.shaderValue.setFilters(filters);
		return o;
	}

	SubmitTexture._cache=(SubmitTexture._cache=[],SubmitTexture._cache._length=0,SubmitTexture._cache);
	SubmitTexture._shaderSet=true;
	return SubmitTexture;
})(Submit)


/**
*与MeshQuadTexture基本相同。不过index不是固定的
*/
//class laya.webgl.utils.MeshTexture extends laya.webgl.utils.Mesh2D
var MeshTexture=(function(_super){
	function MeshTexture(){
		MeshTexture.__super.call(this,laya.webgl.utils.MeshTexture.const_stride,0,0);
		this.canReuse=true;
		this.setAttributes(laya.webgl.utils.MeshTexture._fixattriInfo);
	}

	__class(MeshTexture,'laya.webgl.utils.MeshTexture',_super);
	var __proto=MeshTexture.prototype;
	__proto.addData=function(vertices,uvs,idx,matrix,rgba,ctx){
		var sz=vertices.length / 2;
		var startpos=this._vb.needSize(sz *MeshTexture.const_stride);
		var f32pos=startpos >> 2;
		var vbdata=this._vb.getFloat32Array();
		var ci=0;
		for (var i=0;i < sz;i++){
			var x=vertices[ci],y=vertices[ci+1];
			var x1=x *matrix.a+y *matrix.c+matrix.tx;
			var y1=x *matrix.b+y *matrix.d+matrix.ty;
			vbdata[f32pos++]=x1;vbdata[f32pos++]=y1;
			vbdata[f32pos++]=uvs[ci];vbdata[f32pos++]=uvs[ci+1];
			ci+=2;
		}
		this._vb.setNeedUpload();
		var vertN=this.vertNum;
		if (vertN > 0){
			sz=idx.length;
			if (sz > MeshTexture.tmpIdx.length)MeshTexture.tmpIdx=new Uint16Array(sz);
			for (var ii=0;ii < sz;ii++){
				MeshTexture.tmpIdx[ii]=idx[ii]+vertN;
			}
			this._ib.appendU16Array(MeshTexture.tmpIdx,idx.length);
			}else {
			this._ib.append(idx);
		}
		this._ib.setNeedUpload();
		this.vertNum+=sz;
		this.indexNum+=idx.length;
	}

	/**
	*把本对象放到回收池中，以便getMesh能用。
	*/
	__proto.releaseMesh=function(){
		this._vb._byteLength=0;
		this._ib._byteLength=0;
		this.vertNum=0;
		this.indexNum=0;
		laya.webgl.utils.MeshTexture._POOL.push(this);
	}

	__proto.destroy=function(){
		this._ib.destroy();
		this._vb.destroy();
	}

	MeshTexture.getAMesh=function(){
		if (laya.webgl.utils.MeshTexture._POOL.length){
			return laya.webgl.utils.MeshTexture._POOL.pop();
		}
		return new MeshTexture();
	}

	MeshTexture.const_stride=16;
	MeshTexture._POOL=[];
	__static(MeshTexture,
	['_fixattriInfo',function(){return this._fixattriInfo=[
		/*laya.webgl.WebGLContext.FLOAT*/0x1406,2,0,
		/*laya.webgl.WebGLContext.FLOAT*/0x1406,2,8];},'tmpIdx',function(){return this.tmpIdx=new Uint16Array(4);}
	]);
	return MeshTexture;
})(Mesh2D)


/**
*...
*@author ...
*/
//class laya.webgl.shader.BaseShader extends laya.resource.Resource
var BaseShader=(function(_super){
	function BaseShader(){
		BaseShader.__super.call(this);
		this.lock=true;
	}

	__class(BaseShader,'laya.webgl.shader.BaseShader',_super);
	BaseShader.activeShader=null;
	BaseShader.bindShader=null;
	return BaseShader;
})(Resource)


//class laya.webgl.resource.RenderTarget2D extends laya.resource.Texture
var RenderTarget2D=(function(_super){
	function RenderTarget2D(width,height,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
		this._type=0;
		this._svWidth=NaN;
		this._svHeight=NaN;
		this._preRenderTarget=null;
		//TODO:.........................................................
		this._alreadyResolved=false;
		this._looked=false;
		this._surfaceFormat=0;
		this._surfaceType=0;
		this._depthStencilFormat=0;
		this._mipMap=false;
		this._repeat=false;
		this._minFifter=0;
		this._magFifter=0;
		this._destroy=false;
		(surfaceFormat===void 0)&& (surfaceFormat=/*laya.webgl.WebGLContext.RGBA*/0x1908);
		(surfaceType===void 0)&& (surfaceType=/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401);
		(depthStencilFormat===void 0)&& (depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9);
		(mipMap===void 0)&& (mipMap=false);
		(repeat===void 0)&& (repeat=false);
		(minFifter===void 0)&& (minFifter=-1);
		(magFifter===void 0)&& (magFifter=-1);
		this._type=1;
		this._w=width;
		this._h=height;
		this._surfaceFormat=surfaceFormat;
		this._surfaceType=surfaceType;
		this._depthStencilFormat=depthStencilFormat;
		if (Render.isConchWebGL && this._depthStencilFormat===/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9){
			this._depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_COMPONENT16*/0x81A5;
		}
		this._mipMap=mipMap;
		this._repeat=repeat;
		this._minFifter=minFifter;
		this._magFifter=magFifter;
		this._createWebGLRenderTarget();
		this.bitmap.lock=true;
		RenderTarget2D.__super.call(this,this.bitmap,Texture.INV_UV);
	}

	__class(RenderTarget2D,'laya.webgl.resource.RenderTarget2D',_super);
	var __proto=RenderTarget2D.prototype;
	Laya.imps(__proto,{"laya.resource.IDispose":true})
	//TODO:临时......................................................
	__proto.getType=function(){
		return this._type;
	}

	//*/
	__proto.getTexture=function(){
		return this;
	}

	__proto.size=function(w,h){
		if (this._w==w && this._h==h)return;
		this._w=w;
		this._h=h;
		this.release();
		if (this._w !=0 && this._h !=0)this._createWebGLRenderTarget();
	}

	__proto.release=function(){
		this.destroy();
	}

	__proto.recycle=function(){
		RenderTarget2D.POOL.push(this);
	}

	__proto.start=function(){
		var gl=WebGL.mainContext;
		this._preRenderTarget=RenderState2D.curRenderTarget;
		RenderState2D.curRenderTarget=this;
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,this.bitmap.frameBuffer);
		this._alreadyResolved=false;
		if (this._type==1){
			gl.viewport(0,0,this._w,this._h);
			this._svWidth=RenderState2D.width;
			this._svHeight=RenderState2D.height;
			RenderState2D.width=this._w;
			RenderState2D.height=this._h;
			BaseShader.activeShader=null;
		}
		return this;
	}

	__proto.clear=function(r,g,b,a){
		(r===void 0)&& (r=0.0);
		(g===void 0)&& (g=0.0);
		(b===void 0)&& (b=0.0);
		(a===void 0)&& (a=1.0);
		var gl=WebGL.mainContext;
		gl.clearColor(r,g,b,a);
		var clearFlag=/*laya.webgl.WebGLContext.COLOR_BUFFER_BIT*/0x00004000;
		switch (this._depthStencilFormat){
			case /*laya.webgl.WebGLContext.DEPTH_COMPONENT16*/0x81A5:
				clearFlag |=/*laya.webgl.WebGLContext.DEPTH_BUFFER_BIT*/0x00000100;
				break ;
			case /*laya.webgl.WebGLContext.STENCIL_INDEX8*/0x8D48:
				clearFlag |=/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400;
				break ;
			case /*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9:
				clearFlag |=/*laya.webgl.WebGLContext.DEPTH_BUFFER_BIT*/0x00000100;
				clearFlag |=/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400
				break ;
			}
		gl.clear(clearFlag);
	}

	__proto.end=function(){
		var gl=WebGL.mainContext;
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,this._preRenderTarget ? this._preRenderTarget.bitmap.frameBuffer :null);
		this._alreadyResolved=true;
		RenderState2D.curRenderTarget=this._preRenderTarget;
		if (this._type==1){
			gl.viewport(0,0,this._svWidth,this._svHeight);
			RenderState2D.width=this._svWidth;
			RenderState2D.height=this._svHeight;
			BaseShader.activeShader=null;
		}else gl.viewport(0,0,Laya.stage.width,Laya.stage.height);
	}

	__proto.getData=function(x,y,width,height){
		var gl=WebGL.mainContext;
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,(this.bitmap).frameBuffer);
		var canRead=(gl.checkFramebufferStatus(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40)===/*laya.webgl.WebGLContext.FRAMEBUFFER_COMPLETE*/0x8CD5);
		if (!canRead){
			gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,null);
			return null;
		};
		var pixels=new Uint8Array(this._w *this._h *4);
		gl.readPixels(x,y,width,height,this._surfaceFormat,this._surfaceType,pixels);
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,null);
		return pixels;
	}

	/**彻底清理资源,注意会强制解锁清理*/
	__proto.destroy=function(foreDiposeTexture){
		(foreDiposeTexture===void 0)&& (foreDiposeTexture=false);
		if (!this._destroy){
			this._loaded=false;
			this.bitmap.offAll();
			this.bitmap.disposeResource();
			this.bitmap.dispose();
			this.offAll();
			this.bitmap=null;
			this._alreadyResolved=false;
			this._destroy=true;
			_super.prototype.destroy.call(this);
		}
	}

	//待测试
	__proto.dispose=function(){}
	__proto._createWebGLRenderTarget=function(){
		this.bitmap=new WebGLRenderTarget(this.width,this.height,this._surfaceFormat,this._surfaceType,this._depthStencilFormat,this._mipMap,this._repeat,this._minFifter,this._magFifter);
		this.bitmap.activeResource();
		this._alreadyResolved=true;
		this._destroy=false;
		this._loaded=true;
		this.bitmap.on(/*laya.events.Event.RECOVERED*/"recovered",this,function(e){
			this.event(/*laya.events.Event.RECOVERED*/"recovered");
		})
	}

	__getset(0,__proto,'surfaceFormat',function(){
		return this._surfaceFormat;
	});

	__getset(0,__proto,'magFifter',function(){
		return this._magFifter;
	});

	__getset(0,__proto,'surfaceType',function(){
		return this._surfaceType;
	});

	__getset(0,__proto,'mipMap',function(){
		return this._mipMap;
	});

	__getset(0,__proto,'depthStencilFormat',function(){
		return this._depthStencilFormat;
	});

	//}
	__getset(0,__proto,'minFifter',function(){
		return this._minFifter;
	});

	/**返回RenderTarget的Texture*/
	__getset(0,__proto,'source',function(){
		if (this._alreadyResolved)
			return Laya.superGet(Texture,this,'source');
		return null;
	});

	RenderTarget2D.create=function(w,h,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
		(surfaceFormat===void 0)&& (surfaceFormat=/*laya.webgl.WebGLContext.RGBA*/0x1908);
		(surfaceType===void 0)&& (surfaceType=/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401);
		(depthStencilFormat===void 0)&& (depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9);
		(mipMap===void 0)&& (mipMap=false);
		(repeat===void 0)&& (repeat=false);
		(minFifter===void 0)&& (minFifter=-1);
		(magFifter===void 0)&& (magFifter=-1);
		var t=RenderTarget2D.POOL.pop();
		t || (t=new RenderTarget2D(w,h));
		if (!t.bitmap || t._w !=w || t._h !=h || t._surfaceFormat !=surfaceFormat || t._surfaceType !=surfaceType || t._depthStencilFormat !=depthStencilFormat || t._mipMap !=mipMap || t._repeat !=repeat || t._minFifter !=minFifter || t._magFifter !=magFifter){
			t._w=w;
			t._h=h;
			t._surfaceFormat=surfaceFormat;
			t._surfaceType=surfaceType;
			t._depthStencilFormat=depthStencilFormat;
			if (Render.isConchWebGL && t._depthStencilFormat===/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9){
				t._depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_COMPONENT16*/0x81A5;
			}
			t._mipMap=mipMap;
			t._repeat=repeat;
			t._minFifter=minFifter;
			t._magFifter=magFifter;
			t.release();
			t._createWebGLRenderTarget();
		}
		return t;
	}

	RenderTarget2D.TYPE2D=1;
	RenderTarget2D.TYPE3D=2;
	RenderTarget2D.POOL=[];
	return RenderTarget2D;
})(Texture)


//class laya.webgl.utils.Buffer extends laya.resource.Resource
var Buffer=(function(_super){
	function Buffer(){
		this._glBuffer=null;
		this._buffer=null;
		//可能为Float32Array、Uint16Array、Uint8Array、ArrayBuffer等。
		this._bufferType=0;
		this._bufferUsage=0;
		this._byteLength=0;
		Buffer.__super.call(this);
		Buffer._gl=WebGL.mainContext;
	}

	__class(Buffer,'laya.webgl.utils.Buffer',_super);
	var __proto=Buffer.prototype;
	__proto._bind=function(){
		this.activeResource();
		if (Buffer._bindActive[this._bufferType]!==this._glBuffer){
			(this._bufferType===/*laya.webgl.WebGLContext.ARRAY_BUFFER*/0x8892)&& (Buffer._bindVertexBuffer=this._glBuffer);
			Buffer._gl.bindBuffer(this._bufferType,Buffer._bindActive[this._bufferType]=this._glBuffer);
			BaseShader.activeShader=null;
		}
	}

	__proto.recreateResource=function(){
		this._glBuffer || (this._glBuffer=Buffer._gl.createBuffer());
		this.completeCreate();
	}

	__proto.disposeResource=function(){
		if (this._glBuffer){
			WebGL.mainContext.deleteBuffer(this._glBuffer);
			this._glBuffer=null;
		}
		this.memorySize=0;
	}

	__getset(0,__proto,'bufferUsage',function(){
		return this._bufferUsage;
	});

	Buffer._gl=null;
	Buffer._bindActive={};
	Buffer._bindVertexBuffer=null;
	Buffer._enableAtributes=[];
	return Buffer;
})(Resource)


//class laya.webgl.shader.d2.skinAnishader.SkinSV extends laya.webgl.shader.d2.value.Value2D
var SkinSV=(function(_super){
	function SkinSV(type){
		this.texcoord=null;
		this.offsetX=300;
		this.offsetY=0;
		SkinSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,0);
		var _vlen=8 *CONST3D2D.BYTES_PE;
		this.position=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,_vlen,0];
		this.texcoord=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,_vlen,2 *CONST3D2D.BYTES_PE];
		this.color=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,_vlen,4 *CONST3D2D.BYTES_PE];
	}

	__class(SkinSV,'laya.webgl.shader.d2.skinAnishader.SkinSV',_super);
	return SkinSV;
})(Value2D)


//class laya.webgl.shader.d2.value.Color2dSV extends laya.webgl.shader.d2.value.Value2D
var Color2dSV=(function(_super){
	function Color2dSV(args){
		Color2dSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0);
		this.color=[];
	}

	__class(Color2dSV,'laya.webgl.shader.d2.value.Color2dSV',_super);
	var __proto=Color2dSV.prototype;
	__proto.setValue=function(value){
		value.fillStyle&&(this.color=value.fillStyle._color._color);
		value.strokeStyle&&(this.color=value.strokeStyle._color._color);
	}

	return Color2dSV;
})(Value2D)


//class laya.webgl.shader.d2.value.FillTextureSV extends laya.webgl.shader.d2.value.Value2D
var FillTextureSV=(function(_super){
	function FillTextureSV(type){
		this.u_colorMatrix=null;
		this.strength=0;
		this.colorMat=null;
		this.colorAlpha=null;
		this.u_TexRange=[0,1,0,1];
		this.u_offset=[0,0];
		this.texcoord=Value2D._TEXCOORD;
		FillTextureSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,0);
	}

	__class(FillTextureSV,'laya.webgl.shader.d2.value.FillTextureSV',_super);
	var __proto=FillTextureSV.prototype;
	//this.color=[4,WebGLContext.FLOAT,false,_vlen,4 *CONST3D2D.BYTES_PE];
	__proto.setValue=function(vo){
		this.ALPHA=vo.ALPHA;
		vo.filters && this.setFilters(vo.filters);
	}

	__proto.clear=function(){
		this.texture=null;
		this.shader=null;
		this.defines.setValue(0);
	}

	return FillTextureSV;
})(Value2D)


//class laya.webgl.shader.d2.value.TextureSV extends laya.webgl.shader.d2.value.Value2D
var TextureSV=(function(_super){
	function TextureSV(subID){
		this.u_colorMatrix=null;
		this.strength=0;
		this.blurInfo=null;
		this.colorMat=null;
		this.colorAlpha=null;
		this.texcoord=Value2D._TEXCOORD;
		(subID===void 0)&& (subID=0);
		TextureSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,subID);
	}

	__class(TextureSV,'laya.webgl.shader.d2.value.TextureSV',_super);
	var __proto=TextureSV.prototype;
	__proto.setValue=function(vo){
		this.ALPHA=vo.ALPHA;
		vo.filters && this.setFilters(vo.filters);
	}

	__proto.clear=function(){
		this.texture=null;
		this.shader=null;
		this.defines.setValue(0);
	}

	return TextureSV;
})(Value2D)


//class laya.webgl.shader.d2.value.PrimitiveSV extends laya.webgl.shader.d2.value.Value2D
var PrimitiveSV=(function(_super){
	function PrimitiveSV(args){
		this.a_color=null;
		this.u_pos=[0,0];
		PrimitiveSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0);
		this.position=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,5 *CONST3D2D.BYTES_PE,0];
		this.a_color=[3,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,5 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
	}

	__class(PrimitiveSV,'laya.webgl.shader.d2.value.PrimitiveSV',_super);
	return PrimitiveSV;
})(Value2D)


//class laya.webgl.atlas.AtlasWebGLCanvas extends laya.resource.Bitmap
var AtlasWebGLCanvas=(function(_super){
	function AtlasWebGLCanvas(){
		this._atlaser=null;
		/**兼容Stage3D使用*/
		this._flashCacheImage=null;
		this._flashCacheImageNeedFlush=false;
		AtlasWebGLCanvas.__super.call(this);
	}

	__class(AtlasWebGLCanvas,'laya.webgl.atlas.AtlasWebGLCanvas',_super);
	var __proto=AtlasWebGLCanvas.prototype;
	/***重新创建资源*/
	__proto.recreateResource=function(){
		var gl=WebGL.mainContext;
		var glTex=this._source=gl.createTexture();
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
		gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,this._w,this._h,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,null);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		this.memorySize=this._w *this._h *4;
		this.completeCreate();
	}

	/***销毁资源*/
	__proto.disposeResource=function(){
		if (this._source){
			WebGL.mainContext.deleteTexture(this._source);
			this._source=null;
			this.memorySize=0;
		}
	}

	/**采样image到WebGLTexture的一部分*/
	__proto.texSubImage2D=function(xoffset,yoffset,bitmap){
		if (!Render.isFlash){
			var gl=WebGL.mainContext;
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
			if (Render.isConchWebGL){
				if (/*__JS__ */bitmap !==ConchTextCanvas){
					(xoffset-1 >=0)&& (gl.texSubImage2DEx(true,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset-1,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
					(xoffset+1 <=this._w)&& (gl.texSubImage2DEx(true,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset+1,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
					(yoffset-1 >=0)&& (gl.texSubImage2DEx(true,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset-1,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
					(yoffset+1 <=this._h)&& (gl.texSubImage2DEx(true,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset+1,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
				}
				gl.texSubImage2DEx(true,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap);
			}
			else {
				gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
				(xoffset-1 >=0)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset-1,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
				(xoffset+1 <=this._w)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset+1,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
				(yoffset-1 >=0)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset-1,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
				(yoffset+1 <=this._h)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset+1,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
				gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap);
				gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
			}
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
			}else {
			if (!this._flashCacheImage){
				this._flashCacheImage=HTMLImage.create("");
				this._flashCacheImage._image.createCanvas(this._w,this._h);
			};
			var bmData=bitmap.bitmapdata;
			this._flashCacheImage._image.copyPixels(bmData,0,0,bmData.width,bmData.height,xoffset,yoffset);
			(this._flashCacheImageNeedFlush)|| (this._flashCacheImageNeedFlush=true);
		}
	}

	/**采样image到WebGLTexture的一部分*/
	__proto.texSubImage2DPixel=function(xoffset,yoffset,width,height,pixel){
		var gl=WebGL.mainContext;
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
		var pixels=new Uint8Array(pixel.data);
		if (Render.isConchWebGL){
			gl.texSubImage2DEx(true,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,width,height,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,pixels);
		}
		else {
			gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
			gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,width,height,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,pixels);
			gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
		}
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
	}

	/***
	*设置图片宽度
	*@param value 图片宽度
	*/
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		this._w=value;
	});

	/***
	*设置图片高度
	*@param value 图片高度
	*/
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		this._h=value;
	});

	return AtlasWebGLCanvas;
})(Bitmap)


/**@private */
//class laya.webgl.resource.WebGLCanvas extends laya.resource.Bitmap
var WebGLCanvas=(function(_super){
	function WebGLCanvas(){
		this.flipY=true;
		//上传的时候是否预乘alpha
		//this._ctx=null;
		/**HTML Canvas*/
		//this._canvas=null;
		//this._imgData=null;
		//}
		//this.iscpuSource=false;
		this.alwaysChange=false;
		WebGLCanvas.__super.call(this);
	}

	__class(WebGLCanvas,'laya.webgl.resource.WebGLCanvas',_super);
	var __proto=WebGLCanvas.prototype;
	//}
	__proto.getCanvas=function(){
		return this._canvas;
	}

	__proto.clear=function(){
		this._ctx && this._ctx.clear();
	}

	__proto.destroy=function(){
		this._ctx && this._ctx.destroy();
		this._ctx=null;
		laya.resource.Resource.prototype.destroy.call(this);
	}

	__proto._setContext=function(context){
		this._ctx=context;
	}

	__proto.getContext=function(contextID,other){
		return this._ctx ? this._ctx :(this._ctx=WebGLCanvas._createContext(this));
	}

	/*override public function copyTo(dec:Bitmap):void {
	super.copyTo(dec);
	(dec as WebGLCanvas)._ctx=_ctx;
}*/


__proto.size=function(w,h){
	if (this._w !=w || this._h !=h){
		this._w=w;
		this._h=h;
		this._ctx && this._ctx.size(w,h);
		this._canvas && (this._canvas.height=h,this._canvas.width=w);
	}

}


__proto.activeResource=function(force){
	(force===void 0)&& (force=false);
	if (!this._source){
		this.recreateResource();
	}

}


__proto.recreateResource=function(){
	this.createWebGlTexture();
	this.completeCreate();
}


__proto.disposeResource=function(){
	if (this._source && !this.iscpuSource){
		WebGL.mainContext.deleteTexture(this._source);
		this._source=null;
		this.memorySize=0;
	}

}


__proto.createWebGlTexture=function(){
	var gl=WebGL.mainContext;
	if (!this._canvas){
	};

	var glTex=this._source=gl.createTexture();
	this.iscpuSource=false;
	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
	gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_FLIP_Y_WEBGL*/0x9240,this.flipY?1:0);
	if (Render.isConchWebGL){
		gl.texImage2DEx(WebGLCanvas.premulAlpha,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this._imgData);
	}

	else {
		WebGLCanvas.premulAlpha&&gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
		gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this._imgData);
		WebGLCanvas.premulAlpha && gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
	}

	gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
	gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
	gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
	gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
	gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_FLIP_Y_WEBGL*/0x9240,0);
	this.memorySize=this._w *this._h *4;
	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
}


//_canvas=null;
__proto.reloadCanvasData=function(){
	var gl=WebGL.mainContext;
	if (!this._source){
		throw "reloadCanvasData error, gl texture not created!";
	};

	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
	if (Render.isConchWebGL){
		gl.texImage2DEx(WebGLCanvas.premulAlpha,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this._imgData);
	}

	else {
		WebGLCanvas.premulAlpha&&gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
		gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this._imgData);
		WebGLCanvas.premulAlpha && gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
	}

	gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_FLIP_Y_WEBGL*/0x9240,0);
	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
}


//_canvas=null;
__proto.texSubImage2D=function(webglCanvas,xoffset,yoffset){
	var gl=WebGL.mainContext;
	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
	if (Render.isConchWebGL){
		gl.texSubImage2DEx(true,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,webglCanvas._source);
	}

	else {
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
		gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,webglCanvas._source);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
	}

	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
}


__proto.toBase64=function(type,encoderOptions,callBack){
	var base64Data=null;
	if (this._canvas){
		base64Data=this._canvas.toDataURL(type,encoderOptions);
	}

	callBack.call(this,base64Data);
}


//由于resource的dispose被郭磊改成了destroy，这里会重载父类的destroy，所以必须调用这个，否则会有泄露。
__getset(0,__proto,'context',function(){
	return this._ctx;
});


__getset(0,__proto,'source',function(){
	if (this.alwaysChange)this.reloadCanvasData();
	return this._source;
});


__getset(0,__proto,'asBitmap',null,function(value){
	this._ctx && (this._ctx.asBitmap=value);
});


WebGLCanvas._createContext=null;
WebGLCanvas.premulAlpha=false;
return WebGLCanvas;
})(Bitmap)


//class laya.webgl.resource.WebGLCharImage extends laya.resource.Bitmap
var WebGLCharImage=(function(_super){
	function WebGLCharImage(content,drawValue){
		this.CborderSize=12;
		//this._ctx=null;
		/***是否创建私有Source*/
		//this._allowMerageInAtlas=false;
		/**是否允许加入大图合集*/
		//this._enableMerageInAtlas=false;
		/**HTML Canvas，绘制字符载体,非私有数据载体*/
		//this.canvas=null;
		/**********************************************************************************/
		//this.cw=NaN;
		//this.ch=NaN;
		//this.xs=NaN;
		//this.ys=NaN;
		//this.char=null;
		//this.fillColor=null;
		//this.borderColor=null;
		//this.borderSize=0;
		//this.font=null;
		//this.fontSize=0;
		//this.texture=null;
		//this.lineWidth=0;
		//this.UV=null;
		//this.isSpace=false;
		//this.underLine=0;
		WebGLCharImage.__super.call(this);
		this.char=content;
		this.isSpace=content===' ';
		this.xs=drawValue.scaleX;
		this.ys=drawValue.scaleY;
		this.font=drawValue.font.toString();
		this.fontSize=drawValue.font.size;
		this.fillColor=drawValue.fillColor;
		this.borderColor=drawValue.borderColor;
		this.lineWidth=drawValue.lineWidth;
		this.underLine=drawValue.underLine;
		var bIsConchApp=Render.isConchApp;
		var pCanvas;
		if (bIsConchApp){
			/*__JS__ */pCanvas=ConchTextCanvas;
			/*__JS__ */pCanvas._source=ConchTextCanvas;
			/*__JS__ */pCanvas._source.canvas=ConchTextCanvas;
			}else {
			pCanvas=Browser.canvas.source;
		}
		this.canvas=pCanvas;
		this._enableMerageInAtlas=true;
		if (bIsConchApp){
			/*__JS__ */this._ctx=pCanvas;
			}else {
			this._ctx=this.canvas.getContext('2d',undefined);
		};
		var t=Utils.measureText(this.char,this.font);
		this.cw=t.width *this.xs;
		this.ch=(t.height || this.fontSize)*this.ys;
		this.onresize(this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
		this.texture=new Texture(this);
	}

	__class(WebGLCharImage,'laya.webgl.resource.WebGLCharImage',_super);
	var __proto=WebGLCharImage.prototype;
	Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
	__proto.active=function(){
		this.texture.active();
	}

	__proto.recreateResource=function(){
		var bIsConchApp=Render.isConchApp;
		this.onresize(this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
		this.canvas && (this.canvas.height=this._h,this.canvas.width=this._w);
		if (bIsConchApp){
			var nFontSize=this.fontSize;
			if (this.xs !=1 || this.ys !=1){
				nFontSize=parseInt(nFontSize *((this.xs > this.ys)? this.xs :this.ys)+"");
			};
			var sFont="normal 100 "+this.font;
			sFont=sFont.replace(WebGLCharImage._fontSizeReg,nFontSize);
			if (this.borderColor){
				sFont+=" 1 "+this.borderColor;
			}
			this._ctx.font=sFont;
			this._ctx.textBaseline="top";
			this._ctx.fillStyle=this.fillColor;
			this._ctx.fillText(this.char,this.CborderSize,this.CborderSize,null,null,null);
			}else {
			this._ctx.save();
			this._ctx.lineJoin="round";
			(this._ctx).clearRect(0,0,this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
			this._ctx.font=this.font;
			if (Text.RightToLeft){
				this._ctx.textAlign="end";
			}
			this._ctx.textBaseline="top";
			this._ctx.translate(this.CborderSize,this.CborderSize);
			if (this.xs !=1 || this.ys !=1){
				this._ctx.scale(this.xs,this.ys);
			}
			if (this.fillColor && this.borderColor){
				this._ctx.strokeStyle=this.borderColor;
				this._ctx.lineWidth=this.lineWidth;
				this._ctx.strokeText(this.char,0,0,null,null,0,null);
				this._ctx.fillStyle=this.fillColor;
				this._ctx.fillText(this.char,0,0,null,null,null);
				}else {
				if (this.lineWidth===-1){
					this._ctx.fillStyle=this.fillColor ? this.fillColor :"white";
					this._ctx.fillText(this.char,0,0,null,null,null);
					}else {
					this._ctx.strokeStyle=this.borderColor?this.borderColor:'white';
					this._ctx.lineWidth=this.lineWidth;
					this._ctx.strokeText(this.char,0,0,null,null,0,null);
				}
			}
			if (this.underLine){
				this._ctx.lineWidth=1;
				this._ctx.strokeStyle=this.fillColor;
				this._ctx.beginPath();
				this._ctx.moveTo(0,this.fontSize+1);
				var nW=this._ctx.measureText(this.char).width+1;
				this._ctx.lineTo(nW,this.fontSize+1);
				this._ctx.stroke();
			}
			this._ctx.restore();
		}
		this.borderSize=this.CborderSize;
		this.completeCreate();
	}

	__proto.onresize=function(w,h){
		this._w=w;
		this._h=h;
		this._allowMerageInAtlas=true;
	}

	__proto.clearAtlasSource=function(){}
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'allowMerageInAtlas',function(){
		return this._allowMerageInAtlas;
	});

	__getset(0,__proto,'atlasSource',function(){
		return this.canvas;
	});

	/**
	*是否创建私有Source,通常禁止修改
	*@param value 是否创建
	*/
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._enableMerageInAtlas;
		},function(value){
		this._enableMerageInAtlas=value;
	});

	WebGLCharImage.createOneChar=function(content,drawValue){
		var char=new WebGLCharImage(content,drawValue);
		return char;
	}

	WebGLCharImage._fontSizeReg=new RegExp("\\d+(?=px)","g");
	return WebGLCharImage;
})(Bitmap)


//class laya.webgl.resource.WebGLRenderTarget extends laya.resource.Bitmap
var WebGLRenderTarget=(function(_super){
	function WebGLRenderTarget(width,height,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
		//this._frameBuffer=null;
		//this._depthStencilBuffer=null;
		//this._surfaceFormat=0;
		//this._surfaceType=0;
		//this._depthStencilFormat=0;
		//this._mipMap=false;
		//this._repeat=false;
		//this._minFifter=0;
		//this._magFifter=0;
		(surfaceFormat===void 0)&& (surfaceFormat=/*laya.webgl.WebGLContext.RGBA*/0x1908);
		(surfaceType===void 0)&& (surfaceType=/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401);
		(depthStencilFormat===void 0)&& (depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9);
		(mipMap===void 0)&& (mipMap=false);
		(repeat===void 0)&& (repeat=false);
		(minFifter===void 0)&& (minFifter=-1);
		(magFifter===void 0)&& (magFifter=1);
		WebGLRenderTarget.__super.call(this);
		this._w=width;
		this._h=height;
		this._surfaceFormat=surfaceFormat;
		this._surfaceType=surfaceType;
		this._depthStencilFormat=depthStencilFormat;
		if (Render.isConchWebGL && this._depthStencilFormat===/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9){
			this._depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_COMPONENT16*/0x81A5;
		}
		this._mipMap=mipMap;
		this._repeat=repeat;
		this._minFifter=minFifter;
		this._magFifter=magFifter;
	}

	__class(WebGLRenderTarget,'laya.webgl.resource.WebGLRenderTarget',_super);
	var __proto=WebGLRenderTarget.prototype;
	__proto.recreateResource=function(){
		var gl=WebGL.mainContext;
		this._frameBuffer || (this._frameBuffer=gl.createFramebuffer());
		this._source || (this._source=gl.createTexture());
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
		gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,this._w,this._h,0,this._surfaceFormat,this._surfaceType,null);
		var minFifter=this._minFifter;
		var magFifter=this._magFifter;
		var repeat=this._repeat ? /*laya.webgl.WebGLContext.REPEAT*/0x2901 :/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F;
		var isPot=Arith.isPOT(this._w,this._h);
		if (isPot){
			if (this._mipMap)
				(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR_MIPMAP_LINEAR*/0x2703);
			else
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,repeat);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,repeat);
			this._mipMap && gl.generateMipmap(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1);
			}else {
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		}
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,this._frameBuffer);
		gl.framebufferTexture2D(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.COLOR_ATTACHMENT0*/0x8CE0,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source,0);
		if (this._depthStencilFormat){
			this._depthStencilBuffer || (this._depthStencilBuffer=gl.createRenderbuffer());
			gl.bindRenderbuffer(/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
			gl.renderbufferStorage(/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilFormat,this._w,this._h);
			switch (this._depthStencilFormat){
				case /*laya.webgl.WebGLContext.DEPTH_COMPONENT16*/0x81A5:
					gl.framebufferRenderbuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.DEPTH_ATTACHMENT*/0x8D00,/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
					break ;
				case /*laya.webgl.WebGLContext.STENCIL_INDEX8*/0x8D48:
					gl.framebufferRenderbuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.STENCIL_ATTACHMENT*/0x8D20,/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
					break ;
				case /*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9:
					gl.framebufferRenderbuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.DEPTH_STENCIL_ATTACHMENT*/0x821A,/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
					break ;
				}
		}
		gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,null);
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		gl.bindRenderbuffer(/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,null);
		if (isPot && this._mipMap)
			this.memorySize=this._w *this._h *4 *(1+1 / 3);
		else
		this.memorySize=this._w *this._h *4;
		this.completeCreate();
	}

	__proto.disposeResource=function(){
		if (this._frameBuffer){
			WebGL.mainContext.deleteTexture(this._source);
			WebGL.mainContext.deleteFramebuffer(this._frameBuffer);
			WebGL.mainContext.deleteRenderbuffer(this._depthStencilBuffer);
			this._source=null;
			this._frameBuffer=null;
			this._depthStencilBuffer=null;
			this.memorySize=0;
		}
	}

	__getset(0,__proto,'depthStencilBuffer',function(){
		return this._depthStencilBuffer;
	});

	__getset(0,__proto,'frameBuffer',function(){
		return this._frameBuffer;
	});

	return WebGLRenderTarget;
})(Bitmap)


//class laya.webgl.resource.WebGLSubImage extends laya.resource.Bitmap
var WebGLSubImage=(function(_super){
	function WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src){
		/**HTML Context*/
		//this._ctx=null;
		/***是否创建私有Source,值为false时不根据src创建私有WebGLTexture,同时销毁时也只清空source=null,不调用WebGL.mainContext.deleteTexture类似函数，调用资源激活前有效*/
		//this._allowMerageInAtlas=false;
		/**是否允许加入大图合集*/
		//this._enableMerageInAtlas=false;
		/**HTML Canvas，绘制子图载体,非私有数据载体*/
		//this.canvas=null;
		/**是否使用重复模式纹理寻址*/
		//this.repeat=false;
		/**是否使用mipLevel*/
		//this.mipmap=false;
		/**缩小过滤器*/
		//this.minFifter=0;
		/**放大过滤器*/
		//this.magFifter=0;
		//动态默认值，判断是否可生成miplevel
		//this.atlasImage=null;
		this.offsetX=0;
		this.offsetY=0;
		//this.src=null;
		WebGLSubImage.__super.call(this);
		this.repeat=true;
		this.mipmap=false;
		this.minFifter=-1;
		this.magFifter=-1;
		this.atlasImage=atlasImage;
		this.canvas=canvas;
		this._ctx=canvas.getContext('2d',undefined);
		this._w=width;
		this._h=height;
		this.offsetX=offsetX;
		this.offsetY=offsetY;
		this.src=src;
		this._enableMerageInAtlas=true;
		(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
	}

	__class(WebGLSubImage,'laya.webgl.resource.WebGLSubImage',_super);
	var __proto=WebGLSubImage.prototype;
	Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
	/*override public function copyTo(dec:Bitmap):void {
	var d:WebGLSubImage=dec as WebGLSubImage;
	super.copyTo(dec);
	d._ctx=_ctx;
}*/


__proto.size=function(w,h){
	this._w=w;
	this._h=h;
	this._ctx && this._ctx.size(w,h);
	this.canvas && (this.canvas.height=h,this.canvas.width=w);
}


__proto.recreateResource=function(){
	this.size(this._w,this._h);
	this._ctx.drawImage(this.atlasImage,this.offsetX,this.offsetY,this._w,this._h,0,0,this._w,this._h);
	(!(this._allowMerageInAtlas && this._enableMerageInAtlas))? (this.createWebGlTexture()):(this.memorySize=0);
	this.completeCreate();
}


__proto.createWebGlTexture=function(){
	var gl=WebGL.mainContext;
	if (!this.canvas){
		throw "create GLTextur err:no data:"+this.canvas;
	};

	var glTex=this._source=gl.createTexture();
	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
	if (Render.isConchWebGL){
		gl.texImage2DEx(true,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this.canvas);
	}

	else {
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
		gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this.canvas);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
	};

	var minFifter=this.minFifter;
	var magFifter=this.magFifter;
	var repeat=this.repeat ? /*laya.webgl.WebGLContext.REPEAT*/0x2901 :/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F;
	var isPOT=Arith.isPOT(this.width,this.height);
	if (isPOT){
		if (this.mipmap)
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR_MIPMAP_LINEAR*/0x2703);
		else
		(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,repeat);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,repeat);
		this.mipmap && gl.generateMipmap(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1);
		}else {
		(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
	}

	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
	this.canvas=null;
	if (isPOT && this.mipmap)
		this.memorySize=this._w *this._h *4 *(1+1 / 3);
	else
	this.memorySize=this._w *this._h *4;
}


__proto.disposeResource=function(){
	if (!(AtlasResourceManager.enabled && this._allowMerageInAtlas)&& this._source){
		WebGL.mainContext.deleteTexture(this._source);
		this._source=null;
		this.memorySize=0;
	}

}


//}
__proto.clearAtlasSource=function(){}
/**
*是否创建私有Source
*@return 是否创建
*/
__getset(0,__proto,'allowMerageInAtlas',function(){
	return this._allowMerageInAtlas;
});


//public var createFromPixel:Boolean=true;
__getset(0,__proto,'atlasSource',function(){
	return this.canvas;
});


/**
*是否创建私有Source,通常禁止修改
*@param value 是否创建
*/
/**
*是否创建私有Source
*@return 是否创建
*/
__getset(0,__proto,'enableMerageInAtlas',function(){
	return this._allowMerageInAtlas;
	},function(value){

	this._allowMerageInAtlas=value;
});


return WebGLSubImage;
})(Bitmap)


//class laya.webgl.shader.Shader extends laya.webgl.shader.BaseShader
var Shader=(function(_super){
	function Shader(vs,ps,saveName,nameMap){
		//this._nameMap=null;
		//shader参数别名，语义
		//this._vs=null;
		//this._ps=null;
		this._curActTexIndex=0;
		//this._reCompile=false;
		//存储一些私有变量
		this.tag={};
		//this._vshader=null;
		//this._pshader=null;
		this._program=null;
		this._params=null;
		this._paramsMap={};
		this._offset=0;
		//this._id=0;
		Shader.__super.call(this);
		if ((!vs)|| (!ps))throw "Shader Error";
		this._id=++Shader._count;
		this._vs=vs;
		this._ps=ps;
		this._nameMap=nameMap ? nameMap :{};
		saveName !=null && (Shader.sharders[saveName]=this);
	}

	__class(Shader,'laya.webgl.shader.Shader',_super);
	var __proto=Shader.prototype;
	__proto.recreateResource=function(){
		this._compile();
		this.completeCreate();
		this.memorySize=0;
	}

	//忽略尺寸尺寸
	__proto.disposeResource=function(){
		WebGL.mainContext.deleteShader(this._vshader);
		WebGL.mainContext.deleteShader(this._pshader);
		WebGL.mainContext.deleteProgram(this._program);
		this._vshader=this._pshader=this._program=null;
		this._params=null;
		this._paramsMap={};
		this.memorySize=0;
		this._curActTexIndex=0;
	}

	__proto._compile=function(){
		if (!this._vs || !this._ps || this._params)
			return;
		this._reCompile=true;
		this._params=[];
		var text=[this._vs,this._ps];
		var result;
		var gl=WebGL.mainContext;
		this._program=gl.createProgram();
		this._vshader=Shader._createShader(gl,text[0],/*laya.webgl.WebGLContext.VERTEX_SHADER*/0x8B31);
		this._pshader=Shader._createShader(gl,text[1],/*laya.webgl.WebGLContext.FRAGMENT_SHADER*/0x8B30);
		gl.attachShader(this._program,this._vshader);
		gl.attachShader(this._program,this._pshader);
		gl.linkProgram(this._program);
		if (!Render.isConchApp && !gl.getProgramParameter(this._program,/*laya.webgl.WebGLContext.LINK_STATUS*/0x8B82)){
			throw gl.getProgramInfoLog(this._program);
		};
		var one,i=0,j=0,n=0,location;
		var attribNum=0;
		if (Render.isConchApp){
			attribNum=gl.getProgramParameterEx(this._vs,this._ps,"",/*laya.webgl.WebGLContext.ACTIVE_ATTRIBUTES*/0x8B89);
		}
		else{
			attribNum=gl.getProgramParameter(this._program,/*laya.webgl.WebGLContext.ACTIVE_ATTRIBUTES*/0x8B89);
		}
		for (i=0;i < attribNum;i++){
			var attrib=null;
			if (Render.isConchApp){
				attrib=gl.getActiveAttribEx(this._vs,this._ps,"",i);
			}
			else{
				attrib=gl.getActiveAttrib(this._program,i);
			}
			location=gl.getAttribLocation(this._program,attrib.name);
			one={vartype:"attribute",glfun:null,ivartype:0,attrib:attrib,location:location,name:attrib.name,type:attrib.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
			this._params.push(one);
		};
		var nUniformNum=0;
		if (Render.isConchApp){
			nUniformNum=gl.getProgramParameterEx(this._vs,this._ps,"",/*laya.webgl.WebGLContext.ACTIVE_UNIFORMS*/0x8B86);
		}
		else{
			nUniformNum=gl.getProgramParameter(this._program,/*laya.webgl.WebGLContext.ACTIVE_UNIFORMS*/0x8B86);
		}
		for (i=0;i < nUniformNum;i++){
			var uniform=null;
			if (Render.isConchApp){
				uniform=gl.getActiveUniformEx(this._vs,this._ps,"",i);
			}
			else{
				uniform=gl.getActiveUniform(this._program,i);
			}
			location=gl.getUniformLocation(this._program,uniform.name);
			one={vartype:"uniform",glfun:null,ivartype:1,attrib:attrib,location:location,name:uniform.name,type:uniform.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
			if (one.name.indexOf('[0]')> 0){
				one.name=one.name.substr(0,one.name.length-3);
				one.isArray=true;
				one.location=gl.getUniformLocation(this._program,one.name);
			}
			this._params.push(one);
		}
		for (i=0,n=this._params.length;i < n;i++){
			one=this._params[i];
			one.indexOfParams=i;
			one.index=1;
			one.value=[one.location,null];
			one.codename=one.name;
			one.name=this._nameMap[one.codename] ? this._nameMap[one.codename] :one.codename;
			this._paramsMap[one.name]=one;
			one._this=this;
			one.uploadedValue=[];
			if (one.vartype==="attribute"){
				one.fun=this._attribute;
				continue ;
			}
			switch (one.type){
				case /*laya.webgl.WebGLContext.INT*/0x1404:
					one.fun=one.isArray ? this._uniform1iv :this._uniform1i;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT*/0x1406:
					one.fun=one.isArray ? this._uniform1fv :this._uniform1f;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT_VEC2*/0x8B50:
					one.fun=one.isArray ? this._uniform_vec2v:this._uniform_vec2;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT_VEC3*/0x8B51:
					one.fun=one.isArray ? this._uniform_vec3v:this._uniform_vec3;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT_VEC4*/0x8B52:
					one.fun=one.isArray ? this._uniform_vec4v:this._uniform_vec4;
					break ;
				case /*laya.webgl.WebGLContext.SAMPLER_2D*/0x8B5E:
					one.fun=this._uniform_sampler2D;
					break ;
				case /*laya.webgl.WebGLContext.SAMPLER_CUBE*/0x8B60:
					one.fun=this._uniform_samplerCube;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT_MAT4*/0x8B5C:
					one.glfun=gl.uniformMatrix4fv;
					one.fun=this._uniformMatrix4fv;
					break ;
				case /*laya.webgl.WebGLContext.BOOL*/0x8B56:
					one.fun=this._uniform1i;
					break ;
				case /*laya.webgl.WebGLContext.FLOAT_MAT2*/0x8B5A:
				case /*laya.webgl.WebGLContext.FLOAT_MAT3*/0x8B5B:
					throw new Error("compile shader err!");
					break ;
				default :
					throw new Error("compile shader err!");
					break ;
				}
		}
	}

	/**
	*根据变量名字获得
	*@param name
	*@return
	*/
	__proto.getUniform=function(name){
		return this._paramsMap[name];
	}

	__proto._attribute=function(one,value){
		var gl=WebGL.mainContext;
		var enableAtributes=Buffer._enableAtributes;
		var location=one.location;
		(enableAtributes[location])||(gl.enableVertexAttribArray(location));
		gl.vertexAttribPointer(location,value[0],value[1],value[2],value[3],value[4]+this._offset);
		enableAtributes[location]=Buffer._bindVertexBuffer;
		return 1;
	}

	__proto._uniform1f=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value){
			WebGL.mainContext.uniform1f(one.location,uploadedValue[0]=value);
			return 1;
		}
		return 0;
	}

	__proto._uniform1fv=function(one,value){
		if (value.length < 4){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
				WebGL.mainContext.uniform1fv(one.location,value);
				uploadedValue[0]=value[0];
				uploadedValue[1]=value[1];
				uploadedValue[2]=value[2];
				uploadedValue[3]=value[3];
				return 1;
			}
			return 0;
			}else {
			WebGL.mainContext.uniform1fv(one.location,value);
			return 1;
		}
	}

	__proto._uniform_vec2=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1]){
			WebGL.mainContext.uniform2f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec2v=function(one,value){
		if (value.length < 2){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
				WebGL.mainContext.uniform2fv(one.location,value);
				uploadedValue[0]=value[0];
				uploadedValue[1]=value[1];
				uploadedValue[2]=value[2];
				uploadedValue[3]=value[3];
				return 1;
			}
			return 0;
			}else {
			WebGL.mainContext.uniform2fv(one.location,value);
			return 1;
		}
	}

	__proto._uniform_vec3=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2]){
			WebGL.mainContext.uniform3f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec3v=function(one,value){
		WebGL.mainContext.uniform3fv(one.location,value);
		return 1;
	}

	__proto._uniform_vec4=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
			WebGL.mainContext.uniform4f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2],uploadedValue[3]=value[3]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec4v=function(one,value){
		WebGL.mainContext.uniform4fv(one.location,value);
		return 1;
	}

	__proto._uniformMatrix2fv=function(one,value){
		WebGL.mainContext.uniformMatrix2fv(one.location,false,value);
		return 1;
	}

	__proto._uniformMatrix3fv=function(one,value){
		WebGL.mainContext.uniformMatrix3fv(one.location,false,value);
		return 1;
	}

	__proto._uniformMatrix4fv=function(one,value){
		WebGL.mainContext.uniformMatrix4fv(one.location,false,value);
		return 1;
	}

	__proto._uniform1i=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value){
			WebGL.mainContext.uniform1i(one.location,uploadedValue[0]=value);
			return 1;
		}
		return 0;
	}

	__proto._uniform1iv=function(one,value){
		WebGL.mainContext.uniform1iv(one.location,value);
		return 1;
	}

	__proto._uniform_ivec2=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1]){
			WebGL.mainContext.uniform2i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_ivec2v=function(one,value){
		WebGL.mainContext.uniform2iv(one.location,value);
		return 1;
	}

	__proto._uniform_vec3i=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2]){
			WebGL.mainContext.uniform3i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec3vi=function(one,value){
		WebGL.mainContext.uniform3iv(one.location,value);
		return 1;
	}

	__proto._uniform_vec4i=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
			WebGL.mainContext.uniform4i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2],uploadedValue[3]=value[3]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec4vi=function(one,value){
		WebGL.mainContext.uniform4iv(one.location,value);
		return 1;
	}

	__proto._uniform_sampler2D=function(one,value){
		var gl=WebGL.mainContext;
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]==null){
			uploadedValue[0]=this._curActTexIndex;
			gl.uniform1i(one.location,this._curActTexIndex);
			gl.activeTexture(Shader._TEXTURES[this._curActTexIndex]);
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,value);
			this._curActTexIndex++;
			return 1;
			}else {
			gl.activeTexture(Shader._TEXTURES[uploadedValue[0]]);
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,value);
			return 0;
		}
	}

	__proto._uniform_samplerCube=function(one,value){
		var gl=WebGL.mainContext;
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]==null){
			uploadedValue[0]=this._curActTexIndex;
			gl.uniform1i(one.location,this._curActTexIndex);
			gl.activeTexture(Shader._TEXTURES[this._curActTexIndex]);
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_CUBE_MAP*/0x8513,value);
			this._curActTexIndex++;
			return 1;
			}else {
			gl.activeTexture(Shader._TEXTURES[uploadedValue[0]]);
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_CUBE_MAP*/0x8513,value);
			return 0;
		}
	}

	__proto._noSetValue=function(one){
		console.log("no....:"+one.name);
	}

	//throw new Error("upload shader err,must set value:"+one.name);
	__proto.uploadOne=function(name,value){
		this.activeResource();
		WebGLContext.UseProgram(this._program);
		var one=this._paramsMap[name];
		one.fun.call(this,one,value);
	}

	__proto.uploadTexture2D=function(value){
		Stat.shaderCall++;
		var gl=WebGL.mainContext;
		gl.activeTexture(/*laya.webgl.WebGLContext.TEXTURE0*/0x84C0);
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,value);
	}

	/**
	*提交shader到GPU
	*@param shaderValue
	*/
	__proto.upload=function(shaderValue,params){
		BaseShader.activeShader=BaseShader.bindShader=this;
		this._lastUseFrameCount===Stat.loopCount || this.activeResource();
		WebGLContext.UseProgram(this._program);
		if (this._reCompile){
			params=this._params;
			this._reCompile=false;
			}else {
			params=params || this._params;
		};
		var gl=WebGL.mainContext;
		var one,value,n=params.length,shaderCall=0;
		for (var i=0;i < n;i++){
			one=params[i];
			if ((value=shaderValue[one.name])!==null)
				shaderCall+=one.fun.call(this,one,value);
		}
		Stat.shaderCall+=shaderCall;
	}

	/**
	*按数组的定义提交
	*@param shaderValue 数组格式[name,value,...]
	*/
	__proto.uploadArray=function(shaderValue,length,_bufferUsage){
		BaseShader.activeShader=this;
		BaseShader.bindShader=this;
		this.activeResource();
		WebGLContext.UseProgram(this._program);
		var params=this._params,value;
		var one,shaderCall=0;
		for (var i=length-2;i >=0;i-=2){
			one=this._paramsMap[shaderValue[i]];
			if (!one)
				continue ;
			value=shaderValue[i+1];
			if (value !=null){
				_bufferUsage && _bufferUsage[one.name] && _bufferUsage[one.name].bind();
				shaderCall+=one.fun.call(this,one,value);
			}
		}
		Stat.shaderCall+=shaderCall;
	}

	/**
	*得到编译后的变量及相关预定义
	*@return
	*/
	__proto.getParams=function(){
		return this._params;
	}

	Shader.getShader=function(name){
		return Shader.sharders[name];
	}

	Shader.create=function(vs,ps,saveName,nameMap){
		return new Shader(vs,ps,saveName,nameMap);
	}

	Shader.withCompile=function(nameID,define,shaderName,createShader){
		if (shaderName && Shader.sharders[shaderName])
			return Shader.sharders[shaderName];
		var pre=Shader._preCompileShader[0.0002 *nameID];
		if (!pre)
			throw new Error("withCompile shader err!"+nameID);
		return pre.createShader(define,shaderName,createShader);
	}

	Shader.withCompile2D=function(nameID,mainID,define,shaderName,createShader){
		if (shaderName && Shader.sharders[shaderName])
			return Shader.sharders[shaderName];
		var pre=Shader._preCompileShader[0.0002 *nameID+mainID];
		if (!pre)
			throw new Error("withCompile shader err!"+nameID+" "+mainID);
		return pre.createShader(define,shaderName,createShader);
	}

	Shader.addInclude=function(fileName,txt){
		ShaderCompile.addInclude(fileName,txt);
	}

	Shader.preCompile=function(nameID,vs,ps,nameMap){
		var id=0.0002 *nameID;
		Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap);
	}

	Shader.preCompile2D=function(nameID,mainID,vs,ps,nameMap){
		var id=0.0002 *nameID+mainID;
		Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap);
	}

	Shader._createShader=function(gl,str,type){
		var shader=gl.createShader(type);
		gl.shaderSource(shader,str);
		gl.compileShader(shader);
		return shader;
	}

	Shader._TEXTURES=[ /*laya.webgl.WebGLContext.TEXTURE0*/0x84C0,/*laya.webgl.WebGLContext.TEXTURE1*/0x84C1,/*laya.webgl.WebGLContext.TEXTURE2*/0x84C2,/*laya.webgl.WebGLContext.TEXTURE3*/0x84C3,/*laya.webgl.WebGLContext.TEXTURE4*/0x84C4,/*laya.webgl.WebGLContext.TEXTURE5*/0x84C5,/*laya.webgl.WebGLContext.TEXTURE6*/0x84C6,,/*laya.webgl.WebGLContext.TEXTURE7*/0x84C7,/*laya.webgl.WebGLContext.TEXTURE8*/0x84C8];
	Shader._count=0;
	Shader._preCompileShader={};
	Shader.SHADERNAME2ID=0.0002;
	Shader.sharders=(Shader.sharders=[],Shader.sharders.length=0x20,Shader.sharders);
	__static(Shader,
	['nameKey',function(){return this.nameKey=new StringKey();}
	]);
	return Shader;
})(BaseShader)


//class laya.webgl.utils.Buffer2D extends laya.webgl.utils.Buffer
var Buffer2D=(function(_super){
	function Buffer2D(){
		this._maxsize=0;
		this._upload=true;
		this._uploadSize=0;
		Buffer2D.__super.call(this);
		this.lock=true;
	}

	__class(Buffer2D,'laya.webgl.utils.Buffer2D',_super);
	var __proto=Buffer2D.prototype;
	/**
	*在当前的基础上需要多大空间，单位是byte
	*@param sz
	*@return 增加大小之前的写位置。单位是byte
	*/
	__proto.needSize=function(sz){
		var old=this._byteLength;
		if (sz){
			var needsz=this._byteLength+sz;
			needsz <=this._buffer.byteLength || (this._resizeBuffer(needsz << 1,true));
			this._byteLength=needsz;
		}
		return old;
	}

	__proto._bufferData=function(){
		this._maxsize=Math.max(this._maxsize,this._byteLength);
		if (Stat.loopCount % 30==0){
			if (this._buffer.byteLength > (this._maxsize+64)){
				this.memorySize=this._buffer.byteLength;
				this._buffer=this._buffer.slice(0,this._maxsize+64);
				this._checkArrayUse();
			}
			this._maxsize=this._byteLength;
		}
		if (this._uploadSize < this._buffer.byteLength){
			this._uploadSize=this._buffer.byteLength;
			Buffer._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage);
			this.memorySize=this._uploadSize;
		}
		Buffer._gl.bufferSubData(this._bufferType,0,this._buffer);
	}

	__proto._bufferSubData=function(offset,dataStart,dataLength){
		(offset===void 0)&& (offset=0);
		(dataStart===void 0)&& (dataStart=0);
		(dataLength===void 0)&& (dataLength=0);
		this._maxsize=Math.max(this._maxsize,this._byteLength);
		if (Stat.loopCount % 30==0){
			if (this._buffer.byteLength > (this._maxsize+64)){
				this.memorySize=this._buffer.byteLength;
				this._buffer=this._buffer.slice(0,this._maxsize+64);
				this._checkArrayUse();
			}
			this._maxsize=this._byteLength;
		}
		if (this._uploadSize < this._buffer.byteLength){
			this._uploadSize=this._buffer.byteLength;
			Buffer._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage);
			this.memorySize=this._uploadSize;
		}
		if (dataStart || dataLength){
			var subBuffer=this._buffer.slice(dataStart,dataLength);
			Buffer._gl.bufferSubData(this._bufferType,offset,subBuffer);
			}else {
			Buffer._gl.bufferSubData(this._bufferType,offset,this._buffer);
		}
	}

	__proto._checkArrayUse=function(){}
	__proto._bind_upload=function(){
		if (!this._upload)
			return false;
		this._upload=false;
		this._bind();
		this._bufferData();
		return true;
	}

	__proto._bind_subUpload=function(offset,dataStart,dataLength){
		(offset===void 0)&& (offset=0);
		(dataStart===void 0)&& (dataStart=0);
		(dataLength===void 0)&& (dataLength=0);
		if (!this._upload)
			return false;
		this._upload=false;
		this._bind();
		this._bufferSubData(offset,dataStart,dataLength);
		return true;
	}

	__proto._resizeBuffer=function(nsz,copy){
		if (nsz < this._buffer.byteLength)
			return this;
		this.memorySize=nsz;
		if (copy && this._buffer && this._buffer.byteLength > 0){
			var newbuffer=new ArrayBuffer(nsz);
			var n=new Uint8Array(newbuffer);
			n.set(new Uint8Array(this._buffer),0);
			this._buffer=newbuffer;
		}else
		this._buffer=new ArrayBuffer(nsz);
		this._checkArrayUse();
		this._upload=true;
		return this;
	}

	__proto.append=function(data){
		this._upload=true;
		var byteLen=0,n;
		byteLen=data.byteLength;
		if ((data instanceof Uint8Array)){
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new Uint8Array(this._buffer,this._byteLength);
			}else if ((data instanceof Uint16Array)){
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new Uint16Array(this._buffer,this._byteLength);
			}else if ((data instanceof Float32Array)){
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new Float32Array(this._buffer,this._byteLength);
		}
		n.set(data,0);
		this._byteLength+=byteLen;
		this._checkArrayUse();
	}

	/**
	*附加Uint16Array的数据。数据长度是len。byte的话要*2
	*@param data
	*@param len
	*/
	__proto.appendU16Array=function(data,len){
		this._resizeBuffer(this._byteLength+len*2,true);
		var u=new Uint16Array(this._buffer,this._byteLength,len);
		for (var i=0;i < len;i++){
			u[i]=data[i];
		}
		this._byteLength+=len *2;
		this._checkArrayUse();
	}

	__proto.appendEx=function(data,type){
		this._upload=true;
		var byteLen=0,n;
		byteLen=data.byteLength;
		this._resizeBuffer(this._byteLength+byteLen,true);
		n=new type(this._buffer,this._byteLength);
		n.set(data,0);
		this._byteLength+=byteLen;
		this._checkArrayUse();
	}

	__proto.appendEx2=function(data,type,dataLen,perDataLen){
		(perDataLen===void 0)&& (perDataLen=1);
		this._upload=true;
		var byteLen=0,n;
		byteLen=dataLen*perDataLen;
		this._resizeBuffer(this._byteLength+byteLen,true);
		n=new type(this._buffer,this._byteLength);
		var i=0;
		for (i=0;i < dataLen;i++){
			n[i]=data[i];
		}
		this._byteLength+=byteLen;
		this._checkArrayUse();
	}

	__proto.getBuffer=function(){
		return this._buffer;
	}

	__proto.setNeedUpload=function(){
		this._upload=true;
	}

	__proto.getNeedUpload=function(){
		return this._upload;
	}

	__proto.upload=function(){
		var scuess=this._bind_upload();
		Buffer._gl.bindBuffer(this._bufferType,null);
		Buffer._bindActive[this._bufferType]=null;
		BaseShader.activeShader=null
		return scuess;
	}

	__proto.subUpload=function(offset,dataStart,dataLength){
		(offset===void 0)&& (offset=0);
		(dataStart===void 0)&& (dataStart=0);
		(dataLength===void 0)&& (dataLength=0);
		var scuess=this._bind_subUpload();
		Buffer._gl.bindBuffer(this._bufferType,null);
		Buffer._bindActive[this._bufferType]=null;
		BaseShader.activeShader=null
		return scuess;
	}

	__proto.disposeResource=function(){
		_super.prototype.disposeResource.call(this);
		this._upload=true;
		this._uploadSize=0;
	}

	__proto.clear=function(){
		this._byteLength=0;
		this._upload=true;
	}

	__getset(0,__proto,'bufferLength',function(){
		return this._buffer.byteLength;
	});

	__getset(0,__proto,'byteLength',null,function(value){
		if (this._byteLength===value)
			return;
		value <=this._buffer.byteLength || (this._resizeBuffer(value *2+256,true));
		this._byteLength=value;
	});

	Buffer2D.__int__=function(gl){
		IndexBuffer2D.QuadrangleIB=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
		GlUtils.fillIBQuadrangle(IndexBuffer2D.QuadrangleIB,16);
	}

	Buffer2D.FLOAT32=4;
	Buffer2D.SHORT=2;
	return Buffer2D;
})(Buffer)


//class laya.webgl.shader.d2.value.GlowSV extends laya.webgl.shader.d2.value.TextureSV
var GlowSV=(function(_super){
	function GlowSV(args){
		this.u_blurX=false;
		this.u_color=null;
		this.u_offset=null;
		this.u_strength=NaN;
		this.u_texW=0;
		this.u_texH=0;
		GlowSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.FILTERGLOW*/0x08| /*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01);
	}

	__class(GlowSV,'laya.webgl.shader.d2.value.GlowSV',_super);
	var __proto=GlowSV.prototype;
	__proto.setValue=function(vo){
		_super.prototype.setValue.call(this,vo);
	}

	__proto.clear=function(){
		_super.prototype.clear.call(this);
	}

	return GlowSV;
})(TextureSV)


//class laya.webgl.shader.d2.value.TextSV extends laya.webgl.shader.d2.value.TextureSV
var TextSV=(function(_super){
	function TextSV(args){
		TextSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.COLORADD*/0x40);
		this.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.COLORADD*/0x40);
	}

	__class(TextSV,'laya.webgl.shader.d2.value.TextSV',_super);
	var __proto=TextSV.prototype;
	__proto.release=function(){
		TextSV.pool[TextSV._length++]=this;
		this.clear();
	}

	__proto.clear=function(){
		_super.prototype.clear.call(this);
	}

	TextSV.create=function(){
		if (TextSV._length)return TextSV.pool[--TextSV._length];
		else return new TextSV(null);
	}

	TextSV.pool=[];
	TextSV._length=0;
	return TextSV;
})(TextureSV)


//class laya.webgl.shader.d2.Shader2X extends laya.webgl.shader.Shader
var Shader2X=(function(_super){
	function Shader2X(vs,ps,saveName,nameMap){
		this._params2dQuick1=null;
		this._params2dQuick2=null;
		this._shaderValueWidth=NaN;
		this._shaderValueHeight=NaN;
		Shader2X.__super.call(this,vs,ps,saveName,nameMap);
	}

	__class(Shader2X,'laya.webgl.shader.d2.Shader2X',_super);
	var __proto=Shader2X.prototype;
	__proto.upload2dQuick1=function(shaderValue){
		this.upload(shaderValue,this._params2dQuick1 || this._make2dQuick1());
	}

	__proto._make2dQuick1=function(){
		if (!this._params2dQuick1){
			this.activeResource();
			this._params2dQuick1=[];
			var params=this._params,one;
			for (var i=0,n=params.length;i < n;i++){
				one=params[i];
				if (!Render.isFlash && (one.name==="size" || one.name==="position" || one.name==="texcoord"))continue ;
				this._params2dQuick1.push(one);
			}
		}
		return this._params2dQuick1;
	}

	__proto.disposeResource=function(){
		_super.prototype.disposeResource.call(this);
		this._params2dQuick1=null;
		this._params2dQuick2=null;
	}

	__proto.upload2dQuick2=function(shaderValue){
		this.upload(shaderValue,this._params2dQuick2 || this._make2dQuick2());
	}

	__proto._make2dQuick2=function(){
		if (!this._params2dQuick2){
			this.activeResource();
			this._params2dQuick2=[];
			var params=this._params,one;
			for (var i=0,n=params.length;i < n;i++){
				one=params[i];
				if (!Render.isFlash && (one.name==="size"))continue ;
				this._params2dQuick2.push(one);
			}
		}
		return this._params2dQuick2;
	}

	Shader2X.create=function(vs,ps,saveName,nameMap){
		return new Shader2X(vs,ps,saveName,nameMap);
	}

	return Shader2X;
})(Shader)


//class laya.webgl.utils.IndexBuffer2D extends laya.webgl.utils.Buffer2D
var IndexBuffer2D=(function(_super){
	function IndexBuffer2D(bufferUsage){
		this._uint8Array=null;
		this._uint16Array=null;
		(bufferUsage===void 0)&& (bufferUsage=/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
		IndexBuffer2D.__super.call(this);
		this._bufferUsage=bufferUsage;
		this._bufferType=/*laya.webgl.WebGLContext.ELEMENT_ARRAY_BUFFER*/0x8893;
		Render.isFlash || (this._buffer=new ArrayBuffer(8));
	}

	__class(IndexBuffer2D,'laya.webgl.utils.IndexBuffer2D',_super);
	var __proto=IndexBuffer2D.prototype;
	__proto._checkArrayUse=function(){
		this._uint8Array && (this._uint8Array=new Uint8Array(this._buffer));
		this._uint16Array && (this._uint16Array=new Uint16Array(this._buffer));
	}

	__proto.getUint8Array=function(){
		return this._uint8Array || (this._uint8Array=new Uint8Array(this._buffer));
	}

	__proto.getUint16Array=function(){
		return this._uint16Array || (this._uint16Array=new Uint16Array(this._buffer));
	}

	__proto.destory=function(){
		this._uint16Array=null;
		this._uint8Array=null;
		this._buffer=null;
	}

	IndexBuffer2D.QuadrangleIB=null;
	IndexBuffer2D.create=function(bufferUsage){
		(bufferUsage===void 0)&& (bufferUsage=/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
		return new IndexBuffer2D(bufferUsage);
	}

	return IndexBuffer2D;
})(Buffer2D)


//class laya.webgl.utils.VertexBuffer2D extends laya.webgl.utils.Buffer2D
var VertexBuffer2D=(function(_super){
	function VertexBuffer2D(vertexStride,bufferUsage){
		this._floatArray32=null;
		this._vertexStride=0;
		VertexBuffer2D.__super.call(this);
		this._vertexStride=vertexStride;
		this._bufferUsage=bufferUsage;
		this._bufferType=/*laya.webgl.WebGLContext.ARRAY_BUFFER*/0x8892;
		Render.isFlash || (this._buffer=new ArrayBuffer(8));
		this.getFloat32Array();
	}

	__class(VertexBuffer2D,'laya.webgl.utils.VertexBuffer2D',_super);
	var __proto=VertexBuffer2D.prototype;
	__proto.getFloat32Array=function(){
		return this._floatArray32 || (this._floatArray32=new Float32Array(this._buffer));
	}

	__proto.bind=function(ibBuffer){
		(ibBuffer)&& (ibBuffer._bind());
		this._bind();
	}

	__proto.insertData=function(data,pos){
		var vbdata=this.getFloat32Array();
		vbdata.set(data,pos);
		this._upload=true;
	}

	__proto.bind_upload=function(ibBuffer){
		(ibBuffer._bind_upload())|| (ibBuffer._bind());
		(this._bind_upload())|| (this._bind());
	}

	__proto._checkArrayUse=function(){
		this._floatArray32 && (this._floatArray32=new Float32Array(this._buffer));
	}

	__proto.disposeResource=function(){
		_super.prototype.disposeResource.call(this);
		return;
		var enableAtributes=Buffer._enableAtributes;
		if (!Render.isConchWebGL){
			for (var i=0;i < 10;i++){
				WebGL.mainContext.disableVertexAttribArray(i);
				enableAtributes[i]=null;
			}
		}
	}

	//}
	__proto.destory=function(){
		this._byteLength=0;
		this._upload=true;
		this._buffer=null;
		this._floatArray32=null;
	}

	__getset(0,__proto,'vertexStride',function(){
		return this._vertexStride;
	});

	VertexBuffer2D.create=function(vertexStride,bufferUsage){
		(bufferUsage===void 0)&& (bufferUsage=/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
		return new VertexBuffer2D(vertexStride,bufferUsage);
	}

	return VertexBuffer2D;
})(Buffer2D)


//class laya.webgl.resource.WebGLImage extends laya.resource.HTMLImage
var WebGLImage=(function(_super){
	function WebGLImage(data,def,format,mipmap){
		/**@private */
		this._format=0;
		/**@private */
		this._mipmap=false;
		/***是否创建私有Source,值为false时不根据src创建私有WebGLTexture,同时销毁时也只清空source=null,不调用WebGL.mainContext.deleteTexture类似函数，调用资源激活前有效*/
		this._allowMerageInAtlas=false;
		/**是否允许加入大图合集*/
		this._enableMerageInAtlas=false;
		/**是否使用重复模式纹理寻址*/
		this.repeat=false;
		/**@private */
		this._image=null;
		/**缩小过滤器*/
		this.minFifter=0;
		/**放大过滤器*/
		this.magFifter=0;
		(format===void 0)&& (format=/*laya.webgl.WebGLContext.RGBA*/0x1908);
		(mipmap===void 0)&& (mipmap=true);
		WebGLImage.__super.call(this,data,def);
		this._format=format;
		this._mipmap=mipmap;
		this.repeat=false;
		this.minFifter=-1;
		this.magFifter=-1;
		if ((typeof data=='string')){
			this._url=data;
			this._src=data;
			this._image=new Browser.window.Image();
			if (def){
				def.onload && (this.onload=def.onload);
				def.onerror && (this.onerror=def.onerror);
				def.onCreate && def.onCreate(this);
			}
			this._image.crossOrigin=(data && (data.indexOf("data:")==0))? null :"";
			(data)&& (this._image.src=data);
			}else if ((data instanceof ArrayBuffer)){
			this._src=def;
			this._url=this._src;
			var readData=new Byte(data);
			var magicNumber=readData.readUTFBytes(4);
			var version=readData.readUTFBytes(2);
			var dataType=readData.getInt16();
			readData.endian=/*laya.utils.Byte.BIG_ENDIAN*/"bigEndian";
			this._w=readData.getInt16();
			this._h=readData.getInt16();
			var originalWidth=readData.getInt16();
			var originalHeight=readData.getInt16();
			this._image=new Uint8Array(data,readData.pos);
			this._format=WebGL.compressEtc1.COMPRESSED_RGB_ETC1_WEBGL;
			(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
			}else {
			this._src=def;
			this._url=this._src;
			this._image=data["source"] || data;
			this.onresize();
		}
		this._$5__enableMerageInAtlas=true;
	}

	__class(WebGLImage,'laya.webgl.resource.WebGLImage',_super);
	var __proto=WebGLImage.prototype;
	Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
	__proto._init_=function(src,def){}
	__proto._createWebGlTexture=function(){
		if (!this._image){
			throw "create GLTextur err:no data:"+this._image;
		};
		var gl=WebGL.mainContext;
		var glTex=this._source=gl.createTexture();
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
		if (Render.isConchWebGL){
			switch (this._format){
				case /*laya.webgl.WebGLContext.RGBA*/0x1908:
					gl.texImage2DEx(true,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,this._format,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this._image);
					break ;
				case WebGL.compressEtc1.COMPRESSED_RGB_ETC1_WEBGL:
					gl.compressedTexImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,this._format,this._w,this._h,0,this._image);
					break ;
				}
		}
		else {
			gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
			switch (this._format){
				case /*laya.webgl.WebGLContext.RGBA*/0x1908:
					gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,this._format,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this._image);
					break ;
				case WebGL.compressEtc1.COMPRESSED_RGB_ETC1_WEBGL:
					gl.compressedTexImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,this._format,this._w,this._h,0,this._image);
					break ;
				}
			gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
		};
		var minFifter=this.minFifter;
		var magFifter=this.magFifter;
		var repeat=this.repeat ? /*laya.webgl.WebGLContext.REPEAT*/0x2901 :/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F;
		var isPot=Arith.isPOT(this._w,this._h);
		if (isPot){
			if (this.mipmap)
				(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR_MIPMAP_LINEAR*/0x2703);
			else
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,repeat);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,repeat);
			this.mipmap && gl.generateMipmap(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1);
			}else {
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		}
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		this._image.onload=null;
		this._image=null;
		if (isPot && this.mipmap)
			this.memorySize=this._w *this._h *4 *(1+1 / 3);
		else
		this.memorySize=this._w *this._h *4;
		this._recreateLock=false;
	}

	/***重新创建资源，如果异步创建中被强制释放再创建，则需等待释放完成后再重新加载创建。*/
	__proto.recreateResource=function(){
		var _$this=this;
		if (this._src==null || this._src==="")
			return;
		this._needReleaseAgain=false;
		if (!this._image){
			this._recreateLock=true;
			var _this=this;
			this._image=new Browser.window.Image();
			this._image.crossOrigin=this._src.indexOf("data:")==0 ? null :"";
			this._image.onload=function (){
				if (_this._needReleaseAgain){
					_this._needReleaseAgain=false;
					_this._image.onload=null;
					_this._image=null;
					return;
				}
				(!(_this._allowMerageInAtlas && _this._enableMerageInAtlas))? (_this._createWebGlTexture()):(_$this.memorySize=0,_$this._recreateLock=false);
				_this.completeCreate();
			};
			this._image.src=this._src;
			}else {
			if (this._recreateLock){
				return;
			}
			(!(this._allowMerageInAtlas && this._$5__enableMerageInAtlas))? (this._createWebGlTexture()):(this.memorySize=0,this._recreateLock=false);
			this.completeCreate();
		}
	}

	/***销毁资源*/
	__proto.disposeResource=function(){
		if (this._recreateLock){
			this._needReleaseAgain=true;
		}
		if (this._source){
			WebGL.mainContext.deleteTexture(this._source);
			this._source=null;
			this._image=null;
			this.memorySize=0;
		}
	}

	/***调整尺寸*/
	__proto.onresize=function(){
		this._w=this._image.width;
		this._h=this._image.height;
		(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
	}

	__proto.clearAtlasSource=function(){
		this._image=null;
	}

	/**
	*获取纹理格式。
	*/
	__getset(0,__proto,'format',function(){
		return this._format;
	});

	/**
	*是否创建私有Source,通常禁止修改
	*@param value 是否创建
	*/
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._$5__enableMerageInAtlas;
		},function(value){
		this._$5__enableMerageInAtlas=value;
	});

	/**
	*获取是否具有mipmap。
	*/
	__getset(0,__proto,'mipmap',function(){
		return this._mipmap;
	});

	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'allowMerageInAtlas',function(){
		return this._allowMerageInAtlas;
	});

	__getset(0,__proto,'atlasSource',function(){
		return this._image;
	});

	/***
	*设置onload函数
	*@param value onload函数
	*/
	__getset(0,__proto,'onload',null,function(value){
		var _$this=this;
		this._onload=value;
		this._image && (this._image.onload=this._onload !=null ? (function(){
			_$this.onresize();
			_$this._onload();
		}):null);
	});

	/***
	*设置onerror函数
	*@param value onerror函数
	*/
	__getset(0,__proto,'onerror',null,function(value){
		var _$this=this;
		this._onerror=value;
		this._image && (this._image.onerror=this._onerror !=null ? (function(){
			_$this._onerror()
		}):null);
	});

	return WebGLImage;
})(HTMLImage)


	Laya.__init([DrawText,AtlasGrid,WebGLContext2D,ShaderCompile]);
})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Bezier=laya.maths.Bezier,Browser=laya.utils.Browser,Byte=laya.utils.Byte,Event=laya.events.Event;
	var EventDispatcher=laya.events.EventDispatcher,Graphics=laya.display.Graphics,HTMLCanvas=laya.resource.HTMLCanvas;
	var Handler=laya.utils.Handler,Loader=laya.net.Loader,MathUtil=laya.maths.MathUtil,Matrix=laya.maths.Matrix;
	var Node=laya.display.Node,Point=laya.maths.Point,Rectangle=laya.maths.Rectangle,Render=laya.renders.Render;
	var RenderContext=laya.renders.RenderContext,Resource=laya.resource.Resource,RunDriver=laya.utils.RunDriver;
	var Sprite=laya.display.Sprite,Stat=laya.utils.Stat,Texture=laya.resource.Texture,URL=laya.net.URL,Utils=laya.utils.Utils;
/**
*@private
*@author ...
*/
//class laya.ani.AnimationContent
var AnimationContent=(function(){
	function AnimationContent(){
		this.nodes=null;
		this.name=null;
		this.playTime=NaN;
		this.bone3DMap=null;
		this.totalKeyframeDatasLength=0;
	}

	__class(AnimationContent,'laya.ani.AnimationContent');
	return AnimationContent;
})()


/**
*@private
*@author ...
*/
//class laya.ani.AnimationNodeContent
var AnimationNodeContent=(function(){
	function AnimationNodeContent(){
		this.name=null;
		this.parentIndex=0;
		this.parent=null;
		this.keyframeWidth=0;
		this.lerpType=0;
		this.interpolationMethod=null;
		this.childs=null;
		this.keyFrame=null;
		//=new Vector.<KeyFramesContent>;
		this.playTime=NaN;
		this.extenData=null;
		this.dataOffset=0;
	}

	__class(AnimationNodeContent,'laya.ani.AnimationNodeContent');
	return AnimationNodeContent;
})()


/**
*@private
*/
//class laya.ani.AnimationParser01
var AnimationParser01=(function(){
	function AnimationParser01(){}
	__class(AnimationParser01,'laya.ani.AnimationParser01');
	AnimationParser01.parse=function(templet,reader){
		var data=reader.__getBuffer();
		var i=0,j=0,k=0,n=0,l=0,m=0,o=0;
		var aniClassName=reader.readUTFString();
		templet._aniClassName=aniClassName;
		var strList=reader.readUTFString().split("\n");
		var aniCount=reader.getUint8();
		var publicDataPos=reader.getUint32();
		var publicExtDataPos=reader.getUint32();
		var publicData;
		if (publicDataPos > 0)
			publicData=data.slice(publicDataPos,publicExtDataPos);
		var publicRead=new Byte(publicData);
		if (publicExtDataPos > 0)
			templet._publicExtData=data.slice(publicExtDataPos,data.byteLength);
		templet._useParent=!!reader.getUint8();
		templet._anis.length=aniCount;
		for (i=0;i < aniCount;i++){
			var ani=templet._anis[i]=new AnimationContent();
			{};
			ani.nodes=new Array;
			var name=ani.name=strList[reader.getUint16()];
			templet._aniMap[name]=i;
			ani.bone3DMap={};
			ani.playTime=reader.getFloat32();
			var boneCount=ani.nodes.length=reader.getUint8();
			ani.totalKeyframeDatasLength=0;
			for (j=0;j < boneCount;j++){
				var node=ani.nodes[j]=new AnimationNodeContent();
				{};
				node.childs=[];
				var nameIndex=reader.getInt16();
				if (nameIndex >=0){
					node.name=strList[nameIndex];
					ani.bone3DMap[node.name]=j;
				}
				node.keyFrame=new Array;
				node.parentIndex=reader.getInt16();
				node.parentIndex==-1 ? node.parent=null :node.parent=ani.nodes[node.parentIndex]
				node.lerpType=reader.getUint8();
				var keyframeParamsOffset=reader.getUint32();
				publicRead.pos=keyframeParamsOffset;
				var keyframeDataCount=node.keyframeWidth=publicRead.getUint16();
				ani.totalKeyframeDatasLength+=keyframeDataCount;
				if (node.lerpType===0 || node.lerpType===1){
					node.interpolationMethod=[];
					node.interpolationMethod.length=keyframeDataCount;
					for (k=0;k < keyframeDataCount;k++)
					node.interpolationMethod[k]=AnimationTemplet.interpolation[publicRead.getUint8()];
				}
				if (node.parent !=null)
					node.parent.childs.push(node);
				var privateDataLen=reader.getUint16();
				if (privateDataLen > 0){
					node.extenData=data.slice(reader.pos,reader.pos+privateDataLen);
					reader.pos+=privateDataLen;
				};
				var keyframeCount=reader.getUint16();
				node.keyFrame.length=keyframeCount;
				var startTime=0;
				var keyFrame;
				for (k=0,n=keyframeCount;k < n;k++){
					keyFrame=node.keyFrame[k]=new KeyFramesContent();
					{};
					keyFrame.duration=reader.getFloat32();
					keyFrame.startTime=startTime;
					if (node.lerpType===2){
						keyFrame.interpolationData=[];
						var interDataLength=reader.getUint8();
						var lerpType=0;
						lerpType=reader.getFloat32();
						switch (lerpType){
							case 254:
								keyFrame.interpolationData.length=keyframeDataCount;
								for (o=0;o < keyframeDataCount;o++)
								keyFrame.interpolationData[o]=0;
								break ;
							case 255:
								keyFrame.interpolationData.length=keyframeDataCount;
								for (o=0;o < keyframeDataCount;o++)
								keyFrame.interpolationData[o]=5;
								break ;
							default :
								keyFrame.interpolationData.push(lerpType);
								for (m=1;m < interDataLength;m++){
									keyFrame.interpolationData.push(reader.getFloat32());
								}
							}
					}
					keyFrame.data=new Float32Array(keyframeDataCount);
					for (l=0;l < keyframeDataCount;l++){
						keyFrame.data[l]=reader.getFloat32();
						if (keyFrame.data[l] >-0.00000001 && keyFrame.data[l] < 0.00000001)keyFrame.data[l]=0;
					}
					startTime+=keyFrame.duration;
				}
				keyFrame.startTime=ani.playTime;
				node.playTime=ani.playTime;
				templet._calculateKeyFrame(node,keyframeCount,keyframeDataCount);
			}
		}
	}

	return AnimationParser01;
})()


/**
*@private
*/
//class laya.ani.AnimationParser02
var AnimationParser02=(function(){
	function AnimationParser02(){}
	__class(AnimationParser02,'laya.ani.AnimationParser02');
	AnimationParser02.READ_DATA=function(){
		AnimationParser02._DATA.offset=AnimationParser02._reader.getUint32();
		AnimationParser02._DATA.size=AnimationParser02._reader.getUint32();
	}

	AnimationParser02.READ_BLOCK=function(){
		var count=AnimationParser02._BLOCK.count=AnimationParser02._reader.getUint16();
		var blockStarts=AnimationParser02._BLOCK.blockStarts=[];
		var blockLengths=AnimationParser02._BLOCK.blockLengths=[];
		for (var i=0;i < count;i++){
			blockStarts.push(AnimationParser02._reader.getUint32());
			blockLengths.push(AnimationParser02._reader.getUint32());
		}
	}

	AnimationParser02.READ_STRINGS=function(){
		var offset=AnimationParser02._reader.getUint32();
		var count=AnimationParser02._reader.getUint16();
		var prePos=AnimationParser02._reader.pos;
		AnimationParser02._reader.pos=offset+AnimationParser02._DATA.offset;
		for (var i=0;i < count;i++)
		AnimationParser02._strings[i]=AnimationParser02._reader.readUTFString();
		AnimationParser02._reader.pos=prePos;
	}

	AnimationParser02.parse=function(templet,reader){
		AnimationParser02._templet=templet;
		AnimationParser02._reader=reader;
		var arrayBuffer=reader.__getBuffer();
		AnimationParser02.READ_DATA();
		AnimationParser02.READ_BLOCK();
		AnimationParser02.READ_STRINGS();
		for (var i=0,n=AnimationParser02._BLOCK.count;i < n;i++){
			var index=reader.getUint16();
			var blockName=AnimationParser02._strings[index];
			var fn=AnimationParser02["READ_"+blockName];
			if (fn==null)
				throw new Error("model file err,no this function:"+index+" "+blockName);
			else
			fn.call();
		}
	}

	AnimationParser02.READ_ANIMATIONS=function(){
		var reader=AnimationParser02._reader;
		var arrayBuffer=reader.__getBuffer();
		var i=0,j=0,k=0,n=0,l=0;
		var keyframeWidth=reader.getUint16();
		var interpolationMethod=[];
		interpolationMethod.length=keyframeWidth;
		for (i=0;i < keyframeWidth;i++)
		interpolationMethod[i]=AnimationTemplet.interpolation[reader.getByte()];
		var aniCount=reader.getUint8();
		AnimationParser02._templet._anis.length=aniCount;
		for (i=0;i < aniCount;i++){
			var ani=AnimationParser02._templet._anis[i]=
			{};
			ani.nodes=new Array;
			var aniName=ani.name=AnimationParser02._strings[reader.getUint16()];
			AnimationParser02._templet._aniMap[aniName]=i;
			ani.bone3DMap={};
			ani.playTime=reader.getFloat32();
			var boneCount=ani.nodes.length=reader.getInt16();
			ani.totalKeyframeDatasLength=0;
			for (j=0;j < boneCount;j++){
				var node=ani.nodes[j]=
				{};
				node.keyframeWidth=keyframeWidth;
				node.childs=[];
				var nameIndex=reader.getUint16();
				if (nameIndex >=0){
					node.name=AnimationParser02._strings[nameIndex];
					ani.bone3DMap[node.name]=j;
				}
				node.keyFrame=new Array;
				node.parentIndex=reader.getInt16();
				node.parentIndex==-1 ? node.parent=null :node.parent=ani.nodes[node.parentIndex]
				ani.totalKeyframeDatasLength+=keyframeWidth;
				node.interpolationMethod=interpolationMethod;
				if (node.parent !=null)
					node.parent.childs.push(node);
				var keyframeCount=reader.getUint16();
				node.keyFrame.length=keyframeCount;
				var keyFrame=null,lastKeyFrame=null;
				for (k=0,n=keyframeCount;k < n;k++){
					keyFrame=node.keyFrame[k]=
					{};
					keyFrame.startTime=reader.getFloat32();
					(lastKeyFrame)&& (lastKeyFrame.duration=keyFrame.startTime-lastKeyFrame.startTime);
					var offset=AnimationParser02._DATA.offset;
					var keyframeDataOffset=reader.getUint32();
					var keyframeDataLength=keyframeWidth *4;
					var keyframeArrayBuffer=arrayBuffer.slice(offset+keyframeDataOffset,offset+keyframeDataOffset+keyframeDataLength);
					keyFrame.data=new Float32Array(keyframeArrayBuffer);
					lastKeyFrame=keyFrame;
				}
				keyFrame.duration=0;
				node.playTime=ani.playTime;
				AnimationParser02._templet._calculateKeyFrame(node,keyframeCount,keyframeWidth);
			}
		}
	}

	AnimationParser02._templet=null;
	AnimationParser02._reader=null;
	AnimationParser02._strings=[];
	__static(AnimationParser02,
	['_BLOCK',function(){return this._BLOCK={count:0};},'_DATA',function(){return this._DATA={offset:0,size:0};}
	]);
	return AnimationParser02;
})()


/**
*@private
*/
//class laya.ani.AnimationState
var AnimationState=(function(){
	function AnimationState(){}
	__class(AnimationState,'laya.ani.AnimationState');
	AnimationState.stopped=0;
	AnimationState.paused=1;
	AnimationState.playing=2;
	return AnimationState;
})()


/**
*@private
*/
//class laya.ani.bone.Bone
var Bone=(function(){
	function Bone(){
		this.name=null;
		this.root=null;
		this.parentBone=null;
		this.length=10;
		this.transform=null;
		this.inheritScale=true;
		this.inheritRotation=true;
		this.rotation=NaN;
		this.resultRotation=NaN;
		this.d=-1;
		this._tempMatrix=null;
		this._sprite=null;
		this.resultTransform=new Transform();
		this.resultMatrix=new Matrix();
		this._children=[];
	}

	__class(Bone,'laya.ani.bone.Bone');
	var __proto=Bone.prototype;
	__proto.setTempMatrix=function(matrix){
		this._tempMatrix=matrix;
		var i=0,n=0;
		var tBone;
		for (i=0,n=this._children.length;i < n;i++){
			tBone=this._children[i];
			tBone.setTempMatrix(this._tempMatrix);
		}
	}

	__proto.update=function(pMatrix){
		this.rotation=this.transform.skX;
		var tResultMatrix;
		if (pMatrix){
			tResultMatrix=this.resultTransform.getMatrix();
			Matrix.mul(tResultMatrix,pMatrix,this.resultMatrix);
			this.resultRotation=this.rotation;
		}
		else {
			this.resultRotation=this.rotation+this.parentBone.resultRotation;
			if (this.parentBone){
				if (this.inheritRotation && this.inheritScale){
					tResultMatrix=this.resultTransform.getMatrix();
					Matrix.mul(tResultMatrix,this.parentBone.resultMatrix,this.resultMatrix);
				}
				else {
					var temp=0;
					var parent=this.parentBone;
					var tAngle=NaN;
					var cos=NaN;
					var sin=NaN;
					var tParentMatrix=this.parentBone.resultMatrix;
					tResultMatrix=this.resultTransform.getMatrix();
					var worldX=tParentMatrix.a *tResultMatrix.tx+tParentMatrix.c *tResultMatrix.ty+tParentMatrix.tx;
					var worldY=tParentMatrix.b *tResultMatrix.tx+tParentMatrix.d *tResultMatrix.ty+tParentMatrix.ty;
					var tTestMatrix=new Matrix();
					if (this.inheritRotation){
						tAngle=Math.atan2(parent.resultMatrix.b,parent.resultMatrix.a);
						cos=Math.cos(tAngle),sin=Math.sin(tAngle);
						tTestMatrix.setTo(cos,sin,-sin,cos,0,0);
						Matrix.mul(this._tempMatrix,tTestMatrix,Matrix.TEMP);
						Matrix.TEMP.copyTo(tTestMatrix);
						tResultMatrix=this.resultTransform.getMatrix();
						Matrix.mul(tResultMatrix,tTestMatrix,this.resultMatrix);
						if (this.resultTransform.scX *this.resultTransform.scY < 0){
							this.resultMatrix.rotate(Math.PI*0.5);
						}
						this.resultMatrix.tx=worldX;
						this.resultMatrix.ty=worldY;
					}
					else if (this.inheritScale){
						tResultMatrix=this.resultTransform.getMatrix();
						Matrix.TEMP.identity();
						Matrix.TEMP.d=this.d;
						Matrix.mul(tResultMatrix,Matrix.TEMP,this.resultMatrix);
						this.resultMatrix.tx=worldX;
						this.resultMatrix.ty=worldY;
					}
					else {
						tResultMatrix=this.resultTransform.getMatrix();
						Matrix.TEMP.identity();
						Matrix.TEMP.d=this.d;
						Matrix.mul(tResultMatrix,Matrix.TEMP,this.resultMatrix);
						this.resultMatrix.tx=worldX;
						this.resultMatrix.ty=worldY;
					}
				}
			}
			else {
				tResultMatrix=this.resultTransform.getMatrix();
				tResultMatrix.copyTo(this.resultMatrix);
			}
		};
		var i=0,n=0;
		var tBone;
		for (i=0,n=this._children.length;i < n;i++){
			tBone=this._children[i];
			tBone.update();
		}
	}

	__proto.updateChild=function(){
		var i=0,n=0;
		var tBone;
		for (i=0,n=this._children.length;i < n;i++){
			tBone=this._children[i];
			tBone.update();
		}
	}

	__proto.setRotation=function(rd){
		if (this._sprite){
			this._sprite.rotation=rd *180 / Math.PI;
		}
	}

	__proto.updateDraw=function(x,y){
		if (!Bone.ShowBones || Bone.ShowBones[this.name]){
			if (this._sprite){
				this._sprite.x=x+this.resultMatrix.tx;
				this._sprite.y=y+this.resultMatrix.ty;
			}
			else {
				this._sprite=new Sprite();
				this._sprite.graphics.drawCircle(0,0,5,"#ff0000");
				this._sprite.graphics.drawLine(0,0,this.length,0,"#00ff00");
				this._sprite.graphics.fillText(this.name,0,0,"20px Arial","#00ff00","center");
				Laya.stage.addChild(this._sprite);
				this._sprite.x=x+this.resultMatrix.tx;
				this._sprite.y=y+this.resultMatrix.ty;
			}
		};
		var i=0,n=0;
		var tBone;
		for (i=0,n=this._children.length;i < n;i++){
			tBone=this._children[i];
			tBone.updateDraw(x,y);
		}
	}

	__proto.addChild=function(bone){
		this._children.push(bone);
		bone.parentBone=this;
	}

	__proto.findBone=function(boneName){
		if (this.name==boneName){
			return this;
		}
		else {
			var i=0,n=0;
			var tBone;
			var tResult;
			for (i=0,n=this._children.length;i < n;i++){
				tBone=this._children[i];
				tResult=tBone.findBone(boneName);
				if (tResult){
					return tResult;
				}
			}
		}
		return null;
	}

	__proto.localToWorld=function(local){
		var localX=local[0];
		var localY=local[1];
		local[0]=localX *this.resultMatrix.a+localY *this.resultMatrix.c+this.resultMatrix.tx;
		local[1]=localX *this.resultMatrix.b+localY *this.resultMatrix.d+this.resultMatrix.ty;
	}

	Bone.ShowBones={};
	return Bone;
})()


/**
*@private
*/
//class laya.ani.bone.BoneSlot
var BoneSlot=(function(){
	function BoneSlot(){
		/**插槽名称 */
		this.name=null;
		/**插槽绑定的骨骼名称 */
		this.parent=null;
		/**插糟显示数据数据的名称 */
		this.attachmentName=null;
		/**原始数据的索引 */
		this.srcDisplayIndex=-1;
		/**判断对象是否是原对象 */
		this.type="src";
		/**模板的指针 */
		this.templet=null;
		/**当前插槽对应的数据 */
		this.currSlotData=null;
		/**当前插槽显示的纹理 */
		this.currTexture=null;
		/**显示对象对应的数据 */
		this.currDisplayData=null;
		/**显示皮肤的索引 */
		this.displayIndex=-1;
		/**用户自定义的皮肤 */
		this._diyTexture=null;
		this._parentMatrix=null;
		this._resultMatrix=null;
		/**索引替换表 */
		this._replaceDic={};
		/**当前diyTexture的动画纹理 */
		this._curDiyUV=null;
		this._curDiyVS=null;
		/**实时模式下，复用使用 */
		this._skinSprite=null;
		/**@private 变形动画数据 */
		this.deformData=null;
		this._mVerticleArr=null;
	}

	__class(BoneSlot,'laya.ani.bone.BoneSlot');
	var __proto=BoneSlot.prototype;
	/**
	*设置要显示的插槽数据
	*@param slotData
	*@param disIndex
	*@param freshIndex 是否重置纹理
	*/
	__proto.showSlotData=function(slotData,freshIndex){
		(freshIndex===void 0)&& (freshIndex=true);
		this.currSlotData=slotData;
		if(freshIndex)
			this.displayIndex=this.srcDisplayIndex;
		this.currDisplayData=null;
		this.currTexture=null;
	}

	/**
	*通过名字显示指定对象
	*@param name
	*/
	__proto.showDisplayByName=function(name){
		if (this.currSlotData){
			this.showDisplayByIndex(this.currSlotData.getDisplayByName(name));
		}
	}

	/**
	*替换贴图名
	*@param tarName 要替换的贴图名
	*@param newName 替换后的贴图名
	*/
	__proto.replaceDisplayByName=function(tarName,newName){
		if (!this.currSlotData)return;
		var preIndex=0;
		preIndex=this.currSlotData.getDisplayByName(tarName);
		var newIndex=0;
		newIndex=this.currSlotData.getDisplayByName(newName);
		this.replaceDisplayByIndex(preIndex,newIndex);
	}

	/**
	*替换贴图索引
	*@param tarIndex 要替换的索引
	*@param newIndex 替换后的索引
	*/
	__proto.replaceDisplayByIndex=function(tarIndex,newIndex){
		if (!this.currSlotData)return;
		this._replaceDic[tarIndex]=newIndex;
		if (this.displayIndex==tarIndex){
			this.showDisplayByIndex(tarIndex);
		}
	}

	/**
	*指定显示对象
	*@param index
	*/
	__proto.showDisplayByIndex=function(index){
		if (this._replaceDic[index]!=null)index=this._replaceDic[index];
		if (this.currSlotData && index >-1 && index < this.currSlotData.displayArr.length){
			this.displayIndex=index;
			this.currDisplayData=this.currSlotData.displayArr[index];
			if (this.currDisplayData){
				var tName=this.currDisplayData.name;
				this.currTexture=this.templet.getTexture(tName);
				if (this.currTexture && this.currDisplayData.type==0 && this.currDisplayData.uvs && (!Render.isConchApp || (Render.isConchApp && Sprite.RUNTIMEVERION > "0.9.15"))){
					this.currTexture=this.currDisplayData.createTexture(this.currTexture);
				}
			}
			}else {
			this.displayIndex=-1;
			this.currDisplayData=null;
			this.currTexture=null;
		}
	}

	/**
	*替换皮肤
	*@param _texture
	*/
	__proto.replaceSkin=function(_texture){
		this._diyTexture=_texture;
		if (this._curDiyUV)this._curDiyUV.length=0;
		if (this.currDisplayData&&this._diyTexture==this.currDisplayData.texture){
			this._diyTexture=null;
		}
	}

	/**
	*保存父矩阵的索引
	*@param parentMatrix
	*/
	__proto.setParentMatrix=function(parentMatrix){
		this._parentMatrix=parentMatrix;
	}

	/**
	*把纹理画到Graphics上
	*@param graphics
	*@param noUseSave
	*/
	__proto.draw=function(graphics,boneMatrixArray,noUseSave,alpha){
		(noUseSave===void 0)&& (noUseSave=false);
		(alpha===void 0)&& (alpha=1);
		if ((this._diyTexture==null && this.currTexture==null)|| this.currDisplayData==null){
			if (!(this.currDisplayData && this.currDisplayData.type==3)){
				return;
			}
		};
		var tTexture=this.currTexture;
		if (this._diyTexture)tTexture=this._diyTexture;
		var tSkinSprite;
		switch (this.currDisplayData.type){
			case 0:
				if (graphics){
					var tCurrentMatrix=this.getDisplayMatrix();
					if (this._parentMatrix){
						var tRotateKey=false;
						if (tCurrentMatrix){
							Matrix.mul(tCurrentMatrix,this._parentMatrix,Matrix.TEMP);
							var tResultMatrix;
							if (noUseSave){
								if (this._resultMatrix==null)this._resultMatrix=new Matrix();
								tResultMatrix=this._resultMatrix;
								}else {
								tResultMatrix=new Matrix();
							}
							if ((!Render.isWebGL && this.currDisplayData.uvs)|| (Render.isWebGL && this._diyTexture && this.currDisplayData.uvs)){
								var tTestMatrix=BoneSlot._tempMatrix;
								tTestMatrix.identity();
								if (this.currDisplayData.uvs[1] > this.currDisplayData.uvs[5]){
									tTestMatrix.d=-1;
								}
								if (this.currDisplayData.uvs[0] > this.currDisplayData.uvs[4]
									&& this.currDisplayData.uvs[1] > this.currDisplayData.uvs[5]){
									tRotateKey=true;
									tTestMatrix.rotate(-Math.PI/2);
								}
								Matrix.mul(tTestMatrix,Matrix.TEMP,tResultMatrix);
								}else {
								Matrix.TEMP.copyTo(tResultMatrix);
							}
							if (tRotateKey){
								graphics.drawTexture(tTexture,-this.currDisplayData.height / 2,-this.currDisplayData.width / 2,this.currDisplayData.height,this.currDisplayData.width,tResultMatrix);
								}else {
								graphics.drawTexture(tTexture,-this.currDisplayData.width / 2,-this.currDisplayData.height / 2,this.currDisplayData.width,this.currDisplayData.height,tResultMatrix);
							}
						}
					}
				}
				break ;
			case 1:
				if (noUseSave){
					if (this._skinSprite==null){
						this._skinSprite=BoneSlot.createSkinMesh();
					}
					tSkinSprite=this._skinSprite;
					}else {
					tSkinSprite=BoneSlot.createSkinMesh();
				}
				if (tSkinSprite==null){
					return;
				};
				var tIBArray;
				var tRed=1;
				var tGreed=1;
				var tBlue=1;
				var tAlpha=1;
				if (this.currDisplayData.bones==null){
					var tVertices=this.currDisplayData.weights;
					if (this.deformData){
						tVertices=this.deformData;
					};
					var tUVs;
					if (this._diyTexture){
						if (!this._curDiyUV){
							this._curDiyUV=[];
						}
						if (this._curDiyUV.length==0){
							this._curDiyUV=UVTools.getRelativeUV(this.currTexture.uv,this.currDisplayData.uvs,this._curDiyUV);
							this._curDiyUV=UVTools.getAbsoluteUV(this._diyTexture.uv,this._curDiyUV,this._curDiyUV);
						}
						tUVs=this._curDiyUV;
						}else{
						tUVs=this.currDisplayData.uvs;
					}
					this._mVerticleArr=tVertices;
					var tTriangleNum=this.currDisplayData.triangles.length / 3;
					tIBArray=this.currDisplayData.triangles;
					tSkinSprite.init2(tTexture,null ,tIBArray,this._mVerticleArr,tUVs);
					var tCurrentMatrix2=this.getDisplayMatrix();
					if (this._parentMatrix){
						if (tCurrentMatrix2){
							Matrix.mul(tCurrentMatrix2,this._parentMatrix,Matrix.TEMP);
							var tResultMatrix2;
							if (noUseSave){
								if (this._resultMatrix==null)this._resultMatrix=new Matrix();
								tResultMatrix2=this._resultMatrix;
								}else {
								tResultMatrix2=new Matrix();
							}
							Matrix.TEMP.copyTo(tResultMatrix2);
							tSkinSprite.transform=tResultMatrix2;
						}
					}
					}else {
					this.skinMesh(boneMatrixArray,tSkinSprite,alpha);
				}
				graphics.drawSkin(tSkinSprite);
				break ;
			case 2:
				if (noUseSave){
					if (this._skinSprite==null){
						this._skinSprite=BoneSlot.createSkinMesh();
					}
					tSkinSprite=this._skinSprite;
					}else {
					tSkinSprite=BoneSlot.createSkinMesh();
				}
				if (tSkinSprite==null){
					return;
				}
				this.skinMesh(boneMatrixArray,tSkinSprite,alpha);
				graphics.drawSkin(tSkinSprite);
				break ;
			case 3:
				break ;
			}
	}

	/**
	*显示蒙皮动画
	*@param boneMatrixArray 当前帧的骨骼矩阵
	*/
	__proto.skinMesh=function(boneMatrixArray,skinSprite,alpha){
		var tTexture=this.currTexture;
		var tBones=this.currDisplayData.bones;
		var tUvs;
		if (this._diyTexture){
			tTexture=this._diyTexture;
			if (!this._curDiyUV){
				this._curDiyUV=[];
			}
			if (this._curDiyUV.length==0){
				this._curDiyUV=UVTools.getRelativeUV(this.currTexture.uv,this.currDisplayData.uvs,this._curDiyUV);
				this._curDiyUV=UVTools.getAbsoluteUV(this._diyTexture.uv,this._curDiyUV,this._curDiyUV);
			}
			tUvs=this._curDiyUV;
			}else{
			tUvs=this.currDisplayData.uvs;
		};
		var tWeights=this.currDisplayData.weights;
		var tTriangles=this.currDisplayData.triangles;
		var tIBArray;
		var tRx=0;
		var tRy=0;
		var nn=0;
		var tMatrix;
		var tX=NaN;
		var tY=NaN;
		var tB=0;
		var tWeight=0;
		var tVertices=[];
		var i=0,j=0,n=0;
		var tRed=1;
		var tGreed=1;
		var tBlue=1;
		var tAlpha=alpha;
		if (this.deformData && this.deformData.length > 0){
			var f=0;
			for (i=0,n=tBones.length;i < n;){
				nn=tBones[i++]+i;
				tRx=0,tRy=0;
				for (;i < nn;i++){
					tMatrix=boneMatrixArray[tBones[i]]
					tX=tWeights[tB]+this.deformData[f++];
					tY=tWeights[tB+1]+this.deformData[f++];
					tWeight=tWeights[tB+2];
					tRx+=(tX *tMatrix.a+tY *tMatrix.c+tMatrix.tx)*tWeight;
					tRy+=(tX *tMatrix.b+tY *tMatrix.d+tMatrix.ty)*tWeight;
					tB+=3;
				}
				tVertices.push(tRx,tRy);
			}
			}else {
			for (i=0,n=tBones.length;i < n;){
				nn=tBones[i++]+i;
				tRx=0,tRy=0;
				for (;i < nn;i++){
					tMatrix=boneMatrixArray[tBones[i]]
					tX=tWeights[tB];
					tY=tWeights[tB+1];
					tWeight=tWeights[tB+2];
					tRx+=(tX *tMatrix.a+tY *tMatrix.c+tMatrix.tx)*tWeight;
					tRy+=(tX *tMatrix.b+tY *tMatrix.d+tMatrix.ty)*tWeight;
					tB+=3;
				}
				tVertices.push(tRx,tRy);
			}
		}
		this._mVerticleArr=tVertices;
		tIBArray=tTriangles;
		skinSprite.init2(tTexture,null,tIBArray,this._mVerticleArr,tUvs);
	}

	/**
	*画骨骼的起始点，方便调试
	*@param graphics
	*/
	__proto.drawBonePoint=function(graphics){
		if (graphics && this._parentMatrix){
			graphics.drawCircle(this._parentMatrix.tx,this._parentMatrix.ty,5,"#ff0000");
		}
	}

	/**
	*得到显示对象的矩阵
	*@return
	*/
	__proto.getDisplayMatrix=function(){
		if (this.currDisplayData){
			return this.currDisplayData.transform.getMatrix();
		}
		return null;
	}

	/**
	*得到插糟的矩阵
	*@return
	*/
	__proto.getMatrix=function(){
		return this._resultMatrix;
	}

	/**
	*用原始数据拷贝出一个
	*@return
	*/
	__proto.copy=function(){
		var tBoneSlot=new BoneSlot();
		tBoneSlot.type="copy";
		tBoneSlot.name=this.name;
		tBoneSlot.attachmentName=this.attachmentName;
		tBoneSlot.srcDisplayIndex=this.srcDisplayIndex;
		tBoneSlot.parent=this.parent;
		tBoneSlot.displayIndex=this.displayIndex;
		tBoneSlot.templet=this.templet;
		tBoneSlot.currSlotData=this.currSlotData;
		tBoneSlot.currTexture=this.currTexture;
		tBoneSlot.currDisplayData=this.currDisplayData;
		return tBoneSlot;
	}

	BoneSlot.createSkinMesh=function(){
		if (Render.isWebGL || Render.isConchApp){
			return RunDriver.skinAniSprite();
			}else{
			if (!Render.isWebGL){
				if (Skeleton.useSimpleMeshInCanvas){
					return new SimpleSkinMeshCanvas();
					}else{
					return new SkinMeshCanvas();
				}
			}
		}
		return null;
	}

	__static(BoneSlot,
	['_tempMatrix',function(){return this._tempMatrix=new Matrix();}
	]);
	return BoneSlot;
})()


/**
*@private
*canvas mesh渲染器
*/
//class laya.ani.bone.canvasmesh.CanvasMeshRender
var CanvasMeshRender=(function(){
	function CanvasMeshRender(){
		/**
		*mesh数据
		*/
		this.mesh=null;
		/**
		*矩阵
		*/
		this.transform=null;
		/**
		*绘图环境
		*/
		this.context=null;
		/**
		*绘制mesh的模式 0:顶点索引模式 1：无顶点索引模式
		*/
		this.mode=0;
	}

	__class(CanvasMeshRender,'laya.ani.bone.canvasmesh.CanvasMeshRender');
	var __proto=CanvasMeshRender.prototype;
	/**
	*将mesh数据渲染到context上面
	*@param context
	*
	*/
	__proto.renderToContext=function(context){
		this.context=context.ctx||context;
		if (this.mesh){
			if (this.mode==0){
				this._renderWithIndexes(this.mesh);
				}else{
				this._renderNoIndexes(this.mesh);
			}
		}
	}

	/**
	*无顶点索引的模式
	*@param mesh
	*
	*/
	__proto._renderNoIndexes=function(mesh){
		var i=0,len=mesh.vertices.length / 2;
		var index=0;
		for (i=0;i < len-2;i++){
			index=i *2;
			this._renderDrawTriangle(mesh,index,(index+2),(index+4));
		}
	}

	/**
	*使用顶点索引模式绘制
	*@param mesh
	*
	*/
	__proto._renderWithIndexes=function(mesh){
		var indexes=mesh.indexes;
		var i=0,len=indexes.length;
		for (i=0;i < len;i+=3){
			var index0=indexes[i] *2;
			var index1=indexes[i+1] *2;
			var index2=indexes[i+2] *2;
			this._renderDrawTriangle(mesh,index0,index1,index2);
		}
	}

	/**
	*绘制三角形
	*@param mesh mesh
	*@param index0 顶点0
	*@param index1 顶点1
	*@param index2 顶点2
	*
	*/
	__proto._renderDrawTriangle=function(mesh,index0,index1,index2){
		var context=this.context;
		var uvs=mesh.uvs;
		var vertices=mesh.vertices;
		var texture=mesh.texture;
		var source=texture.bitmap;
		var textureSource=source.source;
		var textureWidth=texture.width;
		var textureHeight=texture.height;
		var sourceWidth=source.width;
		var sourceHeight=source.height;
		var u0=NaN;
		var u1=NaN;
		var u2=NaN;
		var v0=NaN;
		var v1=NaN;
		var v2=NaN;
		if (mesh.useUvTransform){
			var ut=mesh.uvTransform;
			u0=((uvs[index0] *ut.a)+(uvs[index0+1] *ut.c)+ut.tx)*sourceWidth;
			u1=((uvs[index1] *ut.a)+(uvs[index1+1] *ut.c)+ut.tx)*sourceWidth;
			u2=((uvs[index2] *ut.a)+(uvs[index2+1] *ut.c)+ut.tx)*sourceWidth;
			v0=((uvs[index0] *ut.b)+(uvs[index0+1] *ut.d)+ut.ty)*sourceHeight;
			v1=((uvs[index1] *ut.b)+(uvs[index1+1] *ut.d)+ut.ty)*sourceHeight;
			v2=((uvs[index2] *ut.b)+(uvs[index2+1] *ut.d)+ut.ty)*sourceHeight;
		}
		else {
			u0=uvs[index0] *sourceWidth;
			u1=uvs[index1] *sourceWidth;
			u2=uvs[index2] *sourceWidth;
			v0=uvs[index0+1] *sourceHeight;
			v1=uvs[index1+1] *sourceHeight;
			v2=uvs[index2+1] *sourceHeight;
		};
		var x0=vertices[index0];
		var x1=vertices[index1];
		var x2=vertices[index2];
		var y0=vertices[index0+1];
		var y1=vertices[index1+1];
		var y2=vertices[index2+1];
		if (mesh.canvasPadding > 0){
			var paddingX=mesh.canvasPadding;
			var paddingY=mesh.canvasPadding;
			var centerX=(x0+x1+x2)/ 3;
			var centerY=(y0+y1+y2)/ 3;
			var normX=x0-centerX;
			var normY=y0-centerY;
			var dist=Math.sqrt((normX *normX)+(normY *normY));
			x0=centerX+((normX / dist)*(dist+paddingX));
			y0=centerY+((normY / dist)*(dist+paddingY));
			normX=x1-centerX;
			normY=y1-centerY;
			dist=Math.sqrt((normX *normX)+(normY *normY));
			x1=centerX+((normX / dist)*(dist+paddingX));
			y1=centerY+((normY / dist)*(dist+paddingY));
			normX=x2-centerX;
			normY=y2-centerY;
			dist=Math.sqrt((normX *normX)+(normY *normY));
			x2=centerX+((normX / dist)*(dist+paddingX));
			y2=centerY+((normY / dist)*(dist+paddingY));
		}
		context.save();
		if (this.transform){
			var mt=this.transform;
			context.transform(mt.a,mt.b,mt.c,mt.d,mt.tx,mt.ty);
		}
		context.beginPath();
		context.moveTo(x0,y0);
		context.lineTo(x1,y1);
		context.lineTo(x2,y2);
		context.closePath();
		context.clip();
		var delta=(u0 *v1)+(v0 *u2)+(u1 *v2)-(v1 *u2)-(v0 *u1)-(u0 *v2);
		var dDelta=1 / delta;
		var deltaA=(x0 *v1)+(v0 *x2)+(x1 *v2)-(v1 *x2)-(v0 *x1)-(x0 *v2);
		var deltaB=(u0 *x1)+(x0 *u2)+(u1 *x2)-(x1 *u2)-(x0 *u1)-(u0 *x2);
		var deltaC=(u0 *v1 *x2)+(v0 *x1 *u2)+(x0 *u1 *v2)-(x0 *v1 *u2)-(v0 *u1 *x2)-(u0 *x1 *v2);
		var deltaD=(y0 *v1)+(v0 *y2)+(y1 *v2)-(v1 *y2)-(v0 *y1)-(y0 *v2);
		var deltaE=(u0 *y1)+(y0 *u2)+(u1 *y2)-(y1 *u2)-(y0 *u1)-(u0 *y2);
		var deltaF=(u0 *v1 *y2)+(v0 *y1 *u2)+(y0 *u1 *v2)-(y0 *v1 *u2)-(v0 *u1 *y2)-(u0 *y1 *v2);
		context.transform(deltaA *dDelta,deltaD *dDelta,deltaB *dDelta,deltaE*dDelta,deltaC *dDelta,deltaF *dDelta);
		context.drawImage(textureSource,texture.uv[0]*sourceWidth,texture.uv[1]*sourceHeight,textureWidth,textureHeight,texture.uv[0]*sourceWidth,texture.uv[1]*sourceHeight,textureWidth,textureHeight);
		context.restore();
	}

	return CanvasMeshRender;
})()


/**
*@private
*/
//class laya.ani.bone.canvasmesh.MeshData
var MeshData=(function(){
	function MeshData(){
		/**
		*纹理
		*/
		this.texture=null;
		/**
		*uv数据
		*/
		this.uvs=[0,0,1,0,1,1,0,1];
		/**
		*顶点数据
		*/
		this.vertices=[0,0,100,0,100,100,0,100];
		/**
		*顶点索引
		*/
		this.indexes=[0,1,3,3,1,2];
		/**
		*uv变换矩阵
		*/
		this.uvTransform=null;
		/**
		*是否有uv变化矩阵
		*/
		this.useUvTransform=false;
		/**
		*扩展像素,用来去除黑边
		*/
		this.canvasPadding=1;
	}

	__class(MeshData,'laya.ani.bone.canvasmesh.MeshData');
	var __proto=MeshData.prototype;
	/**
	*计算mesh的Bounds
	*@return
	*
	*/
	__proto.getBounds=function(){
		return Rectangle._getWrapRec(this.vertices);
	}

	return MeshData;
})()


/**
*@private
*/
//class laya.ani.bone.DeformAniData
var DeformAniData=(function(){
	function DeformAniData(){
		this.skinName=null;
		this.deformSlotDataList=[];
	}

	__class(DeformAniData,'laya.ani.bone.DeformAniData');
	return DeformAniData;
})()


/**
*@private
*/
//class laya.ani.bone.DeformSlotData
var DeformSlotData=(function(){
	function DeformSlotData(){
		this.deformSlotDisplayList=[];
	}

	__class(DeformSlotData,'laya.ani.bone.DeformSlotData');
	return DeformSlotData;
})()


/**
*@private
*/
//class laya.ani.bone.DeformSlotDisplayData
var DeformSlotDisplayData=(function(){
	function DeformSlotDisplayData(){
		this.boneSlot=null;
		this.slotIndex=-1;
		this.attachment=null;
		this.deformData=null;
		this.frameIndex=0;
		this.timeList=[];
		this.vectices=[];
		this.tweenKeyList=[];
	}

	__class(DeformSlotDisplayData,'laya.ani.bone.DeformSlotDisplayData');
	var __proto=DeformSlotDisplayData.prototype;
	__proto.binarySearch1=function(values,target){
		var low=0;
		var high=values.length-2;
		if (high==0)
			return 1;
		var current=high >>> 1;
		while (true){
			if (values[Math.floor(current+1)] <=target)
				low=current+1;
			else
			high=current;
			if (low==high)
				return low+1;
			current=(low+high)>>> 1;
		}
		return 0;
	}

	// Can't happen.
	__proto.apply=function(time,boneSlot,alpha){
		(alpha===void 0)&& (alpha=1);
		time+=0.05;
		if (this.timeList.length <=0){
			return;
		};
		var i=0;
		var n=0;
		var tTime=this.timeList[0];
		if (time < tTime){
			return;
		};
		var tVertexCount=this.vectices[0].length;
		var tVertices=[];
		var tFrameIndex=this.binarySearch1(this.timeList,time);
		this.frameIndex=tFrameIndex;
		if (time >=this.timeList[this.timeList.length-1]){
			var lastVertices=this.vectices[this.vectices.length-1];
			if (alpha < 1){
				for (i=0;i < tVertexCount;i++){
					tVertices[i]+=(lastVertices[i]-tVertices[i])*alpha;
				}
				}else {
				for (i=0;i < tVertexCount;i++){
					tVertices[i]=lastVertices[i];
				}
			}
			this.deformData=tVertices;
			return;
		};
		var tTweenKey=this.tweenKeyList[this.frameIndex];
		var tPrevVertices=this.vectices[this.frameIndex-1];
		var tNextVertices=this.vectices[this.frameIndex];
		var tPreFrameTime=this.timeList[this.frameIndex-1];
		var tFrameTime=this.timeList[this.frameIndex];
		if (this.tweenKeyList[tFrameIndex-1]){
			alpha=(time-tPreFrameTime)/ (tFrameTime-tPreFrameTime);
			}else {
			alpha=0;
		};
		var tPrev=NaN;
		for (i=0;i < tVertexCount;i++){
			tPrev=tPrevVertices[i];
			tVertices[i]=tPrev+(tNextVertices[i]-tPrev)*alpha;
		}
		this.deformData=tVertices;
	}

	return DeformSlotDisplayData;
})()


/**
*@private
*/
//class laya.ani.bone.DrawOrderData
var DrawOrderData=(function(){
	function DrawOrderData(){
		this.time=NaN;
		this.drawOrder=[];
	}

	__class(DrawOrderData,'laya.ani.bone.DrawOrderData');
	return DrawOrderData;
})()


/**
*@private
*/
//class laya.ani.bone.EventData
var EventData=(function(){
	function EventData(){
		this.name=null;
		this.intValue=0;
		this.floatValue=NaN;
		this.stringValue=null;
		this.time=NaN;
	}

	__class(EventData,'laya.ani.bone.EventData');
	return EventData;
})()


/**
*@private
*/
//class laya.ani.bone.IkConstraint
var IkConstraint=(function(){
	function IkConstraint(data,bones){
		this._targetBone=null;
		this._bones=null;
		this._data=null;
		this.name=null;
		this.mix=NaN;
		this.bendDirection=NaN;
		this.isSpine=true;
		//debug相关代码
		this._sp=null;
		this.isDebug=false;
		this._data=data;
		this._targetBone=bones[data.targetBoneIndex];
		this.isSpine=data.isSpine;
		if (this._bones==null)this._bones=[];
		this._bones.length=0;
		for (var i=0,n=data.boneIndexs.length;i < n;i++){
			this._bones.push(bones[data.boneIndexs[i]]);
		}
		this.name=data.name;
		this.mix=data.mix;
		this.bendDirection=data.bendDirection;
	}

	__class(IkConstraint,'laya.ani.bone.IkConstraint');
	var __proto=IkConstraint.prototype;
	__proto.apply=function(){
		switch (this._bones.length){
			case 1:
				this._applyIk1(this._bones[0],this._targetBone.resultMatrix.tx,this._targetBone.resultMatrix.ty,this.mix);
				break ;
			case 2:
				if (this.isSpine){
					this._applyIk2(this._bones[0],this._bones[1],this._targetBone.resultMatrix.tx,this._targetBone.resultMatrix.ty,this.bendDirection,this.mix);
					}else{
					this._applyIk3(this._bones[0],this._bones[1],this._targetBone.resultMatrix.tx,this._targetBone.resultMatrix.ty,this.bendDirection,this.mix);
				}
				break ;
			}
	}

	__proto._applyIk1=function(bone,targetX,targetY,alpha){
		var pp=bone.parentBone;
		var id=1 / (pp.resultMatrix.a *pp.resultMatrix.d-pp.resultMatrix.b *pp.resultMatrix.c);
		var x=targetX-pp.resultMatrix.tx;
		var y=targetY-pp.resultMatrix.ty;
		var tx=(x *pp.resultMatrix.d-y *pp.resultMatrix.c)*id-bone.transform.x;
		var ty=(y *pp.resultMatrix.a-x *pp.resultMatrix.b)*id-bone.transform.y;
		var rotationIK=Math.atan2(ty,tx)*IkConstraint.radDeg-0-bone.transform.skX;
		if (bone.transform.scX < 0)rotationIK+=180;
		if (rotationIK > 180)
			rotationIK-=360;
		else if (rotationIK <-180)rotationIK+=360;
		bone.transform.skX=bone.transform.skY=bone.transform.skX+rotationIK *alpha;
		bone.update();
	}

	__proto.updatePos=function(x,y){
		if (this._sp){
			this._sp.pos(x,y);
		}
	}

	__proto._applyIk2=function(parent,child,targetX,targetY,bendDir,alpha){
		if (alpha==0){
			return;
		};
		var px=parent.resultTransform.x,py=parent.resultTransform.y;
		var psx=parent.transform.scX,psy=parent.transform.scY;
		var csx=child.transform.scX;
		var os1=0,os2=0,s2=0;
		if (psx < 0){
			psx=-psx;
			os1=180;
			s2=-1;
			}else {
			os1=0;
			s2=1;
		}
		if (psy < 0){
			psy=-psy;
			s2=-s2;
		}
		if (csx < 0){
			csx=-csx;
			os2=180;
			}else {
			os2=0
		};
		var cx=child.resultTransform.x,cy=NaN,cwx=NaN,cwy=NaN;
		var a=parent.resultMatrix.a,b=parent.resultMatrix.c;
		var c=parent.resultMatrix.b,d=parent.resultMatrix.d;
		var u=Math.abs(psx-psy)<=0.0001;
		if (!u){
			cy=0;
			cwx=a *cx+parent.resultMatrix.tx;
			cwy=c *cx+parent.resultMatrix.ty;
			}else {
			cy=child.resultTransform.y;
			cwx=a *cx+b *cy+parent.resultMatrix.tx;
			cwy=c *cx+d *cy+parent.resultMatrix.ty;
		}
		if (this.isDebug){
			if (!this._sp){
				this._sp=new Sprite();
				Laya.stage.addChild(this._sp);
			}
			this._sp.graphics.clear();
			this._sp.graphics.drawCircle(targetX,targetY,15,"#ffff00");
			this._sp.graphics.drawCircle(cwx,cwy,15,"#ff00ff");
		}
		parent.setRotation(Math.atan2(cwy-parent.resultMatrix.ty,cwx-parent.resultMatrix.tx));
		var pp=parent.parentBone;
		a=pp.resultMatrix.a;
		b=pp.resultMatrix.c;
		c=pp.resultMatrix.b;
		d=pp.resultMatrix.d;
		var id=1 / (a *d-b *c);
		var x=targetX-pp.resultMatrix.tx,y=targetY-pp.resultMatrix.ty;
		var tx=(x *d-y *b)*id-px;
		var ty=(y *a-x *c)*id-py;
		x=cwx-pp.resultMatrix.tx;
		y=cwy-pp.resultMatrix.ty;
		var dx=(x *d-y *b)*id-px;
		var dy=(y *a-x *c)*id-py;
		var l1=Math.sqrt(dx *dx+dy *dy);
		var l2=child.length *csx;
		var a1=NaN,a2=NaN;
		if (u){
			l2 *=psx;
			var cos=(tx *tx+ty *ty-l1 *l1-l2 *l2)/ (2 *l1 *l2);
			if (cos <-1)
				cos=-1;
			else if (cos > 1)cos=1;
			a2=Math.acos(cos)*bendDir;
			a=l1+l2 *cos;
			b=l2 *Math.sin(a2);
			a1=Math.atan2(ty *a-tx *b,tx *a+ty *b);
			}else {
			a=psx *l2;
			b=psy *l2;
			var aa=a *a,bb=b *b,dd=tx *tx+ty *ty,ta=Math.atan2(ty,tx);
			c=bb *l1 *l1+aa *dd-aa *bb;
			var c1=-2 *bb *l1,c2=bb-aa;
			d=c1 *c1-4 *c2 *c;
			if (d > 0){
				var q=Math.sqrt(d);
				if (c1 < 0)q=-q;
				q=-(c1+q)/ 2;
				var r0=q / c2,r1=c / q;
				var r=Math.abs(r0)< Math.abs(r1)? r0 :r1;
				if (r *r <=dd){
					y=Math.sqrt(dd-r *r)*bendDir;
					a1=ta-Math.atan2(y,r);
					a2=Math.atan2(y / psy,(r-l1)/ psx);
				}
			};
			var minAngle=0,minDist=Number.MAX_VALUE,minX=0,minY=0;
			var maxAngle=0,maxDist=0,maxX=0,maxY=0;
			x=l1+a;
			d=x *x;
			if (d > maxDist){
				maxAngle=0;
				maxDist=d;
				maxX=x;
			}
			x=l1-a;
			d=x *x;
			if (d < minDist){
				minAngle=Math.PI;
				minDist=d;
				minX=x;
			};
			var angle=Math.acos(-a *l1 / (aa-bb));
			x=a *Math.cos(angle)+l1;
			y=b *Math.sin(angle);
			d=x *x+y *y;
			if (d < minDist){
				minAngle=angle;
				minDist=d;
				minX=x;
				minY=y;
			}
			if (d > maxDist){
				maxAngle=angle;
				maxDist=d;
				maxX=x;
				maxY=y;
			}
			if (dd <=(minDist+maxDist)/ 2){
				a1=ta-Math.atan2(minY *bendDir,minX);
				a2=minAngle *bendDir;
				}else {
				a1=ta-Math.atan2(maxY *bendDir,maxX);
				a2=maxAngle *bendDir;
			}
		};
		var os=Math.atan2(cy,cx)*s2;
		var rotation=parent.resultTransform.skX;
		a1=(a1-os)*IkConstraint.radDeg+os1-rotation;
		if (a1 > 180)
			a1-=360;
		else if (a1 <-180)a1+=360;
		parent.resultTransform.x=px;
		parent.resultTransform.y=py;
		parent.resultTransform.skX=parent.resultTransform.skY=rotation+a1 *alpha;
		rotation=child.resultTransform.skX;
		rotation=rotation % 360;
		a2=((a2+os)*IkConstraint.radDeg-0)*s2+os2-rotation;
		if (a2 > 180)
			a2-=360;
		else if (a2 <-180)a2+=360;
		child.resultTransform.x=cx;
		child.resultTransform.y=cy;
		child.resultTransform.skX=child.resultTransform.skY=child.resultTransform.skY+a2 *alpha;
		parent.update();
	}

	__proto._applyIk3=function(parent,child,targetX,targetY,bendDir,alpha){
		if (alpha==0){
			return;
		};
		var cwx=NaN,cwy=NaN;
		var x=child.resultMatrix.a *child.length;
		var y=child.resultMatrix.b *child.length;
		var lLL=x *x+y *y;
		var lL=Math.sqrt(lLL);
		var parentX=parent.resultMatrix.tx;
		var parentY=parent.resultMatrix.ty;
		var childX=child.resultMatrix.tx;
		var childY=child.resultMatrix.ty;
		var dX=childX-parentX;
		var dY=childY-parentY;
		var lPP=dX *dX+dY *dY;
		var lP=Math.sqrt(lPP);
		dX=targetX-parent.resultMatrix.tx;
		dY=targetY-parent.resultMatrix.ty;
		var lTT=dX *dX+dY *dY;
		var lT=Math.sqrt(lTT);
		var ikRadianA=0;
		if (lL+lP <=lT || lT+lL <=lP || lT+lP <=lL){
			var rate=NaN;
			if (lL+lP <=lT){
				rate=1;
				}else{
				rate=-1;
			}
			childX=parentX+rate*(targetX-parentX)*lP / lT;
			childY=parentY+rate*(targetY-parentY)*lP / lT;
		}
		else{
			var h=(lPP-lLL+lTT)/ (2 *lTT);
			var r=Math.sqrt(lPP-h *h *lTT)/ lT;
			var hX=parentX+(dX *h);
			var hY=parentY+(dY *h);
			var rX=-dY *r;
			var rY=dX *r;
			if (bendDir>0){
				childX=hX-rX;
				childY=hY-rY;
			}
			else{
				childX=hX+rX;
				childY=hY+rY;
			}
		}
		cwx=childX;
		cwy=childY;
		if (this.isDebug){
			if (!this._sp){
				this._sp=new Sprite();
				Laya.stage.addChild(this._sp);
			}
			this._sp.graphics.clear();
			this._sp.graphics.drawCircle(parentX,parentY,15,"#ff00ff");
			this._sp.graphics.drawCircle(targetX,targetY,15,"#ffff00");
			this._sp.graphics.drawCircle(cwx,cwy,15,"#ff00ff");
		};
		var pRotation=NaN;
		pRotation=Math.atan2(cwy-parent.resultMatrix.ty,cwx-parent.resultMatrix.tx);
		parent.setRotation(pRotation);
		var pTarMatrix;
		pTarMatrix=IkConstraint._tempMatrix;
		pTarMatrix.identity();
		pTarMatrix.rotate(pRotation);
		pTarMatrix.scale(parent.resultMatrix.getScaleX(),parent.resultMatrix.getScaleY());
		pTarMatrix.translate(parent.resultMatrix.tx,parent.resultMatrix.ty);
		pTarMatrix.copyTo(parent.resultMatrix);
		parent.updateChild();
		var childRotation=NaN;
		childRotation=Math.atan2(targetY-cwy,targetX-cwx);
		child.setRotation(childRotation);
		var childTarMatrix;
		childTarMatrix=IkConstraint._tempMatrix;
		childTarMatrix.identity();
		childTarMatrix.rotate(childRotation);
		childTarMatrix.scale(child.resultMatrix.getScaleX(),child.resultMatrix.getScaleY());
		childTarMatrix.translate(cwx,cwy);
		pTarMatrix.copyTo(child.resultMatrix);
		child.updateChild();
	}

	__static(IkConstraint,
	['radDeg',function(){return this.radDeg=180 / Math.PI;},'degRad',function(){return this.degRad=Math.PI / 180;},'_tempMatrix',function(){return this._tempMatrix=new Matrix();}
	]);
	return IkConstraint;
})()


/**
*@private
*/
//class laya.ani.bone.IkConstraintData
var IkConstraintData=(function(){
	function IkConstraintData(){
		this.name=null;
		this.targetBoneName=null;
		this.bendDirection=1;
		this.mix=1;
		this.isSpine=true;
		this.targetBoneIndex=-1;
		this.boneNames=[];
		this.boneIndexs=[];
	}

	__class(IkConstraintData,'laya.ani.bone.IkConstraintData');
	return IkConstraintData;
})()


/**
*@private
*Mesh数据处理工具
*@version 1.0
*
*@created 2017-4-28 下午2:46:23
*/
//class laya.ani.bone.MeshTools
var MeshTools=(function(){
	function MeshTools(){}
	__class(MeshTools,'laya.ani.bone.MeshTools');
	MeshTools.findEdge=function(verticles,offI,min){
		(offI===void 0)&& (offI=0);
		(min===void 0)&& (min=true);
		var i=0,len=0;
		var tIndex=0;
		len=verticles.length;
		tIndex=-1;
		for (i=0;i < len;i+=2){
			if (tIndex < 0 || (min==(verticles[tIndex+offI] < verticles[i+offI]))){
				tIndex=i;
			}
		}
		return tIndex;
	}

	MeshTools.findBestTriangle=function(verticles){
		var topI=0;
		topI=MeshTools.findEdge(verticles,1,true);
		var bottomI=0;
		bottomI=MeshTools.findEdge(verticles,1,false);
		var leftI=0;
		leftI=MeshTools.findEdge(verticles,0,true);
		var rightI=0;
		rightI=MeshTools.findEdge(verticles,0,false);
		var rst;
		rst=MeshTools._bestTriangle;
		rst.length=0;
		rst.push(leftI,rightI);
		if (rst.indexOf(topI)< 0)rst.push(topI);
		if (rst.indexOf(bottomI)< 0)rst.push(bottomI);
		return rst;
	}

	MeshTools.solveMesh=function(mesh,rst){
		rst=rst||[];
		rst.length=0;
		var mUv;
		mUv=mesh.uvs;
		var mVer;
		mVer=mesh.vertices;
		var uvAbs;
		var indexs;
		indexs=MeshTools.findBestTriangle(mUv);
		var index0=0;
		var index1=0;
		var index2=0;
		index0=indexs[0];
		index1=indexs[1];
		index2=indexs[2];
		MeshTools._absArr.length=0;
		var newVerticles;
		if (MeshTools.isNormalUV(mesh.texture.uv)){
			MeshTools.adptTexture(mesh);
		}
		uvAbs=MeshTools.solvePoints(mesh.texture.uv,mUv[index0],mUv[index0+1],mUv[index1]-mUv[index0],mUv[index1+1]-mUv[index0+1],mUv[index2]-mUv[index0],mUv[index2+1]-mUv[index0+1],MeshTools._absArr);
		newVerticles=MeshTools.transPoints(uvAbs,mVer[index0],mVer[index0+1],mVer[index1]-mVer[index0],mVer[index1+1]-mVer[index0+1],mVer[index2]-mVer[index0],mVer[index2+1]-mVer[index0+1],rst);
		return newVerticles;
	}

	MeshTools.findWrapRect=function(verticles){
		var topI=0;
		topI=MeshTools.findEdge(verticles,1,true);
		var bottomI=0;
		bottomI=MeshTools.findEdge(verticles,1,false);
		var leftI=0;
		leftI=MeshTools.findEdge(verticles,0,true);
		var rightI=0;
		rightI=MeshTools.findEdge(verticles,0,false);
		var left=NaN;
		left=verticles[leftI];
		var right=NaN;
		right=verticles[rightI];
		var top=NaN;
		top=verticles[topI+1];
		var bottom=NaN;
		bottom=verticles[bottomI+1];
		var rst;
		return [right,bottom,left-right,top-bottom];
	}

	MeshTools.adptTexture=function(mesh){
		var rec;
		rec=MeshTools.findWrapRect(mesh.uvs);
		var oTex;
		var nTex;
		oTex=mesh.texture;
		var oWidth=oTex.width;
		var oHeight=oTex.height;
		nTex=Texture.create(oTex,rec[0] *oWidth,rec[1] *oHeight,rec[2] *oWidth,rec[3] *oHeight);
		mesh.texture=nTex;
	}

	MeshTools.isNormalUV=function(uv){
		return uv[0]==0 && uv[1]==0 && uv[4]==1 && uv[5]==1;
	}

	MeshTools.solvePoints=function(pointList,oX,oY,v1x,v1y,v2x,v2y,rst){
		rst=rst||[];
		var i=0,len=0;
		len=pointList.length;
		var tRst;
		for (i=0;i < len;i+=2){
			tRst=MeshTools.solve2(pointList[i],pointList[i+1],oX,oY,v1x,v1y,v2x,v2y);
			rst.push(tRst[0],tRst[1]);
		}
		return rst;
	}

	MeshTools.transPoints=function(abs,oX,oY,v1x,v1y,v2x,v2y,rst){
		rst=rst|| [];
		var i=0,len=0;
		len=abs.length;
		var tRst;
		for (i=0;i < len;i+=2){
			tRst=MeshTools.transPoint(abs[i],abs[i+1],oX,oY,v1x,v1y,v2x,v2y,rst);
		}
		return rst;
	}

	MeshTools.transPoint=function(a,b,oX,oY,v1x,v1y,v2x,v2y,rst){
		rst=rst|| [];
		var nX=NaN;
		var nY=NaN;
		nX=oX+v1x *a+v2x *b;
		nY=oY+v1y *a+v2y *b;
		rst.push(nX,nY)
		return rst;
	}

	MeshTools.solve2=function(rx,ry,oX,oY,v1x,v1y,v2x,v2y,rv,rst){
		(rv===void 0)&& (rv=false);
		rst=rst||[];
		var a=NaN,b=NaN;
		if (v1x==0){
			return MeshTools.solve2(rx,ry,oX,oY,v2x,v2y,v1x,v1y,true,rst);
		};
		var dX=NaN;
		var dY=NaN;
		dX=rx-oX;
		dY=ry-oY;
		b=(dY-dX *v1y / v1x)/ (v2y-v2x *v1y / v1x);
		a=(dX-b *v2x)/ v1x;
		if(rv){
			rst.push(b,a);
			}else{
			rst.push(a,b);
		}
		return rst;
	}

	MeshTools.solve=function(pointC,point0,v1,v2){
		return MeshTools.solve2(pointC.x,pointC.y,point0.x,point0.y,v1.x,v1.y,v2.x,v2.y);
	}

	MeshTools._bestTriangle=[];
	MeshTools._absArr=[];
	return MeshTools;
})()


/**
*@private
*路径作用器
*1，生成根据骨骼计算控制点
*2，根据控制点生成路径，并计算路径上的节点
*3，根据节点，重新调整骨骼位置
*/
//class laya.ani.bone.PathConstraint
var PathConstraint=(function(){
	function PathConstraint(data,bones){
		this.target=null;
		this.data=null;
		this.bones=null;
		this.position=NaN;
		this.spacing=NaN;
		this.rotateMix=NaN;
		this.translateMix=NaN;
		this._debugKey=false;
		this._spaces=null;
		this._segments=[];
		this._curves=[];
		this.data=data;
		this.position=data.position;
		this.spacing=data.spacing;
		this.rotateMix=data.rotateMix;
		this.translateMix=data.translateMix;
		this.bones=[];
		var tBoneIds=this.data.bones;
		for (var i=0,n=tBoneIds.length;i < n;i++){
			this.bones.push(bones[tBoneIds[i]]);
		}
	}

	__class(PathConstraint,'laya.ani.bone.PathConstraint');
	var __proto=PathConstraint.prototype;
	/**
	*计算骨骼在路径上的节点
	*@param boneSlot
	*@param boneMatrixArray
	*@param graphics
	*/
	__proto.apply=function(boneList,graphics){
		if (!this.target)
			return;
		var tTranslateMix=this.translateMix;
		var tRotateMix=this.translateMix;
		var tTranslate=tTranslateMix > 0;
		var tRotate=tRotateMix > 0;
		var tSpacingMode=this.data.spacingMode;
		var tLengthSpacing=tSpacingMode=="length";
		var tRotateMode=this.data.rotateMode;
		var tTangents=tRotateMode=="tangent";
		var tScale=tRotateMode=="chainScale";
		var lengths=[];
		var boneCount=this.bones.length;
		var spacesCount=tTangents ? boneCount :boneCount+1;
		var spaces=[];
		this._spaces=spaces;
		spaces[0]=this.position;
		var spacing=this.spacing;
		if (tScale || tLengthSpacing){
			for (var i=0,n=spacesCount-1;i < n;){
				var bone=this.bones[i];
				var length=bone.length;
				var x=length *bone.resultMatrix.a;
				var y=length *bone.resultMatrix.b;
				length=Math.sqrt(x *x+y *y);
				if (tScale)
					lengths[i]=length;
				spaces[++i]=tLengthSpacing ? Math.max(0,length+spacing):spacing;
			}
		}
		else {
			for (i=1;i < spacesCount;i++){
				spaces[i]=spacing;
			}
		};
		var positions=this.computeWorldPositions(this.target,boneList,graphics,spacesCount,tTangents,this.data.positionMode=="percent",tSpacingMode=="percent");
		if (this._debugKey){
			for (i=0;i < positions.length;i++){
				graphics.drawCircle(positions[i++],positions[i++],5,"#00ff00");
			};
			var tLinePos=[];
			for (i=0;i < positions.length;i++){
				tLinePos.push(positions[i++],positions[i++]);
			}
			graphics.drawLines(0,0,tLinePos,"#ff0000");
		};
		var skeletonX=NaN;
		var skeletonY=NaN;
		var boneX=positions[0];
		var boneY=positions[1];
		var offsetRotation=this.data.offsetRotation;
		var tip=tRotateMode=="chain" && offsetRotation==0;
		var p=NaN;
		for (i=0,p=3;i < boneCount;i++,p+=3){
			bone=this.bones[i];
			bone.resultMatrix.tx+=(boneX-bone.resultMatrix.tx)*tTranslateMix;
			bone.resultMatrix.ty+=(boneY-bone.resultMatrix.ty)*tTranslateMix;
			x=positions[p];
			y=positions[p+1];
			var dx=x-boneX,dy=y-boneY;
			if (tScale){
				length=lengths[i];
				if (length !=0){
					var s=(Math.sqrt(dx *dx+dy *dy)/ length-1)*tRotateMix+1;
					bone.resultMatrix.a *=s;
					bone.resultMatrix.c *=s;
				}
			}
			boneX=x;
			boneY=y;
			if (tRotate){
				var a=bone.resultMatrix.a;
				var b=bone.resultMatrix.c;
				var c=bone.resultMatrix.b;
				var d=bone.resultMatrix.d;
				var r=NaN;
				var cos=NaN;
				var sin=NaN;
				if (tTangents){
					r=positions[p-1];
				}
				else if (spaces[i+1]==0){
					r=positions[p+2];
				}
				else {
					r=Math.atan2(dy,dx);
				}
				r-=Math.atan2(c,a)-offsetRotation / 180 *Math.PI;
				if (tip){
					cos=Math.cos(r);
					sin=Math.sin(r);
					length=bone.length;
					boneX+=(length *(cos *a-sin *c)-dx)*tRotateMix;
					boneY+=(length *(sin *a+cos *c)-dy)*tRotateMix;
				}
				if (r > Math.PI){
					r-=(Math.PI *2);
				}
				else if (r <-Math.PI){
					r+=(Math.PI *2);
				}
				r *=tRotateMix;
				cos=Math.cos(r);
				sin=Math.sin(r);
				bone.resultMatrix.a=cos *a-sin *c;
				bone.resultMatrix.c=cos *b-sin *d;
				bone.resultMatrix.b=sin *a+cos *c;
				bone.resultMatrix.d=sin *b+cos *d;
			}
		}
	}

	/**
	*计算顶点的世界坐标
	*@param boneSlot
	*@param boneList
	*@param start
	*@param count
	*@param worldVertices
	*@param offset
	*/
	__proto.computeWorldVertices2=function(boneSlot,boneList,start,count,worldVertices,offset){
		var tBones=boneSlot.currDisplayData.bones;
		var tWeights=boneSlot.currDisplayData.weights;
		var tTriangles=boneSlot.currDisplayData.triangles;
		var tMatrix;
		var i=0;
		var v=0;
		var skip=0;
		var n=0;
		var w=0;
		var b=0;
		var wx=0;
		var wy=0;
		var vx=0;
		var vy=0;
		var bone;
		var len=0;
		if (tBones==null){
			if (!tTriangles)tTriangles=tWeights;
			if (boneSlot.deformData)
				tTriangles=boneSlot.deformData;
			var parentName;
			parentName=boneSlot.parent;
			if (boneList){
				len=boneList.length;
				for (i=0;i < len;i++){
					if (boneList[i].name==parentName){
						bone=boneList[i];
						break ;
					}
				}
			};
			var tBoneMt;
			if (bone){
				tBoneMt=bone.resultMatrix;
			}
			if (!tBoneMt)tBoneMt=PathConstraint._tempMt;
			var x=tBoneMt.tx;
			var y=tBoneMt.ty;
			var a=tBoneMt.a,bb=tBoneMt.b,c=tBoneMt.c,d=tBoneMt.d;
			if(bone)d*=bone.d;
			for (v=start,w=offset;w < count;v+=2,w+=2){
				vx=tTriangles[v],vy=tTriangles[v+1];
				worldVertices[w]=vx *a+vy *bb+x;
				worldVertices[w+1]=-(vx *c+vy *d+y);
			}
			return;
		}
		for (i=0;i < start;i+=2){
			n=tBones[v];
			v+=n+1;
			skip+=n;
		};
		var skeletonBones=boneList;
		for (w=offset,b=skip *3;w < count;w+=2){
			wx=0,wy=0;
			n=tBones[v++];
			n+=v;
			for (;v < n;v++,b+=3){
				tMatrix=skeletonBones[tBones[v]].resultMatrix;
				vx=tWeights[b];
				vy=tWeights[b+1];
				var weight=tWeights[b+2];
				wx+=(vx *tMatrix.a+vy *tMatrix.c+tMatrix.tx)*weight;
				wy+=(vx *tMatrix.b+vy *tMatrix.d+tMatrix.ty)*weight;
			}
			worldVertices[w]=wx;
			worldVertices[w+1]=wy;
		}
	}

	/**
	*计算路径上的节点
	*@param boneSlot
	*@param boneList
	*@param graphics
	*@param spacesCount
	*@param tangents
	*@param percentPosition
	*@param percentSpacing
	*@return
	*/
	__proto.computeWorldPositions=function(boneSlot,boneList,graphics,spacesCount,tangents,percentPosition,percentSpacing){
		var tBones=boneSlot.currDisplayData.bones;
		var tWeights=boneSlot.currDisplayData.weights;
		var tTriangles=boneSlot.currDisplayData.triangles;
		var tRx=0;
		var tRy=0;
		var nn=0;
		var tMatrix;
		var tX=NaN;
		var tY=NaN;
		var tB=0;
		var tWeight=0;
		var tVertices=[];
		var i=0,j=0,n=0;
		var verticesLength=boneSlot.currDisplayData.verLen;
		var target=boneSlot;
		var position=this.position;
		var spaces=this._spaces;
		var world=[];
		var out=[];
		var closed=false;
		var curveCount=verticesLength / 6;
		var prevCurve=-1;
		var pathLength=NaN;
		var o=0,curve=0;
		var p=NaN;
		var space=NaN;
		var prev=NaN;
		var length=NaN;
		if (!true){
			var lengths=boneSlot.currDisplayData.lengths;
			curveCount-=closed ? 1 :2;
			pathLength=lengths[curveCount];
			if (percentPosition)
				position *=pathLength;
			if (percentSpacing){
				for (i=0;i < spacesCount;i++)
				spaces[i] *=pathLength;
			}
			world.length=8;
			for (i=0,o=0,curve=0;i < spacesCount;i++,o+=3){
				space=spaces[i];
				position+=space;
				p=position;
				if (closed){
					p %=pathLength;
					if (p < 0)
						p+=pathLength;
					curve=0;
				}
				else if (p < 0){
					if (prevCurve !=PathConstraint.BEFORE){
						prevCurve=PathConstraint.BEFORE;
						this.computeWorldVertices2(target,boneList,2,4,world,0);
					}
					this.addBeforePosition(p,world,0,out,o);
					continue ;
				}
				else if (p > pathLength){
					if (prevCurve !=PathConstraint.AFTER){
						prevCurve=PathConstraint.AFTER;
						this.computeWorldVertices2(target,boneList,verticesLength-6,4,world,0);
					}
					this.addAfterPosition(p-pathLength,world,0,out,o);
					continue ;
				}
				for (;;curve++){
					length=lengths[curve];
					if (p > length)
						continue ;
					if (curve==0)
						p /=length;
					else {
						prev=lengths[curve-1];
						p=(p-prev)/ (length-prev);
					}
					break ;
				}
				if (curve !=prevCurve){
					prevCurve=curve;
					if (closed && curve==curveCount){
						this.computeWorldVertices2(target,boneList,verticesLength-4,4,world,0);
						this.computeWorldVertices2(target,boneList,0,4,world,4);
					}
					else
					this.computeWorldVertices2(target,boneList,curve *6+2,8,world,0);
				}
				this.addCurvePosition(p,world[0],world[1],world[2],world[3],world[4],world[5],world[6],world[7],out,o,tangents || (i > 0 && space==0));
			}
			return out;
		}
		if (closed){
			verticesLength+=2;
			world[verticesLength-2]=world[0];
			world[verticesLength-1]=world[1];
		}
		else {
			curveCount--;
			verticesLength-=4;
			this.computeWorldVertices2(boneSlot,boneList,2,verticesLength,tVertices,0);
			if (this._debugKey){
				for (i=0;i < tVertices.length;){
					graphics.drawCircle(tVertices[i++],tVertices[i++],10,"#ff0000");
				}
			}
			world=tVertices;
		}
		this._curves.length=curveCount;
		var curves=this._curves;
		pathLength=0;
		var x1=world[0],y1=world[1],cx1=0,cy1=0,cx2=0,cy2=0,x2=0,y2=0;
		var tmpx=NaN,tmpy=NaN,dddfx=NaN,dddfy=NaN,ddfx=NaN,ddfy=NaN,dfx=NaN,dfy=NaN;
		var w=0;
		for (i=0,w=2;i < curveCount;i++,w+=6){
			cx1=world[w];
			cy1=world[w+1];
			cx2=world[w+2];
			cy2=world[w+3];
			x2=world[w+4];
			y2=world[w+5];
			tmpx=(x1-cx1 *2+cx2)*0.1875;
			tmpy=(y1-cy1 *2+cy2)*0.1875;
			dddfx=((cx1-cx2)*3-x1+x2)*0.09375;
			dddfy=((cy1-cy2)*3-y1+y2)*0.09375;
			ddfx=tmpx *2+dddfx;
			ddfy=tmpy *2+dddfy;
			dfx=(cx1-x1)*0.75+tmpx+dddfx *0.16666667;
			dfy=(cy1-y1)*0.75+tmpy+dddfy *0.16666667;
			pathLength+=Math.sqrt(dfx *dfx+dfy *dfy);
			dfx+=ddfx;
			dfy+=ddfy;
			ddfx+=dddfx;
			ddfy+=dddfy;
			pathLength+=Math.sqrt(dfx *dfx+dfy *dfy);
			dfx+=ddfx;
			dfy+=ddfy;
			pathLength+=Math.sqrt(dfx *dfx+dfy *dfy);
			dfx+=ddfx+dddfx;
			dfy+=ddfy+dddfy;
			pathLength+=Math.sqrt(dfx *dfx+dfy *dfy);
			curves[i]=pathLength;
			x1=x2;
			y1=y2;
		}
		if (percentPosition)
			position *=pathLength;
		if (percentSpacing){
			for (i=0;i < spacesCount;i++)
			spaces[i] *=pathLength;
		};
		var segments=this._segments;
		var curveLength=0;
		var segment=0;
		for (i=0,o=0,curve=0,segment=0;i < spacesCount;i++,o+=3){
			space=spaces[i];
			position+=space;
			p=position;
			if (closed){
				p %=pathLength;
				if (p < 0)
					p+=pathLength;
				curve=0;
			}
			else if (p < 0){
				this.addBeforePosition(p,world,0,out,o);
				continue ;
			}
			else if (p > pathLength){
				this.addAfterPosition(p-pathLength,world,verticesLength-4,out,o);
				continue ;
			}
			for (;;curve++){
				length=curves[curve];
				if (p > length)
					continue ;
				if (curve==0)
					p /=length;
				else {
					prev=curves[curve-1];
					p=(p-prev)/ (length-prev);
				}
				break ;
			}
			if (curve !=prevCurve){
				prevCurve=curve;
				var ii=curve *6;
				x1=world[ii];
				y1=world[ii+1];
				cx1=world[ii+2];
				cy1=world[ii+3];
				cx2=world[ii+4];
				cy2=world[ii+5];
				x2=world[ii+6];
				y2=world[ii+7];
				tmpx=(x1-cx1 *2+cx2)*0.03;
				tmpy=(y1-cy1 *2+cy2)*0.03;
				dddfx=((cx1-cx2)*3-x1+x2)*0.006;
				dddfy=((cy1-cy2)*3-y1+y2)*0.006;
				ddfx=tmpx *2+dddfx;
				ddfy=tmpy *2+dddfy;
				dfx=(cx1-x1)*0.3+tmpx+dddfx *0.16666667;
				dfy=(cy1-y1)*0.3+tmpy+dddfy *0.16666667;
				curveLength=Math.sqrt(dfx *dfx+dfy *dfy);
				segments[0]=curveLength;
				for (ii=1;ii < 8;ii++){
					dfx+=ddfx;
					dfy+=ddfy;
					ddfx+=dddfx;
					ddfy+=dddfy;
					curveLength+=Math.sqrt(dfx *dfx+dfy *dfy);
					segments[ii]=curveLength;
				}
				dfx+=ddfx;
				dfy+=ddfy;
				curveLength+=Math.sqrt(dfx *dfx+dfy *dfy);
				segments[8]=curveLength;
				dfx+=ddfx+dddfx;
				dfy+=ddfy+dddfy;
				curveLength+=Math.sqrt(dfx *dfx+dfy *dfy);
				segments[9]=curveLength;
				segment=0;
			}
			p *=curveLength;
			for (;;segment++){
				length=segments[segment];
				if (p > length)
					continue ;
				if (segment==0)
					p /=length;
				else {
					prev=segments[segment-1];
					p=segment+(p-prev)/ (length-prev);
				}
				break ;
			}
			this.addCurvePosition(p *0.1,x1,y1,cx1,cy1,cx2,cy2,x2,y2,out,o,tangents || (i > 0 && space==0));
		}
		return out;
	}

	__proto.addBeforePosition=function(p,temp,i,out,o){
		var x1=temp[i],y1=temp[i+1],dx=temp[i+2]-x1,dy=temp[i+3]-y1,r=Math.atan2(dy,dx);
		out[o]=x1+p *Math.cos(r);
		out[o+1]=y1+p *Math.sin(r);
		out[o+2]=r;
	}

	__proto.addAfterPosition=function(p,temp,i,out,o){
		var x1=temp[i+2],y1=temp[i+3],dx=x1-temp[i],dy=y1-temp[i+1],r=Math.atan2(dy,dx);
		out[o]=x1+p *Math.cos(r);
		out[o+1]=y1+p *Math.sin(r);
		out[o+2]=r;
	}

	__proto.addCurvePosition=function(p,x1,y1,cx1,cy1,cx2,cy2,x2,y2,out,o,tangents){
		if (p==0)
			p=0.0001;
		var tt=p *p,ttt=tt *p,u=1-p,uu=u *u,uuu=uu *u;
		var ut=u *p,ut3=ut *3,uut3=u *ut3,utt3=ut3 *p;
		var x=x1 *uuu+cx1 *uut3+cx2 *utt3+x2 *ttt,y=y1 *uuu+cy1 *uut3+cy2 *utt3+y2 *ttt;
		out[o]=x;
		out[o+1]=y;
		if (tangents){
			out[o+2]=Math.atan2(y-(y1 *uu+cy1 *ut *2+cy2 *tt),x-(x1 *uu+cx1 *ut *2+cx2 *tt));
		}
		else {
			out[o+2]=0;
		}
	}

	PathConstraint.NONE=-1;
	PathConstraint.BEFORE=-2;
	PathConstraint.AFTER=-3;
	__static(PathConstraint,
	['_tempMt',function(){return this._tempMt=new Matrix();}
	]);
	return PathConstraint;
})()


/**
*@private
*/
//class laya.ani.bone.PathConstraintData
var PathConstraintData=(function(){
	function PathConstraintData(){
		this.name=null;
		this.target=null;
		this.positionMode=null;
		this.spacingMode=null;
		this.rotateMode=null;
		this.offsetRotation=NaN;
		this.position=NaN;
		this.spacing=NaN;
		this.rotateMix=NaN;
		this.translateMix=NaN;
		this.bones=[];
	}

	__class(PathConstraintData,'laya.ani.bone.PathConstraintData');
	return PathConstraintData;
})()


/**
*@private
*/
//class laya.ani.bone.SkinData
var SkinData=(function(){
	function SkinData(){
		this.name=null;
		this.slotArr=[];
	}

	__class(SkinData,'laya.ani.bone.SkinData');
	return SkinData;
})()


/**
*@private
*/
//class laya.ani.bone.SkinSlotDisplayData
var SkinSlotDisplayData=(function(){
	function SkinSlotDisplayData(){
		this.name=null;
		this.attachmentName=null;
		this.type=0;
		this.transform=null;
		this.width=NaN;
		this.height=NaN;
		this.texture=null;
		this.bones=null;
		this.uvs=null;
		this.weights=null;
		this.triangles=null;
		this.vertices=null;
		this.lengths=null;
		this.verLen=0;
	}

	__class(SkinSlotDisplayData,'laya.ani.bone.SkinSlotDisplayData');
	var __proto=SkinSlotDisplayData.prototype;
	__proto.createTexture=function(currTexture){
		if (this.texture)return this.texture;
		this.texture=new Texture(currTexture.bitmap,this.uvs);
		if (this.uvs[0] > this.uvs[4]
			&& this.uvs[1] > this.uvs[5]){
			this.texture.width=currTexture.height;
			this.texture.height=currTexture.width;
			this.texture.offsetX=-currTexture.offsetX;
			this.texture.offsetY=-currTexture.offsetY;
			this.texture.sourceWidth=currTexture.sourceHeight;
			this.texture.sourceHeight=currTexture.sourceWidth;
			}else {
			this.texture.width=currTexture.width;
			this.texture.height=currTexture.height;
			this.texture.offsetX=-currTexture.offsetX;
			this.texture.offsetY=-currTexture.offsetY;
			this.texture.sourceWidth=currTexture.sourceWidth;
			this.texture.sourceHeight=currTexture.sourceHeight;
		}
		if (!Render.isWebGL){
			if (this.uvs[1] > this.uvs[5]){
				this.texture.offsetY=this.texture.sourceHeight-this.texture.height-this.texture.offsetY;
			}
		}
		return this.texture;
	}

	__proto.destory=function(){
		if (this.texture)this.texture.destroy();
	}

	return SkinSlotDisplayData;
})()


/**
*@private
*/
//class laya.ani.bone.SlotData
var SlotData=(function(){
	function SlotData(){
		this.name=null;
		this.displayArr=[];
	}

	__class(SlotData,'laya.ani.bone.SlotData');
	var __proto=SlotData.prototype;
	__proto.getDisplayByName=function(name){
		var tDisplay;
		for (var i=0,n=this.displayArr.length;i < n;i++){
			tDisplay=this.displayArr[i];
			if (tDisplay.attachmentName==name){
				return i;
			}
		}
		return-1;
	}

	return SlotData;
})()


/**
*@private
*/
//class laya.ani.bone.TfConstraint
var TfConstraint=(function(){
	function TfConstraint(data,bones){
		this._data=null;
		this._bones=null;
		this.target=null;
		this.rotateMix=NaN;
		this.translateMix=NaN;
		this.scaleMix=NaN;
		this.shearMix=NaN;
		this._temp=__newvec(2,0);
		this._data=data;
		if (this._bones==null){
			this._bones=[];
		}
		this.target=bones[data.targetIndex];
		var j=0,n=0;
		for (j=0,n=data.boneIndexs.length;j < n;j++){
			this._bones.push(bones[data.boneIndexs[j]]);
		}
		this.rotateMix=data.rotateMix;
		this.translateMix=data.translateMix;
		this.scaleMix=data.scaleMix;
		this.shearMix=data.shearMix;
	}

	__class(TfConstraint,'laya.ani.bone.TfConstraint');
	var __proto=TfConstraint.prototype;
	__proto.apply=function(){
		var tTfBone;
		var ta=this.target.resultMatrix.a,tb=this.target.resultMatrix.b,tc=this.target.resultMatrix.c,td=this.target.resultMatrix.d;
		for (var j=0,n=this._bones.length;j < n;j++){
			tTfBone=this._bones[j];
			if (this.rotateMix > 0){
				var a=tTfBone.resultMatrix.a,b=tTfBone.resultMatrix.b,c=tTfBone.resultMatrix.c,d=tTfBone.resultMatrix.d;
				var r=Math.atan2(tc,ta)-Math.atan2(c,a)+this._data.offsetRotation *Math.PI / 180;
				if (r > Math.PI)
					r-=Math.PI *2;
				else if (r <-Math.PI)r+=Math.PI *2;
				r *=this.rotateMix;
				var cos=Math.cos(r),sin=Math.sin(r);
				tTfBone.resultMatrix.a=cos *a-sin *c;
				tTfBone.resultMatrix.b=cos *b-sin *d;
				tTfBone.resultMatrix.c=sin *a+cos *c;
				tTfBone.resultMatrix.d=sin *b+cos *d;
			}
			if (this.translateMix){
				this._temp[0]=this._data.offsetX;
				this._temp[1]=this._data.offsetY;
				this.target.localToWorld(this._temp);
				tTfBone.resultMatrix.tx+=(this._temp[0]-tTfBone.resultMatrix.tx)*this.translateMix;
				tTfBone.resultMatrix.ty+=(this._temp[1]-tTfBone.resultMatrix.ty)*this.translateMix;
				tTfBone.updateChild();
			}
			if (this.scaleMix > 0){
				var bs=Math.sqrt(tTfBone.resultMatrix.a *tTfBone.resultMatrix.a+tTfBone.resultMatrix.c *tTfBone.resultMatrix.c);
				var ts=Math.sqrt(ta *ta+tc *tc);
				var s=bs > 0.00001 ? (bs+(ts-bs+this._data.offsetScaleX)*this.scaleMix)/ bs :0;
				tTfBone.resultMatrix.a *=s;
				tTfBone.resultMatrix.c *=s;
				bs=Math.sqrt(tTfBone.resultMatrix.b *tTfBone.resultMatrix.b+tTfBone.resultMatrix.d *tTfBone.resultMatrix.d);
				ts=Math.sqrt(tb *tb+td *td);
				s=bs > 0.00001 ? (bs+(ts-bs+this._data.offsetScaleY)*this.scaleMix)/ bs :0;
				tTfBone.resultMatrix.b *=s;
				tTfBone.resultMatrix.d *=s;
			}
			if (this.shearMix > 0){
				b=tTfBone.resultMatrix.b,d=tTfBone.resultMatrix.d;
				var by=Math.atan2(d,b);
				r=Math.atan2(td,tb)-Math.atan2(tc,ta)-(by-Math.atan2(tTfBone.resultMatrix.c,tTfBone.resultMatrix.a));
				if (r > Math.PI)
					r-=Math.PI *2;
				else if (r <-Math.PI)r+=Math.PI *2;
				r=by+(r+this._data.offsetShearY *Math.PI / 180)*this.shearMix;
				s=Math.sqrt(b *b+d *d);
				tTfBone.resultMatrix.b=Math.cos(r)*s;
				tTfBone.resultMatrix.d=Math.sin(r)*s;
			}
		}
	}

	return TfConstraint;
})()


/**
*@private
*/
//class laya.ani.bone.TfConstraintData
var TfConstraintData=(function(){
	function TfConstraintData(){
		this.name=null;
		this.targetIndex=0;
		this.rotateMix=NaN;
		this.translateMix=NaN;
		this.scaleMix=NaN;
		this.shearMix=NaN;
		this.offsetRotation=NaN;
		this.offsetX=NaN;
		this.offsetY=NaN;
		this.offsetScaleX=NaN;
		this.offsetScaleY=NaN;
		this.offsetShearY=NaN;
		this.boneIndexs=[];
	}

	__class(TfConstraintData,'laya.ani.bone.TfConstraintData');
	return TfConstraintData;
})()


/**
*@private
*/
//class laya.ani.bone.Transform
var Transform=(function(){
	function Transform(){
		this.skX=0;
		this.skY=0;
		this.scX=1;
		this.scY=1;
		this.x=0;
		this.y=0;
		this.skewX=0;
		this.skewY=0;
		this.mMatrix=null;
	}

	__class(Transform,'laya.ani.bone.Transform');
	var __proto=Transform.prototype;
	__proto.initData=function(data){
		if (data.x !=undefined){
			this.x=data.x;
		}
		if (data.y !=undefined){
			this.y=data.y;
		}
		if (data.skX !=undefined){
			this.skX=data.skX;
		}
		if (data.skY !=undefined){
			this.skY=data.skY;
		}
		if (data.scX !=undefined){
			this.scX=data.scX;
		}
		if (data.scY !=undefined){
			this.scY=data.scY;
		}
	}

	__proto.getMatrix=function(){
		var tMatrix;
		if (this.mMatrix){
			tMatrix=this.mMatrix;
			}else {
			tMatrix=this.mMatrix=new Matrix();
		}
		tMatrix.identity();
		tMatrix.scale(this.scX,this.scY);
		if (this.skewX || this.skewY){
			this.skew(tMatrix,this.skewX *Math.PI / 180,this.skewY *Math.PI / 180);
		}
		tMatrix.rotate(this.skX *Math.PI / 180);
		tMatrix.translate(this.x,this.y);
		return tMatrix;
	}

	__proto.skew=function(m,x,y){
		var sinX=Math.sin(y);
		var cosX=Math.cos(y);
		var sinY=Math.sin(x);
		var cosY=Math.cos(x);
		m.setTo(m.a *cosY-m.b *sinX,
		m.a *sinY+m.b *cosX,
		m.c *cosY-m.d *sinX,
		m.c *sinY+m.d *cosX,
		m.tx *cosY-m.ty *sinX,
		m.tx *sinY+m.ty *cosX);
		return m;
	}

	return Transform;
})()


/**
*用于UV转换的工具类
*@private
*/
//class laya.ani.bone.UVTools
var UVTools=(function(){
	function UVTools(){}
	__class(UVTools,'laya.ani.bone.UVTools');
	UVTools.getRelativeUV=function(bigUV,smallUV,rst){
		var startX=bigUV[0];
		var width=bigUV[2]-bigUV[0];
		var startY=bigUV[1];
		var height=bigUV[5]-bigUV[1];
		if(!rst)rst=[];
		rst.length=smallUV.length;
		var i=0,len=0;
		len=rst.length;
		var dWidth=1 / width;
		var dHeight=1 / height;
		for (i=0;i < len;i+=2){
			rst[i]=(smallUV[i]-startX)*dWidth;
			rst[i+1]=(smallUV[i+1]-startY)*dHeight;
		}
		return rst;
	}

	UVTools.getAbsoluteUV=function(bigUV,smallUV,rst){
		if (bigUV[0]==0 && bigUV[1]==0 && bigUV[4]==1 && bigUV[5]==1){
			if (rst){
				Utils.copyArray(rst,smallUV);
				return rst;
				}else{
				return smallUV;
			}
		};
		var startX=bigUV[0];
		var width=bigUV[2]-bigUV[0];
		var startY=bigUV[1];
		var height=bigUV[5]-bigUV[1];
		if(!rst)rst=[];
		rst.length=smallUV.length;
		var i=0,len=0;
		len=rst.length;
		for (i=0;i < len;i+=2){
			rst[i]=smallUV[i]*width+startX;
			rst[i+1]=smallUV[i+1]*height+startY;
		}
		return rst;
	}

	return UVTools;
})()


/**
*@private
*@author ...
*/
//class laya.ani.KeyFramesContent
var KeyFramesContent=(function(){
	function KeyFramesContent(){
		this.startTime=NaN;
		this.duration=NaN;
		this.interpolationData=null;
		//私有插值方式 [type0(插值类型),Data0(插值数据,可为空)，type1(插值类型),Data1(插值数据,可为空)] 注意：254全线性插值，255全不插值
		this.data=null;
		//=new Float32Array();
		this.nextData=null;
	}

	__class(KeyFramesContent,'laya.ani.KeyFramesContent');
	return KeyFramesContent;
})()


/**
*@private
*...
*@author ww
*/
//class laya.ani.math.BezierLerp
var BezierLerp=(function(){
	function BezierLerp(){}
	__class(BezierLerp,'laya.ani.math.BezierLerp');
	BezierLerp.getBezierRate=function(t,px0,py0,px1,py1){
		var key=BezierLerp._getBezierParamKey(px0,py0,px1,py1);
		var vKey=key *100+t;
		if (BezierLerp._bezierResultCache[vKey])return BezierLerp._bezierResultCache[vKey];
		var points=BezierLerp._getBezierPoints(px0,py0,px1,py1,key);
		var i=0,len=0;
		len=points.length;
		for (i=0;i < len;i+=2){
			if (t <=points[i]){
				BezierLerp._bezierResultCache[vKey]=points[i+1];
				return points[i+1];
			}
		}
		BezierLerp._bezierResultCache[vKey]=1;
		return 1;
	}

	BezierLerp._getBezierParamKey=function(px0,py0,px1,py1){
		return (((px0 *100+py0)*100+px1)*100+py1)*100;
	}

	BezierLerp._getBezierPoints=function(px0,py0,px1,py1,key){
		if (BezierLerp._bezierPointsCache[key])return BezierLerp._bezierPointsCache[key];
		var controlPoints;
		controlPoints=[0,0,px0,py0,px1,py1,1,1];
		var bz;
		bz=new Bezier();
		var points;
		points=bz.getBezierPoints(controlPoints,100,3);
		BezierLerp._bezierPointsCache[key]=points;
		return points;
	}

	BezierLerp._bezierResultCache={};
	BezierLerp._bezierPointsCache={};
	return BezierLerp;
})()


/**
*<code>AnimationPlayer</code> 类用于动画播放器。
*/
//class laya.ani.AnimationPlayer extends laya.events.EventDispatcher
var AnimationPlayer=(function(_super){
	function AnimationPlayer(){
		/**@private */
		this._destroyed=false;
		/**数据模板*/
		this._templet=null;
		/**当前精确时间，不包括重播时间*/
		this._currentTime=NaN;
		/**当前帧时间，不包括重播时间*/
		this._currentFrameTime=NaN;
		/**动画播放的起始时间位置*/
		this._playStart=NaN;
		/**动画播放的结束时间位置*/
		this._playEnd=NaN;
		/**动画播放一次的总时间*/
		this._playDuration=NaN;
		/**动画播放总时间*/
		this._overallDuration=NaN;
		/**是否在一帧结束时停止*/
		this._stopWhenCircleFinish=false;
		/**已播放时间，包括重播时间*/
		this._elapsedPlaybackTime=NaN;
		/**播放时帧数*/
		this._startUpdateLoopCount=NaN;
		/**当前动画索引*/
		this._currentAnimationClipIndex=0;
		/**当前帧数*/
		this._currentKeyframeIndex=0;
		/**是否暂停*/
		this._paused=false;
		/**默认帧率,必须大于0*/
		this._cacheFrameRate=0;
		/**帧率间隔时间*/
		this._cacheFrameRateInterval=NaN;
		/**缓存播放速率*/
		this._cachePlayRate=NaN;
		this._fullFrames=null;
		/**是否缓存*/
		this.isCache=true;
		/**播放速率*/
		this.playbackRate=1.0;
		/**停止时是否归零*/
		this.returnToZeroStopped=false;
		AnimationPlayer.__super.call(this);
		this._destroyed=false;
		this._currentAnimationClipIndex=-1;
		this._currentKeyframeIndex=-1;
		this._currentTime=0.0;
		this._overallDuration=Number.MAX_VALUE;
		this._stopWhenCircleFinish=false;
		this._elapsedPlaybackTime=0;
		this._startUpdateLoopCount=-1;
		this._cachePlayRate=1.0;
		this.cacheFrameRate=60;
		this.returnToZeroStopped=false;
	}

	__class(AnimationPlayer,'laya.ani.AnimationPlayer',_super);
	var __proto=AnimationPlayer.prototype;
	Laya.imps(__proto,{"laya.resource.IDestroy":true})
	/**
	*@private
	*/
	__proto._onTempletLoadedComputeFullKeyframeIndices=function(cachePlayRate,cacheFrameRate,templet){
		if (this._templet===templet && this._cachePlayRate===cachePlayRate && this._cacheFrameRate===cacheFrameRate)
			this._computeFullKeyframeIndices();
	}

	/**
	*@private
	*/
	__proto._computeFullKeyframeIndices=function(){
		var anifullFrames=this._fullFrames=[];
		var templet=this._templet;
		var cacheFrameInterval=this._cacheFrameRateInterval *this._cachePlayRate;
		for (var i=0,iNum=templet.getAnimationCount();i < iNum;i++){
			var aniFullFrame=[];
			for (var j=0,jNum=templet.getAnimation(i).nodes.length;j < jNum;j++){
				var node=templet.getAnimation(i).nodes[j];
				var frameCount=Math.floor(node.playTime / cacheFrameInterval+0.01);
				var nodeFullFrames=new Uint16Array(frameCount+1);
				var lastFrameIndex=-1;
				for (var n=0,nNum=node.keyFrame.length;n < nNum;n++){
					var keyFrame=node.keyFrame[n];
					var tm=keyFrame.startTime;
					var endTm=tm+keyFrame.duration+cacheFrameInterval;
					do {
						var frameIndex=Math.floor(tm / cacheFrameInterval+0.5);
						for (var k=lastFrameIndex+1;k < frameIndex;k++)
						nodeFullFrames[k]=n;
						lastFrameIndex=frameIndex;
						nodeFullFrames[frameIndex]=n;
						tm+=cacheFrameInterval;
					}while (tm <=endTm);
				}
				aniFullFrame.push(nodeFullFrames);
			}
			anifullFrames.push(aniFullFrame);
		}
	}

	/**
	*@private
	*/
	__proto._onAnimationTempletLoaded=function(){
		(this.destroyed)|| (this._calculatePlayDuration());
	}

	/**
	*@private
	*/
	__proto._calculatePlayDuration=function(){
		if (this.state!==/*laya.ani.AnimationState.stopped*/0){
			var oriDuration=this._templet.getAniDuration(this._currentAnimationClipIndex);
			(this._playEnd===0)&& (this._playEnd=oriDuration);
			if (this._playEnd > oriDuration)
				this._playEnd=oriDuration;
			this._playDuration=this._playEnd-this._playStart;
		}
	}

	/**
	*@private
	*/
	__proto._setPlayParams=function(time,cacheFrameInterval){
		this._currentTime=time;
		this._currentKeyframeIndex=Math.max(Math.floor((this.currentPlayTime)/ cacheFrameInterval+0.01),0);
		this._currentFrameTime=this._currentKeyframeIndex *cacheFrameInterval;
	}

	/**
	*@private
	*/
	__proto._setPlayParamsWhenStop=function(currentAniClipPlayDuration,cacheFrameInterval){
		this._currentTime=currentAniClipPlayDuration;
		this._currentKeyframeIndex=Math.max(Math.floor(currentAniClipPlayDuration / cacheFrameInterval+0.01),0);
		this._currentFrameTime=this._currentKeyframeIndex *cacheFrameInterval;
		this._currentAnimationClipIndex=-1;
	}

	/**
	*@private
	*/
	__proto._update=function(elapsedTime){
		if (this._currentAnimationClipIndex===-1 || this._paused || !this._templet || !this._templet.loaded)
			return;
		var cacheFrameInterval=this._cacheFrameRateInterval *this._cachePlayRate;
		var time=0;
		(this._startUpdateLoopCount!==Stat.loopCount)&& (time=elapsedTime *this.playbackRate,this._elapsedPlaybackTime+=time);
		var currentAniClipPlayDuration=this.playDuration;
		if ((this._overallDuration!==0 && this._elapsedPlaybackTime >=this._overallDuration)|| (this._overallDuration===0 && this._elapsedPlaybackTime >=currentAniClipPlayDuration)){
			this._setPlayParamsWhenStop(currentAniClipPlayDuration,cacheFrameInterval);
			this.event(/*laya.events.Event.STOPPED*/"stopped");
			return;
		}
		time+=this._currentTime;
		if (currentAniClipPlayDuration > 0){
			if (time >=currentAniClipPlayDuration){
				do {
					time-=currentAniClipPlayDuration;
					if (this._stopWhenCircleFinish){
						this._setPlayParamsWhenStop(currentAniClipPlayDuration,cacheFrameInterval);
						this._stopWhenCircleFinish=false;
						this.event(/*laya.events.Event.STOPPED*/"stopped");
						return;
					}
					if (time < currentAniClipPlayDuration){
						this._setPlayParams(time,cacheFrameInterval);
						this.event(/*laya.events.Event.COMPLETE*/"complete");
					}
				}while (time >=currentAniClipPlayDuration)
				}else {
				this._setPlayParams(time,cacheFrameInterval);
			}
			}else {
			if (this._stopWhenCircleFinish){
				this._setPlayParamsWhenStop(currentAniClipPlayDuration,cacheFrameInterval);
				this._stopWhenCircleFinish=false;
				this.event(/*laya.events.Event.STOPPED*/"stopped");
				return;
			}
			this._currentTime=this._currentFrameTime=this._currentKeyframeIndex=0;
			this.event(/*laya.events.Event.COMPLETE*/"complete");
		}
	}

	/**
	*@private
	*/
	__proto._destroy=function(){
		this.offAll();
		this._templet=null;
		this._fullFrames=null;
		this._destroyed=true;
	}

	/**
	*播放动画。
	*@param index 动画索引。
	*@param playbackRate 播放速率。
	*@param duration 播放时长（0为1次,Number.MAX_VALUE为循环播放）。
	*@param playStart 播放的起始时间位置。
	*@param playEnd 播放的结束时间位置。（0为动画一次循环的最长结束时间位置）。
	*/
	__proto.play=function(index,playbackRate,overallDuration,playStart,playEnd){
		(index===void 0)&& (index=0);
		(playbackRate===void 0)&& (playbackRate=1.0);
		(overallDuration===void 0)&& (overallDuration=2147483647);
		(playStart===void 0)&& (playStart=0);
		(playEnd===void 0)&& (playEnd=0);
		if (!this._templet)
			throw new Error("AnimationPlayer:templet must not be null,maybe you need to set url.");
		if (overallDuration < 0 || playStart < 0 || playEnd < 0)
			throw new Error("AnimationPlayer:overallDuration,playStart and playEnd must large than zero.");
		if ((playEnd!==0)&& (playStart > playEnd))
			throw new Error("AnimationPlayer:start must less than end.");
		this._currentTime=0;
		this._currentFrameTime=0;
		this._elapsedPlaybackTime=0;
		this.playbackRate=playbackRate;
		this._overallDuration=overallDuration;
		this._playStart=playStart;
		this._playEnd=playEnd;
		this._paused=false;
		this._currentAnimationClipIndex=index;
		this._currentKeyframeIndex=0;
		this._startUpdateLoopCount=Stat.loopCount;
		this.event(/*laya.events.Event.PLAYED*/"played");
		if (this._templet.loaded)
			this._calculatePlayDuration();
		else
		this._templet.once(/*laya.events.Event.LOADED*/"loaded",this,this._onAnimationTempletLoaded);
		this._update(0);
	}

	/**
	*播放动画。
	*@param index 动画索引。
	*@param playbackRate 播放速率。
	*@param duration 播放时长（0为1次,Number.MAX_VALUE为循环播放）。
	*@param playStartFrame 播放的原始起始帧率位置。
	*@param playEndFrame 播放的原始结束帧率位置。（0为动画一次循环的最长结束时间位置）。
	*/
	__proto.playByFrame=function(index,playbackRate,overallDuration,playStartFrame,playEndFrame,fpsIn3DBuilder){
		(index===void 0)&& (index=0);
		(playbackRate===void 0)&& (playbackRate=1.0);
		(overallDuration===void 0)&& (overallDuration=2147483647);
		(playStartFrame===void 0)&& (playStartFrame=0);
		(playEndFrame===void 0)&& (playEndFrame=0);
		(fpsIn3DBuilder===void 0)&& (fpsIn3DBuilder=30);
		var interval=1000.0 / fpsIn3DBuilder;
		this.play(index,playbackRate,overallDuration,playStartFrame *interval,playEndFrame *interval);
	}

	/**
	*停止播放当前动画
	*@param immediate 是否立即停止
	*/
	__proto.stop=function(immediate){
		(immediate===void 0)&& (immediate=true);
		if (immediate){
			this._currentTime=this._currentFrameTime=this._currentKeyframeIndex=0;
			this._currentAnimationClipIndex=-1;
			this.event(/*laya.events.Event.STOPPED*/"stopped");
			}else {
			this._stopWhenCircleFinish=true;
		}
	}

	/**
	*动画播放的结束时间位置。
	*@return 结束时间位置。
	*/
	__getset(0,__proto,'playEnd',function(){
		return this._playEnd;
	});

	/**
	*设置动画数据模板,注意：修改此值会有计算开销。
	*@param value 动画数据模板
	*/
	/**
	*获取动画数据模板
	*@param value 动画数据模板
	*/
	__getset(0,__proto,'templet',function(){
		return this._templet;
		},function(value){
		if (!this.state===/*laya.ani.AnimationState.stopped*/0)
			this.stop(true);
		if (this._templet!==value){
			this._templet=value;
			if (value.loaded)
				this._computeFullKeyframeIndices();
			else
			value.once(/*laya.events.Event.LOADED*/"loaded",this,this._onTempletLoadedComputeFullKeyframeIndices,[this._cachePlayRate,this._cacheFrameRate]);
		}
	});

	/**
	*动画播放的起始时间位置。
	*@return 起始时间位置。
	*/
	__getset(0,__proto,'playStart',function(){
		return this._playStart;
	});

	/**
	*获取动画播放一次的总时间
	*@return 动画播放一次的总时间
	*/
	__getset(0,__proto,'playDuration',function(){
		return this._playDuration;
	});

	/**
	*获取当前播放状态
	*@return 当前播放状态
	*/
	__getset(0,__proto,'state',function(){
		if (this._currentAnimationClipIndex===-1)
			return /*laya.ani.AnimationState.stopped*/0;
		if (this._paused)
			return /*laya.ani.AnimationState.paused*/1;
		return /*laya.ani.AnimationState.playing*/2;
	});

	/**
	*获取当前帧数
	*@return 当前帧数
	*/
	__getset(0,__proto,'currentKeyframeIndex',function(){
		return this._currentKeyframeIndex;
	});

	/**
	*获取动画播放的总总时间
	*@return 动画播放的总时间
	*/
	__getset(0,__proto,'overallDuration',function(){
		return this._overallDuration;
	});

	/**
	*获取当前帧时间，不包括重播时间
	*@return value 当前时间
	*/
	__getset(0,__proto,'currentFrameTime',function(){
		return this._currentFrameTime;
	});

	/**
	*获取当前动画索引
	*@return value 当前动画索引
	*/
	__getset(0,__proto,'currentAnimationClipIndex',function(){
		return this._currentAnimationClipIndex;
	});

	/**
	*获取当前精确时间，不包括重播时间
	*@return value 当前时间
	*/
	__getset(0,__proto,'currentPlayTime',function(){
		return this._currentTime+this._playStart;
	});

	/**
	*设置缓存播放速率,默认值为1.0,注意：修改此值会有计算开销。*
	*@return value 缓存播放速率。
	*/
	/**
	*获取缓存播放速率。*
	*@return 缓存播放速率。
	*/
	__getset(0,__proto,'cachePlayRate',function(){
		return this._cachePlayRate;
		},function(value){
		if (this._cachePlayRate!==value){
			this._cachePlayRate=value;
			if (this._templet)
				if (this._templet.loaded)
			this._computeFullKeyframeIndices();
			else
			this._templet.once(/*laya.events.Event.LOADED*/"loaded",this,this._onTempletLoadedComputeFullKeyframeIndices,[value,this._cacheFrameRate]);
		}
	});

	/**
	*设置默认帧率,每秒60帧,注意：修改此值会有计算开销。*
	*@return value 缓存帧率
	*/
	/**
	*获取默认帧率*
	*@return value 默认帧率
	*/
	__getset(0,__proto,'cacheFrameRate',function(){
		return this._cacheFrameRate;
		},function(value){
		if (this._cacheFrameRate!==value){
			this._cacheFrameRate=value;
			this._cacheFrameRateInterval=1000.0 / this._cacheFrameRate;
			if (this._templet)
				if (this._templet.loaded)
			this._computeFullKeyframeIndices();
			else
			this._templet.once(/*laya.events.Event.LOADED*/"loaded",this,this._onTempletLoadedComputeFullKeyframeIndices,[this._cachePlayRate,value]);
		}
	});

	/**
	*设置当前播放位置
	*@param value 当前时间
	*/
	__getset(0,__proto,'currentTime',null,function(value){
		if (this._currentAnimationClipIndex===-1 || !this._templet || !this._templet.loaded)
			return;
		if (value < this._playStart || value > this._playEnd)
			throw new Error("AnimationPlayer:value must large than playStartTime,small than playEndTime.");
		this._startUpdateLoopCount=Stat.loopCount;
		var cacheFrameInterval=this._cacheFrameRateInterval *this._cachePlayRate;
		this._currentTime=value;
		this._currentKeyframeIndex=Math.max(Math.floor(this.currentPlayTime / cacheFrameInterval),0);
		this._currentFrameTime=this._currentKeyframeIndex *cacheFrameInterval;
	});

	/**
	*设置是否暂停
	*@param value 是否暂停
	*/
	/**
	*获取当前是否暂停
	*@return 是否暂停
	*/
	__getset(0,__proto,'paused',function(){
		return this._paused;
		},function(value){
		this._paused=value;
		value && this.event(/*laya.events.Event.PAUSED*/"paused");
	});

	/**
	*获取缓存帧率间隔时间
	*@return 缓存帧率间隔时间
	*/
	__getset(0,__proto,'cacheFrameRateInterval',function(){
		return this._cacheFrameRateInterval;
	});

	/**
	*获取是否已销毁。
	*@return 是否已销毁。
	*/
	__getset(0,__proto,'destroyed',function(){
		return this._destroyed;
	});

	return AnimationPlayer;
})(EventDispatcher)


/**
*@private
*/
//class laya.ani.GraphicsAni extends laya.display.Graphics
var GraphicsAni=(function(_super){
	function GraphicsAni(){
		GraphicsAni.__super.call(this);
		if (Render.isConchNode){
			this["drawSkin"]=function (skin){
				skin.transform || (skin.transform=Matrix.EMPTY);
				/*__JS__ */this._addCmd([skin]);
				this.setSkinMesh&&this.setSkinMesh(skin._ps,skin.mVBData,skin.mEleNum,0,skin.mTexture,skin.transform);
			};
		}
	}

	__class(GraphicsAni,'laya.ani.GraphicsAni',_super);
	var __proto=GraphicsAni.prototype;
	/**
	*@private
	*画自定义蒙皮动画
	*@param skin
	*/
	__proto.drawSkin=function(skin){
		var arr=[skin];
		this._saveToCmd(Render._context._drawSkin,arr);
	}

	GraphicsAni.create=function(){
		var rs=GraphicsAni._caches.pop();
		return rs||new GraphicsAni();
	}

	GraphicsAni.recycle=function(graphics){
		graphics.clear();
		GraphicsAni._caches.push(graphics);
	}

	GraphicsAni._caches=[];
	return GraphicsAni;
})(Graphics)


/**
*@private
*Canvas版本的SkinMesh
*/
//class laya.ani.bone.canvasmesh.SkinMeshCanvas extends laya.ani.bone.canvasmesh.CanvasMeshRender
var SkinMeshCanvas=(function(_super){
	function SkinMeshCanvas(){
		SkinMeshCanvas.__super.call(this);
		this.mesh=new MeshData();
	}

	__class(SkinMeshCanvas,'laya.ani.bone.canvasmesh.SkinMeshCanvas',_super);
	var __proto=SkinMeshCanvas.prototype;
	__proto.init2=function(texture,vs,ps,verticles,uvs){
		if (this.transform){
			this.transform=null;
		};
		var _ps;
		if (ps){
			_ps=ps;
			}else {
			_ps=[];
			_ps.push(0,1,3,3,1,2);
		}
		this.mesh.texture=texture;
		this.mesh.indexes=_ps;
		this.mesh.vertices=verticles;
		this.mesh.uvs=uvs;
	}

	__proto.render=function(context,x,y){
		if(!this.mesh.texture)return;
		if(!this.transform){
			this.transform=SkinMeshCanvas._tempMatrix;
			this.transform.identity();
			this.transform.translate(x,y);
			this.renderToContext(context);
			this.transform.translate(-x,-y);
			this.transform=null;
			}else{
			this.transform.translate(x,y);
			this.renderToContext(context);
			this.transform.translate(-x,-y);
		}
	}

	__static(SkinMeshCanvas,
	['_tempMatrix',function(){return this._tempMatrix=new Matrix();}
	]);
	return SkinMeshCanvas;
})(CanvasMeshRender)


/**
*<code>AnimationTemplet</code> 类用于动画模板资源。
*/
//class laya.ani.AnimationTemplet extends laya.resource.Resource
var AnimationTemplet=(function(_super){
	function AnimationTemplet(){
		/**@private */
		//this._aniVersion=null;
		/**@private */
		this._aniMap={};
		/**@private */
		//this._publicExtData=null;
		/**@private */
		//this._useParent=false;
		/**@private */
		//this.unfixedCurrentFrameIndexes=null;
		/**@private */
		//this.unfixedCurrentTimes=null;
		/**@private */
		//this.unfixedKeyframes=null;
		/**@private */
		this.unfixedLastAniIndex=-1;
		/**@private */
		//this._aniClassName=null;
		/**@private */
		//this._animationDatasCache=null;
		AnimationTemplet.__super.call(this);
		this._anis=new Array;
	}

	__class(AnimationTemplet,'laya.ani.AnimationTemplet',_super);
	var __proto=AnimationTemplet.prototype;
	/**
	*@private
	*/
	__proto.parse=function(data){
		var reader=new Byte(data);
		this._aniVersion=reader.readUTFString();
		AnimationParser01.parse(this,reader);
	}

	/**
	*@private
	*/
	__proto._calculateKeyFrame=function(node,keyframeCount,keyframeDataCount){
		var keyFrames=node.keyFrame;
		keyFrames[keyframeCount]=keyFrames[0];
		for (var i=0;i < keyframeCount;i++){
			var keyFrame=keyFrames[i];
			keyFrame.nextData=(keyFrame.duration===0)? keyFrame.data :keyFrames[i+1].data;
		}
		keyFrames.length--;
	}

	/**
	*@inheritDoc
	*/
	__proto.onAsynLoaded=function(url,data,params){
		var reader=new Byte(data);
		this._aniVersion=reader.readUTFString();
		switch (this._aniVersion){
			case "LAYAANIMATION:02":
				AnimationParser02.parse(this,reader);
				break ;
			default :
				AnimationParser01.parse(this,reader);
			}
		this._endLoaded();
	}

	/**
	*@inheritDoc
	*/
	__proto.disposeResource=function(){
		this._aniVersion=null;
		this._anis=null;
		this._aniMap=null;
		this._publicExtData=null;
		this.unfixedCurrentFrameIndexes=null;
		this.unfixedCurrentTimes=null;
		this.unfixedKeyframes=null;
		this._aniClassName=null;
		this._animationDatasCache=null;
	}

	__proto.getAnimationCount=function(){
		return this._anis.length;
	}

	__proto.getAnimation=function(aniIndex){
		return this._anis[aniIndex];
	}

	__proto.getAniDuration=function(aniIndex){
		return this._anis[aniIndex].playTime;
	}

	__proto.getNodes=function(aniIndex){
		return this._anis[aniIndex].nodes;
	}

	__proto.getNodeIndexWithName=function(aniIndex,name){
		return this._anis[aniIndex].bone3DMap[name];
	}

	__proto.getNodeCount=function(aniIndex){
		return this._anis[aniIndex].nodes.length;
	}

	__proto.getTotalkeyframesLength=function(aniIndex){
		return this._anis[aniIndex].totalKeyframeDatasLength;
	}

	__proto.getPublicExtData=function(){
		return this._publicExtData;
	}

	__proto.getAnimationDataWithCache=function(key,cacheDatas,aniIndex,frameIndex){
		var aniDatas=cacheDatas[aniIndex];
		if (!aniDatas){
			return null;
			}else {
			var keyDatas=aniDatas[key];
			if (!keyDatas)
				return null;
			else {
				return keyDatas[frameIndex];
			}
		}
	}

	__proto.setAnimationDataWithCache=function(key,cacheDatas,aniIndex,frameIndex,data){
		var aniDatas=(cacheDatas[aniIndex])|| (cacheDatas[aniIndex]={});
		var aniDatasCache=(aniDatas[key])|| (aniDatas[key]=[]);
		aniDatasCache[frameIndex]=data;
	}

	__proto.getOriginalData=function(aniIndex,originalData,nodesFrameIndices,frameIndex,playCurTime){
		var oneAni=this._anis[aniIndex];
		var nodes=oneAni.nodes;
		var j=0;
		for (var i=0,n=nodes.length,outOfs=0;i < n;i++){
			var node=nodes[i];
			var key;
			key=node.keyFrame[nodesFrameIndices[i][frameIndex]];
			node.dataOffset=outOfs;
			var dt=playCurTime-key.startTime;
			var lerpType=node.lerpType;
			if (lerpType){
				switch (lerpType){
					case 0:
					case 1:
						for (j=0;j < node.keyframeWidth;)
						j+=node.interpolationMethod[j](node,j,originalData,outOfs+j,key.data,dt,null,key.duration,key.nextData);
						break ;
					case 2:;
						var interpolationData=key.interpolationData;
						var interDataLen=interpolationData.length;
						var dataIndex=0;
						for (j=0;j < interDataLen;){
							var type=interpolationData[j];
						switch (type){
							case 6:
								j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData,interpolationData,j+1);
								break ;
							case 7:
								j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData,interpolationData,j+1);
								break ;
							default :
								j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData);
							}
						dataIndex++;
					}
					break ;
				}
				}else {
				for (j=0;j < node.keyframeWidth;)
				j+=node.interpolationMethod[j](node,j,originalData,outOfs+j,key.data,dt,null,key.duration,key.nextData);
			}
			outOfs+=node.keyframeWidth;
		}
	}

	__proto.getNodesCurrentFrameIndex=function(aniIndex,playCurTime){
		var ani=this._anis[aniIndex];
		var nodes=ani.nodes;
		if (aniIndex!==this.unfixedLastAniIndex){
			this.unfixedCurrentFrameIndexes=new Uint32Array(nodes.length);
			this.unfixedCurrentTimes=new Float32Array(nodes.length);
			this.unfixedLastAniIndex=aniIndex;
		}
		for (var i=0,n=nodes.length,outOfs=0;i < n;i++){
			var node=nodes[i];
			if (playCurTime < this.unfixedCurrentTimes[i])
				this.unfixedCurrentFrameIndexes[i]=0;
			this.unfixedCurrentTimes[i]=playCurTime;
			while ((this.unfixedCurrentFrameIndexes[i] < node.keyFrame.length)){
				if (node.keyFrame[this.unfixedCurrentFrameIndexes[i]].startTime > this.unfixedCurrentTimes[i])
					break ;
				this.unfixedCurrentFrameIndexes[i]++;
			}
			this.unfixedCurrentFrameIndexes[i]--;
		}
		return this.unfixedCurrentFrameIndexes;
	}

	__proto.getOriginalDataUnfixedRate=function(aniIndex,originalData,playCurTime){
		var oneAni=this._anis[aniIndex];
		var nodes=oneAni.nodes;
		if (aniIndex!==this.unfixedLastAniIndex){
			this.unfixedCurrentFrameIndexes=new Uint32Array(nodes.length);
			this.unfixedCurrentTimes=new Float32Array(nodes.length);
			this.unfixedKeyframes=__newvec(nodes.length);
			this.unfixedLastAniIndex=aniIndex;
		};
		var j=0;
		for (var i=0,n=nodes.length,outOfs=0;i < n;i++){
			var node=nodes[i];
			if (playCurTime < this.unfixedCurrentTimes[i])
				this.unfixedCurrentFrameIndexes[i]=0;
			this.unfixedCurrentTimes[i]=playCurTime;
			while (this.unfixedCurrentFrameIndexes[i] < node.keyFrame.length){
				if (node.keyFrame[this.unfixedCurrentFrameIndexes[i]].startTime > this.unfixedCurrentTimes[i])
					break ;
				this.unfixedKeyframes[i]=node.keyFrame[this.unfixedCurrentFrameIndexes[i]];
				this.unfixedCurrentFrameIndexes[i]++;
			};
			var key=this.unfixedKeyframes[i];
			node.dataOffset=outOfs;
			var dt=playCurTime-key.startTime;
			var lerpType=node.lerpType;
			if (lerpType){
				switch (node.lerpType){
					case 0:
					case 1:
						for (j=0;j < node.keyframeWidth;)
						j+=node.interpolationMethod[j](node,j,originalData,outOfs+j,key.data,dt,null,key.duration,key.nextData);
						break ;
					case 2:;
						var interpolationData=key.interpolationData;
						var interDataLen=interpolationData.length;
						var dataIndex=0;
						for (j=0;j < interDataLen;){
							var type=interpolationData[j];
						switch (type){
							case 6:
								j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData,interpolationData,j+1);
								break ;
							case 7:
								j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData,interpolationData,j+1);
								break ;
							default :
								j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData);
							}
						dataIndex++;
					}
					break ;
				}
				}else {
				for (j=0;j < node.keyframeWidth;)
				j+=node.interpolationMethod[j](node,j,originalData,outOfs+j,key.data,dt,null,key.duration,key.nextData);
			}
			outOfs+=node.keyframeWidth;
		}
	}

	AnimationTemplet._LinearInterpolation_0=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
		var amount=duration===0 ? 0 :dt / duration;
		out[outOfs]=(1.0-amount)*data[index]+amount *nextData[index];
		return 1;
	}

	AnimationTemplet._QuaternionInterpolation_1=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
		var amount=duration===0 ? 0 :dt / duration;
		MathUtil.slerpQuaternionArray(data,index,nextData,index,amount,out,outOfs);
		return 4;
	}

	AnimationTemplet._AngleInterpolation_2=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
		return 0;
	}

	AnimationTemplet._RadiansInterpolation_3=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
		return 0;
	}

	AnimationTemplet._Matrix4x4Interpolation_4=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
		for (var i=0;i < 16;i++,index++)
		out[outOfs+i]=data[index]+dt *dData[index];
		return 16;
	}

	AnimationTemplet._NoInterpolation_5=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
		out[outOfs]=data[index];
		return 1;
	}

	AnimationTemplet._BezierInterpolation_6=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData,offset){
		(offset===void 0)&& (offset=0);
		out[outOfs]=data[index]+(nextData[index]-data[index])*BezierLerp.getBezierRate(dt / duration,interData[offset],interData[offset+1],interData[offset+2],interData[offset+3]);
		return 5;
	}

	AnimationTemplet._BezierInterpolation_7=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData,offset){
		(offset===void 0)&& (offset=0);
		out[outOfs]=interData[offset+4]+interData[offset+5] *BezierLerp.getBezierRate((dt *0.001+interData[offset+6])/ interData[offset+7],interData[offset],interData[offset+1],interData[offset+2],interData[offset+3]);
		return 9;
	}

	AnimationTemplet.load=function(url){
		return Laya.loader.create(url,null,null,AnimationTemplet);
	}

	AnimationTemplet.interpolation=[AnimationTemplet._LinearInterpolation_0,AnimationTemplet._QuaternionInterpolation_1,AnimationTemplet._AngleInterpolation_2,AnimationTemplet._RadiansInterpolation_3,AnimationTemplet._Matrix4x4Interpolation_4,AnimationTemplet._NoInterpolation_5,AnimationTemplet._BezierInterpolation_6,AnimationTemplet._BezierInterpolation_7];
	return AnimationTemplet;
})(Resource)


/**
*@private
*将mesh元素缓存到canvas中并进行绘制
*/
//class laya.ani.bone.canvasmesh.CacheAbleSkinMesh extends laya.ani.bone.canvasmesh.SkinMeshCanvas
var CacheAbleSkinMesh=(function(_super){
	function CacheAbleSkinMesh(){
		this.isCached=false;
		this.canvas=null;
		this.tex=null;
		this.rec=null;
		CacheAbleSkinMesh.__super.call(this);
	}

	__class(CacheAbleSkinMesh,'laya.ani.bone.canvasmesh.CacheAbleSkinMesh',_super);
	var __proto=CacheAbleSkinMesh.prototype;
	__proto.getCanvasPic=function(){
		var canvas=new HTMLCanvas("2D");
		var ctx=canvas.getContext('2d');
		this.rec=this.mesh.getBounds();
		debugger;
		canvas.size(this.rec.width,this.rec.height);
		var preTransform;
		preTransform=this.transform;
		this.transform=CacheAbleSkinMesh.tempMt;
		this.transform.identity();
		this.transform.translate(-this.rec.x,-this.rec.y);
		this.renderToContext(ctx);
		this.transform.translate(+this.rec.x,+this.rec.y);
		this.transform=preTransform;
		return new Texture(canvas);
	}

	__proto.render=function(context,x,y){
		if (!this.mesh.texture)return;
		if (!this.isCached){
			this.isCached=true;
			this.tex=this.getCanvasPic();
		}
		if(!this.transform){
			this.transform=SkinMeshCanvas._tempMatrix;
			this.transform.identity();
			this.transform.translate(x,y);
			this._renderTextureToContext(context);
			this.transform.translate(-x,-y);
			this.transform=null;
			}else{
			this.transform.translate(x,y);
			this._renderTextureToContext(context);
			this.transform.translate(-x,-y);
		}
	}

	__proto._renderTextureToContext=function(context){
		this.context=context.ctx || context;
		context.save();
		var texture;
		texture=this.tex;
		if (this.transform){
			var mt=this.transform;
			context.transform(mt.a,mt.b,mt.c,mt.d,mt.tx,mt.ty);
		}
		this.rec=this.mesh.getBounds();
		context.translate(this.rec.x,this.rec.y);
		context.drawTexture(texture,0,0,texture.width,texture.height,0,0);
		context.restore();
	}

	__static(CacheAbleSkinMesh,
	['tempMt',function(){return this.tempMt=new Matrix();}
	]);
	return CacheAbleSkinMesh;
})(SkinMeshCanvas)


/**
*@private
*简化mesh绘制，多顶点mesh改为四顶点mesh，只绘制矩形不绘制三角形
*/
//class laya.ani.bone.canvasmesh.SimpleSkinMeshCanvas extends laya.ani.bone.canvasmesh.SkinMeshCanvas
var SimpleSkinMeshCanvas=(function(_super){
	function SimpleSkinMeshCanvas(){
		/**
		*当前mesh数据是否可用
		*/
		this.cacheOK=false;
		/**
		*当前渲染数据是否可用
		*/
		this.cacheCmdOK=false;
		/**
		*transform参数缓存
		*/
		this.transformCmds=[];
		/**
		*drawImage参数缓存
		*/
		this.drawCmds=[]
		SimpleSkinMeshCanvas.__super.call(this);
		this.tempMesh=new MeshData();
	}

	__class(SimpleSkinMeshCanvas,'laya.ani.bone.canvasmesh.SimpleSkinMeshCanvas',_super);
	var __proto=SimpleSkinMeshCanvas.prototype;
	__proto.init2=function(texture,vs,ps,verticles,uvs){
		_super.prototype.init2.call(this,texture,vs,ps,verticles,uvs);
		this.cacheOK=false;
		this.cacheCmdOK=false;
		this.transformCmds.length=6;
		this.drawCmds.length=9;
	}

	__proto.renderToContext=function(context){
		this.context=context.ctx || context;
		if (this.mesh){
			if (this.mesh.uvs.length <=8){
				if (this.mode==0){
					this._renderWithIndexes(this.mesh);
				}
				else {
					this._renderNoIndexes(this.mesh);
				}
				return;
			}
			if (!this.cacheOK){
				this.tempMesh.texture=this.mesh.texture;
				this.tempMesh.uvs=this.mesh.texture.uv;
				this.tempMesh.vertices=MeshTools.solveMesh(this.mesh,this.tempMesh.vertices);
				this.cacheOK=true;
			}
			if (this.mode==0){
				this._renderWithIndexes(this.tempMesh);
			}
			else {
				this._renderNoIndexes(this.tempMesh);
			}
		}
	}

	__proto._renderWithIndexes=function(mesh){
		if(this.cacheCmdOK){
			this.renderByCache(mesh);
			return;
		};
		var indexes=mesh.indexes;
		var i=0,len=indexes.length;
		if (len > 1)
			len=1;
		for (i=0;i < len;i+=3){
			var index0=indexes[i] *2;
			var index1=indexes[i+1] *2;
			var index2=indexes[i+2] *2;
			this._renderDrawTriangle(mesh,index0,index1,index2);
		}
		this.cacheCmdOK=true;
	}

	__proto._renderDrawTriangle=function(mesh,index0,index1,index2){
		var context=this.context;
		var uvs=mesh.uvs;
		var vertices=mesh.vertices;
		var texture=mesh.texture;
		var source=texture.bitmap;
		var textureSource=source.source;
		var textureWidth=texture.width;
		var textureHeight=texture.height;
		var sourceWidth=source.width;
		var sourceHeight=source.height;
		var u0=NaN;
		var u1=NaN;
		var u2=NaN;
		var v0=NaN;
		var v1=NaN;
		var v2=NaN;
		if (mesh.useUvTransform){
			var ut=mesh.uvTransform;
			u0=((uvs[index0] *ut.a)+(uvs[index0+1] *ut.c)+ut.tx)*sourceWidth;
			u1=((uvs[index1] *ut.a)+(uvs[index1+1] *ut.c)+ut.tx)*sourceWidth;
			u2=((uvs[index2] *ut.a)+(uvs[index2+1] *ut.c)+ut.tx)*sourceWidth;
			v0=((uvs[index0] *ut.b)+(uvs[index0+1] *ut.d)+ut.ty)*sourceHeight;
			v1=((uvs[index1] *ut.b)+(uvs[index1+1] *ut.d)+ut.ty)*sourceHeight;
			v2=((uvs[index2] *ut.b)+(uvs[index2+1] *ut.d)+ut.ty)*sourceHeight;
		}
		else {
			u0=uvs[index0] *sourceWidth;
			u1=uvs[index1] *sourceWidth;
			u2=uvs[index2] *sourceWidth;
			v0=uvs[index0+1] *sourceHeight;
			v1=uvs[index1+1] *sourceHeight;
			v2=uvs[index2+1] *sourceHeight;
		};
		var x0=vertices[index0];
		var x1=vertices[index1];
		var x2=vertices[index2];
		var y0=vertices[index0+1];
		var y1=vertices[index1+1];
		var y2=vertices[index2+1];
		var delta=(u0 *v1)+(v0 *u2)+(u1 *v2)-(v1 *u2)-(v0 *u1)-(u0 *v2);
		var dDelta=1 / delta;
		var deltaA=(x0 *v1)+(v0 *x2)+(x1 *v2)-(v1 *x2)-(v0 *x1)-(x0 *v2);
		var deltaB=(u0 *x1)+(x0 *u2)+(u1 *x2)-(x1 *u2)-(x0 *u1)-(u0 *x2);
		var deltaC=(u0 *v1 *x2)+(v0 *x1 *u2)+(x0 *u1 *v2)-(x0 *v1 *u2)-(v0 *u1 *x2)-(u0 *x1 *v2);
		var deltaD=(y0 *v1)+(v0 *y2)+(y1 *v2)-(v1 *y2)-(v0 *y1)-(y0 *v2);
		var deltaE=(u0 *y1)+(y0 *u2)+(u1 *y2)-(y1 *u2)-(y0 *u1)-(u0 *y2);
		var deltaF=(u0 *v1 *y2)+(v0 *y1 *u2)+(y0 *u1 *v2)-(y0 *v1 *u2)-(v0 *u1 *y2)-(u0 *y1 *v2);
		this.transformCmds[0]=deltaA *dDelta;
		this.transformCmds[1]=deltaD *dDelta;
		this.transformCmds[2]=deltaB *dDelta;
		this.transformCmds[3]=deltaE *dDelta;
		this.transformCmds[4]=deltaC *dDelta;
		this.transformCmds[5]=deltaF *dDelta;
		this.drawCmds[0]=textureSource;
		this.drawCmds[1]=texture.uv[0] *sourceWidth;
		this.drawCmds[2]=texture.uv[1] *sourceHeight;
		this.drawCmds[3]=textureWidth;
		this.drawCmds[4]=textureHeight;
		this.drawCmds[5]=texture.uv[0] *sourceWidth;
		this.drawCmds[6]=texture.uv[1] *sourceHeight;
		this.drawCmds[7]=textureWidth;
		this.drawCmds[8]=textureHeight;
		context.save();
		if (this.transform){
			var mt=this.transform;
			context.transform(mt.a,mt.b,mt.c,mt.d,mt.tx,mt.ty);
		}
		context.transform.apply(context,this.transformCmds);
		context.drawImage.apply(context,this.drawCmds);
		context.restore();
	}

	/**
	*绘制缓存的命令
	*@param mesh
	*
	*/
	__proto.renderByCache=function(mesh){
		var context=this.context;
		context.save();
		if (this.transform){
			var mt=this.transform;
			context.transform(mt.a,mt.b,mt.c,mt.d,mt.tx,mt.ty);
		}
		context.transform.apply(context,this.transformCmds);
		context.drawImage.apply(context,this.drawCmds);
		context.restore();
	}

	return SimpleSkinMeshCanvas;
})(SkinMeshCanvas)


/**
*骨骼动画由<code>Templet</code>，<code>AnimationPlayer</code>，<code>Skeleton</code>三部分组成。
*/
//class laya.ani.bone.Skeleton extends laya.display.Sprite
var Skeleton=(function(_super){
	function Skeleton(templet,aniMode){
		this._templet=null;
		/**@private */
		this._player=null;
		/**@private */
		this._curOriginalData=null;
		//当前骨骼的偏移数据
		this._boneMatrixArray=[];
		//当前骨骼动画的最终结果数据
		this._lastTime=0;
		//上次的帧时间
		this._currAniName=null;
		this._currAniIndex=-1;
		this._pause=true;
		/**@private */
		this._aniClipIndex=-1;
		/**@private */
		this._clipIndex=-1;
		this._skinIndex=0;
		this._skinName="default";
		this._aniMode=0;
		//当前动画自己的缓冲区
		this._graphicsCache=null;
		this._boneSlotDic=null;
		this._bindBoneBoneSlotDic=null;
		this._boneSlotArray=null;
		this._index=-1;
		this._total=-1;
		this._indexControl=false;
		//加载路径
		this._aniPath=null;
		this._texturePath=null;
		this._complete=null;
		this._loadAniMode=0;
		this._yReverseMatrix=null;
		this._ikArr=null;
		this._tfArr=null;
		this._pathDic=null;
		this._rootBone=null;
		/**@private */
		this._boneList=null;
		/**@private */
		this._aniSectionDic=null;
		this._eventIndex=0;
		this._drawOrderIndex=0;
		this._drawOrder=null;
		this._lastAniClipIndex=-1;
		this._lastUpdateAniClipIndex=-1;
		Skeleton.__super.call(this);
		(aniMode===void 0)&& (aniMode=0);
		if (templet)this.init(templet,aniMode);
	}

	__class(Skeleton,'laya.ani.bone.Skeleton',_super);
	var __proto=Skeleton.prototype;
	/**
	*初始化动画
	*@param templet 模板
	*@param aniMode 动画模式
	*<table>
	*<tr><th>模式</th><th>描述</th></tr>
	*<tr>
	*<td>0</td> <td>使用模板缓冲的数据，模板缓冲的数据，不允许修改（内存开销小，计算开销小，不支持换装）</td>
	*</tr>
	*<tr>
	*<td>1</td> <td>使用动画自己的缓冲区，每个动画都会有自己的缓冲区，相当耗费内存 （内存开销大，计算开销小，支持换装）</td>
	*</tr>
	*<tr>
	*<td>2</td> <td>使用动态方式，去实时去画（内存开销小，计算开销大，支持换装,不建议使用）</td>
	*</tr>
	*</table>
	*/
	__proto.init=function(templet,aniMode){
		(aniMode===void 0)&& (aniMode=0);
		var i=0,n=0;
		if (aniMode==1){
			this._graphicsCache=[];
			for (i=0,n=templet.getAnimationCount();i < n;i++){
				this._graphicsCache.push([]);
			}
		}
		this._yReverseMatrix=templet.yReverseMatrix;
		this._aniMode=aniMode;
		this._templet=templet;
		this._player=new AnimationPlayer();
		this._player.cacheFrameRate=templet.rate;
		this._player.templet=templet;
		this._player.play();
		this._parseSrcBoneMatrix();
		this._boneList=templet.mBoneArr;
		this._rootBone=templet.mRootBone;
		this._aniSectionDic=templet.aniSectionDic;
		if (templet.ikArr.length > 0){
			this._ikArr=[];
			for (i=0,n=templet.ikArr.length;i < n;i++){
				this._ikArr.push(new IkConstraint(templet.ikArr[i],this._boneList));
			}
		}
		if (templet.pathArr.length > 0){
			var tPathData;
			var tPathConstraint;
			if (this._pathDic==null)this._pathDic={};
			var tBoneSlot;
			for (i=0,n=templet.pathArr.length;i < n;i++){
				tPathData=templet.pathArr[i];
				tPathConstraint=new PathConstraint(tPathData,this._boneList);
				tBoneSlot=this._boneSlotDic[tPathData.name];
				if (tBoneSlot){
					tPathConstraint=new PathConstraint(tPathData,this._boneList);
					tPathConstraint.target=tBoneSlot;
				}
				this._pathDic[tPathData.name]=tPathConstraint;
			}
		}
		if (templet.tfArr.length > 0){
			this._tfArr=[];
			for (i=0,n=templet.tfArr.length;i < n;i++){
				this._tfArr.push(new TfConstraint(templet.tfArr[i],this._boneList));
			}
		}
		if (templet.skinDataArray.length > 0){
			var tSkinData=this._templet.skinDataArray[this._skinIndex];
			this._skinName=tSkinData.name;
		}
		this._player.on(/*laya.events.Event.PLAYED*/"played",this,this._onPlay);
		this._player.on(/*laya.events.Event.STOPPED*/"stopped",this,this._onStop);
		this._player.on(/*laya.events.Event.PAUSED*/"paused",this,this._onPause);
	}

	/**
	*通过加载直接创建动画
	*@param path 要加载的动画文件路径
	*@param complete 加载完成的回调函数
	*@param aniMode 与<code>Skeleton.init</code>的<code>aniMode</code>作用一致
	*/
	__proto.load=function(path,complete,aniMode){
		(aniMode===void 0)&& (aniMode=0);
		this._aniPath=path;
		this._complete=complete;
		this._loadAniMode=aniMode;
		Laya.loader.load([{url:path,type:/*laya.net.Loader.BUFFER*/"arraybuffer"}],Handler.create(this,this._onLoaded));
	}

	/**
	*加载完成
	*/
	__proto._onLoaded=function(){
		var arraybuffer=Loader.getRes(this._aniPath);
		if (arraybuffer==null)return;
		if (Templet.TEMPLET_DICTIONARY==null){
			Templet.TEMPLET_DICTIONARY={};
		};
		var tFactory;
		tFactory=Templet.TEMPLET_DICTIONARY[this._aniPath];
		if (tFactory){
			if (tFactory.isParseFail){
				this._parseFail();
				}else {
				if (tFactory.isParserComplete){
					this._parseComplete();
					}else {
					tFactory.on(/*laya.events.Event.COMPLETE*/"complete",this,this._parseComplete);
					tFactory.on(/*laya.events.Event.ERROR*/"error",this,this._parseFail);
				}
			}
			}else {
			tFactory=new Templet();
			tFactory._setUrl(this._aniPath);
			Templet.TEMPLET_DICTIONARY[this._aniPath]=tFactory;
			tFactory.on(/*laya.events.Event.COMPLETE*/"complete",this,this._parseComplete);
			tFactory.on(/*laya.events.Event.ERROR*/"error",this,this._parseFail);
			tFactory.isParserComplete=false;
			tFactory.parseData(null,arraybuffer);
		}
	}

	/**
	*解析完成
	*/
	__proto._parseComplete=function(){
		var tTemple=Templet.TEMPLET_DICTIONARY[this._aniPath];
		if (tTemple){
			this.init(tTemple,this._loadAniMode);
			this.play(0,true);
		}
		this._complete && this._complete.runWith(this);
	}

	/**
	*解析失败
	*/
	__proto._parseFail=function(){
		console.log("[Error]:"+this._aniPath+"解析失败");
	}

	/**
	*传递PLAY事件
	*/
	__proto._onPlay=function(){
		this.event(/*laya.events.Event.PLAYED*/"played");
	}

	/**
	*传递STOP事件
	*/
	__proto._onStop=function(){
		var tEventData;
		var tEventAniArr=this._templet.eventAniArr;
		var tEventArr=tEventAniArr[this._aniClipIndex];
		if (tEventArr && this._eventIndex < tEventArr.length){
			for (;this._eventIndex < tEventArr.length;this._eventIndex++){
				tEventData=tEventArr[this._eventIndex];
				if (tEventData.time >=this._player.playStart && tEventData.time <=this._player.playEnd){
					this.event(/*laya.events.Event.LABEL*/"label",tEventData);
				}
			}
		}
		this._eventIndex=0;
		this._drawOrder=null;
		this.event(/*laya.events.Event.STOPPED*/"stopped");
	}

	/**
	*传递PAUSE事件
	*/
	__proto._onPause=function(){
		this.event(/*laya.events.Event.PAUSED*/"paused");
	}

	/**
	*创建骨骼的矩阵，保存每次计算的最终结果
	*/
	__proto._parseSrcBoneMatrix=function(){
		var i=0,n=0;
		n=this._templet.srcBoneMatrixArr.length;
		for (i=0;i < n;i++){
			this._boneMatrixArray.push(new Matrix());
		}
		if (this._aniMode==0){
			this._boneSlotDic=this._templet.boneSlotDic;
			this._bindBoneBoneSlotDic=this._templet.bindBoneBoneSlotDic;
			this._boneSlotArray=this._templet.boneSlotArray;
			}else {
			if (this._boneSlotDic==null)this._boneSlotDic={};
			if (this._bindBoneBoneSlotDic==null)this._bindBoneBoneSlotDic={};
			if (this._boneSlotArray==null)this._boneSlotArray=[];
			var tArr=this._templet.boneSlotArray;
			var tBS;
			var tBSArr;
			for (i=0,n=tArr.length;i < n;i++){
				tBS=tArr[i];
				tBSArr=this._bindBoneBoneSlotDic[tBS.parent];
				if (tBSArr==null){
					this._bindBoneBoneSlotDic[tBS.parent]=tBSArr=[];
				}
				this._boneSlotDic[tBS.name]=tBS=tBS.copy();
				tBSArr.push(tBS);
				this._boneSlotArray.push(tBS);
			}
		}
	}

	__proto._emitMissedEvents=function(startTime,endTime,startIndex){
		(startIndex===void 0)&& (startIndex=0);
		var tEventAniArr=this._templet.eventAniArr;
		var tEventArr=tEventAniArr[this._player.currentAnimationClipIndex];
		if (tEventArr){
			var i=0,len=0;
			var tEventData;
			len=tEventArr.length;
			for (i=startIndex;i < len;i++){
				tEventData=tEventArr[i];
				if (tEventData.time >=this._player.playStart && tEventData.time <=this._player.playEnd){
					this.event(/*laya.events.Event.LABEL*/"label",tEventData);
				}
			}
		}
	}

	/**
	*更新动画
	*@param autoKey true为正常更新，false为index手动更新
	*/
	__proto._update=function(autoKey){
		(autoKey===void 0)&& (autoKey=true);
		if (this._pause)return;
		if (autoKey && this._indexControl){
			return;
		};
		var tCurrTime=this.timer.currTimer;
		var preIndex=this._player.currentKeyframeIndex;
		var dTime=tCurrTime-this._lastTime;
		if (autoKey){
			this._player._update(dTime);
			}else {
			preIndex=-1;
		}
		this._lastTime=tCurrTime;
		if (!this._player)return;
		this._index=this._clipIndex=this._player.currentKeyframeIndex;
		if (this._index < 0)return;
		if (dTime > 0 && this._clipIndex==preIndex && this._lastUpdateAniClipIndex==this._aniClipIndex){
			return;
		}
		this._lastUpdateAniClipIndex=this._aniClipIndex;
		if (preIndex > this._clipIndex && this._eventIndex !=0){
			this._emitMissedEvents(this._player.playStart,this._player.playEnd,this._eventIndex);
			this._eventIndex=0;
		};
		var tEventData;
		var tEventAniArr=this._templet.eventAniArr;
		var tEventArr=tEventAniArr[this._aniClipIndex];
		if (tEventArr && this._eventIndex < tEventArr.length){
			tEventData=tEventArr[this._eventIndex];
			if (tEventData.time >=this._player.playStart && tEventData.time <=this._player.playEnd){
				if (this._player.currentPlayTime >=tEventData.time){
					this.event(/*laya.events.Event.LABEL*/"label",tEventData);
					this._eventIndex++;
				}
				}else {
				this._eventIndex++;
			}
		};
		var tGraphics;
		if (this._aniMode==0){
			tGraphics=this._templet.getGrahicsDataWithCache(this._aniClipIndex,this._clipIndex);
			if (tGraphics){
				if (this.graphics !=tGraphics){
					this.graphics=tGraphics;
				}
				return;
				}else {
				var i=0,minIndex=0;
				minIndex=this._clipIndex;
				while ((!this._templet.getGrahicsDataWithCache(this._aniClipIndex,minIndex-1))&& (minIndex > 0)){
					minIndex--;
				}
				if (minIndex < this._clipIndex){
					for (i=minIndex;i < this._clipIndex;i++){
						this._createGraphics(i);
					}
				}
			}
			}else if (this._aniMode==1){
			tGraphics=this._getGrahicsDataWithCache(this._aniClipIndex,this._clipIndex);
			if (tGraphics){
				if (this.graphics !=tGraphics){
					this.graphics=tGraphics;
				}
				return;
				}else {
				minIndex=this._clipIndex;
				while ((!this._getGrahicsDataWithCache(this._aniClipIndex,minIndex-1))&& (minIndex > 0)){
					minIndex--;
				}
				if (minIndex < this._clipIndex){
					for (i=minIndex;i < this._clipIndex;i++){
						this._createGraphics(i);
					}
				}
			}
		}
		this._createGraphics();
	}

	/**
	*@private
	*创建grahics图像
	*/
	__proto._createGraphics=function(_clipIndex){
		(_clipIndex===void 0)&& (_clipIndex=-1);
		if (_clipIndex==-1)_clipIndex=this._clipIndex;
		var curTime=_clipIndex *this._player.cacheFrameRateInterval;
		var tDrawOrderData;
		var tDrawOrderAniArr=this._templet.drawOrderAniArr;
		var tDrawOrderArr=tDrawOrderAniArr[this._aniClipIndex];
		if (tDrawOrderArr && tDrawOrderArr.length > 0){
			this._drawOrderIndex=0;
			tDrawOrderData=tDrawOrderArr[this._drawOrderIndex];
			while (curTime >=tDrawOrderData.time){
				this._drawOrder=tDrawOrderData.drawOrder;
				this._drawOrderIndex++;
				if (this._drawOrderIndex >=tDrawOrderArr.length){
					break ;
				}
				tDrawOrderData=tDrawOrderArr[this._drawOrderIndex];
			}
		};
		var tGraphics;
		if (this._aniMode==0 || this._aniMode==1){
			this.graphics=GraphicsAni.create();
			}else {
			if ((this.graphics instanceof laya.ani.GraphicsAni )){
				this.graphics.clear();
				}else {
				this.graphics=GraphicsAni.create();
			}
		}
		tGraphics=this.graphics;
		var bones=this._templet.getNodes(this._aniClipIndex);
		this._templet.getOriginalData(this._aniClipIndex,this._curOriginalData,this._player._fullFrames[this._aniClipIndex],_clipIndex,curTime);
		var tSectionArr=this._aniSectionDic[this._aniClipIndex];
		var tParentMatrix;
		var tStartIndex=0;
		var i=0,j=0,k=0,n=0;
		var tDBBoneSlot;
		var tDBBoneSlotArr;
		var tParentTransform;
		var tSrcBone;
		var boneCount=this._templet.srcBoneMatrixArr.length;
		for (i=0,n=tSectionArr[0];i < boneCount;i++){
			tSrcBone=this._boneList[i];
			tParentTransform=this._templet.srcBoneMatrixArr[i];
			tSrcBone.resultTransform.scX=tParentTransform.scX *this._curOriginalData[tStartIndex++];
			tSrcBone.resultTransform.skX=tParentTransform.skX+this._curOriginalData[tStartIndex++];
			tSrcBone.resultTransform.skY=tParentTransform.skY+this._curOriginalData[tStartIndex++];
			tSrcBone.resultTransform.scY=tParentTransform.scY *this._curOriginalData[tStartIndex++];
			tSrcBone.resultTransform.x=tParentTransform.x+this._curOriginalData[tStartIndex++];
			tSrcBone.resultTransform.y=tParentTransform.y+this._curOriginalData[tStartIndex++];
			if (this._templet.tMatrixDataLen===8){
				tSrcBone.resultTransform.skewX=tParentTransform.skewX+this._curOriginalData[tStartIndex++];
				tSrcBone.resultTransform.skewY=tParentTransform.skewY+this._curOriginalData[tStartIndex++];
			}
		};
		var tSlotDic={};
		var tSlotAlphaDic={};
		var tBoneData;
		for (n+=tSectionArr[1];i < n;i++){
			tBoneData=bones[i];
			tSlotDic[tBoneData.name]=this._curOriginalData[tStartIndex++];
			tSlotAlphaDic[tBoneData.name]=this._curOriginalData[tStartIndex++];
			this._curOriginalData[tStartIndex++];
			this._curOriginalData[tStartIndex++];
			this._curOriginalData[tStartIndex++];
			this._curOriginalData[tStartIndex++];
		};
		var tBendDirectionDic={};
		var tMixDic={};
		for (n+=tSectionArr[2];i < n;i++){
			tBoneData=bones[i];
			tBendDirectionDic[tBoneData.name]=this._curOriginalData[tStartIndex++];
			tMixDic[tBoneData.name]=this._curOriginalData[tStartIndex++];
			this._curOriginalData[tStartIndex++];
			this._curOriginalData[tStartIndex++];
			this._curOriginalData[tStartIndex++];
			this._curOriginalData[tStartIndex++];
		}
		if (this._pathDic){
			var tPathConstraint;
			for (n+=tSectionArr[3];i < n;i++){
				tBoneData=bones[i];
				tPathConstraint=this._pathDic[tBoneData.name];
				if (tPathConstraint){
					var tByte=new Byte(tBoneData.extenData);
					switch (tByte.getByte()){
						case 1:
							tPathConstraint.position=this._curOriginalData[tStartIndex++];
							break ;
						case 2:
							tPathConstraint.spacing=this._curOriginalData[tStartIndex++];
							break ;
						case 3:
							tPathConstraint.rotateMix=this._curOriginalData[tStartIndex++];
							tPathConstraint.translateMix=this._curOriginalData[tStartIndex++];
							break ;
						}
				}
			}
		}
		if (this._yReverseMatrix){
			this._rootBone.update(this._yReverseMatrix);
			}else {
			this._rootBone.update(Matrix.TEMP.identity());
		}
		if (this._ikArr){
			var tIkConstraint;
			for (i=0,n=this._ikArr.length;i < n;i++){
				tIkConstraint=this._ikArr[i];
				if (tBendDirectionDic.hasOwnProperty(tIkConstraint.name)){
					tIkConstraint.bendDirection=tBendDirectionDic[tIkConstraint.name];
				}
				if (tMixDic.hasOwnProperty(tIkConstraint.name)){
					tIkConstraint.mix=tMixDic[tIkConstraint.name]
				}
				tIkConstraint.apply();
			}
		}
		if (this._pathDic){
			for (var tPathStr in this._pathDic){
				tPathConstraint=this._pathDic[tPathStr];
				tPathConstraint.apply(this._boneList,tGraphics);
			}
		}
		if (this._tfArr){
			var tTfConstraint;
			for (i=0,k=this._tfArr.length;i < k;i++){
				tTfConstraint=this._tfArr[i];
				tTfConstraint.apply();
			}
		}
		for (i=0,k=this._boneList.length;i < k;i++){
			tSrcBone=this._boneList[i];
			tDBBoneSlotArr=this._bindBoneBoneSlotDic[tSrcBone.name];
			tSrcBone.resultMatrix.copyTo(this._boneMatrixArray[i]);
			if (tDBBoneSlotArr){
				for (j=0,n=tDBBoneSlotArr.length;j < n;j++){
					tDBBoneSlot=tDBBoneSlotArr[j];
					if (tDBBoneSlot){
						tDBBoneSlot.setParentMatrix(tSrcBone.resultMatrix);
					}
				}
			}
		};
		var tDeformDic={};
		var tDeformAniArr=this._templet.deformAniArr;
		var tDeformAniData;
		var tDeformSlotData;
		var tDeformSlotDisplayData;
		if (tDeformAniArr && tDeformAniArr.length > 0){
			if (this._lastAniClipIndex !=this._aniClipIndex){
				this._lastAniClipIndex=this._aniClipIndex;
				for (i=0,n=this._boneSlotArray.length;i < n;i++){
					tDBBoneSlot=this._boneSlotArray[i];
					tDBBoneSlot.deformData=null;
				}
			};
			var tSkinDeformAni=tDeformAniArr[this._aniClipIndex];
			tDeformAniData=(tSkinDeformAni["default"]);
			this._setDeform(tDeformAniData,tDeformDic,this._boneSlotArray,curTime);
			var tSkin;
			for (tSkin in tSkinDeformAni){
				if (tSkin !="default" && tSkin !=this._skinName){
					tDeformAniData=tSkinDeformAni [tSkin];
					this._setDeform(tDeformAniData,tDeformDic,this._boneSlotArray,curTime);
				}
			}
			tDeformAniData=(tSkinDeformAni[this._skinName]);
			this._setDeform(tDeformAniData,tDeformDic,this._boneSlotArray,curTime);
		};
		var tSlotData2;
		var tSlotData3;
		var tObject;
		if (this._drawOrder){
			for (i=0,n=this._drawOrder.length;i < n;i++){
				tDBBoneSlot=this._boneSlotArray[this._drawOrder[i]];
				tSlotData2=tSlotDic[tDBBoneSlot.name];
				tSlotData3=tSlotAlphaDic[tDBBoneSlot.name];
				if (!isNaN(tSlotData3)){
					tGraphics.save();
					tGraphics.alpha(tSlotData3);
				}
				if (!isNaN(tSlotData2)&& tSlotData2 !=-2){
					if (this._templet.attachmentNames){
						tDBBoneSlot.showDisplayByName(this._templet.attachmentNames[tSlotData2]);
						}else {
						tDBBoneSlot.showDisplayByIndex(tSlotData2);
					}
				}
				if (tDeformDic[this._drawOrder[i]]){
					tObject=tDeformDic[this._drawOrder[i]];
					if (tDBBoneSlot.currDisplayData && tObject[tDBBoneSlot.currDisplayData.attachmentName]){
						tDBBoneSlot.deformData=tObject[tDBBoneSlot.currDisplayData.attachmentName];
						}else {
						tDBBoneSlot.deformData=null;
					}
					}else {
					tDBBoneSlot.deformData=null;
				}
				if (!isNaN(tSlotData3)){
					tDBBoneSlot.draw(tGraphics,this._boneMatrixArray,this._aniMode==2,tSlotData3);
					}else {
					tDBBoneSlot.draw(tGraphics,this._boneMatrixArray,this._aniMode==2);
				}
				if (!isNaN(tSlotData3)){
					tGraphics.restore();
				}
			}
			}else {
			for (i=0,n=this._boneSlotArray.length;i < n;i++){
				tDBBoneSlot=this._boneSlotArray[i];
				tSlotData2=tSlotDic[tDBBoneSlot.name];
				tSlotData3=tSlotAlphaDic[tDBBoneSlot.name];
				if (!isNaN(tSlotData3)){
					tGraphics.save();
					tGraphics.alpha(tSlotData3);
				}
				if (!isNaN(tSlotData2)&& tSlotData2 !=-2){
					if (this._templet.attachmentNames){
						tDBBoneSlot.showDisplayByName(this._templet.attachmentNames[tSlotData2]);
						}else {
						tDBBoneSlot.showDisplayByIndex(tSlotData2);
					}
				}
				if (tDeformDic[i]){
					tObject=tDeformDic[i];
					if (tDBBoneSlot.currDisplayData && tObject[tDBBoneSlot.currDisplayData.attachmentName]){
						tDBBoneSlot.deformData=tObject[tDBBoneSlot.currDisplayData.attachmentName];
						}else {
						tDBBoneSlot.deformData=null;
					}
					}else {
					tDBBoneSlot.deformData=null;
				}
				if (!isNaN(tSlotData3)){
					tDBBoneSlot.draw(tGraphics,this._boneMatrixArray,this._aniMode==2,tSlotData3);
					}else {
					tDBBoneSlot.draw(tGraphics,this._boneMatrixArray,this._aniMode==2);
				}
				if (!isNaN(tSlotData3)){
					tGraphics.restore();
				}
			}
		}
		if (this._aniMode==0){
			this._templet.setGrahicsDataWithCache(this._aniClipIndex,_clipIndex,tGraphics);
			}else if (this._aniMode==1){
			this._setGrahicsDataWithCache(this._aniClipIndex,_clipIndex,tGraphics);
		}
	}

	/**
	*设置deform数据
	*@param tDeformAniData
	*@param tDeformDic
	*@param _boneSlotArray
	*@param curTime
	*/
	__proto._setDeform=function(tDeformAniData,tDeformDic,_boneSlotArray,curTime){
		if (!tDeformAniData)return;
		var tDeformSlotData;
		var tDeformSlotDisplayData;
		var tDBBoneSlot;
		var i=0,n=0,j=0;
		if (tDeformAniData){
			for (i=0,n=tDeformAniData.deformSlotDataList.length;i < n;i++){
				tDeformSlotData=tDeformAniData.deformSlotDataList[i];
				for (j=0;j < tDeformSlotData.deformSlotDisplayList.length;j++){
					tDeformSlotDisplayData=tDeformSlotData.deformSlotDisplayList[j];
					tDBBoneSlot=_boneSlotArray[tDeformSlotDisplayData.slotIndex];
					tDeformSlotDisplayData.apply(curTime,tDBBoneSlot);
					if (!tDeformDic[tDeformSlotDisplayData.slotIndex]){
						tDeformDic[tDeformSlotDisplayData.slotIndex]={};
					}
					tDeformDic[tDeformSlotDisplayData.slotIndex][tDeformSlotDisplayData.attachment]=tDeformSlotDisplayData.deformData;
				}
			}
		}
	}

	/**
	*得到当前动画的数量
	*@return 当前动画的数量
	*/
	__proto.getAnimNum=function(){
		return this._templet.getAnimationCount();
	}

	/**
	*得到指定动画的名字
	*@param index 动画的索引
	*/
	__proto.getAniNameByIndex=function(index){
		return this._templet.getAniNameByIndex(index);
	}

	/**
	*通过名字得到插槽的引用
	*@param name 动画的名字
	*@return 插槽的引用
	*/
	__proto.getSlotByName=function(name){
		return this._boneSlotDic[name];
	}

	/**
	*通过名字显示一套皮肤
	*@param name 皮肤的名字
	*@param freshSlotIndex 是否将插槽纹理重置到初始化状态
	*/
	__proto.showSkinByName=function(name,freshSlotIndex){
		(freshSlotIndex===void 0)&& (freshSlotIndex=true);
		this.showSkinByIndex(this._templet.getSkinIndexByName(name),freshSlotIndex);
	}

	/**
	*通过索引显示一套皮肤
	*@param skinIndex 皮肤索引
	*@param freshSlotIndex 是否将插槽纹理重置到初始化状态
	*/
	__proto.showSkinByIndex=function(skinIndex,freshSlotIndex){
		(freshSlotIndex===void 0)&& (freshSlotIndex=true);
		for (var i=0;i < this._boneSlotArray.length;i++){
			(this._boneSlotArray [i]).showSlotData(null,freshSlotIndex);
		}
		if (this._templet.showSkinByIndex(this._boneSlotDic,skinIndex,freshSlotIndex)){
			var tSkinData=this._templet.skinDataArray[skinIndex];
			this._skinIndex=skinIndex;
			this._skinName=tSkinData.name;
		}
		this._clearCache();
	}

	/**
	*设置某插槽的皮肤
	*@param slotName 插槽名称
	*@param index 插糟皮肤的索引
	*/
	__proto.showSlotSkinByIndex=function(slotName,index){
		if (this._aniMode==0)return;
		var tBoneSlot=this.getSlotByName(slotName);
		if (tBoneSlot){
			tBoneSlot.showDisplayByIndex(index);
		}
		this._clearCache();
	}

	/**
	*设置某插槽的皮肤
	*@param slotName 插槽名称
	*@param name 皮肤名称
	*/
	__proto.showSlotSkinByName=function(slotName,name){
		if (this._aniMode==0)return;
		var tBoneSlot=this.getSlotByName(slotName);
		if (tBoneSlot){
			tBoneSlot.showDisplayByName(name);
		}
		this._clearCache();
	}

	/**
	*替换插槽贴图名
	*@param slotName 插槽名称
	*@param oldName 要替换的贴图名
	*@param newName 替换后的贴图名
	*/
	__proto.replaceSlotSkinName=function(slotName,oldName,newName){
		if (this._aniMode==0)return;
		var tBoneSlot=this.getSlotByName(slotName);
		if (tBoneSlot){
			tBoneSlot.replaceDisplayByName(oldName,newName);
		}
		this._clearCache();
	}

	/**
	*替换插槽的贴图索引
	*@param slotName 插槽名称
	*@param oldIndex 要替换的索引
	*@param newIndex 替换后的索引
	*/
	__proto.replaceSlotSkinByIndex=function(slotName,oldIndex,newIndex){
		if (this._aniMode==0)return;
		var tBoneSlot=this.getSlotByName(slotName);
		if (tBoneSlot){
			tBoneSlot.replaceDisplayByIndex(oldIndex,newIndex);
		}
		this._clearCache();
	}

	/**
	*设置自定义皮肤
	*@param name 插糟的名字
	*@param texture 自定义的纹理
	*/
	__proto.setSlotSkin=function(slotName,texture){
		if (this._aniMode==0)return;
		var tBoneSlot=this.getSlotByName(slotName);
		if (tBoneSlot){
			tBoneSlot.replaceSkin(texture);
		}
		this._clearCache();
	}

	/**
	*换装的时候，需要清一下缓冲区
	*/
	__proto._clearCache=function(){
		if (this._aniMode==1){
			for (var i=0,n=this._graphicsCache.length;i < n;i++){
				for (var j=0,len=this._graphicsCache[i].length;j < len;j++){
					var gp=this._graphicsCache[i][j];
					if (gp !=this.graphics){
						GraphicsAni.recycle(gp);
					}
				}
				this._graphicsCache[i].length=0;
			}
		}
	}

	/**
	*播放动画
	*
	*@param nameOrIndex 动画名字或者索引
	*@param loop 是否循环播放
	*@param force false,如果要播的动画跟上一个相同就不生效,true,强制生效
	*@param start 起始时间
	*@param end 结束时间
	*@param freshSkin 是否刷新皮肤数据
	*/
	__proto.play=function(nameOrIndex,loop,force,start,end,freshSkin){
		(force===void 0)&& (force=true);
		(start===void 0)&& (start=0);
		(end===void 0)&& (end=0);
		(freshSkin===void 0)&& (freshSkin=true);
		this._indexControl=false;
		var index=-1;
		var duration=NaN;
		if (loop){
			duration=2147483647;
			}else {
			duration=0;
		}
		if ( !this._templet ){
			return
		}
		if ((typeof nameOrIndex=='string')){
			for (var i=0,n=this._templet.getAnimationCount();i < n;i++){
				var animation=this._templet.getAnimation(i);
				if (animation && nameOrIndex==animation.name){
					index=i;
					break ;
				}
			}
			}else {
			index=nameOrIndex;
		}
		if (index >-1 && index < this.getAnimNum()){
			this._aniClipIndex=index;
			if (force || this._pause || this._currAniIndex !=index){
				this._currAniIndex=index;
				this._curOriginalData=new Float32Array(this._templet.getTotalkeyframesLength(index));
				this._drawOrder=null;
				this._eventIndex=0;
				this._player.play(index,this._player.playbackRate,duration,start,end);
				if (freshSkin)
					this._templet.showSkinByIndex(this._boneSlotDic,this._skinIndex);
				if (this._pause){
					this._pause=false;
					this._lastTime=Browser.now();
					this.timer.frameLoop(1,this,this._update,null,true);
				}
				this._update();
			}
		}
	}

	/**
	*停止动画
	*/
	__proto.stop=function(){
		if (!this._pause){
			this._pause=true;
			if (this._player){
				this._player.stop(true);
			}
			this.timer.clear(this,this._update);
		}
	}

	/**
	*设置动画播放速率
	*@param value 1为标准速率
	*/
	__proto.playbackRate=function(value){
		if (this._player){
			this._player.playbackRate=value;
		}
	}

	/**
	*暂停动画的播放
	*/
	__proto.paused=function(){
		if (!this._pause){
			this._pause=true;
			if (this._player){
				this._player.paused=true;
			}
			this.timer.clear(this,this._update);
		}
	}

	/**
	*恢复动画的播放
	*/
	__proto.resume=function(){
		this._indexControl=false;
		if (this._pause){
			this._pause=false;
			if (this._player){
				this._player.paused=false;
			}
			this._lastTime=Browser.now();
			this.timer.frameLoop(1,this,this._update,null,true);
		}
	}

	/**
	*@private
	*得到缓冲数据
	*@param aniIndex
	*@param frameIndex
	*@return
	*/
	__proto._getGrahicsDataWithCache=function(aniIndex,frameIndex){
		return this._graphicsCache[aniIndex][frameIndex];
	}

	/**
	*@private
	*保存缓冲grahpics
	*@param aniIndex
	*@param frameIndex
	*@param graphics
	*/
	__proto._setGrahicsDataWithCache=function(aniIndex,frameIndex,graphics){
		this._graphicsCache[aniIndex][frameIndex]=graphics;
	}

	/**
	*销毁当前动画
	*/
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._templet=null;
		if (this._player)this._player.offAll();
		this._player=null;
		this._curOriginalData=null;
		this._boneMatrixArray.length=0;
		this._lastTime=0;
		this.timer.clear(this,this._update);
	}

	/**
	*设置动画路径
	*/
	/**
	*得到资源的URL
	*/
	__getset(0,__proto,'url',function(){
		return this._aniPath;
		},function(path){
		this.load(path);
	});

	/**
	*@private
	*设置帧索引
	*/
	/**
	*@private
	*得到帧索引
	*/
	__getset(0,__proto,'index',function(){
		return this._index;
		},function(value){
		if (this.player){
			this._index=value;
			this._player.currentTime=this._index *1000 / this._player.cacheFrameRate;
			this._indexControl=true;
			this._update(false);
		}
	});

	/**
	*得到总帧数据
	*/
	__getset(0,__proto,'total',function(){
		if (this._templet && this._player){
			this._total=Math.floor(this._templet.getAniDuration(this._player.currentAnimationClipIndex)/ 1000 *this._player.cacheFrameRate);
			}else {
			this._total=-1;
		}
		return this._total;
	});

	/**
	*得到动画模板的引用
	*/
	__getset(0,__proto,'templet',function(){
		return this._templet;
	});

	/**
	*得到播放器的引用
	*/
	__getset(0,__proto,'player',function(){
		return this._player;
	});

	Skeleton.useSimpleMeshInCanvas=false;
	return Skeleton;
})(Sprite)


/**
*<p> <code>MovieClip</code> 用于播放经过工具处理后的 swf 动画。</p>
*/
//class laya.ani.swf.MovieClip extends laya.display.Sprite
var MovieClip=(function(_super){
	function MovieClip(parentMovieClip){
		/**@private 数据起始位置。*/
		this._start=0;
		/**@private 当前位置。*/
		this._Pos=0;
		/**@private 数据。*/
		this._data=null;
		/**@private */
		this._curIndex=0;
		/**@private */
		this._preIndex=0;
		/**@private */
		this._playIndex=0;
		/**@private */
		this._playing=false;
		/**@private */
		this._ended=true;
		/**@private 总帧数。*/
		this._count=0;
		/**@private id_data起始位置表*/
		this._ids=null;
		/**@private */
		this._loadedImage={};
		/**@private id_实例表*/
		this._idOfSprite=null;
		/**@private 父mc*/
		this._parentMovieClip=null;
		/**@private 需要更新的movieClip表*/
		this._movieClipList=null;
		/**@private */
		this._labels=null;
		/**资源根目录。*/
		this.basePath=null;
		/**@private */
		this._atlasPath=null;
		/**@private */
		this._url=null;
		/**@private */
		this._isRoot=false;
		/**@private */
		this._completeHandler=null;
		/**@private */
		this._endFrame=-1;
		/**播放间隔(单位：毫秒)。*/
		this.interval=30;
		/**是否循环播放 */
		this.loop=false;
		MovieClip.__super.call(this);
		this._ids={};
		this._idOfSprite=[];
		this._reset();
		this._playing=false;
		this._parentMovieClip=parentMovieClip;
		if (!parentMovieClip){
			this._movieClipList=[this];
			this._isRoot=true;
			this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
			}else {
			this._isRoot=false;
			this._movieClipList=parentMovieClip._movieClipList;
			this._movieClipList.push(this);
		}
	}

	__class(MovieClip,'laya.ani.swf.MovieClip',_super);
	var __proto=MovieClip.prototype;
	/**
	*<p>销毁此对象。以及销毁引用的Texture</p>
	*@param destroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
	*/
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._clear();
		_super.prototype.destroy.call(this,destroyChild);
	}

	/**@private */
	__proto._setDisplay=function(value){
		_super.prototype._setDisplay.call(this,value);
		if (this._isRoot){
			this._$3__onDisplay(value);
		}
	}

	/**@private */
	__proto._$3__onDisplay=function(value){
		if (value)this.timer.loop(this.interval,this,this.updates,null,true);
		else this.timer.clear(this,this.updates);
	}

	/**@private 更新时间轴*/
	__proto.updates=function(){
		if (this._parentMovieClip)return;
		var i=0,len=0;
		len=this._movieClipList.length;
		for (i=0;i < len;i++){
			this._movieClipList[i]&&this._movieClipList[i]._update();
		}
	}

	/**
	*增加一个标签到index帧上，播放到此index后会派发label事件
	*@param label 标签名称
	*@param index 索引位置
	*/
	__proto.addLabel=function(label,index){
		if (!this._labels)this._labels={};
		this._labels[index]=label;
	}

	/**
	*删除某个标签
	*@param label 标签名字，如果label为空，则删除所有Label
	*/
	__proto.removeLabel=function(label){
		if (!label)this._labels=null;
		else if (!this._labels){
			for (var name in this._labels){
				if (this._labels[name]===label){
					delete this._labels[name];
					break ;
				}
			}
		}
	}

	/**
	*@private
	*动画的帧更新处理函数。
	*/
	__proto._update=function(){
		if (!this._data)return;
		if (!this._playing)return;
		this._playIndex++;
		if (this._playIndex >=this._count){
			if (!this.loop){
				this._playIndex--;
				this.stop();
				return;
			}
			this._playIndex=0;
		}
		this._parse(this._playIndex);
		if (this._labels && this._labels[this._playIndex])this.event(/*laya.events.Event.LABEL*/"label",this._labels[this._playIndex]);
		if (this._endFrame!=-1&&this._endFrame==this._playIndex){
			this._endFrame=-1;
			if (this._completeHandler !=null){
				var handler=this._completeHandler;
				this._completeHandler=null;
				handler.run();
			}
			this.stop();
		}
	}

	/**
	*停止播放动画。
	*/
	__proto.stop=function(){
		this._playing=false;
	}

	/**
	*跳到某帧并停止播放动画。
	*@param frame 要跳到的帧
	*/
	__proto.gotoAndStop=function(index){
		this.index=index;
		this.stop();
	}

	/**
	*@private
	*清理。
	*/
	__proto._clear=function(){
		this.stop();
		this._idOfSprite.length=0;
		if (!this._parentMovieClip){
			this.timer.clear(this,this.updates);
			var i=0,len=0;
			len=this._movieClipList.length;
			for (i=0;i < len;i++){
				if (this._movieClipList[i] !=this)
					this._movieClipList[i]._clear();
			}
			this._movieClipList.length=0;
		}
		if (this._atlasPath){
			Loader.clearRes(this._atlasPath);
		};
		var key;
		for (key in this._loadedImage){
			if (this._loadedImage[key]){
				Loader.clearRes(key);
				this._loadedImage[key]=false;
			}
		}
		this.removeChildren();
		this.graphics=null;
		this._parentMovieClip=null;
	}

	/**
	*播放动画。
	*@param index 帧索引。
	*/
	__proto.play=function(index,loop){
		(index===void 0)&& (index=0);
		(loop===void 0)&& (loop=true);
		this.loop=loop;
		this._playing=true;
		if (this._data)
			this._displayFrame(index);
	}

	/**@private */
	__proto._displayFrame=function(frameIndex){
		(frameIndex===void 0)&& (frameIndex=-1);
		if (frameIndex !=-1){
			if (this._curIndex > frameIndex)this._reset();
			this._parse(frameIndex);
		}
	}

	/**@private */
	__proto._reset=function(rm){
		(rm===void 0)&& (rm=true);
		if (rm && this._curIndex !=1)this.removeChildren();
		this._preIndex=this._curIndex=-1;
		this._Pos=this._start;
	}

	/**@private */
	__proto._parse=function(frameIndex){
		var curChild=this;
		var mc,sp,key=0,type=0,tPos=0,ttype=0,ifAdd=false;
		var _idOfSprite=this._idOfSprite,_data=this._data,eStr;
		if (this._ended)this._reset();
		_data.pos=this._Pos;
		this._ended=false;
		this._playIndex=frameIndex;
		if (this._curIndex > frameIndex&&frameIndex<this._preIndex){
			this._reset(true);
			_data.pos=this._Pos;
		}
		while ((this._curIndex <=frameIndex)&& (!this._ended)){
			type=_data.getUint16();
			switch (type){
				case 12:
					key=_data.getUint16();
					tPos=this._ids[_data.getUint16()];
					this._Pos=_data.pos;
					_data.pos=tPos;
					if ((ttype=_data.getUint8())==0){
						var pid=_data.getUint16();
						sp=_idOfSprite[key]
						if (!sp){
							sp=_idOfSprite[key]=new Sprite();
							var spp=new Sprite();
							spp.loadImage(this.basePath+pid+".png");
							this._loadedImage[this.basePath+pid+".png"]=true;
							sp.addChild(spp);
							spp.size(_data.getFloat32(),_data.getFloat32());
							var mat=_data._getMatrix();
							spp.transform=mat;
						}
						sp.alpha=1;
						}else if (ttype==1){
						mc=_idOfSprite[key]
						if (!mc){
							_idOfSprite[key]=mc=new MovieClip(this);
							mc.interval=this.interval;
							mc._ids=this._ids;
							mc.basePath=this.basePath;
							mc._setData(_data,tPos);
							mc._initState();
							mc.play(0);
						}
						mc.alpha=1;
					}
					_data.pos=this._Pos;
					break ;
				case 3:;
					var node=_idOfSprite[ _data.getUint16()];
					if (node){
						this.addChild(node);
						node.zOrder=_data.getUint16();
						ifAdd=true;
					}
					break ;
				case 4:
					node=_idOfSprite[ _data.getUint16()];
					node && node.removeSelf();
					break ;
				case 5:
					_idOfSprite[_data.getUint16()][MovieClip._ValueList[_data.getUint16()]]=(_data.getFloat32());
					break ;
				case 6:
					_idOfSprite[_data.getUint16()].visible=(_data.getUint8()> 0);
					break ;
				case 7:
					sp=_idOfSprite[ _data.getUint16()];
					var mt=sp.transform || Matrix.create();
					mt.setTo(_data.getFloat32(),_data.getFloat32(),_data.getFloat32(),_data.getFloat32(),_data.getFloat32(),_data.getFloat32());
					sp.transform=mt;
					break ;
				case 8:
					_idOfSprite[_data.getUint16()].setPos(_data.getFloat32(),_data.getFloat32());
					break ;
				case 9:
					_idOfSprite[_data.getUint16()].setSize(_data.getFloat32(),_data.getFloat32());
					break ;
				case 10:
					_idOfSprite[ _data.getUint16()].alpha=_data.getFloat32();
					break ;
				case 11:
					_idOfSprite[_data.getUint16()].setScale(_data.getFloat32(),_data.getFloat32());
					break ;
				case 98:
					eStr=_data.getString();
					this.event(eStr);
					if (eStr=="stop")this.stop();
					break ;
				case 99:
					this._curIndex=_data.getUint16();
					ifAdd && this.updateZOrder();
					break ;
				case 100:
					this._count=this._curIndex+1;
					this._ended=true;
					if (this._playing){
						this.event(/*laya.events.Event.FRAME*/"enterframe");
						this.event(/*laya.events.Event.END*/"end");
						this.event(/*laya.events.Event.COMPLETE*/"complete");
					}
					this._reset(false);
					break ;
				}
		}
		if (this._playing&&!this._ended)this.event(/*laya.events.Event.FRAME*/"enterframe");
		this._Pos=_data.pos;
	}

	/**@private */
	__proto._setData=function(data,start){
		this._data=data;
		this._start=start+3;
	}

	/**
	*加载资源。
	*@param url swf 资源地址。
	*@param atlas 是否使用图集资源
	*@param atlasPath 图集路径，默认使用与swf同名的图集
	*/
	__proto.load=function(url,atlas,atlasPath){
		(atlas===void 0)&& (atlas=false);
		this._url=url;
		if(atlas)this._atlasPath=atlasPath?atlasPath:url.split(".swf")[0]+".json";
		this.stop();
		this._clear();
		this._movieClipList=[this];
		var urls;
		urls=[ {url:url,type:/*laya.net.Loader.BUFFER*/"arraybuffer" }];
		if (this._atlasPath){
			urls.push({url:this._atlasPath,type:/*laya.net.Loader.ATLAS*/"atlas" });
		}
		Laya.loader.load(urls,Handler.create(this,this._onLoaded));
	}

	/**@private */
	__proto._onLoaded=function(){
		var data;
		data=Loader.getRes(this._url);
		if (!data){
			this.event(/*laya.events.Event.ERROR*/"error","file not find");
			return;
		}
		this.basePath=this._atlasPath?Loader.getAtlas(this._atlasPath).dir:this._url.split(".swf")[0]+"/image/";
		this._initData(data);
	}

	/**@private */
	__proto._initState=function(){
		this._reset();
		this._ended=false;
		var preState=this._playing;
		this._playing=false;
		this._curIndex=0;
		while (!this._ended)this._parse(++this._curIndex);
		this._playing=preState;
	}

	/**@private */
	__proto._initData=function(data){
		this._data=new Byte(data);
		var i=0,len=this._data.getUint16();
		for (i=0;i < len;i++)this._ids[this._data.getInt16()]=this._data.getInt32();
		this.interval=1000 / this._data.getUint16();
		this._setData(this._data,this._ids[32767]);
		this._initState();
		this.play(0);
		this.event(/*laya.events.Event.LOADED*/"loaded");
		if (!this._parentMovieClip)this.timer.loop(this.interval,this,this.updates,null,true);
	}

	/**
	*从开始索引播放到结束索引，结束之后出发complete回调
	*@param start 开始索引
	*@param end 结束索引
	*@param complete 结束回调
	*/
	__proto.playTo=function(start,end,complete){
		this._completeHandler=complete;
		this._endFrame=end;
		this.play(start,false);
	}

	/**当前播放索引。*/
	__getset(0,__proto,'index',function(){
		return this._playIndex;
		},function(value){
		this._playIndex=value;
		if (this._data)
			this._displayFrame(this._playIndex);
		if (this._labels && this._labels[value])this.event(/*laya.events.Event.LABEL*/"label",this._labels[value]);
	});

	/**
	*帧总数。
	*/
	__getset(0,__proto,'count',function(){
		return this._count;
	});

	/**
	*是否在播放中
	*/
	__getset(0,__proto,'playing',function(){
		return this._playing;
	});

	/**
	*资源地址。
	*/
	__getset(0,__proto,'url',null,function(path){
		this.load(path);
	});

	MovieClip._ValueList=["x","y","width","height","scaleX","scaleY","rotation","alpha"];
	return MovieClip;
})(Sprite)


/**
*动画模板类
*/
//class laya.ani.bone.Templet extends laya.ani.AnimationTemplet
var Templet=(function(_super){
	function Templet(){
		this._mainTexture=null;
		this._textureJson=null;
		this._graphicsCache=[];
		/**存放原始骨骼信息 */
		this.srcBoneMatrixArr=[];
		/**IK数据 */
		this.ikArr=[];
		/**transform数据 */
		this.tfArr=[];
		/**path数据 */
		this.pathArr=[];
		/**存放插槽数据的字典 */
		this.boneSlotDic={};
		/**绑定插槽数据的字典 */
		this.bindBoneBoneSlotDic={};
		/**存放插糟数据的数组 */
		this.boneSlotArray=[];
		/**皮肤数据 */
		this.skinDataArray=[];
		/**皮肤的字典数据 */
		this.skinDic={};
		/**存放纹理数据 */
		this.subTextureDic={};
		/**是否解析失败 */
		this.isParseFail=false;
		/**反转矩阵，有些骨骼动画要反转才能显示 */
		this.yReverseMatrix=null;
		/**渲染顺序动画数据 */
		this.drawOrderAniArr=[];
		/**事件动画数据 */
		this.eventAniArr=[];
		/**@private 索引对应的名称 */
		this.attachmentNames=null;
		/**顶点动画数据 */
		this.deformAniArr=[];
		this._isDestroyed=false;
		this._rate=30;
		this.isParserComplete=false;
		this.aniSectionDic={};
		this._skBufferUrl=null;
		this._textureDic={};
		this._loadList=null;
		this._path=null;
		/**@private */
		this.tMatrixDataLen=0;
		this.mRootBone=null;
		Templet.__super.call(this);
		this.skinSlotDisplayDataArr=[];
		this.mBoneArr=[];
	}

	__class(Templet,'laya.ani.bone.Templet',_super);
	var __proto=Templet.prototype;
	__proto.loadAni=function(url){
		this._skBufferUrl=url;
		Laya.loader.load(url,Handler.create(this,this.onComplete),null,/*laya.net.Loader.BUFFER*/"arraybuffer");
	}

	__proto.onComplete=function(content){
		if (this._isDestroyed){
			this.destroy();
			return;
		};
		var tSkBuffer=Loader.getRes(this._skBufferUrl);
		if (!tSkBuffer){
			this.event(/*laya.events.Event.ERROR*/"error","load failed:"+this._skBufferUrl);
			return;
		}
		this._path=this._skBufferUrl.slice(0,this._skBufferUrl.lastIndexOf("/"))+"/";
		this.parseData(null,tSkBuffer);
	}

	/**
	*解析骨骼动画数据
	*@param texture 骨骼动画用到的纹理
	*@param skeletonData 骨骼动画信息及纹理分块信息
	*@param playbackRate 缓冲的帧率数据（会根据帧率去分帧）
	*/
	__proto.parseData=function(texture,skeletonData,playbackRate){
		(playbackRate===void 0)&& (playbackRate=30);
		if(!this._path&&this.url)this._path=this.url.slice(0,this.url.lastIndexOf("/"))+"/";
		this._mainTexture=texture;
		if (this._mainTexture){
			if (Render.isWebGL && texture.bitmap){
				texture.bitmap.enableMerageInAtlas=false;
			}
		}
		this._rate=playbackRate;
		this.parse(skeletonData);
	}

	/**
	*创建动画
	*0,使用模板缓冲的数据，模板缓冲的数据，不允许修改 （内存开销小，计算开销小，不支持换装）
	*1,使用动画自己的缓冲区，每个动画都会有自己的缓冲区，相当耗费内存 （内存开销大，计算开销小，支持换装）
	*2,使用动态方式，去实时去画 （内存开销小，计算开销大，支持换装,不建议使用）
	*@param aniMode 0 动画模式，0:不支持换装,1,2支持换装
	*@return
	*/
	__proto.buildArmature=function(aniMode){
		(aniMode===void 0)&& (aniMode=0);
		return new Skeleton(this,aniMode);
	}

	/**
	*@private
	*解析动画
	*@param data 解析的二进制数据
	*@param playbackRate 帧率
	*/
	__proto.parse=function(data){
		_super.prototype.parse.call(this,data);
		this._endLoaded();
		if (this._aniVersion !=Templet.LAYA_ANIMATION_VISION){
			console.log("[Error] 版本不一致，请使用IDE版本配套的重新导出"+this._aniVersion+"->"+Templet.LAYA_ANIMATION_VISION);
			this._loaded=false;
		}
		if (this.loaded){
			if (this._mainTexture){
				this._parsePublicExtData();
				}else {
				this._parseTexturePath();
			}
			}else {
			this.event(/*laya.events.Event.ERROR*/"error",this);
			this.isParseFail=true;
		}
	}

	__proto._parseTexturePath=function(){
		if (this._isDestroyed){
			this.destroy();
			return;
		};
		var i=0;
		this._loadList=[];
		var tByte=new Byte(this.getPublicExtData());
		var tX=0,tY=0,tWidth=0,tHeight=0;
		var tFrameX=0,tFrameY=0,tFrameWidth=0,tFrameHeight=0;
		var tTempleData=0;
		var tTextureLen=tByte.getInt32();
		var tTextureName=tByte.readUTFString();
		var tTextureNameArr=tTextureName.split("\n");
		var tTexture;
		var tSrcTexturePath;
		for (i=0;i < tTextureLen;i++){
			tSrcTexturePath=this._path+tTextureNameArr[i *2];
			tTextureName=tTextureNameArr[i *2+1];
			tX=tByte.getFloat32();
			tY=tByte.getFloat32();
			tWidth=tByte.getFloat32();
			tHeight=tByte.getFloat32();
			tTempleData=tByte.getFloat32();
			tFrameX=isNaN(tTempleData)? 0 :tTempleData;
			tTempleData=tByte.getFloat32();
			tFrameY=isNaN(tTempleData)? 0 :tTempleData;
			tTempleData=tByte.getFloat32();
			tFrameWidth=isNaN(tTempleData)? tWidth :tTempleData;
			tTempleData=tByte.getFloat32();
			tFrameHeight=isNaN(tTempleData)? tHeight :tTempleData;
			if (this._loadList.indexOf(tSrcTexturePath)==-1){
				this._loadList.push(tSrcTexturePath);
			}
		}
		Laya.loader.load(this._loadList,Handler.create(this,this._textureComplete));
	}

	/**
	*纹理加载完成
	*/
	__proto._textureComplete=function(){
		var tTexture;
		var tTextureName;
		for (var i=0,n=this._loadList.length;i < n;i++){
			tTextureName=this._loadList[i];
			tTexture=this._textureDic[tTextureName]=Loader.getRes(tTextureName);
			if (Render.isWebGL && tTexture && tTexture.bitmap){
				tTexture.bitmap.enableMerageInAtlas=false;
			}
		}
		this._parsePublicExtData();
	}

	/**
	*解析自定义数据
	*/
	__proto._parsePublicExtData=function(){
		var i=0,j=0,k=0,l=0,n=0;
		for (i=0,n=this.getAnimationCount();i < n;i++){
			this._graphicsCache.push([]);
		};
		var isSpine=false;
		isSpine=this._aniClassName !="Dragon";
		var tByte=new Byte(this.getPublicExtData());
		var tX=0,tY=0,tWidth=0,tHeight=0;
		var tFrameX=0,tFrameY=0,tFrameWidth=0,tFrameHeight=0;
		var tTempleData=0;
		var tTextureLen=tByte.getInt32();
		var tTextureName=tByte.readUTFString();
		var tTextureNameArr=tTextureName.split("\n");
		var tTexture;
		var tSrcTexturePath;
		for (i=0;i < tTextureLen;i++){
			tTexture=this._mainTexture;
			tSrcTexturePath=this._path+tTextureNameArr[i *2];
			tTextureName=tTextureNameArr[i *2+1];
			if (this._mainTexture==null){
				tTexture=this._textureDic[tSrcTexturePath];
			}
			if (!tTexture){
				this.event(/*laya.events.Event.ERROR*/"error",this);
				this.isParseFail=true;
				return;
			}
			tX=tByte.getFloat32();
			tY=tByte.getFloat32();
			tWidth=tByte.getFloat32();
			tHeight=tByte.getFloat32();
			tTempleData=tByte.getFloat32();
			tFrameX=isNaN(tTempleData)? 0 :tTempleData;
			tTempleData=tByte.getFloat32();
			tFrameY=isNaN(tTempleData)? 0 :tTempleData;
			tTempleData=tByte.getFloat32();
			tFrameWidth=isNaN(tTempleData)? tWidth :tTempleData;
			tTempleData=tByte.getFloat32();
			tFrameHeight=isNaN(tTempleData)? tHeight :tTempleData;
			this.subTextureDic[tTextureName]=Texture.create(tTexture,tX,tY,tWidth,tHeight,-tFrameX,-tFrameY,tFrameWidth,tFrameHeight);
		}
		this._mainTexture=tTexture;
		var tAniCount=tByte.getUint16();
		var tSectionArr;
		for (i=0;i < tAniCount;i++){
			tSectionArr=[];
			tSectionArr.push(tByte.getUint16());
			tSectionArr.push(tByte.getUint16());
			tSectionArr.push(tByte.getUint16());
			tSectionArr.push(tByte.getUint16());
			this.aniSectionDic[i]=tSectionArr;
		};
		var tBone;
		var tParentBone;
		var tName;
		var tParentName;
		var tBoneLen=tByte.getInt16();
		var tBoneDic={};
		var tRootBone;
		for (i=0;i < tBoneLen;i++){
			tBone=new Bone();
			if (i==0){
				tRootBone=tBone;
				}else {
				tBone.root=tRootBone;
			}
			tBone.d=isSpine?-1:1;
			tName=tByte.readUTFString();
			tParentName=tByte.readUTFString();
			tBone.length=tByte.getFloat32();
			if (tByte.getByte()==1){
				tBone.inheritRotation=false;
			}
			if (tByte.getByte()==1){
				tBone.inheritScale=false;
			}
			tBone.name=tName;
			if (tParentName){
				tParentBone=tBoneDic[tParentName];
				if (tParentBone){
					tParentBone.addChild(tBone);
					}else {
					this.mRootBone=tBone;
				}
			}
			tBoneDic[tName]=tBone;
			this.mBoneArr.push(tBone);
		}
		this.tMatrixDataLen=tByte.getUint16();
		var tLen=tByte.getUint16();
		var parentIndex=0;
		var boneLength=Math.floor(tLen / this.tMatrixDataLen);
		var tResultTransform;
		var tMatrixArray=this.srcBoneMatrixArr;
		for (i=0;i < boneLength;i++){
			tResultTransform=new Transform();
			tResultTransform.scX=tByte.getFloat32();
			tResultTransform.skX=tByte.getFloat32();
			tResultTransform.skY=tByte.getFloat32();
			tResultTransform.scY=tByte.getFloat32();
			tResultTransform.x=tByte.getFloat32();
			tResultTransform.y=tByte.getFloat32();
			if (this.tMatrixDataLen===8){
				tResultTransform.skewX=tByte.getFloat32();
				tResultTransform.skewY=tByte.getFloat32();
			}
			tMatrixArray.push(tResultTransform);
			tBone=this.mBoneArr[i];
			tBone.transform=tResultTransform;
		};
		var tIkConstraintData;
		var tIkLen=tByte.getUint16();
		var tIkBoneLen=0;
		for (i=0;i < tIkLen;i++){
			tIkConstraintData=new IkConstraintData();
			tIkBoneLen=tByte.getUint16();
			for (j=0;j < tIkBoneLen;j++){
				tIkConstraintData.boneNames.push(tByte.readUTFString());
				tIkConstraintData.boneIndexs.push(tByte.getInt16());
			}
			tIkConstraintData.name=tByte.readUTFString();
			tIkConstraintData.targetBoneName=tByte.readUTFString();
			tIkConstraintData.targetBoneIndex=tByte.getInt16();
			tIkConstraintData.bendDirection=tByte.getFloat32();
			tIkConstraintData.mix=tByte.getFloat32();
			tIkConstraintData.isSpine=isSpine;
			this.ikArr.push(tIkConstraintData);
		};
		var tTfConstraintData;
		var tTfLen=tByte.getUint16();
		var tTfBoneLen=0;
		for (i=0;i < tTfLen;i++){
			tTfConstraintData=new TfConstraintData();
			tTfBoneLen=tByte.getUint16();
			for (j=0;j < tTfBoneLen;j++){
				tTfConstraintData.boneIndexs.push(tByte.getInt16());
			}
			tTfConstraintData.name=tByte.getUTFString();
			tTfConstraintData.targetIndex=tByte.getInt16();
			tTfConstraintData.rotateMix=tByte.getFloat32();
			tTfConstraintData.translateMix=tByte.getFloat32();
			tTfConstraintData.scaleMix=tByte.getFloat32();
			tTfConstraintData.shearMix=tByte.getFloat32();
			tTfConstraintData.offsetRotation=tByte.getFloat32();
			tTfConstraintData.offsetX=tByte.getFloat32();
			tTfConstraintData.offsetY=tByte.getFloat32();
			tTfConstraintData.offsetScaleX=tByte.getFloat32();
			tTfConstraintData.offsetScaleY=tByte.getFloat32();
			tTfConstraintData.offsetShearY=tByte.getFloat32();
			this.tfArr.push(tTfConstraintData);
		};
		var tPathConstraintData;
		var tPathLen=tByte.getUint16();
		var tPathBoneLen=0;
		for (i=0;i < tPathLen;i++){
			tPathConstraintData=new PathConstraintData();
			tPathConstraintData.name=tByte.readUTFString();
			tPathBoneLen=tByte.getUint16();
			for (j=0;j < tPathBoneLen;j++){
				tPathConstraintData.bones.push(tByte.getInt16());
			}
			tPathConstraintData.target=tByte.readUTFString();
			tPathConstraintData.positionMode=tByte.readUTFString();
			tPathConstraintData.spacingMode=tByte.readUTFString();
			tPathConstraintData.rotateMode=tByte.readUTFString();
			tPathConstraintData.offsetRotation=tByte.getFloat32();
			tPathConstraintData.position=tByte.getFloat32();
			tPathConstraintData.spacing=tByte.getFloat32();
			tPathConstraintData.rotateMix=tByte.getFloat32();
			tPathConstraintData.translateMix=tByte.getFloat32();
			this.pathArr.push(tPathConstraintData);
		};
		var tDeformSlotLen=0;
		var tDeformSlotDisplayLen=0;
		var tDSlotIndex=0;
		var tDAttachment;
		var tDeformTimeLen=0;
		var tDTime=NaN;
		var tDeformVecticesLen=0;
		var tDeformAniData;
		var tDeformSlotData;
		var tDeformSlotDisplayData;
		var tDeformVectices;
		var tDeformAniLen=tByte.getInt16();
		for (i=0;i < tDeformAniLen;i++){
			var tDeformSkinLen=tByte.getUint8();
			var tSkinDic={};
			this.deformAniArr.push(tSkinDic);
			for (var f=0;f < tDeformSkinLen;f++){
				tDeformAniData=new DeformAniData();
				tDeformAniData.skinName=tByte.getUTFString();
				tSkinDic[tDeformAniData.skinName]=tDeformAniData;
				tDeformSlotLen=tByte.getInt16();
				for (j=0;j < tDeformSlotLen;j++){
					tDeformSlotData=new DeformSlotData();
					tDeformAniData.deformSlotDataList.push(tDeformSlotData);
					tDeformSlotDisplayLen=tByte.getInt16();
					for (k=0;k < tDeformSlotDisplayLen;k++){
						tDeformSlotDisplayData=new DeformSlotDisplayData();
						tDeformSlotData.deformSlotDisplayList.push(tDeformSlotDisplayData);
						tDeformSlotDisplayData.slotIndex=tDSlotIndex=tByte.getInt16();
						tDeformSlotDisplayData.attachment=tDAttachment=tByte.getUTFString();
						tDeformTimeLen=tByte.getInt16();
						for (l=0;l < tDeformTimeLen;l++){
							if (tByte.getByte()==1){
								tDeformSlotDisplayData.tweenKeyList.push(true);
								}else {
								tDeformSlotDisplayData.tweenKeyList.push(false);
							}
							tDTime=tByte.getFloat32();
							tDeformSlotDisplayData.timeList.push(tDTime);
							tDeformVectices=[];
							tDeformSlotDisplayData.vectices.push(tDeformVectices);
							tDeformVecticesLen=tByte.getInt16();
							for (n=0;n < tDeformVecticesLen;n++){
								tDeformVectices.push(tByte.getFloat32());
							}
						}
					}
				}
			}
		};
		var tDrawOrderArr;
		var tDrawOrderAniLen=tByte.getInt16();
		var tDrawOrderLen=0;
		var tDrawOrderData;
		var tDoLen=0;
		for (i=0;i < tDrawOrderAniLen;i++){
			tDrawOrderLen=tByte.getInt16();
			tDrawOrderArr=[];
			for (j=0;j < tDrawOrderLen;j++){
				tDrawOrderData=new DrawOrderData();
				tDrawOrderData.time=tByte.getFloat32();
				tDoLen=tByte.getInt16();
				for (k=0;k < tDoLen;k++){
					tDrawOrderData.drawOrder.push(tByte.getInt16());
				}
				tDrawOrderArr.push(tDrawOrderData);
			}
			this.drawOrderAniArr.push(tDrawOrderArr);
		};
		var tEventArr;
		var tEventAniLen=tByte.getInt16();
		var tEventLen=0;
		var tEventData;
		for (i=0;i < tEventAniLen;i++){
			tEventLen=tByte.getInt16();
			tEventArr=[];
			for (j=0;j < tEventLen;j++){
				tEventData=new EventData();
				tEventData.name=tByte.getUTFString();
				tEventData.intValue=tByte.getInt32();
				tEventData.floatValue=tByte.getFloat32();
				tEventData.stringValue=tByte.getUTFString();
				tEventData.time=tByte.getFloat32();
				tEventArr.push(tEventData);
			}
			this.eventAniArr.push(tEventArr);
		};
		var tAttachmentLen=tByte.getInt16();
		if (tAttachmentLen > 0){
			this.attachmentNames=[];
			for (i=0;i < tAttachmentLen;i++){
				this.attachmentNames.push(tByte.getUTFString());
			}
		};
		var tBoneSlotLen=tByte.getInt16();
		var tDBBoneSlot;
		var tDBBoneSlotArr;
		for (i=0;i < tBoneSlotLen;i++){
			tDBBoneSlot=new BoneSlot();
			tDBBoneSlot.name=tByte.readUTFString();
			tDBBoneSlot.parent=tByte.readUTFString();
			tDBBoneSlot.attachmentName=tByte.readUTFString();
			tDBBoneSlot.srcDisplayIndex=tDBBoneSlot.displayIndex=tByte.getInt16();
			tDBBoneSlot.templet=this;
			this.boneSlotDic[tDBBoneSlot.name]=tDBBoneSlot;
			tDBBoneSlotArr=this.bindBoneBoneSlotDic[tDBBoneSlot.parent];
			if (tDBBoneSlotArr==null){
				this.bindBoneBoneSlotDic[tDBBoneSlot.parent]=tDBBoneSlotArr=[];
			}
			tDBBoneSlotArr.push(tDBBoneSlot);
			this.boneSlotArray.push(tDBBoneSlot);
		};
		var tNameString=tByte.readUTFString();
		var tNameArray=tNameString.split("\n");
		var tNameStartIndex=0;
		var tSkinDataLen=tByte.getUint8();
		var tSkinData,tSlotData,tDisplayData;
		var tSlotDataLen=0,tDisplayDataLen=0;
		var tUvLen=0,tWeightLen=0,tTriangleLen=0,tVerticeLen=0,tLengthLen=0;
		for (i=0;i < tSkinDataLen;i++){
			tSkinData=new SkinData();
			tSkinData.name=tNameArray[tNameStartIndex++];
			tSlotDataLen=tByte.getUint8();
			for (j=0;j < tSlotDataLen;j++){
				tSlotData=new SlotData();
				tSlotData.name=tNameArray[tNameStartIndex++];
				tDBBoneSlot=this.boneSlotDic[tSlotData.name];
				tDisplayDataLen=tByte.getUint8();
				for (k=0;k < tDisplayDataLen;k++){
					tDisplayData=new SkinSlotDisplayData();
					this.skinSlotDisplayDataArr.push(tDisplayData);
					tDisplayData.name=tNameArray[tNameStartIndex++];
					tDisplayData.attachmentName=tNameArray[tNameStartIndex++];
					tDisplayData.transform=new Transform();
					tDisplayData.transform.scX=tByte.getFloat32();
					tDisplayData.transform.skX=tByte.getFloat32();
					tDisplayData.transform.skY=tByte.getFloat32();
					tDisplayData.transform.scY=tByte.getFloat32();
					tDisplayData.transform.x=tByte.getFloat32();
					tDisplayData.transform.y=tByte.getFloat32();
					tSlotData.displayArr.push(tDisplayData);
					tDisplayData.width=tByte.getFloat32();
					tDisplayData.height=tByte.getFloat32();
					tDisplayData.type=tByte.getUint8();
					tDisplayData.verLen=tByte.getUint16();
					tBoneLen=tByte.getUint16();
					if (tBoneLen > 0){
						tDisplayData.bones=[];
						for (l=0;l < tBoneLen;l++){
							var tBoneId=tByte.getUint16();
							tDisplayData.bones.push(tBoneId);
						}
					}
					tUvLen=tByte.getUint16();
					if (tUvLen > 0){
						tDisplayData.uvs=[];
						for (l=0;l < tUvLen;l++){
							tDisplayData.uvs.push(tByte.getFloat32());
						}
					}
					tWeightLen=tByte.getUint16();
					if (tWeightLen > 0){
						tDisplayData.weights=[];
						for (l=0;l < tWeightLen;l++){
							tDisplayData.weights.push(tByte.getFloat32());
						}
					}
					tTriangleLen=tByte.getUint16();
					if (tTriangleLen > 0){
						tDisplayData.triangles=[];
						for (l=0;l < tTriangleLen;l++){
							tDisplayData.triangles.push(tByte.getUint16());
						}
					}
					tVerticeLen=tByte.getUint16();
					if (tVerticeLen > 0){
						tDisplayData.vertices=[];
						for (l=0;l < tVerticeLen;l++){
							tDisplayData.vertices.push(tByte.getFloat32());
						}
					}
					tLengthLen=tByte.getUint16();
					if (tLengthLen > 0){
						tDisplayData.lengths=[];
						for (l=0;l < tLengthLen;l++){
							tDisplayData.lengths.push(tByte.getFloat32());
						}
					}
				}
				tSkinData.slotArr.push(tSlotData);
			}
			this.skinDic[tSkinData.name]=tSkinData;
			this.skinDataArray.push(tSkinData);
		};
		var tReverse=tByte.getUint8();
		if (tReverse==1){
			this.yReverseMatrix=new Matrix(1,0,0,-1,0,0);
			if (tRootBone){
				tRootBone.setTempMatrix(this.yReverseMatrix);
			}
			}else {
			if (tRootBone){
				tRootBone.setTempMatrix(new Matrix());
			}
		}
		this.showSkinByIndex(this.boneSlotDic,0);
		this.isParserComplete=true;
		this.event(/*laya.events.Event.COMPLETE*/"complete",this);
	}

	/**
	*得到指定的纹理
	*@param name 纹理的名字
	*@return
	*/
	__proto.getTexture=function(name){
		var tTexture=this.subTextureDic[name];
		if (!tTexture){
			tTexture=this.subTextureDic[name.substr(0,name.length-1)];
		}
		if (tTexture==null){
			return this._mainTexture;
		}
		return tTexture;
	}

	/**
	*@private
	*显示指定的皮肤
	*@param boneSlotDic 插糟字典的引用
	*@param skinIndex 皮肤的索引
	*@param freshDisplayIndex 是否重置插槽纹理
	*/
	__proto.showSkinByIndex=function(boneSlotDic,skinIndex,freshDisplayIndex){
		(freshDisplayIndex===void 0)&& (freshDisplayIndex=true);
		if (skinIndex < 0 && skinIndex >=this.skinDataArray.length)return false;
		var i=0,n=0;
		var tBoneSlot;
		var tSlotData;
		var tSkinData=this.skinDataArray[skinIndex];
		if (tSkinData){
			for (i=0,n=tSkinData.slotArr.length;i < n;i++){
				tSlotData=tSkinData.slotArr[i];
				if (tSlotData){
					tBoneSlot=boneSlotDic[tSlotData.name];
					if (tBoneSlot){
						tBoneSlot.showSlotData(tSlotData,freshDisplayIndex);
						if (freshDisplayIndex&&tBoneSlot.attachmentName !="undefined" && tBoneSlot.attachmentName !="null"){
							tBoneSlot.showDisplayByName(tBoneSlot.attachmentName);
							}else {
							tBoneSlot.showDisplayByIndex(tBoneSlot.displayIndex);
						}
					}
				}
			}
			return true;
		}
		return false;
	}

	/**
	*通过皮肤名字得到皮肤索引
	*@param skinName 皮肤名称
	*@return
	*/
	__proto.getSkinIndexByName=function(skinName){
		var tSkinData;
		for (var i=0,n=this.skinDataArray.length;i < n;i++){
			tSkinData=this.skinDataArray[i];
			if (tSkinData.name==skinName){
				return i;
			}
		}
		return-1;
	}

	/**
	*@private
	*得到缓冲数据
	*@param aniIndex 动画索引
	*@param frameIndex 帧索引
	*@return
	*/
	__proto.getGrahicsDataWithCache=function(aniIndex,frameIndex){
		return this._graphicsCache[aniIndex][frameIndex];
	}

	/**
	*@private
	*保存缓冲grahpics
	*@param aniIndex 动画索引
	*@param frameIndex 帧索引
	*@param graphics 要保存的数据
	*/
	__proto.setGrahicsDataWithCache=function(aniIndex,frameIndex,graphics){
		this._graphicsCache[aniIndex][frameIndex]=graphics;
	}

	/**
	*释放纹理
	*/
	__proto.destroy=function(){
		this._isDestroyed=true;
		var tTexture;
		/*for each*/for(var $each_tTexture in this.subTextureDic){
			tTexture=this.subTextureDic[$each_tTexture];
			if(tTexture)
				tTexture.destroy();
		}
		var $each_tTexture;
		/*for each*/for($each_tTexture in this._textureDic){
			tTexture=this._textureDic[$each_tTexture];
			if(tTexture)
				tTexture.destroy();
		};
		var tSkinSlotDisplayData;
		for (var i=0,n=this.skinSlotDisplayDataArr.length;i < n;i++){
			tSkinSlotDisplayData=this.skinSlotDisplayDataArr[i];
			tSkinSlotDisplayData.destory();
		}
		this.skinSlotDisplayDataArr.length=0;
		if (this.url){
			delete Templet.TEMPLET_DICTIONARY[this.url];
		}
		laya.resource.Resource.prototype.destroy.call(this);
	}

	/**
	*通过索引得动画名称
	*@param index
	*@return
	*/
	__proto.getAniNameByIndex=function(index){
		var tAni=this.getAnimation(index);
		if (tAni)return tAni.name;
		return null;
	}

	__getset(0,__proto,'rate',function(){
		return this._rate;
		},function(v){
		this._rate=v;
	});

	Templet.LAYA_ANIMATION_VISION="LAYAANIMATION:1.6.0";
	Templet.TEMPLET_DICTIONARY=null;
	return Templet;
})(AnimationTemplet)



})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Browser=laya.utils.Browser,Color=laya.utils.Color,ColorFilterAction=laya.filters.ColorFilterAction;
	var ColorFilterActionGL=laya.filters.webgl.ColorFilterActionGL,Filter=laya.filters.Filter,FilterActionGL=laya.filters.webgl.FilterActionGL;
	var Matrix=laya.maths.Matrix,Rectangle=laya.maths.Rectangle,Render=laya.renders.Render,RenderContext=laya.renders.RenderContext;
	var RenderTarget2D=laya.webgl.resource.RenderTarget2D,RunDriver=laya.utils.RunDriver,ShaderDefines2D=laya.webgl.shader.d2.ShaderDefines2D;
	var Sprite=laya.display.Sprite,Texture=laya.resource.Texture,Value2D=laya.webgl.shader.d2.value.Value2D;
/**
*默认的FILTER,什么都不做
*@private
*/
//class laya.filters.FilterAction
var FilterAction=(function(){
	function FilterAction(){
		this.data=null;
	}

	__class(FilterAction,'laya.filters.FilterAction');
	var __proto=FilterAction.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterAction":true})
	__proto.apply=function(data){
		return null;
	}

	return FilterAction;
})()


/**
*@private
*/
//class laya.filters.WebGLFilter
var WebGLFilter=(function(){
	function WebGLFilter(){}
	__class(WebGLFilter,'laya.filters.WebGLFilter');
	WebGLFilter.enable=function(){
		if (WebGLFilter.isInit)return;
		WebGLFilter.isInit=true;
		if (!Render.isWebGL)return;
		RunDriver.createFilterAction=function (type){
			var action;
			switch (type){
				case /*laya.filters.Filter.COLOR*/0x20:
					action=new ColorFilterActionGL();
					break ;
				case /*laya.filters.Filter.BLUR*/0x10:
					action=new BlurFilterActionGL();
					break ;
				case /*laya.filters.Filter.GLOW*/0x08:
					action=new GlowFilterActionGL();
					break ;
				}
			return action;
		}
	}

	WebGLFilter.isInit=false;
	WebGLFilter.__init$=function(){
		BlurFilterActionGL;
		ColorFilterActionGL;
		GlowFilterActionGL;
		Render;
		RunDriver;{
			RunDriver.createFilterAction=function (type){
				var action;
				switch (type){
					case /*laya.filters.Filter.BLUR*/0x10:
						action=new FilterAction();
						break ;
					case /*laya.filters.Filter.GLOW*/0x08:
						action=new FilterAction();
						break ;
					case /*laya.filters.Filter.COLOR*/0x20:
						action=new ColorFilterAction();
						break ;
					}
				return action;
			}
		}
	}

	return WebGLFilter;
})()


/**
*模糊滤镜
*/
//class laya.filters.BlurFilter extends laya.filters.Filter
var BlurFilter=(function(_super){
	function BlurFilter(strength){
		/**模糊滤镜的强度(值越大，越不清晰 */
		this.strength=NaN;
		this.strength_sig2_2sig2_gauss1=[];
		BlurFilter.__super.call(this);
		(strength===void 0)&& (strength=4);
		if (Render.isWebGL)WebGLFilter.enable();
		this.strength=strength;
		this._action=RunDriver.createFilterAction(0x10);
		this._action.data=this;
	}

	__class(BlurFilter,'laya.filters.BlurFilter',_super);
	var __proto=BlurFilter.prototype;
	/**
	*@private 通知微端
	*/
	__proto.callNative=function(sp){
		sp.conchModel &&sp.conchModel.blurFilter&&sp.conchModel.blurFilter(this.strength);
	}

	/**
	*@private
	*当前滤镜对应的操作器
	*/
	__getset(0,__proto,'action',function(){
		return this._action;
	});

	/**
	*@private
	*当前滤镜的类型
	*/
	__getset(0,__proto,'type',function(){
		return 0x10;
	});

	return BlurFilter;
})(Filter)


/**
*发光滤镜(也可以当成阴影滤使用）
*/
//class laya.filters.GlowFilter extends laya.filters.Filter
var GlowFilter=(function(_super){
	function GlowFilter(color,blur,offX,offY){
		/**滤镜的颜色*/
		this._color=null;
		GlowFilter.__super.call(this);
		this._elements=new Float32Array(9);
		(blur===void 0)&& (blur=4);
		(offX===void 0)&& (offX=6);
		(offY===void 0)&& (offY=6);
		if (Render.isWebGL){
			WebGLFilter.enable();
		}
		this._color=new Color(color);
		this.blur=Math.min(blur,20);
		this.offX=offX;
		this.offY=offY;
		this._action=RunDriver.createFilterAction(0x08);
		this._action.data=this;
	}

	__class(GlowFilter,'laya.filters.GlowFilter',_super);
	var __proto=GlowFilter.prototype;
	/**@private */
	__proto.getColor=function(){
		return this._color._color;
	}

	/**
	*@private 通知微端
	*/
	__proto.callNative=function(sp){
		sp.conchModel &&sp.conchModel.glowFilter&&sp.conchModel.glowFilter(this._color.strColor,this._elements[4],this._elements[5],this._elements[6]);
	}

	/**
	*@private
	*滤镜类型
	*/
	__getset(0,__proto,'type',function(){
		return 0x08;
	});

	/**@private */
	__getset(0,__proto,'action',function(){
		return this._action;
	});

	/**@private */
	/**@private */
	__getset(0,__proto,'offY',function(){
		return this._elements[6];
		},function(value){
		this._elements[6]=value;
	});

	/**@private */
	/**@private */
	__getset(0,__proto,'offX',function(){
		return this._elements[5];
		},function(value){
		this._elements[5]=value;
	});

	/**@private */
	/**@private */
	__getset(0,__proto,'blur',function(){
		return this._elements[4];
		},function(value){
		this._elements[4]=value;
	});

	return GlowFilter;
})(Filter)


/**
*@private
*/
//class laya.filters.webgl.BlurFilterActionGL extends laya.filters.webgl.FilterActionGL
var BlurFilterActionGL=(function(_super){
	function BlurFilterActionGL(){
		this.data=null;
		BlurFilterActionGL.__super.call(this);
	}

	__class(BlurFilterActionGL,'laya.filters.webgl.BlurFilterActionGL',_super);
	var __proto=BlurFilterActionGL.prototype;
	__proto.setValueMix=function(shader){
		shader.defines.add(this.data.type);
		var o=shader;
	}

	__proto.apply3d=function(scope,sprite,context,x,y){
		var b=scope.getValue("bounds");
		var shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
		shaderValue.setFilters([this.data]);
		var tMatrix=Matrix.EMPTY;
		tMatrix.identity();
		context.ctx.drawTarget(scope,0,0,b.width,b.height,Matrix.EMPTY,"src",shaderValue);
		shaderValue.setFilters(null);
	}

	__proto.setValue=function(shader){
		shader.strength=this.data.strength;
		var sigma=this.data.strength/3.0;
		var sigma2=sigma*sigma;
		this.data.strength_sig2_2sig2_gauss1[0]=this.data.strength;
		this.data.strength_sig2_2sig2_gauss1[1]=sigma2;
		this.data.strength_sig2_2sig2_gauss1[2]=2.0*sigma2;
		this.data.strength_sig2_2sig2_gauss1[3]=1.0/(2.0*Math.PI*sigma2);
		shader.strength_sig2_2sig2_gauss1=this.data.strength_sig2_2sig2_gauss1;
	}

	__getset(0,__proto,'typeMix',function(){return /*laya.filters.Filter.BLUR*/0x10;});
	return BlurFilterActionGL;
})(FilterActionGL)


/**
*@private
*/
//class laya.filters.webgl.GlowFilterActionGL extends laya.filters.webgl.FilterActionGL
var GlowFilterActionGL=(function(_super){
	function GlowFilterActionGL(){
		this.data=null;
		this._initKey=false;
		this._textureWidth=0;
		this._textureHeight=0;
		GlowFilterActionGL.__super.call(this);
	}

	__class(GlowFilterActionGL,'laya.filters.webgl.GlowFilterActionGL',_super);
	var __proto=GlowFilterActionGL.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
	__proto.setValueMix=function(shader){}
	__proto.apply3d=function(scope,sprite,context,x,y){
		var b=scope.getValue("bounds");
		scope.addValue("color",this.data.getColor());
		var w=b.width,h=b.height;
		this._textureWidth=w;
		this._textureHeight=h;
		var shaderValue;
		var mat=Matrix.TEMP;
		mat.identity();
		shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
		shaderValue.setFilters([this.data]);
		context.ctx.drawTarget(scope,0,0,this._textureWidth,this._textureHeight,mat,"src",shaderValue,null);
		shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
		context.ctx.drawTarget(scope,0,0,this._textureWidth,this._textureHeight,mat,"src",shaderValue);
		return null;
	}

	__proto.setSpriteWH=function(sprite){
		this._textureWidth=sprite.width;
		this._textureHeight=sprite.height;
	}

	__proto.setValue=function(shader){
		shader.u_offsetX=this.data.offX;
		shader.u_offsetY=-this.data.offY;
		shader.u_strength=1.0;
		shader.u_blurX=this.data.blur;
		shader.u_blurY=this.data.blur;
		shader.u_textW=this._textureWidth;
		shader.u_textH=this._textureHeight;
		shader.u_color=this.data.getColor();
	}

	__getset(0,__proto,'typeMix',function(){return /*laya.filters.Filter.GLOW*/0x08;});
	GlowFilterActionGL.tmpTarget=function(scope,sprite,context,x,y){
		var b=scope.getValue("bounds");
		var out=scope.getValue("out");
		out.end();
		var tmpTarget=RenderTarget2D.create(b.width,b.height);
		tmpTarget.start();
		var color=scope.getValue("color");
		if (color){
			tmpTarget.clear(color[0],color[1],color[2],0);
		}
		scope.addValue("tmpTarget",tmpTarget);
	}

	GlowFilterActionGL.startOut=function(scope,sprite,context,x,y){
		var tmpTarget=scope.getValue("tmpTarget");
		tmpTarget.end();
		var out=scope.getValue("out");
		out.start();
		var color=scope.getValue("color");
		if (color){
			out.clear(color[0],color[1],color[2],0);
		}
	}

	GlowFilterActionGL.recycleTarget=function(scope,sprite,context,x,y){
		var src=scope.getValue("src");
		var tmpTarget=scope.getValue("tmpTarget");
		tmpTarget.recycle();
	}

	return GlowFilterActionGL;
})(FilterActionGL)


	Laya.__init([WebGLFilter]);
})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Browser=laya.utils.Browser,CSSStyle=laya.display.css.CSSStyle,ClassUtils=laya.utils.ClassUtils;
	var Event=laya.events.Event,HTMLChar=laya.utils.HTMLChar,Loader=laya.net.Loader,Node=laya.display.Node,Rectangle=laya.maths.Rectangle;
	var Render=laya.renders.Render,RenderContext=laya.renders.RenderContext,RenderSprite=laya.renders.RenderSprite;
	var Sprite=laya.display.Sprite,Stat=laya.utils.Stat,Text=laya.display.Text,Texture=laya.resource.Texture;
	var URL=laya.net.URL,Utils=laya.utils.Utils;
/**
*@private
*/
//class laya.html.utils.HTMLParse
var HTMLParse=(function(){
	function HTMLParse(){}
	__class(HTMLParse,'laya.html.utils.HTMLParse');
	HTMLParse.parse=function(ower,xmlString,url){
		xmlString=xmlString.replace(/<br>/g,"<br/>");
		xmlString="<root>"+xmlString+"</root>";
		xmlString=xmlString.replace(HTMLParse.spacePattern,HTMLParse.char255);
		var xml=Utils.parseXMLFromString(xmlString);
		HTMLParse._parseXML(ower,xml.childNodes[0].childNodes,url);
	}

	HTMLParse._parseXML=function(parent,xml,url,href){
		var i=0,n=0;
		if (xml.join || xml.item){
			for (i=0,n=xml.length;i < n;++i){
				HTMLParse._parseXML(parent,xml[i],url,href);
			}
			}else {
			var node;
			var nodeName;
			if (xml.nodeType==3){
				var txt;
				if ((parent instanceof laya.html.dom.HTMLDivElement )){
					if (xml.nodeName==null){
						xml.nodeName="#text";
					}
					nodeName=xml.nodeName.toLowerCase();
					txt=xml.textContent.replace(/^\s+|\s+$/g,'');
					if (txt.length > 0){
						node=ClassUtils.getInstance(nodeName);
						if (node){
							parent.addChild(node);
							((node).innerTEXT=txt.replace(HTMLParse.char255AndOneSpacePattern," "));
						}
					}
					}else {
					txt=xml.textContent.replace(/^\s+|\s+$/g,'');
					if (txt.length > 0){
						((parent).innerTEXT=txt.replace(HTMLParse.char255AndOneSpacePattern," "));
					}
				}
				return;
				}else {
				nodeName=xml.nodeName.toLowerCase();
				if (nodeName=="#comment")return;
				node=ClassUtils.getInstance(nodeName);
				if (node){
					node=parent.addChild(node);
					(node).URI=url;
					(node).href=href;
					var attributes=xml.attributes;
					if (attributes && attributes.length > 0){
						for (i=0,n=attributes.length;i < n;++i){
							var attribute=attributes[i];
							var attrName=attribute.nodeName;
							var value=attribute.value;
							node._setAttributes(attrName,value);
						}
					}
					HTMLParse._parseXML(node,xml.childNodes,url,(node).href);
					}else {
					HTMLParse._parseXML(parent,xml.childNodes,url,href);
				}
			}
		}
	}

	HTMLParse.char255=String.fromCharCode(255);
	HTMLParse.spacePattern=/&nbsp;|&#160;/g;
	HTMLParse.char255AndOneSpacePattern=new RegExp(String.fromCharCode(255)+"|(\\s+)","g");
	return HTMLParse;
})()


/**
*@private
*HTML的布局类
*对HTML的显示对象进行排版
*/
//class laya.html.utils.Layout
var Layout=(function(){
	function Layout(){}
	__class(Layout,'laya.html.utils.Layout');
	Layout.later=function(element){
		if (Layout._will==null){
			Layout._will=[];
			Laya.stage.frameLoop(1,null,function(){
				if (Layout._will.length < 1)
					return;
				for (var i=0;i < Layout._will.length;i++){
					laya.html.utils.Layout.layout(Layout._will[i]);
				}
				Layout._will.length=0;
			});
		}
		Layout._will.push(element);
	}

	Layout.layout=function(element){
		if (!element || !element._style)return null;
		if ((element._style._type & /*laya.display.css.CSSStyle.ADDLAYOUTED*/0x200)===0)
			return null;
		element.getStyle()._type &=~ /*laya.display.css.CSSStyle.ADDLAYOUTED*/0x200;
		var arr=Layout._multiLineLayout(element);
		if (Render.isConchApp&&element["layaoutCallNative"]){
			(element).layaoutCallNative();
		}
		return arr;
	}

	Layout._multiLineLayout=function(element){
		if (Text.RightToLeft)return Layout._multiLineLayout2(element);
		var elements=new Array;
		element._addChildsToLayout(elements);
		var i=0,n=elements.length,j=0;
		var style=element._getCSSStyle();
		var letterSpacing=style.letterSpacing;
		var leading=style.leading;
		var lineHeight=style.lineHeight;
		var widthAuto=style._widthAuto()|| !style.wordWrap;
		var width=widthAuto ? 999999 :element.width;
		var height=element.height;
		var maxWidth=0;
		var exWidth=style.italic ? style.fontSize / 3 :0;
		var align=style._getAlign();
		var valign=style._getValign();
		var endAdjust=valign!==0 || align!==0 || lineHeight !=0;
		var oneLayout;
		var x=0;
		var y=0;
		var w=0;
		var h=0;
		var tBottom=0;
		var lines=new Array;
		var curStyle;
		var curPadding;
		var curLine=lines[0]=new LayoutLine();
		var newLine=false,nextNewline=false;
		var htmlWord;
		var sprite;
		curLine.h=0;
		if (style.italic)
			width-=style.fontSize / 3;
		var tWordWidth=0;
		var tLineFirstKey=true;
		function addLine (){
			curLine.y=y;
			y+=curLine.h+leading;
			if (curLine.h==0)y+=lineHeight;
			curLine.mWidth=tWordWidth;
			tWordWidth=0;
			curLine=new LayoutLine();
			lines.push(curLine);
			curLine.h=0;
			x=0;
			tLineFirstKey=true;
			newLine=false;
		}
		for (i=0;i < n;i++){
			oneLayout=elements[i];
			if (oneLayout==null){
				if (!tLineFirstKey){
					x+=Layout.DIV_ELEMENT_PADDING;
				}
				curLine.wordStartIndex=curLine.elements.length;
				continue ;
			}
			tLineFirstKey=false;
			if ((oneLayout instanceof laya.html.dom.HTMLBrElement )){
				addLine();
				curLine.y=y;
				continue ;
				}else if (oneLayout._isChar()){
				htmlWord=oneLayout;
				if (!htmlWord.isWord){
					if (lines.length > 0 && (x+w)> width && curLine.wordStartIndex > 0){
						var tLineWord=0;
						tLineWord=curLine.elements.length-curLine.wordStartIndex+1;
						curLine.elements.length=curLine.wordStartIndex;
						i-=tLineWord;
						addLine();
						continue ;
					}
					newLine=false;
					tWordWidth+=htmlWord.width;
					}else {
					newLine=nextNewline || (htmlWord.char==='\n');
					curLine.wordStartIndex=curLine.elements.length;
				}
				w=htmlWord.width+letterSpacing;
				h=htmlWord.height;
				nextNewline=false;
				newLine=newLine || ((x+w)> width);
				newLine && addLine();
				curLine.minTextHeight=Math.min(curLine.minTextHeight,oneLayout.height);
				}else {
				curStyle=oneLayout._getCSSStyle();
				sprite=oneLayout;
				curPadding=curStyle.padding;
				curStyle._getCssFloat()===0 || (endAdjust=true);
				newLine=nextNewline || curStyle.lineElement;
				w=sprite.width *sprite._style._tf.scaleX+curPadding[1]+curPadding[3]+letterSpacing;
				h=sprite.height *sprite._style._tf.scaleY+curPadding[0]+curPadding[2];
				nextNewline=curStyle.lineElement;
				newLine=newLine || ((x+w)> width && curStyle.wordWrap);
				newLine && addLine();
			}
			curLine.elements.push(oneLayout);
			curLine.h=Math.max(curLine.h,h);
			oneLayout.x=x;
			oneLayout.y=y;
			x+=w;
			curLine.w=x-letterSpacing;
			curLine.y=y;
			maxWidth=Math.max(x+exWidth,maxWidth);
		}
		y=curLine.y+curLine.h;
		if (endAdjust){
			var tY=0;
			var tWidth=width;
			if (widthAuto && element.width > 0){
				tWidth=element.width;
			}
			for (i=0,n=lines.length;i < n;i++){
				lines[i].updatePos(0,tWidth,i,tY,align,valign,lineHeight);
				tY+=Math.max(lineHeight,lines[i].h+leading);
			}
			y=tY;
		}
		widthAuto && (element.width=maxWidth);
		(y > element.height)&& (element.height=y);
		return [maxWidth,y];
	}

	Layout._multiLineLayout2=function(element){
		var elements=new Array;
		element._addChildsToLayout(elements);
		var i=0,n=elements.length,j=0;
		var style=element._getCSSStyle();
		var letterSpacing=style.letterSpacing;
		var leading=style.leading;
		var lineHeight=style.lineHeight;
		var widthAuto=style._widthAuto()|| !style.wordWrap;
		var width=widthAuto ? 999999 :element.width;
		var height=element.height;
		var maxWidth=0;
		var exWidth=style.italic ? style.fontSize / 3 :0;
		var align=2-style._getAlign();
		var valign=style._getValign();
		var endAdjust=valign!==0 || align!==0 || lineHeight !=0;
		var oneLayout;
		var x=0;
		var y=0;
		var w=0;
		var h=0;
		var tBottom=0;
		var lines=new Array;
		var curStyle;
		var curPadding;
		var curLine=lines[0]=new LayoutLine();
		var newLine=false,nextNewline=false;
		var htmlWord;
		var sprite;
		curLine.h=0;
		if (style.italic)
			width-=style.fontSize / 3;
		var tWordWidth=0;
		var tLineFirstKey=true;
		function addLine (){
			curLine.y=y;
			y+=curLine.h+leading;
			if (curLine.h==0)y+=lineHeight;
			curLine.mWidth=tWordWidth;
			tWordWidth=0;
			curLine=new LayoutLine();
			lines.push(curLine);
			curLine.h=0;
			x=0;
			tLineFirstKey=true;
			newLine=false;
		}
		for (i=0;i < n;i++){
			oneLayout=elements[i];
			if (oneLayout==null){
				if (!tLineFirstKey){
					x+=Layout.DIV_ELEMENT_PADDING;
				}
				curLine.wordStartIndex=curLine.elements.length;
				continue ;
			}
			tLineFirstKey=false;
			if ((oneLayout instanceof laya.html.dom.HTMLBrElement )){
				addLine();
				curLine.y=y;
				continue ;
				}else if (oneLayout._isChar()){
				htmlWord=oneLayout;
				if (!htmlWord.isWord){
					if (lines.length > 0 && (x+w)> width && curLine.wordStartIndex > 0){
						var tLineWord=0;
						tLineWord=curLine.elements.length-curLine.wordStartIndex+1;
						curLine.elements.length=curLine.wordStartIndex;
						i-=tLineWord;
						addLine();
						continue ;
					}
					newLine=false;
					tWordWidth+=htmlWord.width;
					}else {
					newLine=nextNewline || (htmlWord.char==='\n');
					curLine.wordStartIndex=curLine.elements.length;
				}
				w=htmlWord.width+letterSpacing;
				h=htmlWord.height;
				nextNewline=false;
				newLine=newLine || ((x+w)> width);
				newLine && addLine();
				curLine.minTextHeight=Math.min(curLine.minTextHeight,oneLayout.height);
				}else {
				curStyle=oneLayout._getCSSStyle();
				sprite=oneLayout;
				curPadding=curStyle.padding;
				curStyle._getCssFloat()===0 || (endAdjust=true);
				newLine=nextNewline || curStyle.lineElement;
				w=sprite.width *sprite._style._tf.scaleX+curPadding[1]+curPadding[3]+letterSpacing;
				h=sprite.height *sprite._style._tf.scaleY+curPadding[0]+curPadding[2];
				nextNewline=curStyle.lineElement;
				newLine=newLine || ((x+w)> width && curStyle.wordWrap);
				newLine && addLine();
			}
			curLine.elements.push(oneLayout);
			curLine.h=Math.max(curLine.h,h);
			oneLayout.x=x;
			oneLayout.y=y;
			x+=w;
			curLine.w=x-letterSpacing;
			curLine.y=y;
			maxWidth=Math.max(x+exWidth,maxWidth);
		}
		y=curLine.y+curLine.h;
		if (endAdjust){
			var tY=0;
			var tWidth=width;
			for (i=0,n=lines.length;i < n;i++){
				lines[i].updatePos(0,tWidth,i,tY,align,valign,lineHeight);
				tY+=Math.max(lineHeight,lines[i].h+leading);
			}
			y=tY;
		}
		widthAuto && (element.width=maxWidth);
		(y > element.height)&& (element.height=y);
		for (i=0,n=lines.length;i < n;i++){
			lines[i].revertOrder(width);
		}
		return [maxWidth,y];
	}

	Layout._will=null;
	Layout.DIV_ELEMENT_PADDING=0;
	return Layout;
})()


/**
*@private
*/
//class laya.html.utils.LayoutLine
var LayoutLine=(function(){
	function LayoutLine(){
		this.x=0;
		this.y=0;
		this.w=0;
		this.h=0;
		this.wordStartIndex=0;
		this.minTextHeight=99999;
		this.mWidth=0;
		this.elements=new Array;
	}

	__class(LayoutLine,'laya.html.utils.LayoutLine');
	var __proto=LayoutLine.prototype;
	/**
	*底对齐（默认）
	*@param left
	*@param width
	*@param dy
	*@param align 水平
	*@param valign 垂直
	*@param lineHeight 行高
	*/
	__proto.updatePos=function(left,width,lineNum,dy,align,valign,lineHeight){
		var w=0;
		var one
		if (this.elements.length > 0){
			one=this.elements[this.elements.length-1];
			w=one.x+one.width-this.elements[0].x;
		};
		var dx=0,ddy=NaN;
		align===/*laya.display.css.CSSStyle.ALIGN_CENTER*/1 && (dx=(width-w)/ 2);
		align===/*laya.display.css.CSSStyle.ALIGN_RIGHT*/2 && (dx=(width-w));
		lineHeight===0 || valign !=0 || (valign=1);
		for (var i=0,n=this.elements.length;i < n;i++){
			one=this.elements[i];
			var tCSSStyle=one._getCSSStyle();
			dx!==0 && (one.x+=dx);
			switch (tCSSStyle._getValign()){
				case 0:
					one.y=dy;
					break ;
				case /*laya.display.css.CSSStyle.VALIGN_MIDDLE*/1:;
					var tMinTextHeight=0;
					if (this.minTextHeight !=99999){
						tMinTextHeight=this.minTextHeight;
					};
					var tBottomLineY=(tMinTextHeight+lineHeight)/ 2;
					tBottomLineY=Math.max(tBottomLineY,this.h);
					if ((one instanceof laya.html.dom.HTMLImageElement )){
						ddy=dy+tBottomLineY-one.height;
						}else {
						ddy=dy+tBottomLineY-one.height;
					}
					one.y=ddy;
					break ;
				case /*laya.display.css.CSSStyle.VALIGN_BOTTOM*/2:
					one.y=dy+(lineHeight-one.height);
					break ;
				}
		}
	}

	/**
	*布局反向,目前用于将ltr模式布局转为rtl模式布局
	*/
	__proto.revertOrder=function(width){
		var one
		if (this.elements.length > 0){
			var i=0,len=0;
			len=this.elements.length;
			for (i=0;i < len;i++){
				one=this.elements[i];
				one.x=width-one.x-one.width;
			}
		}
	}

	return LayoutLine;
})()


/**
*@private
*/
//class laya.html.dom.HTMLElement extends laya.display.Sprite
var HTMLElement=(function(_super){
	function HTMLElement(){
		this.URI=null;
		this._href=null;
		HTMLElement.__super.call(this);
		this._text=HTMLElement._EMPTYTEXT;
		this.setStyle(new CSSStyle(this));
		this._getCSSStyle().valign="middle";
		this.mouseEnabled=true;
	}

	__class(HTMLElement,'laya.html.dom.HTMLElement',_super);
	var __proto=HTMLElement.prototype;
	/**
	*@private
	*/
	__proto.layaoutCallNative=function(){
		var n=0;
		if (this._childs &&(n=this._childs.length)> 0){
			for (var i=0;i < n;i++){
				this._childs[i].layaoutCallNative && this._childs[i].layaoutCallNative();
			}
		};
		var word=this._getWords();
		word ? laya.html.dom.HTMLElement.fillWords(this,word,0,0,this.style.font,this.style.color,this.style.underLine):this.graphics.clear();
	}

	__proto.appendChild=function(c){
		return this.addChild(c);
	}

	/**
	*rtl模式的getWords函數
	*/
	__proto._getWords2=function(){
		var txt=this._text.text;
		if (!txt || txt.length===0)
			return null;
		var i=0,n=0;
		var realWords;
		var drawWords;
		if (!this._text.drawWords){
			realWords=txt.split(" ");
			n=realWords.length-1;
			drawWords=[];
			for (i=0;i < n;i++){
				drawWords.push(realWords[i]," ")
			}
			if(n>=0)
				drawWords.push(realWords[n]);
			this._text.drawWords=drawWords;
			}else{
			drawWords=this._text.drawWords;
		};
		var words=this._text.words;
		if (words && words.length===drawWords.length)
			return words;
		words===null && (this._text.words=words=[]);
		words.length=drawWords.length;
		var size;
		var style=this.style;
		var fontStr=style.font;
		for (i=0,n=drawWords.length;i < n;i++){
			size=Utils.measureText(drawWords[i],fontStr);
			var tHTMLChar=words[i]=new HTMLChar(drawWords[i],size.width,size.height || style.fontSize,style);
			if (tHTMLChar.char.length > 1){
				tHTMLChar.charNum=tHTMLChar.char;
			}
			if (this.href){
				var tSprite=new Sprite();
				this.addChild(tSprite);
				tHTMLChar.setSprite(tSprite);
			}
		}
		return words;
	}

	__proto._getWords=function(){
		if (!Text.CharacterCache)return this._getWords2();
		var txt=this._text.text;
		if (!txt || txt.length===0)
			return null;
		var words=this._text.words;
		if (words && words.length===txt.length)
			return words;
		words===null && (this._text.words=words=[]);
		words.length=txt.length;
		var size;
		var style=this.style;
		var fontStr=style.font;
		var startX=0;
		for (var i=0,n=txt.length;i < n;i++){
			size=Utils.measureText(txt.charAt(i),fontStr);
			var tHTMLChar=words[i]=new HTMLChar(txt.charAt(i),size.width,size.height||style.fontSize,style);
			if (this.href){
				var tSprite=new Sprite();
				this.addChild(tSprite);
				tHTMLChar.setSprite(tSprite);
			}
		}
		return words;
	}

	__proto.showLinkSprite=function(){
		var words=this._text.words;
		if (words){
			var tLinkSpriteList=[];
			var tSprite;
			var tHtmlChar;
			for (var i=0;i < words.length;i++){
				tHtmlChar=words[i];
				tSprite=new Sprite();
				tSprite.graphics.drawRect(0,0,tHtmlChar.width,tHtmlChar.height,"#ff0000");
				tSprite.width=tHtmlChar.width;
				tSprite.height=tHtmlChar.height;
				this.addChild(tSprite);
				tLinkSpriteList.push(tSprite);
			}
		}
	}

	__proto._layoutLater=function(){
		var style=this.style;
		if ((style._type & /*laya.display.css.CSSStyle.ADDLAYOUTED*/0x200))return;
		if (style.widthed(this)&& (this._childs.length>0 || this._getWords()!=null)&& style.block){
			Layout.later(this);
			style._type |=/*laya.display.css.CSSStyle.ADDLAYOUTED*/0x200;
		}
		else{
			this.parent && (this.parent)._layoutLater();
		}
	}

	__proto._setAttributes=function(name,value){
		switch (name){
			case 'style':
				this.style.cssText(value);
				return;
			case 'class':
				this.className=value;
				return;
			}
		_super.prototype._setAttributes.call(this,name,value);
	}

	__proto.updateHref=function(){
		if (this._href !=null){
			var words=this._getWords();
			if (words){
				var tHTMLChar;
				var tSprite;
				for (var i=0;i < words.length;i++){
					tHTMLChar=words[i];
					tSprite=tHTMLChar.getSprite();
					if (tSprite){
						tSprite.size(tHTMLChar.width,tHTMLChar.height);
						tSprite.on(/*laya.events.Event.CLICK*/"click",this,this.onLinkHandler);
					}
				}
			}
		}
	}

	__proto.onLinkHandler=function(e){
		switch(e.type){
			case /*laya.events.Event.CLICK*/"click":;
				var target=this;
				while (target){
					target.event(/*laya.events.Event.LINK*/"link",[this.href]);
					target=target.parent;
				}
				break ;
			}
	}

	__proto.formatURL=function(url){
		if (!this.URI)return url;
		return URL.formatURL(url,this.URI ? this.URI.path :null);
	}

	__getset(0,__proto,'href',function(){
		return this._href;
		},function(url){
		this._href=url;
		if (url !=null){
			this._getCSSStyle().underLine=1;
			this.updateHref();
		}
	});

	__getset(0,__proto,'color',null,function(value){
		this.style.color=value;
	});

	__getset(0,__proto,'onClick',null,function(value){
		var fn;
		Laya._runScript("fn=function(event){"+value+";}");
		this.on(/*laya.events.Event.CLICK*/"click",this,fn);
	});

	__getset(0,__proto,'id',null,function(value){
		HTMLDocument.document.setElementById(value,this);
	});

	__getset(0,__proto,'innerTEXT',function(){
		return this._text.text;
		},function(value){
		this.text=value;
	});

	__getset(0,__proto,'style',function(){
		return this._style;
	});

	__getset(0,__proto,'text',function(){
		return this._text.text;
		},function(value){
		if (this._text==HTMLElement._EMPTYTEXT){
			this._text={text:value,words:null};
		}
		else{
			this._text.text=value;
			this._text.words && (this._text.words.length=0);
		}
		Render.isConchApp && this.layaoutCallNative();
		this._renderType |=/*laya.renders.RenderSprite.CHILDS*/0x800;
		this.repaint();
		this.updateHref();
	});

	__getset(0,__proto,'parent',_super.prototype._$get_parent,function(value){
		if ((value instanceof laya.html.dom.HTMLElement )){
			var p=value;
			this.URI || (this.URI=p.URI);
			this.style.inherit(p.style);
		}
		Laya.superSet(Sprite,this,'parent',value);
	});

	__getset(0,__proto,'className',null,function(value){
		this.style.attrs(HTMLDocument.document.styleSheets['.'+value]);
	});

	HTMLElement.fillWords=function(ele,words,x,y,font,color,underLine){
		ele.graphics.clear();
		for (var i=0,n=words.length;i < n;i++){
			var a=words[i];
			ele.graphics.fillText(a.char,a.x+x,a.y+y,font,color,'left',underLine);
		}
	}

	HTMLElement._EMPTYTEXT={text:null,words:null};
	return HTMLElement;
})(Sprite)


/**
*@private
*/
//class laya.html.dom.HTMLBrElement extends laya.html.dom.HTMLElement
var HTMLBrElement=(function(_super){
	function HTMLBrElement(){
		HTMLBrElement.__super.call(this);
		this.style.lineElement=true;
		this.style.block=true;
	}

	__class(HTMLBrElement,'laya.html.dom.HTMLBrElement',_super);
	return HTMLBrElement;
})(HTMLElement)


/**
*DIV标签
*/
//class laya.html.dom.HTMLDivElement extends laya.html.dom.HTMLElement
var HTMLDivElement=(function(_super){
	function HTMLDivElement(){
		/**实际内容的高 */
		this.contextHeight=NaN;
		/**实际内容的宽 */
		this.contextWidth=NaN;
		HTMLDivElement.__super.call(this);
		this.style.block=true;
		this.style.lineElement=true;
		this.style.width=200;
		this.style.height=200;
		HTMLStyleElement;
	}

	__class(HTMLDivElement,'laya.html.dom.HTMLDivElement',_super);
	var __proto=HTMLDivElement.prototype;
	/**
	*追加内容，解析并对显示对象排版
	*@param text
	*/
	__proto.appendHTML=function(text){
		HTMLParse.parse(this,text,this.URI);
		this.layout();
	}

	/**
	*@private
	*@param out
	*@return
	*/
	__proto._addChildsToLayout=function(out){
		var words=this._getWords();
		if (words==null && this._childs.length==0)return false;
		words && words.forEach(function(o){
			out.push(o);
		});
		var tFirstKey=true;
		for (var i=0,len=this._childs.length;i < len;i++){
			var o=this._childs[i];
			if (tFirstKey){
				tFirstKey=false;
				}else {
				out.push(null);
			}
			o._addToLayout(out)
		}
		return true;
	}

	/**
	*@private
	*@param out
	*/
	__proto._addToLayout=function(out){
		this.layout();
	}

	/**
	*@private
	*对显示内容进行排版
	*/
	__proto.layout=function(){
		if (!this.style)return;
		this.style._type |=/*laya.display.css.CSSStyle.ADDLAYOUTED*/0x200;
		var tArray=Layout.layout(this);
		if (tArray){
			if (!this._$P.mHtmlBounds)this._set$P("mHtmlBounds",new Rectangle());
			var tRectangle=this._$P.mHtmlBounds;
			tRectangle.x=tRectangle.y=0;
			tRectangle.width=this.contextWidth=tArray[0];
			tRectangle.height=this.contextHeight=tArray[1];
			this.setBounds(tRectangle);
		}
	}

	/**
	*获取对象的高
	*/
	__getset(0,__proto,'height',function(){
		if (this._height)return this._height;
		return this.contextHeight;
	},_super.prototype._$set_height);

	/**
	*设置标签内容
	*/
	__getset(0,__proto,'innerHTML',null,function(text){
		this.destroyChildren();
		this.appendHTML(text);
	});

	/**
	*获取对象的宽
	*/
	__getset(0,__proto,'width',function(){
		if (this._width)return this._width;
		return this.contextWidth;
		},function(value){
		var changed=false;
		if (value===0){
			changed=value !=this._width;
			}else{
			changed=value !=this.width;
		}
		Laya.superSet(HTMLElement,this,'width',value);
		if(changed)
			this.layout();
	});

	return HTMLDivElement;
})(HTMLElement)


/**
*@private
*/
//class laya.html.dom.HTMLDocument extends laya.html.dom.HTMLElement
var HTMLDocument=(function(_super){
	function HTMLDocument(){
		this.all=new Array;
		this.styleSheets=CSSStyle.styleSheets;
		HTMLDocument.__super.call(this);
	}

	__class(HTMLDocument,'laya.html.dom.HTMLDocument',_super);
	var __proto=HTMLDocument.prototype;
	__proto.getElementById=function(id){
		return this.all[id];
	}

	__proto.setElementById=function(id,e){
		this.all[id]=e;
	}

	__static(HTMLDocument,
	['document',function(){return this.document=new HTMLDocument();}
	]);
	return HTMLDocument;
})(HTMLElement)


/**
*@private
*/
//class laya.html.dom.HTMLImageElement extends laya.html.dom.HTMLElement
var HTMLImageElement=(function(_super){
	function HTMLImageElement(){
		this._tex=null;
		this._url=null;
		this._renderArgs=[];
		HTMLImageElement.__super.call(this);
		this.style.block=true;
	}

	__class(HTMLImageElement,'laya.html.dom.HTMLImageElement',_super);
	var __proto=HTMLImageElement.prototype;
	__proto._addToLayout=function(out){
		!this._style.absolute && out.push(this);
	}

	__proto.render=function(context,x,y){
		if (!this._tex || !this._tex.loaded || !this._tex.loaded || this._width < 1 || this._height < 1)return;
		Stat.spriteCount++;
		this._renderArgs[0]=this._tex;
		this._renderArgs[1]=this.x;
		this._renderArgs[2]=this.y;
		this._renderArgs[3]=this.width || this._tex.width;
		this._renderArgs[4]=this.height || this._tex.height;
		context.ctx.drawTexture2(x,y,this.style.translateX,this.style.translateY,this.transform,this.style.alpha,this.style.blendMode,this._renderArgs);
	}

	/**
	*@private
	*/
	__proto.layaoutCallNative=function(){
		var n=0;
		if (this._childs &&(n=this._childs.length)> 0){
			for (var i=0;i < n;i++){
				this._childs[i].layaoutCallNative && this._childs[i].layaoutCallNative();
			}
		}
	}

	__getset(0,__proto,'src',null,function(url){
		var _$this=this;
		url=this.formatURL(url);
		if (this._url==url)return;
		this._url=url;
		var tex=this._tex=Loader.getRes(url);
		if (!tex){
			this._tex=tex=new Texture();
			tex.load(url);
			Loader.cacheRes(url,tex);
		}
		function onloaded (){
			var style=_$this._style;
			var w=style.widthed(_$this)?-1:_$this._tex.width;
			var h=style.heighted(_$this)?-1:_$this._tex.height;
			if (!style.widthed(_$this)&& _$this._width !=_$this._tex.width){
				_$this.width=_$this._tex.width;
				_$this.parent && (_$this.parent)._layoutLater();
			}
			if (!style.heighted(_$this)&& _$this._height !=_$this._tex.height){
				_$this.height=_$this._tex.height;
				_$this.parent && (_$this.parent)._layoutLater();
			}
			if (Render.isConchApp){
				_$this._renderArgs[0]=_$this._tex;
				_$this._renderArgs[1]=_$this.x;
				_$this._renderArgs[2]=_$this.y;
				_$this._renderArgs[3]=_$this.width || _$this._tex.width;
				_$this._renderArgs[4]=_$this.height || _$this._tex.height;
				_$this.graphics.drawTexture(_$this._tex,0,0,_$this._renderArgs[3],_$this._renderArgs[4]);
			}
			_$this.repaint();
			_$this.parentRepaint();
		}
		tex.loaded?onloaded():tex.on(/*laya.events.Event.LOADED*/"loaded",null,onloaded);
	});

	return HTMLImageElement;
})(HTMLElement)


/**
*@private
*/
//class laya.html.dom.HTMLLinkElement extends laya.html.dom.HTMLElement
var HTMLLinkElement=(function(_super){
	function HTMLLinkElement(){
		this.type=null;
		HTMLLinkElement.__super.call(this);
		this.visible=false;
	}

	__class(HTMLLinkElement,'laya.html.dom.HTMLLinkElement',_super);
	var __proto=HTMLLinkElement.prototype;
	__proto._onload=function(data){
		switch(this.type){
			case 'text/css':
				CSSStyle.parseCSS(data,this.URI);
				break ;
			}
	}

	__getset(0,__proto,'href',_super.prototype._$get_href,function(url){
		var _$this=this;
		url=this.formatURL(url);
		this.URI=new URL(url);
		var l=new Loader();
		l.once(/*laya.events.Event.COMPLETE*/"complete",null,function(data){
			_$this._onload(data);
		});
		l.load(url,/*laya.net.Loader.TEXT*/"text");
	});

	HTMLLinkElement._cuttingStyle=new RegExp("((@keyframes[\\s\\t]+|)(.+))[\\t\\n\\r\\\s]*{","g");
	return HTMLLinkElement;
})(HTMLElement)


/**
*@private
*/
//class laya.html.dom.HTMLStyleElement extends laya.html.dom.HTMLElement
var HTMLStyleElement=(function(_super){
	function HTMLStyleElement(){
		HTMLStyleElement.__super.call(this);
		this.visible=false;
	}

	__class(HTMLStyleElement,'laya.html.dom.HTMLStyleElement',_super);
	var __proto=HTMLStyleElement.prototype;
	/**
	*解析样式
	*/
	__getset(0,__proto,'text',_super.prototype._$get_text,function(value){
		CSSStyle.parseCSS(value,null);
	});

	return HTMLStyleElement;
})(HTMLElement)


/**
*iframe标签类，目前用于加载外并解析数据
*/
//class laya.html.dom.HTMLIframeElement extends laya.html.dom.HTMLDivElement
var HTMLIframeElement=(function(_super){
	function HTMLIframeElement(){
		HTMLIframeElement.__super.call(this);
		this._getCSSStyle().valign="middle";
	}

	__class(HTMLIframeElement,'laya.html.dom.HTMLIframeElement',_super);
	var __proto=HTMLIframeElement.prototype;
	/**
	*加载html文件，并解析数据
	*@param url
	*/
	__getset(0,__proto,'href',_super.prototype._$get_href,function(url){
		var _$this=this;
		url=this.formatURL(url);
		var l=new Loader();
		l.once(/*laya.events.Event.COMPLETE*/"complete",null,function(data){
			var pre=_$this.URI;
			_$this.URI=new URL(url);
			_$this.innerHTML=data;
			!pre || (_$this.URI=pre);
		});
		l.load(url,/*laya.net.Loader.TEXT*/"text");
	});

	return HTMLIframeElement;
})(HTMLDivElement)



})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var BlendMode=laya.webgl.canvas.BlendMode,Event=laya.events.Event,HTMLCanvas=laya.resource.HTMLCanvas;
	var Handler=laya.utils.Handler,IndexBuffer2D=laya.webgl.utils.IndexBuffer2D,Loader=laya.net.Loader,MathUtil=laya.maths.MathUtil;
	var Matrix=laya.maths.Matrix,Render=laya.renders.Render,RenderContext=laya.renders.RenderContext,RenderSprite=laya.renders.RenderSprite;
	var Shader=laya.webgl.shader.Shader,Sprite=laya.display.Sprite,Stat=laya.utils.Stat,Texture=laya.resource.Texture;
	var Utils=laya.utils.Utils,Value2D=laya.webgl.shader.d2.value.Value2D,VertexBuffer2D=laya.webgl.utils.VertexBuffer2D;
	var WebGL=laya.webgl.WebGL,WebGLContext=laya.webgl.WebGLContext;
/**
*<code>EmitterBase</code> 类是粒子发射器类
*/
//class laya.particle.emitter.EmitterBase
var EmitterBase=(function(){
	function EmitterBase(){
		/**
		*积累的帧时间
		*/
		this._frameTime=0;
		/**
		*粒子发射速率
		*/
		this._emissionRate=60;
		/**
		*当前剩余发射时间
		*/
		this._emissionTime=0;
		/**
		*发射粒子最小时间间隔
		*/
		this.minEmissionTime=1 / 60;
		/**@private */
		this._particleTemplate=null;
	}

	__class(EmitterBase,'laya.particle.emitter.EmitterBase');
	var __proto=EmitterBase.prototype;
	/**
	*开始发射粒子
	*@param duration 发射持续的时间(秒)
	*/
	__proto.start=function(duration){
		(duration===void 0)&& (duration=2147483647);
		if (this._emissionRate !=0)
			this._emissionTime=duration;
	}

	/**
	*停止发射粒子
	*@param clearParticles 是否清理当前的粒子
	*/
	__proto.stop=function(){
		this._emissionTime=0;
	}

	/**
	*清理当前的活跃粒子
	*@param clearTexture 是否清理贴图数据,若清除贴图数据将无法再播放
	*/
	__proto.clear=function(){
		this._emissionTime=0;
	}

	/**
	*发射一个粒子
	*
	*/
	__proto.emit=function(){}
	/**
	*时钟前进
	*@param passedTime 前进时间
	*
	*/
	__proto.advanceTime=function(passedTime){
		(passedTime===void 0)&& (passedTime=1);
		this._emissionTime-=passedTime;
		if (this._emissionTime < 0)return;
		this._frameTime+=passedTime;
		if (this._frameTime < this.minEmissionTime)return;
		while (this._frameTime > this.minEmissionTime){
			this._frameTime-=this.minEmissionTime;
			this.emit();
		}
	}

	/**
	*设置粒子粒子模板
	*@param particleTemplate 粒子模板
	*
	*/
	__getset(0,__proto,'particleTemplate',null,function(particleTemplate){
		this._particleTemplate=particleTemplate;
	});

	/**
	*设置粒子发射速率
	*@param emissionRate 粒子发射速率 (个/秒)
	*/
	/**
	*获取粒子发射速率
	*@return 发射速率 粒子发射速率 (个/秒)
	*/
	__getset(0,__proto,'emissionRate',function(){
		return this._emissionRate;
		},function(_emissionRate){
		if (_emissionRate <=0)return;
		this._emissionRate=_emissionRate;
		(_emissionRate > 0)&& (this.minEmissionTime=1 / _emissionRate);
	});

	return EmitterBase;
})()


/**
*@private
*/
//class laya.particle.ParticleData
var ParticleData=(function(){
	function ParticleData(){
		this.position=null;
		this.velocity=null;
		this.startColor=null;
		this.endColor=null;
		this.sizeRotation=null;
		this.radius=null;
		this.radian=null;
		this.durationAddScale=NaN;
		this.time=NaN;
	}

	__class(ParticleData,'laya.particle.ParticleData');
	ParticleData.Create=function(settings,position,velocity,time){
		var particleData=new ParticleData();
		particleData.position=position;
		MathUtil.scaleVector3(velocity,settings.emitterVelocitySensitivity,ParticleData._tempVelocity);
		var horizontalVelocity=MathUtil.lerp(settings.minHorizontalVelocity,settings.maxHorizontalVelocity,Math.random());
		var horizontalAngle=Math.random()*Math.PI *2;
		ParticleData._tempVelocity[0]+=horizontalVelocity *Math.cos(horizontalAngle);
		ParticleData._tempVelocity[2]+=horizontalVelocity *Math.sin(horizontalAngle);
		ParticleData._tempVelocity[1]+=MathUtil.lerp(settings.minVerticalVelocity,settings.maxVerticalVelocity,Math.random());
		particleData.velocity=ParticleData._tempVelocity;
		particleData.startColor=ParticleData._tempStartColor;
		particleData.endColor=ParticleData._tempEndColor;
		var i=0;
		if (settings.disableColor){
			for (i=0;i < 4;i++){
				particleData.startColor[i]=1;
				particleData.endColor[i]=1;
			}
		}
		else{
			if (settings.colorComponentInter){
				for (i=0;i < 4;i++){
					particleData.startColor[i]=MathUtil.lerp(settings.minStartColor[i],settings.maxStartColor[i],Math.random());
					particleData.endColor[i]=MathUtil.lerp(settings.minEndColor[i],settings.maxEndColor[i],Math.random());
				}
				}else {
				MathUtil.lerpVector4(settings.minStartColor,settings.maxStartColor,Math.random(),particleData.startColor);
				MathUtil.lerpVector4(settings.minEndColor,settings.maxEndColor,Math.random(),particleData.endColor);
			}
		}
		particleData.sizeRotation=ParticleData._tempSizeRotation;
		var sizeRandom=Math.random();
		particleData.sizeRotation[0]=MathUtil.lerp(settings.minStartSize,settings.maxStartSize,sizeRandom);
		particleData.sizeRotation[1]=MathUtil.lerp(settings.minEndSize,settings.maxEndSize,sizeRandom);
		particleData.sizeRotation[2]=MathUtil.lerp(settings.minRotateSpeed,settings.maxRotateSpeed,Math.random());
		particleData.radius=ParticleData._tempRadius;
		var radiusRandom=Math.random();
		particleData.radius[0]=MathUtil.lerp(settings.minStartRadius,settings.maxStartRadius,radiusRandom);
		particleData.radius[1]=MathUtil.lerp(settings.minEndRadius,settings.maxEndRadius,radiusRandom);
		particleData.radian=ParticleData._tempRadian;
		particleData.radian[0]=MathUtil.lerp(settings.minHorizontalStartRadian,settings.maxHorizontalStartRadian,Math.random());
		particleData.radian[1]=MathUtil.lerp(settings.minVerticalStartRadian,settings.maxVerticalStartRadian,Math.random());
		var useEndRadian=settings.useEndRadian;
		particleData.radian[2]=useEndRadian?MathUtil.lerp(settings.minHorizontalEndRadian,settings.maxHorizontalEndRadian,Math.random()):particleData.radian[0];
		particleData.radian[3]=useEndRadian?MathUtil.lerp(settings.minVerticalEndRadian,settings.maxVerticalEndRadian,Math.random()):particleData.radian[1];
		particleData.durationAddScale=settings.ageAddScale *Math.random();
		particleData.time=time;
		return particleData;
	}

	__static(ParticleData,
	['_tempVelocity',function(){return this._tempVelocity=new Float32Array(3);},'_tempStartColor',function(){return this._tempStartColor=new Float32Array(4);},'_tempEndColor',function(){return this._tempEndColor=new Float32Array(4);},'_tempSizeRotation',function(){return this._tempSizeRotation=new Float32Array(3);},'_tempRadius',function(){return this._tempRadius=new Float32Array(2);},'_tempRadian',function(){return this._tempRadian=new Float32Array(4);}
	]);
	return ParticleData;
})()


/**
*@private
*/
//class laya.particle.ParticleEmitter
var ParticleEmitter=(function(){
	function ParticleEmitter(templet,particlesPerSecond,initialPosition){
		this._templet=null;
		this._timeBetweenParticles=NaN;
		this._previousPosition=null;
		this._timeLeftOver=0;
		this._tempVelocity=new Float32Array([0,0,0]);
		this._tempPosition=new Float32Array([0,0,0]);
		this._templet=templet;
		this._timeBetweenParticles=1.0 / particlesPerSecond;
		this._previousPosition=initialPosition;
	}

	__class(ParticleEmitter,'laya.particle.ParticleEmitter');
	var __proto=ParticleEmitter.prototype;
	__proto.update=function(elapsedTime,newPosition){
		elapsedTime=elapsedTime / 1000;
		if (elapsedTime > 0){
			MathUtil.subtractVector3(newPosition,this._previousPosition,this._tempVelocity);
			MathUtil.scaleVector3(this._tempVelocity,1 / elapsedTime,this._tempVelocity);
			var timeToSpend=this._timeLeftOver+elapsedTime;
			var currentTime=-this._timeLeftOver;
			while (timeToSpend > this._timeBetweenParticles){
				currentTime+=this._timeBetweenParticles;
				timeToSpend-=this._timeBetweenParticles;
				MathUtil.lerpVector3(this._previousPosition,newPosition,currentTime / elapsedTime,this._tempPosition);
				this._templet.addParticleArray(this._tempPosition,this._tempVelocity);
			}
			this._timeLeftOver=timeToSpend;
		}
		this._previousPosition[0]=newPosition[0];
		this._previousPosition[1]=newPosition[1];
		this._previousPosition[2]=newPosition[2];
	}

	return ParticleEmitter;
})()


/**
*<code>ParticleSettings</code> 类是粒子配置数据类
*/
//class laya.particle.ParticleSetting
var ParticleSetting=(function(){
	function ParticleSetting(){
		/**贴图*/
		this.textureName=null;
		/**贴图个数,默认为1可不设置*/
		this.textureCount=1;
		/**最大同屏粒子个数，最大饱和粒子数为maxPartices-1。注意:WebGL模式下释放粒子时间为最大声明周期，可能会出现释放延迟,实际看到的同屏粒子数小于该数值，如连续喷发出现中断，请调大该数值。*/
		this.maxPartices=100;
		/**粒子持续时间(单位:秒）*/
		this.duration=1;
		/**如果大于0，某些粒子的持续时间会小于其他粒子,并具有随机性(单位:无）*/
		this.ageAddScale=0;
		/**粒子受发射器速度的敏感度（需在自定义发射器中编码设置）*/
		this.emitterVelocitySensitivity=1;
		/**最小开始尺寸（单位：2D像素、3D坐标）*/
		this.minStartSize=100;
		/**最大开始尺寸（单位：2D像素、3D坐标）*/
		this.maxStartSize=100;
		/**最小结束尺寸（单位：2D像素、3D坐标）*/
		this.minEndSize=100;
		/**最大结束尺寸（单位：2D像素、3D坐标）*/
		this.maxEndSize=100;
		/**最小水平速度（单位：2D像素、3D坐标）*/
		this.minHorizontalVelocity=0;
		/**最大水平速度（单位：2D像素、3D坐标）*/
		this.maxHorizontalVelocity=0;
		/**最小垂直速度（单位：2D像素、3D坐标）*/
		this.minVerticalVelocity=0;
		/**最大垂直速度（单位：2D像素、3D坐标）*/
		this.maxVerticalVelocity=0;
		/**等于1时粒子从出生到消亡保持一致的速度，等于0时粒子消亡时速度为0，大于1时粒子会保持加速（单位：无）*/
		this.endVelocity=1;
		/**最小旋转速度（单位：2D弧度/秒、3D弧度/秒）*/
		this.minRotateSpeed=0;
		/**最大旋转速度（单位：2D弧度/秒、3D弧度/秒）*/
		this.maxRotateSpeed=0;
		/**最小开始半径（单位：2D像素、3D坐标）*/
		this.minStartRadius=0;
		/**最大开始半径（单位：2D像素、3D坐标）*/
		this.maxStartRadius=0;
		/**最小结束半径（单位：2D像素、3D坐标）*/
		this.minEndRadius=0;
		/**最大结束半径（单位：2D像素、3D坐标）*/
		this.maxEndRadius=0;
		/**最小水平开始弧度（单位：2D弧度、3D弧度）*/
		this.minHorizontalStartRadian=0;
		/**最大水平开始弧度（单位：2D弧度、3D弧度）*/
		this.maxHorizontalStartRadian=0;
		/**最小垂直开始弧度（单位：2D弧度、3D弧度）*/
		this.minVerticalStartRadian=0;
		/**最大垂直开始弧度（单位：2D弧度、3D弧度）*/
		this.maxVerticalStartRadian=0;
		/**是否使用结束弧度,false为结束时与起始弧度保持一致,true为根据minHorizontalEndRadian、maxHorizontalEndRadian、minVerticalEndRadian、maxVerticalEndRadian计算结束弧度。*/
		this.useEndRadian=true;
		/**最小水平结束弧度（单位：2D弧度、3D弧度）*/
		this.minHorizontalEndRadian=0;
		/**最大水平结束弧度（单位：2D弧度、3D弧度）*/
		this.maxHorizontalEndRadian=0;
		/**最小垂直结束弧度（单位：2D弧度、3D弧度）*/
		this.minVerticalEndRadian=0;
		/**最大垂直结束弧度（单位：2D弧度、3D弧度）*/
		this.maxVerticalEndRadian=0;
		/**false代表RGBA整体插值，true代表RGBA逐分量插值*/
		this.colorComponentInter=false;
		/**false代表使用参数颜色数据，true代表使用原图颜色数据*/
		this.disableColor=false;
		/**混合模式，待调整，引擎中暂无BlendState抽象*/
		this.blendState=0;
		/**发射器类型,"point","box","sphere","ring"*/
		this.emitterType="null";
		/**发射器发射速率*/
		this.emissionRate=0;
		/**球发射器半径*/
		this.sphereEmitterRadius=1;
		/**球发射器速度*/
		this.sphereEmitterVelocity=0;
		/**球发射器速度随机值*/
		this.sphereEmitterVelocityAddVariance=0;
		/**环发射器半径*/
		this.ringEmitterRadius=30;
		/**环发射器速度*/
		this.ringEmitterVelocity=0;
		/**环发射器速度随机值*/
		this.ringEmitterVelocityAddVariance=0;
		/**环发射器up向量，0代表X轴,1代表Y轴,2代表Z轴*/
		this.ringEmitterUp=2;
		this.gravity=new Float32Array([0,0,0]);
		this.minStartColor=new Float32Array([1,1,1,1]);
		this.maxStartColor=new Float32Array([1,1,1,1]);
		this.minEndColor=new Float32Array([1,1,1,1]);
		this.maxEndColor=new Float32Array([1,1,1,1]);
		this.pointEmitterPosition=new Float32Array([0,0,0]);
		this.pointEmitterPositionVariance=new Float32Array([0,0,0]);
		this.pointEmitterVelocity=new Float32Array([0,0,0]);
		this.pointEmitterVelocityAddVariance=new Float32Array([0,0,0]);
		this.boxEmitterCenterPosition=new Float32Array([0,0,0]);
		this.boxEmitterSize=new Float32Array([0,0,0]);
		this.boxEmitterVelocity=new Float32Array([0,0,0]);
		this.boxEmitterVelocityAddVariance=new Float32Array([0,0,0]);
		this.sphereEmitterCenterPosition=new Float32Array([0,0,0]);
		this.ringEmitterCenterPosition=new Float32Array([0,0,0]);
		this.positionVariance=new Float32Array([0,0,0]);
	}

	__class(ParticleSetting,'laya.particle.ParticleSetting');
	ParticleSetting.checkSetting=function(setting){
		var key;
		for (key in ParticleSetting._defaultSetting){
			if (!setting.hasOwnProperty(key)){
				setting[key]=ParticleSetting._defaultSetting[key];
			}
		}
		setting.endVelocity=+setting.endVelocity;
		setting.gravity[0]=+setting.gravity[0];
		setting.gravity[1]=+setting.gravity[1];
		setting.gravity[2]=+setting.gravity[2];
	}

	__static(ParticleSetting,
	['_defaultSetting',function(){return this._defaultSetting=new ParticleSetting();}
	]);
	return ParticleSetting;
})()


/**
*
*<code>ParticleTemplateBase</code> 类是粒子模板基类
*
*/
//class laya.particle.ParticleTemplateBase
var ParticleTemplateBase=(function(){
	function ParticleTemplateBase(){
		/**
		*粒子配置数据
		*/
		this.settings=null;
		/**
		*粒子贴图
		*/
		this.texture=null;
	}

	__class(ParticleTemplateBase,'laya.particle.ParticleTemplateBase');
	var __proto=ParticleTemplateBase.prototype;
	/**
	*添加一个粒子
	*@param position 粒子位置
	*@param velocity 粒子速度
	*
	*/
	__proto.addParticleArray=function(position,velocity){}
	return ParticleTemplateBase;
})()


/**
*@private
*/
//class laya.particle.particleUtils.CanvasShader
var CanvasShader=(function(){
	function CanvasShader(){
		this.u_Duration=NaN;
		this.u_EndVelocity=NaN;
		this.u_Gravity=null;
		this.a_Position=null;
		this.a_Velocity=null;
		this.a_StartColor=null;
		this.a_EndColor=null;
		this.a_SizeRotation=null;
		this.a_Radius=null;
		this.a_Radian=null;
		this.a_AgeAddScale=NaN;
		this.gl_Position=null;
		this.v_Color=null;
		this.oSize=NaN;
		this._color=new Float32Array(4);
		this._position=new Float32Array(3);
	}

	__class(CanvasShader,'laya.particle.particleUtils.CanvasShader');
	var __proto=CanvasShader.prototype;
	__proto.getLen=function(position){
		return Math.sqrt(position[0] *position[0]+position[1] *position[1]+position[2] *position[2]);
	}

	__proto.ComputeParticlePosition=function(position,velocity,age,normalizedAge){
		this._position[0]=position[0];
		this._position[1]=position[1];
		this._position[2]=position[2];
		var startVelocity=this.getLen(velocity);
		var endVelocity=startVelocity *this.u_EndVelocity;
		var velocityIntegral=startVelocity *normalizedAge+(endVelocity-startVelocity)*normalizedAge *normalizedAge / 2.0;
		var lenVelocity=NaN;
		lenVelocity=this.getLen(velocity);
		var i=0,len=0;
		len=3;
		for (i=0;i < len;i++){
			this._position[i]=this._position[i]+(velocity[i] / lenVelocity)*velocityIntegral *this.u_Duration;
			this._position[i]+=this.u_Gravity[i] *age *normalizedAge;
		};
		var radius=MathUtil.lerp(this.a_Radius[0],this.a_Radius[1],normalizedAge);
		var radianHorizontal=MathUtil.lerp(this.a_Radian[0],this.a_Radian[2],normalizedAge);
		var radianVertical=MathUtil.lerp(this.a_Radian[1],this.a_Radian[3],normalizedAge);
		var r=Math.cos(radianVertical)*radius;
		this._position[1]+=Math.sin(radianVertical)*radius;
		this._position[0]+=Math.cos(radianHorizontal)*r;
		this._position[2]+=Math.sin(radianHorizontal)*r;
		return new Float32Array([this._position[0],this._position[1],0.0,1.0]);
	}

	__proto.ComputeParticleSize=function(startSize,endSize,normalizedAge){
		var size=MathUtil.lerp(startSize,endSize,normalizedAge);
		return size;
	}

	__proto.ComputeParticleRotation=function(rot,age){
		return rot *age;
	}

	__proto.ComputeParticleColor=function(startColor,endColor,normalizedAge){
		var rst=this._color;
		MathUtil.lerpVector4(startColor,endColor,normalizedAge,rst);
		rst[3]=rst[3]*normalizedAge *(1.0-normalizedAge)*(1.0-normalizedAge)*6.7;
		return rst;
	}

	__proto.clamp=function(value,min,max){
		if(value<min)return min;
		if(value>max)return max;
		return value;
	}

	__proto.getData=function(age){
		age *=1.0+this.a_AgeAddScale;
		var normalizedAge=this.clamp(age / this.u_Duration,0.0,1.0);
		this.gl_Position=this.ComputeParticlePosition(this.a_Position,this.a_Velocity,age,normalizedAge);
		var pSize=this.ComputeParticleSize(this.a_SizeRotation[0],this.a_SizeRotation[1],normalizedAge);
		var rotation=this.ComputeParticleRotation(this.a_SizeRotation[2],age);
		this.v_Color=this.ComputeParticleColor(this.a_StartColor,this.a_EndColor,normalizedAge);
		var matric=new Matrix();
		var scale=NaN;
		scale=pSize/this.oSize*2;
		matric.scale(scale,scale);
		matric.rotate(rotation);
		matric.setTranslate(this.gl_Position[0],-this.gl_Position[1]);
		var alpha=NaN;
		alpha=this.v_Color[3];
		return [this.v_Color,alpha,matric,this.v_Color[0]*alpha,this.v_Color[1]*alpha,this.v_Color[2]*alpha];
	}

	return CanvasShader;
})()


/**
*
*@private
*
*@created 2015-8-25 下午3:41:07
*/
//class laya.particle.particleUtils.CMDParticle
var CMDParticle=(function(){
	function CMDParticle(){
		/**
		*最大帧
		*/
		this.maxIndex=0;
		/**
		*帧命令数组
		*/
		this.cmds=null;
		/**
		*粒子id
		*/
		this.id=0;
	}

	__class(CMDParticle,'laya.particle.particleUtils.CMDParticle');
	var __proto=CMDParticle.prototype;
	__proto.setCmds=function(cmds){
		this.cmds=cmds;
		this.maxIndex=cmds.length-1;
	}

	return CMDParticle;
})()


//class laya.particle.particleUtils.PicTool
var PicTool=(function(){
	function PicTool(){}
	__class(PicTool,'laya.particle.particleUtils.PicTool');
	PicTool.getCanvasPic=function(img,color){
		img=img.bitmap;
		var canvas=new HTMLCanvas("2D");
		var ctx=canvas.getContext('2d');
		canvas.size(img.width,img.height);
		var red=(color >> 16 & 0xFF);
		var green=(color >> 8 & 0xFF);
		var blue=(color & 0xFF);
		if(Render.isConchApp){
			ctx.setFilter(red/255,green/255,blue/255,0);
		}
		ctx.drawImage(img.source,0,0);
		if (!Render.isConchApp){
			var imgdata=ctx.getImageData(0,0,canvas.width,canvas.height);
			var data=imgdata.data;
			for (var i=0,n=data.length;i < n;i+=4){
				if (data[i+3]==0)continue ;
				data[i] *=red/255;
				data[i+1] *=green/255;
				data[i+2] *=blue/255;
			}
			ctx.putImageData(imgdata,0,0);
		}
		return canvas;
	}

	PicTool.getRGBPic=function(img){
		var rst;
		rst=[new Texture(PicTool.getCanvasPic(img,0xFF0000)),new Texture(PicTool.getCanvasPic(img,0x00FF00)),new Texture(PicTool.getCanvasPic(img,0x0000FF))];
		return rst;
	}

	return PicTool;
})()


/**
*
*@private
*/
//class laya.particle.emitter.Emitter2D extends laya.particle.emitter.EmitterBase
var Emitter2D=(function(_super){
	function Emitter2D(_template){
		this.setting=null;
		this._posRange=null;
		this._canvasTemplate=null;
		this._emitFun=null;
		Emitter2D.__super.call(this);
		this.template=_template;
	}

	__class(Emitter2D,'laya.particle.emitter.Emitter2D',_super);
	var __proto=Emitter2D.prototype;
	__proto.emit=function(){
		_super.prototype.emit.call(this);
		if(this._emitFun!=null)
			this._emitFun();
	}

	__proto.getRandom=function(value){
		return (Math.random()*2-1)*value;
	}

	__proto.webGLEmit=function(){
		var pos=new Float32Array(3);
		pos[0]=this.getRandom(this._posRange[0]);
		pos[1]=this.getRandom(this._posRange[1]);
		pos[2]=this.getRandom(this._posRange[2]);
		var v=new Float32Array(3);
		v[0]=0;
		v[1]=0;
		v[2]=0;
		this._particleTemplate.addParticleArray(pos,v);
	}

	__proto.canvasEmit=function(){
		var pos=new Float32Array(3);
		pos[0]=this.getRandom(this._posRange[0]);
		pos[1]=this.getRandom(this._posRange[1]);
		pos[2]=this.getRandom(this._posRange[2]);
		var v=new Float32Array(3);
		v[0]=0;
		v[1]=0;
		v[2]=0;
		this._particleTemplate.addParticleArray(pos,v);
	}

	__getset(0,__proto,'template',function(){
		return this._particleTemplate;
		},function(template){
		this._particleTemplate=template;
		if (!template){
			this._emitFun=null;
			this.setting=null;
			this._posRange=null;
		};
		this.setting=template.settings;
		this._posRange=this.setting.positionVariance;
		if((this._particleTemplate instanceof laya.particle.ParticleTemplate2D )){
			this._emitFun=this.webGLEmit;
		}else
		if((this._particleTemplate instanceof laya.particle.ParticleTemplateCanvas )){
			this._canvasTemplate=template;
			this._emitFun=this.canvasEmit;
		}
	});

	return Emitter2D;
})(EmitterBase)


/**
*@private
*/
//class laya.particle.ParticleTemplateWebGL extends laya.particle.ParticleTemplateBase
var ParticleTemplateWebGL=(function(_super){
	function ParticleTemplateWebGL(parSetting){
		this._vertices=null;
		this._vertexBuffer=null;
		this._indexBuffer=null;
		this._floatCountPerVertex=29;
		//0~3为CornerTextureCoordinate,4~6为Position,7~9Velocity,10到13为StartColor,14到17为EndColor,18到20位SizeRotation，21到22位Radius,23到26位Radian，27为DurationAddScaleShaderValue,28为Time
		this._firstActiveElement=0;
		this._firstNewElement=0;
		this._firstFreeElement=0;
		this._firstRetiredElement=0;
		this._currentTime=0;
		this._drawCounter=0;
		ParticleTemplateWebGL.__super.call(this);
		this.settings=parSetting;
	}

	__class(ParticleTemplateWebGL,'laya.particle.ParticleTemplateWebGL',_super);
	var __proto=ParticleTemplateWebGL.prototype;
	__proto.initialize=function(){
		this._vertices=new Float32Array(this.settings.maxPartices *this._floatCountPerVertex *4);
		var particleOffset=0;
		for (var i=0;i < this.settings.maxPartices;i++){
			var random=Math.random();
			var cornerYSegement=this.settings.textureCount ? 1.0 / this.settings.textureCount :1.0;
			var cornerY=NaN;
			for (cornerY=0;cornerY < this.settings.textureCount;cornerY+=cornerYSegement){
				if (random < cornerY+cornerYSegement)
					break ;
			}
			particleOffset=i *this._floatCountPerVertex *4;
			this._vertices[particleOffset+this._floatCountPerVertex *0+0]=-1;
			this._vertices[particleOffset+this._floatCountPerVertex *0+1]=-1;
			this._vertices[particleOffset+this._floatCountPerVertex *0+2]=0;
			this._vertices[particleOffset+this._floatCountPerVertex *0+3]=cornerY;
			this._vertices[particleOffset+this._floatCountPerVertex *1+0]=1;
			this._vertices[particleOffset+this._floatCountPerVertex *1+1]=-1;
			this._vertices[particleOffset+this._floatCountPerVertex *1+2]=1;
			this._vertices[particleOffset+this._floatCountPerVertex *1+3]=cornerY;
			this._vertices[particleOffset+this._floatCountPerVertex *2+0]=1;
			this._vertices[particleOffset+this._floatCountPerVertex *2+1]=1;
			this._vertices[particleOffset+this._floatCountPerVertex *2+2]=1;
			this._vertices[particleOffset+this._floatCountPerVertex *2+3]=cornerY+cornerYSegement;
			this._vertices[particleOffset+this._floatCountPerVertex *3+0]=-1;
			this._vertices[particleOffset+this._floatCountPerVertex *3+1]=1;
			this._vertices[particleOffset+this._floatCountPerVertex *3+2]=0;
			this._vertices[particleOffset+this._floatCountPerVertex *3+3]=cornerY+cornerYSegement;
		}
	}

	__proto.loadContent=function(){}
	__proto.update=function(elapsedTime){
		this._currentTime+=elapsedTime / 1000;
		this.retireActiveParticles();
		this.freeRetiredParticles();
		if (this._firstActiveElement==this._firstFreeElement)
			this._currentTime=0;
		if (this._firstRetiredElement==this._firstActiveElement)
			this._drawCounter=0;
	}

	__proto.retireActiveParticles=function(){
		var epsilon=0.0001;
		var particleDuration=this.settings.duration;
		while (this._firstActiveElement !=this._firstNewElement){
			var offset=this._firstActiveElement *this._floatCountPerVertex *4;
			var index=offset+28;
			var particleAge=this._currentTime-this._vertices[index];
			particleAge *=(1.0+this._vertices[offset+27]);
			if (particleAge+epsilon < particleDuration)
				break ;
			this._vertices[index]=this._drawCounter;
			this._firstActiveElement++;
			if (this._firstActiveElement >=this.settings.maxPartices)
				this._firstActiveElement=0;
		}
	}

	__proto.freeRetiredParticles=function(){
		while (this._firstRetiredElement !=this._firstActiveElement){
			var age=this._drawCounter-this._vertices[this._firstRetiredElement *this._floatCountPerVertex *4+28];
			if (age < 3)
				break ;
			this._firstRetiredElement++;
			if (this._firstRetiredElement >=this.settings.maxPartices)
				this._firstRetiredElement=0;
		}
	}

	__proto.addNewParticlesToVertexBuffer=function(){}
	__proto.addParticleArray=function(position,velocity){
		var nextFreeParticle=this._firstFreeElement+1;
		if (nextFreeParticle >=this.settings.maxPartices)
			nextFreeParticle=0;
		if (nextFreeParticle===this._firstRetiredElement)
			return;
		var particleData=ParticleData.Create(this.settings,position,velocity,this._currentTime);
		var startIndex=this._firstFreeElement *this._floatCountPerVertex *4;
		for (var i=0;i < 4;i++){
			var j=0,offset=0;
			for (j=0,offset=4;j < 3;j++)
			this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.position[j];
			for (j=0,offset=7;j < 3;j++)
			this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.velocity[j];
			for (j=0,offset=10;j < 4;j++)
			this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.startColor[j];
			for (j=0,offset=14;j < 4;j++)
			this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.endColor[j];
			for (j=0,offset=18;j < 3;j++)
			this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.sizeRotation[j];
			for (j=0,offset=21;j < 2;j++)
			this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.radius[j];
			for (j=0,offset=23;j < 4;j++)
			this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.radian[j];
			this._vertices[startIndex+i *this._floatCountPerVertex+27]=particleData.durationAddScale;
			this._vertices[startIndex+i *this._floatCountPerVertex+28]=particleData.time;
		}
		this._firstFreeElement=nextFreeParticle;
	}

	return ParticleTemplateWebGL;
})(ParticleTemplateBase)


/**
*@private
*/
//class laya.particle.ParticleTemplateCanvas extends laya.particle.ParticleTemplateBase
var ParticleTemplateCanvas=(function(_super){
	function ParticleTemplateCanvas(particleSetting){
		/**
		*是否处于可播放状态
		*/
		this._ready=false;
		/**
		*贴图列表
		*/
		this.textureList=[];
		/**
		*粒子列表
		*/
		this.particleList=[];
		/**
		*贴图中心偏移x
		*/
		this.pX=0;
		/**
		*贴图中心偏移y
		*/
		this.pY=0;
		/**
		*当前活跃的粒子
		*/
		this.activeParticles=[];
		/**
		*粒子pool
		*/
		this.deadParticles=[];
		/**
		*粒子播放进度列表
		*/
		this.iList=[];
		/**
		*粒子系统使用的最大粒子数
		*/
		this._maxNumParticles=0;
		/**
		*纹理的宽度
		*/
		this.textureWidth=NaN;
		/**
		*宽度倒数
		*/
		this.dTextureWidth=NaN;
		/**
		*是否支持颜色变化
		*/
		this.colorChange=true;
		/**
		*采样步长
		*/
		this.step=1/60;
		this.canvasShader=new CanvasShader();
		ParticleTemplateCanvas.__super.call(this);
		this.settings=particleSetting;
		this._maxNumParticles=particleSetting.maxPartices;
		this.texture=new Texture();
		this.texture.on(/*laya.events.Event.LOADED*/"loaded",this,this._textureLoaded);
		this.texture.load(particleSetting.textureName);
	}

	__class(ParticleTemplateCanvas,'laya.particle.ParticleTemplateCanvas',_super);
	var __proto=ParticleTemplateCanvas.prototype;
	__proto._textureLoaded=function(e){
		this.setTexture(this.texture);
		this._ready=true;
	}

	__proto.clear=function(clearTexture){
		(clearTexture===void 0)&& (clearTexture=true);
		this.deadParticles.length=0;
		this.activeParticles.length=0;
		this.textureList.length=0;
	}

	/**
	*设置纹理
	*@param texture
	*
	*/
	__proto.setTexture=function(texture){
		this.texture=texture;
		this.textureWidth=texture.width;
		this.dTextureWidth=1/this.textureWidth;
		this.pX=-texture.width*0.5;
		this.pY=-texture.height*0.5;
		this.textureList=ParticleTemplateCanvas.changeTexture(texture,this.textureList);
		this.particleList.length=0;
		this.deadParticles.length=0;
		this.activeParticles.length=0;
	}

	/**
	*创建一个粒子数据
	*@return
	*
	*/
	__proto._createAParticleData=function(position,velocity){
		this.canvasShader.u_EndVelocity=this.settings.endVelocity;
		this.canvasShader.u_Gravity=this.settings.gravity;
		this.canvasShader.u_Duration=this.settings.duration;
		var particle;
		particle=ParticleData.Create(this.settings,position,velocity,0);
		this.canvasShader.a_Position=particle.position;
		this.canvasShader.a_Velocity=particle.velocity;
		this.canvasShader.a_StartColor=particle.startColor;
		this.canvasShader.a_EndColor=particle.endColor;
		this.canvasShader.a_SizeRotation=particle.sizeRotation;
		this.canvasShader.a_Radius=particle.radius;
		this.canvasShader.a_Radian=particle.radian;
		this.canvasShader.a_AgeAddScale=particle.durationAddScale;
		this.canvasShader.oSize=this.textureWidth;
		var rst=new CMDParticle();
		var i=0,len=this.settings.duration/(1+particle.durationAddScale);
		var params=[];
		var mStep=NaN;
		for(i=0;i<len;i+=this.step){
			params.push(this.canvasShader.getData(i));
		}
		rst.id=this.particleList.length;
		this.particleList.push(rst);
		rst.setCmds(params);
		return rst;
	}

	__proto.addParticleArray=function(position,velocity){
		if(!this._ready)return;
		var tParticle;
		if(this.particleList.length<this._maxNumParticles){
			tParticle=this._createAParticleData(position,velocity);
			this.iList[tParticle.id]=0;
			this.activeParticles.push(tParticle);
			}else{
			if(this.deadParticles.length>0){
				tParticle=this.deadParticles.pop();
				this.iList[tParticle.id]=0;
				this.activeParticles.push(tParticle);
			}
		}
	}

	__proto.advanceTime=function(passedTime){
		(passedTime===void 0)&& (passedTime=1);
		if(!this._ready)return;
		var particleList=this.activeParticles;
		var pool=this.deadParticles;
		var i=0,len=particleList.length;
		var tcmd;
		var tI=0;
		var iList=this.iList;
		for(i=len-1;i>-1;i--){
			tcmd=particleList[i];
			tI=iList[tcmd.id];
			if(tI>=tcmd.maxIndex){
				tI=0;
				particleList.splice(i,1);
				pool.push(tcmd);
				}else{
				tI+=1;
			}
			iList[tcmd.id]=tI;
		}
	}

	__proto.render=function(context,x,y){
		if(!this._ready)return;
		if(this.activeParticles.length<1)return;
		if (this.textureList.length < 2)return;
		if (this.settings.disableColor){
			this.noColorRender(context,x,y);
			}else{
			this.canvasRender(context,x,y);
		}
	}

	__proto.noColorRender=function(context,x,y){
		var particleList=this.activeParticles;
		var i=0,len=particleList.length;
		var tcmd;
		var tParam;
		var tAlpha=NaN;
		var px=this.pX,py=this.pY;
		var pw=-px*2,ph=-py*2;
		var tI=0;
		var textureList=this.textureList;
		var iList=this.iList;
		var preAlpha=NaN;
		context.translate(x,y);
		preAlpha=context.ctx.globalAlpha;
		for(i=0;i<len;i++){
			tcmd=particleList[i];
			tI=iList[tcmd.id];
			tParam=tcmd.cmds[tI];
			if (!tParam)continue ;
			if ((tAlpha=tParam[1])<=0.01)continue ;
			context.setAlpha(preAlpha*tAlpha);
			context.drawTextureWithTransform(this.texture,px,py,pw,ph,tParam[2],1);
		}
		context.setAlpha(preAlpha);
		context.translate(-x,-y);
	}

	__proto.canvasRender=function(context,x,y){
		var particleList=this.activeParticles;
		var i=0,len=particleList.length;
		var tcmd;
		var tParam;
		var tAlpha=NaN;
		var px=this.pX,py=this.pY;
		var pw=-px*2,ph=-py*2;
		var tI=0;
		var textureList=this.textureList;
		var iList=this.iList;
		var preAlpha=NaN;
		var preB;
		context.translate(x,y);
		preAlpha=context.ctx.globalAlpha;
		preB=context.ctx.globalCompositeOperation;
		context.blendMode("lighter");
		for(i=0;i<len;i++){
			tcmd=particleList[i];
			tI=iList[tcmd.id];
			tParam=tcmd.cmds[tI];
			if (!tParam)continue ;
			if ((tAlpha=tParam[1])<=0.01)continue ;
			context.save();
			context.transformByMatrix(tParam[2]);
			if(tParam[3]>0.01){
				context.setAlpha(preAlpha*tParam[3]);
				context.drawTexture(textureList[0],px,py,pw,ph);
			}
			if(tParam[4]>0.01){
				context.setAlpha(preAlpha*tParam[4]);
				context.drawTexture(textureList[1],px,py,pw,ph);
			}
			if(tParam[5]>0.01){
				context.setAlpha(preAlpha*tParam[5]);
				context.drawTexture(textureList[2],px,py,pw,ph);
			}
			context.restore();
		}
		context.setAlpha(preAlpha);
		context.translate(-x,-y);
		context.blendMode(preB);
	}

	ParticleTemplateCanvas.changeTexture=function(texture,rst,settings){
		if(!rst)rst=[];
		rst.length=0;
		if (settings&&settings.disableColor){
			rst.push(texture,texture,texture);
			}else{
			Utils.copyArray(rst,PicTool.getRGBPic(texture));
		}
		return rst;
	}

	return ParticleTemplateCanvas;
})(ParticleTemplateBase)


/**
*@private
*/
//class laya.particle.ParticleTemplate2D extends laya.particle.ParticleTemplateWebGL
var ParticleTemplate2D=(function(_super){
	function ParticleTemplate2D(parSetting){
		this._vertexBuffer2D=null;
		this._indexBuffer2D=null;
		this.x=0;
		this.y=0;
		this._blendFn=null;
		this._startTime=0;
		this.sv=new ParticleShaderValue();
		ParticleTemplate2D.__super.call(this,parSetting);
		var _this=this;
		Laya.loader.load(this.settings.textureName,Handler.create(null,function(texture){
			(texture.bitmap).enableMerageInAtlas=false;
			_this.texture=texture;
		}));
		this.sv.u_Duration=this.settings.duration;
		this.sv.u_Gravity=this.settings.gravity;
		this.sv.u_EndVelocity=this.settings.endVelocity;
		this._blendFn=BlendMode.fns[parSetting.blendState];
		this.initialize();
		this._vertexBuffer=this._vertexBuffer2D=VertexBuffer2D.create(-1,/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
		this._indexBuffer=this._indexBuffer2D=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
		this.loadContent();
	}

	__class(ParticleTemplate2D,'laya.particle.ParticleTemplate2D',_super);
	var __proto=ParticleTemplate2D.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.getRenderType=function(){return-111}
	__proto.releaseRender=function(){}
	__proto.addParticleArray=function(position,velocity){
		position[0]+=this.x;
		position[1]+=this.y;
		_super.prototype.addParticleArray.call(this,position,velocity);
	}

	__proto.loadContent=function(){
		var indexes=new Uint16Array(this.settings.maxPartices *6);
		for (var i=0;i < this.settings.maxPartices;i++){
			indexes[i *6+0]=(i *4+0);
			indexes[i *6+1]=(i *4+1);
			indexes[i *6+2]=(i *4+2);
			indexes[i *6+3]=(i *4+0);
			indexes[i *6+4]=(i *4+2);
			indexes[i *6+5]=(i *4+3);
		}
		this._indexBuffer2D.clear();
		this._indexBuffer2D.append(indexes);
		this._indexBuffer2D.upload();
	}

	__proto.addNewParticlesToVertexBuffer=function(){
		this._vertexBuffer2D.clear();
		this._vertexBuffer2D.append(this._vertices);
		var start=0;
		if (this._firstNewElement < this._firstFreeElement){
			start=this._firstNewElement *4 *this._floatCountPerVertex *4;
			this._vertexBuffer2D.subUpload(start,start,start+(this._firstFreeElement-this._firstNewElement)*4 *this._floatCountPerVertex *4);
			}else {
			start=this._firstNewElement *4 *this._floatCountPerVertex *4;
			this._vertexBuffer2D.subUpload(start,start,start+(this.settings.maxPartices-this._firstNewElement)*4 *this._floatCountPerVertex *4);
			if (this._firstFreeElement > 0){
				this._vertexBuffer2D.setNeedUpload();
				this._vertexBuffer2D.subUpload(0,0,this._firstFreeElement *4 *this._floatCountPerVertex *4);
			}
		}
		this._firstNewElement=this._firstFreeElement;
	}

	__proto.renderSubmit=function(){
		if (this.texture&&this.texture.loaded){
			this.update(Laya.timer.delta);
			this.sv.u_CurrentTime=this._currentTime;
			if (this._firstNewElement !=this._firstFreeElement){
				this.addNewParticlesToVertexBuffer();
			}
			this.blend();
			if (this._firstActiveElement !=this._firstFreeElement){
				var gl=WebGL.mainContext;
				this._vertexBuffer2D.bind(this._indexBuffer2D);
				this.sv.u_texture=this.texture.source;
				this.sv.upload();
				if (this._firstActiveElement < this._firstFreeElement){
					WebGL.mainContext.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,(this._firstFreeElement-this._firstActiveElement)*6,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._firstActiveElement *6 *2);
				}
				else{
					WebGL.mainContext.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,(this.settings.maxPartices-this._firstActiveElement)*6,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._firstActiveElement *6 *2);
					if (this._firstFreeElement > 0)
						WebGL.mainContext.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._firstFreeElement *6,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,0);
				}
				Stat.drawCall++;
			}
			this._drawCounter++;
		}
		return 1;
	}

	__proto.blend=function(){
		if (BlendMode.activeBlendFunction!==this._blendFn){
			var gl=WebGL.mainContext;
			gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
			this._blendFn(gl);
			BlendMode.activeBlendFunction=this._blendFn;
		}
	}

	__proto.dispose=function(){
		this._vertexBuffer2D.dispose();
		this._indexBuffer2D.dispose();
	}

	ParticleTemplate2D.activeBlendType=-1;
	return ParticleTemplate2D;
})(ParticleTemplateWebGL)


/**
*@private
*/
//class laya.particle.shader.value.ParticleShaderValue extends laya.webgl.shader.d2.value.Value2D
var ParticleShaderValue=(function(_super){
	function ParticleShaderValue(){
		this.a_CornerTextureCoordinate=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,0];
		this.a_Position=[3,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,16];
		this.a_Velocity=[3,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,28];
		this.a_StartColor=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,40];
		this.a_EndColor=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,56];
		this.a_SizeRotation=[3,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,72];
		this.a_Radius=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,84];
		this.a_Radian=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,92];
		this.a_AgeAddScale=[1,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,108];
		this.a_Time=[1,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,112];
		this.u_CurrentTime=NaN;
		this.u_Duration=NaN;
		this.u_Gravity=null;
		//v3
		this.u_EndVelocity=NaN;
		this.u_texture=null;
		ParticleShaderValue.__super.call(this,0,0);
	}

	__class(ParticleShaderValue,'laya.particle.shader.value.ParticleShaderValue',_super);
	var __proto=ParticleShaderValue.prototype;
	__proto.upload=function(){
		this.refresh();
		ParticleShaderValue.pShader.upload(this);
	}

	__static(ParticleShaderValue,
	['pShader',function(){return this.pShader=new ParticleShader();}
	]);
	return ParticleShaderValue;
})(Value2D)


/**
*<code>Particle2D</code> 类是2D粒子播放类
*
*/
//class laya.particle.Particle2D extends laya.display.Sprite
var Particle2D=(function(_super){
	function Particle2D(setting){
		/**@private */
		this._matrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		/**@private */
		this._particleTemplate=null;
		/**@private */
		this._canvasTemplate=null;
		/**@private */
		this._emitter=null;
		/**是否自动播放*/
		this.autoPlay=true;
		Particle2D.__super.call(this);
		if (setting)this.setParticleSetting(setting);
	}

	__class(Particle2D,'laya.particle.Particle2D',_super);
	var __proto=Particle2D.prototype;
	/**
	*加载粒子文件
	*@param url 粒子文件地址
	*/
	__proto.load=function(url){
		Laya.loader.load(url,Handler.create(this,this.setParticleSetting),null,/*laya.net.Loader.JSON*/"json");
	}

	/**
	*设置粒子配置数据
	*@param settings 粒子配置数据
	*/
	__proto.setParticleSetting=function(setting){
		var _$this=this;
		if (!setting)return this.stop();
		ParticleSetting.checkSetting(setting);
		if(/*__JS__ */!window.ConchParticleTemplate2D||Render.isWebGL)this.customRenderEnable=true;
		if (Render.isWebGL){
			this._particleTemplate=new ParticleTemplate2D(setting);
			this.graphics._saveToCmd(Render.context._drawParticle,[this._particleTemplate]);
		}
		else if (Render.isConchApp&&/*__JS__ */window.ConchParticleTemplate2D){
			this._particleTemplate=/*__JS__ */new ConchParticleTemplate2D();
			var _this=this;
			Laya.loader.load(setting.textureName,Handler.create(null,function(texture){
				/*__JS__ */_this._particleTemplate.texture=texture;
				_this._particleTemplate.settings=setting;
				if (Render.isConchNode){
					/*__JS__ */_this.graphics.drawParticle(_this._particleTemplate);
				}
				else{
					_this.graphics._saveToCmd(Render.context._drawParticle,[_$this._particleTemplate]);
				}
			}));
			this._emitter={start:function (){}};
			/*__JS__ */this.play=this._particleTemplate.play.bind(this._particleTemplate);
			/*__JS__ */this.stop=this._particleTemplate.stop.bind(this._particleTemplate);
			if (this.autoPlay)this.play();
			return;
		}
		else {
			this._particleTemplate=this._canvasTemplate=new ParticleTemplateCanvas(setting);
		}
		if (!this._emitter){
			this._emitter=new Emitter2D(this._particleTemplate);
			}else {
			(this._emitter).template=this._particleTemplate;
		}
		if (this.autoPlay){
			this.emitter.start();
			this.play();
		}
	}

	/**
	*播放
	*/
	__proto.play=function(){
		this.timer.frameLoop(1,this,this._loop);
	}

	/**
	*停止
	*/
	__proto.stop=function(){
		this.timer.clear(this,this._loop);
	}

	/**@private */
	__proto._loop=function(){
		this.advanceTime(1 / 60);
	}

	/**
	*时钟前进
	*@param passedTime 时钟前进时间
	*/
	__proto.advanceTime=function(passedTime){
		(passedTime===void 0)&& (passedTime=1);
		if (this._canvasTemplate){
			this._canvasTemplate.advanceTime(passedTime);
		}
		if (this._emitter){
			this._emitter.advanceTime(passedTime);
		}
	}

	__proto.customRender=function(context,x,y){
		if (Render.isWebGL){
			this._matrix4[0]=context.ctx._curMat.a;
			this._matrix4[1]=context.ctx._curMat.b;
			this._matrix4[4]=context.ctx._curMat.c;
			this._matrix4[5]=context.ctx._curMat.d;
			this._matrix4[12]=context.ctx._curMat.tx;
			this._matrix4[13]=context.ctx._curMat.ty;
			var sv=(this._particleTemplate).sv;
			sv.u_mmat=this._matrix4;
		}
		if (this._canvasTemplate){
			this._canvasTemplate.render(context,x,y);
		}
	}

	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		if ((this._particleTemplate instanceof laya.particle.ParticleTemplate2D ))
			(this._particleTemplate).dispose();
		_super.prototype.destroy.call(this,destroyChild);
	}

	/**
	*设置 粒子文件地址
	*@param path 粒子文件地址
	*/
	__getset(0,__proto,'url',null,function(url){
		this.load(url);
	});

	/**
	*获取粒子发射器
	*/
	__getset(0,__proto,'emitter',function(){
		return this._emitter;
	});

	return Particle2D;
})(Sprite)


/**
*@private
*/
//class laya.particle.shader.ParticleShader extends laya.webgl.shader.Shader
var ParticleShader=(function(_super){
	function ParticleShader(){
		ParticleShader.__super.call(this,ParticleShader.vs,ParticleShader.ps,"ParticleShader");
	}

	__class(ParticleShader,'laya.particle.shader.ParticleShader',_super);
	__static(ParticleShader,
	['vs',function(){return this.vs="attribute vec4 a_CornerTextureCoordinate;\nattribute vec3 a_Position;\nattribute vec3 a_Velocity;\nattribute vec4 a_StartColor;\nattribute vec4 a_EndColor;\nattribute vec3 a_SizeRotation;\nattribute vec2 a_Radius;\nattribute vec4 a_Radian;\nattribute float a_AgeAddScale;\nattribute float a_Time;\n\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\n\nuniform float u_CurrentTime;\nuniform float u_Duration;\nuniform float u_EndVelocity;\nuniform vec3 u_Gravity;\n\n#ifdef PARTICLE3D\n uniform mat4 u_WorldMat;\n uniform mat4 u_View;\n uniform mat4 u_Projection;\n uniform vec2 u_ViewportScale;\n#else\n uniform vec2 size;\n uniform mat4 mmat;\n uniform mat4 u_mmat;\n#endif\n\nvec4 ComputeParticlePosition(in vec3 position, in vec3 velocity,in float age,in float normalizedAge)\n{\n\n   float startVelocity = length(velocity);//起始标量速度\n   float endVelocity = startVelocity * u_EndVelocity;//结束标量速度\n\n   float velocityIntegral = startVelocity * normalizedAge +(endVelocity - startVelocity) * normalizedAge *normalizedAge/2.0;//计算当前速度的标量（单位空间），vt=v0*t+(1/2)*a*(t^2)\n   \n   vec3 addPosition = normalize(velocity) * velocityIntegral * u_Duration;//计算受自身速度影响的位置，转换标量到矢量    \n   addPosition += u_Gravity * age * normalizedAge;//计算受重力影响的位置\n   \n   float radius=mix(a_Radius.x, a_Radius.y, normalizedAge); //计算粒子受半径和角度影响（无需计算角度和半径时，可用宏定义优化屏蔽此计算）\n   float radianHorizontal =mix(a_Radian.x,a_Radian.z,normalizedAge);\n   float radianVertical =mix(a_Radian.y,a_Radian.w,normalizedAge);\n   \n   float r =cos(radianVertical)* radius;\n   addPosition.y += sin(radianVertical) * radius;\n	\n   addPosition.x += cos(radianHorizontal) *r;\n   addPosition.z += sin(radianHorizontal) *r;\n  \n   #ifdef PARTICLE3D\n   position+=addPosition;\n    return  u_Projection*u_View*u_WorldMat*(vec4(position, 1.0));\n   #else\n   addPosition.y=-addPosition.y;//2D粒子位置更新需要取负，2D粒子坐标系Y轴正向朝上\n   position+=addPosition;\n    return  vec4(position,1.0);\n   #endif\n}\n\nfloat ComputeParticleSize(in float startSize,in float endSize, in float normalizedAge)\n{    \n    float size = mix(startSize, endSize, normalizedAge);\n    \n	#ifdef PARTICLE3D\n    //Project the size into screen coordinates.\n     return size * u_Projection[1][1];\n	#else\n	 return size;\n	#endif\n}\n\nmat2 ComputeParticleRotation(in float rot,in float age)\n{    \n    float rotation =rot * age;\n    //计算2x2旋转矩阵.\n    float c = cos(rotation);\n    float s = sin(rotation);\n    return mat2(c, -s, s, c);\n}\n\nvec4 ComputeParticleColor(in vec4 startColor,in vec4 endColor,in float normalizedAge)\n{\n	vec4 color=mix(startColor,endColor,normalizedAge);\n    //硬编码设置，使粒子淡入很快，淡出很慢,6.7的缩放因子把置归一在0到1之间，可以谷歌x*(1-x)*(1-x)*6.7的制图表\n    color.a *= normalizedAge * (1.0-normalizedAge) * (1.0-normalizedAge) * 6.7;\n   \n    return color;\n}\n\nvoid main()\n{\n   float age = u_CurrentTime - a_Time;\n   age *= 1.0 + a_AgeAddScale;\n   float normalizedAge = clamp(age / u_Duration,0.0,1.0);\n   gl_Position = ComputeParticlePosition(a_Position, a_Velocity, age, normalizedAge);//计算粒子位置\n   float pSize = ComputeParticleSize(a_SizeRotation.x,a_SizeRotation.y, normalizedAge);\n   mat2 rotation = ComputeParticleRotation(a_SizeRotation.z, age);\n	\n   #ifdef PARTICLE3D\n	gl_Position.xy += (rotation*a_CornerTextureCoordinate.xy) * pSize * u_ViewportScale;\n   #else\n    mat4 mat=u_mmat*mmat;\n    gl_Position=vec4((mat*gl_Position).xy,0.0,1.0);\n	gl_Position.xy += (rotation*a_CornerTextureCoordinate.xy) * pSize*vec2(mat[0][0],mat[1][1]);\n    gl_Position=vec4((gl_Position.x/size.x-0.5)*2.0,(0.5-gl_Position.y/size.y)*2.0,0.0,1.0);\n   #endif\n   \n   v_Color = ComputeParticleColor(a_StartColor,a_EndColor, normalizedAge);\n   v_TextureCoordinate =a_CornerTextureCoordinate.zw;\n}\n\n";},'ps',function(){return this.ps="#ifdef FSHIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\nuniform sampler2D u_texture;\n\nvoid main()\n{	\n	gl_FragColor=texture2D(u_texture,v_TextureCoordinate)*v_Color;\n	gl_FragColor.xyz *= v_Color.w;\n}";}
	]);
	return ParticleShader;
})(Shader)



})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Browser=laya.utils.Browser,HTMLCanvas=laya.resource.HTMLCanvas,Handler=laya.utils.Handler,Loader=laya.net.Loader;
	var Point=laya.maths.Point,Rectangle=laya.maths.Rectangle,Render=laya.renders.Render,RenderContext=laya.renders.RenderContext;
	var Sprite=laya.display.Sprite,Texture=laya.resource.Texture;
/**
*tiledMap是整个地图的核心
*地图以层级来划分地图（例如：地表层，植被层，建筑层）
*每层又以分块（GridSprite)来处理显示对象，只显示在视口区域的区
*每块又包括N*N个格子（tile)
*格子类型又分为动画格子跟图片格子两种
*@author ...
*/
//class laya.map.TiledMap
var TiledMap=(function(){
	var GRect,TileMapAniData,TileSet;
	function TiledMap(){
		//json数据
		this._jsonData=null;
		//存放地图中用到的所有子纹理数据
		this._tileTexSetArr=[];
		//主纹理数据，主要在释放纹理资源时使用
		this._texArray=[];
		//地图信息中的一些基本数据
		this._x=0;
		//地图的坐标
		this._y=0;
		//_height=_mapTileH *_mapH
		this._width=0;
		//地图的宽度
		this._height=0;
		//地图的高度
		this._mapW=0;
		//地图的横向格子数
		this._mapH=0;
		//地图的竖向格子数
		this._mapTileW=0;
		//tile的宽度
		this._mapTileH=0;
		//地图的显示对象
		this._mapSprite=null;
		//地图的显示对象
		this._layerArray=[];
		//这里保存所有的MapLayer对象
		this._renderLayerArray=[];
		//这里保存需要渲染的MapLayer对象
		this._gridArray=[];
		//地图块相关的
		this._showGridKey=false;
		//是否显示块边界线（用来调试用）
		this._totalGridNum=0;
		//一层中的GridSprite的总数
		this._gridW=0;
		//地图的横向块数
		this._gridH=0;
		//地图的坚向块数
		this._gridWidth=450;
		//块的默认宽度
		this._gridHeight=450;
		//块的默认高度
		this._jsonLoader=null;
		//用来加载JSON文件用的LOADER
		this._loader=null;
		//用来加载纹理数据用的LOADER
		this._tileSetArray=[];
		//用来存放还需要哪些儿纹理等待加载
		this._currTileSet=null;
		//正在加载的纹理需要的数据源
		this._completeHandler=null;
		//上次视口显示的块范围
		this._index=0;
		this._animationDic={};
		//需要创建的动画数据
		this._properties=null;
		//当前地图的自定义属性
		this._tileProperties={};
		//图块属性
		this._tileProperties2={};
		//默认的地图类型（具体要看JSON文件）
		this._orientation="orthogonal";
		//默认的tile渲染顺序（具体要看JSON文件）
		this._renderOrder="right-down";
		//调试用的颜色组合
		this._colorArray=["FF","00","33","66"];
		//缩放相关的操作
		this._scale=1;
		this._pivotScaleX=0.5;
		this._pivotScaleY=0.5;
		this._centerX=0;
		this._centerY=0;
		/**@private */
		this._viewPortX=0;
		/**@private */
		this._viewPortY=0;
		this._viewPortWidth=0;
		this._viewPortHeight=0;
		//是否开启线性取样
		this._enableLinear=true;
		//资源的相对路径
		this._resPath=null;
		this._pathArray=null;
		//把地图限制在显示区域
		this._limitRange=false;
		/**
		*快速更新模式是否不可用
		*/
		this._fastDirty=true;
		/**
		*是否自动缓存没有动画的地块
		*/
		this.autoCache=true;
		/**
		*自动缓存类型,地图较大时建议使用normal
		*/
		this.autoCacheType="normal";
		/**
		*是否合并图层,开启合并图层时，图层属性内可添加layer属性，运行时将会将相邻的layer属性相同的图层进行合并以提高性能
		*/
		this.enableMergeLayer=false;
		/**
		*是否移除被覆盖的格子,地块可添加type属性，type不为0时表示不透明，被不透明地块遮挡的地块将会被剔除以提高性能
		*/
		this.removeCoveredTile=false;
		/**
		*是否显示大格子里显示的贴图数量
		*/
		this.showGridTextureCount=false;
		/**
		*是否调整地块边缘消除缩放导致的缝隙
		*/
		this.antiCrack=true;
		/**
		*是否在加载完成之后cache所有大格子
		*/
		this.cacheAllAfterInit=false;
		this._texutreStartDic={};
		this._rect=new Rectangle();
		this._paddingRect=new Rectangle();
		this._mapRect=new GRect();
		this._mapLogicRect=new GRect();
		this._mapLastRect=new GRect();
		this._mapSprite=new Sprite();
	}

	__class(TiledMap,'laya.map.TiledMap');
	var __proto=TiledMap.prototype;
	/**
	*创建地图
	*@param mapName JSON文件名字
	*@param viewRect 视口区域
	*@param completeHandler 地图创建完成的回调函数
	*@param viewRectPadding 视口扩充区域，把视口区域上、下、左、右扩充一下，防止视口移动时的穿帮
	*@param gridSize grid大小
	*@param enableLinear 是否开启线性取样（为false时，可以解决地图黑线的问题，但画质会锐化）
	*@param limitRange 把地图限制在显示区域
	*/
	__proto.createMap=function(mapName,viewRect,completeHandler,viewRectPadding,gridSize,enableLinear,limitRange){
		(enableLinear===void 0)&& (enableLinear=true);
		(limitRange===void 0)&& (limitRange=false);
		this._enableLinear=enableLinear;
		this._limitRange=limitRange;
		this._rect.x=viewRect.x;
		this._rect.y=viewRect.y;
		this._rect.width=viewRect.width;
		this._rect.height=viewRect.height;
		this._viewPortWidth=viewRect.width / this._scale;
		this._viewPortHeight=viewRect.height / this._scale;
		this._completeHandler=completeHandler;
		if (viewRectPadding){
			this._paddingRect.copyFrom(viewRectPadding);
		}
		else {
			this._paddingRect.setTo(0,0,0,0);
		}
		if (gridSize){
			this._gridWidth=gridSize.x;
			this._gridHeight=gridSize.y;
		};
		var tIndex=mapName.lastIndexOf("/");
		if (tIndex >-1){
			this._resPath=mapName.substr(0,tIndex);
			this._pathArray=this._resPath.split("/");
		}
		else {
			this._resPath="";
			this._pathArray=[];
		}
		this._jsonLoader=new Loader();
		this._jsonLoader.once("complete",this,this.onJsonComplete);
		this._jsonLoader.load(mapName,/*laya.net.Loader.JSON*/"json",false);
	}

	/**
	*json文件读取成功后，解析里面的纹理数据，进行加载
	*@param e JSON数据
	*/
	__proto.onJsonComplete=function(e){
		var tJsonData=this._jsonData=e;
		this._properties=tJsonData.properties;
		this._orientation=tJsonData.orientation;
		this._renderOrder=tJsonData.renderorder;
		this._mapW=tJsonData.width;
		this._mapH=tJsonData.height;
		this._mapTileW=tJsonData.tilewidth;
		this._mapTileH=tJsonData.tileheight;
		this._width=this._mapTileW *this._mapW;
		this._height=this._mapTileH *this._mapH;
		if (this._orientation=="staggered"){
			this._height=(0.5+this._mapH *0.5)*this._mapTileH;
		}
		this._mapLastRect.top=this._mapLastRect.bottom=this._mapLastRect.left=this._mapLastRect.right=-1;
		var tArray=tJsonData.tilesets;
		var tileset;
		var tTileSet;
		var i=0;
		for (i=0;i < tArray.length;i++){
			tileset=tArray[i];
			tTileSet=new TileSet();
			tTileSet.init(tileset);
			if (tTileSet.properties && tTileSet.properties.ignore)continue ;
			this._tileProperties[i]=tTileSet.tileproperties;
			this.addTileProperties(tTileSet.tileproperties);
			this._tileSetArray.push(tTileSet);
			var tTiles=tileset.tiles;
			if (tTiles){
				for (var p in tTiles){
					var tAnimation=tTiles[p].animation;
					if (tAnimation){
						var tAniData=new TileMapAniData();
						this._animationDic[p]=tAniData;
						tAniData.image=tileset.image;
						for (var j=0;j < tAnimation.length;j++){
							var tAnimationItem=tAnimation[j];
							tAniData.mAniIdArray.push(tAnimationItem.tileid);
							tAniData.mDurationTimeArray.push(tAnimationItem.duration);
						}
					}
				}
			}
		}
		this._tileTexSetArr.push(null);
		if (this._tileSetArray.length > 0){
			tTileSet=this._currTileSet=this._tileSetArray.shift();
			this._loader=new Loader();
			this._loader.once("complete",this,this.onTextureComplete);
			var tPath=this.mergePath(this._resPath,tTileSet.image);
			this._loader.load(tPath,/*laya.net.Loader.IMAGE*/"image",false);
		}
	}

	/**
	*合并路径
	*@param resPath
	*@param relativePath
	*@return
	*/
	__proto.mergePath=function(resPath,relativePath){
		var tResultPath="";
		var tImageArray=relativePath.split("/");
		var tParentPathNum=0;
		var i=0;
		for (i=tImageArray.length-1;i >=0;i--){
			if (tImageArray[i]==".."){
				tParentPathNum++;
			}
		}
		if (tParentPathNum==0){
			if (this._pathArray.length > 0){
				tResultPath=resPath+"/"+relativePath;
			}
			else {
				tResultPath=relativePath;
			}
			return tResultPath;
		};
		var tSrcNum=this._pathArray.length-tParentPathNum;
		if (tSrcNum < 0){
			console.log("[error]path does not exist",this._pathArray,tImageArray,resPath,relativePath);
		}
		for (i=0;i < tSrcNum;i++){
			if (i==0){
				tResultPath+=this._pathArray[i];
			}
			else {
				tResultPath=tResultPath+"/"+this._pathArray[i];
			}
		}
		for (i=tParentPathNum;i < tImageArray.length;i++){
			tResultPath=tResultPath+"/"+tImageArray[i];
		}
		return tResultPath;
	}

	/**
	*纹理加载完成，如果所有的纹理加载，开始初始化地图
	*@param e 纹理数据
	*/
	__proto.onTextureComplete=function(e){
		var json=this._jsonData;
		var tTexture=e;
		if (Render.isWebGL && (!this._enableLinear)){
			tTexture.bitmap.minFifter=0x2600;
			tTexture.bitmap.magFifter=0x2600;
			tTexture.bitmap.enableMerageInAtlas=false;
		}
		this._texArray.push(tTexture);
		var tSubTexture=null;
		var tTileSet=this._currTileSet;
		var tTileTextureW=tTileSet.tilewidth;
		var tTileTextureH=tTileSet.tileheight;
		var tImageWidth=tTileSet.imagewidth;
		var tImageHeight=tTileSet.imageheight;
		var tFirstgid=tTileSet.firstgid;
		var tTileWNum=Math.floor((tImageWidth-tTileSet.margin-tTileTextureW)/ (tTileTextureW+tTileSet.spacing))+1;
		var tTileHNum=Math.floor((tImageHeight-tTileSet.margin-tTileTextureH)/ (tTileTextureH+tTileSet.spacing))+1;
		var tTileTexSet=null;
		this._texutreStartDic[tTileSet.image]=this._tileTexSetArr.length;
		for (var i=0;i < tTileHNum;i++){
			for (var j=0;j < tTileWNum;j++){
				tTileTexSet=new TileTexSet();
				tTileTexSet.offX=tTileSet.titleoffsetX;
				tTileTexSet.offY=tTileSet.titleoffsetY-(tTileTextureH-this._mapTileH);
				tTileTexSet.texture=Texture.createFromTexture(tTexture,tTileSet.margin+(tTileTextureW+tTileSet.spacing)*j,tTileSet.margin+(tTileTextureH+tTileSet.spacing)*i,tTileTextureW,tTileTextureH);
				if(this.antiCrack)
					this.adptTexture(tTileTexSet.texture);
				this._tileTexSetArr.push(tTileTexSet);
				tTileTexSet.gid=this._tileTexSetArr.length;
			}
		}
		if (this._tileSetArray.length > 0){
			tTileSet=this._currTileSet=this._tileSetArray.shift();
			this._loader.once("complete",this,this.onTextureComplete);
			var tPath=this.mergePath(this._resPath,tTileSet.image);
			this._loader.load(tPath,/*laya.net.Loader.IMAGE*/"image",false);
		}
		else {
			this._currTileSet=null;
			this.initMap();
		}
	}

	__proto.adptTexture=function(tex){
		if (!tex)return;
		var pX=tex.uv[0];
		var pX1=tex.uv[2];
		var pY=tex.uv[1];
		var pY1=tex.uv[7];
		var dW=1 / tex.bitmap.width;
		var dH=1 / tex.bitmap.height;
		tex.uv[0]=tex.uv[6]=pX+dW;
		tex.uv[2]=tex.uv[4]=pX1-dW;
		tex.uv[1]=tex.uv[3]=pY+dH;
		tex.uv[5]=tex.uv[7]=pY1-dH;
	}

	/**
	*初始化地图
	*/
	__proto.initMap=function(){
		var i=0,n=0;
		for (var p in this._animationDic){
			var tAniData=this._animationDic[p];
			var gStart=0;
			gStart=this._texutreStartDic[tAniData.image];
			var tTileTexSet=this.getTexture(parseInt(p)+gStart);
			if (tAniData.mAniIdArray.length > 0){
				tTileTexSet.textureArray=[];
				tTileTexSet.durationTimeArray=tAniData.mDurationTimeArray;
				tTileTexSet.isAnimation=true;
				tTileTexSet.animationTotalTime=0;
				for (i=0,n=tTileTexSet.durationTimeArray.length;i < n;i++){
					tTileTexSet.animationTotalTime+=tTileTexSet.durationTimeArray[i];
				}
				for (i=0,n=tAniData.mAniIdArray.length;i < n;i++){
					var tTexture=this.getTexture(tAniData.mAniIdArray[i]+gStart);
					tTileTexSet.textureArray.push(tTexture);
				}
			}
		}
		this._gridWidth=Math.floor(this._gridWidth / this._mapTileW)*this._mapTileW;
		this._gridHeight=Math.floor(this._gridHeight / this._mapTileH)*this._mapTileH;
		if (this._gridWidth < this._mapTileW){
			this._gridWidth=this._mapTileW;
		}
		if (this._gridHeight < this._mapTileH){
			this._gridHeight=this._mapTileH;
		}
		this._gridW=Math.ceil(this._width / this._gridWidth);
		this._gridH=Math.ceil(this._height / this._gridHeight);
		this._totalGridNum=this._gridW *this._gridH;
		for (i=0;i < this._gridH;i++){
			var tGridArray=[];
			this._gridArray.push(tGridArray);
			for (var j=0;j < this._gridW;j++){
				tGridArray.push(null);
			}
		};
		var tLayerArray=this._jsonData.layers;
		var isFirst=true;
		var tTarLayerID=1;
		var tLayerTarLayerName;
		var preLayerTarName;
		var preLayer;
		for (var tLayerLoop=0;tLayerLoop < tLayerArray.length;tLayerLoop++){
			var tLayerData=tLayerArray[tLayerLoop];
			if (tLayerData.visible==true){
				var tMapLayer=new MapLayer();
				tMapLayer.init(tLayerData,this);
				if (!this.enableMergeLayer){
					this._mapSprite.addChild(tMapLayer);
					this._renderLayerArray.push(tMapLayer);
					}else{
					tLayerTarLayerName=tMapLayer.getLayerProperties("layer");
					isFirst=isFirst || (!preLayer)|| (tLayerTarLayerName !=preLayerTarName);
					if (isFirst){
						isFirst=false;
						tMapLayer.tarLayer=tMapLayer;
						preLayer=tMapLayer;
						this._mapSprite.addChild(tMapLayer);
						this._renderLayerArray.push(tMapLayer);
						}else{
						tMapLayer.tarLayer=preLayer;
					}
					preLayerTarName=tLayerTarLayerName;
				}
				this._layerArray.push(tMapLayer);
			}
		}
		if (this.removeCoveredTile){
			this.adptTiledMapData();
		}
		if (this.cacheAllAfterInit){
			this.cacheAllGrid();
		}
		this.moveViewPort(this._rect.x,this._rect.y);
		Laya.stage.addChild(this.mapSprite());
		if (this._completeHandler !=null){
			this._completeHandler.run();
		}
	}

	//这里应该发送消息，通知上层，地图创建完成
	__proto.addTileProperties=function(tileDataDic){
		var key;
		for (key in tileDataDic){
			this._tileProperties2[key]=tileDataDic[key];
		}
	}

	__proto.getTileUserData=function(id,sign,defaultV){
		if (!this._tileProperties2 || !this._tileProperties2[id] || !(sign in this._tileProperties2[id]))return defaultV;
		return this._tileProperties2[id][sign];
	}

	__proto.adptTiledMapData=function(){
		var i=0,len=0;
		len=this._layerArray.length;
		var tLayer;
		var noNeeds={};
		var tDatas;
		for (i=len-1;i >=0;i--){
			tLayer=this._layerArray[i];
			tDatas=tLayer._mapData;
			if (!tDatas)continue ;
			this.removeCoverd(tDatas,noNeeds);
			this.collectCovers(tDatas,noNeeds,i);
		}
	}

	__proto.removeCoverd=function(datas,noNeeds){
		var i=0,len=0;
		len=datas.length;
		for (i=0;i < len;i++){
			if (noNeeds[i]){
				datas[i]=0;
			}
		}
	}

	__proto.collectCovers=function(datas,noNeeds,layer){
		var i=0,len=0;
		len=datas.length;
		var tTileData=0;
		var isCover=0;
		for (i=0;i < len;i++){
			tTileData=datas[i];
			if (tTileData > 0){
				isCover=this.getTileUserData(tTileData-1,"type",0);
				if (isCover > 0){
					noNeeds[i]=tTileData;
				}
			}
		}
	}

	/**
	*得到一块指定的地图纹理
	*@param index 纹理的索引值，默认从1开始
	*@return
	*/
	__proto.getTexture=function(index){
		if (index < this._tileTexSetArr.length){
			return this._tileTexSetArr[index];
		}
		return null;
	}

	/**
	*得到地图的自定义属性
	*@param name 属性名称
	*@return
	*/
	__proto.getMapProperties=function(name){
		if (this._properties){
			return this._properties[name];
		}
		return null;
	}

	/**
	*得到tile自定义属性
	*@param index 地图块索引
	*@param id 具体的TileSetID
	*@param name 属性名称
	*@return
	*/
	__proto.getTileProperties=function(index,id,name){
		if (this._tileProperties[index] && this._tileProperties[index][id]){
			return this._tileProperties[index][id][name];
		}
		return null;
	}

	/**
	*通过纹理索引，生成一个可控制物件
	*@param index 纹理的索引值，默认从1开始
	*@return
	*/
	__proto.getSprite=function(index,width,height){
		if (0 < this._tileTexSetArr.length){
			var tGridSprite=new GridSprite();
			tGridSprite.initData(this,true);
			tGridSprite.size(width,height);
			var tTileTexSet=this._tileTexSetArr[index];
			if (tTileTexSet !=null && tTileTexSet.texture !=null){
				if (tTileTexSet.isAnimation){
					var tAnimationSprite=new TileAniSprite();
					this._index++;
					tAnimationSprite.setTileTextureSet(this._index.toString(),tTileTexSet);
					tGridSprite.addAniSprite(tAnimationSprite);
					tGridSprite.addChild(tAnimationSprite);
				}
				else {
					tGridSprite.graphics.drawTexture(tTileTexSet.texture,0,0,width,height);
				}
				tGridSprite.drawImageNum++;
			}
			return tGridSprite;
		}
		return null;
	}

	/**
	*设置视口的缩放中心点（例如：scaleX=scaleY=0.5,就是以视口中心缩放）
	*@param scaleX
	*@param scaleY
	*/
	__proto.setViewPortPivotByScale=function(scaleX,scaleY){
		this._pivotScaleX=scaleX;
		this._pivotScaleY=scaleY;
		this._fastDirty=true;
	}

	/**
	*移动视口
	*@param moveX 视口的坐标x
	*@param moveY 视口的坐标y
	*/
	__proto.moveViewPort=function(moveX,moveY){
		this._x=-moveX;
		this._y=-moveY;
		if (this._fastDirty){
			this._rect.x=moveX;
			this._rect.y=moveY;
			this.updateViewPort();
			}else{
			var dx=NaN,dy=NaN;
			dx=moveX-this._rect.x;
			dy=moveY-this._rect.y;
			this._rect.x=moveX;
			this._rect.y=moveY;
			this.updateViewPortFast(dx,dy);
		}
	}

	/**
	*改变视口大小
	*@param moveX 视口的坐标x
	*@param moveY 视口的坐标y
	*@param width 视口的宽
	*@param height 视口的高
	*/
	__proto.changeViewPort=function(moveX,moveY,width,height){
		if (moveX==this._rect.x && moveY==this._rect.y && width==this._rect.width && height==this._rect.height)return;
		if (width==this._rect.width && height==this._rect.height){
			this.moveViewPort(moveX,moveY);
			return;
		}
		this._fastDirty=true;
		this._x=-moveX;
		this._y=-moveY;
		this._rect.x=moveX;
		this._rect.y=moveY;
		this._rect.width=width;
		this._rect.height=height;
		this._viewPortWidth=width / this._scale;
		this._viewPortHeight=height / this._scale;
		this.updateViewPort();
	}

	/**
	*在锚点的基础上计算，通过宽和高，重新计算视口
	*@param width 新视口宽
	*@param height 新视口高
	*@param rect 返回的结果
	*@return
	*/
	__proto.changeViewPortBySize=function(width,height,rect){
		if (rect==null){
			rect=new Rectangle();
		}
		this._centerX=this._rect.x+this._rect.width *this._pivotScaleX;
		this._centerY=this._rect.y+this._rect.height *this._pivotScaleY;
		rect.x=this._centerX-width *this._pivotScaleX;
		rect.y=this._centerY-height *this._pivotScaleY;
		rect.width=width;
		rect.height=height;
		this.changeViewPort(rect.x,rect.y,rect.width,rect.height);
		return rect;
	}

	/**
	*快速更新视口 ,只有在视口大小和各种缩放信息没有改变时才可以使用这个函数更新
	*@param dx 视口偏移x
	*@param dy 视口偏移y
	*/
	__proto.updateViewPortFast=function(dx,dy){
		this._centerX+=dx;
		this._centerY+=dy;
		this._viewPortX+=dx;
		this._viewPortY+=dy;
		var posChanged=false;
		var dyG=dy / this._gridHeight;
		var dxG=dx / this._gridWidth;
		this._mapLogicRect.top+=dyG;
		this._mapLogicRect.bottom+=dyG;
		this._mapLogicRect.left+=dxG;
		this._mapLogicRect.right+=dxG;
		this._mapRect.top=0|this._mapLogicRect.top;
		this._mapRect.bottom=0|this._mapLogicRect.bottom;
		this._mapRect.left=0|this._mapLogicRect.left;
		this._mapRect.right=0|this._mapLogicRect.right;
		if (this._mapRect.top !=this._mapLastRect.top || this._mapRect.bottom !=this._mapLastRect.bottom || this._mapRect.left !=this._mapLastRect.left || this._mapRect.right !=this._mapLastRect.right){
			this.clipViewPort();
			this._mapLastRect.top=this._mapRect.top;
			this._mapLastRect.bottom=this._mapRect.bottom;
			this._mapLastRect.left=this._mapRect.left;
			this._mapLastRect.right=this._mapRect.right;
			posChanged=true;
		};posChanged=posChanged|| (dx !=0 || dy !=0);
		if (!posChanged)return;
		this.updateMapLayersPos();
	}

	/**
	*刷新地图层坐标
	*/
	__proto.updateMapLayersPos=function(){
		var tMapLayer;
		var len=this._renderLayerArray.length;
		for (var i=0;i < len;i++){
			tMapLayer=this._renderLayerArray[i];
			if (tMapLayer._gridSpriteArray.length > 0){
				tMapLayer.updateAloneObject();
				tMapLayer.pos(-this._viewPortX,-this._viewPortY);
			}
		}
	}

	/**
	*刷新视口
	*/
	__proto.updateViewPort=function(){
		this._fastDirty=false;
		var dw=this._rect.width *this._pivotScaleX;
		var dh=this._rect.height *this._pivotScaleY;
		this._centerX=this._rect.x+dw;
		this._centerY=this._rect.y+dh;
		var posChanged=false;
		var preValue=this._viewPortX;
		this._viewPortX=this._centerX-dw / this._scale;
		if (preValue !=this._viewPortX){
			posChanged=true;
			}else {
			preValue=this._viewPortY;
		}
		this._viewPortY=this._centerY-dh/ this._scale;
		if (!posChanged && preValue !=this._viewPortY){
			posChanged=true;
		}
		if (this._limitRange){
			var tRight=this._viewPortX+this._viewPortWidth;
			if (tRight > this._width){
				this._viewPortX=this._width-this._viewPortWidth;
			};
			var tBottom=this._viewPortY+this._viewPortHeight;
			if (tBottom > this._height){
				this._viewPortY=this._height-this._viewPortHeight;
			}
			if (this._viewPortX < 0){
				this._viewPortX=0;
			}
			if (this._viewPortY < 0){
				this._viewPortY=0;
			}
		};
		var tPaddingRect=this._paddingRect;
		this._mapLogicRect.top=(this._viewPortY-tPaddingRect.y)/ this._gridHeight;
		this._mapLogicRect.bottom=(this._viewPortY+this._viewPortHeight+tPaddingRect.height+tPaddingRect.y)/ this._gridHeight;
		this._mapLogicRect.left=(this._viewPortX-tPaddingRect.x)/ this._gridWidth;
		this._mapLogicRect.right=(this._viewPortX+this._viewPortWidth+tPaddingRect.width+tPaddingRect.x)/ this._gridWidth;
		this._mapRect.top=0|this._mapLogicRect.top;
		this._mapRect.bottom=0|this._mapLogicRect.bottom;
		this._mapRect.left=0|this._mapLogicRect.left;
		this._mapRect.right=0|this._mapLogicRect.right;
		if (this._mapRect.top !=this._mapLastRect.top || this._mapRect.bottom !=this._mapLastRect.bottom || this._mapRect.left !=this._mapLastRect.left || this._mapRect.right !=this._mapLastRect.right){
			this.clipViewPort();
			this._mapLastRect.top=this._mapRect.top;
			this._mapLastRect.bottom=this._mapRect.bottom;
			this._mapLastRect.left=this._mapRect.left;
			this._mapLastRect.right=this._mapRect.right;
			posChanged=true;
		}
		if (!posChanged)return;
		this.updateMapLayersPos();
	}

	/**
	*GRID裁剪
	*/
	__proto.clipViewPort=function(){
		var tSpriteNum=0;
		var tSprite;
		var tIndex=0;
		var tSub=0;
		var tAdd=0;
		var i=0,j=0;
		if (this._mapRect.left > this._mapLastRect.left){
			tSub=this._mapRect.left-this._mapLastRect.left;
			if (tSub > 0){
				for (j=this._mapLastRect.left;j < this._mapLastRect.left+tSub;j++){
					for (i=this._mapLastRect.top;i <=this._mapLastRect.bottom;i++){
						this.hideGrid(j,i);
					}
				}
			}
		}
		else {
			tAdd=Math.min(this._mapLastRect.left,this._mapRect.right+1)-this._mapRect.left;
			if (tAdd > 0){
				for (j=this._mapRect.left;j < this._mapRect.left+tAdd;j++){
					for (i=this._mapRect.top;i <=this._mapRect.bottom;i++){
						this.showGrid(j,i);
					}
				}
			}
		}
		if (this._mapRect.right > this._mapLastRect.right){
			tAdd=this._mapRect.right-this._mapLastRect.right;
			if (tAdd > 0){
				for (j=Math.max(this._mapLastRect.right+1,this._mapRect.left);j <=this._mapLastRect.right+tAdd;j++){
					for (i=this._mapRect.top;i <=this._mapRect.bottom;i++){
						this.showGrid(j,i);
					}
				}
			}
		}
		else {
			tSub=this._mapLastRect.right-this._mapRect.right
			if (tSub > 0){
				for (j=this._mapRect.right+1;j <=this._mapRect.right+tSub;j++){
					for (i=this._mapLastRect.top;i <=this._mapLastRect.bottom;i++){
						this.hideGrid(j,i);
					}
				}
			}
		}
		if (this._mapRect.top > this._mapLastRect.top){
			tSub=this._mapRect.top-this._mapLastRect.top;
			if (tSub > 0){
				for (i=this._mapLastRect.top;i < this._mapLastRect.top+tSub;i++){
					for (j=this._mapLastRect.left;j <=this._mapLastRect.right;j++){
						this.hideGrid(j,i);
					}
				}
			}
		}
		else {
			tAdd=Math.min(this._mapLastRect.top,this._mapRect.bottom+1)-this._mapRect.top;
			if (tAdd > 0){
				for (i=this._mapRect.top;i < this._mapRect.top+tAdd;i++){
					for (j=this._mapRect.left;j <=this._mapRect.right;j++){
						this.showGrid(j,i);
					}
				}
			}
		}
		if (this._mapRect.bottom > this._mapLastRect.bottom){
			tAdd=this._mapRect.bottom-this._mapLastRect.bottom;
			if (tAdd > 0){
				for (i=Math.max(this._mapLastRect.bottom+1,this._mapRect.top);i <=this._mapLastRect.bottom+tAdd;i++){
					for (j=this._mapRect.left;j <=this._mapRect.right;j++){
						this.showGrid(j,i);
					}
				}
			}
		}
		else {
			tSub=this._mapLastRect.bottom-this._mapRect.bottom
			if (tSub > 0){
				for (i=this._mapRect.bottom+1;i <=this._mapRect.bottom+tSub;i++){
					for (j=this._mapLastRect.left;j <=this._mapLastRect.right;j++){
						this.hideGrid(j,i);
					}
				}
			}
		}
	}

	/**
	*显示指定的GRID
	*@param gridX
	*@param gridY
	*/
	__proto.showGrid=function(gridX,gridY){
		if (gridX < 0 || gridX >=this._gridW || gridY < 0 || gridY >=this._gridH){
			return;
		};
		var i=0,j=0;
		var tGridSprite;
		var tTempArray=this._gridArray[gridY][gridX];
		if (tTempArray==null){
			tTempArray=this.getGridArray(gridX,gridY);
		}
		else {
			for (i=0;i < tTempArray.length && i < this._layerArray.length;i++){
				var tLayerSprite=this._layerArray[i];
				if (tLayerSprite && tTempArray[i]){
					tGridSprite=tTempArray[i];
					if (tGridSprite.visible==false && tGridSprite.drawImageNum > 0){
						tGridSprite.show();
					}
				}
			}
		}
	}

	__proto.cacheAllGrid=function(){
		var i=0,j=0;
		var tempArr;
		for (i=0;i < this._gridW;i++){
			for (j=0;j < this._gridH;j++){
				tempArr=this.getGridArray(i,j);
				this.cacheGridsArray(tempArr);
			}
		}
	}

	__proto.cacheGridsArray=function(arr){
		var canvas;
		if (!TiledMap._tempContext){
			TiledMap._tempContext=new RenderContext(1,1,HTMLCanvas.create(/*laya.resource.HTMLCanvas.TYPEAUTO*/"AUTO"));
		}
		canvas=TiledMap._tempContext.canvas;
		canvas.context.asBitmap=false;
		var i=0,len=0;
		len=arr.length;
		var tGrid;
		for (i=0;i < len;i++){
			tGrid=arr[i];
			canvas.clear();
			canvas.size(1,1);
			tGrid.render(TiledMap._tempContext,0,0);
			tGrid.hide();
		}
		canvas.clear();
		canvas.size(1,1);
	}

	__proto.getGridArray=function(gridX,gridY){
		var i=0,j=0;
		var tGridSprite;
		var tTempArray=this._gridArray[gridY][gridX];
		if (tTempArray==null){
			tTempArray=this._gridArray[gridY][gridX]=[];
			var tLeft=0;
			var tRight=0;
			var tTop=0;
			var tBottom=0;
			var tGridWidth=this._gridWidth;
			var tGridHeight=this._gridHeight;
			switch (this.orientation){
				case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":
					tLeft=Math.floor(gridX *tGridWidth);
					tRight=Math.floor(gridX *tGridWidth+tGridWidth);
					tTop=Math.floor(gridY *tGridHeight);
					tBottom=Math.floor(gridY *tGridHeight+tGridHeight);
					var tLeft1=0,tRight1=0,tTop1=0,tBottom1=0;
					break ;
				case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
					tLeft=Math.floor(gridX *tGridWidth / this._mapTileW);
					tRight=Math.floor((gridX *tGridWidth+tGridWidth)/ this._mapTileW);
					tTop=Math.floor(gridY *tGridHeight / (this._mapTileH / 2));
					tBottom=Math.floor((gridY *tGridHeight+tGridHeight)/ (this._mapTileH / 2));
					break ;
				case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
					tLeft=Math.floor(gridX *tGridWidth / this._mapTileW);
					tRight=Math.floor((gridX *tGridWidth+tGridWidth)/ this._mapTileW);
					tTop=Math.floor(gridY *tGridHeight / this._mapTileH);
					tBottom=Math.floor((gridY *tGridHeight+tGridHeight)/ this._mapTileH);
					break ;
				case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":;
					var tHeight=this._mapTileH *2 / 3;
					tLeft=Math.floor(gridX *tGridWidth / this._mapTileW);
					tRight=Math.ceil((gridX *tGridWidth+tGridWidth)/ this._mapTileW);
					tTop=Math.floor(gridY *tGridHeight / tHeight);
					tBottom=Math.ceil((gridY *tGridHeight+tGridHeight)/ tHeight);
					break ;
				};
			var tLayer=null;
			var tTGridSprite;
			var tDrawMapLayer;
			for (var z=0;z < this._layerArray.length;z++){
				tLayer=this._layerArray[z];
				if (this.enableMergeLayer){
					if (tLayer.tarLayer !=tDrawMapLayer){
						tTGridSprite=null;
						tDrawMapLayer=tLayer.tarLayer;
					}
					if (!tTGridSprite){
						tTGridSprite=tDrawMapLayer.getDrawSprite(gridX,gridY);
						tTempArray.push(tTGridSprite);
					}
					tGridSprite=tTGridSprite;
				}
				else {
					tGridSprite=tLayer.getDrawSprite(gridX,gridY);
					tTempArray.push(tGridSprite);
				};
				var tColorStr;
				if (this._showGridKey){
					tColorStr="#";
					tColorStr+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)];
					tColorStr+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)];
					tColorStr+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)];
				}
				switch (this.orientation){
					case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":;
						var tHalfTileHeight=this.tileHeight / 2;
						var tHalfTileWidth=this.tileWidth / 2;
						var tHalfMapWidth=this._width / 2;
						tTop1=Math.floor(tTop / tHalfTileHeight);
						tBottom1=Math.floor(tBottom / tHalfTileHeight);
						tLeft1=this._mapW+Math.floor((tLeft-tHalfMapWidth)/ tHalfTileWidth);
						tRight1=this._mapW+Math.floor((tRight-tHalfMapWidth)/ tHalfTileWidth);
						var tMapW=this._mapW *2;
						var tMapH=this._mapH *2;
						if (tTop1 < 0){
							tTop1=0;
						}
						if (tTop1 >=tMapH){
							tTop1=tMapH-1;
						}
						if (tBottom1 < 0){
							tBottom=0;
						}
						if (tBottom1 >=tMapH){
							tBottom1=tMapH-1;
						}
						tGridSprite.zOrder=this._totalGridNum *z+gridY *this._gridW+gridX;
						for (i=tTop1;i < tBottom1;i++){
							for (j=0;j <=i;j++){
								var tIndexX=i-j;
								var tIndexY=j;
								var tIndexValue=(tIndexX-tIndexY)+this._mapW;
								if (tIndexValue > tLeft1 && tIndexValue <=tRight1){
									if (tLayer.drawTileTexture(tGridSprite,tIndexX,tIndexY)){
										tGridSprite.drawImageNum++;
									}
								}
							}
						}
						break ;
					case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
						tGridSprite.zOrder=z *this._totalGridNum+gridY *this._gridW+gridX;
						for (i=tTop;i < tBottom;i++){
							for (j=tLeft;j < tRight;j++){
								if (tLayer.drawTileTexture(tGridSprite,j,i)){
									tGridSprite.drawImageNum++;
								}
							}
						}
						break ;
					case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
					case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":
					switch (this._renderOrder){
						case "right-down":
							tGridSprite.zOrder=z *this._totalGridNum+gridY *this._gridW+gridX;
							for (i=tTop;i < tBottom;i++){
								for (j=tLeft;j < tRight;j++){
									if (tLayer.drawTileTexture(tGridSprite,j,i)){
										tGridSprite.drawImageNum++;
									}
								}
							}
							break ;
						case "right-up":
							tGridSprite.zOrder=z *this._totalGridNum+(this._gridH-1-gridY)*this._gridW+gridX;
							for (i=tBottom-1;i >=tTop;i--){
								for (j=tLeft;j < tRight;j++){
									if (tLayer.drawTileTexture(tGridSprite,j,i)){
										tGridSprite.drawImageNum++;
									}
								}
							}
							break ;
						case "left-down":
							tGridSprite.zOrder=z *this._totalGridNum+gridY *this._gridW+(this._gridW-1-gridX);
							for (i=tTop;i < tBottom;i++){
								for (j=tRight-1;j >=tLeft;j--){
									if (tLayer.drawTileTexture(tGridSprite,j,i)){
										tGridSprite.drawImageNum++;
									}
								}
							}
							break ;
						case "left-up":
							tGridSprite.zOrder=z *this._totalGridNum+(this._gridH-1-gridY)*this._gridW+(this._gridW-1-gridX);
							for (i=tBottom-1;i >=tTop;i--){
								for (j=tRight-1;j >=tLeft;j--){
									if (tLayer.drawTileTexture(tGridSprite,j,i)){
										tGridSprite.drawImageNum++;
									}
								}
							}
							break ;
						}
					break ;
				}
				if (!tGridSprite.isHaveAnimation){
					tGridSprite.autoSize=true;
					if (this.autoCache)
						tGridSprite.cacheAs=this.autoCacheType;
					tGridSprite.autoSize=false;
				}
				if (!this.enableMergeLayer){
					if (tGridSprite.drawImageNum > 0){
						tLayer.addChild(tGridSprite);
						tGridSprite.visible=false;
						tGridSprite.show();
					}
					if (this._showGridKey){
						tGridSprite.graphics.drawRect(0,0,tGridWidth,tGridHeight,null,tColorStr);
					}
					}else{
					if (tTGridSprite && tTGridSprite.drawImageNum > 0&&tDrawMapLayer){
						tDrawMapLayer.addChild(tTGridSprite);
						tTGridSprite.visible=false;
						tTGridSprite.show();
					}
				}
			}
			if (this.enableMergeLayer&&this.showGridTextureCount){
				if (tTGridSprite){
					tTGridSprite.graphics.fillText(tTGridSprite.drawImageNum+"",20,20,null,"#ff0000","left");
				}
			}
		}
		return tTempArray;
	}

	/**
	*隐藏指定的GRID
	*@param gridX
	*@param gridY
	*/
	__proto.hideGrid=function(gridX,gridY){
		if (gridX < 0 || gridX >=this._gridW || gridY < 0 || gridY >=this._gridH){
			return;
		};
		var tTempArray=this._gridArray[gridY][gridX];
		if (tTempArray){
			var tGridSprite;
			for (var i=0;i < tTempArray.length;i++){
				tGridSprite=tTempArray[i];
				if (tGridSprite.drawImageNum > 0){
					if (tGridSprite !=null){
						tGridSprite.hide();
					}
				}
			}
		}
	}

	/**
	*得到对象层上的某一个物品
	*@param layerName 层的名称
	*@param objectName 所找物品的名称
	*@return
	*/
	__proto.getLayerObject=function(layerName,objectName){
		var tLayer=null;
		for (var i=0;i < this._layerArray.length;i++){
			tLayer=this._layerArray[i];
			if (tLayer.layerName==layerName){
				break ;
			}
		}
		if (tLayer){
			return tLayer.getObjectByName(objectName);
		}
		return null;
	}

	/**
	*销毁地图
	*/
	__proto.destroy=function(){
		this._orientation="orthogonal";
		this._jsonData=null;
		var i=0;
		var j=0;
		var z=0;
		this._gridArray=[];
		var tTileTexSet;
		for (i=0;i < this._tileTexSetArr.length;i++){
			tTileTexSet=this._tileTexSetArr[i];
			if (tTileTexSet){
				tTileTexSet.clearAll();
			}
		}
		this._tileTexSetArr=[];
		var tTexture;
		for (i=0;i < this._texArray.length;i++){
			tTexture=this._texArray[i];
			tTexture.destroy();
		}
		this._texArray=[];
		this._width=0;
		this._height=0;
		this._mapW=0;
		this._mapH=0;
		this._mapTileW=0;
		this._mapTileH=0;
		this._rect.setTo(0,0,0,0);
		var tLayer;
		for (i=0;i < this._layerArray.length;i++){
			tLayer=this._layerArray[i];
			tLayer.clearAll();
		}
		this._layerArray=[];
		this._renderLayerArray=[];
		if (this._mapSprite){
			this._mapSprite.destroy();
			this._mapSprite=null;
		}
		this._jsonLoader=null;
		this._loader=null;
		var tDic=this._animationDic;
		for (var p in tDic){
			delete tDic[p];
		}
		this._properties=null;
		tDic=this._tileProperties;
		for (p in tDic){
			delete tDic[p];
		}
		this._currTileSet=null;
		this._completeHandler=null;
		this._mapRect.clearAll();
		this._mapLastRect.clearAll();
		this._tileSetArray=[];
		this._gridWidth=450;
		this._gridHeight=450;
		this._gridW=0;
		this._gridH=0;
		this._x=0;
		this._y=0;
		this._index=0;
		this._enableLinear=true;
		this._resPath=null;
		this._pathArray=null;
	}

	/**
	*整个地图的显示容器
	*@return 地图的显示容器
	*/
	__proto.mapSprite=function(){
		return this._mapSprite;
	}

	/**
	*得到指定的MapLayer
	*@param layerName 要找的层名称
	*@return
	*/
	__proto.getLayerByName=function(layerName){
		var tMapLayer;
		for (var i=0;i < this._layerArray.length;i++){
			tMapLayer=this._layerArray[i];
			if (layerName==tMapLayer.layerName){
				return tMapLayer;
			}
		}
		return null;
	}

	/**
	*通过索引得MapLayer
	*@param index 要找的层索引
	*@return
	*/
	__proto.getLayerByIndex=function(index){
		if (index < this._layerArray.length){
			return this._layerArray[index];
		}
		return null;
	}

	/**
	*当前地图类型
	*/
	__getset(0,__proto,'orientation',function(){
		return this._orientation;
	});

	/**
	*@private
	*视口x坐标
	*/
	__getset(0,__proto,'viewPortX',function(){
		return-this._viewPortX;
	});

	/**
	*设置地图缩放
	*@param scale
	*/
	/**
	*得到当前地图的缩放
	*/
	__getset(0,__proto,'scale',function(){
		return this._scale;
		},function(scale){
		if (scale <=0)
			return;
		this._scale=scale;
		this._viewPortWidth=this._rect.width / scale;
		this._viewPortHeight=this._rect.height / scale;
		this._mapSprite.scale(this._scale,this._scale);
		this.updateViewPort();
	});

	/**
	*格子的宽度
	*/
	__getset(0,__proto,'tileWidth',function(){
		return this._mapTileW;
	});

	/**
	*@private
	*视口的y坐标
	*/
	__getset(0,__proto,'viewPortY',function(){
		return-this._viewPortY;
	});

	/**
	*格子的高度
	*/
	__getset(0,__proto,'tileHeight',function(){
		return this._mapTileH;
	});

	/**
	*地图的宽度
	*/
	__getset(0,__proto,'width',function(){
		return this._width;
	});

	/**
	*地图竖向的格子数
	*/
	__getset(0,__proto,'numRowsTile',function(){
		return this._mapH;
	});

	/**
	*地图横向的格子数
	*/
	__getset(0,__proto,'numColumnsTile',function(){
		return this._mapW;
	});

	/**
	*地图的高度
	*/
	__getset(0,__proto,'height',function(){
		return this._height;
	});

	/**
	*@private
	*视口的宽度
	*/
	__getset(0,__proto,'viewPortWidth',function(){
		return this._viewPortWidth;
	});

	/**
	*@private
	*视口的高度
	*/
	__getset(0,__proto,'viewPortHeight',function(){
		return this._viewPortHeight;
	});

	/**
	*地图的x坐标
	*/
	__getset(0,__proto,'x',function(){
		return this._x;
	});

	/**
	*地图的y坐标
	*/
	__getset(0,__proto,'y',function(){
		return this._y;
	});

	/**
	*块的宽度
	*/
	__getset(0,__proto,'gridWidth',function(){
		return this._gridWidth;
	});

	/**
	*块的高度
	*/
	__getset(0,__proto,'gridHeight',function(){
		return this._gridHeight;
	});

	/**
	*地图的横向块数
	*/
	__getset(0,__proto,'numColumnsGrid',function(){
		return this._gridW;
	});

	/**
	*地图的坚向块数
	*/
	__getset(0,__proto,'numRowsGrid',function(){
		return this._gridH;
	});

	/**
	*tile渲染顺序
	*/
	__getset(0,__proto,'renderOrder',function(){
		return this._renderOrder;
	});

	TiledMap.ORIENTATION_ORTHOGONAL="orthogonal";
	TiledMap.ORIENTATION_ISOMETRIC="isometric";
	TiledMap.ORIENTATION_STAGGERED="staggered";
	TiledMap.ORIENTATION_HEXAGONAL="hexagonal";
	TiledMap.RENDERORDER_RIGHTDOWN="right-down";
	TiledMap.RENDERORDER_RIGHTUP="right-up";
	TiledMap.RENDERORDER_LEFTDOWN="left-down";
	TiledMap.RENDERORDER_LEFTUP="left-up";
	TiledMap._tempContext=null;
	TiledMap.__init$=function(){
		//class GRect
		GRect=(function(){
			function GRect(){
				this.left=0;
				this.top=0;
				this.right=0;
				this.bottom=0;
			}
			__class(GRect,'');
			var __proto=GRect.prototype;
			__proto.clearAll=function(){
				this.left=this.top=this.right=this.bottom=0;
			}
			return GRect;
		})()
		//class TileMapAniData
		TileMapAniData=(function(){
			function TileMapAniData(){
				this.mAniIdArray=[];
				this.mDurationTimeArray=[];
				this.mTileTexSetArr=[];
				this.image=null;
			}
			__class(TileMapAniData,'');
			return TileMapAniData;
		})()
		//class TileSet
		TileSet=(function(){
			function TileSet(){
				this.firstgid=0;
				this.image="";
				this.imageheight=0;
				this.imagewidth=0;
				this.margin=0;
				this.name=0;
				this.properties=null;
				this.spacing=0;
				this.tileheight=0;
				this.tilewidth=0;
				this.titleoffsetX=0;
				this.titleoffsetY=0;
				this.tileproperties=null;
			}
			__class(TileSet,'');
			var __proto=TileSet.prototype;
			__proto.init=function(data){
				this.firstgid=data.firstgid;
				this.image=data.image;
				this.imageheight=data.imageheight;
				this.imagewidth=data.imagewidth;
				this.margin=data.margin;
				this.name=data.name;
				this.properties=data.properties;
				this.spacing=data.spacing;
				this.tileheight=data.tileheight;
				this.tilewidth=data.tilewidth;
				this.tileproperties=data.tileproperties;
				var tTileoffset=data.tileoffset;
				if (tTileoffset){
					this.titleoffsetX=tTileoffset.x;
					this.titleoffsetY=tTileoffset.y;
				}
			}
			return TileSet;
		})()
	}

	return TiledMap;
})()


/**
*此类是子纹理类，也包括同类动画的管理
*TiledMap会把纹理分割成无数子纹理，也可以把其中的某块子纹理替换成一个动画序列
*本类的实现就是如果发现子纹理被替换成一个动画序列，animationKey会被设为true
*即animationKey为true,就使用TileAniSprite来做显示，把动画序列根据时间画到TileAniSprite上
*@author ...
*/
//class laya.map.TileTexSet
var TileTexSet=(function(){
	function TileTexSet(){
		/**唯一标识*/
		this.gid=-1;
		/**子纹理的引用*/
		this.texture=null;
		/**纹理显示时的坐标偏移X*/
		this.offX=0;
		/**纹理显示时的坐标偏移Y*/
		this.offY=0;
		/**当前要播放动画的纹理序列*/
		this.textureArray=null;
		/**当前动画每帧的时间间隔*/
		this.durationTimeArray=null;
		/**动画播放的总时间 */
		this.animationTotalTime=0;
		/**true表示当前纹理，是一组动画，false表示当前只有一个纹理*/
		this.isAnimation=false;
		this._spriteNum=0;
		//当前动画有多少个显示对象
		this._aniDic=null;
		//通过显示对象的唯一名字，去保存显示显示对象
		this._frameIndex=0;
		//当前动画播放到第几帧
		this._time=0;
		//距离上次动画刷新，过了多少长时间
		this._interval=0;
		//每帧刷新的时间间隔
		this._preFrameTime=0;
	}

	__class(TileTexSet,'laya.map.TileTexSet');
	var __proto=TileTexSet.prototype;
	/**
	*加入一个动画显示对象到此动画中
	*@param aniName //显示对象的名字
	*@param sprite //显示对象
	*/
	__proto.addAniSprite=function(aniName,sprite){
		if (this.animationTotalTime==0){
			return;
		}
		if (this._aniDic==null){
			this._aniDic={};
		}
		if (this._spriteNum==0){
			Laya.timer.frameLoop(3,this,this.animate);
			this._preFrameTime=Browser.now();
			this._frameIndex=0;
			this._time=0;
			this._interval=0;
		}
		this._spriteNum++;
		this._aniDic[aniName]=sprite;
		if (this.textureArray && this._frameIndex < this.textureArray.length){
			var tTileTextureSet=this.textureArray[this._frameIndex];
			this.drawTexture(sprite,tTileTextureSet);
		}
	}

	/**
	*把动画画到所有注册的SPRITE上
	*/
	__proto.animate=function(){
		if (this.textureArray && this.textureArray.length > 0 && this.durationTimeArray && this.durationTimeArray.length > 0){
			var tNow=Browser.now();
			this._interval=tNow-this._preFrameTime;
			this._preFrameTime=tNow;
			if (this._interval > this.animationTotalTime){
				this._interval=this._interval % this.animationTotalTime;
			}
			this._time+=this._interval;
			var tTime=this.durationTimeArray[this._frameIndex];
			while (this._time > tTime){
				this._time-=tTime;
				this._frameIndex++;
				if (this._frameIndex >=this.durationTimeArray.length || this._frameIndex >=this.textureArray.length){
					this._frameIndex=0;
				};
				var tTileTextureSet=this.textureArray[this._frameIndex];
				var tSprite;
				for (var p in this._aniDic){
					tSprite=this._aniDic[p];
					this.drawTexture(tSprite,tTileTextureSet);
				}
				tTime=this.durationTimeArray[this._frameIndex];
			}
		}
	}

	__proto.drawTexture=function(sprite,tileTextSet){
		sprite.graphics.clear();
		sprite.graphics.drawTexture(tileTextSet.texture,tileTextSet.offX,tileTextSet.offY);
	}

	/**
	*移除不需要更新的SPRITE
	*@param _name
	*/
	__proto.removeAniSprite=function(_name){
		if (this._aniDic && this._aniDic[_name]){
			delete this._aniDic[_name];
			this._spriteNum--
			if (this._spriteNum==0){
				Laya.timer.clear(this,this.animate);
			}
		}
	}

	/**
	*显示当前动画的使用情况
	*/
	__proto.showDebugInfo=function(){
		var tInfo=null;
		if (this._spriteNum > 0){
			tInfo="TileTextureSet::gid:"+this.gid.toString()+" 动画数:"+this._spriteNum.toString();
		}
		return tInfo;
	}

	/**
	*清理
	*/
	__proto.clearAll=function(){
		this.gid=-1;
		if (this.texture){
			this.texture.destroy();
			this.texture=null;
		}
		this.offX=0;
		this.offY=0;
		this.textureArray=null;
		this.durationTimeArray=null;
		this.isAnimation=false;
		this._spriteNum=0;
		this._aniDic=null;
		this._frameIndex=0;
		this._preFrameTime=0;
		this._time=0;
		this._interval=0;
	}

	return TileTexSet;
})()


/**
*地图的每层都会分块渲染处理
*本类就是地图的块数据
*@author ...
*/
//class laya.map.GridSprite extends laya.display.Sprite
var GridSprite=(function(_super){
	function GridSprite(){
		/**相对于地图X轴的坐标*/
		this.relativeX=0;
		/**相对于地图Y轴的坐标*/
		this.relativeY=0;
		/**是否用于对象层的独立物件*/
		this.isAloneObject=false;
		/**当前GRID中是否有动画*/
		this.isHaveAnimation=false;
		/**当前GRID包含的动画*/
		this.aniSpriteArray=null;
		/**当前GRID包含多少个TILE(包含动画)*/
		this.drawImageNum=0;
		this._map=null;
		GridSprite.__super.call(this);
	}

	__class(GridSprite,'laya.map.GridSprite',_super);
	var __proto=GridSprite.prototype;
	/**
	*传入必要的参数，用于裁剪，跟确认此对象类型
	*@param map 把地图的引用传进来，参与一些裁剪计算
	*@param objectKey true:表示当前GridSprite是个活动对象，可以控制，false:地图层的组成块
	*/
	__proto.initData=function(map,objectKey){
		(objectKey===void 0)&& (objectKey=false);
		this._map=map;
		this.isAloneObject=objectKey;
	}

	/**@private */
	__proto._setDisplay=function(value){
		if (!value){
			var cc=this._$P.cacheCanvas;
			if (cc && cc.ctx){
				cc.ctx.canvas.destroy();
				cc.ctx=null;
			};
			var fc=this._$P._filterCache;
			if (fc){
				fc.destroy();
				fc.recycle();
				this._set$P('_filterCache',null);
			}
			this._$P._isHaveGlowFilter && this._set$P('_isHaveGlowFilter',false);
		}
		_super.prototype._setDisplay.call(this,value);
	}

	/**
	*把一个动画对象绑定到当前GridSprite
	*@param sprite 动画的显示对象
	*/
	__proto.addAniSprite=function(sprite){
		if (this.aniSpriteArray==null){
			this.aniSpriteArray=[];
		}
		this.aniSpriteArray.push(sprite);
	}

	/**
	*显示当前GridSprite，并把上面的动画全部显示
	*/
	__proto.show=function(){
		if (!this.visible){
			this.visible=true;
			if (!this.isAloneObject){
				var tParent;
				tParent=this.parent;
				if (tParent){
					tParent.showGridSprite(this);
				}
			}
			if (!Render.isWebGL&&this._map.autoCache){
				this.cacheAs=this._map.autoCacheType;
			}
			if (this.aniSpriteArray==null){
				return;
			};
			var tAniSprite;
			for (var i=0;i < this.aniSpriteArray.length;i++){
				tAniSprite=this.aniSpriteArray[i];
				tAniSprite.show();
			}
		}
	}

	/**
	*隐藏当前GridSprite，并把上面绑定的动画全部移除
	*/
	__proto.hide=function(){
		if (this.visible){
			this.visible=false;
			if (!this.isAloneObject){
				var tParent;
				tParent=this.parent;
				if (tParent){
					tParent.hideGridSprite(this);
				}
			}
			if (!Render.isWebGL&&this._map.autoCache){
				this.cacheAs="none";
			}
			if (this.aniSpriteArray==null){
				return;
			};
			var tAniSprite;
			for (var i=0;i < this.aniSpriteArray.length;i++){
				tAniSprite=this.aniSpriteArray[i];
				tAniSprite.hide();
			}
		}
	}

	/**
	*刷新坐标，当我们自己控制一个GridSprite移动时，需要调用此函数，手动刷新
	*/
	__proto.updatePos=function(){
		if (this.isAloneObject){
			if (this._map){
				this.x=this.relativeX;
				this.y=this.relativeY;
			}
			if (this.x < 0 || this.x > this._map.viewPortWidth || this.y < 0 || this.y > this._map.viewPortHeight){
				this.hide();
				}else {
				this.show();
			}
			}else {
			if (this._map){
				this.x=this.relativeX;
				this.y=this.relativeY;
			}
		}
	}

	/**
	*重置当前对象的所有属性
	*/
	__proto.clearAll=function(){
		if (this._map){
			this._map=null;
		}
		this.visible=false;
		var tAniSprite;
		if (this.aniSpriteArray !=null){
			for (var i=0;i < this.aniSpriteArray.length;i++){
				tAniSprite=this.aniSpriteArray[i];
				tAniSprite.clearAll();
			}
		}
		this.destroy();
		this.relativeX=0;
		this.relativeY=0;
		this.isHaveAnimation=false;
		this.aniSpriteArray=null;
		this.drawImageNum=0;
	}

	return GridSprite;
})(Sprite)


/**
*地图支持多层渲染（例如，地表层，植被层，建筑层等）
*本类就是层级类
*@author ...
*/
//class laya.map.MapLayer extends laya.display.Sprite
var MapLayer=(function(_super){
	function MapLayer(){
		this._map=null;
		this._mapData=null;
		this._tileWidthHalf=0;
		this._tileHeightHalf=0;
		this._mapWidthHalf=0;
		this._mapHeightHalf=0;
		/**
		*@private
		*/
		this._gridSpriteArray=[];
		this._objDic=null;
		//用来做字典，方便查询
		this._dataDic=null;
		//临时变量
		this._properties=null;
		/**被合到的层*/
		this.tarLayer=null;
		/**当前Layer的名称*/
		this.layerName=null;
		/**
		*当前需要更新的gridSprite列表
		*/
		this._showGridList=[];
		/**
		*活动对象列表,活动对象不管是否显示都需要更新
		*/
		this._aloneObjs=[];
		MapLayer.__super.call(this);
		this._tempMapPos=new Point();
	}

	__class(MapLayer,'laya.map.MapLayer',_super);
	var __proto=MapLayer.prototype;
	/**
	*解析LAYER数据，以及初始化一些数据
	*@param layerData 地图数据中，layer数据的引用
	*@param map 地图的引用
	*/
	__proto.init=function(layerData,map){
		this._map=map;
		this._mapData=layerData.data;
		var tHeight=layerData.height;
		var tWidth=layerData.width;
		var tTileW=map.tileWidth;
		var tTileH=map.tileHeight;
		this.layerName=layerData.name;
		this._properties=layerData.properties;
		this.alpha=layerData.opacity;
		this._tileWidthHalf=tTileW / 2;
		this._tileHeightHalf=tTileH / 2;
		this._mapWidthHalf=this._map.width / 2-this._tileWidthHalf;
		this._mapHeightHalf=this._map.height / 2;
		switch (layerData.type){
			case "tilelayer":
				break ;
			case "objectgroup":;
				var tObjectGid=0;
				var tArray=layerData.objects;
				if (tArray.length > 0){
					this._objDic={};
					this._dataDic={};
				};
				var tObjectData;
				var tObjWidth=NaN;
				var tObjHeight=NaN;
				for (var i=0;i < tArray.length;i++){
					tObjectData=tArray[i];
					this._dataDic[tObjectData.name]=tObjectData;
					if (tObjectData.visible==true){
						tObjWidth=tObjectData.width;
						tObjHeight=tObjectData.height;
						var tSprite=map.getSprite(tObjectData.gid,tObjWidth,tObjHeight);
						if (tSprite !=null){
						switch (this._map.orientation){
							case /*laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":
								this.getScreenPositionByTilePos(tObjectData.x / tTileH,tObjectData.y / tTileH,Point.TEMP);
								tSprite.pivot(tObjWidth / 2,tObjHeight / 2);
								tSprite.rotation=tObjectData.rotation;
								tSprite.x=tSprite.relativeX=Point.TEMP.x+this._map.viewPortX;
								tSprite.y=tSprite.relativeY=Point.TEMP.y+this._map.viewPortY-tObjHeight / 2;
								break ;
							case /*laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
								tSprite.pivot(tObjWidth / 2,tObjHeight / 2);
								tSprite.rotation=tObjectData.rotation;
								tSprite.x=tSprite.relativeX=tObjectData.x+tObjWidth / 2;
								tSprite.y=tSprite.relativeY=tObjectData.y-tObjHeight / 2;
								break ;
							case /*laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
								tSprite.pivot(tObjWidth / 2,tObjHeight / 2);
								tSprite.rotation=tObjectData.rotation;
								tSprite.x=tSprite.relativeX=tObjectData.x+tObjWidth / 2;
								tSprite.y=tSprite.relativeY=tObjectData.y-tObjHeight / 2;
								break ;
							case /*laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":
								tSprite.x=tSprite.relativeX=tObjectData.x;
								tSprite.y=tSprite.relativeY=tObjectData.y;
								break ;
							}
						this.addChild(tSprite);
						this._gridSpriteArray.push(tSprite);
						if (tSprite.isAloneObject){
							this._showGridList.push(tSprite);
							this._aloneObjs.push(tSprite);
						}
						this._objDic[tObjectData.name]=tSprite;
					}
				}
			}
			break ;
		}
	}

	/**
	*通过名字获取控制对象，如果找不到返回为null
	*@param objName 所要获取对象的名字
	*@return
	*/
	__proto.getObjectByName=function(objName){
		if (this._objDic){
			return this._objDic[objName];
		}
		return null;
	}

	/**
	*通过名字获取数据，如果找不到返回为null
	*@param objName 所要获取对象的名字
	*@return
	*/
	__proto.getObjectDataByName=function(objName){
		if (this._dataDic){
			return this._dataDic[objName];
		}
		return null;
	}

	/**
	*得到地图层的自定义属性
	*@param name
	*@return
	*/
	__proto.getLayerProperties=function(name){
		if (this._properties){
			return this._properties[name];
		}
		return null;
	}

	/**
	*得到指定格子的数据
	*@param tileX 格子坐标X
	*@param tileY 格子坐标Y
	*@return
	*/
	__proto.getTileData=function(tileX,tileY){
		if (tileY >=0 && tileY < this._map.numRowsTile && tileX >=0 && tileX < this._map.numColumnsTile){
			var tIndex=tileY *this._map.numColumnsTile+tileX;
			var tMapData=this._mapData;
			if (tMapData !=null && tIndex < tMapData.length){
				return tMapData[tIndex];
			}
		}
		return 0;
	}

	/**
	*通过地图坐标得到屏幕坐标
	*@param tileX 格子坐标X
	*@param tileY 格子坐标Y
	*@param screenPos 把计算好的屏幕坐标数据，放到此对象中
	*/
	__proto.getScreenPositionByTilePos=function(tileX,tileY,screenPos){
		if (screenPos){
			switch (this._map.orientation){
				case /*laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":
					screenPos.x=this._map.width / 2-(tileY-tileX)*this._tileWidthHalf;
					screenPos.y=(tileY+tileX)*this._tileHeightHalf;
					break ;
				case /*laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
					tileX=Math.floor(tileX);
					tileY=Math.floor(tileY);
					screenPos.x=tileX *this._map.tileWidth+(tileY & 1)*this._tileWidthHalf;
					screenPos.y=tileY *this._tileHeightHalf;
					break ;
				case /*laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
					screenPos.x=tileX *this._map.tileWidth;
					screenPos.y=tileY *this._map.tileHeight;
					break ;
				case /*laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":
					tileX=Math.floor(tileX);
					tileY=Math.floor(tileY);
					var tTileHeight=this._map.tileHeight *2 / 3;
					screenPos.x=(tileX *this._map.tileWidth+tileY % 2 *this._tileWidthHalf)% this._map.gridWidth;
					screenPos.y=(tileY *tTileHeight)% this._map.gridHeight;
					break ;
				}
			screenPos.x=(screenPos.x+this._map.viewPortX)*this._map.scale;
			screenPos.y=(screenPos.y+this._map.viewPortY)*this._map.scale;
		}
	}

	/**
	*通过屏幕坐标来获取选中格子的数据
	*@param screenX 屏幕坐标x
	*@param screenY 屏幕坐标y
	*@return
	*/
	__proto.getTileDataByScreenPos=function(screenX,screenY){
		var tData=0;
		if (this.getTilePositionByScreenPos(screenX,screenY,this._tempMapPos)){
			tData=this.getTileData(Math.floor(this._tempMapPos.x),Math.floor(this._tempMapPos.y));
		}
		return tData;
	}

	/**
	*通过屏幕坐标来获取选中格子的索引
	*@param screenX 屏幕坐标x
	*@param screenY 屏幕坐标y
	*@param result 把计算好的格子坐标，放到此对象中
	*@return
	*/
	__proto.getTilePositionByScreenPos=function(screenX,screenY,result){
		screenX=screenX/this._map.scale-this._map.viewPortX;
		screenY=screenY/this._map.scale-this._map.viewPortY;
		var tTileW=this._map.tileWidth;
		var tTileH=this._map.tileHeight;
		var tV=0;
		var tU=0;
		switch (this._map.orientation){
			case /*laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":;
				var tDirX=screenX-this._map.width / 2;
				var tDirY=screenY;
				tV=-(tDirX / tTileW-tDirY / tTileH);
				tU=tDirX / tTileW+tDirY / tTileH;
				if (result){
					result.x=tU;
					result.y=tV;
				}
				return true;
				break ;
			case /*laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
				if (result){
					var cx=0,cy=0,rx=0,ry=0;
					cx=Math.floor(screenX / tTileW)*tTileW+tTileW / 2;
					cy=Math.floor(screenY / tTileH)*tTileH+tTileH / 2;
					rx=(screenX-cx)*tTileH / 2;
					ry=(screenY-cy)*tTileW / 2;
					if (Math.abs(rx)+Math.abs(ry)<=tTileW *tTileH / 4){
						tU=Math.floor(screenX / tTileW);
						tV=Math.floor(screenY / tTileH)*2;
						}else {
						screenX=screenX-tTileW / 2;
						tU=Math.floor(screenX / tTileW)+1;
						screenY=screenY-tTileH / 2;
						tV=Math.floor(screenY / tTileH)*2+1;
					}
					result.x=tU-(tV & 1);
					result.y=tV;
				}
				return true;
				break ;
			case /*laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
				tU=screenX / tTileW;
				tV=screenY / tTileH;
				if (result){
					result.x=tU;
					result.y=tV;
				}
				return true;
				break ;
			case /*laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":;
				var tTileHeight=tTileH *2 / 3;
				tV=screenY / tTileHeight;
				tU=(screenX-tV % 2 *this._tileWidthHalf)/ tTileW;
				if (result){
					result.x=tU;
					result.y=tV;
				}
				break ;
			}
		return false;
	}

	/**
	*得到一个GridSprite
	*@param gridX 当前Grid的X轴索引
	*@param gridY 当前Grid的Y轴索引
	*@return 一个GridSprite对象
	*/
	__proto.getDrawSprite=function(gridX,gridY){
		var tSprite=new GridSprite();
		tSprite.relativeX=gridX *this._map.gridWidth;
		tSprite.relativeY=gridY *this._map.gridHeight;
		tSprite.initData(this._map);
		tSprite.updatePos();
		this._gridSpriteArray.push(tSprite);
		return tSprite;
	}

	/**
	*将gridSprite设为显示状态
	*@param gridSprite
	*/
	__proto.showGridSprite=function(gridSprite){
		var gridList=this._showGridList;
		var i=0,len=0;
		len=gridList.length;
		var ok_i=-1;
		var tGridSprite;
		for (i=0;i < len;i++){
			tGridSprite=gridList[i];
			if (tGridSprite==gridSprite)return;
			if (!tGridSprite.isAloneObject && !tGridSprite.visible){
				ok_i=i;
			}
		}
		if (ok_i >=0){
			gridList[ok_i]=gridSprite;
			}else{
			gridList.push(gridSprite);
		}
	}

	/**
	*将gridSprite设为隐藏状态
	*@param gridSprite
	*
	*/
	__proto.hideGridSprite=function(gridSprite){
		gridSprite.visible=false;
	}

	/**
	*更新此层中块的坐标
	*手动刷新的目的是，保持层级的宽和高保持最小，加快渲染
	*/
	__proto.updateGridPos=function(){
		var tSprite;
		var tList;
		tList=this._showGridList;
		var len=0;
		len=tList.length;
		for (var i=0;i < len;i++){
			tSprite=tList[i];
			if ((tSprite._style.visible || tSprite.isAloneObject)&& tSprite.drawImageNum > 0){
				tSprite.updatePos();
			}
		}
	}

	/**
	*更新此层中的活动对象
	*/
	__proto.updateAloneObject=function(){
		var tSprite;
		var tList;
		tList=this._aloneObjs;
		var len=0;
		len=tList.length;
		for (var i=0;i < len;i++){
			tSprite=tList[i];
			if (tSprite.drawImageNum > 0){
				tSprite.updatePos();
			}
		}
	}

	/**
	*渲染时使用需要更新的列表进行渲染，减少遍历
	*@param context
	*@param x
	*@param y
	*
	*/
	__proto.render=function(context,x,y){
		var childs=this._childs;
		this._childs=this._showGridList;
		_super.prototype.render.call(this,context,x,y);
		this._childs=childs;
	}

	/**
	*@private
	*把tile画到指定的显示对象上
	*@param gridSprite 被指定显示的目标
	*@param tileX 格子的X轴坐标
	*@param tileY 格子的Y轴坐标
	*@return
	*/
	__proto.drawTileTexture=function(gridSprite,tileX,tileY){
		if (tileY >=0 && tileY < this._map.numRowsTile && tileX >=0 && tileX < this._map.numColumnsTile){
			var tIndex=tileY *this._map.numColumnsTile+tileX;
			var tMapData=this._mapData;
			if (tMapData !=null && tIndex < tMapData.length){
				if (tMapData[tIndex] !=0){
					var tTileTexSet=this._map.getTexture(tMapData[tIndex]);
					if (tTileTexSet){
						var tX=0;
						var tY=0;
						var tTexture=tTileTexSet.texture;
						switch (this._map.orientation){
							case /*laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
								tX=tileX *this._map.tileWidth % this._map.gridWidth+(tileY & 1)*this._tileWidthHalf;
								tY=tileY *this._tileHeightHalf % this._map.gridHeight;
								break ;
							case /*laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
								tX=tileX *this._map.tileWidth % this._map.gridWidth;
								tY=tileY *this._map.tileHeight % this._map.gridHeight;
								break ;
							case /*laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":
								tX=(this._mapWidthHalf+(tileX-tileY)*this._tileWidthHalf)% this._map.gridWidth;
								tY=((tileX+tileY)*this._tileHeightHalf)% this._map.gridHeight;
								break ;
							case /*laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":;
								var tTileHeight=this._map.tileHeight *2 / 3;
								tX=(tileX *this._map.tileWidth+tileY % 2 *this._tileWidthHalf)% this._map.gridWidth;
								tY=(tileY *tTileHeight)% this._map.gridHeight;
								break ;
							}
						if (tTileTexSet.isAnimation){
							var tAnimationSprite=new TileAniSprite();
							tAnimationSprite.x=tX;
							tAnimationSprite.y=tY;
							tAnimationSprite.setTileTextureSet(tIndex.toString(),tTileTexSet);
							gridSprite.addAniSprite(tAnimationSprite);
							gridSprite.addChild(tAnimationSprite);
							gridSprite.isHaveAnimation=true;
							}else {
							gridSprite.graphics.drawTexture(tTileTexSet.texture,tX+tTileTexSet.offX,tY+tTileTexSet.offY);
						}
						return true;
					}
				}
			}
		}
		return false;
	}

	/**
	*@private
	*清理当前对象
	*/
	__proto.clearAll=function(){
		this._map=null;
		this._mapData=null;
		this._tileWidthHalf=0;
		this._tileHeightHalf=0;
		this._mapWidthHalf=0;
		this._mapHeightHalf=0;
		this.layerName=null;
		var i=0;
		if (this._objDic){
			for (var p in this._objDic){
				delete this._objDic[p];
			}
			this._objDic=null;
		}
		if (this._dataDic){
			for (p in this._dataDic){
				delete this._dataDic[p];
			}
			this._dataDic=null;
		};
		var tGridSprite;
		for (i=0;i < this._gridSpriteArray.length;i++){
			tGridSprite=this._gridSpriteArray[i];
			tGridSprite.clearAll();
		}
		this._properties=null;
		this._tempMapPos=null;
		this.tarLayer=null;
	}

	return MapLayer;
})(Sprite)


/**
*TildMap的动画显示对象（一个动画（TileTexSet），可以绑定多个动画显示对象（TileAniSprite））
*@author ...
*/
//class laya.map.TileAniSprite extends laya.display.Sprite
var TileAniSprite=(function(_super){
	function TileAniSprite(){
		this._tileTextureSet=null;
		//动画的引用
		this._aniName=null;
		TileAniSprite.__super.call(this);
	}

	__class(TileAniSprite,'laya.map.TileAniSprite',_super);
	var __proto=TileAniSprite.prototype;
	/**
	*确定当前显示对象的名称以及属于哪个动画
	*@param aniName 当前动画显示对象的名字，名字唯一
	*@param tileTextureSet 当前显示对象属于哪个动画（一个动画，可以绑定多个同类显示对象）
	*/
	__proto.setTileTextureSet=function(aniName,tileTextureSet){
		this._aniName=aniName;
		this._tileTextureSet=tileTextureSet;
		tileTextureSet.addAniSprite(this._aniName,this);
	}

	/**
	*把当前动画加入到对应的动画刷新列表中
	*/
	__proto.show=function(){
		this._tileTextureSet.addAniSprite(this._aniName,this);
	}

	/**
	*把当前动画从对应的动画刷新列表中移除
	*/
	__proto.hide=function(){
		this._tileTextureSet.removeAniSprite(this._aniName);
	}

	/**
	*清理
	*/
	__proto.clearAll=function(){
		this._tileTextureSet.removeAniSprite(this._aniName);
		this.destroy();
		this._tileTextureSet=null;
		this._aniName=null;
	}

	return TileAniSprite;
})(Sprite)


	Laya.__init([TiledMap]);
})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Animation=laya.display.Animation,Browser=laya.utils.Browser,ClassUtils=laya.utils.ClassUtils,ColorFilter=laya.filters.ColorFilter;
	var Ease=laya.utils.Ease,Event=laya.events.Event,EventDispatcher=laya.events.EventDispatcher,Font=laya.display.css.Font;
	var FrameAnimation=laya.display.FrameAnimation,Graphics=laya.display.Graphics,Handler=laya.utils.Handler;
	var Input=laya.display.Input,Loader=laya.net.Loader,Node=laya.display.Node,Point=laya.maths.Point,Rectangle=laya.maths.Rectangle;
	var Render=laya.renders.Render,Sprite=laya.display.Sprite,Text=laya.display.Text,Texture=laya.resource.Texture;
	var Tween=laya.utils.Tween,Utils=laya.utils.Utils,WeakObject=laya.utils.WeakObject;
Laya.interface('laya.ui.IItem');
Laya.interface('laya.ui.ISelect');
Laya.interface('laya.ui.IRender');
Laya.interface('laya.ui.IComponent');
Laya.interface('laya.ui.IBox','IComponent');
/**
*<code>LayoutStyle</code> 是一个布局样式类。
*/
//class laya.ui.LayoutStyle
var LayoutStyle=(function(){
	function LayoutStyle(){
		/**一个布尔值，表示是否有效。*/
		this.enable=false;
		this.top=NaN;
		this.bottom=NaN;
		this.left=NaN;
		this.right=NaN;
		this.centerX=NaN;
		this.centerY=NaN;
		this.anchorX=NaN;
		this.anchorY=NaN;
	}

	__class(LayoutStyle,'laya.ui.LayoutStyle');
	__static(LayoutStyle,
	['EMPTY',function(){return this.EMPTY=new LayoutStyle();}
	]);
	return LayoutStyle;
})()


/**
*<code>Styles</code> 定义了组件常用的样式属性。
*/
//class laya.ui.Styles
var Styles=(function(){
	function Styles(){}
	__class(Styles,'laya.ui.Styles');
	Styles.labelColor="#000000";
	Styles.buttonStateNum=3;
	Styles.scrollBarMinNum=15;
	Styles.scrollBarDelayTime=500;
	__static(Styles,
	['defaultSizeGrid',function(){return this.defaultSizeGrid=[4,4,4,4,0];},'labelPadding',function(){return this.labelPadding=[2,2,2,2];},'inputLabelPadding',function(){return this.inputLabelPadding=[1,1,1,3];},'buttonLabelColors',function(){return this.buttonLabelColors=["#32556b","#32cc6b","#ff0000","#C0C0C0"];},'comboBoxItemColors',function(){return this.comboBoxItemColors=["#5e95b6","#ffffff","#000000","#8fa4b1","#ffffff"];}
	]);
	return Styles;
})()


/**
*<code>UIUtils</code> 是文本工具集。
*/
//class laya.ui.UIUtils
var UIUtils=(function(){
	function UIUtils(){}
	__class(UIUtils,'laya.ui.UIUtils');
	UIUtils.fillArray=function(arr,str,type){
		var temp=arr.concat();
		if (str){
			var a=str.split(",");
			for (var i=0,n=Math.min(temp.length,a.length);i < n;i++){
				var value=a[i];
				temp[i]=(value=="true" ? true :(value=="false" ? false :value));
				if (type !=null)temp[i]=type(value);
			}
		}
		return temp;
	}

	UIUtils.toColor=function(color){
		return Utils.toHexColor(color);
	}

	UIUtils.gray=function(traget,isGray){
		(isGray===void 0)&& (isGray=true);
		if (isGray){
			UIUtils.addFilter(traget,UIUtils.grayFilter);
			}else {
			UIUtils.clearFilter(traget,ColorFilter);
		}
	}

	UIUtils.addFilter=function(target,filter){
		var filters=target.filters || [];
		filters.push(filter);
		target.filters=filters;
	}

	UIUtils.clearFilter=function(target,filterType){
		var filters=target.filters;
		if (filters !=null && filters.length > 0){
			for (var i=filters.length-1;i >-1;i--){
				var filter=filters[i];
				if (Laya.__typeof(filter,filterType))filters.splice(i,1);
			}
			target.filters=filters;
		}
	}

	UIUtils._getReplaceStr=function(word){
		return UIUtils.escapeSequence[word];
	}

	UIUtils.adptString=function(str){
		return str.replace(/\\(\w)/g,UIUtils._getReplaceStr);
	}

	UIUtils.getBindFun=function(value){
		var fun=UIUtils._funMap.get(value);
		if (fun==null){
			var temp="\""+value+"\"";
			temp=temp.replace(/^"\${|}"$/g,"").replace(/\${/g,"\"+").replace(/}/g,"+\"");
			var str="(function(data){if(data==null)return;with(data){try{\nreturn "+temp+"\n}catch(e){}}})";
			fun=Laya._runScript(str);
			UIUtils._funMap.set(value,fun);
		}
		return fun;
	}

	__static(UIUtils,
	['grayFilter',function(){return this.grayFilter=new ColorFilter([0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0,0,0,1,0]);},'escapeSequence',function(){return this.escapeSequence={"\\n":"\n","\\t":"\t"};},'_funMap',function(){return this._funMap=new WeakObject();}
	]);
	return UIUtils;
})()


/**全局配置*/
//class UIConfig
var UIConfig=(function(){
	function UIConfig(){}
	__class(UIConfig,'UIConfig');
	UIConfig.touchScrollEnable=true;
	UIConfig.mouseWheelEnable=true;
	UIConfig.showButtons=true;
	UIConfig.popupBgColor="#000000";
	UIConfig.popupBgAlpha=0.5;
	UIConfig.closeDialogOnSide=true;
	return UIConfig;
})()


/**
*<code>AutoBitmap</code> 类是用于表示位图图像或绘制图形的显示对象。
*<p>封装了位置，宽高及九宫格的处理，供UI组件使用。</p>
*/
//class laya.ui.AutoBitmap extends laya.display.Graphics
var AutoBitmap=(function(_super){
	function AutoBitmap(){
		/**@private 是否自动缓存命令*/
		this.autoCacheCmd=true;
		/**@private 宽度*/
		this._width=0;
		/**@private 高度*/
		this._height=0;
		/**@private 源数据*/
		this._source=null;
		/**@private 网格数据*/
		this._sizeGrid=null;
		/**@private */
		this._isChanged=false;
		/**@private */
		this._offset=null;
		AutoBitmap.__super.call(this);
	}

	__class(AutoBitmap,'laya.ui.AutoBitmap',_super);
	var __proto=AutoBitmap.prototype;
	/**@inheritDoc */
	__proto.destroy=function(){
		_super.prototype.destroy.call(this);
		this._source=null;
		this._sizeGrid=null;
		this._offset=null;
	}

	/**@private */
	__proto._setChanged=function(){
		if (!this._isChanged){
			this._isChanged=true;
			Laya.timer.callLater(this,this.changeSource);
		}
	}

	/**
	*@private
	*修改纹理资源。
	*/
	__proto.changeSource=function(){
		this._isChanged=false;
		var source=this._source;
		if (!source || !source.bitmap)return;
		var width=this.width;
		var height=this.height;
		var sizeGrid=this._sizeGrid;
		var sw=source.sourceWidth;
		var sh=source.sourceHeight;
		if (!sizeGrid || (sw===width && sh===height)){
			this.cleanByTexture(source,this._offset ? this._offset[0] :0,this._offset ? this._offset[1] :0,width,height);
			}else {
			source.$_GID || (source.$_GID=Utils.getGID());
			var key=source.$_GID+"."+width+"."+height+"."+sizeGrid.join(".");
			if (Utils.isOKCmdList(WeakObject.I.get(key))){
				this.cmds=WeakObject.I.get(key);
				return;
			}
			this.clear();
			var top=sizeGrid[0];
			var right=sizeGrid[1];
			var bottom=sizeGrid[2];
			var left=sizeGrid[3];
			var repeat=sizeGrid[4];
			var needClip=false;
			if (width==sw){
				left=right=0;
			}
			if (height==sh){
				top=bottom=0;
			}
			if (left+right > width){
				var clipWidth=width;
				needClip=true;
				width=left+right;
				this.save();
				this.clipRect(0,0,clipWidth,height);
			}
			left && top && this.drawTexture(AutoBitmap.getTexture(source,0,0,left,top),0,0,left,top);
			right && top && this.drawTexture(AutoBitmap.getTexture(source,sw-right,0,right,top),width-right,0,right,top);
			left && bottom && this.drawTexture(AutoBitmap.getTexture(source,0,sh-bottom,left,bottom),0,height-bottom,left,bottom);
			right && bottom && this.drawTexture(AutoBitmap.getTexture(source,sw-right,sh-bottom,right,bottom),width-right,height-bottom,right,bottom);
			top && this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,0,sw-left-right,top),left,0,width-left-right,top);
			bottom && this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,sh-bottom,sw-left-right,bottom),left,height-bottom,width-left-right,bottom);
			left && this.drawBitmap(repeat,AutoBitmap.getTexture(source,0,top,left,sh-top-bottom),0,top,left,height-top-bottom);
			right && this.drawBitmap(repeat,AutoBitmap.getTexture(source,sw-right,top,right,sh-top-bottom),width-right,top,right,height-top-bottom);
			this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,top,sw-left-right,sh-top-bottom),left,top,width-left-right,height-top-bottom);
			if (needClip)this.restore();
			if (this.autoCacheCmd && !Render.isConchApp)WeakObject.I.set(key,this.cmds);
		}
		this._repaint();
	}

	__proto.drawBitmap=function(repeat,tex,x,y,width,height){
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		if (width < 0.1 || height < 0.1)return;
		if (repeat && (tex.width !=width || tex.height !=height))this.fillTexture(tex,x,y,width,height);
		else this.drawTexture(tex,x,y,width,height);
	}

	__proto.clear=function(recoverCmds){
		(recoverCmds===void 0)&& (recoverCmds=true);
		_super.prototype.clear.call(this,false);
	}

	/**
	*当前实例的有效缩放网格数据。
	*<p>如果设置为null,则在应用任何缩放转换时，将正常缩放整个显示对象。</p>
	*<p>数据格式：[上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)]。
	*<ul><li>例如：[4,4,4,4,1]</li></ul></p>
	*<p> <code>sizeGrid</code> 的值如下所示：
	*<ol>
	*<li>上边距</li>
	*<li>右边距</li>
	*<li>下边距</li>
	*<li>左边距</li>
	*<li>是否重复填充(值为0：不重复填充，1：重复填充)</li>
	*</ol></p>
	*<p>当定义 <code>sizeGrid</code> 属性时，该显示对象被分割到以 <code>sizeGrid</code> 数据中的"上边距,右边距,下边距,左边距" 组成的矩形为基础的具有九个区域的网格中，该矩形定义网格的中心区域。网格的其它八个区域如下所示：
	*<ul>
	*<li>矩形上方的区域</li>
	*<li>矩形外的右上角</li>
	*<li>矩形左侧的区域</li>
	*<li>矩形右侧的区域</li>
	*<li>矩形外的左下角</li>
	*<li>矩形下方的区域</li>
	*<li>矩形外的右下角</li>
	*<li>矩形外的左上角</li>
	*</ul>
	*同时也支持3宫格，比如0,4,0,4,1为水平3宫格，4,0,4,0,1为垂直3宫格，3宫格性能比9宫格高。
	*</p>
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this._sizeGrid;
		},function(value){
		this._sizeGrid=value;
		this._setChanged();
	});

	/**
	*表示显示对象的宽度，以像素为单位。
	*/
	__getset(0,__proto,'width',function(){
		if (this._width)return this._width;
		if (this._source)return this._source.sourceWidth;
		return 0;
		},function(value){
		if (this._width !=value){
			this._width=value;
			this._setChanged();
		}
	});

	/**
	*表示显示对象的高度，以像素为单位。
	*/
	__getset(0,__proto,'height',function(){
		if (this._height)return this._height;
		if (this._source)return this._source.sourceHeight;
		return 0;
		},function(value){
		if (this._height !=value){
			this._height=value;
			this._setChanged();
		}
	});

	/**
	*对象的纹理资源。
	*@see laya.resource.Texture
	*/
	__getset(0,__proto,'source',function(){
		return this._source;
		},function(value){
		if (value){
			this._source=value
			this._setChanged();
			}else {
			this._source=null;
			this.clear();
		}
	});

	AutoBitmap.getTexture=function(tex,x,y,width,height){
		if (width <=0)width=1;
		if (height <=0)height=1;
		tex.$_GID || (tex.$_GID=Utils.getGID())
		var key=tex.$_GID+"."+x+"."+y+"."+width+"."+height;
		var texture=WeakObject.I.get(key);
		if (!texture||!texture.source){
			texture=Texture.createFromTexture(tex,x,y,width,height);
			WeakObject.I.set(key,texture);
		}
		return texture;
	}

	return AutoBitmap;
})(Graphics)


/**
*<code>UIEvent</code> 类用来定义UI组件类的事件类型。
*/
//class laya.ui.UIEvent extends laya.events.Event
var UIEvent=(function(_super){
	function UIEvent(){
		UIEvent.__super.call(this);;
	}

	__class(UIEvent,'laya.ui.UIEvent',_super);
	UIEvent.SHOW_TIP="showtip";
	UIEvent.HIDE_TIP="hidetip";
	return UIEvent;
})(Event)


/**
*<code>Component</code> 是ui控件类的基类。
*<p>生命周期：preinitialize > createChildren > initialize > 组件构造函数</p>
*/
//class laya.ui.Component extends laya.display.Sprite
var Component=(function(_super){
	function Component(){
		this._comXml=null;
		/**@private 控件的元数据。 */
		this._dataSource=null;
		/**@private 鼠标悬停提示 */
		this._toolTip=null;
		/**@private 标签 */
		this._tag=null;
		/**@private 禁用 */
		this._disabled=false;
		/**@private 变灰*/
		this._gray=false;
		/**
		*是否启用相对布局
		*/
		this.layoutEnabled=true;
		Component.__super.call(this);
		this._layout=LayoutStyle.EMPTY;
		this.preinitialize();
		this.createChildren();
		this.initialize();
	}

	__class(Component,'laya.ui.Component',_super);
	var __proto=Component.prototype;
	Laya.imps(__proto,{"laya.ui.IComponent":true})
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._dataSource=this._layout=null;
		this._tag=null;
		this._toolTip=null;
	}

	/**
	*<p>预初始化。</p>
	*@internal 子类可在此函数内设置、修改属性默认值
	*/
	__proto.preinitialize=function(){}
	/**
	*<p>创建并添加控件子节点。</p>
	*@internal 子类可在此函数内创建并添加子节点。
	*/
	__proto.createChildren=function(){}
	/**
	*<p>控件初始化。</p>
	*@internal 在此子对象已被创建，可以对子对象进行修改。
	*/
	__proto.initialize=function(){}
	/**
	*<p>延迟运行指定的函数。</p>
	*<p>在控件被显示在屏幕之前调用，一般用于延迟计算数据。</p>
	*@param method 要执行的函数的名称。例如，functionName。
	*@param args 传递给 <code>method</code> 函数的可选参数列表。
	*
	*@see #runCallLater()
	*/
	__proto.callLater=function(method,args){
		Laya.timer.callLater(this,method,args);
	}

	/**
	*<p>如果有需要延迟调用的函数（通过 <code>callLater</code> 函数设置），则立即执行延迟调用函数。</p>
	*@param method 要执行的函数名称。例如，functionName。
	*@see #callLater()
	*/
	__proto.runCallLater=function(method){
		Laya.timer.runCallLater(this,method);
	}

	/**
	*<p>立即执行影响宽高度量的延迟调用函数。</p>
	*@internal <p>使用 <code>runCallLater</code> 函数，立即执行影响宽高度量的延迟运行函数(使用 <code>callLater</code> 设置延迟执行函数)。</p>
	*@see #callLater()
	*@see #runCallLater()
	*/
	__proto.commitMeasure=function(){}
	/**
	*<p>重新调整对象的大小。</p>
	*/
	__proto.changeSize=function(){
		this.event(/*laya.events.Event.RESIZE*/"resize");
	}

	/**
	*@private
	*<p>获取对象的布局样式。</p>
	*/
	__proto.getLayout=function(){
		this._layout===LayoutStyle.EMPTY && (this._layout=new LayoutStyle());
		return this._layout;
	}

	/**
	*@private
	*<p>指定对象是否可使用布局。</p>
	*<p>如果值为true,则此对象可以使用布局样式，否则不使用布局样式。</p>
	*@param value 一个 Boolean 值，指定对象是否可使用布局。
	*/
	__proto._setLayoutEnabled=function(value){
		if (this._layout && this._layout.enable !=value){
			this._layout.enable=value;
			this.on(/*laya.events.Event.ADDED*/"added",this,this.onAdded);
			this.on(/*laya.events.Event.REMOVED*/"removed",this,this.onRemoved);
			if (this.parent){
				this.onAdded();
			}
		}
	}

	/**
	*对象从显示列表移除的事件侦听处理函数。
	*/
	__proto.onRemoved=function(){
		this.parent.off(/*laya.events.Event.RESIZE*/"resize",this,this.onCompResize);
	}

	/**
	*对象被添加到显示列表的事件侦听处理函数。
	*/
	__proto.onAdded=function(){
		this.parent.on(/*laya.events.Event.RESIZE*/"resize",this,this.onCompResize);
		this.resetLayoutX();
		this.resetLayoutY();
	}

	/**
	*父容器的 <code>Event.RESIZE</code> 事件侦听处理函数。
	*/
	__proto.onCompResize=function(){
		if (this._layout && this._layout.enable){
			this.resetLayoutX();
			this.resetLayoutY();
		}
	}

	/**
	*<p>重置对象的 <code>X</code> 轴（水平方向）布局。</p>
	*/
	__proto.resetLayoutX=function(){
		var layout=this._layout;
		if (!isNaN(layout.anchorX))this.pivotX=layout.anchorX *this.width;
		if (!this.layoutEnabled)return;
		var parent=this.parent;
		if (parent){
			if (!isNaN(layout.centerX)){
				this.x=Math.round((parent.width-this.displayWidth)*0.5+layout.centerX+this.pivotX *this.scaleX);
				}else if (!isNaN(layout.left)){
				this.x=Math.round(layout.left+this.pivotX *this.scaleX);
				if (!isNaN(layout.right)){
					this.width=(parent._width-layout.left-layout.right)/ (this.scaleX || 0.01);
				}
				}else if (!isNaN(layout.right)){
				this.x=Math.round(parent.width-this.displayWidth-layout.right+this.pivotX *this.scaleX);
			}
		}
	}

	/**
	*<p>重置对象的 <code>Y</code> 轴（垂直方向）布局。</p>
	*/
	__proto.resetLayoutY=function(){
		var layout=this._layout;
		if (!isNaN(layout.anchorY))this.pivotY=layout.anchorY *this.height;
		if (!this.layoutEnabled)return;
		var parent=this.parent;
		if (parent){
			if (!isNaN(layout.centerY)){
				this.y=Math.round((parent.height-this.displayHeight)*0.5+layout.centerY+this.pivotY *this.scaleY);
				}else if (!isNaN(layout.top)){
				this.y=Math.round(layout.top+this.pivotY *this.scaleY);
				if (!isNaN(layout.bottom)){
					this.height=(parent._height-layout.top-layout.bottom)/ (this.scaleY || 0.01);
				}
				}else if (!isNaN(layout.bottom)){
				this.y=Math.round(parent.height-this.displayHeight-layout.bottom+this.pivotY *this.scaleY);
			}
		}
	}

	/**
	*对象的 <code>Event.MOUSE_OVER</code> 事件侦听处理函数。
	*/
	__proto.onMouseOver=function(e){
		Laya.stage.event(/*laya.ui.UIEvent.SHOW_TIP*/"showtip",this._toolTip);
	}

	/**
	*对象的 <code>Event.MOUSE_OUT</code> 事件侦听处理函数。
	*/
	__proto.onMouseOut=function(e){
		Laya.stage.event(/*laya.ui.UIEvent.HIDE_TIP*/"hidetip",this._toolTip);
	}

	/**
	*<p>对象的显示宽度（以像素为单位）。</p>
	*/
	__getset(0,__proto,'displayWidth',function(){
		return this.width *this.scaleX;
	});

	/**
	*<p>表示显示对象的宽度，以像素为单位。</p>
	*<p><b>注：</b>当值为0时，宽度为自适应大小。</p>
	*/
	__getset(0,__proto,'width',function(){
		if (this._width)return this._width;
		return this.measureWidth;
		},function(value){
		if (this._width !=value){
			this._width=value;
			this.conchModel && this.conchModel.size(this._width,this._height);
			this.callLater(this.changeSize);
			if (this._layout.enable && (!isNaN(this._layout.centerX)|| !isNaN(this._layout.right)|| !isNaN(this._layout.anchorX)))this.resetLayoutX();
		}
	});

	/**
	*<p>显示对象的实际显示区域宽度（以像素为单位）。</p>
	*/
	__getset(0,__proto,'measureWidth',function(){
		var max=0;
		this.commitMeasure();
		for (var i=this.numChildren-1;i >-1;i--){
			var comp=this.getChildAt(i);
			if (comp.visible){
				max=Math.max(comp.x+comp.width *comp.scaleX,max);
			}
		}
		return max;
	});

	/**
	*<p>对象的显示高度（以像素为单位）。</p>
	*/
	__getset(0,__proto,'displayHeight',function(){
		return this.height *this.scaleY;
	});

	/**
	*<p>表示显示对象的高度，以像素为单位。</p>
	*<p><b>注：</b>当值为0时，高度为自适应大小。</p>
	*/
	__getset(0,__proto,'height',function(){
		if (this._height)return this._height;
		return this.measureHeight;
		},function(value){
		if (this._height !=value){
			this._height=value;
			this.conchModel && this.conchModel.size(this._width,this._height);
			this.callLater(this.changeSize);
			if (this._layout.enable && (!isNaN(this._layout.centerY)|| !isNaN(this._layout.bottom)|| !isNaN(this._layout.anchorY)))this.resetLayoutY();
		}
	});

	/**
	*<p>数据赋值，通过对UI赋值来控制UI显示逻辑。</p>
	*<p>简单赋值会更改组件的默认属性，使用大括号可以指定组件的任意属性进行赋值。</p>
	*@example
	//默认属性赋值
	dataSource={label1:"改变了label",checkbox1:true};//(更改了label1的text属性值，更改checkbox1的selected属性)。
	//任意属性赋值
	dataSource={label2:{text:"改变了label",size:14},checkbox2:{selected:true,x:10}};
	*/
	__getset(0,__proto,'dataSource',function(){
		return this._dataSource;
		},function(value){
		this._dataSource=value;
		for (var prop in this._dataSource){
			if (this.hasOwnProperty(prop)&& !((typeof (this[prop])=='function'))){
				this[prop]=this._dataSource[prop];
			}
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'scaleY',_super.prototype._$get_scaleY,function(value){
		if (Laya.superGet(Sprite,this,'scaleY')!=value){
			Laya.superSet(Sprite,this,'scaleY',value);
			this.callLater(this.changeSize);
			this._layout.enable && this.resetLayoutY();
		}
	});

	/**
	*<p>显示对象的实际显示区域高度（以像素为单位）。</p>
	*/
	__getset(0,__proto,'measureHeight',function(){
		var max=0;
		this.commitMeasure();
		for (var i=this.numChildren-1;i >-1;i--){
			var comp=this.getChildAt(i);
			if (comp.visible){
				max=Math.max(comp.y+comp.height *comp.scaleY,max);
			}
		}
		return max;
	});

	/**@inheritDoc */
	__getset(0,__proto,'scaleX',_super.prototype._$get_scaleX,function(value){
		if (Laya.superGet(Sprite,this,'scaleX')!=value){
			Laya.superSet(Sprite,this,'scaleX',value);
			this.callLater(this.changeSize);
			this._layout.enable && this.resetLayoutX();
		}
	});

	/**
	*<p>从组件顶边到其内容区域顶边之间的垂直距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'top',function(){
		return this._layout.top;
		},function(value){
		if (value !=this._layout.top){
			this.getLayout().top=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutY();
	});

	/**
	*<p>从组件底边到其内容区域底边之间的垂直距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'bottom',function(){
		return this._layout.bottom;
		},function(value){
		if (value !=this._layout.bottom){
			this.getLayout().bottom=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutY();
	});

	/**
	*<p>从组件左边到其内容区域左边之间的水平距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'left',function(){
		return this._layout.left;
		},function(value){
		if (value !=this._layout.left){
			this.getLayout().left=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutX();
	});

	/**
	*<p>从组件右边到其内容区域右边之间的水平距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'right',function(){
		return this._layout.right;
		},function(value){
		if (value !=this._layout.right){
			this.getLayout().right=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutX();
	});

	/**
	*<p>在父容器中，此对象的水平方向中轴线与父容器的水平方向中心线的距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'centerX',function(){
		return this._layout.centerX;
		},function(value){
		if (value !=this._layout.centerX){
			this.getLayout().centerX=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutX();
	});

	/**
	*<p>在父容器中，此对象的垂直方向中轴线与父容器的垂直方向中心线的距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'centerY',function(){
		return this._layout.centerY;
		},function(value){
		if (value !=this._layout.centerY){
			this.getLayout().centerY=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutY();
	});

	/**X轴锚点，值为0-1*/
	__getset(0,__proto,'anchorX',function(){
		return this._layout.anchorX;
		},function(value){
		if (value !=this._layout.anchorX){
			this.getLayout().anchorX=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutX();
	});

	/**Y轴锚点，值为0-1*/
	__getset(0,__proto,'anchorY',function(){
		return this._layout.anchorY;
		},function(value){
		if (value !=this._layout.anchorY){
			this.getLayout().anchorY=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutY();
	});

	/**
	*<p>对象的标签。</p>
	*@internal 冗余字段，可以用来储存数据。
	*/
	__getset(0,__proto,'tag',function(){
		return this._tag;
		},function(value){
		this._tag=value;
	});

	/**
	*<p>鼠标悬停提示。</p>
	*<p>可以赋值为文本 <code>String</code> 或函数 <code>Handler</code> ，用来实现自定义样式的鼠标提示和参数携带等。</p>
	*@example
	*private var _testTips:TestTipsUI=new TestTipsUI();
	*private function testTips():void {
		//简单鼠标提示
		*btn2.toolTip="这里是鼠标提示&lt;b&gt;粗体&lt;/b&gt;&lt;br&gt;换行";
		//自定义的鼠标提示
		*btn1.toolTip=showTips1;
		//带参数的自定义鼠标提示
		*clip.toolTip=new Handler(this,showTips2,["clip"]);
		*}
	*private function showTips1():void {
		*_testTips.label.text="这里是按钮["+btn1.label+"]";
		*tip.addChild(_testTips);
		*}
	*private function showTips2(name:String):void {
		*_testTips.label.text="这里是"+name;
		*tip.addChild(_testTips);
		*}
	*/
	__getset(0,__proto,'toolTip',function(){
		return this._toolTip;
		},function(value){
		if (this._toolTip !=value){
			this._toolTip=value;
			if (value !=null){
				this.on(/*laya.events.Event.MOUSE_OVER*/"mouseover",this,this.onMouseOver);
				this.on(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onMouseOut);
				}else {
				this.off(/*laya.events.Event.MOUSE_OVER*/"mouseover",this,this.onMouseOver);
				this.off(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onMouseOut);
			}
		}
	});

	/**
	*XML 数据。
	*/
	__getset(0,__proto,'comXml',function(){
		return this._comXml;
		},function(value){
		this._comXml=value;
	});

	/**是否变灰。*/
	__getset(0,__proto,'gray',function(){
		return this._gray;
		},function(value){
		if (value!==this._gray){
			this._gray=value;
			UIUtils.gray(this,value);
		}
	});

	/**是否禁用页面，设置为true后，会变灰并且禁用鼠标。*/
	__getset(0,__proto,'disabled',function(){
		return this._disabled;
		},function(value){
		if (value!==this._disabled){
			this.gray=this._disabled=value;
			this.mouseEnabled=!value;
		}
	});

	return Component;
})(Sprite)


/**
*<code>DialogManager</code> 对话框管理容器，所有的对话框都在该容器内，并且受管理器管理。
*任意对话框打开和关闭，都会出发管理类的open和close事件
*可以通过UIConfig设置弹出框背景透明度，模式窗口点击边缘是否关闭，点击窗口是否切换层次等
*通过设置对话框的zOrder属性，可以更改弹出的层次
*/
//class laya.ui.DialogManager extends laya.display.Sprite
var DialogManager=(function(_super){
	function DialogManager(){
		/**锁屏层*/
		this.lockLayer=null;
		/**@private 全局默认弹出对话框效果，可以设置一个效果代替默认的弹出效果，如果不想有任何效果，可以赋值为null*/
		this.popupEffect=function(dialog){
			dialog.scale(1,1);
			Tween.from(dialog,{x:Laya.stage.width / 2,y:Laya.stage.height / 2,scaleX:0,scaleY:0},300,Ease.backOut,Handler.create(this,this.doOpen,[dialog]));
		}
		/**@private 全局默认关闭对话框效果，可以设置一个效果代替默认的关闭效果，如果不想有任何效果，可以赋值为null*/
		this.closeEffect=function(dialog,type){
			Tween.to(dialog,{x:Laya.stage.width / 2,y:Laya.stage.height / 2,scaleX:0,scaleY:0},300,Ease.strongOut,Handler.create(this,this.doClose,[dialog,type]));
		}
		DialogManager.__super.call(this);
		this.maskLayer=new Sprite();
		this.popupEffectHandler=new Handler(this,this.popupEffect);
		this.closeEffectHandler=new Handler(this,this.closeEffect);
		this.mouseEnabled=this.maskLayer.mouseEnabled=true;
		this.zOrder=1000;
		Laya.stage.addChild(this);
		Laya.stage.on(/*laya.events.Event.RESIZE*/"resize",this,this._onResize);
		if (UIConfig.closeDialogOnSide)this.maskLayer.on("click",this,this._closeOnSide);
		this._onResize(null);
	}

	__class(DialogManager,'laya.ui.DialogManager',_super);
	var __proto=DialogManager.prototype;
	__proto._closeOnSide=function(){
		var dialog=this.getChildAt(this.numChildren-1);
		if ((dialog instanceof laya.ui.Dialog ))dialog.close("side");
	}

	/**设置锁定界面，如果为空则什么都不显示*/
	__proto.setLockView=function(value){
		if (!this.lockLayer){
			this.lockLayer=new Box();
			this.lockLayer.mouseEnabled=true;
			this.lockLayer.size(Laya.stage.width,Laya.stage.height);
		}
		this.lockLayer.removeChildren();
		if (value){
			value.centerX=value.centerY=0;
			this.lockLayer.addChild(value);
		}
	}

	/**@private */
	__proto._onResize=function(e){
		var width=this.maskLayer.width=Laya.stage.width;
		var height=this.maskLayer.height=Laya.stage.height;
		if (this.lockLayer)this.lockLayer.size(width,height);
		this.maskLayer.graphics.clear();
		this.maskLayer.graphics.drawRect(0,0,width,height,UIConfig.popupBgColor);
		this.maskLayer.alpha=UIConfig.popupBgAlpha;
		for (var i=this.numChildren-1;i >-1;i--){
			var item=this.getChildAt(i);
			if (item.popupCenter)this._centerDialog(item);
		}
	}

	__proto._centerDialog=function(dialog){
		dialog.x=Math.round(((Laya.stage.width-dialog.width)>> 1)+dialog.pivotX);
		dialog.y=Math.round(((Laya.stage.height-dialog.height)>> 1)+dialog.pivotY);
	}

	/**
	*显示对话框(非模式窗口类型)。
	*@param dialog 需要显示的对象框 <code>Dialog</code> 实例。
	*@param closeOther 是否关闭其它对话框，若值为ture，则关闭其它的对话框。
	*@param showEffect 是否显示弹出效果
	*/
	__proto.open=function(dialog,closeOther,showEffect){
		(closeOther===void 0)&& (closeOther=false);
		(showEffect===void 0)&& (showEffect=false);
		if (closeOther)this._closeAll();
		if (dialog.popupCenter)this._centerDialog(dialog);
		this.addChild(dialog);
		if (dialog.isModal || this._$P["hasZorder"])this.timer.callLater(this,this._checkMask);
		if (showEffect && dialog.popupEffect !=null)dialog.popupEffect.runWith(dialog);
		else this.doOpen(dialog);
		this.event(/*laya.events.Event.OPEN*/"open");
	}

	/**
	*执行打开对话框。
	*@param dialog 需要关闭的对象框 <code>Dialog</code> 实例。
	*@param type 关闭的类型，默认为空
	*/
	__proto.doOpen=function(dialog){
		dialog.onOpened();
	}

	/**
	*锁定所有层，显示加载条信息，防止双击
	*/
	__proto.lock=function(value){
		if (this.lockLayer){
			if (value)this.addChild(this.lockLayer);
			else this.lockLayer.removeSelf();
		}
	}

	/**
	*关闭对话框。
	*@param dialog 需要关闭的对象框 <code>Dialog</code> 实例。
	*@param type 关闭的类型，默认为空
	*@param showEffect 是否显示弹出效果
	*/
	__proto.close=function(dialog,type,showEffect){
		(showEffect===void 0)&& (showEffect=false);
		if (showEffect && dialog.closeEffect !=null)dialog.closeEffect.runWith([dialog,type]);
		else this.doClose(dialog,type);
		this.event(/*laya.events.Event.CLOSE*/"close");
	}

	/**
	*执行关闭对话框。
	*@param dialog 需要关闭的对象框 <code>Dialog</code> 实例。
	*@param type 关闭的类型，默认为空
	*/
	__proto.doClose=function(dialog,type){
		dialog.removeSelf();
		dialog.isModal && this._checkMask();
		dialog.closeHandler && dialog.closeHandler.runWith(type);
		dialog.onClosed(type);
	}

	/**
	*关闭所有的对话框。
	*/
	__proto.closeAll=function(){
		this._closeAll();
		this.event(/*laya.events.Event.CLOSE*/"close");
	}

	/**@private */
	__proto._closeAll=function(){
		for (var i=this.numChildren-1;i >-1;i--){
			var item=this.getChildAt(i);
			if (item && item.close !=null){
				this.doClose(item);
			}
		}
	}

	/**
	*根据组获取所有对话框
	*@param group 组名称
	*@return 对话框数组
	*/
	__proto.getDialogsByGroup=function(group){
		var arr=[];
		for (var i=this.numChildren-1;i >-1;i--){
			var item=this.getChildAt(i);
			if (item && item.group===group){
				arr.push(item);
			}
		}
		return arr;
	}

	/**
	*根据组关闭所有弹出框
	*@param group 需要关闭的组名称
	*@return 需要关闭的对话框数组
	*/
	__proto.closeByGroup=function(group){
		var arr=[];
		for (var i=this.numChildren-1;i >-1;i--){
			var item=this.getChildAt(i);
			if (item && item.group===group){
				item.close();
				arr.push(item);
			}
		}
		return arr;
	}

	/**@private 发生层次改变后，重新检查遮罩层是否正确*/
	__proto._checkMask=function(){
		this.maskLayer.removeSelf();
		for (var i=this.numChildren-1;i >-1;i--){
			var dialog=this.getChildAt(i);
			if (dialog && dialog.isModal){
				this.addChildAt(this.maskLayer,i);
				return;
			}
		}
	}

	return DialogManager;
})(Sprite)


/**
*<code>Box</code> 类是一个控件容器类。
*/
//class laya.ui.Box extends laya.ui.Component
var Box=(function(_super){
	function Box(){
		Box.__super.call(this);;
	}

	__class(Box,'laya.ui.Box',_super);
	var __proto=Box.prototype;
	Laya.imps(__proto,{"laya.ui.IBox":true})
	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		for (var name in value){
			var comp=this.getChildByName(name);
			if (comp)comp.dataSource=value[name];
			else if (this.hasOwnProperty(name)&& !((typeof (this[name])=='function')))this[name]=value[name];
		}
	});

	return Box;
})(Component)


/**
*<code>Button</code> 组件用来表示常用的多态按钮。 <code>Button</code> 组件可显示文本标签、图标或同时显示两者。 *
*<p>可以是单态，两态和三态，默认三态(up,over,down)。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>Button</code> 实例。</caption>
*package
*{
	*import laya.ui.Button;
	*import laya.utils.Handler;
	*public class Button_Example
	*{
		*public function Button_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*trace("资源加载完成！");
			*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,并传入它的皮肤。
			*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*button.clickHandler=new Handler(this,onClickButton,[button]);//设置 button 的点击事件处理器。
			*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
			*}
		*private function onClickButton(button:Button):void
		*{
			*trace("按钮button被点击了！");
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*function loadComplete()
*{
	*console.log("资源加载完成！");
	*var button=new laya.ui.Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,传入它的皮肤skin和标签label。
	*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
	*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
	*button.clickHandler=laya.utils.Handler.create(this,onClickButton,[button],false);//设置 button 的点击事件处理函数。
	*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
	*}
*function onClickButton(button)
*{
	*console.log("按钮被点击了。",button);
	*}
*@example
*import Button=laya.ui.Button;
*import Handler=laya.utils.Handler;
*class Button_Example{
	*constructor()
	*{
		*Laya.init(640,800);
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete()
	*{
		*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,并传入它的皮肤。
		*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
		*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
		*button.clickHandler=new Handler(this,this.onClickButton,[button]);//设置 button 的点击事件处理器。
		*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
		*}
	*private onClickButton(button:Button):void
	*{
		*console.log("按钮button被点击了！")
		*}
	*}
*/
//class laya.ui.Button extends laya.ui.Component
var Button=(function(_super){
	function Button(skin,label){
		/**
		*指定按钮按下时是否是切换按钮的显示状态。
		*
		*@example 以下示例代码，创建了一个 <code>Button</code> 实例，并设置为切换按钮。
		*@example
		*package
		*{
			*import laya.ui.Button;
			*import laya.utils.Handler;
			*public class Button_toggle
			*{
				*public function Button_toggle()
				*{
					*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
					*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
					*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));
					*}
				*private function onLoadComplete():void
				*{
					*trace("资源加载完成！");
					*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 实例对象 button ,传入它的皮肤skin和标签label。
					*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
					*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
					*button.toggle=true;//设置 button 对象为切换按钮。
					*button.clickHandler=new Handler(this,onClickButton,[button]);//设置 button 的点击事件处理器。
					*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
					*}
				*private function onClickButton(button:Button):void
				*{
					*trace("button.selected = "+button.selected);
					*}
				*}
			*}
		*@example
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
		*function loadComplete()
		*{
			*console.log("资源加载完成！");
			*var button=new laya.ui.Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,传入它的皮肤skin和标签label。
			*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*button.toggle=true;//设置 button 对象为切换按钮。
			*button.clickHandler=laya.utils.Handler.create(this,onClickButton,[button],false);//设置 button 的点击事件处理器。
			*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
			*}
		*function onClickButton(button)
		*{
			*console.log("button.selected = ",button.selected);
			*}
		*@example
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("button.png",null,null,null,null,null);//加载资源
		*function loadComplete(){
			*console.log("资源加载完成！");
			*var button:laya.ui.Button=new laya.ui.Button("button.png","label");//创建一个 Button 类的实例对象 button ,传入它的皮肤skin和标签label。
			*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*button.toggle=true;//设置 button 对象为切换按钮。
			*button.clickHandler=laya.utils.Handler.create(this,onClickButton,[button],false);//设置 button 的点击事件处理器。
			*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
			*}
		*function onClickButton(button){
			*console.log("button.selected = ",button.selected);
			*}
		*/
		this.toggle=false;
		/**
		*@private
		*/
		this._bitmap=null;
		/**
		*@private
		*按钮上的文本。
		*/
		this._text=null;
		/**
		*@private
		*按钮文本标签描边的颜色值。
		*/
		this._strokeColors=null;
		/**
		*@private
		*按钮的状态值。
		*/
		this._state=0;
		/**
		*@private
		*表示按钮的选中状态。
		*/
		this._selected=false;
		/**
		*@private
		*按钮的皮肤资源。
		*/
		this._skin=null;
		/**
		*@private
		*指定此显示对象是否自动计算并改变大小等属性。
		*/
		this._autoSize=true;
		/**
		*@private
		*源数据。
		*/
		this._sources=null;
		/**
		*@private
		*按钮的点击事件函数。
		*/
		this._clickHandler=null;
		/**
		*@private
		*/
		this._stateChanged=false;
		Button.__super.call(this);
		this._labelColors=Styles.buttonLabelColors;
		this._stateNum=Styles.buttonStateNum;
		(label===void 0)&& (label="");
		this.skin=skin;
		this.label=label;
	}

	__class(Button,'laya.ui.Button',_super);
	var __proto=Button.prototype;
	Laya.imps(__proto,{"laya.ui.ISelect":true})
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._bitmap && this._bitmap.destroy();
		this._text && this._text.destroy(destroyChild);
		this._bitmap=null;
		this._text=null;
		this._clickHandler=null;
		this._labelColors=this._sources=this._strokeColors=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.graphics=this._bitmap=new AutoBitmap();
	}

	/**@private */
	__proto.createText=function(){
		if (!this._text){
			this._text=new Text();
			this._text.overflow=Text.HIDDEN;
			this._text.align="center";
			this._text.valign="middle";
			this._text.width=this._width;
			this._text.height=this._height;
		}
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		if (this._mouseEnableState!==1){
			this.mouseEnabled=true;
			this._setBit(/*laya.display.Node.MOUSEENABLE*/0x2,true);
		}
		this._createListener(/*laya.events.Event.MOUSE_OVER*/"mouseover",this,this.onMouse,null,false,false);
		this._createListener(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onMouse,null,false,false);
		this._createListener(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onMouse,null,false,false);
		this._createListener(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onMouse,null,false,false);
		this._createListener(/*laya.events.Event.CLICK*/"click",this,this.onMouse,null,false,false);
	}

	/**
	*对象的 <code>Event.MOUSE_OVER、Event.MOUSE_OUT、Event.MOUSE_DOWN、Event.MOUSE_UP、Event.CLICK</code> 事件侦听处理函数。
	*@param e Event 对象。
	*/
	__proto.onMouse=function(e){
		if (this.toggle===false && this._selected)return;
		if (e.type===/*laya.events.Event.CLICK*/"click"){
			this.toggle && (this.selected=!this._selected);
			this._clickHandler && this._clickHandler.run();
			return;
		}
		!this._selected && (this.state=Button.stateMap[e.type]);
	}

	/**
	*@private
	*对象的资源切片发生改变。
	*/
	__proto.changeClips=function(){
		var img=Loader.getRes(this._skin);
		if (!img){
			//console.log("lose skin",this._skin);
			return;
		};
		var width=img.sourceWidth;
		var height=img.sourceHeight / this._stateNum;
		img.$_GID || (img.$_GID=Utils.getGID());
		var key=img.$_GID+"-"+this._stateNum;
		var clips=WeakObject.I.get(key);
		if (!Utils.isOkTextureList(clips)){
			clips=null;
		}
		if (clips)this._sources=clips;
		else {
			this._sources=[];
			if (this._stateNum===1){
				this._sources.push(img);
				}else {
				for (var i=0;i < this._stateNum;i++){
					this._sources.push(Texture.createFromTexture(img,0,height *i,width,height));
				}
			}
			WeakObject.I.set(key,this._sources);
		}
		if (this._autoSize){
			this._bitmap.width=this._width || width;
			this._bitmap.height=this._height || height;
			if (this._text){
				this._text.width=this._bitmap.width;
				this._text.height=this._bitmap.height;
			}
			}else {
			this._text && (this._text.x=width);
		}
	}

	/**
	*@private
	*改变对象的状态。
	*/
	__proto.changeState=function(){
		this._stateChanged=false;
		this.runCallLater(this.changeClips);
		var index=this._state < this._stateNum ? this._state :this._stateNum-1;
		this._sources && (this._bitmap.source=this._sources[index]);
		if (this.label){
			this._text.color=this._labelColors[index];
			if (this._strokeColors)this._text.strokeColor=this._strokeColors[index];
		}
	}

	/**@private */
	__proto._setStateChanged=function(){
		if (!this._stateChanged){
			this._stateChanged=true;
			this.callLater(this.changeState);
		}
	}

	/**
	*<p>描边颜色，以字符串表示。</p>
	*默认值为 "#000000"（黑色）;
	*@see laya.display.Text.strokeColor()
	*/
	__getset(0,__proto,'labelStrokeColor',function(){
		this.createText();
		return this._text.strokeColor;
		},function(value){
		this.createText();
		this._text.strokeColor=value
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'measureHeight',function(){
		this.runCallLater(this.changeClips);
		return this._text ? Math.max(this._bitmap.height,this._text.height):this._bitmap.height;
	});

	/**
	*<p>对象的皮肤资源地址。</p>
	*支持单态，两态和三态，用 <code>stateNum</code> 属性设置
	*<p>对象的皮肤地址，以字符串表示。</p>
	*@see #stateNum
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this.callLater(this.changeClips);
			this._setStateChanged();
		}
	});

	/**
	*对象的状态值。
	*@see #stateMap
	*/
	__getset(0,__proto,'state',function(){
		return this._state;
		},function(value){
		if (this._state !=value){
			this._state=value;
			this._setStateChanged();
		}
	});

	/**
	*按钮文本标签 <code>Text</code> 控件。
	*/
	__getset(0,__proto,'text',function(){
		this.createText();
		return this._text;
	});

	/**
	*<p>指定对象的状态值，以数字表示。</p>
	*<p>默认值为3。此值决定皮肤资源图片的切割方式。</p>
	*<p><b>取值：</b>
	*<li>1：单态。图片不做切割，按钮的皮肤状态只有一种。</li>
	*<li>2：两态。图片将以竖直方向被等比切割为2部分，从上向下，依次为
	*弹起状态皮肤、
	*按下和经过及选中状态皮肤。</li>
	*<li>3：三态。图片将以竖直方向被等比切割为3部分，从上向下，依次为
	*弹起状态皮肤、
	*经过状态皮肤、
	*按下和选中状态皮肤</li>
	*</p>
	*/
	__getset(0,__proto,'stateNum',function(){
		return this._stateNum;
		},function(value){
		if ((typeof value=='string')){
			value=parseInt(value);
		}
		if (this._stateNum !=value){
			this._stateNum=value < 1 ? 1 :value > 3 ? 3 :value;
			this.callLater(this.changeClips);
		}
	});

	/**
	*表示按钮各个状态下的描边颜色。
	*<p><b>格式:</b> "upColor,overColor,downColor,disableColor"。</p>
	*/
	__getset(0,__proto,'strokeColors',function(){
		return this._strokeColors ? this._strokeColors.join(","):"";
		},function(value){
		this._strokeColors=UIUtils.fillArray(Styles.buttonLabelColors,value,String);
		this._setStateChanged();
	});

	/**
	*表示按钮各个状态下的文本颜色。
	*<p><b>格式:</b> "upColor,overColor,downColor,disableColor"。</p>
	*/
	__getset(0,__proto,'labelColors',function(){
		return this._labelColors.join(",");
		},function(value){
		this._labelColors=UIUtils.fillArray(Styles.buttonLabelColors,value,String);
		this._setStateChanged();
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'measureWidth',function(){
		this.runCallLater(this.changeClips);
		if (this._autoSize)return this._bitmap.width;
		this.runCallLater(this.changeState);
		return this._bitmap.width+(this._text ? this._text.width :0);
	});

	/**
	*按钮的文本内容。
	*/
	__getset(0,__proto,'label',function(){
		return this._text ? this._text.text :null;
		},function(value){
		if (!this._text && !value)return;
		this.createText();
		if (this._text.text !=value){
			value && !this._text.parent && this.addChild(this._text);
			this._text.text=(value+"").replace(/\\n/g,"\n");
			this._setStateChanged();
		}
	});

	/**
	*表示按钮的选中状态。
	*<p>如果值为true，表示该对象处于选中状态。否则该对象处于未选中状态。</p>
	*/
	__getset(0,__proto,'selected',function(){
		return this._selected;
		},function(value){
		if (this._selected !=value){
			this._selected=value;
			this.state=this._selected ? 2 :0;
			this.event(/*laya.events.Event.CHANGE*/"change");
		}
	});

	/**
	*表示按钮文本标签的边距。
	*<p><b>格式：</b>"上边距,右边距,下边距,左边距"。</p>
	*/
	__getset(0,__proto,'labelPadding',function(){
		this.createText();
		return this._text.padding.join(",");
		},function(value){
		this.createText();
		this._text.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
	});

	/**
	*表示按钮文本标签的字体大小。
	*@see laya.display.Text.fontSize()
	*/
	__getset(0,__proto,'labelSize',function(){
		this.createText();
		return this._text.fontSize;
		},function(value){
		this.createText();
		this._text.fontSize=value
	});

	/**
	*<p>描边宽度（以像素为单位）。</p>
	*默认值0，表示不描边。
	*@see laya.display.Text.stroke()
	*/
	__getset(0,__proto,'labelStroke',function(){
		this.createText();
		return this._text.stroke;
		},function(value){
		this.createText();
		this._text.stroke=value
	});

	/**
	*表示按钮文本标签是否为粗体字。
	*@see laya.display.Text.bold()
	*/
	__getset(0,__proto,'labelBold',function(){
		this.createText();
		return this._text.bold;
		},function(value){
		this.createText();
		this._text.bold=value;
	});

	/**
	*表示按钮文本标签的字体名称，以字符串形式表示。
	*@see laya.display.Text.font()
	*/
	__getset(0,__proto,'labelFont',function(){
		this.createText();
		return this._text.font;
		},function(value){
		this.createText();
		this._text.font=value;
	});

	/**标签对齐模式，默认为居中对齐。*/
	__getset(0,__proto,'labelAlign',function(){
		this.createText()
		return this._text.align;
		},function(value){
		this.createText()
		this._text.align=value;
	});

	/**
	*对象的点击事件处理器函数（无默认参数）。
	*/
	__getset(0,__proto,'clickHandler',function(){
		return this._clickHandler;
		},function(value){
		this._clickHandler=value;
	});

	/**
	*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
		return null;
		},function(value){
		this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Component,this,'width',value);
		if (this._autoSize){
			this._bitmap.width=value;
			this._text && (this._text.width=value);
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Component,this,'height',value);
		if (this._autoSize){
			this._bitmap.height=value;
			this._text && (this._text.height=value);
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='number')|| (typeof value=='string'))this.label=value+"";
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**图标x,y偏移，格式：100,100*/
	__getset(0,__proto,'iconOffset',function(){
		return this._bitmap._offset ? this._bitmap._offset.join(","):null;
		},function(value){
		if (value)this._bitmap._offset=UIUtils.fillArray([1,1],value,Number);
		else this._bitmap._offset=[];
	});

	__static(Button,
	['stateMap',function(){return this.stateMap={"mouseup":0,"mouseover":1,"mousedown":2,"mouseout":0};}
	]);
	return Button;
})(Component)


/**
*<p> <code>Clip</code> 类是位图切片动画。</p>
*<p> <code>Clip</code> 可将一张图片，按横向分割数量 <code>clipX</code> 、竖向分割数量 <code>clipY</code> ，
*或横向分割每个切片的宽度 <code>clipWidth</code> 、竖向分割每个切片的高度 <code>clipHeight</code> ，
*从左向右，从上到下，分割组合为一个切片动画。</p>
*Image和Clip组件是唯一支持异步加载的两个组件，比如clip.skin="abc/xxx.png"，其他UI组件均不支持异步加载。
*
*@example <caption>以下示例代码，创建了一个 <code>Clip</code> 实例。</caption>
*package
*{
	*import laya.ui.Clip;
	*public class Clip_Example
	*{
		*private var clip:Clip;
		*public function Clip_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*clip=new Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
			*clip.autoPlay=true;//设置 clip 动画自动播放。
			*clip.interval=100;//设置 clip 动画的播放时间间隔。
			*clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
			*clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
			*clip.on(Event.CLICK,this,onClick);//给 clip 添加点击事件函数侦听。
			*Laya.stage.addChild(clip);//将此 clip 对象添加到显示列表。
			*}
		*private function onClick():void
		*{
			*trace("clip 的点击事件侦听处理函数。clip.total="+clip.total);
			*if (clip.isPlaying==true)
			*{
				*clip.stop();//停止动画。
				*}else {
				*clip.play();//播放动画。
				*}
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var clip;
*Laya.loader.load("resource/ui/clip_num.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*function loadComplete(){
	*console.log("资源加载完成！");
	*clip=new laya.ui.Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
	*clip.autoPlay=true;//设置 clip 动画自动播放。
	*clip.interval=100;//设置 clip 动画的播放时间间隔。
	*clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
	*clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
	*clip.on(Event.CLICK,this,onClick);//给 clip 添加点击事件函数侦听。
	*Laya.stage.addChild(clip);//将此 clip 对象添加到显示列表。
	*}
*function onClick()
*{
	*console.log("clip 的点击事件侦听处理函数。");
	*if(clip.isPlaying==true)
	*{
		*clip.stop();
		*}else {
		*clip.play();
		*}
	*}
*@example
*import Clip=laya.ui.Clip;
*import Handler=laya.utils.Handler;
*class Clip_Example {
	*private clip:Clip;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*this.clip=new Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
		*this.clip.autoPlay=true;//设置 clip 动画自动播放。
		*this.clip.interval=100;//设置 clip 动画的播放时间间隔。
		*this.clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
		*this.clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
		*this.clip.on(laya.events.Event.CLICK,this,this.onClick);//给 clip 添加点击事件函数侦听。
		*Laya.stage.addChild(this.clip);//将此 clip 对象添加到显示列表。
		*}
	*private onClick():void {
		*console.log("clip 的点击事件侦听处理函数。clip.total="+this.clip.total);
		*if (this.clip.isPlaying==true){
			*this.clip.stop();//停止动画。
			*}else {
			*this.clip.play();//播放动画。
			*}
		*}
	*}
*
*/
//class laya.ui.Clip extends laya.ui.Component
var Clip=(function(_super){
	function Clip(url,clipX,clipY){
		/**@private */
		this._sources=null;
		/**@private */
		this._bitmap=null;
		/**@private */
		this._skin=null;
		/**@private */
		this._clipX=1;
		/**@private */
		this._clipY=1;
		/**@private */
		this._clipWidth=0;
		/**@private */
		this._clipHeight=0;
		/**@private */
		this._autoPlay=false;
		/**@private */
		this._interval=50;
		/**@private */
		this._complete=null;
		/**@private */
		this._isPlaying=false;
		/**@private */
		this._index=0;
		/**@private */
		this._clipChanged=false;
		/**@private */
		this._group=null;
		/**@private */
		this._toIndex=-1;
		Clip.__super.call(this);
		(clipX===void 0)&& (clipX=1);
		(clipY===void 0)&& (clipY=1);
		this._clipX=clipX;
		this._clipY=clipY;
		this.skin=url;
	}

	__class(Clip,'laya.ui.Clip',_super);
	var __proto=Clip.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,true);
		this._bitmap && this._bitmap.destroy();
		this._bitmap=null;
		this._sources=null;
	}

	/**
	*销毁对象并释放加载的皮肤资源。
	*/
	__proto.dispose=function(){
		this.destroy(true);
		Laya.loader.clearRes(this._skin);
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.graphics=this._bitmap=new AutoBitmap();
	}

	/**@private */
	__proto._onDisplay=function(e){
		if (this._isPlaying){
			if (this._displayedInStage)this.play();
			else this.stop();
			}else if (this._autoPlay){
			this.play();
		}
	}

	/**
	*@private
	*改变切片的资源、切片的大小。
	*/
	__proto.changeClip=function(){
		this._clipChanged=false;
		if (!this._skin)return;
		var img=Loader.getRes(this._skin);
		if (img){
			this.loadComplete(this._skin,img);
			}else {
			Laya.loader.load(this._skin,Handler.create(this,this.loadComplete,[this._skin]));
		}
	}

	/**
	*@private
	*加载切片图片资源完成函数。
	*@param url 资源地址。
	*@param img 纹理。
	*/
	__proto.loadComplete=function(url,img){
		if (url===this._skin && img){
			var w=this._clipWidth || Math.ceil(img.sourceWidth / this._clipX);
			var h=this._clipHeight || Math.ceil(img.sourceHeight / this._clipY);
			var key=this._skin+w+h;
			var clips=WeakObject.I.get(key);
			if (!Utils.isOkTextureList(clips)){
				clips=null;
			}
			if (clips)this._sources=clips;
			else {
				this._sources=[];
				for (var i=0;i < this._clipY;i++){
					for (var j=0;j < this._clipX;j++){
						this._sources.push(Texture.createFromTexture(img,w *j,h *i,w,h));
					}
				}
				WeakObject.I.set(key,this._sources);
			}
			this.index=this._index;
			this.event(/*laya.events.Event.LOADED*/"loaded");
			this.onCompResize();
		}
	}

	/**
	*播放动画。
	*@param from 开始索引
	*@param to 结束索引，-1为不限制
	*/
	__proto.play=function(from,to){
		(from===void 0)&& (from=0);
		(to===void 0)&& (to=-1);
		this._isPlaying=true;
		this.index=from;
		this._toIndex=to;
		this._index++;
		Laya.timer.loop(this.interval,this,this._loop);
		this.on(/*laya.events.Event.DISPLAY*/"display",this,this._onDisplay);
		this.on(/*laya.events.Event.UNDISPLAY*/"undisplay",this,this._onDisplay);
	}

	/**
	*@private
	*/
	__proto._loop=function(){
		if (this._style.visible && this._sources){
			this._index++;
			if (this._toIndex >-1 && this._index >=this._toIndex)this.stop();
			else if (this._index >=this._sources.length)this._index=0;
			this.index=this._index;
		}
	}

	/**
	*停止动画。
	*/
	__proto.stop=function(){
		this._isPlaying=false;
		Laya.timer.clear(this,this._loop);
		this.event(/*laya.events.Event.COMPLETE*/"complete");
	}

	/**@private */
	__proto._setClipChanged=function(){
		if (!this._clipChanged){
			this._clipChanged=true;
			this.callLater(this.changeClip);
		}
	}

	/**
	*表示动画播放间隔时间(以毫秒为单位)。
	*/
	__getset(0,__proto,'interval',function(){
		return this._interval;
		},function(value){
		if (this._interval !=value){
			this._interval=value;
			if (this._isPlaying)this.play();
		}
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			if (value){
				this._setClipChanged()
				}else {
				this._bitmap.source=null;
			}
		}
	});

	/**
	*源数据。
	*/
	__getset(0,__proto,'sources',function(){
		return this._sources;
		},function(value){
		this._sources=value;
		this.index=this._index;
		this.event(/*laya.events.Event.LOADED*/"loaded");
	});

	/**X轴（横向）切片数量。*/
	__getset(0,__proto,'clipX',function(){
		return this._clipX;
		},function(value){
		this._clipX=value || 1;
		this._setClipChanged()
	});

	/**Y轴(竖向)切片数量。*/
	__getset(0,__proto,'clipY',function(){
		return this._clipY;
		},function(value){
		this._clipY=value || 1;
		this._setClipChanged()
	});

	/**
	*切片动画的总帧数。
	*/
	__getset(0,__proto,'total',function(){
		this.runCallLater(this.changeClip);
		return this._sources ? this._sources.length :0;
	});

	/**
	*横向分割时每个切片的宽度，与 <code>clipX</code> 同时设置时优先级高于 <code>clipX</code> 。
	*/
	__getset(0,__proto,'clipWidth',function(){
		return this._clipWidth;
		},function(value){
		this._clipWidth=value;
		this._setClipChanged()
	});

	/**
	*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
		return null;
		},function(value){
		this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
	});

	/**
	*资源分组。
	*/
	__getset(0,__proto,'group',function(){
		return this._group;
		},function(value){
		if (value && this._skin)Loader.setGroup(this._skin,value);
		this._group=value;
	});

	/**
	*竖向分割时每个切片的高度，与 <code>clipY</code> 同时设置时优先级高于 <code>clipY</code> 。
	*/
	__getset(0,__proto,'clipHeight',function(){
		return this._clipHeight;
		},function(value){
		this._clipHeight=value;
		this._setClipChanged()
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Component,this,'width',value);
		this._bitmap.width=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Component,this,'height',value);
		this._bitmap.height=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		this.runCallLater(this.changeClip);
		return this._bitmap.width;
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		this.runCallLater(this.changeClip);
		return this._bitmap.height;
	});

	/**
	*当前帧索引。
	*/
	__getset(0,__proto,'index',function(){
		return this._index;
		},function(value){
		this._index=value;
		this._bitmap && this._sources && (this._bitmap.source=this._sources[value]);
		this.event(/*laya.events.Event.CHANGE*/"change");
	});

	/**
	*表示是否自动播放动画，若自动播放值为true,否则值为false;
	*<p>可控制切片动画的播放、停止。</p>
	*/
	__getset(0,__proto,'autoPlay',function(){
		return this._autoPlay;
		},function(value){
		if (this._autoPlay !=value){
			this._autoPlay=value;
			value ? this.play():this.stop();
		}
	});

	/**
	*表示动画的当前播放状态。
	*如果动画正在播放中，则为true，否则为flash。
	*/
	__getset(0,__proto,'isPlaying',function(){
		return this._isPlaying;
		},function(value){
		this._isPlaying=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.index=parseInt(value);
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**
	*<code>AutoBitmap</code> 位图实例。
	*/
	__getset(0,__proto,'bitmap',function(){
		return this._bitmap;
	});

	return Clip;
})(Component)


/**
*<code>ColorPicker</code> 组件将显示包含多个颜色样本的列表，用户可以从中选择颜色。
*
*@example <caption>以下示例代码，创建了一个 <code>ColorPicker</code> 实例。</caption>
*package
*{
	*import laya.ui.ColorPicker;
	*import laya.utils.Handler;
	*public class ColorPicker_Example
	*{
		*public function ColorPicker_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/color.png",Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*trace("资源加载完成！");
			*var colorPicket:ColorPicker=new ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
			*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
			*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
			*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
			*colorPicket.changeHandler=new Handler(this,onChangeColor,[colorPicket]);//设置 colorPicket 的颜色改变回调函数。
			*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
			*}
		*private function onChangeColor(colorPicket:ColorPicker):void
		*{
			*trace("当前选择的颜色： "+colorPicket.selectedColor);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load("resource/ui/color.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*function loadComplete()
*{
	*console.log("资源加载完成！");
	*var colorPicket=new laya.ui.ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
	*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
	*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
	*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
	*colorPicket.changeHandler=laya.utils.Handler.create(this,onChangeColor,[colorPicket],false);//设置 colorPicket 的颜色改变回调函数。
	*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
	*}
*function onChangeColor(colorPicket)
*{
	*console.log("当前选择的颜色： "+colorPicket.selectedColor);
	*}
*@example
*import ColorPicker=laya.ui.ColorPicker;
*import Handler=laya.utils.Handler;
*class ColorPicker_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/color.png",Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*console.log("资源加载完成！");
		*var colorPicket:ColorPicker=new ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
		*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
		*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
		*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
		*colorPicket.changeHandler=new Handler(this,this.onChangeColor,[colorPicket]);//设置 colorPicket 的颜色改变回调函数。
		*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
		*}
	*private onChangeColor(colorPicket:ColorPicker):void {
		*console.log("当前选择的颜色： "+colorPicket.selectedColor);
		*}
	*}
*/
//class laya.ui.ColorPicker extends laya.ui.Component
var ColorPicker=(function(_super){
	function ColorPicker(){
		/**
		*当颜色发生改变时执行的函数处理器。
		*默认返回参数color：颜色值字符串。
		*/
		this.changeHandler=null;
		/**
		*@private
		*指定每个正方形的颜色小格子的宽高（以像素为单位）。
		*/
		this._gridSize=11;
		/**
		*@private
		*表示颜色样本列表面板的背景颜色值。
		*/
		this._bgColor="#ffffff";
		/**
		*@private
		*表示颜色样本列表面板的边框颜色值。
		*/
		this._borderColor="#000000";
		/**
		*@private
		*表示颜色样本列表面板选择或输入的颜色值。
		*/
		this._inputColor="#000000";
		/**
		*@private
		*表示颜色输入框的背景颜色值。
		*/
		this._inputBgColor="#efefef";
		/**
		*@private
		*表示颜色样本列表面板。
		*/
		this._colorPanel=null;
		/**
		*@private
		*表示颜色网格。
		*/
		this._colorTiles=null;
		/**
		*@private
		*表示颜色块显示对象。
		*/
		this._colorBlock=null;
		/**
		*@private
		*表示颜色输入框控件 <code>Input</code> 。
		*/
		this._colorInput=null;
		/**
		*@private
		*表示点击后显示颜色样本列表面板的按钮控件 <code>Button</code> 。
		*/
		this._colorButton=null;
		/**
		*@private
		*表示颜色值列表。
		*/
		this._colors=[];
		/**
		*@private
		*表示选择的颜色值。
		*/
		this._selectedColor="#000000";
		/**@private */
		this._panelChanged=false;
		ColorPicker.__super.call(this);
	}

	__class(ColorPicker,'laya.ui.ColorPicker',_super);
	var __proto=ColorPicker.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._colorPanel && this._colorPanel.destroy(destroyChild);
		this._colorButton && this._colorButton.destroy(destroyChild);
		this._colorPanel=null;
		this._colorTiles=null;
		this._colorBlock=null;
		this._colorInput=null;
		this._colorButton=null;
		this._colors=null;
		this.changeHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._colorButton=new Button());
		this._colorPanel=new Box();
		this._colorPanel.size(230,166);
		this._colorPanel.addChild(this._colorTiles=new Sprite());
		this._colorPanel.addChild(this._colorBlock=new Sprite());
		this._colorPanel.addChild(this._colorInput=new Input());
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		this._colorButton.on(/*laya.events.Event.CLICK*/"click",this,this.onColorButtonClick);
		this._colorBlock.pos(5,5);
		this._colorInput.pos(60,5);
		this._colorInput.size(60,20);
		this._colorInput.on(/*laya.events.Event.CHANGE*/"change",this,this.onColorInputChange);
		this._colorInput.on(/*laya.events.Event.KEY_DOWN*/"keydown",this,this.onColorFieldKeyDown);
		this._colorTiles.pos(5,30);
		this._colorTiles.on(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this.onColorTilesMouseMove);
		this._colorTiles.on(/*laya.events.Event.CLICK*/"click",this,this.onColorTilesClick);
		this._colorTiles.size(20 *this._gridSize,12 *this._gridSize);
		this._colorPanel.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onPanelMouseDown);
		this.bgColor=this._bgColor;
	}

	__proto.onPanelMouseDown=function(e){
		e.stopPropagation();
	}

	/**
	*改变颜色样本列表面板。
	*/
	__proto.changePanel=function(){
		this._panelChanged=false;
		var g=this._colorPanel.graphics;
		g.clear();
		g.drawRect(0,0,230,166,this._bgColor,this._borderColor);
		this.drawBlock(this._selectedColor);
		this._colorInput.borderColor=this._borderColor;
		this._colorInput.bgColor=this._inputBgColor;
		this._colorInput.color=this._inputColor;
		g=this._colorTiles.graphics;
		g.clear();
		var mainColors=[0x000000,0x333333,0x666666,0x999999,0xCCCCCC,0xFFFFFF,0xFF0000,0x00FF00,0x0000FF,0xFFFF00,0x00FFFF,0xFF00FF];
		for (var i=0;i < 12;i++){
			for (var j=0;j < 20;j++){
				var color=0;
				if (j===0)color=mainColors[i];
				else if (j===1)color=0x000000;
				else color=(((i *3+j / 6)% 3 << 0)+((i / 6)<< 0)*3)*0x33 << 16 | j % 6 *0x33 << 8 | (i << 0)% 6 *0x33;
				var strColor=UIUtils.toColor(color);
				this._colors.push(strColor);
				var x=j *this._gridSize;
				var y=i *this._gridSize;
				g.drawRect(x,y,this._gridSize,this._gridSize,strColor,"#000000");
			}
		}
	}

	/**
	*颜色样本列表面板的显示按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onColorButtonClick=function(e){
		if (this._colorPanel.parent)this.close();
		else this.open();
	}

	/**
	*打开颜色样本列表面板。
	*/
	__proto.open=function(){
		var p=this.localToGlobal(new Point());
		var px=p.x+this._colorPanel.width <=Laya.stage.width ? p.x :Laya.stage.width-this._colorPanel.width;
		var py=p.y+this._colorButton.height;
		py=py+this._colorPanel.height <=Laya.stage.height ? py :p.y-this._colorPanel.height;
		this._colorPanel.pos(px,py);
		this._colorPanel.zOrder=1001;
		Laya._currentStage.addChild(this._colorPanel);
		Laya.stage.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.removeColorBox);
	}

	/**
	*关闭颜色样本列表面板。
	*/
	__proto.close=function(){
		Laya.stage.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.removeColorBox);
		this._colorPanel.removeSelf();
	}

	/**
	*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.removeColorBox=function(e){
		this.close();
	}

	/**
	*小格子色块的 <code>Event.KEY_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onColorFieldKeyDown=function(e){
		if (e.keyCode==13){
			if (this._colorInput.text)this.selectedColor=this._colorInput.text;
			else this.selectedColor=null;
			this.close();
			e.stopPropagation();
		}
	}

	/**
	*颜色值输入框 <code>Event.CHANGE</code> 事件侦听处理函数。
	*/
	__proto.onColorInputChange=function(e){
		if (this._colorInput.text)this.drawBlock(this._colorInput.text);
		else this.drawBlock("#FFFFFF");
	}

	/**
	*小格子色块的 <code>Event.CLICK</code> 事件侦听处理函数。
	*/
	__proto.onColorTilesClick=function(e){
		this.selectedColor=this.getColorByMouse();
		this.close();
	}

	/**
	*@private
	*小格子色块的 <code>Event.MOUSE_MOVE</code> 事件侦听处理函数。
	*/
	__proto.onColorTilesMouseMove=function(e){
		this._colorInput.focus=false;
		var color=this.getColorByMouse();
		this._colorInput.text=color;
		this.drawBlock(color);
	}

	/**
	*通过鼠标位置取对应的颜色块的颜色值。
	*/
	__proto.getColorByMouse=function(){
		var point=this._colorTiles.getMousePoint();
		var x=Math.floor(point.x / this._gridSize);
		var y=Math.floor(point.y / this._gridSize);
		return this._colors[y *20+x];
	}

	/**
	*绘制颜色块。
	*@param color 需要绘制的颜色块的颜色值。
	*/
	__proto.drawBlock=function(color){
		var g=this._colorBlock.graphics;
		g.clear();
		var showColor=color ? color :"#ffffff";
		g.drawRect(0,0,50,20,showColor,this._borderColor);
		color || g.drawLine(0,0,50,20,"#ff0000");
	}

	/**
	*改变颜色。
	*/
	__proto.changeColor=function(){
		var g=this.graphics;
		g.clear();
		var showColor=this._selectedColor || "#000000";
		g.drawRect(0,0,this._colorButton.width,this._colorButton.height,showColor);
	}

	/**@private */
	__proto._setPanelChanged=function(){
		if (!this._panelChanged){
			this._panelChanged=true;
			this.callLater(this.changePanel);
		}
	}

	/**
	*表示颜色输入框的背景颜色值。
	*/
	__getset(0,__proto,'inputBgColor',function(){
		return this._inputBgColor;
		},function(value){
		this._inputBgColor=value;
		this._setPanelChanged();
	});

	/**
	*表示选择的颜色值。
	*/
	__getset(0,__proto,'selectedColor',function(){
		return this._selectedColor;
		},function(value){
		if (this._selectedColor !=value){
			this._selectedColor=this._colorInput.text=value;
			this.drawBlock(value);
			this.changeColor();
			this.changeHandler && this.changeHandler.runWith(this._selectedColor);
			this.event(/*laya.events.Event.CHANGE*/"change",Event.EMPTY.setTo(/*laya.events.Event.CHANGE*/"change",this,this));
		}
	});

	/**
	*@copy laya.ui.Button#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._colorButton.skin;
		},function(value){
		this._colorButton.skin=value;
		this.changeColor();
	});

	/**
	*表示颜色样本列表面板的背景颜色值。
	*/
	__getset(0,__proto,'bgColor',function(){
		return this._bgColor;
		},function(value){
		this._bgColor=value;
		this._setPanelChanged();
	});

	/**
	*表示颜色样本列表面板的边框颜色值。
	*/
	__getset(0,__proto,'borderColor',function(){
		return this._borderColor;
		},function(value){
		this._borderColor=value;
		this._setPanelChanged();
	});

	/**
	*表示颜色样本列表面板选择或输入的颜色值。
	*/
	__getset(0,__proto,'inputColor',function(){
		return this._inputColor;
		},function(value){
		this._inputColor=value;
		this._setPanelChanged();
	});

	return ColorPicker;
})(Component)


/**
*<code>ComboBox</code> 组件包含一个下拉列表，用户可以从该列表中选择单个值。
*
*@example <caption>以下示例代码，创建了一个 <code>ComboBox</code> 实例。</caption>
*package
*{
	*import laya.ui.ComboBox;
	*import laya.utils.Handler;
	*public class ComboBox_Example
	*{
		*public function ComboBox_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*trace("资源加载完成！");
			*var comboBox:ComboBox=new ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
			*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
			*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
			*comboBox.selectHandler=new Handler(this,onSelect);//设置 comboBox 选择项改变时执行的处理器。
			*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
			*}
		*private function onSelect(index:int):void
		*{
			*trace("当前选中的项对象索引： ",index);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高。
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*function loadComplete(){
	*console.log("资源加载完成！");
	*var comboBox=new laya.ui.ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
	*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
	*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
	*comboBox.selectHandler=new laya.utils.Handler(this,onSelect);//设置 comboBox 选择项改变时执行的处理器。
	*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
	*}
*function onSelect(index)
*{
	*console.log("当前选中的项对象索引： ",index);
	*}
*@example
*import ComboBox=laya.ui.ComboBox;
*import Handler=laya.utils.Handler;
*class ComboBox_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/button.png",Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*console.log("资源加载完成！");
		*var comboBox:ComboBox=new ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
		*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
		*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
		*comboBox.selectHandler=new Handler(this,this.onSelect);//设置 comboBox 选择项改变时执行的处理器。
		*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
		*}
	*private onSelect(index:number):void {
		*console.log("当前选中的项对象索引： ",index);
		*}
	*}
*
*/
//class laya.ui.ComboBox extends laya.ui.Component
var ComboBox=(function(_super){
	function ComboBox(skin,labels){
		/**@private */
		this._visibleNum=6;
		/**
		*@private
		*/
		this._button=null;
		/**
		*@private
		*/
		this._list=null;
		/**
		*@private
		*/
		this._isOpen=false;
		/**
		*@private
		*/
		this._itemSize=12;
		/**
		*@private
		*/
		this._labels=[];
		/**
		*@private
		*/
		this._selectedIndex=-1;
		/**
		*@private
		*/
		this._selectHandler=null;
		/**
		*@private
		*/
		this._itemHeight=NaN;
		/**
		*@private
		*/
		this._listHeight=NaN;
		/**
		*@private
		*/
		this._listChanged=false;
		/**
		*@private
		*/
		this._itemChanged=false;
		/**
		*@private
		*/
		this._scrollBarSkin=null;
		/**
		*@private
		*/
		this._isCustomList=false;
		/**
		*渲染项，用来显示下拉列表展示对象
		*/
		this.itemRender=null;
		ComboBox.__super.call(this);
		this._itemColors=Styles.comboBoxItemColors;
		this.skin=skin;
		this.labels=labels;
	}

	__class(ComboBox,'laya.ui.ComboBox',_super);
	var __proto=ComboBox.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._button && this._button.destroy(destroyChild);
		this._list && this._list.destroy(destroyChild);
		this._button=null;
		this._list=null;
		this._itemColors=null;
		this._labels=null;
		this._selectHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._button=new Button());
		this._button.text.align="left";
		this._button.labelPadding="0,0,0,5";
		this._button.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onButtonMouseDown);
	}

	__proto._createList=function(){
		this._list=new List();
		if (this._scrollBarSkin)this._list.vScrollBarSkin=this._scrollBarSkin;
		this._setListEvent(this._list);
	}

	__proto._setListEvent=function(list){
		this._list.selectEnable=true;
		this._list.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onListDown);
		this._list.mouseHandler=Handler.create(this,this.onlistItemMouse,null,false);
		if (this._list.scrollBar)this._list.scrollBar.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onScrollBarDown);
	}

	/**
	*@private
	*/
	__proto.onListDown=function(e){
		e.stopPropagation();
	}

	__proto.onScrollBarDown=function(e){
		e.stopPropagation();
	}

	__proto.onButtonMouseDown=function(e){
		this.callLater(this.switchTo,[!this._isOpen]);
	}

	/**
	*@private
	*/
	__proto.changeList=function(){
		this._listChanged=false;
		var labelWidth=this.width-2;
		var labelColor=this._itemColors[2];
		this._itemHeight=this._itemSize+6;
		this._list.itemRender=this.itemRender || {type:"Box",child:[{type:"Label",props:{name:"label",x:1,padding:"3,3,3,3",width:labelWidth,height:this._itemHeight,fontSize:this._itemSize,color:labelColor}}]};
		this._list.repeatY=this._visibleNum;
		this._list.refresh();
	}

	/**
	*@private
	*下拉列表的鼠标事件响应函数。
	*/
	__proto.onlistItemMouse=function(e,index){
		var type=e.type;
		if (type===/*laya.events.Event.MOUSE_OVER*/"mouseover" || type===/*laya.events.Event.MOUSE_OUT*/"mouseout"){
			if (this._isCustomList)return;
			var box=this._list.getCell(index);
			if (!box)return;
			var label=box.getChildByName("label");
			if (label){
				if (type===/*laya.events.Event.ROLL_OVER*/"mouseover"){
					label.bgColor=this._itemColors[0];
					label.color=this._itemColors[1];
					}else {
					label.bgColor=null;
					label.color=this._itemColors[2];
				}
			}
			}else if (type===/*laya.events.Event.CLICK*/"click"){
			this.selectedIndex=index;
			this.isOpen=false;
		}
	}

	/**
	*@private
	*/
	__proto.switchTo=function(value){
		this.isOpen=value;
	}

	/**
	*更改下拉列表的打开状态。
	*/
	__proto.changeOpen=function(){
		this.isOpen=!this._isOpen;
	}

	/**
	*更改下拉列表。
	*/
	__proto.changeItem=function(){
		this._itemChanged=false;
		this._listHeight=this._labels.length > 0 ? Math.min(this._visibleNum,this._labels.length)*this._itemHeight :this._itemHeight;
		if (!this._isCustomList){
			var g=this._list.graphics;
			g.clear();
			g.drawRect(0,0,this.width-1,this._listHeight,this._itemColors[4],this._itemColors[3]);
		};
		var a=this._list.array || [];
		a.length=0;
		for (var i=0,n=this._labels.length;i < n;i++){
			a.push({label:this._labels[i]});
		}
		this._list.height=this._listHeight;
		this._list.array=a;
	}

	__proto.changeSelected=function(){
		this._button.label=this.selectedLabel;
	}

	__proto._onStageMouseWheel=function(e){
		if(!this._list||this._list.contains(e.target))return;
		this.removeList(null);
	}

	/**
	*关闭下拉列表。
	*/
	__proto.removeList=function(e){
		Laya.stage.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.removeList);
		Laya.stage.off(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel",this,this._onStageMouseWheel);
		this.isOpen=false;
	}

	/**
	*表示选择的下拉列表项的索引。
	*/
	__getset(0,__proto,'selectedIndex',function(){
		return this._selectedIndex;
		},function(value){
		if (this._selectedIndex !=value){
			this._selectedIndex=value;
			if (this._labels.length > 0)this.changeSelected();
			else this.callLater(this.changeSelected);
			this.event(/*laya.events.Event.CHANGE*/"change",[Event.EMPTY.setTo(/*laya.events.Event.CHANGE*/"change",this,this)]);
			this._selectHandler && this._selectHandler.runWith(this._selectedIndex);
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		return this._button.height;
	});

	/**
	*@copy laya.ui.Button#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._button.skin;
		},function(value){
		if (this._button.skin !=value){
			this._button.skin=value;
			this._listChanged=true;
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		return this._button.width;
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Component,this,'width',value);
		this._button.width=this._width;
		this._itemChanged=true;
		this._listChanged=true;
	});

	/**
	*表示选择的下拉列表项的的标签。
	*/
	__getset(0,__proto,'selectedLabel',function(){
		return this._selectedIndex >-1 && this._selectedIndex < this._labels.length ? this._labels[this._selectedIndex] :null;
		},function(value){
		this.selectedIndex=this._labels.indexOf(value);
	});

	/**
	*标签集合字符串。
	*/
	__getset(0,__proto,'labels',function(){
		return this._labels.join(",");
		},function(value){
		if (this._labels.length > 0)this.selectedIndex=-1;
		if (value)this._labels=value.split(",");
		else this._labels.length=0;
		this._itemChanged=true;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Component,this,'height',value);
		this._button.height=this._height;
	});

	/**
	*改变下拉列表的选择项时执行的处理器(默认返回参数index:int)。
	*/
	__getset(0,__proto,'selectHandler',function(){
		return this._selectHandler;
		},function(value){
		this._selectHandler=value;
	});

	/**
	*获取或设置没有滚动条的下拉列表中可显示的最大行数。
	*/
	__getset(0,__proto,'visibleNum',function(){
		return this._visibleNum;
		},function(value){
		this._visibleNum=value;
		this._listChanged=true;
	});

	/**
	*表示按钮文本标签是否为粗体字。
	*@see laya.display.Text#bold
	*/
	__getset(0,__proto,'labelBold',function(){
		return this._button.text.bold;
		},function(value){
		this._button.text.bold=value
	});

	/**
	*下拉列表项颜色。
	*<p><b>格式：</b>"悬停或被选中时背景颜色,悬停或被选中时标签颜色,标签颜色,边框颜色,背景颜色"</p>
	*/
	__getset(0,__proto,'itemColors',function(){
		return String(this._itemColors)
		},function(value){
		this._itemColors=UIUtils.fillArray(this._itemColors,value,String);
		this._listChanged=true;
	});

	/**
	*下拉列表项标签的字体大小。
	*/
	__getset(0,__proto,'itemSize',function(){
		return this._itemSize;
		},function(value){
		this._itemSize=value;
		this._listChanged=true;
	});

	/**
	*获取对 <code>ComboBox</code> 组件所包含的 <code>VScrollBar</code> 滚动条组件的引用。
	*/
	__getset(0,__proto,'scrollBar',function(){
		return this.list.scrollBar;
	});

	/**
	*表示下拉列表的打开状态。
	*/
	__getset(0,__proto,'isOpen',function(){
		return this._isOpen;
		},function(value){
		if (this._isOpen !=value){
			this._isOpen=value;
			this._button.selected=this._isOpen;
			if (this._isOpen){
				this._list || this._createList();
				this._listChanged && !this._isCustomList && this.changeList();
				this._itemChanged && this.changeItem();
				var p=this.localToGlobal(Point.TEMP.setTo(0,0));
				var py=p.y+this._button.height;
				py=py+this._listHeight <=Laya.stage.height ? py :p.y-this._listHeight;
				this._list.pos(p.x,py);
				this._list.zOrder=1001;
				Laya._currentStage.addChild(this._list);
				Laya.stage.once(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.removeList);
				Laya.stage.on(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel",this,this._onStageMouseWheel);
				this._list.selectedIndex=this._selectedIndex;
				}else {
				this._list && this._list.removeSelf();
			}
		}
	});

	/**
	*滚动条皮肤。
	*/
	__getset(0,__proto,'scrollBarSkin',function(){
		return this._scrollBarSkin;
		},function(value){
		this._scrollBarSkin=value;
	});

	/**
	*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this._button.sizeGrid;
		},function(value){
		this._button.sizeGrid=value;
	});

	/**
	*获取对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的引用。
	*/
	__getset(0,__proto,'button',function(){
		return this._button;
	});

	/**
	*获取对 <code>ComboBox</code> 组件所包含的 <code>List</code> 列表组件的引用。
	*/
	__getset(0,__proto,'list',function(){
		this._list || this._createList();
		return this._list;
		},function(value){
		if (value){
			value.removeSelf();
			this._isCustomList=true;
			this._list=value;
			this._setListEvent(value);
			this._itemHeight=value.getCell(0).height+value.spaceY;
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
		else if ((value instanceof Array))this.labels=(value).join(",");
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**
	*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的文本标签颜色。
	*<p><b>格式：</b>upColor,overColor,downColor,disableColor</p>
	*/
	__getset(0,__proto,'labelColors',function(){
		return this._button.labelColors;
		},function(value){
		if (this._button.labelColors !=value){
			this._button.labelColors=value;
		}
	});

	/**
	*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的文本边距。
	*<p><b>格式：</b>上边距,右边距,下边距,左边距</p>
	*/
	__getset(0,__proto,'labelPadding',function(){
		return this._button.text.padding.join(",");
		},function(value){
		this._button.text.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
	});

	/**
	*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的标签字体大小。
	*/
	__getset(0,__proto,'labelSize',function(){
		return this._button.text.fontSize;
		},function(value){
		this._button.text.fontSize=value
	});

	/**
	*表示按钮文本标签的字体名称，以字符串形式表示。
	*@see laya.display.Text#font
	*/
	__getset(0,__proto,'labelFont',function(){
		return this._button.text.font;
		},function(value){
		this._button.text.font=value
	});

	/**
	*表示按钮的状态值。
	*@see laya.ui.Button#stateNum
	*/
	__getset(0,__proto,'stateNum',function(){
		return this._button.stateNum;
		},function(value){
		this._button.stateNum=value
	});

	return ComboBox;
})(Component)


/**
*<code>ScrollBar</code> 组件是一个滚动条组件。
*<p>当数据太多以至于显示区域无法容纳时，最终用户可以使用 <code>ScrollBar</code> 组件控制所显示的数据部分。</p>
*<p> 滚动条由四部分组成：两个箭头按钮、一个轨道和一个滑块。 </p> *
*
*@see laya.ui.VScrollBar
*@see laya.ui.HScrollBar
*/
//class laya.ui.ScrollBar extends laya.ui.Component
var ScrollBar=(function(_super){
	function ScrollBar(skin){
		/**滚动衰减系数*/
		this.rollRatio=0.95;
		/**滚动变化时回调，回传value参数。*/
		this.changeHandler=null;
		/**是否缩放滑动条，默认值为true。 */
		this.scaleBar=true;
		/**一个布尔值，指定是否自动隐藏滚动条(无需滚动时)，默认值为false。*/
		this.autoHide=false;
		/**橡皮筋效果极限距离，0为没有橡皮筋效果。*/
		this.elasticDistance=0;
		/**橡皮筋回弹时间，单位为毫秒。*/
		this.elasticBackTime=500;
		/**上按钮 */
		this.upButton=null;
		/**下按钮 */
		this.downButton=null;
		/**滑条 */
		this.slider=null;
		/**@private */
		this._scrollSize=1;
		/**@private */
		this._skin=null;
		/**@private */
		this._thumbPercent=1;
		/**@private */
		this._target=null;
		/**@private */
		this._lastPoint=null;
		/**@private */
		this._lastOffset=0;
		/**@private */
		this._checkElastic=false;
		/**@private */
		this._isElastic=false;
		/**@private */
		this._value=NaN;
		/**@private */
		this._hide=false;
		/**@private */
		this._clickOnly=true;
		/**@private */
		this._offsets=null;
		ScrollBar.__super.call(this);
		this._showButtons=UIConfig.showButtons;
		this._touchScrollEnable=UIConfig.touchScrollEnable;
		this._mouseWheelEnable=UIConfig.mouseWheelEnable;
		this.skin=skin;
		this.max=1;
	}

	__class(ScrollBar,'laya.ui.ScrollBar',_super);
	var __proto=ScrollBar.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this.stopScroll();
		this.target=null;
		_super.prototype.destroy.call(this,destroyChild);
		this.upButton && this.upButton.destroy(destroyChild);
		this.downButton && this.downButton.destroy(destroyChild);
		this.slider && this.slider.destroy(destroyChild);
		this.upButton=this.downButton=null;
		this.slider=null;
		this.changeHandler=null;
		this._offsets=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this.slider=new Slider());
		this.addChild(this.upButton=new Button());
		this.addChild(this.downButton=new Button());
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		this.slider.showLabel=false;
		this.slider.on(/*laya.events.Event.CHANGE*/"change",this,this.onSliderChange);
		this.slider.setSlider(0,0,0);
		this.upButton.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onButtonMouseDown);
		this.downButton.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onButtonMouseDown);
	}

	/**
	*@private
	*滑块位置发生改变的处理函数。
	*/
	__proto.onSliderChange=function(){
		if(this._value !=this.slider.value)this.value=this.slider.value;
	}

	/**
	*@private
	*向上和向下按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onButtonMouseDown=function(e){
		var isUp=e.currentTarget===this.upButton;
		this.slide(isUp);
		Laya.timer.once(Styles.scrollBarDelayTime,this,this.startLoop,[isUp]);
		Laya.stage.once(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp);
	}

	/**@private */
	__proto.startLoop=function(isUp){
		Laya.timer.frameLoop(1,this,this.slide,[isUp]);
	}

	/**@private */
	__proto.slide=function(isUp){
		if (isUp)this.value-=this._scrollSize;
		else this.value+=this._scrollSize;
	}

	/**
	*@private
	*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onStageMouseUp=function(e){
		Laya.timer.clear(this,this.startLoop);
		Laya.timer.clear(this,this.slide);
	}

	/**
	*@private
	*更改对象的皮肤及位置。
	*/
	__proto.changeScrollBar=function(){
		this.upButton.visible=this._showButtons;
		this.downButton.visible=this._showButtons;
		if (this._showButtons){
			this.upButton.skin=this._skin.replace(".png","$up.png");
			this.downButton.skin=this._skin.replace(".png","$down.png");
		}
		if (this.slider.isVertical)this.slider.y=this._showButtons ? this.upButton.height :0;
		else this.slider.x=this._showButtons ? this.upButton.width :0;
		this.resetPositions();
		this.repaint();
	}

	/**@inheritDoc */
	__proto.changeSize=function(){
		_super.prototype.changeSize.call(this);
		this.repaint();
		this.resetPositions();
		this.event(/*laya.events.Event.CHANGE*/"change");
		this.changeHandler && this.changeHandler.runWith(this.value);
	}

	/**@private */
	__proto.resetPositions=function(){
		if (this.slider.isVertical)this.slider.height=this.height-(this._showButtons ? (this.upButton.height+this.downButton.height):0);
		else this.slider.width=this.width-(this._showButtons ? (this.upButton.width+this.downButton.width):0);
		this.resetButtonPosition();
	}

	/**@private */
	__proto.resetButtonPosition=function(){
		if (this.slider.isVertical)this.downButton.y=this.slider.y+this.slider.height;
		else this.downButton.x=this.slider.x+this.slider.width;
	}

	/**
	*设置滚动条信息。
	*@param min 滚动条最小位置值。
	*@param max 滚动条最大位置值。
	*@param value 滚动条当前位置值。
	*/
	__proto.setScroll=function(min,max,value){
		this.runCallLater(this.changeSize);
		this.slider.setSlider(min,max,value);
		this.slider.bar.visible=max > 0;
		if (!this._hide && this.autoHide)this.visible=false;
	}

	/**@private */
	__proto.onTargetMouseWheel=function(e){
		this.value-=e.delta *this._scrollSize;
		this.target=this._target;
	}

	/**@private */
	__proto.onTargetMouseDown=function(e){
		this._clickOnly=true;
		this._lastOffset=0;
		this._checkElastic=false;
		this._lastPoint || (this._lastPoint=new Point());
		this._lastPoint.setTo(Laya.stage.mouseX,Laya.stage.mouseY);
		Laya.timer.clear(this,this.tweenMove);
		Tween.clearTween(this);
		Laya.stage.once(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp2);
		Laya.stage.once(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onStageMouseUp2);
		Laya.timer.frameLoop(1,this,this.loop);
	}

	/**@private */
	__proto.loop=function(){
		var mouseY=Laya.stage.mouseY;
		var mouseX=Laya.stage.mouseX;
		this._lastOffset=this.isVertical ? (mouseY-this._lastPoint.y):(mouseX-this._lastPoint.x);
		if (this._clickOnly){
			if (Math.abs(this._lastOffset *(this.isVertical ? Laya.stage._canvasTransform.getScaleY():Laya.stage._canvasTransform.getScaleX()))> 1){
				this._clickOnly=false;
				this._offsets || (this._offsets=[]);
				this._offsets.length=0;
				this._target.mouseEnabled=false;
				if (!this.hide && this.autoHide){
					this.alpha=1;
					this.visible=true;
				}
				this.event(/*laya.events.Event.START*/"start");
			}else return;
		}
		this._offsets.push(this._lastOffset);
		this._lastPoint.x=mouseX;
		this._lastPoint.y=mouseY;
		if (this._lastOffset===0)return;
		if (!this._checkElastic){
			if (this.elasticDistance > 0){
				if (!this._checkElastic && this._lastOffset !=0){
					if ((this._lastOffset > 0 && this._value <=this.min)|| (this._lastOffset < 0 && this._value >=this.max)){
						this._isElastic=true;
						this._checkElastic=true;
						}else {
						this._isElastic=false;
					}
				}
				}else {
				this._checkElastic=true;
			}
		}
		if (this._isElastic){
			if (this._value <=this.min){
				this.value-=this._lastOffset *Math.max(0,(1-((this.min-this._value)/ this.elasticDistance)));
				}else if (this._value >=this.max){
				this.value-=this._lastOffset *Math.max(0,(1-((this._value-this.max)/ this.elasticDistance)));
			}
			}else {
			this.value-=this._lastOffset;
		}
	}

	/**@private */
	__proto.onStageMouseUp2=function(e){
		Laya.stage.off(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp2);
		Laya.stage.off(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onStageMouseUp2);
		Laya.timer.clear(this,this.loop);
		if (this._clickOnly){
			if(this._value>=this.min&&this._value<=this.max)
				return;
		}
		this._target.mouseEnabled=true;
		if (this._isElastic){
			if (this._value < this.min){
				Tween.to(this,{value:this.min},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
				}else if (this._value > this.max){
				Tween.to(this,{value:this.max},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
			}
			}else {
			if (!this._offsets)return;
			if (this._offsets.length < 1){
				this._offsets[0]=this.isVertical ? Laya.stage.mouseY-this._lastPoint.y :Laya.stage.mouseX-this._lastPoint.x;
			};
			var offset=0;
			var n=Math.min(this._offsets.length,3);
			for (var i=0;i < n;i++){
				offset+=this._offsets[this._offsets.length-1-i];
			}
			this._lastOffset=offset / n;
			offset=Math.abs(this._lastOffset);
			if (offset < 2){
				this.event(/*laya.events.Event.END*/"end");
				return;
			}
			if (offset > 60)this._lastOffset=this._lastOffset > 0 ? 60 :-60;
			var dis=Math.round(Math.abs(this.elasticDistance *(this._lastOffset / 240)));
			Laya.timer.frameLoop(1,this,this.tweenMove,[dis]);
		}
	}

	/**@private */
	__proto.elasticOver=function(){
		this._isElastic=false;
		if (!this.hide && this.autoHide){
			Tween.to(this,{alpha:0},500);
		}
		this.event(/*laya.events.Event.END*/"end");
	}

	/**@private */
	__proto.tweenMove=function(maxDistance){
		this._lastOffset *=this.rollRatio;
		var tarSpeed=NaN;
		if (maxDistance > 0){
			if (this._lastOffset > 0 && this.value <=this.min){
				this._isElastic=true;
				tarSpeed=-(this.min-maxDistance-this.value)*0.5;
				if (this._lastOffset > tarSpeed)this._lastOffset=tarSpeed;
				}else if (this._lastOffset < 0 && this.value >=this.max){
				this._isElastic=true;
				tarSpeed=-(this.max+maxDistance-this.value)*0.5;
				if (this._lastOffset < tarSpeed)this._lastOffset=tarSpeed;
			}
		}
		this.value-=this._lastOffset;
		if (Math.abs(this._lastOffset)< 1){
			Laya.timer.clear(this,this.tweenMove);
			if (this._isElastic){
				if (this._value < this.min){
					Tween.to(this,{value:this.min},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
					}else if (this._value > this.max){
					Tween.to(this,{value:this.max},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
					}else {
					this.elasticOver();
				}
				return;
			}
			this.event(/*laya.events.Event.END*/"end");
			if (!this.hide && this.autoHide){
				Tween.to(this,{alpha:0},500);
			}
		}
	}

	/**
	*停止滑动。
	*/
	__proto.stopScroll=function(){
		this.onStageMouseUp2(null);
		Laya.timer.clear(this,this.tweenMove);
		Tween.clearTween(this);
	}

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		if (this.slider.isVertical)return 100;
		return this.slider.height;
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this.slider.skin=this._skin;
			this.callLater(this.changeScrollBar);
		}
	});

	/**
	*获取或设置表示最高滚动位置的数字。
	*/
	__getset(0,__proto,'max',function(){
		return this.slider.max;
		},function(value){
		this.slider.max=value;
	});

	/**一个布尔值，指定是否显示向上、向下按钮，默认值为true。*/
	__getset(0,__proto,'showButtons',function(){
		return this._showButtons;
		},function(value){
		this._showButtons=value;
		this.callLater(this.changeScrollBar);
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		if (this.slider.isVertical)return this.slider.width;
		return 100;
	});

	/**
	*获取或设置表示最低滚动位置的数字。
	*/
	__getset(0,__proto,'min',function(){
		return this.slider.min;
		},function(value){
		this.slider.min=value;
	});

	/**
	*获取或设置表示当前滚动位置的数字。
	*/
	__getset(0,__proto,'value',function(){
		return this._value;
		},function(v){
		if (v!==this._value){
			this._value=v;
			if (!this._isElastic){
				if (this.slider._value !=v){
					this.slider._value=v;
					this.slider.changeValue();
				}
				this._value=this.slider._value;
			}
			this.event(/*laya.events.Event.CHANGE*/"change");
			this.changeHandler && this.changeHandler.runWith(this._value);
		}
	});

	/**
	*一个布尔值，指示滚动条是否为垂直滚动。如果值为true，则为垂直滚动，否则为水平滚动。
	*<p>默认值为：true。</p>
	*/
	__getset(0,__proto,'isVertical',function(){
		return this.slider.isVertical;
		},function(value){
		this.slider.isVertical=value;
	});

	/**
	*<p>当前实例的 <code>Slider</code> 实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this.slider.sizeGrid;
		},function(value){
		this.slider.sizeGrid=value;
	});

	/**获取或设置一个值，该值表示按下滚动条轨道时页面滚动的增量。 */
	__getset(0,__proto,'scrollSize',function(){
		return this._scrollSize;
		},function(value){
		this._scrollSize=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**获取或设置一个值，该值表示滑条长度比例，值为：（0-1）。 */
	__getset(0,__proto,'thumbPercent',function(){
		return this._thumbPercent;
		},function(value){
		this.runCallLater(this.changeScrollBar);
		this.runCallLater(this.changeSize);
		value=value >=1 ? 0.99 :value;
		this._thumbPercent=value;
		if (this.scaleBar){
			if (this.slider.isVertical)this.slider.bar.height=Math.max(this.slider.height *value,Styles.scrollBarMinNum);
			else this.slider.bar.width=Math.max(this.slider.width *value,Styles.scrollBarMinNum);
		}
	});

	/**
	*设置滚动对象。
	*@see laya.ui.TouchScroll#target
	*/
	__getset(0,__proto,'target',function(){
		return this._target;
		},function(value){
		if (this._target){
			this._target.off(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel",this,this.onTargetMouseWheel);
			this._target.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onTargetMouseDown);
		}
		this._target=value;
		if (value){
			this._mouseWheelEnable && this._target.on(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel",this,this.onTargetMouseWheel);
			this._touchScrollEnable && this._target.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onTargetMouseDown);
		}
	});

	/**是否隐藏滚动条，不显示滚动条，但是可以正常滚动，默认为false。*/
	__getset(0,__proto,'hide',function(){
		return this._hide;
		},function(value){
		this._hide=value;
		this.visible=!value;
	});

	/**一个布尔值，指定是否开启触摸，默认值为true。*/
	__getset(0,__proto,'touchScrollEnable',function(){
		return this._touchScrollEnable;
		},function(value){
		this._touchScrollEnable=value;
		this.target=this._target;
	});

	/**一个布尔值，指定是否滑轮滚动，默认值为true。*/
	__getset(0,__proto,'mouseWheelEnable',function(){
		return this._mouseWheelEnable;
		},function(value){
		this._mouseWheelEnable=value;
		this.target=this._target;
	});

	/**
	*滚动的刻度值，滑动数值为tick的整数倍。默认值为1。
	*/
	__getset(0,__proto,'tick',function(){
		return this.slider.tick;
		},function(value){
		this.slider.tick=value;
	});

	return ScrollBar;
})(Component)


/**
*使用 <code>Slider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
*<p>滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。</p>
*<p>滑块允许最小值和最大值之间特定间隔内的值。滑块还可以使用数据提示显示其当前值。</p>
*
*@see laya.ui.HSlider
*@see laya.ui.VSlider
*/
//class laya.ui.Slider extends laya.ui.Component
var Slider=(function(_super){
	function Slider(skin){
		/**
		*数据变化处理器。
		*<p>默认回调参数为滑块位置属性 <code>value</code>属性值：Number 。</p>
		*/
		this.changeHandler=null;
		/**
		*一个布尔值，指示是否为垂直滚动。如果值为true，则为垂直方向，否则为水平方向。
		*<p>默认值为：true。</p>
		*@default true
		*/
		this.isVertical=true;
		/**
		*一个布尔值，指示是否显示标签。
		*@default true
		*/
		this.showLabel=true;
		/**@private */
		this._allowClickBack=false;
		/**@private */
		this._max=100;
		/**@private */
		this._min=0;
		/**@private */
		this._tick=1;
		/**@private */
		this._value=0;
		/**@private */
		this._skin=null;
		/**@private */
		this._bg=null;
		/**@private */
		this._progress=null;
		/**@private */
		this._bar=null;
		/**@private */
		this._tx=NaN;
		/**@private */
		this._ty=NaN;
		/**@private */
		this._maxMove=NaN;
		/**@private */
		this._globalSacle=null;
		Slider.__super.call(this);
		this.skin=skin;
	}

	__class(Slider,'laya.ui.Slider',_super);
	var __proto=Slider.prototype;
	/**
	*@inheritDoc
	*/
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._bg && this._bg.destroy(destroyChild);
		this._bar && this._bar.destroy(destroyChild);
		this._progress && this._progress.destroy(destroyChild);
		this._bg=null;
		this._bar=null;
		this._progress=null;
		this.changeHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._bg=new Image());
		this.addChild(this._bar=new Button());
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		this._bar.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onBarMouseDown);
		this._bg.sizeGrid=this._bar.sizeGrid="4,4,4,4,0";
		if (this._progress)this._progress.sizeGrid=this._bar.sizeGrid;
		this.allowClickBack=true;
	}

	/**
	*@private
	*滑块的的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onBarMouseDown=function(e){
		this._globalSacle || (this._globalSacle=new Point());
		this._globalSacle.setTo(this.globalScaleX || 0.01,this.globalScaleY || 0.01);
		this._maxMove=this.isVertical ? (this.height-this._bar.height):(this.width-this._bar.width);
		this._tx=Laya.stage.mouseX;
		this._ty=Laya.stage.mouseY;
		Laya.stage.on(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this.mouseMove);
		Laya.stage.once(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.mouseUp);
		Laya.stage.once(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.mouseUp);
		this.showValueText();
	}

	/**
	*@private
	*显示标签。
	*/
	__proto.showValueText=function(){
		if (this.showLabel){
			var label=laya.ui.Slider.label;
			this.addChild(label);
			label.textField.changeText(this._value+"");
			if (this.isVertical){
				label.x=this._bar.x+20;
				label.y=(this._bar.height-label.height)*0.5+this._bar.y;
				}else {
				label.y=this._bar.y-20;
				label.x=(this._bar.width-label.width)*0.5+this._bar.x;
			}
		}
	}

	/**
	*@private
	*隐藏标签。
	*/
	__proto.hideValueText=function(){
		laya.ui.Slider.label && laya.ui.Slider.label.removeSelf();
	}

	/**
	*@private
	*/
	__proto.mouseUp=function(e){
		Laya.stage.off(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this.mouseMove);
		Laya.stage.off(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.mouseUp);
		Laya.stage.off(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.mouseUp);
		this.sendChangeEvent(/*laya.events.Event.CHANGED*/"changed");
		this.hideValueText();
	}

	/**
	*@private
	*/
	__proto.mouseMove=function(e){
		var oldValue=this._value;
		if (this.isVertical){
			this._bar.y+=(Laya.stage.mouseY-this._ty)/ this._globalSacle.y;
			if (this._bar.y > this._maxMove)this._bar.y=this._maxMove;
			else if (this._bar.y < 0)this._bar.y=0;
			this._value=this._bar.y / this._maxMove *(this._max-this._min)+this._min;
			if(this._progress)this._progress.height=this._bar.y+0.5*this._bar.height;
			}else {
			this._bar.x+=(Laya.stage.mouseX-this._tx)/ this._globalSacle.x;
			if (this._bar.x > this._maxMove)this._bar.x=this._maxMove;
			else if (this._bar.x < 0)this._bar.x=0;
			this._value=this._bar.x / this._maxMove *(this._max-this._min)+this._min;
			if(this._progress)this._progress.width=this._bar.x+0.5*this._bar.width;
		}
		this._tx=Laya.stage.mouseX;
		this._ty=Laya.stage.mouseY;
		var pow=Math.pow(10,(this._tick+"").length-1);
		this._value=Math.round(Math.round(this._value / this._tick)*this._tick *pow)/ pow;
		if (this._value !=oldValue){
			this.sendChangeEvent();
		}
		this.showValueText();
	}

	/**
	*@private
	*/
	__proto.sendChangeEvent=function(type){
		(type===void 0)&& (type=/*laya.events.Event.CHANGE*/"change");
		this.event(type);
		this.changeHandler && this.changeHandler.runWith(this._value);
	}

	/**
	*@private
	*设置滑块的位置信息。
	*/
	__proto.setBarPoint=function(){
		if (this.isVertical)this._bar.x=Math.round((this._bg.width-this._bar.width)*0.5);
		else this._bar.y=Math.round((this._bg.height-this._bar.height)*0.5);
	}

	/**@inheritDoc */
	__proto.changeSize=function(){
		_super.prototype.changeSize.call(this);
		if (this.isVertical)this._bg.height=this.height;
		else this._bg.width=this.width;
		this.setBarPoint();
		this.changeValue();
	}

	/**
	*设置滑动条的信息。
	*@param min 滑块的最小值。
	*@param max 滑块的最小值。
	*@param value 滑块的当前值。
	*/
	__proto.setSlider=function(min,max,value){
		this._value=-1;
		this._min=min;
		this._max=max > min ? max :min;
		this.value=value < min ? min :value > max ? max :value;
	}

	/**
	*@private
	*改变滑块的位置值。
	*/
	__proto.changeValue=function(){
		var pow=Math.pow(10,(this._tick+"").length-1);
		this._value=Math.round(Math.round(this._value / this._tick)*this._tick *pow)/ pow;
		this._value=this._value > this._max ? this._max :this._value < this._min ? this._min :this._value;
		var num=this._max-this._min;
		if (num===0)num=1;
		if (this.isVertical){
			this._bar.y=(this._value-this._min)/ num *(this.height-this._bar.height);
			if(this._progress)this._progress.height=this._bar.y+0.5*this._bar.height;
		}
		else{
			this._bar.x=(this._value-this._min)/ num *(this.width-this._bar.width);
			if(this._progress)this._progress.width=this._bar.x+0.5*this._bar.width;
		}
	}

	/**
	*@private
	*滑动条的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onBgMouseDown=function(e){
		var point=this._bg.getMousePoint();
		if (this.isVertical)this.value=point.y / (this.height-this._bar.height)*(this._max-this._min)+this._min;
		else this.value=point.x / (this.width-this._bar.width)*(this._max-this._min)+this._min;
	}

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		return Math.max(this._bg.height,this._bar.height);
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this._bg.skin=this._skin;
			this._bar.skin=this._skin.replace(".png","$bar.png");
			var progressSkin=this._skin.replace(".png","$progress.png");
			if (Loader.getRes(progressSkin)){
				if (!this._progress){
					this.addChild(this._progress=new Image());
					this._progress.sizeGrid=this._bar.sizeGrid;
					this.setChildIndex(this._progress,1);
				}
				this._progress.skin=progressSkin;
			}
			this.setBarPoint();
			this.callLater(this.changeValue);
		}
	});

	/**
	*一个布尔值，指定是否允许通过点击滑动条改变 <code>Slider</code> 的 <code>value</code> 属性值。
	*/
	__getset(0,__proto,'allowClickBack',function(){
		return this._allowClickBack;
		},function(value){
		if (this._allowClickBack !=value){
			this._allowClickBack=value;
			if (value)this._bg.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onBgMouseDown);
			else this._bg.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onBgMouseDown);
		}
	});

	/**
	*获取或设置表示最高位置的数字。 默认值为100。
	*/
	__getset(0,__proto,'max',function(){
		return this._max;
		},function(value){
		if (this._max !=value){
			this._max=value;
			this.callLater(this.changeValue);
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		return Math.max(this._bg.width,this._bar.width);
	});

	/**
	*滑动的刻度值，滑动数值为tick的整数倍。默认值为1。
	*/
	__getset(0,__proto,'tick',function(){
		return this._tick;
		},function(value){
		if (this._tick !=value){
			this._tick=value;
			this.callLater(this.changeValue);
		}
	});

	/**
	*<p>当前实例的背景图（ <code>Image</code> ）和滑块按钮（ <code>Button</code> ）实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this._bg.sizeGrid;
		},function(value){
		this._bg.sizeGrid=value;
		this._bar.sizeGrid=value;
		if (this._progress)this._progress.sizeGrid=this._bar.sizeGrid;
	});

	/**
	*获取或设置表示最低位置的数字。 默认值为0。
	*/
	__getset(0,__proto,'min',function(){
		return this._min;
		},function(value){
		if (this._min !=value){
			this._min=value;
			this.callLater(this.changeValue);
		}
	});

	/**
	*获取或设置表示当前滑块位置的数字。
	*/
	__getset(0,__proto,'value',function(){
		return this._value;
		},function(num){
		if (this._value !=num){
			var oldValue=this._value;
			this._value=num;
			this.changeValue();
			if (this._value !=oldValue){
				this.sendChangeEvent();
			}
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**
	*表示滑块按钮的引用。
	*/
	__getset(0,__proto,'bar',function(){
		return this._bar;
	});

	__static(Slider,
	['label',function(){return this.label=new Label();}
	]);
	return Slider;
})(Component)


/**
*<code>Image</code> 类是用于表示位图图像或绘制图形的显示对象。
*Image和Clip组件是唯一支持异步加载的两个组件，比如img.skin="abc/xxx.png"，其他UI组件均不支持异步加载。
*
*@example <caption>以下示例代码，创建了一个新的 <code>Image</code> 实例，设置了它的皮肤、位置信息，并添加到舞台上。</caption>
*package
*{
	*import laya.ui.Image;
	*public class Image_Example
	*{
		*public function Image_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*var bg:Image=new Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
			*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
			*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
			*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
			*bg.width=150;//设置 bg 对象的宽度。
			*bg.height=250;//设置 bg 对象的高度。
			*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
			*var image:Image=new Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
			*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
			*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
			*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*onInit();
*function onInit(){
	*var bg=new laya.ui.Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
	*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
	*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
	*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
	*bg.width=150;//设置 bg 对象的宽度。
	*bg.height=250;//设置 bg 对象的高度。
	*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
	*var image=new laya.ui.Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
	*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
	*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
	*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
	*}
*@example
*class Image_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*var bg:laya.ui.Image=new laya.ui.Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
		*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
		*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
		*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
		*bg.width=150;//设置 bg 对象的宽度。
		*bg.height=250;//设置 bg 对象的高度。
		*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
		*var image:laya.ui.Image=new laya.ui.Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
		*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
		*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
		*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
		*}
	*}
*@see laya.ui.AutoBitmap
*/
//class laya.ui.Image extends laya.ui.Component
var Image=(function(_super){
	function Image(skin){
		/**@private */
		this._bitmap=null;
		/**@private */
		this._skin=null;
		/**@private */
		this._group=null;
		Image.__super.call(this);
		this.skin=skin;
	}

	__class(Image,'laya.ui.Image',_super);
	var __proto=Image.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,true);
		this._bitmap && this._bitmap.destroy();
		this._bitmap=null;
	}

	/**
	*销毁对象并释放加载的皮肤资源。
	*/
	__proto.dispose=function(){
		this.destroy(true);
		Laya.loader.clearRes(this._skin);
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.graphics=this._bitmap=new AutoBitmap();
		this._bitmap.autoCacheCmd=false;
	}

	/**
	*@private
	*设置皮肤资源。
	*/
	__proto.setSource=function(url,img){
		if (url===this._skin && img){
			this.source=img
			this.onCompResize();
		}
	}

	/**
	*@copy laya.ui.AutoBitmap#source
	*/
	__getset(0,__proto,'source',function(){
		return this._bitmap.source;
		},function(value){
		if (!this._bitmap)return;
		this._bitmap.source=value;
		this.event(/*laya.events.Event.LOADED*/"loaded");
		this.repaint();
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='string'))this.skin=value;
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		return this._bitmap.height;
	});

	/**
	*<p>对象的皮肤地址，以字符串表示。</p>
	*<p>如果资源未加载，则先加载资源，加载完成后应用于此对象。</p>
	*<b>注意：</b>资源加载完成后，会自动缓存至资源库中。
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			if (value){
				var source=Loader.getRes(value);
				if (source){
					this.source=source;
					this.onCompResize();
				}else Laya.loader.load(this._skin,Handler.create(this,this.setSource,[this._skin]),null,/*laya.net.Loader.IMAGE*/"image",1,true,this._group);
				}else {
				this.source=null;
			}
		}
	});

	/**
	*资源分组。
	*/
	__getset(0,__proto,'group',function(){
		return this._group;
		},function(value){
		if (value && this._skin)Loader.setGroup(this._skin,value);
		this._group=value;
	});

	/**
	*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"。</li></ul></p>
	*@see laya.ui.AutoBitmap#sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
		return null;
		},function(value){
		this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		return this._bitmap.width;
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Component,this,'width',value);
		this._bitmap.width=value==0 ? 0.0000001 :value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Component,this,'height',value);
		this._bitmap.height=value==0 ? 0.0000001 :value;
	});

	return Image;
})(Component)


/**
*<p> <code>Label</code> 类用于创建显示对象以显示文本。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>Label</code> 实例。</caption>
*package
*{
	*import laya.ui.Label;
	*public class Label_Example
	*{
		*public function Label_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*var label:Label=new Label();//创建一个 Label 类的实例对象 label 。
			*label.font="Arial";//设置 label 的字体。
			*label.bold=true;//设置 label 显示为粗体。
			*label.leading=4;//设置 label 的行间距。
			*label.wordWrap=true;//设置 label 自动换行。
			*label.padding="10,10,10,10";//设置 label 的边距。
			*label.color="#ff00ff";//设置 label 的颜色。
			*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
			*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
			*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
			*label.width=300;//设置 label 的宽度。
			*label.height=200;//设置 label 的高度。
			*Laya.stage.addChild(label);//将 label 添加到显示列表。
			*var passwordLabel:Label=new Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
			*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
			*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
			*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
			*passwordLabel.width=300;//设置 passwordLabel 的宽度。
			*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
			*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
			*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
			*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*onInit();
*function onInit(){
	*var label=new laya.ui.Label();//创建一个 Label 类的实例对象 label 。
	*label.font="Arial";//设置 label 的字体。
	*label.bold=true;//设置 label 显示为粗体。
	*label.leading=4;//设置 label 的行间距。
	*label.wordWrap=true;//设置 label 自动换行。
	*label.padding="10,10,10,10";//设置 label 的边距。
	*label.color="#ff00ff";//设置 label 的颜色。
	*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
	*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
	*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
	*label.width=300;//设置 label 的宽度。
	*label.height=200;//设置 label 的高度。
	*Laya.stage.addChild(label);//将 label 添加到显示列表。
	*var passwordLabel=new laya.ui.Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
	*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
	*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
	*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
	*passwordLabel.width=300;//设置 passwordLabel 的宽度。
	*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
	*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
	*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
	*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
	*}
*@example
*import Label=laya.ui.Label;
*class Label_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*var label:Label=new Label();//创建一个 Label 类的实例对象 label 。
		*label.font="Arial";//设置 label 的字体。
		*label.bold=true;//设置 label 显示为粗体。
		*label.leading=4;//设置 label 的行间距。
		*label.wordWrap=true;//设置 label 自动换行。
		*label.padding="10,10,10,10";//设置 label 的边距。
		*label.color="#ff00ff";//设置 label 的颜色。
		*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
		*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
		*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
		*label.width=300;//设置 label 的宽度。
		*label.height=200;//设置 label 的高度。
		*Laya.stage.addChild(label);//将 label 添加到显示列表。
		*var passwordLabel:Label=new Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
		*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
		*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
		*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
		*passwordLabel.width=300;//设置 passwordLabel 的宽度。
		*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
		*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
		*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
		*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
		*}
	*}
*@see laya.display.Text
*/
//class laya.ui.Label extends laya.ui.Component
var Label=(function(_super){
	function Label(text){
		/**
		*@private
		*文本 <code>Text</code> 实例。
		*/
		this._tf=null;
		Label.__super.call(this);
		(text===void 0)&& (text="");
		Font.defaultColor=Styles.labelColor;
		this.text=text;
	}

	__class(Label,'laya.ui.Label',_super);
	var __proto=Label.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._tf=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._tf=new Text());
	}

	/**@copy laya.display.Text#changeText()
	**/
	__proto.changeText=function(text){
		this._tf.changeText(text);
	}

	/**
	*<p>边距信息</p>
	*<p>"上边距，右边距，下边距 , 左边距（边距以像素为单位）"</p>
	*@see laya.display.Text.padding
	*/
	__getset(0,__proto,'padding',function(){
		return this._tf.padding.join(",");
		},function(value){
		this._tf.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
	});

	/**
	*@copy laya.display.Text#bold
	*/
	__getset(0,__proto,'bold',function(){
		return this._tf.bold;
		},function(value){
		this._tf.bold=value;
	});

	/**
	*@copy laya.display.Text#align
	*/
	__getset(0,__proto,'align',function(){
		return this._tf.align;
		},function(value){
		this._tf.align=value;
	});

	/**
	*当前文本内容字符串。
	*@see laya.display.Text.text
	*/
	__getset(0,__proto,'text',function(){
		return this._tf.text;
		},function(value){
		if (this._tf.text !=value){
			if(value)
				value=UIUtils.adptString(value+"");
			this._tf.text=value;
			this.event(/*laya.events.Event.CHANGE*/"change");
			if (!this._width || !this._height)this.onCompResize();
		}
	});

	/**
	*@copy laya.display.Text#italic
	*/
	__getset(0,__proto,'italic',function(){
		return this._tf.italic;
		},function(value){
		this._tf.italic=value;
	});

	/**
	*@copy laya.display.Text#wordWrap
	*/
	/**
	*@copy laya.display.Text#wordWrap
	*/
	__getset(0,__proto,'wordWrap',function(){
		return this._tf.wordWrap;
		},function(value){
		this._tf.wordWrap=value;
	});

	/**
	*@copy laya.display.Text#font
	*/
	__getset(0,__proto,'font',function(){
		return this._tf.font;
		},function(value){
		this._tf.font=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='number')|| (typeof value=='string'))this.text=value+"";
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**
	*@copy laya.display.Text#color
	*/
	__getset(0,__proto,'color',function(){
		return this._tf.color;
		},function(value){
		this._tf.color=value;
	});

	/**
	*@copy laya.display.Text#valign
	*/
	__getset(0,__proto,'valign',function(){
		return this._tf.valign;
		},function(value){
		this._tf.valign=value;
	});

	/**
	*@copy laya.display.Text#leading
	*/
	__getset(0,__proto,'leading',function(){
		return this._tf.leading;
		},function(value){
		this._tf.leading=value;
	});

	/**
	*@copy laya.display.Text#fontSize
	*/
	__getset(0,__proto,'fontSize',function(){
		return this._tf.fontSize;
		},function(value){
		this._tf.fontSize=value;
	});

	/**
	*@copy laya.display.Text#bgColor
	*/
	__getset(0,__proto,'bgColor',function(){
		return this._tf.bgColor
		},function(value){
		this._tf.bgColor=value;
	});

	/**
	*@copy laya.display.Text#borderColor
	*/
	__getset(0,__proto,'borderColor',function(){
		return this._tf.borderColor
		},function(value){
		this._tf.borderColor=value;
	});

	/**
	*@copy laya.display.Text#stroke
	*/
	__getset(0,__proto,'stroke',function(){
		return this._tf.stroke;
		},function(value){
		this._tf.stroke=value;
	});

	/**
	*@copy laya.display.Text#strokeColor
	*/
	__getset(0,__proto,'strokeColor',function(){
		return this._tf.strokeColor;
		},function(value){
		this._tf.strokeColor=value;
	});

	/**
	*文本控件实体 <code>Text</code> 实例。
	*/
	__getset(0,__proto,'textField',function(){
		return this._tf;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'measureWidth',function(){
		return this._tf.width;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'measureHeight',function(){
		return this._tf.height;
	});

	/**
	*@inheritDoc
	*/
	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'width',function(){
		if (this._width || this._tf.text)return Laya.superGet(Component,this,'width');
		return 0;
		},function(value){
		Laya.superSet(Component,this,'width',value);
		this._tf.width=value;
	});

	/**
	*@inheritDoc
	*/
	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'height',function(){
		if (this._height || this._tf.text)return Laya.superGet(Component,this,'height');
		return 0;
		},function(value){
		Laya.superSet(Component,this,'height',value);
		this._tf.height=value;
	});

	/**
	*@copy laya.display.Text#overflow
	*/
	/**
	*@copy laya.display.Text#overflow
	*/
	__getset(0,__proto,'overflow',function(){
		return this._tf.overflow;
		},function(value){
		this._tf.overflow=value;
	});

	/**
	*@copy laya.display.Text#underline
	*/
	/**
	*@copy laya.display.Text#underline
	*/
	__getset(0,__proto,'underline',function(){
		return this._tf.underline;
		},function(value){
		this._tf.underline=value;
	});

	/**
	*@copy laya.display.Text#underlineColor
	*/
	/**
	*@copy laya.display.Text#underlineColor
	*/
	__getset(0,__proto,'underlineColor',function(){
		return this._tf.underlineColor;
		},function(value){
		this._tf.underlineColor=value;
	});

	return Label;
})(Component)


/**
*<code>ProgressBar</code> 组件显示内容的加载进度。
*@example <caption>以下示例代码，创建了一个新的 <code>ProgressBar</code> 实例，设置了它的皮肤、位置、宽高、网格等信息，并添加到舞台上。</caption>
*package
*{
	*import laya.ui.ProgressBar;
	*import laya.utils.Handler;
	*public class ProgressBar_Example
	*{
		*private var progressBar:ProgressBar;
		*public function ProgressBar_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/progress.png","resource/ui/progress$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*progressBar=new ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
			*progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
			*progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
			*progressBar.value=0.3;//设置 progressBar 的进度值。
			*progressBar.width=200;//设置 progressBar 的宽度。
			*progressBar.height=50;//设置 progressBar 的高度。
			*progressBar.sizeGrid="5,10,5,10";//设置 progressBar 的网格信息。
			*progressBar.changeHandler=new Handler(this,onChange);//设置 progressBar 的value值改变时执行的处理器。
			*Laya.stage.addChild(progressBar);//将 progressBar 添加到显示列表。
			*Laya.timer.once(3000,this,changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
			*}
		*private function changeValue():void
		*{
			*trace("改变进度条的进度值。");
			*progressBar.value=0.6;
			*}
		*private function onChange(value:Number):void
		*{
			*trace("进度发生改变： value=" ,value);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var res=["resource/ui/progress.png","resource/ui/progress$bar.png"];
*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete()
*{
	*progressBar=new laya.ui.ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
	*progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
	*progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
	*progressBar.value=0.3;//设置 progressBar 的进度值。
	*progressBar.width=200;//设置 progressBar 的宽度。
	*progressBar.height=50;//设置 progressBar 的高度。
	*progressBar.sizeGrid="10,5,10,5";//设置 progressBar 的网格信息。
	*progressBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 progressBar 的value值改变时执行的处理器。
	*Laya.stage.addChild(progressBar);//将 progressBar 添加到显示列表。
	*Laya.timer.once(3000,this,changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
	*}
*function changeValue()
*{
	*console.log("改变进度条的进度值。");
	*progressBar.value=0.6;
	*}
*function onChange(value)
*{
	*console.log("进度发生改变： value=" ,value);
	*}
*@example
*import ProgressBar=laya.ui.ProgressBar;
*import Handler=laya.utils.Handler;
*class ProgressBar_Example {
	*private progressBar:ProgressBar;
	*public ProgressBar_Example(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/progress.png","resource/ui/progress$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*this.progressBar=new ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
		*this.progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
		*this.progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
		*this.progressBar.value=0.3;//设置 progressBar 的进度值。
		*this.progressBar.width=200;//设置 progressBar 的宽度。
		*this.progressBar.height=50;//设置 progressBar 的高度。
		*this.progressBar.sizeGrid="5,10,5,10";//设置 progressBar 的网格信息。
		*this.progressBar.changeHandler=new Handler(this,this.onChange);//设置 progressBar 的value值改变时执行的处理器。
		*Laya.stage.addChild(this.progressBar);//将 progressBar 添加到显示列表。
		*Laya.timer.once(3000,this,this.changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
		*}
	*private changeValue():void {
		*console.log("改变进度条的进度值。");
		*this.progressBar.value=0.6;
		*}
	*private onChange(value:number):void {
		*console.log("进度发生改变： value=",value);
		*}
	*}
*/
//class laya.ui.ProgressBar extends laya.ui.Component
var ProgressBar=(function(_super){
	function ProgressBar(skin){
		/**
		*当 <code>ProgressBar</code> 实例的 <code>value</code> 属性发生变化时的函数处理器。
		*<p>默认返回参数<code>value</code> 属性（进度值）。</p>
		*/
		this.changeHandler=null;
		/**@private */
		this._bg=null;
		/**@private */
		this._bar=null;
		/**@private */
		this._skin=null;
		/**@private */
		this._value=0.5;
		ProgressBar.__super.call(this);
		this.skin=skin;
	}

	__class(ProgressBar,'laya.ui.ProgressBar',_super);
	var __proto=ProgressBar.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._bg && this._bg.destroy(destroyChild);
		this._bar && this._bar.destroy(destroyChild);
		this._bg=this._bar=null;
		this.changeHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._bg=new Image());
		this.addChild(this._bar=new Image());
		this._bar._bitmap.autoCacheCmd=false;
	}

	/**
	*@private
	*更改进度值的显示。
	*/
	__proto.changeValue=function(){
		if (this.sizeGrid){
			var grid=this.sizeGrid.split(",");
			var left=Number(grid[3]);
			var right=Number(grid[1]);
			var max=this.width-left-right;
			var sw=max *this._value;
			this._bar.width=left+right+sw;
			this._bar.visible=this._bar.width > left+right;
			}else {
			this._bar.width=this.width *this._value;
		}
	}

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		return this._bg.height;
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this._bg.skin=this._skin;
			this._bar.skin=this._skin.replace(".png","$bar.png");
			this.callLater(this.changeValue);
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		return this._bg.width;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Component,this,'height',value);
		this._bg.height=this._height;
		this._bar.height=this._height;
	});

	/**
	*获取进度条对象。
	*/
	__getset(0,__proto,'bar',function(){
		return this._bar;
	});

	/**
	*当前的进度量。
	*<p><b>取值：</b>介于0和1之间。</p>
	*/
	__getset(0,__proto,'value',function(){
		return this._value;
		},function(num){
		if (this._value !=num){
			num=num > 1 ? 1 :num < 0 ? 0 :num;
			this._value=num;
			this.callLater(this.changeValue);
			this.event(/*laya.events.Event.CHANGE*/"change");
			this.changeHandler && this.changeHandler.runWith(num);
		}
	});

	/**
	*获取背景条对象。
	*/
	__getset(0,__proto,'bg',function(){
		return this._bg;
	});

	/**
	*<p>当前 <code>ProgressBar</code> 实例的进度条背景位图（ <code>Image</code> 实例）的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this._bg.sizeGrid;
		},function(value){
		this._bg.sizeGrid=this._bar.sizeGrid=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Component,this,'width',value);
		this._bg.width=this._width;
		this.callLater(this.changeValue);
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
		else Laya.superSet(Component,this,'dataSource',value);
	});

	return ProgressBar;
})(Component)


/**鼠标提示管理类*/
//class laya.ui.TipManager extends laya.ui.Component
var TipManager=(function(_super){
	function TipManager(){
		this._tipBox=null;
		this._tipText=null;
		this._defaultTipHandler=null;
		TipManager.__super.call(this);
		this._tipBox=new Component();
		this._tipBox.addChild(this._tipText=new Text());
		this._tipText.x=this._tipText.y=5;
		this._tipText.color=TipManager.tipTextColor;
		this._defaultTipHandler=this._showDefaultTip;
		Laya.stage.on(/*laya.ui.UIEvent.SHOW_TIP*/"showtip",this,this._onStageShowTip);
		Laya.stage.on(/*laya.ui.UIEvent.HIDE_TIP*/"hidetip",this,this._onStageHideTip);
		this.zOrder=1100
	}

	__class(TipManager,'laya.ui.TipManager',_super);
	var __proto=TipManager.prototype;
	/**
	*@private
	*/
	__proto._onStageHideTip=function(e){
		Laya.timer.clear(this,this._showTip);
		this.closeAll();
		this.removeSelf();
	}

	/**
	*@private
	*/
	__proto._onStageShowTip=function(data){
		Laya.timer.once(TipManager.tipDelay,this,this._showTip,[data],true);
	}

	/**
	*@private
	*/
	__proto._showTip=function(tip){
		if ((typeof tip=='string')){
			var text=String(tip);
			if (Boolean(text)){
				this._defaultTipHandler(text);
			}
			}else if ((tip instanceof laya.utils.Handler )){
			(tip).run();
			}else if ((typeof tip=='function')){
			(tip).apply();
		}
		if (true){
			Laya.stage.on(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this._onStageMouseMove);
			Laya.stage.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onStageMouseDown);
		}
		this._onStageMouseMove(null);
	}

	/**
	*@private
	*/
	__proto._onStageMouseDown=function(e){
		this.closeAll();
	}

	/**
	*@private
	*/
	__proto._onStageMouseMove=function(e){
		this._showToStage(this,TipManager.offsetX,TipManager.offsetY);
	}

	/**
	*@private
	*/
	__proto._showToStage=function(dis,offX,offY){
		(offX===void 0)&& (offX=0);
		(offY===void 0)&& (offY=0);
		var rec=dis.getBounds();
		dis.x=Laya.stage.mouseX+offX;
		dis.y=Laya.stage.mouseY+offY;
		if (dis.x+rec.width > Laya.stage.width){
			dis.x-=rec.width+offX;
		}
		if (dis.y+rec.height > Laya.stage.height){
			dis.y-=rec.height+offY;
		}
	}

	/**关闭所有鼠标提示*/
	__proto.closeAll=function(){
		Laya.timer.clear(this,this._showTip);
		Laya.stage.off(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this._onStageMouseMove);
		Laya.stage.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onStageMouseDown);
		this.removeChildren();
	}

	/**
	*显示显示对象类型的tip
	*/
	__proto.showDislayTip=function(tip){
		this.addChild(tip);
		this._showToStage(this);
		Laya._currentStage.addChild(this);
	}

	/**
	*@private
	*/
	__proto._showDefaultTip=function(text){
		this._tipText.text=text;
		var g=this._tipBox.graphics;
		g.clear();
		g.drawRect(0,0,this._tipText.width+10,this._tipText.height+10,TipManager.tipBackColor);
		this.addChild(this._tipBox);
		this._showToStage(this);
		Laya._currentStage.addChild(this);
	}

	/**默认鼠标提示函数*/
	__getset(0,__proto,'defaultTipHandler',function(){
		return this._defaultTipHandler;
		},function(value){
		this._defaultTipHandler=value;
	});

	TipManager.offsetX=10;
	TipManager.offsetY=15;
	TipManager.tipTextColor="#ffffff";
	TipManager.tipBackColor="#111111";
	TipManager.tipDelay=200;
	return TipManager;
})(Component)


/**
*<code>View</code> 是一个视图类。
*@internal <p><code>View</code></p>
*/
//class laya.ui.View extends laya.ui.Box
var View=(function(_super){
	var DataWatcher;
	function View(){
		/**@private */
		this._idMap=null;
		/**@private */
		this._aniList=null;
		/**@private */
		this._watchMap={};
		View.__super.call(this);
	}

	__class(View,'laya.ui.View',_super);
	var __proto=View.prototype;
	/**
	*@private
	*通过视图数据创建视图。
	*@param uiView 视图数据信息。
	*/
	__proto.createView=function(uiView){
		if (uiView.animations && !this._idMap)this._idMap={};
		View.createComp(uiView,this,this);
		if (uiView.animations){
			var anilist=[];
			var animations=uiView.animations;
			var i=0,len=animations.length;
			var tAni;
			var tAniO;
			for (i=0;i < len;i++){
				tAni=new FrameAnimation();
				tAniO=animations[i];
				tAni._setUp(this._idMap,tAniO);
				this[tAniO.name]=tAni;
				tAni._setControlNode(this);
				switch (tAniO.action){
					case 1:
						tAni.play(0,false);
						break ;
					case 2:
						tAni.play(0,true);
						break ;
					}
				anilist.push(tAni);
			}
			this._aniList=anilist;
		}
		if (this._width > 0 && uiView.props.hitTestPrior==null && !this.mouseThrough)this.hitTestPrior=true;
	}

	__proto.onEvent=function(type,event){}
	/**
	*@private
	*装载UI视图。用于加载模式。
	*@param path UI资源地址。
	*/
	__proto.loadUI=function(path){
		var uiView=View.uiMap[path];
		uiView && this.createView(uiView);
	}

	/**
	*<p>销毁此对象。</p>
	*@param destroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
	*/
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		if (this._aniList)this._aniList.length=0;
		this._idMap=null;
		this._aniList=null;
		this._watchMap=null;
		laya.ui.Component.prototype.destroy.call(this,destroyChild);
	}

	/**@private */
	__proto.changeData=function(key){
		var arr=this._watchMap[key];
		if (!arr)return;
		console.log("change",key);
		for (var i=0,n=arr.length;i < n;i++){
			var watcher=arr[i];
			watcher.exe(this);
		}
	}

	View._regs=function(){
		for (var key in View.uiClassMap){
			ClassUtils.regClass(key,View.uiClassMap[key]);
		}
	}

	View.createComp=function(uiView,comp,view,dataMap){
		comp=comp || View.getCompInstance(uiView);
		if (!comp){
			console.warn("can not create:"+uiView.type);
			return null;
		};
		var child=uiView.child;
		if (child){
			var isList=(comp instanceof laya.ui.List );
			for (var i=0,n=child.length;i < n;i++){
				var node=child[i];
				if (comp.hasOwnProperty("itemRender")&& (node.props.name=="render" || node.props.renderType==="render")){
					(comp).itemRender=node;
					}else if (node.type=="Graphic"){
					ClassUtils.addGraphicsToSprite(node,comp);
					}else if (ClassUtils.isDrawType(node.type)){
					ClassUtils.addGraphicToSprite(node,comp,true);
					}else {
					if (isList){
						var arr=[];
						var tChild=View.createComp(node,null,view,arr);
						if (arr.length)tChild["_$bindData"]=arr;
						}else {
						tChild=View.createComp(node,null,view,dataMap);
					}
					if (node.type=="Script"){
						if ("owner" in tChild){
							tChild["owner"]=comp;
							}else if ("target" in tChild){
							tChild["target"]=comp;
						}
						}else if (node.props.renderType=="mask" || node.props.name=="mask"){
						comp.mask=tChild;
						}else {(
						tChild instanceof laya.display.Sprite )&& comp.addChild(tChild);
					}
				}
			}
		};
		var props=uiView.props;
		for (var prop in props){
			var value=props[prop];
			if (View.eventDic[prop]){
				if (value&&view){
					(comp).on(prop,view,view.onEvent,[value]);
				}
			}else
			View.setCompValue(comp,prop,value,view,dataMap);
		}
		if (Laya.__typeof(comp,'laya.ui.IItem'))(comp).initItems();
		if (uiView.compId && view && view._idMap){
			view._idMap[uiView.compId]=comp;
		}
		return comp;
	}

	View.setCompValue=function(comp,prop,value,view,dataMap){
		if ((typeof value=='string')&& value.indexOf("${")>-1){
			View._sheet || (View._sheet=ClassUtils.getClass("laya.data.Table"));
			if (!View._sheet){
				console.warn("Can not find class Sheet");
				return;
			}
			if (dataMap){
				dataMap.push(comp,prop,value);
				}else if (view){
				if (value.indexOf("].")==-1){
					value=value.replace(".","[0].");
				};
				var watcher=new DataWatcher(comp,prop,value);
				watcher.exe(view);
				var one,temp;
				var str=value.replace(/\[.*?\]\./g,".");
				while ((one=View._parseWatchData.exec(str))!=null){
					var key1=one[1];
					while ((temp=View._parseKeyWord.exec(key1))!=null){
						var key2=temp[0];
						var arr=(view._watchMap[key2] || (view._watchMap[key2]=[]));
						arr.push(watcher);
						View._sheet.I.notifer.on(key2,view,view.changeData,[key2]);
					}
					arr=(view._watchMap[key1] || (view._watchMap[key1]=[]));
					arr.push(watcher);
					View._sheet.I.notifer.on(key1,view,view.changeData,[key1]);
				}
			}
			return;
		}
		if (prop==="var" && view){
			view[value]=comp;
			}else if (prop=="onClick"){
			var fun=Laya._runScript("(function(){"+value+"})");
			comp.on(/*laya.events.Event.CLICK*/"click",view,fun);
			}else {
			comp[prop]=(value==="true" ? true :(value==="false" ? false :value));
		}
	}

	View.getCompInstance=function(json){
		var runtime=json.props ? json.props.runtime :null;
		var compClass;
		compClass=runtime ? (View.viewClassMap[runtime] || View.uiClassMap[runtime]|| Laya["__classmap"][runtime]):View.uiClassMap[json.type];
		if (json.props && json.props.hasOwnProperty("renderType")&& json.props["renderType"]=="instance")return compClass["instance"];
		return compClass ? new compClass():null;
	}

	View.regComponent=function(key,compClass){
		View.uiClassMap[key]=compClass;
		ClassUtils.regClass(key,compClass);
	}

	View.regViewRuntime=function(key,compClass){
		View.viewClassMap[key]=compClass;
	}

	View.uiMap={};
	View.viewClassMap={};
	View._sheet=null;
	__static(View,
	['uiClassMap',function(){return this.uiClassMap={"ViewStack":ViewStack,"LinkButton":Button,"TextArea":TextArea,"ColorPicker":ColorPicker,"Box":Box,"Button":Button,"CheckBox":CheckBox,"Clip":Clip,"ComboBox":ComboBox,"Component":Component,"HScrollBar":HScrollBar,"HSlider":HSlider,"Image":Image,"Label":Label,"List":List,"Panel":Panel,"ProgressBar":ProgressBar,"Radio":Radio,"RadioGroup":RadioGroup,"ScrollBar":ScrollBar,"Slider":Slider,"Tab":Tab,"TextInput":TextInput,"View":View,"VScrollBar":VScrollBar,"VSlider":VSlider,"Tree":Tree,"HBox":HBox,"VBox":VBox,"Sprite":Sprite,"Animation":Animation,"Text":Text,"FontClip":FontClip};},'eventDic',function(){return this.eventDic={"mousedown":true,"mouseup":true,"mousemove":true,"mouseover":true,"mouseout":true,"click":true,"doubleclick":true,"rightmousedown":true,"rightmouseup":true,"rightclick":true };},'_parseWatchData',function(){return this._parseWatchData=/\${(.*?)}/g;},'_parseKeyWord',function(){return this._parseKeyWord=/[a-zA-Z_][a-zA-Z0-9_]*(?:(?:\.[a-zA-Z_][a-zA-Z0-9_]*)+)/g;}
	]);
	View.__init$=function(){
		View._regs()
		//class DataWatcher
		DataWatcher=(function(){
			function DataWatcher(comp,prop,value){
				this.comp=null;
				this.prop=null;
				this.value=null;
				this.comp=comp;
				this.prop=prop;
				this.value=value;
			}
			__class(DataWatcher,'');
			var __proto=DataWatcher.prototype;
			__proto.exe=function(view){
				var fun=UIUtils.getBindFun(this.value);
				this.comp[this.prop]=fun.call(this,view);
			}
			return DataWatcher;
		})()
	}

	return View;
})(Box)


/**
*<code>CheckBox</code> 组件显示一个小方框，该方框内可以有选中标记。
*<code>CheckBox</code> 组件还可以显示可选的文本标签，默认该标签位于 CheckBox 右侧。
*<p><code>CheckBox</code> 使用 <code>dataSource</code>赋值时的的默认属性是：<code>selected</code>。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>CheckBox</code> 实例。</caption>
*package
*{
	*import laya.ui.CheckBox;
	*import laya.utils.Handler;
	*public class CheckBox_Example
	*{
		*public function CheckBox_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/check.png",Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*trace("资源加载完成！");
			*var checkBox:CheckBox=new CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的实例对象 checkBox ,传入它的皮肤skin和标签label。
			*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
			*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
			*checkBox.clickHandler=new Handler(this,onClick,[checkBox]);//设置 checkBox 的点击事件处理器。
			*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
			*}
		*private function onClick(checkBox:CheckBox):void
		*{
			*trace("输出选中状态: checkBox.selected = "+checkBox.selected);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load("resource/ui/check.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*function loadComplete()
*{
	*console.log("资源加载完成！");
	*var checkBox:laya.ui.CheckBox=new laya.ui.CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的类的实例对象 checkBox ,传入它的皮肤skin和标签label。
	*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
	*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
	*checkBox.clickHandler=new laya.utils.Handler(this,this.onClick,[checkBox],false);//设置 checkBox 的点击事件处理器。
	*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
	*}
*function onClick(checkBox)
*{
	*console.log("checkBox.selected = ",checkBox.selected);
	*}
*@example
*import CheckBox=laya.ui.CheckBox;
*import Handler=laya.utils.Handler;
*class CheckBox_Example{
	*constructor()
	*{
		*Laya.init(640,800);
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/check.png",Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete()
	*{
		*var checkBox:CheckBox=new CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的实例对象 checkBox ,传入它的皮肤skin和标签label。
		*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.clickHandler=new Handler(this,this.onClick,[checkBox]);//设置 checkBox 的点击事件处理器。
		*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
		*}
	*private onClick(checkBox:CheckBox):void
	*{
		*console.log("输出选中状态: checkBox.selected = "+checkBox.selected);
		*}
	*}
*/
//class laya.ui.CheckBox extends laya.ui.Button
var CheckBox=(function(_super){
	/**
	*创建一个新的 <code>CheckBox</code> 组件实例。
	*@param skin 皮肤资源地址。
	*@param label 文本标签的内容。
	*/
	function CheckBox(skin,label){
		(label===void 0)&& (label="");
		CheckBox.__super.call(this,skin,label);
	}

	__class(CheckBox,'laya.ui.CheckBox',_super);
	var __proto=CheckBox.prototype;
	/**@inheritDoc */
	__proto.preinitialize=function(){
		laya.ui.Component.prototype.preinitialize.call(this);
		this.toggle=true;
		this._autoSize=false;
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		_super.prototype.initialize.call(this);
		this.createText();
		this._text.align="left";
		this._text.valign="top";
		this._text.width=0;
	}

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='boolean'))this.selected=value;
		else if ((typeof value=='string'))this.selected=value==="true";
		else Laya.superSet(Button,this,'dataSource',value);
	});

	return CheckBox;
})(Button)


/**
*<code>LayoutBox</code> 是一个布局容器类。
*/
//class laya.ui.LayoutBox extends laya.ui.Box
var LayoutBox=(function(_super){
	function LayoutBox(){
		/**@private */
		this._space=0;
		/**@private */
		this._align="none";
		/**@private */
		this._itemChanged=false;
		LayoutBox.__super.call(this);
	}

	__class(LayoutBox,'laya.ui.LayoutBox',_super);
	var __proto=LayoutBox.prototype;
	/**@inheritDoc */
	__proto.addChild=function(child){
		child.on(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
		this._setItemChanged();
		return laya.display.Node.prototype.addChild.call(this,child);
	}

	__proto.onResize=function(e){
		this._setItemChanged();
	}

	/**@inheritDoc */
	__proto.addChildAt=function(child,index){
		child.on(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
		this._setItemChanged();
		return laya.display.Node.prototype.addChildAt.call(this,child,index);
	}

	/**@inheritDoc */
	__proto.removeChild=function(child){
		child.off(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
		this._setItemChanged();
		return laya.display.Node.prototype.removeChild.call(this,child);
	}

	/**@inheritDoc */
	__proto.removeChildAt=function(index){
		this.getChildAt(index).off(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
		this._setItemChanged();
		return laya.display.Node.prototype.removeChildAt.call(this,index);
	}

	/**刷新。*/
	__proto.refresh=function(){
		this._setItemChanged();
	}

	/**
	*改变子对象的布局。
	*/
	__proto.changeItems=function(){
		this._itemChanged=false;
	}

	/**
	*排序项目列表。可通过重写改变默认排序规则。
	*@param items 项目列表。
	*/
	__proto.sortItem=function(items){
		if (items)items.sort(function(a,b){return a.y-b.y;});
	}

	__proto._setItemChanged=function(){
		if (!this._itemChanged){
			this._itemChanged=true;
			this.callLater(this.changeItems);
		}
	}

	/**子对象的间隔。*/
	__getset(0,__proto,'space',function(){
		return this._space;
		},function(value){
		this._space=value;
		this._setItemChanged();
	});

	/**子对象对齐方式。*/
	__getset(0,__proto,'align',function(){
		return this._align;
		},function(value){
		this._align=value;
		this._setItemChanged();
	});

	return LayoutBox;
})(Box)


/**
*字体切片，简化版的位图字体，只需设置一个切片图片和文字内容即可使用，效果同位图字体
*使用方式：设置位图字体皮肤skin，设置皮肤对应的字体内容sheet（如果多行，可以使用空格换行），示例：
*fontClip.skin="font1.png";//设置皮肤
*fontClip.sheet="abc123 456";//设置皮肤对应的内容，空格换行。此皮肤为2行5列（显示时skin会被等分为2行5列），第一行对应的文字为"abc123"，第二行为"456"
*fontClip.value="a1326";//显示"a1326"文字
*/
//class laya.ui.FontClip extends laya.ui.Clip
var FontClip=(function(_super){
	function FontClip(skin,sheet){
		/**数值*/
		this._valueArr=null;
		/**文字内容数组**/
		this._indexMap=null;
		/**位图字体内容**/
		this._sheet=null;
		/**@private */
		this._direction="horizontal";
		/**X方向间隙*/
		this._spaceX=0;
		/**Y方向间隙*/
		this._spaceY=0;
		/**@private 水平对齐方式*/
		this._align="left";
		/**@private 显示文字宽*/
		this._wordsW=0;
		/**@private 显示文字高*/
		this._wordsH=0;
		FontClip.__super.call(this);
		if (skin)this.skin=skin;
		if (sheet)this.sheet=sheet;
	}

	__class(FontClip,'laya.ui.FontClip',_super);
	var __proto=FontClip.prototype;
	__proto.createChildren=function(){
		this._bitmap=new AutoBitmap();
		this.on(/*laya.events.Event.LOADED*/"loaded",this,this._onClipLoaded);
	}

	/**
	*资源加载完毕
	*/
	__proto._onClipLoaded=function(){
		this.callLater(this.changeValue);
	}

	/**渲染数值*/
	__proto.changeValue=function(){
		if (!this._sources)return;
		if (!this._valueArr)return;
		this.graphics.clear(true);
		var texture;
		texture=this._sources[0];
		if (!texture)return;
		var isHorizontal=(this._direction==="horizontal");
		if (isHorizontal){
			this._wordsW=this._valueArr.length *(texture.sourceWidth+this.spaceX);
			this._wordsH=texture.sourceHeight;
			}else{
			this._wordsW=texture.sourceWidth;
			this._wordsH=(texture.sourceHeight+this.spaceY)*this._valueArr.length;
		};
		var dX=0;
		if (this._width){
			switch(this._align){
				case "center":
					dX=0.5 *(this._width-this._wordsW);
					break ;
				case "right":
					dX=this._width-this._wordsW;
					break ;
				default :
					dX=0;
				}
		}
		for (var i=0,sz=this._valueArr.length;i < sz;i++){
			var index=this._indexMap[this._valueArr.charAt(i)];
			if (!this.sources[index])continue ;
			texture=this.sources[index];
			if (isHorizontal)this.graphics.drawTexture(texture,dX+i *(texture.sourceWidth+this.spaceX),0,texture.sourceWidth,texture.sourceHeight);
			else this.graphics.drawTexture(texture,0+dX,i *(texture.sourceHeight+this.spaceY),texture.sourceWidth,texture.sourceHeight);
		}
		if (!this._width){
			this.resetLayoutX();
			this.callLater(this.changeSize);
		}
		if (!this._height){
			this.resetLayoutY();
			this.callLater(this.changeSize);
		}
	}

	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._valueArr=null;
		this._indexMap=null;
		this.graphics.clear(true);
		this.removeSelf();
		this.off(/*laya.events.Event.LOADED*/"loaded",this,this._onClipLoaded);
		_super.prototype.destroy.call(this,destroyChild);
	}

	/**
	*设置位图字体内容，空格代表换行。比如"abc123 456"，代表第一行对应的文字为"abc123"，第二行为"456"
	*/
	__getset(0,__proto,'sheet',function(){
		return this._sheet;
		},function(value){
		value+="";
		this._sheet=value;
		var arr=value.split(" ");
		this._clipX=String(arr[0]).length;
		this.clipY=arr.length;
		this._indexMap={};
		for (var i=0;i < this._clipY;i++){
			var line=arr[i].split("");
			for (var j=0,n=line.length;j < n;j++){
				this._indexMap[line[j]]=i *this._clipX+j;
			}
		}
	});

	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Clip,this,'height',value);
		this.callLater(this.changeValue);
	});

	/**
	*布局方向。
	*<p>默认值为"horizontal"。</p>
	*<p><b>取值：</b>
	*<li>"horizontal"：表示水平布局。</li>
	*<li>"vertical"：表示垂直布局。</li>
	*</p>
	*/
	__getset(0,__proto,'direction',function(){
		return this._direction;
		},function(value){
		this._direction=value;
		this.callLater(this.changeValue);
	});

	/**
	*设置位图字体的显示内容
	*/
	__getset(0,__proto,'value',function(){
		if (!this._valueArr)return "";
		return this._valueArr;
		},function(value){
		value+="";
		this._valueArr=value;
		this.callLater(this.changeValue);
	});

	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Clip,this,'width',value);
		this.callLater(this.changeValue);
	});

	/**X方向文字间隙*/
	__getset(0,__proto,'spaceX',function(){
		return this._spaceX;
		},function(value){
		this._spaceX=value;
		if (this._direction==="horizontal")this.callLater(this.changeValue);
	});

	/**Y方向文字间隙*/
	__getset(0,__proto,'spaceY',function(){
		return this._spaceY;
		},function(value){
		this._spaceY=value;
		if (!(this._direction==="horizontal"))this.callLater(this.changeValue);
	});

	/**水平对齐方式*/
	__getset(0,__proto,'align',function(){
		return this._align;
		},function(v){
		this._align=v;
		this.callLater(this.changeValue);
	});

	__getset(0,__proto,'measureWidth',function(){
		return this._wordsW;
	});

	__getset(0,__proto,'measureHeight',function(){
		return this._wordsH;
	});

	return FontClip;
})(Clip)


/**
*<code>List</code> 控件可显示项目列表。默认为垂直方向列表。可通过UI编辑器自定义列表。
*
*@example <caption>以下示例代码，创建了一个 <code>List</code> 实例。</caption>
*package
*{
	*import laya.ui.List;
	*import laya.utils.Handler;
	*public class List_Example
	*{
		*public function List_Example()
		*{
			*Laya.init(640,800,"false");//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,onLoadComplete));
			*}
		*private function onLoadComplete():void
		*{
			*var arr:Array=[];//创建一个数组，用于存贮列表的数据信息。
			*for (var i:int=0;i &lt;20;i++)
			*{
				*arr.push({label:"item"+i});
				*}
			*var list:List=new List();//创建一个 List 类的实例对象 list 。
			*list.itemRender=Item;//设置 list 的单元格渲染器。
			*list.repeatX=1;//设置 list 的水平方向单元格数量。
			*list.repeatY=10;//设置 list 的垂直方向单元格数量。
			*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
			*list.array=arr;//设置 list 的列表数据源。
			*list.pos(100,100);//设置 list 的位置。
			*list.selectEnable=true;//设置 list 可选。
			*list.selectHandler=new Handler(this,onSelect);//设置 list 改变选择项执行的处理器。
			*Laya.stage.addChild(list);//将 list 添加到显示列表。
			*}
		*private function onSelect(index:int):void
		*{
			*trace("当前选择的项目索引： index= ",index);
			*}
		*}
	*}
*import laya.ui.Box;
*import laya.ui.Label;
*class Item extends Box
*{
	*public function Item()
	*{
		*graphics.drawRect(0,0,100,20,null,"#ff0000");
		*var label:Label=new Label();
		*label.text="100000";
		*label.name="label";//设置 label 的name属性值。
		*label.size(100,20);
		*addChild(label);
		*}
	*}
*@example
*(function (_super){
	*function Item(){
		*Item.__super.call(this);//初始化父类
		*this.graphics.drawRect(0,0,100,20,"#ff0000");
		*var label=new laya.ui.Label();//创建一个 Label 类的实例对象 label 。
		*label.text="100000";//设置 label 的文本内容。
		*label.name="label";//设置 label 的name属性值。
		*label.size(100,20);//设置 label 的宽度、高度。
		*this.addChild(label);//将 label 添加到显示列表。
		*};
	*Laya.class(Item,"mypackage.listExample.Item",_super);//注册类 Item 。
	*})(laya.ui.Box);
*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"];
*Laya.loader.load(res,new laya.utils.Handler(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*var arr=[];//创建一个数组，用于存贮列表的数据信息。
	*for (var i=0;i &lt;20;i++){
		*arr.push({label:"item"+i});
		*}
	*var list=new laya.ui.List();//创建一个 List 类的实例对象 list 。
	*list.itemRender=mypackage.listExample.Item;//设置 list 的单元格渲染器。
	*list.repeatX=1;//设置 list 的水平方向单元格数量。
	*list.repeatY=10;//设置 list 的垂直方向单元格数量。
	*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
	*list.array=arr;//设置 list 的列表数据源。
	*list.pos(100,100);//设置 list 的位置。
	*list.selectEnable=true;//设置 list 可选。
	*list.selectHandler=new laya.utils.Handler(this,onSelect);//设置 list 改变选择项执行的处理器。
	*Laya.stage.addChild(list);//将 list 添加到显示列表。
	*}
*function onSelect(index)
*{
	*console.log("当前选择的项目索引： index= ",index);
	*}
*
*@example
*import List=laya.ui.List;
*import Handler=laya.utils.Handler;
*public class List_Example {
	*public List_Example(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,this.onLoadComplete));
		*}
	*private onLoadComplete():void {
		*var arr=[];//创建一个数组，用于存贮列表的数据信息。
		*for (var i:number=0;i &lt;20;i++)
		*{
			*arr.push({label:"item"+i });
			*}
		*var list:List=new List();//创建一个 List 类的实例对象 list 。
		*list.itemRender=Item;//设置 list 的单元格渲染器。
		*list.repeatX=1;//设置 list 的水平方向单元格数量。
		*list.repeatY=10;//设置 list 的垂直方向单元格数量。
		*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
		*list.array=arr;//设置 list 的列表数据源。
		*list.pos(100,100);//设置 list 的位置。
		*list.selectEnable=true;//设置 list 可选。
		*list.selectHandler=new Handler(this,this.onSelect);//设置 list 改变选择项执行的处理器。
		*Laya.stage.addChild(list);//将 list 添加到显示列表。
		*}
	*private onSelect(index:number):void {
		*console.log("当前选择的项目索引： index= ",index);
		*}
	*}
*import Box=laya.ui.Box;
*import Label=laya.ui.Label;
*class Item extends Box {
	*constructor(){
		*this.graphics.drawRect(0,0,100,20,null,"#ff0000");
		*var label:Label=new Label();
		*label.text="100000";
		*label.name="label";//设置 label 的name属性值。
		*label.size(100,20);
		*this.addChild(label);
		*}
	*}
*/
//class laya.ui.List extends laya.ui.Box
var List=(function(_super){
	function List(){
		/**改变 <code>List</code> 的选择项时执行的处理器，(默认返回参数： 项索引（index:int）)。*/
		this.selectHandler=null;
		/**单元格渲染处理器(默认返回参数cell:Box,index:int)。*/
		this.renderHandler=null;
		/**单元格鼠标事件处理器(默认返回参数e:Event,index:int)。*/
		this.mouseHandler=null;
		/**指定是否可以选择，若值为true则可以选择，否则不可以选择。 @default false*/
		this.selectEnable=false;
		/**最大分页数。*/
		this.totalPage=0;
		/**@private */
		this._content=null;
		/**@private */
		this._scrollBar=null;
		/**@private */
		this._itemRender=null;
		/**@private */
		this._repeatX=0;
		/**@private */
		this._repeatY=0;
		/**@private */
		this._repeatX2=0;
		/**@private */
		this._repeatY2=0;
		/**@private */
		this._spaceX=0;
		/**@private */
		this._spaceY=0;
		/**@private */
		this._array=null;
		/**@private */
		this._startIndex=0;
		/**@private */
		this._selectedIndex=-1;
		/**@private */
		this._page=0;
		/**@private */
		this._isVertical=true;
		/**@private */
		this._cellSize=20;
		/**@private */
		this._cellOffset=0;
		/**@private */
		this._isMoved=false;
		/**是否缓存内容，如果数据源较少，并且list内无动画，设置此属性为true能大大提高性能 */
		this.cacheContent=false;
		/**@private */
		this._createdLine=0;
		/**@private */
		this._cellChanged=false;
		this._cells=[];
		this._offset=new Point();
		List.__super.call(this);
	}

	__class(List,'laya.ui.List',_super);
	var __proto=List.prototype;
	Laya.imps(__proto,{"laya.ui.IRender":true,"laya.ui.IItem":true})
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._content && this._content.destroy(destroyChild);
		this._scrollBar && this._scrollBar.destroy(destroyChild);
		laya.ui.Component.prototype.destroy.call(this,destroyChild);
		this._content=null;
		this._scrollBar=null;
		this._itemRender=null;
		this._cells=null;
		this._array=null;
		this.selectHandler=this.renderHandler=this.mouseHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._content=new Box());
	}

	__proto.onScrollStart=function(){
		this._$P.cacheAs || (this._$P.cacheAs=Laya.superGet(Box,this,'cacheAs'));
		Laya.superSet(Box,this,'cacheAs',"none");
		this._scrollBar.once(/*laya.events.Event.END*/"end",this,this.onScrollEnd);
	}

	__proto.onScrollEnd=function(){
		Laya.superSet(Box,this,'cacheAs',this._$P.cacheAs);
	}

	__proto._removePreScrollBar=function(){
		var preNode=this.removeChildByName("scrollBar");
		if (preNode)preNode.destroy(true);
	}

	/**
	*@private
	*更改单元格的信息。
	*@internal 在此销毁、创建单元格，并设置单元格的位置等属性。相当于此列表内容发送改变时调用此函数。
	*/
	__proto.changeCells=function(){
		this._cellChanged=false;
		if (this._itemRender){
			this.scrollBar=this.getChildByName("scrollBar");
			var cell=this._getOneCell();
			var cellWidth=(cell.width+this._spaceX)|| 1;
			var cellHeight=(cell.height+this._spaceY)|| 1;
			if (this._width > 0)this._repeatX2=this._isVertical ? Math.round(this._width / cellWidth):Math.ceil(this._width / cellWidth);
			if (this._height > 0)this._repeatY2=this._isVertical ? Math.ceil(this._height / cellHeight):Math.round(this._height / cellHeight);
			var listWidth=this._width ? this._width :(cellWidth *this.repeatX-this._spaceX);
			var listHeight=this._height ? this._height :(cellHeight *this.repeatY-this._spaceY);
			this._cellSize=this._isVertical ? cellHeight :cellWidth;
			this._cellOffset=this._isVertical ? (cellHeight *Math.max(this._repeatY2,this._repeatY)-listHeight-this._spaceY):(cellWidth *Math.max(this._repeatX2,this._repeatX)-listWidth-this._spaceX);
			if (this._isVertical && this._scrollBar)this._scrollBar.height=listHeight;
			else if (!this._isVertical && this._scrollBar)this._scrollBar.width=listWidth;
			this.setContentSize(listWidth,listHeight);
			var numX=this._isVertical ? this.repeatX :this.repeatY;
			var numY=(this._isVertical ? this.repeatY :this.repeatX)+(this._scrollBar ? 1 :0);
			this._createItems(0,numX,numY);
			this._createdLine=numY;
			if (this._array){
				this.array=this._array;
				this.runCallLater(this.renderItems);
			}
		}
	}

	__proto._getOneCell=function(){
		if (this._cells.length===0){
			var item=this.createItem();
			this._offset.setTo(item.x,item.y);
			if (this.cacheContent)return item;
			this._cells.push(item);
		}
		return this._cells[0];
	}

	__proto._createItems=function(startY,numX,numY){
		var box=this._content;
		var cell=this._getOneCell();
		var cellWidth=cell.width+this._spaceX;
		var cellHeight=cell.height+this._spaceY;
		if (this.cacheContent){
			var cacheBox=new Box();
			cacheBox.cacheAsBitmap=true;
			cacheBox.pos((this._isVertical ? 0 :startY)*cellWidth,(this._isVertical ? startY :0)*cellHeight);
			this._content.addChild(cacheBox);
			this._content.optimizeScrollRect=true;
			box=cacheBox;
			}else {
			var arr=[];
			for (var i=this._cells.length-1;i >-1;i--){
				var item=this._cells[i];
				item.removeSelf();
				arr.push(item);
			}
			this._cells.length=0;
		}
		for (var k=startY;k < numY;k++){
			for (var l=0;l < numX;l++){
				if (arr && arr.length){
					cell=arr.pop();
					}else {
					cell=this.createItem();
				}
				cell.x=(this._isVertical ? l :k)*cellWidth-box.x;
				cell.y=(this._isVertical ? k :l)*cellHeight-box.y;
				cell.name="item"+(k *numX+l);
				box.addChild(cell);
				this.addCell(cell);
			}
		}
	}

	__proto.createItem=function(){
		var arr=[];
		if ((typeof this._itemRender=='function')){
			var box=new this._itemRender();
			}else {
			box=View.createComp(this._itemRender,null,null,arr)
		}
		if (arr.length==0 && box._watchMap){
			var watchMap=box._watchMap;
			for (var name in watchMap){
				var a=watchMap[name];
				for (var i=0;i < a.length;i++){
					var watcher=a[i];
					arr.push(watcher.comp,watcher.prop,watcher.value)
				}
			}
		}
		if (arr.length)box["_$bindData"]=arr;
		return box;
	}

	/**
	*@private
	*添加单元格。
	*@param cell 需要添加的单元格对象。
	*/
	__proto.addCell=function(cell){
		cell.on(/*laya.events.Event.CLICK*/"click",this,this.onCellMouse);
		cell.on(/*laya.events.Event.RIGHT_CLICK*/"rightclick",this,this.onCellMouse);
		cell.on(/*laya.events.Event.MOUSE_OVER*/"mouseover",this,this.onCellMouse);
		cell.on(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onCellMouse);
		cell.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onCellMouse);
		cell.on(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onCellMouse);
		this._cells.push(cell);
	}

	/**
	*初始化单元格信息。
	*/
	__proto.initItems=function(){
		if (!this._itemRender && this.getChildByName("item0")!=null){
			this.repeatX=1;
			var count=0;
			count=0;
			for (var i=0;i < 10000;i++){
				var cell=this.getChildByName("item"+i);
				if (cell){
					this.addCell(cell);
					count++;
					continue ;
				}
				break ;
			}
			this.repeatY=count;
		}
	}

	/**
	*设置可视区域大小。
	*<p>以（0，0，width参数，height参数）组成的矩形区域为可视区域。</p>
	*@param width 可视区域宽度。
	*@param height 可视区域高度。
	*/
	__proto.setContentSize=function(width,height){
		this._content.width=width;
		this._content.height=height;
		if (this._scrollBar || this._offset.x !=0 || this._offset.y !=0){
			this._content.scrollRect || (this._content.scrollRect=new Rectangle());
			this._content.scrollRect.setTo(-this._offset.x,-this._offset.y,width,height);
			this._content.scrollRect=this._content.scrollRect;
		}
		this.event(/*laya.events.Event.RESIZE*/"resize");
	}

	/**
	*@private
	*单元格的鼠标事件侦听处理函数。
	*/
	__proto.onCellMouse=function(e){
		if (e.type===/*laya.events.Event.MOUSE_DOWN*/"mousedown")this._isMoved=false;
		var cell=e.currentTarget;
		var index=this._startIndex+this._cells.indexOf(cell);
		if (index < 0)return;
		if (e.type===/*laya.events.Event.CLICK*/"click" || e.type===/*laya.events.Event.RIGHT_CLICK*/"rightclick"){
			if (this.selectEnable && !this._isMoved)this.selectedIndex=index;
			else this.changeCellState(cell,true,0);
			}else if ((e.type===/*laya.events.Event.MOUSE_OVER*/"mouseover" || e.type===/*laya.events.Event.MOUSE_OUT*/"mouseout")&& this._selectedIndex!==index){
			this.changeCellState(cell,e.type===/*laya.events.Event.MOUSE_OVER*/"mouseover",0);
		}
		this.mouseHandler && this.mouseHandler.runWith([e,index]);
	}

	/**
	*@private
	*改变单元格的可视状态。
	*@param cell 单元格对象。
	*@param visable 是否显示。
	*@param index 单元格的属性 <code>index</code> 值。
	*/
	__proto.changeCellState=function(cell,visable,index){
		var selectBox=cell.getChildByName("selectBox");
		if (selectBox){
			this.selectEnable=true;
			selectBox.visible=visable;
			selectBox.index=index;
		}
	}

	/**@inheritDoc */
	__proto.changeSize=function(){
		laya.ui.Component.prototype.changeSize.call(this);
		this.setContentSize(this.width,this.height);
		if (this._scrollBar)this.callLater(this.onScrollBarChange);
	}

	/**
	*@private
	*滚动条的 <code>Event.CHANGE</code> 事件侦听处理函数。
	*/
	__proto.onScrollBarChange=function(e){
		this.runCallLater(this.changeCells);
		var scrollValue=this._scrollBar.value;
		var lineX=(this._isVertical ? this.repeatX :this.repeatY);
		var lineY=(this._isVertical ? this.repeatY :this.repeatX);
		var scrollLine=Math.floor(scrollValue / this._cellSize);
		if (!this.cacheContent){
			var index=scrollLine *lineX;
			var num=0;
			if (index > this._startIndex){
				num=index-this._startIndex;
				var down=true;
				var toIndex=this._startIndex+lineX *(lineY+1);
				this._isMoved=true;
				}else if (index < this._startIndex){
				num=this._startIndex-index;
				down=false;
				toIndex=this._startIndex-1;
				this._isMoved=true;
			}
			for (var i=0;i < num;i++){
				if (down){
					var cell=this._cells.shift();
					this._cells[this._cells.length]=cell;
					var cellIndex=toIndex+i;
					}else {
					cell=this._cells.pop();
					this._cells.unshift(cell);
					cellIndex=toIndex-i;
				};
				var pos=Math.floor(cellIndex / lineX)*this._cellSize;
				this._isVertical ? cell.y=pos :cell.x=pos;
				this.renderItem(cell,cellIndex);
			}
			this._startIndex=index;
			this.changeSelectStatus();
			}else {
			num=(lineY+1);
			if (this._createdLine-scrollLine < num){
				this._createItems(this._createdLine,lineX,this._createdLine+num);
				this.renderItems(this._createdLine *lineX,0);
				this._createdLine+=num;
			}
		};
		var r=this._content.scrollRect;
		if (this._isVertical){
			r.y=scrollValue-this._offset.y;
			r.x=-this._offset.x;
			}else {
			r.y=-this._offset.y;
			r.x=scrollValue-this._offset.x;
		}
		this._content.scrollRect=r;
	}

	__proto.posCell=function(cell,cellIndex){
		if (!this._scrollBar)return;
		var lineX=(this._isVertical ? this.repeatX :this.repeatY);
		var lineY=(this._isVertical ? this.repeatY :this.repeatX);
		var pos=Math.floor(cellIndex / lineX)*this._cellSize;
		this._isVertical ? cell.y=pos :cell.x=pos;
	}

	/**
	*@private
	*改变单元格的选择状态。
	*/
	__proto.changeSelectStatus=function(){
		for (var i=0,n=this._cells.length;i < n;i++){
			this.changeCellState(this._cells[i],this._selectedIndex===this._startIndex+i,1);
		}
	}

	/**
	*@private
	*渲染单元格列表。
	*/
	__proto.renderItems=function(from,to){
		(from===void 0)&& (from=0);
		(to===void 0)&& (to=0);
		for (var i=from,n=to || this._cells.length;i < n;i++){
			this.renderItem(this._cells[i],this._startIndex+i);
		}
		this.changeSelectStatus();
	}

	/**
	*渲染一个单元格。
	*@param cell 需要渲染的单元格对象。
	*@param index 单元格索引。
	*/
	__proto.renderItem=function(cell,index){
		if (this._array && index >=0 && index < this._array.length){
			cell.visible=true;
			if (cell._$bindData){
				cell._dataSource=this._array[index];
				this._bindData(cell,this._array[index]);
			}else cell.dataSource=this._array[index];
			if (!this.cacheContent){
				this.posCell(cell,index);
			}
			if (this.hasListener(/*laya.events.Event.RENDER*/"render"))this.event(/*laya.events.Event.RENDER*/"render",[cell,index]);
			if (this.renderHandler)this.renderHandler.runWith([cell,index]);
			}else {
			cell.visible=false;
			cell.dataSource=null;
		}
	}

	__proto._bindData=function(cell,data){
		var arr=cell._$bindData;
		for (var i=0,n=arr.length;i < n;i++){
			var ele=arr[i++];
			var prop=arr[i++];
			var value=arr[i];
			var fun=UIUtils.getBindFun(value);
			ele[prop]=fun.call(this,data);
		}
	}

	/**
	*刷新列表数据源。
	*/
	__proto.refresh=function(){
		this.array=this._array;
	}

	/**
	*获取单元格数据源。
	*@param index 单元格索引。
	*/
	__proto.getItem=function(index){
		if (index >-1 && index < this._array.length){
			return this._array[index];
		}
		return null;
	}

	/**
	*修改单元格数据源。
	*@param index 单元格索引。
	*@param source 单元格数据源。
	*/
	__proto.changeItem=function(index,source){
		if (index >-1 && index < this._array.length){
			this._array[index]=source;
			if (index >=this._startIndex && index < this._startIndex+this._cells.length){
				this.renderItem(this.getCell(index),index);
			}
		}
	}

	/**
	*设置单元格数据源。
	*@param index 单元格索引。
	*@param source 单元格数据源。
	*/
	__proto.setItem=function(index,source){
		this.changeItem(index,source);
	}

	/**
	*添加单元格数据源。
	*@param souce 数据源。
	*/
	__proto.addItem=function(souce){
		this._array.push(souce);
		this.array=this._array;
	}

	/**
	*添加单元格数据源到对应的数据索引处。
	*@param souce 单元格数据源。
	*@param index 索引。
	*/
	__proto.addItemAt=function(souce,index){
		this._array.splice(index,0,souce);
		this.array=this._array;
	}

	/**
	*通过数据源索引删除单元格数据源。
	*@param index 需要删除的数据源索引值。
	*/
	__proto.deleteItem=function(index){
		this._array.splice(index,1);
		this.array=this._array;
	}

	/**
	*通过可视单元格索引，获取单元格。
	*@param index 可视单元格索引。
	*@return 单元格对象。
	*/
	__proto.getCell=function(index){
		this.runCallLater(this.changeCells);
		if (index >-1 && this._cells){
			return this._cells[(index-this._startIndex)% this._cells.length];
		}
		return null;
	}

	/**
	*<p>滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
	*@param index 单元格在数据列表中的索引。
	*/
	__proto.scrollTo=function(index){
		if (this._scrollBar){
			var numX=this._isVertical ? this.repeatX :this.repeatY;
			this._scrollBar.value=Math.floor(index / numX)*this._cellSize;
			}else {
			this.startIndex=index;
		}
	}

	/**
	*<p>缓动滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
	*@param index 单元格在数据列表中的索引。
	*@param time 缓动时间。
	*@param complete 缓动结束回掉
	*/
	__proto.tweenTo=function(index,time,complete){
		(time===void 0)&& (time=200);
		if (this._scrollBar){
			var numX=this._isVertical ? this.repeatX :this.repeatY;
			Tween.to(this._scrollBar,{value:Math.floor(index / numX)*this._cellSize},time,null,complete,0,true);
			}else {
			this.startIndex=index;
			if (complete)complete.run();
		}
	}

	/**@private */
	__proto._setCellChanged=function(){
		if (!this._cellChanged){
			this._cellChanged=true;
			this.callLater(this.changeCells);
		}
	}

	__proto.commitMeasure=function(){
		this.runCallLater(this.changeCells);
	}

	/**@inheritDoc */
	__getset(0,__proto,'cacheAs',_super.prototype._$get_cacheAs,function(value){
		Laya.superSet(Box,this,'cacheAs',value);
		if (this._scrollBar){
			this._$P.cacheAs=null;
			if (value!=="none")this._scrollBar.on(/*laya.events.Event.START*/"start",this,this.onScrollStart);
			else this._scrollBar.off(/*laya.events.Event.START*/"start",this,this.onScrollStart);
		}
	});

	/**
	*获取对 <code>List</code> 组件所包含的内容容器 <code>Box</code> 组件的引用。
	*/
	__getset(0,__proto,'content',function(){
		return this._content;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		if (value !=this._height){
			Laya.superSet(Box,this,'height',value);
			this._setCellChanged();
		}
	});

	/**
	*单元格渲染器。
	*<p><b>取值：</b>
	*<ol>
	*<li>单元格类对象。</li>
	*<li> UI 的 JSON 描述。</li>
	*</ol></p>
	*/
	__getset(0,__proto,'itemRender',function(){
		return this._itemRender;
		},function(value){
		if (this._itemRender !=value){
			this._itemRender=value;
			for (var i=this._cells.length-1;i >-1;i--){
				this._cells[i].destroy();
			}
			this._cells.length=0;
			this._setCellChanged();
		}
	});

	/**
	*垂直方向滚动条皮肤。
	*/
	__getset(0,__proto,'vScrollBarSkin',function(){
		return this._scrollBar ? this._scrollBar.skin :null;
		},function(value){
		this._removePreScrollBar();
		var scrollBar=new VScrollBar();
		scrollBar.name="scrollBar";
		scrollBar.right=0;
		if (value && value !=" ")
			scrollBar.skin=value;
		this.scrollBar=scrollBar;
		this.addChild(scrollBar);
		this._setCellChanged();
	});

	/**
	*列表的当前页码。
	*/
	__getset(0,__proto,'page',function(){
		return this._page;
		},function(value){
		this._page=value
		if (this._array){
			this._page=value > 0 ? value :0;
			this._page=this._page < this.totalPage ? this._page :this.totalPage-1;
			this.startIndex=this._page *this.repeatX *this.repeatY;
		}
	});

	/**
	*水平方向滚动条皮肤。
	*/
	__getset(0,__proto,'hScrollBarSkin',function(){
		return this._scrollBar ? this._scrollBar.skin :null;
		},function(value){
		this._removePreScrollBar();
		var scrollBar=new HScrollBar();
		scrollBar.name="scrollBar";
		scrollBar.bottom=0;
		if (value && value !=" ")
			scrollBar.skin=value;
		this.scrollBar=scrollBar;
		this.addChild(scrollBar);
		this._setCellChanged();
	});

	/**
	*水平方向显示的单元格数量。
	*/
	__getset(0,__proto,'repeatX',function(){
		return this._repeatX > 0 ? this._repeatX :this._repeatX2 > 0 ? this._repeatX2 :1;
		},function(value){
		this._repeatX=value;
		this._setCellChanged();
	});

	/**
	*获取对 <code>List</code> 组件所包含的滚动条 <code>ScrollBar</code> 组件的引用。
	*/
	__getset(0,__proto,'scrollBar',function(){
		return this._scrollBar;
		},function(value){
		if (this._scrollBar !=value){
			this._scrollBar=value;
			if (value){
				this._isVertical=this._scrollBar.isVertical;
				this.addChild(this._scrollBar);
				this._scrollBar.on(/*laya.events.Event.CHANGE*/"change",this,this.onScrollBarChange);
			}
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		if (value !=this._width){
			Laya.superSet(Box,this,'width',value);
			this._setCellChanged();
		}
	});

	/**
	*垂直方向显示的单元格数量。
	*/
	__getset(0,__proto,'repeatY',function(){
		return this._repeatY > 0 ? this._repeatY :this._repeatY2 > 0 ? this._repeatY2 :1;
		},function(value){
		this._repeatY=value;
		this._setCellChanged();
	});

	/**
	*水平方向显示的单元格之间的间距（以像素为单位）。
	*/
	__getset(0,__proto,'spaceX',function(){
		return this._spaceX;
		},function(value){
		this._spaceX=value;
		this._setCellChanged();
	});

	/**
	*垂直方向显示的单元格之间的间距（以像素为单位）。
	*/
	__getset(0,__proto,'spaceY',function(){
		return this._spaceY;
		},function(value){
		this._spaceY=value;
		this._setCellChanged();
	});

	/**
	*表示当前选择的项索引。selectedIndex值更改会引起list重新渲染
	*/
	__getset(0,__proto,'selectedIndex',function(){
		return this._selectedIndex;
		},function(value){
		if (this._selectedIndex !=value){
			this._selectedIndex=value;
			this.changeSelectStatus();
			this.event(/*laya.events.Event.CHANGE*/"change");
			this.selectHandler && this.selectHandler.runWith(value);
			this.startIndex=this._startIndex;
		}
	});

	/**
	*当前选中的单元格数据源。
	*/
	__getset(0,__proto,'selectedItem',function(){
		return this._selectedIndex !=-1 ? this._array[this._selectedIndex] :null;
		},function(value){
		this.selectedIndex=this._array.indexOf(value);
	});

	/**
	*列表的数据总个数。
	*/
	__getset(0,__proto,'length',function(){
		return this._array ? this._array.length :0;
	});

	/**
	*获取或设置当前选择的单元格对象。
	*/
	__getset(0,__proto,'selection',function(){
		return this.getCell(this._selectedIndex);
		},function(value){
		this.selectedIndex=this._startIndex+this._cells.indexOf(value);
	});

	/**
	*当前显示的单元格列表的开始索引。
	*/
	__getset(0,__proto,'startIndex',function(){
		return this._startIndex;
		},function(value){
		this._startIndex=value > 0 ? value :0;
		this.callLater(this.renderItems);
	});

	/**
	*列表数据源。
	*/
	__getset(0,__proto,'array',function(){
		return this._array;
		},function(value){
		this.runCallLater(this.changeCells);
		this._array=value || [];
		var length=this._array.length;
		this.totalPage=Math.ceil(length / (this.repeatX *this.repeatY));
		this._selectedIndex=this._selectedIndex < length ? this._selectedIndex :length-1;
		this.startIndex=this._startIndex;
		if (this._scrollBar){
			this._scrollBar.stopScroll();
			var numX=this._isVertical ? this.repeatX :this.repeatY;
			var numY=this._isVertical ? this.repeatY :this.repeatX;
			var lineCount=Math.ceil(length / numX);
			var total=this._cellOffset > 0 ? this.totalPage+1 :this.totalPage;
			if (total > 1){
				this._scrollBar.scrollSize=this._cellSize;
				this._scrollBar.thumbPercent=numY / lineCount;
				this._scrollBar.setScroll(0,(lineCount-numY)*this._cellSize+this._cellOffset,this._scrollBar.value);
				this._scrollBar.target=this._content;
				}else {
				this._scrollBar.setScroll(0,0,0);
				this._scrollBar.target=this._content;
			}
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
		else if ((value instanceof Array))this.array=value
		else Laya.superSet(Box,this,'dataSource',value);
	});

	/**
	*单元格集合。
	*/
	__getset(0,__proto,'cells',function(){
		this.runCallLater(this.changeCells);
		return this._cells;
	});

	return List;
})(Box)


/**
*使用 <code>HScrollBar</code> （水平 <code>ScrollBar</code> ）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。
*@example <caption>以下示例代码，创建了一个 <code>HScrollBar</code> 实例。</caption>
*package
*{
	*import laya.ui.HScrollBar;
	*import laya.utils.Handler;
	*public class HScrollBar_Example
	*{
		*private var hScrollBar:HScrollBar;
		*public function HScrollBar_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*hScrollBar=new HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
			*hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
			*hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
			*hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
			*hScrollBar.changeHandler=new Handler(this,onChange);//设置 hScrollBar 的滚动变化处理器。
			*Laya.stage.addChild(hScrollBar);//将此 hScrollBar 对象添加到显示列表。
			*}
		*private function onChange(value:Number):void
		*{
			*trace("滚动条的位置： value="+value);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var hScrollBar;
*var res=["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"];
*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*console.log("资源加载完成！");
	*hScrollBar=new laya.ui.HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
	*hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
	*hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
	*hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
	*hScrollBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 hScrollBar 的滚动变化处理器。
	*Laya.stage.addChild(hScrollBar);//将此 hScrollBar 对象添加到显示列表。
	*}
*function onChange(value)
*{
	*console.log("滚动条的位置： value="+value);
	*}
*@example
*import HScrollBar=laya.ui.HScrollBar;
*import Handler=laya.utils.Handler;
*class HScrollBar_Example {
	*private hScrollBar:HScrollBar;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*this.hScrollBar=new HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
		*this.hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
		*this.hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
		*this.hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
		*this.hScrollBar.changeHandler=new Handler(this,this.onChange);//设置 hScrollBar 的滚动变化处理器。
		*Laya.stage.addChild(this.hScrollBar);//将此 hScrollBar 对象添加到显示列表。
		*}
	*private onChange(value:number):void {
		*console.log("滚动条的位置： value="+value);
		*}
	*}
*/
//class laya.ui.HScrollBar extends laya.ui.ScrollBar
var HScrollBar=(function(_super){
	function HScrollBar(){
		HScrollBar.__super.call(this);;
	}

	__class(HScrollBar,'laya.ui.HScrollBar',_super);
	var __proto=HScrollBar.prototype;
	/**@inheritDoc */
	__proto.initialize=function(){
		_super.prototype.initialize.call(this);
		this.slider.isVertical=false;
	}

	return HScrollBar;
})(ScrollBar)


/**
*<code>Panel</code> 是一个面板容器类。
*/
//class laya.ui.Panel extends laya.ui.Box
var Panel=(function(_super){
	function Panel(){
		/**@private */
		this._content=null;
		/**@private */
		this._vScrollBar=null;
		/**@private */
		this._hScrollBar=null;
		/**@private */
		this._scrollChanged=false;
		Panel.__super.call(this);
		this.width=this.height=100;
	}

	__class(Panel,'laya.ui.Panel',_super);
	var __proto=Panel.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		laya.ui.Component.prototype.destroy.call(this,destroyChild);
		this._content && this._content.destroy(destroyChild);
		this._vScrollBar && this._vScrollBar.destroy(destroyChild);
		this._hScrollBar && this._hScrollBar.destroy(destroyChild);
		this._vScrollBar=null;
		this._hScrollBar=null;
		this._content=null;
	}

	/**@inheritDoc */
	__proto.destroyChildren=function(){
		this._content.destroyChildren();
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		laya.display.Node.prototype.addChild.call(this,this._content=new Box());
	}

	/**@inheritDoc */
	__proto.addChild=function(child){
		child.on(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
		this._setScrollChanged();
		return this._content.addChild(child);
	}

	/**
	*@private
	*子对象的 <code>Event.RESIZE</code> 事件侦听处理函数。
	*/
	__proto.onResize=function(){
		this._setScrollChanged();
	}

	/**@inheritDoc */
	__proto.addChildAt=function(child,index){
		child.on(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
		this._setScrollChanged();
		return this._content.addChildAt(child,index);
	}

	/**@inheritDoc */
	__proto.removeChild=function(child){
		child.off(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
		this._setScrollChanged();
		return this._content.removeChild(child);
	}

	/**@inheritDoc */
	__proto.removeChildAt=function(index){
		this.getChildAt(index).off(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
		this._setScrollChanged();
		return this._content.removeChildAt(index);
	}

	/**@inheritDoc */
	__proto.removeChildren=function(beginIndex,endIndex){
		(beginIndex===void 0)&& (beginIndex=0);
		(endIndex===void 0)&& (endIndex=0x7fffffff);
		this._content.removeChildren(beginIndex,endIndex);
		this._setScrollChanged();
		return this;
	}

	/**@inheritDoc */
	__proto.getChildAt=function(index){
		return this._content.getChildAt(index);
	}

	/**@inheritDoc */
	__proto.getChildByName=function(name){
		return this._content.getChildByName(name);
	}

	/**@inheritDoc */
	__proto.getChildIndex=function(child){
		return this._content.getChildIndex(child);
	}

	/**@private */
	__proto.changeScroll=function(){
		this._scrollChanged=false;
		var contentW=this.contentWidth || 1;
		var contentH=this.contentHeight || 1;
		var vscroll=this._vScrollBar;
		var hscroll=this._hScrollBar;
		var vShow=vscroll && contentH > this._height;
		var hShow=hscroll && contentW > this._width;
		var showWidth=vShow ? this._width-vscroll.width :this._width;
		var showHeight=hShow ? this._height-hscroll.height :this._height;
		if (vscroll){
			vscroll.x=this._width-vscroll.width;
			vscroll.y=0;
			vscroll.height=this._height-(hShow ? hscroll.height :0);
			vscroll.scrollSize=Math.max(this._height *0.033,1);
			vscroll.thumbPercent=showHeight / contentH;
			vscroll.setScroll(0,contentH-showHeight,vscroll.value);
		}
		if (hscroll){
			hscroll.x=0;
			hscroll.y=this._height-hscroll.height;
			hscroll.width=this._width-(vShow ? vscroll.width :0);
			hscroll.scrollSize=Math.max(this._width *0.033,1);
			hscroll.thumbPercent=showWidth / contentW;
			hscroll.setScroll(0,contentW-showWidth,hscroll.value);
		}
	}

	/**@inheritDoc */
	__proto.changeSize=function(){
		laya.ui.Component.prototype.changeSize.call(this);
		this.setContentSize(this._width,this._height);
	}

	/**
	*@private
	*设置内容的宽度、高度（以像素为单位）。
	*@param width 宽度。
	*@param height 高度。
	*/
	__proto.setContentSize=function(width,height){
		var content=this._content;
		content.width=width;
		content.height=height;
		content.scrollRect || (content.scrollRect=new Rectangle());
		content.scrollRect.setTo(0,0,width,height);
		content.scrollRect=content.scrollRect;
	}

	/**
	*@private
	*滚动条的<code><code>Event.MOUSE_DOWN</code>事件侦听处理函数。</code>事件侦听处理函数。
	*@param scrollBar 滚动条对象。
	*@param e Event 对象。
	*/
	__proto.onScrollBarChange=function(scrollBar){
		var rect=this._content.scrollRect;
		if (rect){
			var start=Math.round(scrollBar.value);
			scrollBar.isVertical ? rect.y=start :rect.x=start;
			this._content.scrollRect=rect;
		}
	}

	/**
	*<p>滚动内容容器至设定的垂直、水平方向滚动条位置。</p>
	*@param x 水平方向滚动条属性value值。滚动条位置数字。
	*@param y 垂直方向滚动条属性value值。滚动条位置数字。
	*/
	__proto.scrollTo=function(x,y){
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		if (this.vScrollBar)this.vScrollBar.value=y;
		if (this.hScrollBar)this.hScrollBar.value=x;
	}

	/**
	*刷新滚动内容。
	*/
	__proto.refresh=function(){
		this.changeScroll();
	}

	__proto.onScrollStart=function(){
		this._$P.cacheAs || (this._$P.cacheAs=Laya.superGet(Box,this,'cacheAs'));
		Laya.superSet(Box,this,'cacheAs',"none");
		this._hScrollBar && this._hScrollBar.once(/*laya.events.Event.END*/"end",this,this.onScrollEnd);
		this._vScrollBar && this._vScrollBar.once(/*laya.events.Event.END*/"end",this,this.onScrollEnd);
	}

	__proto.onScrollEnd=function(){
		Laya.superSet(Box,this,'cacheAs',this._$P.cacheAs);
	}

	/**@private */
	__proto._setScrollChanged=function(){
		if (!this._scrollChanged){
			this._scrollChanged=true;
			this.callLater(this.changeScroll);
		}
	}

	/**@inheritDoc */
	__getset(0,__proto,'numChildren',function(){
		return this._content.numChildren;
	});

	/**
	*水平方向滚动条皮肤。
	*/
	__getset(0,__proto,'hScrollBarSkin',function(){
		return this._hScrollBar ? this._hScrollBar.skin :null;
		},function(value){
		if (this._hScrollBar==null){
			laya.display.Node.prototype.addChild.call(this,this._hScrollBar=new HScrollBar());
			this._hScrollBar.on(/*laya.events.Event.CHANGE*/"change",this,this.onScrollBarChange,[this._hScrollBar]);
			this._hScrollBar.target=this._content;
			this._setScrollChanged();
		}
		this._hScrollBar.skin=value;
	});

	/**
	*@private
	*获取内容宽度（以像素为单位）。
	*/
	__getset(0,__proto,'contentWidth',function(){
		var max=0;
		for (var i=this._content.numChildren-1;i >-1;i--){
			var comp=this._content.getChildAt(i);
			max=Math.max(comp.x+comp.width *comp.scaleX,max);
		}
		return max;
	});

	/**
	*@private
	*获取内容高度（以像素为单位）。
	*/
	__getset(0,__proto,'contentHeight',function(){
		var max=0;
		for (var i=this._content.numChildren-1;i >-1;i--){
			var comp=this._content.getChildAt(i);
			max=Math.max(comp.y+comp.height *comp.scaleY,max);
		}
		return max;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Box,this,'width',value);
		this._setScrollChanged();
	});

	/**
	*水平方向滚动条对象。
	*/
	__getset(0,__proto,'hScrollBar',function(){
		return this._hScrollBar;
	});

	/**
	*获取内容容器对象。
	*/
	__getset(0,__proto,'content',function(){
		return this._content;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Box,this,'height',value);
		this._setScrollChanged();
	});

	/**
	*垂直方向滚动条皮肤。
	*/
	__getset(0,__proto,'vScrollBarSkin',function(){
		return this._vScrollBar ? this._vScrollBar.skin :null;
		},function(value){
		if (this._vScrollBar==null){
			laya.display.Node.prototype.addChild.call(this,this._vScrollBar=new VScrollBar());
			this._vScrollBar.on(/*laya.events.Event.CHANGE*/"change",this,this.onScrollBarChange,[this._vScrollBar]);
			this._vScrollBar.target=this._content;
			this._setScrollChanged();
		}
		this._vScrollBar.skin=value;
	});

	/**
	*垂直方向滚动条对象。
	*/
	__getset(0,__proto,'vScrollBar',function(){
		return this._vScrollBar;
	});

	/**@inheritDoc */
	__getset(0,__proto,'cacheAs',_super.prototype._$get_cacheAs,function(value){
		Laya.superSet(Box,this,'cacheAs',value);
		this._$P.cacheAs=null;
		if (value!=="none"){
			this._hScrollBar && this._hScrollBar.on(/*laya.events.Event.START*/"start",this,this.onScrollStart);
			this._vScrollBar && this._vScrollBar.on(/*laya.events.Event.START*/"start",this,this.onScrollStart);
			}else {
			this._hScrollBar && this._hScrollBar.off(/*laya.events.Event.START*/"start",this,this.onScrollStart);
			this._vScrollBar && this._vScrollBar.off(/*laya.events.Event.START*/"start",this,this.onScrollStart);
		}
	});

	return Panel;
})(Box)


/**
*使用 <code>HSlider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
*<p> <code>HSlider</code> 控件采用水平方向。滑块轨道从左向右扩展，而标签位于轨道的顶部或底部。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>HSlider</code> 实例。</caption>
*package
*{
	*import laya.ui.HSlider;
	*import laya.utils.Handler;
	*public class HSlider_Example
	*{
		*private var hSlider:HSlider;
		*public function HSlider_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/hslider.png","resource/ui/hslider$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*hSlider=new HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
			*hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
			*hSlider.min=0;//设置 hSlider 最低位置值。
			*hSlider.max=10;//设置 hSlider 最高位置值。
			*hSlider.value=2;//设置 hSlider 当前位置值。
			*hSlider.tick=1;//设置 hSlider 刻度值。
			*hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
			*hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
			*hSlider.changeHandler=new Handler(this,onChange);//设置 hSlider 位置变化处理器。
			*Laya.stage.addChild(hSlider);//把 hSlider 添加到显示列表。
			*}
		*private function onChange(value:Number):void
		*{
			*trace("滑块的位置： value="+value);
			*}
		*}
	*}
*@example
*Laya.init(640,800,"canvas");//设置游戏画布宽高、渲染模式
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var hSlider;
*var res=["resource/ui/hslider.png","resource/ui/hslider$bar.png"];
*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));
*function onLoadComplete(){
	*console.log("资源加载完成！");
	*hSlider=new laya.ui.HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
	*hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
	*hSlider.min=0;//设置 hSlider 最低位置值。
	*hSlider.max=10;//设置 hSlider 最高位置值。
	*hSlider.value=2;//设置 hSlider 当前位置值。
	*hSlider.tick=1;//设置 hSlider 刻度值。
	*hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
	*hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
	*hSlider.changeHandler=new laya.utils.Handler(this,onChange);//设置 hSlider 位置变化处理器。
	*Laya.stage.addChild(hSlider);//把 hSlider 添加到显示列表。
	*}
*function onChange(value)
*{
	*console.log("滑块的位置： value="+value);
	*}
*@example
*import Handler=laya.utils.Handler;
*import HSlider=laya.ui.HSlider;
*class HSlider_Example {
	*private hSlider:HSlider;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/hslider.png","resource/ui/hslider$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*this.hSlider=new HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
		*this.hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
		*this.hSlider.min=0;//设置 hSlider 最低位置值。
		*this.hSlider.max=10;//设置 hSlider 最高位置值。
		*this.hSlider.value=2;//设置 hSlider 当前位置值。
		*this.hSlider.tick=1;//设置 hSlider 刻度值。
		*this.hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
		*this.hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
		*this.hSlider.changeHandler=new Handler(this,this.onChange);//设置 hSlider 位置变化处理器。
		*Laya.stage.addChild(this.hSlider);//把 hSlider 添加到显示列表。
		*}
	*private onChange(value:number):void {
		*console.log("滑块的位置： value="+value);
		*}
	*}
*
*@see laya.ui.Slider
*/
//class laya.ui.HSlider extends laya.ui.Slider
var HSlider=(function(_super){
	/**
	*创建一个 <code>HSlider</code> 类实例。
	*@param skin 皮肤。
	*/
	function HSlider(skin){
		HSlider.__super.call(this,skin);
		this.isVertical=false;
	}

	__class(HSlider,'laya.ui.HSlider',_super);
	return HSlider;
})(Slider)


/**
*<code>Group</code> 是一个可以自动布局的项集合控件。
*<p> <code>Group</code> 的默认项对象为 <code>Button</code> 类实例。
*<code>Group</code> 是 <code>Tab</code> 和 <code>RadioGroup</code> 的基类。</p>
*/
//class laya.ui.UIGroup extends laya.ui.Box
var UIGroup=(function(_super){
	function UIGroup(labels,skin){
		/**
		*改变 <code>Group</code> 的选择项时执行的处理器，(默认返回参数： 项索引（index:int）)。
		*/
		this.selectHandler=null;
		/**@private */
		this._items=null;
		/**@private */
		this._selectedIndex=-1;
		/**@private */
		this._skin=null;
		/**@private */
		this._direction="horizontal";
		/**@private */
		this._space=0;
		/**@private */
		this._labels=null;
		/**@private */
		this._labelColors=null;
		/**@private */
		this._labelFont=null;
		/**@private */
		this._labelStrokeColor=null;
		/**@private */
		this._strokeColors=null;
		/**@private */
		this._labelStroke=NaN;
		/**@private */
		this._labelSize=0;
		/**@private */
		this._labelBold=false;
		/**@private */
		this._labelPadding=null;
		/**@private */
		this._labelAlign=null;
		/**@private */
		this._stateNum=0;
		/**@private */
		this._labelChanged=false;
		UIGroup.__super.call(this);
		this.skin=skin;
		this.labels=labels;
	}

	__class(UIGroup,'laya.ui.UIGroup',_super);
	var __proto=UIGroup.prototype;
	Laya.imps(__proto,{"laya.ui.IItem":true})
	/**@inheritDoc */
	__proto.preinitialize=function(){
		this.mouseEnabled=true;
	}

	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		laya.ui.Component.prototype.destroy.call(this,destroyChild);
		this._items && (this._items.length=0);
		this._items=null;
		this.selectHandler=null;
	}

	/**
	*添加一个项对象，返回此项对象的索引id。
	*
	*@param item 需要添加的项对象。
	*@param autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
	*@return
	*/
	__proto.addItem=function(item,autoLayOut){
		(autoLayOut===void 0)&& (autoLayOut=true);
		var display=item;
		var index=this._items.length;
		display.name="item"+index;
		this.addChild(display);
		this.initItems();
		if (autoLayOut && index > 0){
			var preItem=this._items [index-1];
			if (this._direction=="horizontal"){
				display.x=preItem.x+preItem.width+this._space;
				}else {
				display.y=preItem.y+preItem.height+this._space;
			}
			}else {
			if (autoLayOut){
				display.x=0;
				display.y=0;
			}
		}
		return index;
	}

	/**
	*删除一个项对象。
	*@param item 需要删除的项对象。
	*@param autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
	*/
	__proto.delItem=function(item,autoLayOut){
		(autoLayOut===void 0)&& (autoLayOut=true);
		var index=this._items.indexOf(item);
		if (index !=-1){
			var display=item;
			this.removeChild(display);
			for (var i=index+1,n=this._items.length;i < n;i++){
				var child=this._items [i];
				child.name="item"+(i-1);
				if (autoLayOut){
					if (this._direction=="horizontal"){
						child.x-=display.width+this._space;
						}else {
						child.y-=display.height+this._space;
					}
				}
			}
			this.initItems();
			if (this._selectedIndex >-1){
				var newIndex=0;
				newIndex=this._selectedIndex < this._items.length ? this._selectedIndex :(this._selectedIndex-1);
				this._selectedIndex=-1;
				this.selectedIndex=newIndex;
			}
		}
	}

	/**
	*初始化项对象们。
	*/
	__proto.initItems=function(){
		this._items || (this._items=[]);
		this._items.length=0;
		for (var i=0;i < 10000;i++){
			var item=this.getChildByName("item"+i);
			if (item==null)break ;
			this._items.push(item);
			item.selected=(i===this._selectedIndex);
			item.clickHandler=Handler.create(this,this.itemClick,[i],false);
		}
	}

	/**
	*@private
	*项对象的点击事件侦听处理函数。
	*@param index 项索引。
	*/
	__proto.itemClick=function(index){
		this.selectedIndex=index;
	}

	/**
	*@private
	*通过对象的索引设置项对象的 <code>selected</code> 属性值。
	*@param index 需要设置的项对象的索引。
	*@param selected 表示项对象的选中状态。
	*/
	__proto.setSelect=function(index,selected){
		if (this._items && index >-1 && index < this._items.length)this._items[index].selected=selected;
	}

	/**
	*@private
	*创建一个项显示对象。
	*@param skin 项对象的皮肤。
	*@param label 项对象标签。
	*/
	__proto.createItem=function(skin,label){
		return null;
	}

	/**
	*@private
	*更改项对象的属性值。
	*/
	__proto.changeLabels=function(){
		this._labelChanged=false;
		if (this._items){
			var left=0
			for (var i=0,n=this._items.length;i < n;i++){
				var btn=this._items [i];
				this._skin && (btn.skin=this._skin);
				this._labelColors && (btn.labelColors=this._labelColors);
				this._labelSize && (btn.labelSize=this._labelSize);
				this._labelStroke && (btn.labelStroke=this._labelStroke);
				this._labelStrokeColor && (btn.labelStrokeColor=this._labelStrokeColor);
				this._strokeColors && (btn.strokeColors=this._strokeColors);
				this._labelBold && (btn.labelBold=this._labelBold);
				this._labelPadding && (btn.labelPadding=this._labelPadding);
				this._labelAlign && (btn.labelAlign=this._labelAlign);
				this._stateNum && (btn.stateNum=this._stateNum);
				this._labelFont && (btn.labelFont=this._labelFont);
				if (this._direction==="horizontal"){
					btn.y=0;
					btn.x=left;
					left+=btn.width+this._space;
					}else {
					btn.x=0;
					btn.y=left;
					left+=btn.height+this._space;
				}
			}
		}
		this.changeSize();
	}

	/**@inheritDoc */
	__proto.commitMeasure=function(){
		this.runCallLater(this.changeLabels);
	}

	/**@private */
	__proto._setLabelChanged=function(){
		if (!this._labelChanged){
			this._labelChanged=true;
			this.callLater(this.changeLabels);
		}
	}

	/**
	*<p>描边颜色，以字符串表示。</p>
	*默认值为 "#000000"（黑色）;
	*@see laya.display.Text.strokeColor()
	*/
	__getset(0,__proto,'labelStrokeColor',function(){
		return this._labelStrokeColor;
		},function(value){
		if (this._labelStrokeColor !=value){
			this._labelStrokeColor=value;
			this._setLabelChanged();
		}
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示当前选择的项索引。默认值为-1。
	*/
	__getset(0,__proto,'selectedIndex',function(){
		return this._selectedIndex;
		},function(value){
		if (this._selectedIndex !=value){
			this.setSelect(this._selectedIndex,false);
			this._selectedIndex=value;
			this.setSelect(value,true);
			this.event(/*laya.events.Event.CHANGE*/"change");
			this.selectHandler && this.selectHandler.runWith(this._selectedIndex);
		}
	});

	/**
	*标签集合字符串。以逗号做分割，如"item0,item1,item2,item3,item4,item5"。
	*/
	__getset(0,__proto,'labels',function(){
		return this._labels;
		},function(value){
		if (this._labels !=value){
			this._labels=value;
			this.removeChildren();
			this._setLabelChanged();
			if (this._labels){
				var a=this._labels.split(",");
				for (var i=0,n=a.length;i < n;i++){
					var item=this.createItem(this._skin,a[i]);
					item.name="item"+i;
					this.addChild(item);
				}
			}
			this.initItems();
		}
	});

	/**
	*<p>表示各个状态下的描边颜色。</p>
	*@see laya.display.Text.strokeColor()
	*/
	__getset(0,__proto,'strokeColors',function(){
		return this._strokeColors;
		},function(value){
		if (this._strokeColors !=value){
			this._strokeColors=value;
			this._setLabelChanged();
		}
	});

	/**
	*@copy laya.ui.Button#labelColors()
	*/
	__getset(0,__proto,'labelColors',function(){
		return this._labelColors;
		},function(value){
		if (this._labelColors !=value){
			this._labelColors=value;
			this._setLabelChanged();
		}
	});

	/**
	*<p>描边宽度（以像素为单位）。</p>
	*默认值0，表示不描边。
	*@see laya.display.Text.stroke()
	*/
	__getset(0,__proto,'labelStroke',function(){
		return this._labelStroke;
		},function(value){
		if (this._labelStroke !=value){
			this._labelStroke=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示按钮文本标签的字体大小。
	*/
	__getset(0,__proto,'labelSize',function(){
		return this._labelSize;
		},function(value){
		if (this._labelSize !=value){
			this._labelSize=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示按钮的状态值，以数字表示，默认为3态。
	*@see laya.ui.Button#stateNum
	*/
	__getset(0,__proto,'stateNum',function(){
		return this._stateNum;
		},function(value){
		if (this._stateNum !=value){
			this._stateNum=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示按钮文本标签是否为粗体字。
	*/
	__getset(0,__proto,'labelBold',function(){
		return this._labelBold;
		},function(value){
		if (this._labelBold !=value){
			this._labelBold=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示按钮文本标签的字体名称，以字符串形式表示。
	*@see laya.display.Text.font()
	*/
	__getset(0,__proto,'labelFont',function(){
		return this._labelFont;
		},function(value){
		if (this._labelFont !=value){
			this._labelFont=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示按钮文本标签的边距。
	*<p><b>格式：</b>"上边距,右边距,下边距,左边距"。</p>
	*/
	__getset(0,__proto,'labelPadding',function(){
		return this._labelPadding;
		},function(value){
		if (this._labelPadding !=value){
			this._labelPadding=value;
			this._setLabelChanged();
		}
	});

	/**
	*布局方向。
	*<p>默认值为"horizontal"。</p>
	*<p><b>取值：</b>
	*<li>"horizontal"：表示水平布局。</li>
	*<li>"vertical"：表示垂直布局。</li>
	*</p>
	*/
	__getset(0,__proto,'direction',function(){
		return this._direction;
		},function(value){
		this._direction=value;
		this._setLabelChanged();
	});

	/**
	*项对象们之间的间隔（以像素为单位）。
	*/
	__getset(0,__proto,'space',function(){
		return this._space;
		},function(value){
		this._space=value;
		this._setLabelChanged();
	});

	/**
	*项对象们的存放数组。
	*/
	__getset(0,__proto,'items',function(){
		return this._items;
	});

	/**
	*获取或设置当前选择的项对象。
	*/
	__getset(0,__proto,'selection',function(){
		return this._selectedIndex >-1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] :null;
		},function(value){
		this.selectedIndex=this._items.indexOf(value);
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
		else if ((value instanceof Array))this.labels=(value).join(",");
		else Laya.superSet(Box,this,'dataSource',value);
	});

	return UIGroup;
})(Box)


/**
*<code>Radio</code> 控件使用户可在一组互相排斥的选择中做出一种选择。
*用户一次只能选择 <code>Radio</code> 组中的一个成员。选择未选中的组成员将取消选择该组中当前所选的 <code>Radio</code> 控件。
*@see laya.ui.RadioGroup
*/
//class laya.ui.Radio extends laya.ui.Button
var Radio=(function(_super){
	function Radio(skin,label){
		/**@private */
		this._value=null;
		(label===void 0)&& (label="");
		Radio.__super.call(this,skin,label);
	}

	__class(Radio,'laya.ui.Radio',_super);
	var __proto=Radio.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._value=null;
	}

	/**@inheritDoc */
	__proto.preinitialize=function(){
		laya.ui.Component.prototype.preinitialize.call(this);
		this.toggle=false;
		this._autoSize=false;
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		_super.prototype.initialize.call(this);
		this.createText();
		this._text.align="left";
		this._text.valign="top";
		this._text.width=0;
		this.on(/*laya.events.Event.CLICK*/"click",this,this.onClick);
	}

	/**
	*@private
	*对象的<code>Event.CLICK</code>事件侦听处理函数。
	*/
	__proto.onClick=function(e){
		this.selected=true;
	}

	/**
	*获取或设置 <code>Radio</code> 关联的可选用户定义值。
	*/
	__getset(0,__proto,'value',function(){
		return this._value !=null ? this._value :this.label;
		},function(obj){
		this._value=obj;
	});

	return Radio;
})(Button)


/**
*<code>Tree</code> 控件使用户可以查看排列为可扩展树的层次结构数据。
*
*@example
*package
*{
	*import laya.ui.Tree;
	*import laya.utils.Browser;
	*import laya.utils.Handler;
	*public class Tree_Example
	*{
		*public function Tree_Example()
		*{
			*Laya.init(640,800);
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder.png","resource/ui/clip_tree_arrow.png"],Handler.create(this,onLoadComplete));
			*}
		*private function onLoadComplete():void
		*{
			*var xmlString:String;//创建一个xml字符串，用于存储树结构数据。
			*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
			*var domParser:*=new Browser.window.DOMParser();//创建一个DOMParser实例domParser。
			*var xml:*=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
			*var tree:Tree=new Tree();//创建一个 Tree 类的实例对象 tree 。
			*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
			*tree.itemRender=Item;//设置 tree 的项渲染器。
			*tree.xml=xml;//设置 tree 的树结构数据。
			*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
			*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
			*tree.width=200;//设置 tree 的宽度。
			*tree.height=100;//设置 tree 的高度。
			*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
			*}
		*}
	*}
*import laya.ui.Box;
*import laya.ui.Clip;
*import laya.ui.Label;
*class Item extends Box
*{
	*public function Item()
	*{
		*this.name="render";
		*this.right=0;
		*this.left=0;
		*var selectBox:Clip=new Clip("resource/ui/clip_selectBox.png",1,2);
		*selectBox.name="selectBox";
		*selectBox.height=24;
		*selectBox.x=13;
		*selectBox.y=0;
		*selectBox.left=12;
		*addChild(selectBox);
		*var folder:Clip=new Clip("resource/ui/clip_tree_folder.png",1,3);
		*folder.name="folder";
		*folder.x=14;
		*folder.y=4;
		*addChild(folder);
		*var label:Label=new Label("treeItem");
		*label.name="label";
		*label.color="#ffff00";
		*label.width=150;
		*label.height=22;
		*label.x=33;
		*label.y=1;
		*label.left=33;
		*label.right=0;
		*addChild(label);
		*var arrow:Clip=new Clip("resource/ui/clip_tree_arrow.png",1,2);
		*arrow.name="arrow";
		*arrow.x=0;
		*arrow.y=5;
		*addChild(arrow);
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高、渲染模式
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder.png","resource/ui/clip_tree_arrow.png"];
*Laya.loader.load(res,new laya.utils.Handler(this,onLoadComplete));
*function onLoadComplete(){
	*var xmlString;//创建一个xml字符串，用于存储树结构数据。
	*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
	*var domParser=new laya.utils.Browser.window.DOMParser();//创建一个DOMParser实例domParser。
	*var xml=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
	*var tree=new laya.ui.Tree();//创建一个 Tree 类的实例对象 tree 。
	*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
	*tree.itemRender=mypackage.treeExample.Item;//设置 tree 的项渲染器。
	*tree.xml=xml;//设置 tree 的树结构数据。
	*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
	*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
	*tree.width=200;//设置 tree 的宽度。
	*tree.height=100;//设置 tree 的高度。
	*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
	*}
*(function (_super){
	*function Item(){
		*Item.__super.call(this);//初始化父类。
		*this.right=0;
		*this.left=0;
		*var selectBox=new laya.ui.Clip("resource/ui/clip_selectBox.png",1,2);
		*selectBox.name="selectBox";//设置 selectBox 的name 为“selectBox”时，将被识别为树结构的项的背景。2帧：悬停时背景、选中时背景。
		*selectBox.height=24;
		*selectBox.x=13;
		*selectBox.y=0;
		*selectBox.left=12;
		*this.addChild(selectBox);//需要使用this.访问父类的属性或方法。
		*var folder=new laya.ui.Clip("resource/ui/clip_tree_folder.png",1,3);
		*folder.name="folder";//设置 folder 的name 为“folder”时，将被识别为树结构的文件夹开启状态图表。2帧：折叠状态、打开状态。
		*folder.x=14;
		*folder.y=4;
		*this.addChild(folder);
		*var label=new laya.ui.Label("treeItem");
		*label.name="label";//设置 label 的name 为“label”时，此值将用于树结构数据赋值。
		*label.color="#ffff00";
		*label.width=150;
		*label.height=22;
		*label.x=33;
		*label.y=1;
		*label.left=33;
		*label.right=0;
		*this.addChild(label);
		*var arrow=new laya.ui.Clip("resource/ui/clip_tree_arrow.png",1,2);
		*arrow.name="arrow";//设置 arrow 的name 为“arrow”时，将被识别为树结构的文件夹开启状态图表。2帧：折叠状态、打开状态。
		*arrow.x=0;
		*arrow.y=5;
		*this.addChild(arrow);
		*};
	*Laya.class(Item,"mypackage.treeExample.Item",_super);//注册类 Item 。
	*})(laya.ui.Box);
*@example
*import Tree=laya.ui.Tree;
*import Browser=laya.utils.Browser;
*import Handler=laya.utils.Handler;
*class Tree_Example {
	*constructor(){
		*Laya.init(640,800);
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder * . * png","resource/ui/clip_tree_arrow.png"],Handler.create(this,this.onLoadComplete));
		*}
	*private onLoadComplete():void {
		*var xmlString:String;//创建一个xml字符串，用于存储树结构数据。
		*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc  * label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
		*var domParser:any=new Browser.window.DOMParser();//创建一个DOMParser实例domParser。
		*var xml:any=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
		*var tree:Tree=new Tree();//创建一个 Tree 类的实例对象 tree 。
		*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
		*tree.itemRender=Item;//设置 tree 的项渲染器。
		*tree.xml=xml;//设置 tree 的树结构数据。
		*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
		*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
		*tree.width=200;//设置 tree 的宽度。
		*tree.height=100;//设置 tree 的高度。
		*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
		*}
	*}
*import Box=laya.ui.Box;
*import Clip=laya.ui.Clip;
*import Label=laya.ui.Label;
*class Item extends Box {
	*constructor(){
		*super();
		*this.name="render";
		*this.right=0;
		*this.left=0;
		*var selectBox:Clip=new Clip("resource/ui/clip_selectBox.png",1,2);
		*selectBox.name="selectBox";
		*selectBox.height=24;
		*selectBox.x=13;
		*selectBox.y=0;
		*selectBox.left=12;
		*this.addChild(selectBox);
		*var folder:Clip=new Clip("resource/ui/clip_tree_folder.png",1,3);
		*folder.name="folder";
		*folder.x=14;
		*folder.y=4;
		*this.addChild(folder);
		*var label:Label=new Label("treeItem");
		*label.name="label";
		*label.color="#ffff00";
		*label.width=150;
		*label.height=22;
		*label.x=33;
		*label.y=1;
		*label.left=33;
		*label.right=0;
		*this.addChild(label);
		*var arrow:Clip=new Clip("resource/ui/clip_tree_arrow.png",1,2);
		*arrow.name="arrow";
		*arrow.x=0;
		*arrow.y=5;
		*this.addChild(arrow);
		*}
	*}
*/
//class laya.ui.Tree extends laya.ui.Box
var Tree=(function(_super){
	function Tree(){
		/**@private */
		this._list=null;
		/**@private */
		this._source=null;
		/**@private */
		this._renderHandler=null;
		/**@private */
		this._spaceLeft=10;
		/**@private */
		this._spaceBottom=0;
		/**@private */
		this._keepStatus=true;
		Tree.__super.call(this);
		this.width=this.height=200;
	}

	__class(Tree,'laya.ui.Tree',_super);
	var __proto=Tree.prototype;
	Laya.imps(__proto,{"laya.ui.IRender":true})
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		laya.ui.Component.prototype.destroy.call(this,destroyChild);
		this._list && this._list.destroy(destroyChild);
		this._list=null;
		this._source=null;
		this._renderHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._list=new List());
		this._list.renderHandler=Handler.create(this,this.renderItem,null,false);
		this._list.repeatX=1;
		this._list.on(/*laya.events.Event.CHANGE*/"change",this,this.onListChange);
	}

	/**
	*@private
	*此对象包含的<code>List</code>实例的<code>Event.CHANGE</code>事件侦听处理函数。
	*/
	__proto.onListChange=function(e){
		this.event(/*laya.events.Event.CHANGE*/"change");
	}

	/**
	*@private
	*获取数据源集合。
	*/
	__proto.getArray=function(){
		var arr=[];
		var item;
		/*for each*/for(var $each_item in this._source){
			item=this._source[$each_item];
			if (this.getParentOpenStatus(item)){
				item.x=this._spaceLeft *this.getDepth(item);
				arr.push(item);
			}
		}
		return arr;
	}

	/**
	*@private
	*获取项对象的深度。
	*/
	__proto.getDepth=function(item,num){
		(num===void 0)&& (num=0);
		if (item.nodeParent==null)return num;
		else return this.getDepth(item.nodeParent,num+1);
	}

	/**
	*@private
	*获取项对象的上一级的打开状态。
	*/
	__proto.getParentOpenStatus=function(item){
		var parent=item.nodeParent;
		if (parent==null){
			return true;
			}else {
			if (parent.isOpen){
				if (parent.nodeParent !=null)return this.getParentOpenStatus(parent);
				else return true;
				}else {
				return false;
			}
		}
	}

	/**
	*@private
	*渲染一个项对象。
	*@param cell 一个项对象。
	*@param index 项的索引。
	*/
	__proto.renderItem=function(cell,index){
		var item=cell.dataSource;
		if (item){
			cell.left=item.x;
			var arrow=cell.getChildByName("arrow");
			if (arrow){
				if (item.hasChild){
					arrow.visible=true;
					arrow.index=item.isOpen ? 1 :0;
					arrow.tag=index;
					arrow.off(/*laya.events.Event.CLICK*/"click",this,this.onArrowClick);
					arrow.on(/*laya.events.Event.CLICK*/"click",this,this.onArrowClick);
					}else {
					arrow.visible=false;
				}
			};
			var folder=cell.getChildByName("folder");
			if (folder){
				if (folder.clipY==2){
					folder.index=item.isDirectory ? 0 :1;
					}else {
					folder.index=item.isDirectory ? item.isOpen ? 1 :0 :2;
				}
			}
			this._renderHandler && this._renderHandler.runWith([cell,index]);
		}
	}

	/**
	*@private
	*/
	__proto.onArrowClick=function(e){
		var arrow=e.currentTarget;
		var index=arrow.tag;
		this._list.array[index].isOpen=!this._list.array[index].isOpen;
		this.event(/*laya.events.Event.OPEN*/"open");
		this._list.array=this.getArray();
	}

	/**
	*设置指定项索引的项对象的打开状态。
	*@param index 项索引。
	*@param isOpen 是否处于打开状态。
	*/
	__proto.setItemState=function(index,isOpen){
		if (!this._list.array[index])return;
		this._list.array[index].isOpen=isOpen;
		this._list.array=this.getArray();
	}

	/**
	*刷新项列表。
	*/
	__proto.fresh=function(){
		this._list.array=this.getArray();
		this.repaint();
	}

	/**
	*@private
	*解析并处理XML类型的数据源。
	*/
	__proto.parseXml=function(xml,source,nodeParent,isRoot){
		var obj;
		var list=xml.childNodes;
		var childCount=list.length;
		if (!isRoot){
			obj={};
			var list2=xml.attributes;
			var attrs;
			/*for each*/for(var $each_attrs in list2){
				attrs=list2[$each_attrs];
				var prop=attrs.nodeName;
				var value=attrs.nodeValue;
				obj[prop]=value=="true" ? true :value=="false" ? false :value;
			}
			obj.nodeParent=nodeParent;
			if (childCount > 0)obj.isDirectory=true;
			obj.hasChild=childCount > 0;
			source.push(obj);
		}
		for (var i=0;i < childCount;i++){
			var node=list[i];
			this.parseXml(node,source,obj,false);
		}
	}

	/**
	*@private
	*处理数据项的打开状态。
	*/
	__proto.parseOpenStatus=function(oldSource,newSource){
		for (var i=0,n=newSource.length;i < n;i++){
			var newItem=newSource[i];
			if (newItem.isDirectory){
				for (var j=0,m=oldSource.length;j < m;j++){
					var oldItem=oldSource[j];
					if (oldItem.isDirectory && this.isSameParent(oldItem,newItem)&& newItem.label==oldItem.label){
						newItem.isOpen=oldItem.isOpen;
						break ;
					}
				}
			}
		}
	}

	/**
	*@private
	*判断两个项对象在树结构中的父节点是否相同。
	*@param item1 项对象。
	*@param item2 项对象。
	*@return 如果父节点相同值为true，否则值为false。
	*/
	__proto.isSameParent=function(item1,item2){
		if (item1.nodeParent==null && item2.nodeParent==null)return true;
		else if (item1.nodeParent==null || item2.nodeParent==null)return false
		else {
			if (item1.nodeParent.label==item2.nodeParent.label)return this.isSameParent(item1.nodeParent,item2.nodeParent);
			else return false;
		}
	}

	/**
	*更新项列表，显示指定键名的数据项。
	*@param key 键名。
	*/
	__proto.filter=function(key){
		if (Boolean(key)){
			var result=[];
			this.getFilterSource(this._source,result,key);
			this._list.array=result;
			}else {
			this._list.array=this.getArray();
		}
	}

	/**
	*@private
	*获取数据源中指定键名的值。
	*/
	__proto.getFilterSource=function(array,result,key){
		key=key.toLocaleLowerCase();
		var item;
		/*for each*/for(var $each_item in array){
			item=array[$each_item];
			if (!item.isDirectory && String(item.label).toLowerCase().indexOf(key)>-1){
				item.x=0;
				result.push(item);
			}
			if (item.child && item.child.length > 0){
				this.getFilterSource(item.child,result,key);
			}
		}
	}

	/**
	*每一项之间的间隔距离（以像素为单位）。
	*/
	__getset(0,__proto,'spaceBottom',function(){
		return this._list.spaceY;
		},function(value){
		this._list.spaceY=value;
	});

	/**
	*数据源发生变化后，是否保持之前打开状态，默认为true。
	*<p><b>取值：</b>
	*<li>true：保持之前打开状态。</li>
	*<li>false：不保持之前打开状态。</li>
	*</p>
	*/
	__getset(0,__proto,'keepStatus',function(){
		return this._keepStatus;
		},function(value){
		this._keepStatus=value;
	});

	/**
	*此对象包含的<code>List</code>实例的单元格渲染器。
	*<p><b>取值：</b>
	*<ol>
	*<li>单元格类对象。</li>
	*<li> UI 的 JSON 描述。</li>
	*</ol></p>
	*/
	__getset(0,__proto,'itemRender',function(){
		return this._list.itemRender;
		},function(value){
		this._list.itemRender=value;
	});

	/**
	*列表数据源，只包含当前可视节点数据。
	*/
	__getset(0,__proto,'array',function(){
		return this._list.array;
		},function(value){
		if (this._keepStatus && this._list.array && value){
			this.parseOpenStatus(this._list.array,value);
		}
		this._source=value;
		this._list.array=this.getArray();
	});

	/**
	*单元格鼠标事件处理器。
	*<p>默认返回参数（e:Event,index:int）。</p>
	*/
	__getset(0,__proto,'mouseHandler',function(){
		return this._list.mouseHandler;
		},function(value){
		this._list.mouseHandler=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		Laya.superSet(Box,this,'dataSource',value);
	});

	/**
	*数据源，全部节点数据。
	*/
	__getset(0,__proto,'source',function(){
		return this._source;
	});

	/**滚动条*/
	__getset(0,__proto,'scrollBar',function(){
		return this._list.scrollBar;
	});

	/**
	*此对象包含的<code>List</code>实例对象。
	*/
	__getset(0,__proto,'list',function(){
		return this._list;
	});

	/**
	*滚动条皮肤。
	*/
	__getset(0,__proto,'scrollBarSkin',function(){
		return this._list.vScrollBarSkin;
		},function(value){
		this._list.vScrollBarSkin=value;
	});

	/**
	*<code>Tree</code> 实例的渲染处理器。
	*/
	__getset(0,__proto,'renderHandler',function(){
		return this._renderHandler;
		},function(value){
		this._renderHandler=value;
	});

	/**
	*表示当前选择的项索引。
	*/
	__getset(0,__proto,'selectedIndex',function(){
		return this._list.selectedIndex;
		},function(value){
		this._list.selectedIndex=value;
	});

	/**
	*左侧缩进距离（以像素为单位）。
	*/
	__getset(0,__proto,'spaceLeft',function(){
		return this._spaceLeft;
		},function(value){
		this._spaceLeft=value;
	});

	/**
	*当前选中的项对象的数据源。
	*/
	__getset(0,__proto,'selectedItem',function(){
		return this._list.selectedItem;
		},function(value){
		this._list.selectedItem=value;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Box,this,'width',value);
		this._list.width=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Box,this,'height',value);
		this._list.height=value;
	});

	/**
	*xml结构的数据源。
	*/
	__getset(0,__proto,'xml',null,function(value){
		var arr=[];
		this.parseXml(value.childNodes[0],arr,null,true);
		this.array=arr;
	});

	/**
	*表示选择的树节点项的<code>path</code>属性值。
	*/
	__getset(0,__proto,'selectedPath',function(){
		if (this._list.selectedItem){
			return this._list.selectedItem.path;
		}
		return null;
	});

	return Tree;
})(Box)


/**
*<code>ViewStack</code> 类用于视图堆栈类，用于视图的显示等设置处理。
*/
//class laya.ui.ViewStack extends laya.ui.Box
var ViewStack=(function(_super){
	function ViewStack(){
		/**@private */
		this._items=null;
		/**@private */
		this._selectedIndex=0;
		ViewStack.__super.call(this);
		this._setIndexHandler=Handler.create(this,this.setIndex,null,false);
	}

	__class(ViewStack,'laya.ui.ViewStack',_super);
	var __proto=ViewStack.prototype;
	Laya.imps(__proto,{"laya.ui.IItem":true})
	/**
	*批量设置视图对象。
	*@param views 视图对象数组。
	*/
	__proto.setItems=function(views){
		this.removeChildren();
		var index=0;
		for (var i=0,n=views.length;i < n;i++){
			var item=views[i];
			if (item){
				item.name="item"+index;
				this.addChild(item);
				index++;
			}
		}
		this.initItems();
	}

	/**
	*添加视图。
	*@internal 添加视图对象，并设置此视图对象的<code>name</code> 属性。
	*@param view 需要添加的视图对象。
	*/
	__proto.addItem=function(view){
		view.name="item"+this._items.length;
		this.addChild(view);
		this.initItems();
	}

	/**
	*初始化视图对象集合。
	*/
	__proto.initItems=function(){
		this._items=[];
		for (var i=0;i < 10000;i++){
			var item=this.getChildByName("item"+i);
			if (item==null){
				break ;
			}
			this._items.push(item);
			item.visible=(i==this._selectedIndex);
		}
	}

	/**
	*@private
	*通过对象的索引设置项对象的 <code>selected</code> 属性值。
	*@param index 需要设置的对象的索引。
	*@param selected 表示对象的选中状态。
	*/
	__proto.setSelect=function(index,selected){
		if (this._items && index >-1 && index < this._items.length){
			this._items[index].visible=selected;
		}
	}

	/**
	*@private
	*设置属性<code>selectedIndex</code>的值。
	*@param index 选中项索引值。
	*/
	__proto.setIndex=function(index){
		this.selectedIndex=index;
	}

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string')){
			this.selectedIndex=parseInt(value);
			}else {
			for (var prop in this._dataSource){
				if (this.hasOwnProperty(prop)){
					this[prop]=this._dataSource[prop];
				}
			}
		}
	});

	/**
	*表示当前视图索引。
	*/
	__getset(0,__proto,'selectedIndex',function(){
		return this._selectedIndex;
		},function(value){
		if (this._selectedIndex !=value){
			this.setSelect(this._selectedIndex,false);
			this._selectedIndex=value;
			this.setSelect(this._selectedIndex,true);
		}
	});

	/**
	*获取或设置当前选择的项对象。
	*/
	__getset(0,__proto,'selection',function(){
		return this._selectedIndex >-1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] :null;
		},function(value){
		this.selectedIndex=this._items.indexOf(value);
	});

	/**
	*视图集合数组。
	*/
	__getset(0,__proto,'items',function(){
		return this._items;
	});

	/**
	*索引设置处理器。
	*<p>默认回调参数：index:int</p>
	*/
	__getset(0,__proto,'setIndexHandler',function(){
		return this._setIndexHandler;
		},function(value){
		this._setIndexHandler=value;
	});

	return ViewStack;
})(Box)


/**
*
*使用 <code>VScrollBar</code> （垂直 <code>ScrollBar</code> ）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。
*
*@example <caption>以下示例代码，创建了一个 <code>VScrollBar</code> 实例。</caption>
*package
*{
	*import laya.ui.vScrollBar;
	*import laya.ui.VScrollBar;
	*import laya.utils.Handler;
	*public class VScrollBar_Example
	*{
		*private var vScrollBar:VScrollBar;
		*public function VScrollBar_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,onLoadComplete));
			*}
		*private function onLoadComplete():void
		*{
			*vScrollBar=new VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
			*vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
			*vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
			*vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
			*vScrollBar.changeHandler=new Handler(this,onChange);//设置 vScrollBar 的滚动变化处理器。
			*Laya.stage.addChild(vScrollBar);//将此 vScrollBar 对象添加到显示列表。
			*}
		*private function onChange(value:Number):void
		*{
			*trace("滚动条的位置： value="+value);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var vScrollBar;
*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"];
*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*vScrollBar=new laya.ui.VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
	*vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
	*vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
	*vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
	*vScrollBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 vScrollBar 的滚动变化处理器。
	*Laya.stage.addChild(vScrollBar);//将此 vScrollBar 对象添加到显示列表。
	*}
*function onChange(value){
	*console.log("滚动条的位置： value="+value);
	*}
*@example
*import VScrollBar=laya.ui.VScrollBar;
*import Handler=laya.utils.Handler;
*class VScrollBar_Example {
	*private vScrollBar:VScrollBar;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,this.onLoadComplete));
		*}
	*private onLoadComplete():void {
		*this.vScrollBar=new VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
		*this.vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
		*this.vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
		*this.vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
		*this.vScrollBar.changeHandler=new Handler(this,this.onChange);//设置 vScrollBar 的滚动变化处理器。
		*Laya.stage.addChild(this.vScrollBar);//将此 vScrollBar 对象添加到显示列表。
		*}
	*private onChange(value:number):void {
		*console.log("滚动条的位置： value="+value);
		*}
	*}
*/
//class laya.ui.VScrollBar extends laya.ui.ScrollBar
var VScrollBar=(function(_super){
	function VScrollBar(){
		VScrollBar.__super.call(this);;
	}

	__class(VScrollBar,'laya.ui.VScrollBar',_super);
	return VScrollBar;
})(ScrollBar)


/**
*<code>TextInput</code> 类用于创建显示对象以显示和输入文本。
*
*@example <caption>以下示例代码，创建了一个 <code>TextInput</code> 实例。</caption>
*package
*{
	*import laya.display.Stage;
	*import laya.ui.TextInput;
	*import laya.utils.Handler;
	*public class TextInput_Example
	*{
		*public function TextInput_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*var textInput:TextInput=new TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
			*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
			*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
			*textInput.color="#008fff";//设置 textInput 的文本颜色。
			*textInput.font="Arial";//设置 textInput 的文本字体。
			*textInput.bold=true;//设置 textInput 的文本显示为粗体。
			*textInput.fontSize=30;//设置 textInput 的字体大小。
			*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
			*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
			*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
			*textInput.width=300;//设置 textInput 的宽度。
			*textInput.height=200;//设置 textInput 的高度。
			*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load(["resource/ui/input.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*var textInput=new laya.ui.TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
	*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
	*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
	*textInput.color="#008fff";//设置 textInput 的文本颜色。
	*textInput.font="Arial";//设置 textInput 的文本字体。
	*textInput.bold=true;//设置 textInput 的文本显示为粗体。
	*textInput.fontSize=30;//设置 textInput 的字体大小。
	*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
	*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
	*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
	*textInput.width=300;//设置 textInput 的宽度。
	*textInput.height=200;//设置 textInput 的高度。
	*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
	*}
*@example
*import Stage=laya.display.Stage;
*import TextInput=laya.ui.TextInput;
*import Handler=laya.utils.Handler;
*class TextInput_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*var textInput:TextInput=new TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
		*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
		*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
		*textInput.color="#008fff";//设置 textInput 的文本颜色。
		*textInput.font="Arial";//设置 textInput 的文本字体。
		*textInput.bold=true;//设置 textInput 的文本显示为粗体。
		*textInput.fontSize=30;//设置 textInput 的字体大小。
		*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
		*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
		*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
		*textInput.width=300;//设置 textInput 的宽度。
		*textInput.height=200;//设置 textInput 的高度。
		*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
		*}
	*}
*/
//class laya.ui.TextInput extends laya.ui.Label
var TextInput=(function(_super){
	function TextInput(text){
		/**@private */
		this._bg=null;
		/**@private */
		this._skin=null;
		TextInput.__super.call(this);
		(text===void 0)&& (text="");
		this.text=text;
		this.skin=this.skin;
	}

	__class(TextInput,'laya.ui.TextInput',_super);
	var __proto=TextInput.prototype;
	/**@inheritDoc */
	__proto.preinitialize=function(){
		this.mouseEnabled=true;
	}

	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._bg && this._bg.destroy();
		this._bg=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._tf=new Input());
		this._tf.padding=Styles.inputLabelPadding;
		this._tf.on(/*laya.events.Event.INPUT*/"input",this,this._onInput);
		this._tf.on(/*laya.events.Event.ENTER*/"enter",this,this._onEnter);
		this._tf.on(/*laya.events.Event.BLUR*/"blur",this,this._onBlur);
		this._tf.on(/*laya.events.Event.FOCUS*/"focus",this,this._onFocus);
	}

	/**
	*@private
	*/
	__proto._onFocus=function(){
		this.event(/*laya.events.Event.FOCUS*/"focus",this);
	}

	/**
	*@private
	*/
	__proto._onBlur=function(){
		this.event(/*laya.events.Event.BLUR*/"blur",this);
	}

	/**
	*@private
	*/
	__proto._onInput=function(){
		this.event(/*laya.events.Event.INPUT*/"input",this);
	}

	/**
	*@private
	*/
	__proto._onEnter=function(){
		this.event(/*laya.events.Event.ENTER*/"enter",this);
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		this.width=128;
		this.height=22;
	}

	/**选中输入框内的文本。*/
	__proto.select=function(){
		(this._tf).select();
	}

	__proto.setSelection=function(startIndex,endIndex){
		(this._tf).setSelection(startIndex,endIndex);
	}

	/**
	*当前文本内容字符串。
	*@see laya.display.Text.text
	*/
	__getset(0,__proto,'text',_super.prototype._$get_text,function(value){
		if (this._tf.text !=value){
			value=value+"";
			this._tf.text=value;
			this.event(/*laya.events.Event.CHANGE*/"change");
		}
	});

	/**
	*表示此对象包含的文本背景 <code>AutoBitmap</code> 组件实例。
	*/
	__getset(0,__proto,'bg',function(){
		return this._bg;
		},function(value){
		this.graphics=this._bg=value;
	});

	/**
	*设置原生input输入框的y坐标偏移。
	*/
	__getset(0,__proto,'inputElementYAdjuster',function(){
		return (this._tf).inputElementYAdjuster;
		},function(value){
		(this._tf).inputElementYAdjuster=value;
	});

	/**
	*<p>指示当前是否是文本域。</p>
	*值为true表示当前是文本域，否则不是文本域。
	*/
	__getset(0,__proto,'multiline',function(){
		return (this._tf).multiline;
		},function(value){
		(this._tf).multiline=value;
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this._bg || (this.graphics=this._bg=new AutoBitmap());
			this._bg.source=Loader.getRes(this._skin);
			this._width && (this._bg.width=this._width);
			this._height && (this._bg.height=this._height);
		}
	});

	/**
	*<p>当前实例的背景图（ <code>AutoBitmap</code> ）实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this._bg && this._bg.sizeGrid ? this._bg.sizeGrid.join(","):null;
		},function(value){
		this._bg || (this.graphics=this._bg=new AutoBitmap());
		this._bg.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
	});

	/**
	*设置原生input输入框的x坐标偏移。
	*/
	__getset(0,__proto,'inputElementXAdjuster',function(){
		return (this._tf).inputElementXAdjuster;
		},function(value){
		(this._tf).inputElementXAdjuster=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Label,this,'width',value);
		this._bg && (this._bg.width=value);
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Label,this,'height',value);
		this._bg && (this._bg.height=value);
	});

	/**
	*设置可编辑状态。
	*/
	__getset(0,__proto,'editable',function(){
		return (this._tf).editable;
		},function(value){
		(this._tf).editable=value;
	});

	/**限制输入的字符。*/
	__getset(0,__proto,'restrict',function(){
		return (this._tf).restrict;
		},function(pattern){
		(this._tf).restrict=pattern;
	});

	/**
	*@copy laya.display.Input#prompt
	*/
	__getset(0,__proto,'prompt',function(){
		return (this._tf).prompt;
		},function(value){
		(this._tf).prompt=value;
	});

	/**
	*@copy laya.display.Input#promptColor
	*/
	__getset(0,__proto,'promptColor',function(){
		return (this._tf).promptColor;
		},function(value){
		(this._tf).promptColor=value;
	});

	/**
	*@copy laya.display.Input#maxChars
	*/
	__getset(0,__proto,'maxChars',function(){
		return (this._tf).maxChars;
		},function(value){
		(this._tf).maxChars=value;
	});

	/**
	*@copy laya.display.Input#focus
	*/
	__getset(0,__proto,'focus',function(){
		return (this._tf).focus;
		},function(value){
		(this._tf).focus=value;
	});

	/**
	*@copy laya.display.Input#type
	*/
	__getset(0,__proto,'type',function(){
		return (this._tf).type;
		},function(value){
		(this._tf).type=value;
	});

	/**
	*@copy laya.display.Input#asPassword
	*/
	__getset(0,__proto,'asPassword',function(){
		return (this._tf).asPassword;
		},function(value){
		(this._tf).asPassword=value;
	});

	return TextInput;
})(Label)


/**
*使用 <code>VSlider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
*<p> <code>VSlider</code> 控件采用垂直方向。滑块轨道从下往上扩展，而标签位于轨道的左右两侧。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>VSlider</code> 实例。</caption>
*package
*{
	*import laya.ui.HSlider;
	*import laya.ui.VSlider;
	*import laya.utils.Handler;
	*public class VSlider_Example
	*{
		*private var vSlider:VSlider;
		*public function VSlider_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*vSlider=new VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
			*vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
			*vSlider.min=0;//设置 vSlider 最低位置值。
			*vSlider.max=10;//设置 vSlider 最高位置值。
			*vSlider.value=2;//设置 vSlider 当前位置值。
			*vSlider.tick=1;//设置 vSlider 刻度值。
			*vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
			*vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
			*vSlider.changeHandler=new Handler(this,onChange);//设置 vSlider 位置变化处理器。
			*Laya.stage.addChild(vSlider);//把 vSlider 添加到显示列表。
			*}
		*private function onChange(value:Number):void
		*{
			*trace("滑块的位置： value="+value);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var vSlider;
*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*vSlider=new laya.ui.VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
	*vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
	*vSlider.min=0;//设置 vSlider 最低位置值。
	*vSlider.max=10;//设置 vSlider 最高位置值。
	*vSlider.value=2;//设置 vSlider 当前位置值。
	*vSlider.tick=1;//设置 vSlider 刻度值。
	*vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
	*vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
	*vSlider.changeHandler=new laya.utils.Handler(this,onChange);//设置 vSlider 位置变化处理器。
	*Laya.stage.addChild(vSlider);//把 vSlider 添加到显示列表。
	*}
*function onChange(value){
	*console.log("滑块的位置： value="+value);
	*}
*@example
*import HSlider=laya.ui.HSlider;
*import VSlider=laya.ui.VSlider;
*import Handler=laya.utils.Handler;
*class VSlider_Example {
	*private vSlider:VSlider;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*this.vSlider=new VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
		*this.vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
		*this.vSlider.min=0;//设置 vSlider 最低位置值。
		*this.vSlider.max=10;//设置 vSlider 最高位置值。
		*this.vSlider.value=2;//设置 vSlider 当前位置值。
		*this.vSlider.tick=1;//设置 vSlider 刻度值。
		*this.vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
		*this.vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
		*this.vSlider.changeHandler=new Handler(this,this.onChange);//设置 vSlider 位置变化处理器。
		*Laya.stage.addChild(this.vSlider);//把 vSlider 添加到显示列表。
		*}
	*private onChange(value:number):void {
		*console.log("滑块的位置： value="+value);
		*}
	*}
*@see laya.ui.Slider
*/
//class laya.ui.VSlider extends laya.ui.Slider
var VSlider=(function(_super){
	function VSlider(){
		VSlider.__super.call(this);;
	}

	__class(VSlider,'laya.ui.VSlider',_super);
	return VSlider;
})(Slider)


/**
*<code>Dialog</code> 组件是一个弹出对话框，实现对话框弹出，拖动，模式窗口功能。
*可以通过UIConfig设置弹出框背景透明度，模式窗口点击边缘是否关闭等
*通过设置zOrder属性，可以更改弹出的层次
*通过设置popupEffect和closeEffect可以设置弹出效果和关闭效果，如果不想有任何弹出关闭效果，可以设置前述属性为空
*
*@example <caption>以下示例代码，创建了一个 <code>Dialog</code> 实例。</caption>
*package
*{
	*import laya.ui.Dialog;
	*import laya.utils.Handler;
	*public class Dialog_Example
	*{
		*private var dialog:Dialog_Instance;
		*public function Dialog_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/btn_close.png",Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*dialog=new Dialog_Instance();//创建一个 Dialog_Instance 类的实例对象 dialog。
			*dialog.dragArea="0,0,150,50";//设置 dialog 的拖拽区域。
			*dialog.show();//显示 dialog。
			*dialog.closeHandler=new Handler(this,onClose);//设置 dialog 的关闭函数处理器。
			*}
		*private function onClose(name:String):void
		*{
			*if (name==Dialog.CLOSE)
			*{
				*trace("通过点击 name 为"+name+"的组件，关闭了dialog。");
				*}
			*}
		*}
	*}
*import laya.ui.Button;
*import laya.ui.Dialog;
*import laya.ui.Image;
*class Dialog_Instance extends Dialog
*{
	*function Dialog_Instance():void
	*{
		*var bg:Image=new Image("resource/ui/bg.png");
		*bg.sizeGrid="40,10,5,10";
		*bg.width=150;
		*bg.height=250;
		*addChild(bg);
		*var image:Image=new Image("resource/ui/image.png");
		*addChild(image);
		*var button:Button=new Button("resource/ui/btn_close.png");
		*button.name=Dialog.CLOSE;//设置button的name属性值。
		*button.x=0;
		*button.y=0;
		*addChild(button);
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高、渲染模式
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var dialog;
*Laya.loader.load("resource/ui/btn_close.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*(function (_super){//新建一个类Dialog_Instance继承自laya.ui.Dialog。
	*function Dialog_Instance(){
		*Dialog_Instance.__super.call(this);//初始化父类
		*var bg=new laya.ui.Image("resource/ui/bg.png");//新建一个 Image 类的实例 bg 。
		*bg.sizeGrid="10,40,10,5";//设置 bg 的网格信息。
		*bg.width=150;//设置 bg 的宽度。
		*bg.height=250;//设置 bg 的高度。
		*this.addChild(bg);//将 bg 添加到显示列表。
		*var image=new laya.ui.Image("resource/ui/image.png");//新建一个 Image 类的实例 image 。
		*this.addChild(image);//将 image 添加到显示列表。
		*var button=new laya.ui.Button("resource/ui/btn_close.png");//新建一个 Button 类的实例 bg 。
		*button.name=laya.ui.Dialog.CLOSE;//设置 button 的 name 属性值。
		*button.x=0;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
		*button.y=0;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
		*this.addChild(button);//将 button 添加到显示列表。
		*};
	*Laya.class(Dialog_Instance,"mypackage.dialogExample.Dialog_Instance",_super);//注册类Dialog_Instance。
	*})(laya.ui.Dialog);
*function loadComplete(){
	*console.log("资源加载完成！");
	*dialog=new mypackage.dialogExample.Dialog_Instance();//创建一个 Dialog_Instance 类的实例对象 dialog。
	*dialog.dragArea="0,0,150,50";//设置 dialog 的拖拽区域。
	*dialog.show();//显示 dialog。
	*dialog.closeHandler=new laya.utils.Handler(this,onClose);//设置 dialog 的关闭函数处理器。
	*}
*function onClose(name){
	*if (name==laya.ui.Dialog.CLOSE){
		*console.log("通过点击 name 为"+name+"的组件，关闭了dialog。");
		*}
	*}
*@example
*import Dialog=laya.ui.Dialog;
*import Handler=laya.utils.Handler;
*class Dialog_Example {
	*private dialog:Dialog_Instance;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/btn_close.png",Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*this.dialog=new Dialog_Instance();//创建一个 Dialog_Instance 类的实例对象 dialog。
		*this.dialog.dragArea="0,0,150,50";//设置 dialog 的拖拽区域。
		*this.dialog.show();//显示 dialog。
		*this.dialog.closeHandler=new Handler(this,this.onClose);//设置 dialog 的关闭函数处理器。
		*}
	*private onClose(name:string):void {
		*if (name==Dialog.CLOSE){
			*console.log("通过点击 name 为"+name+"的组件，关闭了dialog。");
			*}
		*}
	*}
*import Button=laya.ui.Button;
*class Dialog_Instance extends Dialog {
	*Dialog_Instance():void {
		*var bg:laya.ui.Image=new laya.ui.Image("resource/ui/bg.png");
		*bg.sizeGrid="40,10,5,10";
		*bg.width=150;
		*bg.height=250;
		*this.addChild(bg);
		*var image:laya.ui.Image=new laya.ui.Image("resource/ui/image.png");
		*this.addChild(image);
		*var button:Button=new Button("resource/ui/btn_close.png");
		*button.name=Dialog.CLOSE;//设置button的name属性值。
		*button.x=0;
		*button.y=0;
		*this.addChild(button);
		*}
	*}
*/
//class laya.ui.Dialog extends laya.ui.View
var Dialog=(function(_super){
	function Dialog(){
		/**
		*一个布尔值，指定对话框是否居中弹。
		*<p>如果值为true，则居中弹出，否则，则根据对象坐标显示，默认为true。</p>
		*/
		this.popupCenter=true;
		/**
		*对话框被关闭时会触发的回调函数处理器。
		*<p>回调函数参数为用户点击的按钮名字name:String。</p>
		*/
		this.closeHandler=null;
		/**
		*弹出对话框效果，可以设置一个效果代替默认的弹出效果，如果不想有任何效果，可以赋值为null
		*全局默认弹出效果可以通过manager.popupEffect修改
		*/
		this.popupEffect=null;
		/**
		*关闭对话框效果，可以设置一个效果代替默认的关闭效果，如果不想有任何效果，可以赋值为null
		*全局默认关闭效果可以通过manager.closeEffect修改
		*/
		this.closeEffect=null;
		/**组名称*/
		this.group=null;
		/**是否是模式窗口*/
		this.isModal=false;
		/**@private */
		this._dragArea=null;
		Dialog.__super.call(this);
	}

	__class(Dialog,'laya.ui.Dialog',_super);
	var __proto=Dialog.prototype;
	/**@inheritDoc */
	__proto.initialize=function(){
		this.popupEffect=Dialog.manager.popupEffectHandler;
		this.closeEffect=Dialog.manager.closeEffectHandler;
		this._dealDragArea();
		this.on(/*laya.events.Event.CLICK*/"click",this,this._onClick);
	}

	/**@private */
	__proto._dealDragArea=function(){
		var dragTarget=this.getChildByName("drag");
		if (dragTarget){
			this.dragArea=dragTarget.x+","+dragTarget.y+","+dragTarget.width+","+dragTarget.height;
			dragTarget.removeSelf();
		}
	}

	/**
	*@private (protected)
	*对象的 <code>Event.CLICK</code> 点击事件侦听处理函数。
	*/
	__proto._onClick=function(e){
		var btn=e.target;
		if (btn){
			switch (btn.name){
				case "close":
				case "cancel":
				case "sure":
				case "no":
				case "ok":
				case "yes":
					this.close(btn.name);
					break ;
				}
		}
	}

	/**
	*显示对话框（以非模式窗口方式显示）。
	*@param closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。
	*@param showEffect 是否显示弹出效果
	*/
	__proto.show=function(closeOther,showEffect){
		(closeOther===void 0)&& (closeOther=false);
		(showEffect===void 0)&& (showEffect=true);
		this._open(false,closeOther,showEffect);
	}

	/**
	*显示对话框（以模式窗口方式显示）。
	*@param closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。
	*@param showEffect 是否显示弹出效果
	*/
	__proto.popup=function(closeOther,showEffect){
		(closeOther===void 0)&& (closeOther=false);
		(showEffect===void 0)&& (showEffect=true);
		this._open(true,closeOther,showEffect);
	}

	/**@private */
	__proto._open=function(modal,closeOther,showEffect){
		Dialog.manager.lock(false);
		this.isModal=modal;
		Dialog.manager.open(this,closeOther,showEffect);
	}

	/**打开完成后，调用此方法（如果有弹出动画，则在动画完成后执行）*/
	__proto.onOpened=function(){}
	/**
	*关闭对话框。
	*@param type 如果是点击默认关闭按钮触发，则传入关闭按钮的名字(name)，否则为null。
	*@param showEffect 是否显示关闭效果
	*/
	__proto.close=function(type,showEffect){
		(showEffect===void 0)&& (showEffect=true);
		Dialog.manager.close(this,type,showEffect);
	}

	/**关闭完成后，调用此方法（如果有关闭动画，则在动画完成后执行）
	*@param type 如果是点击默认关闭按钮触发，则传入关闭按钮的名字(name)，否则为null。
	*/
	__proto.onClosed=function(type){}
	/**@private */
	__proto._onMouseDown=function(e){
		var point=this.getMousePoint();
		if (this._dragArea.contains(point.x,point.y))this.startDrag();
		else this.stopDrag();
	}

	/**
	*用来指定对话框的拖拽区域。默认值为"0,0,0,0"。
	*<p><b>格式：</b>构成一个矩形所需的 x,y,width,heith 值，用逗号连接为字符串。
	*例如："0,0,100,200"。
	*</p>
	*
	*@see #includeExamplesSummary 请参考示例
	*/
	__getset(0,__proto,'dragArea',function(){
		if (this._dragArea)return this._dragArea.toString();
		return null;
		},function(value){
		if (value){
			var a=UIUtils.fillArray([0,0,0,0],value,Number);
			this._dragArea=new Rectangle(a[0],a[1],a[2],a[3]);
			this.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onMouseDown);
			}else {
			this._dragArea=null;
			this.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onMouseDown);
		}
	});

	/**
	*弹出框的显示状态；如果弹框处于显示中，则为true，否则为false;
	*/
	__getset(0,__proto,'isPopup',function(){
		return this.parent !=null;
	});

	__getset(0,__proto,'zOrder',_super.prototype._$get_zOrder,function(value){
		Laya.superSet(View,this,'zOrder',value);
		Dialog.manager._checkMask();
	});

	/**对话框管理容器，所有的对话框都在该容器内，并且受管理器管，可以自定义自己的管理器，来更改窗口管理的流程。
	*任意对话框打开和关闭，都会触发管理类的open和close事件*/
	__getset(1,Dialog,'manager',function(){
		return Dialog._manager=Dialog._manager|| new DialogManager();
		},function(value){
		Dialog._manager=value;
	});

	Dialog.setLockView=function(view){
		Dialog.manager.setLockView(view);
	}

	Dialog.lock=function(value){
		Dialog.manager.lock(value);
	}

	Dialog.closeAll=function(){
		Dialog.manager.closeAll();
	}

	Dialog.getDialogsByGroup=function(group){
		return Dialog.manager.getDialogsByGroup(group);
	}

	Dialog.closeByGroup=function(group){
		return Dialog.manager.closeByGroup(group);
	}

	Dialog.CLOSE="close";
	Dialog.CANCEL="cancel";
	Dialog.SURE="sure";
	Dialog.NO="no";
	Dialog.OK="ok";
	Dialog.YES="yes";
	Dialog._manager=null;
	return Dialog;
})(View)


/**
*<code>HBox</code> 是一个水平布局容器类。
*/
//class laya.ui.HBox extends laya.ui.LayoutBox
var HBox=(function(_super){
	function HBox(){
		HBox.__super.call(this);;
	}

	__class(HBox,'laya.ui.HBox',_super);
	var __proto=HBox.prototype;
	/**@inheritDoc */
	__proto.sortItem=function(items){
		if (items)items.sort(function(a,b){return a.x-b.x;});
	}

	/**@inheritDoc */
	__proto.changeItems=function(){
		this._itemChanged=false;
		var items=[];
		var maxHeight=0;
		for (var i=0,n=this.numChildren;i < n;i++){
			var item=this.getChildAt(i);
			if (item&&item.layoutEnabled){
				items.push(item);
				maxHeight=this._height?this._height:Math.max(maxHeight,item.height *item.scaleY);
			}
		}
		this.sortItem(items);
		var left=0;
		for (i=0,n=items.length;i < n;i++){
			item=items[i];
			item.x=left;
			left+=item.width *item.scaleX+this._space;
			if (this._align=="top"){
				item.y=0;
				}else if (this._align=="middle"){
				item.y=(maxHeight-item.height *item.scaleY)*0.5;
				}else if (this._align=="bottom"){
				item.y=maxHeight-item.height *item.scaleY;
			}
		}
		this.changeSize();
	}

	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		if (this._height !=value){
			Laya.superSet(LayoutBox,this,'height',value);
			this.callLater(this.changeItems);
		}
	});

	HBox.NONE="none";
	HBox.TOP="top";
	HBox.MIDDLE="middle";
	HBox.BOTTOM="bottom";
	return HBox;
})(LayoutBox)


/**
*<code>VBox</code> 是一个垂直布局容器类。
*/
//class laya.ui.VBox extends laya.ui.LayoutBox
var VBox=(function(_super){
	function VBox(){
		VBox.__super.call(this);;
	}

	__class(VBox,'laya.ui.VBox',_super);
	var __proto=VBox.prototype;
	/**@inheritDoc */
	__proto.changeItems=function(){
		this._itemChanged=false;
		var items=[];
		var maxWidth=0;
		for (var i=0,n=this.numChildren;i < n;i++){
			var item=this.getChildAt(i);
			if (item&&item.layoutEnabled){
				items.push(item);
				maxWidth=this._width?this._width:Math.max(maxWidth,item.width *item.scaleX);
			}
		}
		this.sortItem(items);
		var top=0;
		for (i=0,n=items.length;i < n;i++){
			item=items[i];
			item.y=top;
			top+=item.height *item.scaleY+this._space;
			if (this._align=="left"){
				item.x=0;
				}else if (this._align=="center"){
				item.x=(maxWidth-item.width *item.scaleX)*0.5;
				}else if (this._align=="right"){
				item.x=maxWidth-item.width *item.scaleX;
			}
		}
		this.changeSize();
	}

	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		if (this._width !=value){
			Laya.superSet(LayoutBox,this,'width',value);
			this.callLater(this.changeItems);
		}
	});

	VBox.NONE="none";
	VBox.LEFT="left";
	VBox.CENTER="center";
	VBox.RIGHT="right";
	return VBox;
})(LayoutBox)


/**
*<code>RadioGroup</code> 控件定义一组 <code>Radio</code> 控件，这些控件相互排斥；
*因此，用户每次只能选择一个 <code>Radio</code> 控件。
*
*@example <caption>以下示例代码，创建了一个 <code>RadioGroup</code> 实例。</caption>
*package
*{
	*import laya.ui.Radio;
	*import laya.ui.RadioGroup;
	*import laya.utils.Handler;
	*public class RadioGroup_Example
	*{
		*public function RadioGroup_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/radio.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*var radioGroup:RadioGroup=new RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
			*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
			*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
			*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
			*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
			*radioGroup.selectHandler=new Handler(this,onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
			*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
			*}
		*private function onSelect(index:int):void
		*{
			*trace("当前选择的单选按钮索引: index= ",index);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高、渲染模式
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load(["resource/ui/radio.png"],laya.utils.Handler.create(this,onLoadComplete));
*function onLoadComplete(){
	*var radioGroup=new laya.ui.RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
	*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
	*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
	*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
	*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
	*radioGroup.selectHandler=new laya.utils.Handler(this,onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
	*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
	*}
*function onSelect(index){
	*console.log("当前选择的单选按钮索引: index= ",index);
	*}
*@example
*import Radio=laya.ui.Radio;
*import RadioGroup=laya.ui.RadioGroup;
*import Handler=laya.utils.Handler;
*class RadioGroup_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/radio.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*var radioGroup:RadioGroup=new RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
		*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
		*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
		*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
		*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
		*radioGroup.selectHandler=new Handler(this,this.onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
		*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
		*}
	*private onSelect(index:number):void {
		*console.log("当前选择的单选按钮索引: index= ",index);
		*}
	*}
*/
//class laya.ui.RadioGroup extends laya.ui.UIGroup
var RadioGroup=(function(_super){
	function RadioGroup(){
		RadioGroup.__super.call(this);;
	}

	__class(RadioGroup,'laya.ui.RadioGroup',_super);
	var __proto=RadioGroup.prototype;
	/**@inheritDoc */
	__proto.createItem=function(skin,label){
		return new Radio(skin,label);
	}

	return RadioGroup;
})(UIGroup)


/**
*<code>Tab</code> 组件用来定义选项卡按钮组。 *
*@internal <p>属性：<code>selectedIndex</code> 的默认值为-1。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>Tab</code> 实例。</caption>
*package
*{
	*import laya.ui.Tab;
	*import laya.utils.Handler;
	*public class Tab_Example
	*{
		*public function Tab_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/tab.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*var tab:Tab=new Tab();//创建一个 Tab 类的实例对象 tab 。
			*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
			*tab.labels="item0,item1,item2";//设置 tab 的标签集。
			*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
			*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
			*tab.selectHandler=new Handler(this,onSelect);//设置 tab 的选择项发生改变时执行的处理器。
			*Laya.stage.addChild(tab);//将 tab 添到显示列表。
			*}
		*private function onSelect(index:int):void
		*{
			*trace("当前选择的表情页索引: index= ",index);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load(["resource/ui/tab.png"],laya.utils.Handler.create(this,onLoadComplete));
*function onLoadComplete(){
	*var tab=new laya.ui.Tab();//创建一个 Tab 类的实例对象 tab 。
	*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
	*tab.labels="item0,item1,item2";//设置 tab 的标签集。
	*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
	*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
	*tab.selectHandler=new laya.utils.Handler(this,onSelect);//设置 tab 的选择项发生改变时执行的处理器。
	*Laya.stage.addChild(tab);//将 tab 添到显示列表。
	*}
*function onSelect(index){
	*console.log("当前选择的标签页索引: index= ",index);
	*}
*@example
*import Tab=laya.ui.Tab;
*import Handler=laya.utils.Handler;
*class Tab_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/tab.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*var tab:Tab=new Tab();//创建一个 Tab 类的实例对象 tab 。
		*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
		*tab.labels="item0,item1,item2";//设置 tab 的标签集。
		*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
		*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
		*tab.selectHandler=new Handler(this,this.onSelect);//设置 tab 的选择项发生改变时执行的处理器。
		*Laya.stage.addChild(tab);//将 tab 添到显示列表。
		*}
	*private onSelect(index:number):void {
		*console.log("当前选择的表情页索引: index= ",index);
		*}
	*}
*/
//class laya.ui.Tab extends laya.ui.UIGroup
var Tab=(function(_super){
	function Tab(){
		Tab.__super.call(this);;
	}

	__class(Tab,'laya.ui.Tab',_super);
	var __proto=Tab.prototype;
	/**
	*@private
	*@inheritDoc
	*/
	__proto.createItem=function(skin,label){
		return new Button(skin,label);
	}

	return Tab;
})(UIGroup)


/**
*<code>TextArea</code> 类用于创建显示对象以显示和输入文本。
*@example <caption>以下示例代码，创建了一个 <code>TextArea</code> 实例。</caption>
*package
*{
	*import laya.ui.TextArea;
	*import laya.utils.Handler;
	*public class TextArea_Example
	*{
		*public function TextArea_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*var textArea:TextArea=new TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
			*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
			*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
			*textArea.color="#008fff";//设置 textArea 的文本颜色。
			*textArea.font="Arial";//设置 textArea 的字体。
			*textArea.bold=true;//设置 textArea 的文本显示为粗体。
			*textArea.fontSize=20;//设置 textArea 的文本字体大小。
			*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
			*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
			*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
			*textArea.width=300;//设置 textArea 的宽度。
			*textArea.height=200;//设置 textArea 的高度。
			*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高、渲染模式
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load(["resource/ui/input.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*var textArea=new laya.ui.TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
	*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
	*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
	*textArea.color="#008fff";//设置 textArea 的文本颜色。
	*textArea.font="Arial";//设置 textArea 的字体。
	*textArea.bold=true;//设置 textArea 的文本显示为粗体。
	*textArea.fontSize=20;//设置 textArea 的文本字体大小。
	*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
	*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
	*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
	*textArea.width=300;//设置 textArea 的宽度。
	*textArea.height=200;//设置 textArea 的高度。
	*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
	*}
*@example
*import TextArea=laya.ui.TextArea;
*import Handler=laya.utils.Handler;
*class TextArea_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*var textArea:TextArea=new TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
		*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
		*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
		*textArea.color="#008fff";//设置 textArea 的文本颜色。
		*textArea.font="Arial";//设置 textArea 的字体。
		*textArea.bold=true;//设置 textArea 的文本显示为粗体。
		*textArea.fontSize=20;//设置 textArea 的文本字体大小。
		*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
		*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
		*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
		*textArea.width=300;//设置 textArea 的宽度。
		*textArea.height=200;//设置 textArea 的高度。
		*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
		*}
	*}
*/
//class laya.ui.TextArea extends laya.ui.TextInput
var TextArea=(function(_super){
	function TextArea(text){
		/**@private */
		this._vScrollBar=null;
		/**@private */
		this._hScrollBar=null;
		(text===void 0)&& (text="");
		TextArea.__super.call(this,text);
	}

	__class(TextArea,'laya.ui.TextArea',_super);
	var __proto=TextArea.prototype;
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._vScrollBar && this._vScrollBar.destroy();
		this._hScrollBar && this._hScrollBar.destroy();
		this._vScrollBar=null;
		this._hScrollBar=null;
	}

	__proto.initialize=function(){
		this.width=180;
		this.height=150;
		this._tf.wordWrap=true;
		this.multiline=true;
	}

	__proto.onVBarChanged=function(e){
		if (this._tf.scrollY !=this._vScrollBar.value){
			this._tf.scrollY=this._vScrollBar.value;
		}
	}

	__proto.onHBarChanged=function(e){
		if (this._tf.scrollX !=this._hScrollBar.value){
			this._tf.scrollX=this._hScrollBar.value;
		}
	}

	__proto.changeScroll=function(){
		var vShow=this._vScrollBar && this._tf.maxScrollY > 0;
		var hShow=this._hScrollBar && this._tf.maxScrollX > 0;
		var showWidth=vShow ? this._width-this._vScrollBar.width :this._width;
		var showHeight=hShow ? this._height-this._hScrollBar.height :this._height;
		var padding=this._tf.padding || Styles.labelPadding;
		this._tf.width=showWidth;
		this._tf.height=showHeight;
		if (this._vScrollBar){
			this._vScrollBar.x=this._width-this._vScrollBar.width-padding[2];
			this._vScrollBar.y=padding[1];
			this._vScrollBar.height=this._height-(hShow ? this._hScrollBar.height :0)-padding[1]-padding[3];
			this._vScrollBar.scrollSize=1;
			this._vScrollBar.thumbPercent=showHeight / Math.max(this._tf.textHeight,showHeight);
			this._vScrollBar.setScroll(1,this._tf.maxScrollY,this._tf.scrollY);
			this._vScrollBar.visible=vShow;
		}
		if (this._hScrollBar){
			this._hScrollBar.x=padding[0];
			this._hScrollBar.y=this._height-this._hScrollBar.height-padding[3];
			this._hScrollBar.width=this._width-(vShow ? this._vScrollBar.width :0)-padding[0]-padding[2];
			this._hScrollBar.scrollSize=Math.max(showWidth *0.033,1);
			this._hScrollBar.thumbPercent=showWidth / Math.max(this._tf.textWidth,showWidth);
			this._hScrollBar.setScroll(0,this.maxScrollX,this.scrollX);
			this._hScrollBar.visible=hShow;
		}
	}

	/**滚动到某个位置*/
	__proto.scrollTo=function(y){
		this.commitMeasure();
		this._tf.scrollY=y;
	}

	/**垂直滚动值*/
	__getset(0,__proto,'scrollY',function(){
		return this._tf.scrollY;
	});

	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(TextInput,this,'width',value);
		this.callLater(this.changeScroll);
	});

	/**水平滚动条实体*/
	__getset(0,__proto,'hScrollBar',function(){
		return this._hScrollBar;
	});

	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(TextInput,this,'height',value);
		this.callLater(this.changeScroll);
	});

	/**水平滚动最大值*/
	__getset(0,__proto,'maxScrollX',function(){
		return this._tf.maxScrollX;
	});

	/**垂直滚动条皮肤*/
	__getset(0,__proto,'vScrollBarSkin',function(){
		return this._vScrollBar ? this._vScrollBar.skin :null;
		},function(value){
		if (this._vScrollBar==null){
			this.addChild(this._vScrollBar=new VScrollBar());
			this._vScrollBar.on(/*laya.events.Event.CHANGE*/"change",this,this.onVBarChanged);
			this._vScrollBar.target=this._tf;
			this.callLater(this.changeScroll);
		}
		this._vScrollBar.skin=value;
	});

	/**水平滚动条皮肤*/
	__getset(0,__proto,'hScrollBarSkin',function(){
		return this._hScrollBar ? this._hScrollBar.skin :null;
		},function(value){
		if (this._hScrollBar==null){
			this.addChild(this._hScrollBar=new HScrollBar());
			this._hScrollBar.on(/*laya.events.Event.CHANGE*/"change",this,this.onHBarChanged);
			this._hScrollBar.mouseWheelEnable=false;
			this._hScrollBar.target=this._tf;
			this.callLater(this.changeScroll);
		}
		this._hScrollBar.skin=value;
	});

	/**垂直滚动条实体*/
	__getset(0,__proto,'vScrollBar',function(){
		return this._vScrollBar;
	});

	/**垂直滚动最大值*/
	__getset(0,__proto,'maxScrollY',function(){
		return this._tf.maxScrollY;
	});

	/**水平滚动值*/
	__getset(0,__proto,'scrollX',function(){
		return this._tf.scrollX;
	});

	return TextArea;
})(TextInput)


/**
*异步Dialog的生命周期:show或者popup > onCreate(如果没有创建过)> onOpen > onClose > onDestroy(如果销毁)
*onCreate在页面未创建时执行一次，再次打开页面不会再执行，适合写一些只执行一次的逻辑，比如资源加载，节点事件监听
*onOpen在页面每次打开都会执行，适合做一些每次都需要处理的事情，比如消息请求，根据数据初始化页面
*onClose在每次关闭的时候调用，适合关闭时停止动画，网络消息监听等逻辑
*onDestroy在页面被销毁的时候调用，适合置空引用对象
*/
//class laya.ui.AsynDialog extends laya.ui.Dialog
var AsynDialog=(function(_super){
	function AsynDialog(){
		/**@private */
		this._uiView=null;
		/**打开时是否关闭其他页面*/
		this.isCloseOther=false;
		AsynDialog.__super.call(this);
	}

	__class(AsynDialog,'laya.ui.AsynDialog',_super);
	var __proto=AsynDialog.prototype;
	/**@private */
	__proto.createView=function(uiView){
		this._uiView=uiView;
	}

	__proto._open=function(modal,closeOther,showEffect){
		this.isModal=modal;
		this.isCloseOther=closeOther;
		Dialog.manager.lock(true);
		if (this._uiView)this.onCreated();
		else this.onOpen();
	}

	/**
	*在页面未创建时执行一次，再次打开页面不会再执行，适合写一些只执行一次的逻辑，比如资源加载，节点事件监听
	*/
	__proto.onCreated=function(){
		this.createUI();
		this.onOpen();
	}

	/**根据节点数据创建UI*/
	__proto.createUI=function(){
		laya.ui.View.prototype.createView.call(this,this._uiView);
		this._uiView=null;
		this._dealDragArea();
	}

	/**
	*在页面每次打开都会执行，适合做一些每次都需要处理的事情，比如消息请求，根据数据初始化页面
	*/
	__proto.onOpen=function(){
		Dialog.manager.open(this,this.isCloseOther);
		Dialog.manager.lock(false);
	}

	__proto.close=function(type,showEffect){
		(showEffect===void 0)&& (showEffect=true);
		Dialog.manager.close(this);
		this.onClose();
	}

	/**
	*在每次关闭的时候调用，适合关闭时停止动画，网络消息监听等逻辑
	*/
	__proto.onClose=function(){}
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		laya.ui.View.prototype.destroy.call(this,destroyChild);
		this._uiView=null;
		this.onDestroy();
	}

	/**
	*在页面被销毁的时候调用，适合置空引用对象
	*/
	__proto.onDestroy=function(){}
	return AsynDialog;
})(Dialog)


	Laya.__init([View]);
})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}
/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';function l(d){throw d;}var v=void 0,x=!0,aa=this;function D(d,a){var c=d.split("."),e=aa;!(c[0]in e)&&e.execScript&&e.execScript("var "+c[0]);for(var b;c.length&&(b=c.shift());)!c.length&&a!==v?e[b]=a:e=e[b]?e[b]:e[b]={}};var F="undefined"!==typeof Uint8Array&&"undefined"!==typeof Uint16Array&&"undefined"!==typeof Uint32Array&&"undefined"!==typeof DataView;function H(d,a){this.index="number"===typeof a?a:0;this.i=0;this.buffer=d instanceof(F?Uint8Array:Array)?d:new (F?Uint8Array:Array)(32768);2*this.buffer.length<=this.index&&l(Error("invalid index"));this.buffer.length<=this.index&&this.f()}H.prototype.f=function(){var d=this.buffer,a,c=d.length,e=new (F?Uint8Array:Array)(c<<1);if(F)e.set(d);else for(a=0;a<c;++a)e[a]=d[a];return this.buffer=e};
H.prototype.d=function(d,a,c){var e=this.buffer,b=this.index,f=this.i,g=e[b],h;c&&1<a&&(d=8<a?(N[d&255]<<24|N[d>>>8&255]<<16|N[d>>>16&255]<<8|N[d>>>24&255])>>32-a:N[d]>>8-a);if(8>a+f)g=g<<a|d,f+=a;else for(h=0;h<a;++h)g=g<<1|d>>a-h-1&1,8===++f&&(f=0,e[b++]=N[g],g=0,b===e.length&&(e=this.f()));e[b]=g;this.buffer=e;this.i=f;this.index=b};H.prototype.finish=function(){var d=this.buffer,a=this.index,c;0<this.i&&(d[a]<<=8-this.i,d[a]=N[d[a]],a++);F?c=d.subarray(0,a):(d.length=a,c=d);return c};
var fa=new (F?Uint8Array:Array)(256),O;for(O=0;256>O;++O){for(var P=O,Q=P,ga=7,P=P>>>1;P;P>>>=1)Q<<=1,Q|=P&1,--ga;fa[O]=(Q<<ga&255)>>>0}var N=fa;function ha(d){this.buffer=new (F?Uint16Array:Array)(2*d);this.length=0}ha.prototype.getParent=function(d){return 2*((d-2)/4|0)};ha.prototype.push=function(d,a){var c,e,b=this.buffer,f;c=this.length;b[this.length++]=a;for(b[this.length++]=d;0<c;)if(e=this.getParent(c),b[c]>b[e])f=b[c],b[c]=b[e],b[e]=f,f=b[c+1],b[c+1]=b[e+1],b[e+1]=f,c=e;else break;return this.length};
ha.prototype.pop=function(){var d,a,c=this.buffer,e,b,f;a=c[0];d=c[1];this.length-=2;c[0]=c[this.length];c[1]=c[this.length+1];for(f=0;;){b=2*f+2;if(b>=this.length)break;b+2<this.length&&c[b+2]>c[b]&&(b+=2);if(c[b]>c[f])e=c[f],c[f]=c[b],c[b]=e,e=c[f+1],c[f+1]=c[b+1],c[b+1]=e;else break;f=b}return{index:d,value:a,length:this.length}};function R(d){var a=d.length,c=0,e=Number.POSITIVE_INFINITY,b,f,g,h,k,n,q,r,p,m;for(r=0;r<a;++r)d[r]>c&&(c=d[r]),d[r]<e&&(e=d[r]);b=1<<c;f=new (F?Uint32Array:Array)(b);g=1;h=0;for(k=2;g<=c;){for(r=0;r<a;++r)if(d[r]===g){n=0;q=h;for(p=0;p<g;++p)n=n<<1|q&1,q>>=1;m=g<<16|r;for(p=n;p<b;p+=k)f[p]=m;++h}++g;h<<=1;k<<=1}return[f,c,e]};function ia(d,a){this.h=ma;this.w=0;this.input=F&&d instanceof Array?new Uint8Array(d):d;this.b=0;a&&(a.lazy&&(this.w=a.lazy),"number"===typeof a.compressionType&&(this.h=a.compressionType),a.outputBuffer&&(this.a=F&&a.outputBuffer instanceof Array?new Uint8Array(a.outputBuffer):a.outputBuffer),"number"===typeof a.outputIndex&&(this.b=a.outputIndex));this.a||(this.a=new (F?Uint8Array:Array)(32768))}var ma=2,na={NONE:0,r:1,k:ma,O:3},oa=[],S;
for(S=0;288>S;S++)switch(x){case 143>=S:oa.push([S+48,8]);break;case 255>=S:oa.push([S-144+400,9]);break;case 279>=S:oa.push([S-256+0,7]);break;case 287>=S:oa.push([S-280+192,8]);break;default:l("invalid literal: "+S)}
ia.prototype.j=function(){var d,a,c,e,b=this.input;switch(this.h){case 0:c=0;for(e=b.length;c<e;){a=F?b.subarray(c,c+65535):b.slice(c,c+65535);c+=a.length;var f=a,g=c===e,h=v,k=v,n=v,q=v,r=v,p=this.a,m=this.b;if(F){for(p=new Uint8Array(this.a.buffer);p.length<=m+f.length+5;)p=new Uint8Array(p.length<<1);p.set(this.a)}h=g?1:0;p[m++]=h|0;k=f.length;n=~k+65536&65535;p[m++]=k&255;p[m++]=k>>>8&255;p[m++]=n&255;p[m++]=n>>>8&255;if(F)p.set(f,m),m+=f.length,p=p.subarray(0,m);else{q=0;for(r=f.length;q<r;++q)p[m++]=
f[q];p.length=m}this.b=m;this.a=p}break;case 1:var s=new H(F?new Uint8Array(this.a.buffer):this.a,this.b);s.d(1,1,x);s.d(1,2,x);var w=pa(this,b),y,ja,A;y=0;for(ja=w.length;y<ja;y++)if(A=w[y],H.prototype.d.apply(s,oa[A]),256<A)s.d(w[++y],w[++y],x),s.d(w[++y],5),s.d(w[++y],w[++y],x);else if(256===A)break;this.a=s.finish();this.b=this.a.length;break;case ma:var C=new H(F?new Uint8Array(this.a.buffer):this.a,this.b),Ea,M,U,V,W,gb=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],ba,Fa,ca,Ga,ka,ra=Array(19),
Ha,X,la,z,Ia;Ea=ma;C.d(1,1,x);C.d(Ea,2,x);M=pa(this,b);ba=qa(this.M,15);Fa=sa(ba);ca=qa(this.L,7);Ga=sa(ca);for(U=286;257<U&&0===ba[U-1];U--);for(V=30;1<V&&0===ca[V-1];V--);var Ja=U,Ka=V,I=new (F?Uint32Array:Array)(Ja+Ka),t,J,u,da,G=new (F?Uint32Array:Array)(316),E,B,K=new (F?Uint8Array:Array)(19);for(t=J=0;t<Ja;t++)I[J++]=ba[t];for(t=0;t<Ka;t++)I[J++]=ca[t];if(!F){t=0;for(da=K.length;t<da;++t)K[t]=0}t=E=0;for(da=I.length;t<da;t+=J){for(J=1;t+J<da&&I[t+J]===I[t];++J);u=J;if(0===I[t])if(3>u)for(;0<
u--;)G[E++]=0,K[0]++;else for(;0<u;)B=138>u?u:138,B>u-3&&B<u&&(B=u-3),10>=B?(G[E++]=17,G[E++]=B-3,K[17]++):(G[E++]=18,G[E++]=B-11,K[18]++),u-=B;else if(G[E++]=I[t],K[I[t]]++,u--,3>u)for(;0<u--;)G[E++]=I[t],K[I[t]]++;else for(;0<u;)B=6>u?u:6,B>u-3&&B<u&&(B=u-3),G[E++]=16,G[E++]=B-3,K[16]++,u-=B}d=F?G.subarray(0,E):G.slice(0,E);ka=qa(K,7);for(z=0;19>z;z++)ra[z]=ka[gb[z]];for(W=19;4<W&&0===ra[W-1];W--);Ha=sa(ka);C.d(U-257,5,x);C.d(V-1,5,x);C.d(W-4,4,x);for(z=0;z<W;z++)C.d(ra[z],3,x);z=0;for(Ia=d.length;z<
Ia;z++)if(X=d[z],C.d(Ha[X],ka[X],x),16<=X){z++;switch(X){case 16:la=2;break;case 17:la=3;break;case 18:la=7;break;default:l("invalid code: "+X)}C.d(d[z],la,x)}var La=[Fa,ba],Ma=[Ga,ca],L,Na,ea,ua,Oa,Pa,Qa,Ra;Oa=La[0];Pa=La[1];Qa=Ma[0];Ra=Ma[1];L=0;for(Na=M.length;L<Na;++L)if(ea=M[L],C.d(Oa[ea],Pa[ea],x),256<ea)C.d(M[++L],M[++L],x),ua=M[++L],C.d(Qa[ua],Ra[ua],x),C.d(M[++L],M[++L],x);else if(256===ea)break;this.a=C.finish();this.b=this.a.length;break;default:l("invalid compression type")}return this.a};
function ta(d,a){this.length=d;this.H=a}
var va=function(){function d(b){switch(x){case 3===b:return[257,b-3,0];case 4===b:return[258,b-4,0];case 5===b:return[259,b-5,0];case 6===b:return[260,b-6,0];case 7===b:return[261,b-7,0];case 8===b:return[262,b-8,0];case 9===b:return[263,b-9,0];case 10===b:return[264,b-10,0];case 12>=b:return[265,b-11,1];case 14>=b:return[266,b-13,1];case 16>=b:return[267,b-15,1];case 18>=b:return[268,b-17,1];case 22>=b:return[269,b-19,2];case 26>=b:return[270,b-23,2];case 30>=b:return[271,b-27,2];case 34>=b:return[272,
b-31,2];case 42>=b:return[273,b-35,3];case 50>=b:return[274,b-43,3];case 58>=b:return[275,b-51,3];case 66>=b:return[276,b-59,3];case 82>=b:return[277,b-67,4];case 98>=b:return[278,b-83,4];case 114>=b:return[279,b-99,4];case 130>=b:return[280,b-115,4];case 162>=b:return[281,b-131,5];case 194>=b:return[282,b-163,5];case 226>=b:return[283,b-195,5];case 257>=b:return[284,b-227,5];case 258===b:return[285,b-258,0];default:l("invalid length: "+b)}}var a=[],c,e;for(c=3;258>=c;c++)e=d(c),a[c]=e[2]<<24|e[1]<<
16|e[0];return a}(),wa=F?new Uint32Array(va):va;
function pa(d,a){function c(b,c){var a=b.H,d=[],e=0,f;f=wa[b.length];d[e++]=f&65535;d[e++]=f>>16&255;d[e++]=f>>24;var g;switch(x){case 1===a:g=[0,a-1,0];break;case 2===a:g=[1,a-2,0];break;case 3===a:g=[2,a-3,0];break;case 4===a:g=[3,a-4,0];break;case 6>=a:g=[4,a-5,1];break;case 8>=a:g=[5,a-7,1];break;case 12>=a:g=[6,a-9,2];break;case 16>=a:g=[7,a-13,2];break;case 24>=a:g=[8,a-17,3];break;case 32>=a:g=[9,a-25,3];break;case 48>=a:g=[10,a-33,4];break;case 64>=a:g=[11,a-49,4];break;case 96>=a:g=[12,a-
65,5];break;case 128>=a:g=[13,a-97,5];break;case 192>=a:g=[14,a-129,6];break;case 256>=a:g=[15,a-193,6];break;case 384>=a:g=[16,a-257,7];break;case 512>=a:g=[17,a-385,7];break;case 768>=a:g=[18,a-513,8];break;case 1024>=a:g=[19,a-769,8];break;case 1536>=a:g=[20,a-1025,9];break;case 2048>=a:g=[21,a-1537,9];break;case 3072>=a:g=[22,a-2049,10];break;case 4096>=a:g=[23,a-3073,10];break;case 6144>=a:g=[24,a-4097,11];break;case 8192>=a:g=[25,a-6145,11];break;case 12288>=a:g=[26,a-8193,12];break;case 16384>=
a:g=[27,a-12289,12];break;case 24576>=a:g=[28,a-16385,13];break;case 32768>=a:g=[29,a-24577,13];break;default:l("invalid distance")}f=g;d[e++]=f[0];d[e++]=f[1];d[e++]=f[2];var h,k;h=0;for(k=d.length;h<k;++h)p[m++]=d[h];w[d[0]]++;y[d[3]]++;s=b.length+c-1;r=null}var e,b,f,g,h,k={},n,q,r,p=F?new Uint16Array(2*a.length):[],m=0,s=0,w=new (F?Uint32Array:Array)(286),y=new (F?Uint32Array:Array)(30),ja=d.w,A;if(!F){for(f=0;285>=f;)w[f++]=0;for(f=0;29>=f;)y[f++]=0}w[256]=1;e=0;for(b=a.length;e<b;++e){f=h=0;
for(g=3;f<g&&e+f!==b;++f)h=h<<8|a[e+f];k[h]===v&&(k[h]=[]);n=k[h];if(!(0<s--)){for(;0<n.length&&32768<e-n[0];)n.shift();if(e+3>=b){r&&c(r,-1);f=0;for(g=b-e;f<g;++f)A=a[e+f],p[m++]=A,++w[A];break}0<n.length?(q=xa(a,e,n),r?r.length<q.length?(A=a[e-1],p[m++]=A,++w[A],c(q,0)):c(r,-1):q.length<ja?r=q:c(q,0)):r?c(r,-1):(A=a[e],p[m++]=A,++w[A])}n.push(e)}p[m++]=256;w[256]++;d.M=w;d.L=y;return F?p.subarray(0,m):p}
function xa(d,a,c){var e,b,f=0,g,h,k,n,q=d.length;h=0;n=c.length;a:for(;h<n;h++){e=c[n-h-1];g=3;if(3<f){for(k=f;3<k;k--)if(d[e+k-1]!==d[a+k-1])continue a;g=f}for(;258>g&&a+g<q&&d[e+g]===d[a+g];)++g;g>f&&(b=e,f=g);if(258===g)break}return new ta(f,a-b)}
function qa(d,a){var c=d.length,e=new ha(572),b=new (F?Uint8Array:Array)(c),f,g,h,k,n;if(!F)for(k=0;k<c;k++)b[k]=0;for(k=0;k<c;++k)0<d[k]&&e.push(k,d[k]);f=Array(e.length/2);g=new (F?Uint32Array:Array)(e.length/2);if(1===f.length)return b[e.pop().index]=1,b;k=0;for(n=e.length/2;k<n;++k)f[k]=e.pop(),g[k]=f[k].value;h=ya(g,g.length,a);k=0;for(n=f.length;k<n;++k)b[f[k].index]=h[k];return b}
function ya(d,a,c){function e(b){var c=k[b][n[b]];c===a?(e(b+1),e(b+1)):--g[c];++n[b]}var b=new (F?Uint16Array:Array)(c),f=new (F?Uint8Array:Array)(c),g=new (F?Uint8Array:Array)(a),h=Array(c),k=Array(c),n=Array(c),q=(1<<c)-a,r=1<<c-1,p,m,s,w,y;b[c-1]=a;for(m=0;m<c;++m)q<r?f[m]=0:(f[m]=1,q-=r),q<<=1,b[c-2-m]=(b[c-1-m]/2|0)+a;b[0]=f[0];h[0]=Array(b[0]);k[0]=Array(b[0]);for(m=1;m<c;++m)b[m]>2*b[m-1]+f[m]&&(b[m]=2*b[m-1]+f[m]),h[m]=Array(b[m]),k[m]=Array(b[m]);for(p=0;p<a;++p)g[p]=c;for(s=0;s<b[c-1];++s)h[c-
1][s]=d[s],k[c-1][s]=s;for(p=0;p<c;++p)n[p]=0;1===f[c-1]&&(--g[0],++n[c-1]);for(m=c-2;0<=m;--m){w=p=0;y=n[m+1];for(s=0;s<b[m];s++)w=h[m+1][y]+h[m+1][y+1],w>d[p]?(h[m][s]=w,k[m][s]=a,y+=2):(h[m][s]=d[p],k[m][s]=p,++p);n[m]=0;1===f[m]&&e(m)}return g}
function sa(d){var a=new (F?Uint16Array:Array)(d.length),c=[],e=[],b=0,f,g,h,k;f=0;for(g=d.length;f<g;f++)c[d[f]]=(c[d[f]]|0)+1;f=1;for(g=16;f<=g;f++)e[f]=b,b+=c[f]|0,b<<=1;f=0;for(g=d.length;f<g;f++){b=e[d[f]];e[d[f]]+=1;h=a[f]=0;for(k=d[f];h<k;h++)a[f]=a[f]<<1|b&1,b>>>=1}return a};function T(d,a){this.l=[];this.m=32768;this.e=this.g=this.c=this.q=0;this.input=F?new Uint8Array(d):d;this.s=!1;this.n=za;this.C=!1;if(a||!(a={}))a.index&&(this.c=a.index),a.bufferSize&&(this.m=a.bufferSize),a.bufferType&&(this.n=a.bufferType),a.resize&&(this.C=a.resize);switch(this.n){case Aa:this.b=32768;this.a=new (F?Uint8Array:Array)(32768+this.m+258);break;case za:this.b=0;this.a=new (F?Uint8Array:Array)(this.m);this.f=this.K;this.t=this.I;this.o=this.J;break;default:l(Error("invalid inflate mode"))}}
var Aa=0,za=1,Ba={F:Aa,D:za};
T.prototype.p=function(){for(;!this.s;){var d=Y(this,3);d&1&&(this.s=x);d>>>=1;switch(d){case 0:var a=this.input,c=this.c,e=this.a,b=this.b,f=a.length,g=v,h=v,k=e.length,n=v;this.e=this.g=0;c+1>=f&&l(Error("invalid uncompressed block header: LEN"));g=a[c++]|a[c++]<<8;c+1>=f&&l(Error("invalid uncompressed block header: NLEN"));h=a[c++]|a[c++]<<8;g===~h&&l(Error("invalid uncompressed block header: length verify"));c+g>a.length&&l(Error("input buffer is broken"));switch(this.n){case Aa:for(;b+g>e.length;){n=
k-b;g-=n;if(F)e.set(a.subarray(c,c+n),b),b+=n,c+=n;else for(;n--;)e[b++]=a[c++];this.b=b;e=this.f();b=this.b}break;case za:for(;b+g>e.length;)e=this.f({v:2});break;default:l(Error("invalid inflate mode"))}if(F)e.set(a.subarray(c,c+g),b),b+=g,c+=g;else for(;g--;)e[b++]=a[c++];this.c=c;this.b=b;this.a=e;break;case 1:this.o(Ca,Da);break;case 2:Sa(this);break;default:l(Error("unknown BTYPE: "+d))}}return this.t()};
var Ta=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Ua=F?new Uint16Array(Ta):Ta,Va=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],Wa=F?new Uint16Array(Va):Va,Xa=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],Ya=F?new Uint8Array(Xa):Xa,Za=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],$a=F?new Uint16Array(Za):Za,ab=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,
10,11,11,12,12,13,13],bb=F?new Uint8Array(ab):ab,cb=new (F?Uint8Array:Array)(288),Z,db;Z=0;for(db=cb.length;Z<db;++Z)cb[Z]=143>=Z?8:255>=Z?9:279>=Z?7:8;var Ca=R(cb),eb=new (F?Uint8Array:Array)(30),fb,hb;fb=0;for(hb=eb.length;fb<hb;++fb)eb[fb]=5;var Da=R(eb);function Y(d,a){for(var c=d.g,e=d.e,b=d.input,f=d.c,g=b.length,h;e<a;)f>=g&&l(Error("input buffer is broken")),c|=b[f++]<<e,e+=8;h=c&(1<<a)-1;d.g=c>>>a;d.e=e-a;d.c=f;return h}
function ib(d,a){for(var c=d.g,e=d.e,b=d.input,f=d.c,g=b.length,h=a[0],k=a[1],n,q;e<k&&!(f>=g);)c|=b[f++]<<e,e+=8;n=h[c&(1<<k)-1];q=n>>>16;d.g=c>>q;d.e=e-q;d.c=f;return n&65535}
function Sa(d){function a(a,b,c){var d,e=this.z,f,g;for(g=0;g<a;)switch(d=ib(this,b),d){case 16:for(f=3+Y(this,2);f--;)c[g++]=e;break;case 17:for(f=3+Y(this,3);f--;)c[g++]=0;e=0;break;case 18:for(f=11+Y(this,7);f--;)c[g++]=0;e=0;break;default:e=c[g++]=d}this.z=e;return c}var c=Y(d,5)+257,e=Y(d,5)+1,b=Y(d,4)+4,f=new (F?Uint8Array:Array)(Ua.length),g,h,k,n;for(n=0;n<b;++n)f[Ua[n]]=Y(d,3);if(!F){n=b;for(b=f.length;n<b;++n)f[Ua[n]]=0}g=R(f);h=new (F?Uint8Array:Array)(c);k=new (F?Uint8Array:Array)(e);
d.z=0;d.o(R(a.call(d,c,g,h)),R(a.call(d,e,g,k)))}T.prototype.o=function(d,a){var c=this.a,e=this.b;this.u=d;for(var b=c.length-258,f,g,h,k;256!==(f=ib(this,d));)if(256>f)e>=b&&(this.b=e,c=this.f(),e=this.b),c[e++]=f;else{g=f-257;k=Wa[g];0<Ya[g]&&(k+=Y(this,Ya[g]));f=ib(this,a);h=$a[f];0<bb[f]&&(h+=Y(this,bb[f]));e>=b&&(this.b=e,c=this.f(),e=this.b);for(;k--;)c[e]=c[e++-h]}for(;8<=this.e;)this.e-=8,this.c--;this.b=e};
T.prototype.J=function(d,a){var c=this.a,e=this.b;this.u=d;for(var b=c.length,f,g,h,k;256!==(f=ib(this,d));)if(256>f)e>=b&&(c=this.f(),b=c.length),c[e++]=f;else{g=f-257;k=Wa[g];0<Ya[g]&&(k+=Y(this,Ya[g]));f=ib(this,a);h=$a[f];0<bb[f]&&(h+=Y(this,bb[f]));e+k>b&&(c=this.f(),b=c.length);for(;k--;)c[e]=c[e++-h]}for(;8<=this.e;)this.e-=8,this.c--;this.b=e};
T.prototype.f=function(){var d=new (F?Uint8Array:Array)(this.b-32768),a=this.b-32768,c,e,b=this.a;if(F)d.set(b.subarray(32768,d.length));else{c=0;for(e=d.length;c<e;++c)d[c]=b[c+32768]}this.l.push(d);this.q+=d.length;if(F)b.set(b.subarray(a,a+32768));else for(c=0;32768>c;++c)b[c]=b[a+c];this.b=32768;return b};
T.prototype.K=function(d){var a,c=this.input.length/this.c+1|0,e,b,f,g=this.input,h=this.a;d&&("number"===typeof d.v&&(c=d.v),"number"===typeof d.G&&(c+=d.G));2>c?(e=(g.length-this.c)/this.u[2],f=258*(e/2)|0,b=f<h.length?h.length+f:h.length<<1):b=h.length*c;F?(a=new Uint8Array(b),a.set(h)):a=h;return this.a=a};
T.prototype.t=function(){var d=0,a=this.a,c=this.l,e,b=new (F?Uint8Array:Array)(this.q+(this.b-32768)),f,g,h,k;if(0===c.length)return F?this.a.subarray(32768,this.b):this.a.slice(32768,this.b);f=0;for(g=c.length;f<g;++f){e=c[f];h=0;for(k=e.length;h<k;++h)b[d++]=e[h]}f=32768;for(g=this.b;f<g;++f)b[d++]=a[f];this.l=[];return this.buffer=b};
T.prototype.I=function(){var d,a=this.b;F?this.C?(d=new Uint8Array(a),d.set(this.a.subarray(0,a))):d=this.a.subarray(0,a):(this.a.length>a&&(this.a.length=a),d=this.a);return this.buffer=d};function jb(d){if("string"===typeof d){var a=d.split(""),c,e;c=0;for(e=a.length;c<e;c++)a[c]=(a[c].charCodeAt(0)&255)>>>0;d=a}for(var b=1,f=0,g=d.length,h,k=0;0<g;){h=1024<g?1024:g;g-=h;do b+=d[k++],f+=b;while(--h);b%=65521;f%=65521}return(f<<16|b)>>>0};function kb(d,a){var c,e;this.input=d;this.c=0;if(a||!(a={}))a.index&&(this.c=a.index),a.verify&&(this.N=a.verify);c=d[this.c++];e=d[this.c++];switch(c&15){case lb:this.method=lb;break;default:l(Error("unsupported compression method"))}0!==((c<<8)+e)%31&&l(Error("invalid fcheck flag:"+((c<<8)+e)%31));e&32&&l(Error("fdict flag is not supported"));this.B=new T(d,{index:this.c,bufferSize:a.bufferSize,bufferType:a.bufferType,resize:a.resize})}
kb.prototype.p=function(){var d=this.input,a,c;a=this.B.p();this.c=this.B.c;this.N&&(c=(d[this.c++]<<24|d[this.c++]<<16|d[this.c++]<<8|d[this.c++])>>>0,c!==jb(a)&&l(Error("invalid adler-32 checksum")));return a};var lb=8;function mb(d,a){this.input=d;this.a=new (F?Uint8Array:Array)(32768);this.h=$.k;var c={},e;if((a||!(a={}))&&"number"===typeof a.compressionType)this.h=a.compressionType;for(e in a)c[e]=a[e];c.outputBuffer=this.a;this.A=new ia(this.input,c)}var $=na;
mb.prototype.j=function(){var d,a,c,e,b,f,g,h=0;g=this.a;d=lb;switch(d){case lb:a=Math.LOG2E*Math.log(32768)-8;break;default:l(Error("invalid compression method"))}c=a<<4|d;g[h++]=c;switch(d){case lb:switch(this.h){case $.NONE:b=0;break;case $.r:b=1;break;case $.k:b=2;break;default:l(Error("unsupported compression type"))}break;default:l(Error("invalid compression method"))}e=b<<6|0;g[h++]=e|31-(256*c+e)%31;f=jb(this.input);this.A.b=h;g=this.A.j();h=g.length;F&&(g=new Uint8Array(g.buffer),g.length<=
h+4&&(this.a=new Uint8Array(g.length+4),this.a.set(g),g=this.a),g=g.subarray(0,h+4));g[h++]=f>>24&255;g[h++]=f>>16&255;g[h++]=f>>8&255;g[h++]=f&255;return g};function nb(d,a){var c,e,b,f;if(Object.keys)c=Object.keys(a);else for(e in c=[],b=0,a)c[b++]=e;b=0;for(f=c.length;b<f;++b)e=c[b],D(d+"."+e,a[e])};D("Zlib.Inflate",kb);D("Zlib.Inflate.prototype.decompress",kb.prototype.p);nb("Zlib.Inflate.BufferType",{ADAPTIVE:Ba.D,BLOCK:Ba.F});D("Zlib.Deflate",mb);D("Zlib.Deflate.compress",function(d,a){return(new mb(d,a)).j()});D("Zlib.Deflate.prototype.compress",mb.prototype.j);nb("Zlib.Deflate.CompressionType",{NONE:$.NONE,FIXED:$.r,DYNAMIC:$.k});}).call(this); //@ sourceMappingURL=zlib.min.js.map

/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
var hexcase = 0;   /* hex output format. 0 - lowercase; 1 - uppercase        */
var b64pad  = "";  /* base-64 pad character. "=" for strict RFC compliance   */

/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
function hex_md5(s)    { return rstr2hex(rstr_md5(str2rstr_utf8(s))); }
function b64_md5(s)    { return rstr2b64(rstr_md5(str2rstr_utf8(s))); }
function any_md5(s, e) { return rstr2any(rstr_md5(str2rstr_utf8(s)), e); }
function hex_hmac_md5(k, d)
  { return rstr2hex(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }
function b64_hmac_md5(k, d)
  { return rstr2b64(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }
function any_hmac_md5(k, d, e)
  { return rstr2any(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)), e); }

/*
 * Perform a simple self-test to see if the VM is working
 */
function md5_vm_test()
{
  return hex_md5("abc").toLowerCase() == "900150983cd24fb0d6963f7d28e17f72";
}

/*
 * Calculate the MD5 of a raw string
 */
function rstr_md5(s)
{
  return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));
}

/*
 * Calculate the HMAC-MD5, of a key and some data (raw strings)
 */
function rstr_hmac_md5(key, data)
{
  var bkey = rstr2binl(key);
  if(bkey.length > 16) bkey = binl_md5(bkey, key.length * 8);

  var ipad = Array(16), opad = Array(16);
  for(var i = 0; i < 16; i++)
  {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
  return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));
}

/*
 * Convert a raw string to a hex string
 */
function rstr2hex(input)
{
  try { hexcase } catch(e) { hexcase=0; }
  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
  var output = "";
  var x;
  for(var i = 0; i < input.length; i++)
  {
    x = input.charCodeAt(i);
    output += hex_tab.charAt((x >>> 4) & 0x0F)
           +  hex_tab.charAt( x        & 0x0F);
  }
  return output;
}

/*
 * Convert a raw string to a base-64 string
 */
function rstr2b64(input)
{
  try { b64pad } catch(e) { b64pad=''; }
  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var output = "";
  var len = input.length;
  for(var i = 0; i < len; i += 3)
  {
    var triplet = (input.charCodeAt(i) << 16)
                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)
                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);
    for(var j = 0; j < 4; j++)
    {
      if(i * 8 + j * 6 > input.length * 8) output += b64pad;
      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);
    }
  }
  return output;
}

/*
 * Convert a raw string to an arbitrary string encoding
 */
function rstr2any(input, encoding)
{
  var divisor = encoding.length;
  var i, j, q, x, quotient;

  /* Convert to an array of 16-bit big-endian values, forming the dividend */
  var dividend = Array(Math.ceil(input.length / 2));
  for(i = 0; i < dividend.length; i++)
  {
    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
  }

  /*
   * Repeatedly perform a long division. The binary array forms the dividend,
   * the length of the encoding is the divisor. Once computed, the quotient
   * forms the dividend for the next step. All remainders are stored for later
   * use.
   */
  var full_length = Math.ceil(input.length * 8 /
                                    (Math.log(encoding.length) / Math.log(2)));
  var remainders = Array(full_length);
  for(j = 0; j < full_length; j++)
  {
    quotient = Array();
    x = 0;
    for(i = 0; i < dividend.length; i++)
    {
      x = (x << 16) + dividend[i];
      q = Math.floor(x / divisor);
      x -= q * divisor;
      if(quotient.length > 0 || q > 0)
        quotient[quotient.length] = q;
    }
    remainders[j] = x;
    dividend = quotient;
  }

  /* Convert the remainders to the output string */
  var output = "";
  for(i = remainders.length - 1; i >= 0; i--)
    output += encoding.charAt(remainders[i]);

  return output;
}

/*
 * Encode a string as utf-8.
 * For efficiency, this assumes the input is valid utf-16.
 */
function str2rstr_utf8(input)
{
  var output = "";
  var i = -1;
  var x, y;

  while(++i < input.length)
  {
    /* Decode utf-16 surrogate pairs */
    x = input.charCodeAt(i);
    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)
    {
      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
      i++;
    }

    /* Encode output as utf-8 */
    if(x <= 0x7F)
      output += String.fromCharCode(x);
    else if(x <= 0x7FF)
      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),
                                    0x80 | ( x         & 0x3F));
    else if(x <= 0xFFFF)
      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
                                    0x80 | ((x >>> 6 ) & 0x3F),
                                    0x80 | ( x         & 0x3F));
    else if(x <= 0x1FFFFF)
      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
                                    0x80 | ((x >>> 12) & 0x3F),
                                    0x80 | ((x >>> 6 ) & 0x3F),
                                    0x80 | ( x         & 0x3F));
  }
  return output;
}

/*
 * Encode a string as utf-16
 */
function str2rstr_utf16le(input)
{
  var output = "";
  for(var i = 0; i < input.length; i++)
    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,
                                  (input.charCodeAt(i) >>> 8) & 0xFF);
  return output;
}

function str2rstr_utf16be(input)
{
  var output = "";
  for(var i = 0; i < input.length; i++)
    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,
                                   input.charCodeAt(i)        & 0xFF);
  return output;
}

/*
 * Convert a raw string to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */
function rstr2binl(input)
{
  var output = Array(input.length >> 2);
  for(var i = 0; i < output.length; i++)
    output[i] = 0;
  for(var i = 0; i < input.length * 8; i += 8)
    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (i%32);
  return output;
}

/*
 * Convert an array of little-endian words to a string
 */
function binl2rstr(input)
{
  var output = "";
  for(var i = 0; i < input.length * 32; i += 8)
    output += String.fromCharCode((input[i>>5] >>> (i % 32)) & 0xFF);
  return output;
}

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */
function binl_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);
}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

//# sourceMappingURL=Interface.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var Base = /** @class */ (function () {
        function Base() {
            this._id = (Base.__defaultID += 1);
        }
        Base.prototype.Dispose = function () {
            this._id = 0;
        };
        Base.prototype.IsDisposed = function () {
            return this._id == 0;
        };
        Base.__defaultID = 1000000;
        return Base;
    }());
    H52D_Framework.Base = Base;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Base.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var Debugger = /** @class */ (function () {
        function Debugger() {
        }
        Debugger.Log = function (msg) {
            if (this._logLevel >= LogLevel.eLog) {
                if (this._onLog != null) {
                    this._onLog.setTo(this._onLog.caller, this._onLog.method, [msg], false);
                    this._onLog.run();
                }
            }
        };
        Debugger.LogWarning = function (msg) {
            if (this._logLevel >= LogLevel.eWarning) {
                if (this._onLogWarning != null) {
                    this._onLogWarning.setTo(this._onLogWarning.caller, this._onLogWarning.method, [msg], false);
                    this._onLogWarning.run();
                }
            }
        };
        Debugger.LogError = function (msg) {
            if (this._logLevel >= LogLevel.eError) {
                if (this._onLogError != null) {
                    this._onLogError.setTo(this._onLogError.caller, this._onLogError.method, [msg], false);
                    this._onLogError.run();
                }
            }
        };
        Debugger.Assert = function (condition, msg) {
            if (msg === void 0) { msg = ""; }
            if (this._onAssert != null) {
                this._onLogError.setTo(this._onLogError.caller, this._onLogError.method, [condition, msg], false);
                this._onLogError.run();
            }
        };
        return Debugger;
    }());
    H52D_Framework.Debugger = Debugger;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Debugger.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var DoubleLinkNode = /** @class */ (function (_super) {
        __extends(DoubleLinkNode, _super);
        function DoubleLinkNode() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DoubleLinkNode.prototype.IsAttach = function () {
            return this._dl != null;
        };
        DoubleLinkNode.prototype.Attach = function (dl) {
            if (dl != null)
                dl.PushBack(this);
        };
        DoubleLinkNode.prototype.Detach = function () {
            if (this._dl != null)
                this._dl.Remove(this);
            this._dl = null;
        };
        DoubleLinkNode.prototype.Pre = function () {
            return this._pre;
        };
        DoubleLinkNode.prototype.Next = function () {
            return this._next;
        };
        DoubleLinkNode.prototype.Dispose = function () {
            if (_super.prototype.IsDisposed.call(this))
                return;
            this.Detach();
        };
        return DoubleLinkNode;
    }(H52D_Framework.Base));
    H52D_Framework.DoubleLinkNode = DoubleLinkNode;
    //+-------------------------------------------------------------------------------------------------------------------------------------------------------------
    var DoubleLink = /** @class */ (function () {
        function DoubleLink() {
            this._root = new DoubleLinkNode();
            this._bridge = new DoubleLinkNode();
        }
        DoubleLink.prototype.IsEmpty = function () {
            return this._root._next == null;
        };
        DoubleLink.prototype.Next = function (node) {
            node = (node == null) ? this._root._next : (((node.IsAttach()) ? node._next : this._bridge._next));
            var ret = node != null;
            if (ret) {
                this._bridge._pre = node._pre;
                this._bridge._next = node._next;
            }
            return ret;
        };
        DoubleLink.prototype.Pre = function (node) {
            node = (node == null) ? this._root._pre : (((node.IsAttach()) ? node._pre : this._bridge._pre));
            var ret = node != null;
            if (ret) {
                this._bridge._pre = node._pre;
                this._bridge._next = node._next;
            }
            return ret;
        };
        DoubleLink.prototype.GetHead = function () {
            return this._root._next;
        };
        DoubleLink.prototype.GetTail = function () {
            return this._root._pre;
        };
        DoubleLink.prototype.PushBack = function (node) {
            node.Detach();
            node._dl = this;
            var pre = this._root._pre != null ? this._root._pre : this._root;
            this._root._pre = node;
            this._Link(pre, node);
        };
        DoubleLink.prototype.PushFront = function (node) {
            node.Detach();
            node._dl = this;
            var next = this._root._next != null ? this._root._next : this._root;
            this._root._next = node;
            this._Link(node, next);
        };
        DoubleLink.prototype.Remove = function (node) {
            if (node == null || !node.IsAttach())
                return;
            var pre = node._pre != null ? node._pre : this._root;
            var next = node._next != null ? node._next : this._root;
            this._Link(pre, next);
            node._dl = null;
        };
        DoubleLink.prototype.Clear = function () {
            var node = null;
            while (this.Next(node)) {
                this.Remove(node);
            }
        };
        DoubleLink.prototype._Link = function (pre, next) {
            pre._next = next;
            next._pre = pre;
        };
        return DoubleLink;
    }());
    H52D_Framework.DoubleLink = DoubleLink;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DoubleLink.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var Time = /** @class */ (function () {
        function Time() {
        }
        Time.SetServerTime = function (serverTime) {
            var serverDateTime = new Date(serverTime * 1000);
            Time._diffTime = serverDateTime.getTime() - Date.now() + this.TimeSplus;
        };
        Object.defineProperty(Time, "serverTime", {
            get: function () {
                var date = new Date(Date.now() + Time._diffTime);
                return date;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Time, "serverMilliSecodes", {
            get: function () {
                return Date.now() + Time._diffTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Time, "serverSecodes", {
            get: function () {
                return Math.floor((Date.now() + Time._diffTime) / 1000);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Time, "deltaTime", {
            get: function () {
                return Laya.timer.delta;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Time, "time", {
            get: function () {
                return Laya.timer.currTimer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Time, "timeScale", {
            get: function () {
                return Laya.timer.scale;
            },
            set: function (scale) {
                Laya.timer.scale = scale;
            },
            enumerable: true,
            configurable: true
        });
        Time._diffTime = 0;
        //时区差(8小时)
        Time.TimeSplus = 0 * 3600 * 1000;
        return Time;
    }());
    H52D_Framework.Time = Time;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Time.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var TEvent = /** @class */ (function () {
        function TEvent() {
            this._handerList = new Array();
        }
        TEvent.prototype.Add = function (handler) {
            this._handerList.push(handler);
        };
        TEvent.prototype.Remove = function (handler) {
            for (var i = 0; i < this._handerList.length; i++) {
                if (handler.caller == this._handerList[i].caller && handler.method == this._handerList[i].method) {
                    this._handerList[i].recover();
                    this._handerList.splice(i, 1);
                    handler.recover();
                    return;
                }
            }
        };
        TEvent.prototype.Exec = function (args) {
            for (var i = 0; i < this._handerList.length; i++) {
                var handler = this._handerList[i];
                if (handler != null) {
                    handler.setTo(handler.caller, handler.method, args, false);
                    handler.run();
                }
            }
        };
        return TEvent;
    }());
    var MAX_STACK_DEEP = 8;
    var Event = /** @class */ (function () {
        function Event() {
        }
        Event.DispatchEvent = function (type, args) {
            if (!(args instanceof Array))
                args = [args];
            var ev = this._eventList[type];
            if (ev != null) {
                try {
                    this._stackDeep++;
                    if (this._stackDeep > MAX_STACK_DEEP)
                        throw new Error("Event stack overflow");
                    ev.Exec(args);
                }
                catch (e) {
                    H52D_Framework.Debugger.LogError(e);
                }
                finally {
                    this._stackDeep--;
                }
            }
        };
        Event.RegistEvent = function (type, handler) {
            var ev = this._eventList[type];
            if (ev == null) {
                ev = new TEvent();
                this._eventList[type] = ev;
            }
            ev.Add(handler);
        };
        Event.RemoveEvent = function (type, handler) {
            var ev = this._eventList[type];
            if (ev != null && handler != null) {
                ev.Remove(handler);
            }
        };
        Event._eventList = {};
        return Event;
    }());
    H52D_Framework.Event = Event;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Event.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var Tick = /** @class */ (function () {
        function Tick() {
        }
        /**
         * 定时重复执行(基于帧率)。
         * @param	delay	间隔几帧(单位为帧)。
         * @param	caller	执行域(this)。
         * @param	method	定时器回调函数。
         * @param	args	回调参数。
         * @param	coverBefore	是否覆盖之前的延迟执行，默认为 true 。
         */
        Tick.FrameLoop = function (delay, caller, method, args, coverBefore) {
            Laya.timer.frameLoop(delay, caller, method, args, coverBefore);
        };
        /**
         * 定时执行一次(基于帧率)。
         * @param	delay	延迟几帧(单位为帧)。
         * @param	caller	执行域(this)。
         * @param	method	定时器回调函数。
         * @param	args	回调参数。
         * @param	coverBefore	是否覆盖之前的延迟执行，默认为 true 。
         */
        Tick.FrameOnce = function (delay, caller, method, args, coverBefore) {
            Laya.timer.frameOnce(delay, caller, method, args, coverBefore);
        };
        /**
         * 定时重复执行。
         * @param	delay	间隔时间(单位毫秒)。
         * @param	caller	执行域(this)。
         * @param	method	定时器回调函数。
         * @param	args	回调参数。
         * @param	coverBefore	是否覆盖之前的延迟执行，默认为 true 。
         * @param	jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
         */
        Tick.Loop = function (delay, caller, method, args, coverBefore, jumpFrame) {
            Laya.timer.loop(delay, caller, method, args, coverBefore, jumpFrame);
        };
        /**
         * 定时执行一次。
         * @param	delay	延迟时间(单位为毫秒)。
         * @param	caller	执行域(this)。
         * @param	method	定时器回调函数。
         * @param	args	回调参数。
         * @param	coverBefore	是否覆盖之前的延迟执行，默认为 true 。
         */
        Tick.Once = function (delay, caller, method, args, coverBefore) {
            Laya.timer.once(delay, caller, method, args, coverBefore);
        };
        /**
         * 清理定时器。
         * @param	caller 执行域(this)。
         * @param	method 定时器回调函数。
         */
        Tick.Clear = function (caller, method) {
            Laya.timer.clear(caller, method);
        };
        /**
         * 清理对象身上的所有定时器。
         * @param	caller 执行域(this)。
         */
        Tick.ClearAll = function (caller) {
            Laya.timer.clearAll(caller);
        };
        /**
         * 一定时间内执行一次。
         * @param keyName 唯一标识
         * @param time 延迟时间(单位为毫秒)。
         * @param callBack 定时器回调函数。
         */
        Tick.SpecialOnce = function (keyName, time, callBack) {
            var _this = this;
            if (keyName && this.TimeMapping[keyName] == true) {
                return;
            }
            this.TimeMapping[keyName] = true;
            Tick.Once(time, null, function () {
                callBack();
                if (keyName) {
                    _this.TimeMapping[keyName] = false;
                }
            });
        };
        Tick.TimeMapping = {};
        return Tick;
    }());
    H52D_Framework.Tick = Tick;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Tick.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var TipsVo = /** @class */ (function () {
        function TipsVo() {
        }
        return TipsVo;
    }());
    H52D_Framework.TipsVo = TipsVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TipsVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class 分享模型
     * @author zhangyusong
     **/
    var ShareRewardVo = /** @class */ (function () {
        function ShareRewardVo() {
        }
        return ShareRewardVo;
    }());
    H52D_Framework.ShareRewardVo = ShareRewardVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ShareRewardVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class 邀请模型
     * @author zhangyusong
     **/
    var InvitationVo = /** @class */ (function () {
        function InvitationVo() {
        }
        return InvitationVo;
    }());
    H52D_Framework.InvitationVo = InvitationVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=InvitationVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var HeadVo = /** @class */ (function () {
        function HeadVo() {
        }
        return HeadVo;
    }());
    H52D_Framework.HeadVo = HeadVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeadVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var HeadModel = /** @class */ (function () {
        function HeadModel(item) {
            this.imgSelect = item.getChildByName("img_select");
            this.imgHead = item.getChildByName("img_head");
            this.imgUse = item.getChildByName("img_use");
            this.select = false;
            this.use = false;
        }
        Object.defineProperty(HeadModel.prototype, "data", {
            set: function (value) {
                this._data = value;
                this.imgHead.skin = value.headRes;
                this.select = value.headSelect;
                this.use = value.headUse;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeadModel.prototype, "headId", {
            get: function () {
                return this._data.headId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeadModel.prototype, "headImg", {
            get: function () {
                return this.imgHead.skin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeadModel.prototype, "select", {
            /** 选中状态 */
            get: function () {
                return this.imgSelect.visible;
            },
            /** 选中状态 */
            set: function (value) {
                this.imgSelect.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeadModel.prototype, "use", {
            /** 使用状态 */
            set: function (value) {
                this.imgUse.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        return HeadModel;
    }());
    H52D_Framework.HeadModel = HeadModel;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeadModel.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 技能数据类
     * @author zhangyusong
     */
    var SkillVo = /** @class */ (function () {
        function SkillVo(id) {
            this.id = id;
            if (id == 0)
                return;
            var data = H52D_Framework.ActiveSkillConfig[id];
            this.conMp = data["conMp"];
            this.cdTime = data["skillCD"] * 0.001;
            this.continuousTime = 0;
            var status = data["statusList"][1];
            if (!!status) {
                this.continuousTime = H52D_Framework.StatusConfig[status[3]]["periodEffect"][3];
                this.continuousTime *= 0.001;
            }
            this.strIcon = "ui_icon/" + data["strIcon"];
        }
        return SkillVo;
    }());
    H52D_Framework.SkillVo = SkillVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SkillVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 技能模型类
     * @author zhangyusong
     */
    var SkillModel = /** @class */ (function () {
        /**
         * 技能
         * @param item
         * @param index
         **/
        function SkillModel(item, index, fightType) {
            this.fightType = fightType;
            this.type = index;
            var roleSkillUp = H52D_Framework.RoleSkillUpConfig[this.type + 1];
            this.list = [];
            for (var roletype in roleSkillUp) {
                var vo = new H52D_Framework.SkillVo(roleSkillUp[roletype]["roleSkillId"]);
                vo.unlock = false;
                this.list.push(vo);
            }
            this.currVo = this.list[0];
            this.item = item;
            this.maski = new Laya.Sprite();
            this.cdPic = this.item.getChildByName("cd_pic");
            this.item.getChildByName("cd_circle").mask = this.maski;
            this.effectCd = new H52D_Framework.Avatar(this.item.getChildByName("effect_bg"));
            this.effectCd.Load(H52D_Framework.EffectDefine.jncd, 1, 1, 46, 44);
            this.continuousTimeNode = this.item.getChildByName("cd_time");
            this.continuousTimeNode["text"] = "";
            this.conMpNode = this.item.getChildByName("conMp");
            this.cdTimeCurrent = 0;
            this.continuousTimeCurrent = 0;
            this.mpvalue = 0;
            this.countdown = false;
            this.lock = true;
            this._canplay = false;
        }
        Object.defineProperty(SkillModel.prototype, "view", {
            get: function () {
                return this.item;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillModel.prototype, "vo", {
            get: function () {
                return this.currVo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillModel.prototype, "level", {
            set: function (value) {
                this._level = value;
                this.currVo = this.list[value == 0 ? 0 : value - 1];
                this.cdPic.skin = this.currVo.strIcon;
                this.conMpNode.text = this.currVo.conMp.toString();
                this.lock = value == 0;
            },
            enumerable: true,
            configurable: true
        });
        /** 更新法力值,影响开启状态 */
        SkillModel.prototype.UpdateMp = function (mp) {
            if (this.lock)
                return;
            this.mpvalue = mp;
            if (!this.countdown) {
                this.available = this.mpvalue >= this.currVo.conMp;
                if (this._canplay) {
                    if (this.mpvalue >= this.currVo.conMp) {
                        this._canplay = false;
                        this.effectCd.PlayOnce();
                    }
                }
            }
            this.conMpNode.color = this.mpvalue >= this.currVo.conMp ? "#2dbcff" : "#ff2d2c";
        };
        /** 更新冷却时间,影响冷却状态 */
        SkillModel.prototype.UpdateCd = function (cd) {
            if (this.lock)
                return;
            this.timeSplus = cd;
            //获得当前时间
            var currTime = H52D_Framework.Time.serverSecodes - this.timeSplus >> 0;
            //持续释放技能
            if (currTime < this.currVo.continuousTime) {
                this.continuousTimeCurrent = this.currVo.continuousTime - currTime;
                this.StartUse();
            }
            //冷却技能
            else if (currTime < this.currVo.cdTime) {
                this.currVo.continuousTime = 0;
                this.cdTimeCurrent = this.currVo.cdTime - (currTime - this.currVo.continuousTime);
                this.StartUse();
            }
        };
        Object.defineProperty(SkillModel.prototype, "lock", {
            get: function () {
                return this._lock;
            },
            /** 锁定状态 */
            set: function (value) {
                this._lock = value;
                this.item.getChildByName("cd_lock")["visible"] = value;
                if (this.countdown) {
                    this.item.getChildByName("cd_mask")["visible"] = true;
                }
                else {
                    this.item.getChildByName("cd_mask")["visible"] = value;
                }
                if (value) {
                    this.item.mouseEnabled = false;
                    this.conMpNode.color = "#ff2d2c";
                    this.drawSector(0, true);
                }
                else {
                    this.conMpNode.text = this.currVo.conMp.toString();
                }
            },
            enumerable: true,
            configurable: true
        });
        SkillModel.prototype.Destroy = function () {
            H52D_Framework.Tick.ClearAll(this);
        };
        Object.defineProperty(SkillModel.prototype, "available", {
            get: function () {
                return this._available;
            },
            /** 可使用状态 */
            set: function (value) {
                this._available = value;
                this.item.mouseEnabled = value;
                this.item.getChildByName("cd_mask")["visible"] = !value;
                //开启状态
                this.drawSector(value ? 1 : 0, true);
            },
            enumerable: true,
            configurable: true
        });
        /** 开启使用，持续时间内释放技能 */
        SkillModel.prototype.StartUse = function () {
            H52D_Framework.Event.DispatchEvent(this.fightType + H52D_Framework.EventDefine.SPELL_SKILL, [this.type, this.vo.id]);
            H52D_Framework.RemoteCall.Instance.Send("K_ReqSkillCD", this.type + 1);
            this.countdown = true;
            this._canplay = true;
            this.available = false;
            this.cd = true;
            this.item.getChildByName("cd_mask")["visible"] = false;
            this.continuousTimeNode["text"] = this.currVo.continuousTime > 0 ? this.currVo.continuousTime.toString() : "";
            if (this.continuousTimeCurrent == 0) {
                this.continuousTimeCurrent = this.currVo.continuousTime;
            }
            if (this.cdTimeCurrent == 0) {
                this.cdTimeCurrent = this.currVo.cdTime;
                this.FirstcdTime();
            }
            H52D_Framework.Tick.Loop(100, this, this.FrameContinuousTime);
        };
        /** 持续倒计时帧函数，0.1秒 */
        SkillModel.prototype.FrameContinuousTime = function () {
            this.continuousTimeCurrent -= 0.1;
            if (this.continuousTimeCurrent > 0) {
                this.ShowTimeText(this.continuousTimeCurrent);
                this.drawSector((this.currVo.continuousTime - this.continuousTimeCurrent) / this.currVo.continuousTime, false);
            }
            else {
                this.continuousTimeCurrent = 0;
                this.item.getChildByName("cd_mask")["visible"] = true;
                this.drawSector(1, false);
                this.FrameCdTime();
            }
        };
        /** 冷却倒计时*/
        SkillModel.prototype.FrameCdTime = function () {
            this.cdTimeCurrent -= 0.1;
            if (this.cdTimeCurrent > 0) {
                this.ShowTimeText(this.cdTimeCurrent);
                this.drawSector((this.currVo.cdTime - this.cdTimeCurrent) / this.currVo.cdTime, true);
                this.FirstcdTime();
            }
            else {
                this.cdTimeCurrent = 0;
                this.countdown = false;
                this.continuousTimeNode["text"] = "";
                this.drawSector(0, true);
                this.UpdateMp(this.mpvalue);
                this.FirstcdTime();
                H52D_Framework.Tick.Clear(this, this.FrameContinuousTime);
                if (this.mpvalue >= this.currVo.conMp) {
                    this.effectCd.PlayOnce();
                }
            }
        };
        /** 显示时间文字 */
        SkillModel.prototype.ShowTimeText = function (time) {
            var surplustime = Math.ceil(time);
            if (surplustime > 0) {
                if (surplustime < 60) {
                    this.continuousTimeNode["text"] = surplustime;
                }
                else {
                    var t = void 0;
                    if (surplustime < 60) {
                        t = surplustime < 10 ? "0" + surplustime : String(surplustime);
                    }
                    else {
                        this.continuousTimeNode["text"] = (surplustime / 60 >> 0) + ":" + surplustime % 60;
                        var m = (surplustime / 60 >> 0) < 10 ? "0" + (surplustime / 60 >> 0) : String(surplustime / 60 >> 0);
                        var s = surplustime % 60 < 10 ? "0" + surplustime % 60 : String(surplustime % 60);
                        t = m + ":" + s;
                    }
                    this.continuousTimeNode["text"] = t;
                }
            }
        };
        /** 画扇形,即为露出的部分 */
        SkillModel.prototype.drawSector = function (percentage, dir) {
            this.maski.graphics.clear();
            if (percentage > 0 && percentage < 1) {
                if (dir) {
                    this.maski.graphics.drawPie(52, 52, 74, -90, -90 + 360 * percentage, '#0');
                }
                else {
                    this.maski.graphics.drawPie(52, 52, 74, -90 + 360 * percentage, 270, '#0');
                }
            }
            else if (percentage >= 1) {
                this.maski.graphics.drawCircle(52, 52, 74, '#0');
            }
        };
        SkillModel.prototype.FirstcdTime = function () {
            if (this.type == 0) {
                H52D_Framework.ViewUILogic.Instance.FirstSkillCd = this.cdTimeCurrent;
            }
        };
        return SkillModel;
    }());
    H52D_Framework.SkillModel = SkillModel;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SkillModel.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 队长技能类
     * @author zhangyusong
     */
    var CaptainSkill = /** @class */ (function () {
        function CaptainSkill(skill) {
            this._totalCdTime = 0;
            this.skill = skill;
            this.skill.autoIcon.visible = false;
            this.skill.captain_skill.on(Laya.Event.CLICK, this, function () {
                if (CaptainSkill.CurCdTime > 0) {
                    H52D_Framework.TipsLogic.Instance.OpenTips("队长技能还在冷却中！");
                    return;
                }
                //使用队长技能
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.CAPATIAN_SKILL);
            });
            this.CaptainSkill();
            this.skill.autoBtn.on(Laya.Event.CLICK, this, this.CaptainSkill);
            this.effectCd = new H52D_Framework.Avatar(this.skill.effect_bg);
            this.effectCd.Load(H52D_Framework.EffectDefine.jndz, 1, 0.8, 42, 42);
        }
        /** 释放队长技能 */
        CaptainSkill.prototype.CaptainSkill = function () {
            // 自动释放技能
            this.skill.autoIcon.visible = !this.skill.autoIcon.visible;
            H52D_Framework.MainSkillView.IsAuto = this.skill.autoIcon.visible;
            if (this.skill.autoIcon.visible && CaptainSkill.CurCdTime <= 0) {
                //使用队长技能
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.CAPATIAN_SKILL);
            }
        };
        /**使用队长技能成功 */
        CaptainSkill.prototype.UseCaptainSkill = function (cdTime) {
            this._totalCdTime = cdTime / 1000;
            CaptainSkill.CurCdTime = cdTime / 1000;
            this.skill.captainSkillCD.visible = true;
            this.skill.captainSkillCDLabel.text = CaptainSkill.CurCdTime.toString();
            this.skill.captainSkillCDSprite.graphics.clear();
            this.skill.captainSkillCDSprite.graphics.drawCircle(37, 37, 37, "#ff0000");
            H52D_Framework.Tick.Loop(100, this, this.UpdateSkillCd);
        };
        /**更新队长技能cd时间 */
        CaptainSkill.prototype.UpdateSkillCd = function () {
            CaptainSkill.CurCdTime -= 0.1;
            this.skill.captainSkillCDLabel.text = CaptainSkill.CurCdTime.toFixed(0);
            var value = (this._totalCdTime - CaptainSkill.CurCdTime) / this._totalCdTime;
            this.skill.captainSkillCDSprite.graphics.clear();
            this.skill.captainSkillCDSprite.graphics.drawPie(37, 37, 37, -90 + 360 * value, 270, "#000000");
            if (CaptainSkill.CurCdTime <= 0) {
                H52D_Framework.Tick.Clear(this, this.UpdateSkillCd);
                this.skill.captainSkillCDLabel.text = "";
                this.skill.captainSkillCD.visible = false;
                //如果当前处于自动释放技能状态则继续使用技能
                if (this.skill.autoIcon.visible) {
                    //使用队长技能
                    H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.CAPATIAN_SKILL);
                }
                //释放特效
                this.effectCd.PlayOnce();
            }
        };
        CaptainSkill.CurCdTime = 0;
        return CaptainSkill;
    }());
    H52D_Framework.CaptainSkill = CaptainSkill;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CaptainSkill.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：活动奖品模块
     * @author：zhangyusong
     */
    var ActionRewordModel = /** @class */ (function () {
        function ActionRewordModel(item) {
            this.item = item;
            this.itembg = item._childs[0];
            this.itemPic = item._childs[1];
            this.itemNun = item._childs[2];
            this.itemName = item._childs[3];
        }
        Object.defineProperty(ActionRewordModel.prototype, "visible", {
            set: function (value) {
                this.item.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionRewordModel.prototype, "pic", {
            set: function (value) {
                this.itemPic.skin = "ui_icon/" + value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionRewordModel.prototype, "name", {
            set: function (value) {
                this.itemName.text = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionRewordModel.prototype, "num", {
            set: function (value) {
                this.itemNun.text = value > 1 ? String(value) : "";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionRewordModel.prototype, "quality", {
            set: function (value) {
                this.itembg.bgColor = H52D_Framework.BaseDefine.ItemBgColor[value];
                this.itemName.color = H52D_Framework.BaseDefine.LabelColor1[value];
            },
            enumerable: true,
            configurable: true
        });
        return ActionRewordModel;
    }());
    H52D_Framework.ActionRewordModel = ActionRewordModel;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ActionRewordModel.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class 活动列表模块
     * @author zhangyusong
     */
    var ActionModel = /** @class */ (function () {
        function ActionModel(item) {
            this.PromptId = 30029;
            /** 开启倒计时 */
            this.openCountdown = false;
            this.view = item;
            this.bgImg = item.getChildByName("bgImg");
            this.actionName = item.getChildByName("txt_action_name");
            this.actionContent = item.getChildByName("txt_action_content");
            this.quality = item.getChildByName("item_quality");
            this.btn_tips = item.getChildByName("btn_tips");
            this.btn_share = item.getChildByName("btn_share");
            this.btn_attend = item.getChildByName("btn_attend");
            this.btn_time = this.btn_attend.getChildByName("attend_time");
            this.btn_remaning = this.btn_time.getChildByName("txt_remaning");
            this.btn_condition = this.btn_attend.getChildByName("txt_condition");
            this.chack = true;
        }
        Object.defineProperty(ActionModel.prototype, "vo", {
            get: function () {
                return this._vo;
            },
            set: function (value) {
                if (this.bgImg != null) {
                    this._vo = value;
                    this.type = this._vo.type;
                    this.id = this._vo.id;
                    this.actionName.text = this._vo.name;
                    this.actionContent.text = "活动时间:" + this._vo.actionTimeShow;
                    this.remaningNum = this._vo.remaning;
                    for (var i = 0; i < this._vo.reward.length; i++) {
                        var item = this._vo.reward[i];
                        var model = new H52D_Framework.RewardView();
                        model.itemName = H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[item.itemId]["dwItemName"]]["s"];
                        model.pic = H52D_Framework.ItemConfig[item.itemId]["strIconID_B"];
                        model.itemNum = item.itemNumber;
                        model.quality = H52D_Framework.ItemConfig[item.itemId]["dwItemQuality"];
                        model.x = 30 + 100 * i;
                        model.y = 53;
                        this.view.addChild(model);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        /** 初始化，判定开启条件 */
        ActionModel.prototype.Init = function () {
            if (this.type == H52D_Framework.ActionType.topic) {
                this.TopicInit();
            }
            else if (this.type == H52D_Framework.ActionType.kicking) {
                this.KickingInit();
            }
            else if (this.type == H52D_Framework.ActionType.boss) {
                this.BossInit();
            }
            this.btn_attend.on(Laya.Event.CLICK, this, this.AttendHander);
            this.btn_tips.on(Laya.Event.CLICK, this, this.ShowTips);
            this.btn_share.on(Laya.Event.CLICK, this, this.ShowShare);
        };
        /** 更新 */
        ActionModel.prototype.UpDate = function () {
            if (this.type == H52D_Framework.ActionType.topic) {
                this.TopicUpDate();
            }
            else if (this.type == H52D_Framework.ActionType.kicking) {
                this.KickingUpDate();
            }
            else if (this.type == H52D_Framework.ActionType.boss) {
                this.BossUpDate();
            }
        };
        /**-------------------------话题先锋-------------------------*/
        ActionModel.prototype.TopicInit = function () {
            this.btn_share.visible = true;
            var topicVo = this._vo;
            if (!H52D_Framework.OpenCondition(E_OpenGrade.TOPIC, false)) {
                this.BtnWord(1);
                this.OpenShare(false);
                this.OpenBtn(false, "等级不足");
            }
            else if (H52D_Framework.MainActionLogic.Instance.Period(topicVo)) {
                this.BtnWord(topicVo.viewPoint == H52D_Framework.ViewPoint.empty ? 1 : 2);
                this.OpenBtn(true, this.getRemaning(this.remaningNum));
                this.chack = true;
                this.remaningNum = (topicVo.timeEnd.getTime() - H52D_Framework.Time.serverTime.getTime()) / 1000 >> 0;
                if (this.remaningNum > 0) {
                    this.btn_remaning.text = this.getRemaning(this.remaningNum);
                    this.openCountdown = true;
                }
                this.OpenShare(true);
            }
            else {
                this.BtnWord(2);
                this.OpenBtn(true, topicVo.viewPoint == H52D_Framework.ViewPoint.empty ? "休息中" : "已结算");
                this.chack = topicVo.viewPoint != H52D_Framework.ViewPoint.empty;
                this.OpenShare(false);
            }
        };
        /** 更新 */
        ActionModel.prototype.TopicUpDate = function () {
            var topicVo = this._vo;
            if (H52D_Framework.MainActionLogic.Instance.Period(topicVo)) {
                this.BtnWord(topicVo.viewPoint == H52D_Framework.ViewPoint.empty ? 1 : 2);
                this.OpenBtn(true, this.getRemaning(this.remaningNum));
                this.chack = true;
                this.remaningNum = (topicVo.timeEnd.getTime() - H52D_Framework.Time.serverTime.getTime()) / 1000 >> 0;
                if (this.remaningNum > 0) {
                    this.btn_remaning.text = this.getRemaning(this.remaningNum);
                }
                this.OpenShare(true);
            }
            else {
                this.BtnWord(2);
                this.OpenBtn(true, topicVo.viewPoint == H52D_Framework.ViewPoint.empty ? "休息中" : "已结算");
                this.chack = topicVo.viewPoint != H52D_Framework.ViewPoint.empty;
                this.OpenShare(false);
            }
        };
        /** 开启分享，仅在话题先锋中开启 */
        ActionModel.prototype.OpenShare = function (open) {
            this.btn_share.gray = !open;
            this.btn_share.mouseEnabled = open;
        };
        /**-------------------------王者约战-------------------------*/
        ActionModel.prototype.KickingInit = function () {
            var kickingVo = this._vo;
            if (!H52D_Framework.OpenCondition(E_OpenGrade.KICKING, false)) {
                this.BtnWord(1);
                this.OpenBtn(false, H52D_Framework.OpenGradeConfig[E_OpenGrade.KICKING].Checkpoint + "关开启");
            }
            else if (H52D_Framework.MainActionLogic.Instance.Period(kickingVo)) {
                this.BtnWord(1);
                this.OpenBtn(true, this.getRemaning(this.remaningNum));
                this.remaningNum = (kickingVo.timeEnd.getTime() - H52D_Framework.Time.serverTime.getTime()) / 1000 >> 0;
                if (this.remaningNum > 0) {
                    this.btn_remaning.text = this.getRemaning(this.remaningNum);
                    this.openCountdown = true;
                }
            }
            else {
                this.BtnWord(2);
                this.OpenBtn(true, "休息中");
            }
            this.chack = true;
        };
        /** 更新 */
        ActionModel.prototype.KickingUpDate = function () {
            var kickingVo = this._vo;
            if (H52D_Framework.MainActionLogic.Instance.Period(kickingVo)) {
                this.BtnWord(1);
                this.OpenBtn(true, this.getRemaning(this.remaningNum));
                this.remaningNum = (kickingVo.timeEnd.getTime() - H52D_Framework.Time.serverTime.getTime()) / 1000 >> 0;
                if (this.remaningNum > 0) {
                    this.btn_remaning.text = this.getRemaning(this.remaningNum);
                }
            }
            else {
                this.BtnWord(2);
                this.OpenBtn(true, "休息中");
            }
        };
        /**-------------------------世界Boss-------------------------*/
        ActionModel.prototype.BossInit = function () {
            var bossVo = this._vo;
            if (!H52D_Framework.OpenCondition(E_OpenGrade.BOSS, false)) {
                this.BtnWord(1);
                this.OpenBtn(false, H52D_Framework.OpenGradeConfig[E_OpenGrade.BOSS].Checkpoint + "关开启");
            }
            else if (H52D_Framework.MainActionLogic.Instance.Period(bossVo)) {
                this.BtnWord(1);
                this.OpenBtn(true, this.getRemaning(this.remaningNum));
                this.remaningNum = (bossVo.timeEnd.getTime() - H52D_Framework.Time.serverTime.getTime()) / 1000 >> 0;
                if (this.remaningNum > 0) {
                    this.btn_remaning.text = this.getRemaning(this.remaningNum);
                    this.openCountdown = true;
                }
            }
            else {
                this.BtnWord(2);
                this.OpenBtn(true, "休息中");
            }
        };
        /** 世界Boss更新 */
        ActionModel.prototype.BossUpDate = function () {
            var bossVo = this._vo;
            if (H52D_Framework.MainActionLogic.Instance.Period(bossVo)) {
                this.BtnWord(1);
                this.OpenBtn(true, this.getRemaning(this.remaningNum));
                this.remaningNum = (bossVo.timeEnd.getTime() - H52D_Framework.Time.serverTime.getTime()) / 1000 >> 0;
                if (this.remaningNum > 0) {
                    this.btn_remaning.text = this.getRemaning(this.remaningNum);
                }
            }
            else {
                this.BtnWord(2);
                this.OpenBtn(true, "休息中");
            }
        };
        ActionModel.prototype.Destroy = function () {
            if (this.btn_attend.hasListener(Laya.Event.CLICK)) {
                this.btn_attend.off(Laya.Event.CLICK, this, this.AttendHander);
            }
            if (this.btn_tips.hasListener(Laya.Event.CLICK)) {
                this.btn_tips.off(Laya.Event.CLICK, this, this.ShowTips);
            }
            if (this.btn_share.hasListener(Laya.Event.CLICK)) {
                this.btn_share.off(Laya.Event.CLICK, this, this.ShowShare);
            }
            this.openCountdown = false;
        };
        /** 设置字：
         * w:1参加，2查看
         **/
        ActionModel.prototype.BtnWord = function (w) {
            if (w == 1) {
                this.btn_attend.label = "参加";
            }
            else if (w == 2) {
                this.btn_attend.label = "查看";
            }
        };
        /** 心跳函数，展示倒计时 */
        ActionModel.prototype.FrameAction = function () {
            if (this.openCountdown) {
                if (--this.remaningNum > 0) {
                    //倒计时显示
                    this.btn_remaning.text = this.getRemaning(this.remaningNum);
                }
                else {
                    this.Destroy();
                    this.Init();
                }
            }
        };
        ActionModel.prototype.OpenBtn = function (b, txt) {
            this.btn_attend.gray = !b;
            this.btn_time.visible = b;
            this.btn_condition.visible = !b;
            if (b) {
                this.btn_remaning.text = txt;
            }
            else {
                this.btn_condition.text = txt;
            }
        };
        ActionModel.prototype.AttendHander = function () {
            if (this.chack) {
                // 请求参加活动
                H52D_Framework.Event.DispatchEvent("ActionOpen", [this.type, this.id]);
            }
            else {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(H52D_Framework.Format(H52D_Framework.SysPromptConfig[this.PromptId]["strPromptInfo"]));
            }
        };
        /** 显示玩法说明 */
        ActionModel.prototype.ShowTips = function () {
            var tvo = new H52D_Framework.TipsVo();
            tvo.title = this._vo.name;
            tvo.contentId = this._vo.detailsId;
            tvo.replace = this._vo.actionTimeShow;
            H52D_Framework.UIManager.Instance.CreateUI("TipsActionView", [H52D_Framework.ViewToppestRoot, tvo]);
        };
        ActionModel.prototype.ShowShare = function () {
            H52D_Framework.BaiDuSDK.Instance.CallTieBa(H52D_Framework.ShareType.base);
        };
        /** 时间格式化 */
        ActionModel.prototype.getRemaning = function (num) {
            var hours = num / 3600 >> 0;
            var minutes = (num / 60 >> 0) % 60;
            var seconds = num % 60;
            var time = (hours < 10 ? "0" + hours : hours) + ":" +
                (minutes < 10 ? "0" + minutes : minutes) + ":" +
                (seconds < 10 ? "0" + seconds : seconds);
            return time;
        };
        return ActionModel;
    }());
    H52D_Framework.ActionModel = ActionModel;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ActionModel.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：pvp房间模型
     * @author：zhangyusong
     */
    var PvpRoomVo = /** @class */ (function () {
        function PvpRoomVo() {
        }
        return PvpRoomVo;
    }());
    H52D_Framework.PvpRoomVo = PvpRoomVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PvpRoomVo.js.map
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**世界boss 数据管理 */
    var WroldBossManager = /** @class */ (function () {
        function WroldBossManager() {
            //{ [EquipType: number]: Array<AttrributeEquipment> }
            this.buff_arr = [];
            this._buff_list = [];
            this._reward_list = [];
            this._buff_buy = {};
            this._show = true;
            /********************************************************* */
            this.Reward_labelcolor = {
                2: "#ffe562",
                3: "#d8d9e2",
            };
        }
        Object.defineProperty(WroldBossManager, "Instance", {
            get: function () {
                if (WroldBossManager._init == null) {
                    WroldBossManager._init = new WroldBossManager();
                }
                return WroldBossManager._init;
            },
            enumerable: true,
            configurable: true
        });
        WroldBossManager.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqChallengeBoss", this); //战斗回掉           
        };
        /**发送请求 购买buff */
        WroldBossManager.prototype.Buff_buy = function (type, shop_ID, item_num) {
            H52D_Framework.RemoteCall.Instance.Send("K_MarketBuyReq", type, shop_ID, item_num);
        };
        /**请求战斗 */
        WroldBossManager.prototype.Fight = function () {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqChallengeBoss");
        };
        /**发送 战斗伤害 */
        WroldBossManager.prototype.SendHrut = function () {
            var nDamage = H52D_Framework.BattleManager.Instance.TheWordBossDamage;
            H52D_Framework.RemoteCall.Instance.Send('K_ReqSendChallengeHarm', nDamage);
        };
        //-------------------------服务器消息--------------------//
        /**请求战斗回掉 */
        WroldBossManager.prototype.C_ReqChallengeBoss = function (buf) {
            var data = buf[0];
            H52D_Framework.CustomsManager.Instance.EnterCustoms(20001);
            H52D_Framework.BattleManager.Instance.StopBattle();
            H52D_Framework.DropManager.Instance.Destroy();
            H52D_Framework.BattleManager.Instance.DestroyMonster();
            H52D_Framework.Event.DispatchEvent("Stop_click", [false]);
            H52D_Framework.UIManager.Instance.DestroyUI("WroldBossView", [H52D_Framework.ViewUpRoot]);
            if (H52D_Framework.UIManager.Instance.IsHave("GuidanceView", H52D_Framework.NewGuidRoot)) {
                H52D_Framework.UIManager.Instance.DestroyUI("GuidanceView", [H52D_Framework.NewGuidRoot]);
            }
        };
        /**购买buff回调 */
        WroldBossManager.prototype.ReqBuyBuff = function (type, id) {
            var buff_shop = H52D_Framework.MarketConfig[type][id];
            var Item_Id = buff_shop.sellContent[2];
            this._buff_buy[Item_Id] = 1;
            var Skill_Id = H52D_Framework.ItemConfig[Item_Id].dwUseEffect[1];
            var skill_Info = H52D_Framework.StatusConfig[Skill_Id].effectList;
            this.Buff_add(Skill_Id);
            //TipsLogic.Instance.OpenMessageBox("购买成功!");
            H52D_Framework.TipsLogic.Instance.OpenSystemTips("购买成功!");
            H52D_Framework.Event.DispatchEvent("Update_bossbuffView");
        };
        Object.defineProperty(WroldBossManager.prototype, "Show", {
            get: function () {
                return this._show;
            },
            set: function (value) {
                this._show = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WroldBossManager.prototype, "Buff_List", {
            get: function () {
                return this._buff_list;
            },
            set: function (value) {
                this._buff_list = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WroldBossManager.prototype, "Buff_Buy", {
            get: function () {
                return this._buff_buy;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WroldBossManager.prototype, "Reward_List", {
            set: function (value) {
                this._reward_list = value;
            },
            enumerable: true,
            configurable: true
        });
        /**buff列表数量 */
        WroldBossManager.prototype.Buff_num = function () {
            var buff_list = H52D_Framework.MarketConfig[3];
            for (var key in buff_list) {
                var buff_id = Number(key);
                this._buff_list.push(buff_id);
            }
            return this._buff_list;
        };
        /**奖励列表数量 */
        WroldBossManager.prototype.Reward_num = function () {
            var a = H52D_Framework.GameParamConfig.WorldBossReward;
            for (var key in H52D_Framework.GameParamConfig.WorldBossReward) {
                this._reward_list.push(Number(key));
            }
            return this._reward_list;
        };
        /**增加购买的buff相关属性 */
        WroldBossManager.prototype.Buff_add = function (buf) {
            var buff_base = new H52D_Framework.Buff(buf, this);
            buff_base.Do();
            this.buff_arr.push(buff_base);
            if (H52D_Framework.BattleManager.Instance.aIOperation) {
                H52D_Framework.BattleManager.Instance.aIOperation.Dps();
            }
        };
        /**卸载buff属性 */
        WroldBossManager.prototype.Buff_Del = function () {
            for (var key = 0; key < this.buff_arr.length; key++) {
                var buff_base = new H52D_Framework.Buff(this.buff_arr[key].id, this);
                buff_base.Destroy();
            }
            this._buff_buy = [];
            this.buff_arr = [];
            if (H52D_Framework.BattleManager.Instance.aIOperation) {
                H52D_Framework.BattleManager.Instance.aIOperation.Dps();
            }
        };
        /**获取需要的道具图片 */
        WroldBossManager.prototype.Item_Info = function (type, item_Id) {
            var path_Icon;
            var path_Icon_bg;
            var item_quality;
            var item_name;
            var name_color;
            switch (type) {
                case 1:
                    path_Icon = "ui_icon/" + H52D_Framework.ItemConfig[item_Id].strIconID_B;
                    item_quality = H52D_Framework.ItemConfig[item_Id].dwItemQuality;
                    item_name = H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[item_Id].dwItemName].s;
                    path_Icon_bg = H52D_Framework.BaseDefine.QualityList[item_quality];
                    name_color = H52D_Framework.BaseDefine.LabelColor1[item_quality];
                    break;
                case 2:
                    path_Icon = "ui_icon/" + H52D_Framework.EquipConfig[item_Id].equipIcon;
                    item_quality = H52D_Framework.EquipConfig[item_Id].equipColor;
                    item_name = H52D_Framework.StringInfoConfig[H52D_Framework.EquipConfig[item_Id].equipName].s;
                    path_Icon_bg = H52D_Framework.BaseDefine.QualityList[item_quality];
                    name_color = H52D_Framework.BaseDefine.LabelColor1[item_quality];
                    break;
                case 3:
                    path_Icon = "ui_icon/" + H52D_Framework.HeroConfig[item_Id].strIcon;
                    item_quality = H52D_Framework.HeroConfig[item_Id].quality;
                    item_name = H52D_Framework.StringInfoConfig[H52D_Framework.HeroConfig[item_Id].name].s;
                    path_Icon_bg = H52D_Framework.BaseDefine.QualityList[item_quality];
                    name_color = H52D_Framework.BaseDefine.LabelColor1[item_quality];
                    break;
                case 4:
                    path_Icon = "ui_icon/" + H52D_Framework.PetConfig[item_Id].strPetIcon;
                    item_quality = H52D_Framework.PetConfig[item_Id].petColor;
                    path_Icon_bg = H52D_Framework.BaseDefine.QualityList[item_quality];
                    item_name = H52D_Framework.StringInfoConfig[H52D_Framework.PetConfig[item_Id].petName].s;
                    name_color = H52D_Framework.BaseDefine.LabelColor1[item_quality];
                    break;
            }
            return [path_Icon, path_Icon_bg, item_name, name_color];
        };
        WroldBossManager.prototype.View_Control = function () {
            if (H52D_Framework.CustomsManager.Instance.CustomsVo.customsType == Customs_Type.Boss && this._show) {
                return false;
            }
            else if (H52D_Framework.CustomsManager.Instance.CustomsVo.customsType == Customs_Type.Customs) {
                return true;
            }
        };
        WroldBossManager.prototype.OpenView = function () {
            H52D_Framework.UIManager.Instance.CreateUI("WroldBossView", [H52D_Framework.ViewUpRoot]);
        };
        WroldBossManager.prototype.ShowPrint = function () {
            if (H52D_Framework.MasterPlayer.Instance.player.CunstLevel >= H52D_Framework.OpenGradeConfig[E_OpenGrade.BOSS].Checkpoint) {
                if (H52D_Framework.MasterPlayer.Instance.GetEventProByType(EventProEnum.NowBossRank) == 0 ||
                    H52D_Framework.MasterPlayer.Instance.GetEventProByType(EventProEnum.NowBossRank) == null) {
                    return true;
                }
            }
            return false;
        };
        return WroldBossManager;
    }());
    H52D_Framework.WroldBossManager = WroldBossManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=WroldBossManager.js.map
/**
* name
*/
var H52D_Framework;
(function (H52D_Framework) {
    var SelectTarget = /** @class */ (function () {
        function SelectTarget() {
        }
        /**设置作用目标 -- 被动  属性 选择目标 */
        SelectTarget.ImpactTarget = function (id, owner) {
            var target = [];
            var key = [];
            var attr = new H52D_Framework.Attribute();
            var target_id = attr.GetAttributeTargetID(id);
            var Ahero = H52D_Framework.HeroManager.Instance.Herolist;
            var pet = H52D_Framework.PetManager.Instance.OwnPetList;
            for (var k in Ahero) {
                key.push(k);
            }
            switch (target_id) {
                case 0:
                    target.push(owner);
                    break;
                case 1:
                    target.push(H52D_Framework.MasterPlayer.Instance.player.vo);
                    break;
                case 2:
                    for (var i = 0; i < H52D_Framework.GetTabLength(Ahero); i++) {
                        var heroinfo = Ahero[key[i]];
                        if (heroinfo.HeroType == 1) {
                            target.push(heroinfo);
                        }
                    }
                    break;
                case 3:
                    for (var i = 0; i < H52D_Framework.GetTabLength(Ahero); i++) {
                        var heroinfo = Ahero[key[i]];
                        if (heroinfo.HeroType == 2) {
                            target.push(heroinfo);
                        }
                    }
                    break;
                case 4:
                    for (var i = 0; i < H52D_Framework.GetTabLength(Ahero); i++) {
                        var heroinfo = Ahero[key[i]];
                        target.push(heroinfo);
                    }
                    break;
                case 5:
                    target.push(H52D_Framework.PetManager.Instance.GetPet_Instance(H52D_Framework.PetManager.Instance.CurrentpetID));
                    break;
                case 6:
                    target.push(H52D_Framework.BCampManager.Instance.vo);
                    break;
                case 7:
                    for (var i = 0; i < H52D_Framework.GetTabLength(Ahero); i++) {
                        var heroinfo = Ahero[key[i]];
                        target.push(heroinfo);
                    }
                    target.push(H52D_Framework.MasterPlayer.Instance.player.vo);
                    for (var k in pet) {
                        if (pet[k]) {
                            target.push(pet[k]);
                        }
                    }
                    target.push(H52D_Framework.BCampManager.Instance.vo);
                    break;
            }
            return target;
        };
        SelectTarget.PImpactTarget = function (id, data) {
            var player = data["player"];
            var heroList = data["heroList"];
            var pet = data["pet"][0];
            var camp = data["camp"];
            var attr = new H52D_Framework.Attribute();
            var target_id = attr.GetAttributeTargetID(id);
            var target = [];
            switch (target_id) {
                case 1:
                    target.push(player);
                    break;
                case 2:
                    for (var k in heroList) {
                        if (heroList[k] && heroList[k].hero_Type == 1) {
                            target.push(heroList[k]);
                        }
                    }
                    break;
                case 3:
                    for (var k in heroList) {
                        if (heroList[k] && heroList[k].hero_Type == 2) {
                            target.push(heroList[k]);
                        }
                    }
                    break;
                case 4:
                    for (var k in heroList) {
                        if (heroList[k]) {
                            target.push(heroList[k]);
                        }
                    }
                    break;
                case 5:
                    target.push(pet);
                    break;
                case 6:
                    target.push(camp);
                    break;
                case 7:
                    for (var k in heroList) {
                        if (heroList[k]) {
                            target.push(heroList[k]);
                        }
                    }
                    target.push(camp);
                    target.push(pet);
                    break;
            }
            return target;
        };
        SelectTarget.BuffTarget = function (buffdata, statusTarget, owner) {
            var target = [];
            var Harr;
            if (H52D_Framework.BattleManager.Instance.HeroCardMgr.CHeroList) {
                Harr = H52D_Framework.BattleManager.Instance.HeroCardMgr.CHeroList;
            }
            var monster;
            if (H52D_Framework.BattleManager.Instance.MonsterFormation) {
                monster = H52D_Framework.BattleManager.Instance.MonsterFormation.Getobject;
            }
            // if(!owner) return;
            switch (statusTarget) {
                /**自己 */
                case 1:
                    target.push(owner);
                    break;
                /**敌人 */
                case 2:
                    if (owner || owner.Target) {
                        target = owner.Target.concat();
                    }
                    break;
                /**我方队长 */
                case 3:
                    for (var i = 0; i < Harr.length; i++) {
                        if (Harr[i]) {
                            if (Harr[i].vo.location == 4) {
                                target.push(Harr[i]);
                            }
                        }
                    }
                    break;
                /**敌方队长 */
                case 4:
                    for (var k in monster) {
                        var m = monster[k];
                        if (m && m.vo.location == 4) {
                            target.push(m);
                        }
                    }
                    break;
                /**同排英雄 */
                case 5:
                    for (var i = 0; i < Harr.length; i++) {
                        if (Harr[i]) {
                            var rowNum = owner.vo.rowNum;
                            if (Harr[i].vo.rowNum == rowNum && owner.ID != Harr[i].ID) {
                                target.push(Harr[i]);
                            }
                        }
                    }
                    break;
                /**同列英雄 */
                case 6:
                    for (var i = 0; i < Harr.length; i++) {
                        if (Harr[i]) {
                            var colNum = owner.vo.colNum;
                            if (Harr[i].vo.colNum == colNum && owner.ID != Harr[i].ID) {
                                target.push(Harr[i]);
                            }
                        }
                    }
                    break;
                /**与队长范围内一格的英雄 */
                case 7:
                    for (var i = 0; i < Harr.length; i++) {
                        if (Harr[i]) {
                            var location_1 = Harr[i].vo.location;
                            if (location_1 == 1
                                || location_1 == 3
                                || location_1 == 5
                                || location_1 == 7) {
                                target.push(Harr[i]);
                            }
                        }
                    }
                    break;
                /**所有出战但未激活的英雄 */
                case 8:
                    var hclist = H52D_Framework.HeroManager.Instance.NHero();
                    for (var i = 0; i < hclist.length; i++) {
                        var hcdata = H52D_Framework.HeroManager.Instance.GetHero(hclist[i]);
                        var hc = new H52D_Framework.HeroCard(hcdata);
                        target.push(hc);
                    }
                    break;
                /**所有出战的英雄 */
                case 9:
                    target = Harr.concat();
                    break;
            }
            var id = buffdata.attributeId;
            if (!statusTarget || statusTarget == 0) {
                target = Harr.concat();
                if (id == 17 || id == 27 || id == 37 || id == 47) {
                    target.push(H52D_Framework.MasterPlayer.Instance.player);
                    target.push(H52D_Framework.BPetManager.Instance.PetIns);
                    target.push(H52D_Framework.BCampManager.Instance.Camp);
                }
            }
            return target;
        };
        SelectTarget.PBuffTarget = function (buffdata, statusTarget, owner, btype) {
            var target = [];
            var Owner = [];
            var Enemy = [];
            var player = null;
            var pet = null;
            var camp = null;
            if (btype == 1) {
                Owner = H52D_Framework.BattlefieldManager.Instance.Characterlist[0].HeroList;
                Enemy = H52D_Framework.BattlefieldManager.Instance.Characterlist[1].HeroList;
                player = H52D_Framework.BattlefieldManager.Instance.Characterlist[0].player;
                if (H52D_Framework.BattlefieldManager.Instance.Characterlist[0].petMgr)
                    pet = H52D_Framework.BattlefieldManager.Instance.Characterlist[0].petMgr.PetIns;
                if (H52D_Framework.BattlefieldManager.Instance.Characterlist[0].campMgr)
                    camp = H52D_Framework.BattlefieldManager.Instance.Characterlist[0].campMgr.Camp;
            }
            else {
                Owner = H52D_Framework.BattlefieldManager.Instance.Characterlist[1].HeroList;
                Enemy = H52D_Framework.BattlefieldManager.Instance.Characterlist[0].HeroList;
                player = H52D_Framework.BattlefieldManager.Instance.Characterlist[1].player;
                if (H52D_Framework.BattlefieldManager.Instance.Characterlist[1].petMgr)
                    pet = H52D_Framework.BattlefieldManager.Instance.Characterlist[1].petMgr.PetIns;
                if (H52D_Framework.BattlefieldManager.Instance.Characterlist[1].campMgr)
                    camp = H52D_Framework.BattlefieldManager.Instance.Characterlist[1].campMgr.Camp;
            }
            switch (statusTarget) {
                /**自己 */
                case 1:
                    target.push(owner);
                    break;
                /**敌人 */
                case 2:
                    if (owner || owner.Target) {
                        target = owner.Target.concat();
                    }
                    break;
                /**我方队长 */
                case 3:
                    for (var i = 0; i < Owner.length; i++) {
                        if (Owner[i]) {
                            if (Owner[i].vo.location == 4) {
                                target.push(Owner[i]);
                            }
                        }
                    }
                    break;
                /**敌方队长 */
                case 4:
                    for (var k in Enemy) {
                        var m = Enemy[k];
                        if (m && m.vo.location == 4) {
                            target.push(m);
                        }
                    }
                    break;
                /**同排英雄 */
                case 5:
                    for (var i = 0; i < Owner.length; i++) {
                        if (Owner[i]) {
                            var rowNum = owner.vo.rowNum;
                            if (Owner[i].vo.rowNum == rowNum && owner.ID != Owner[i].ID) {
                                target.push(Owner[i]);
                            }
                        }
                    }
                    break;
                /**同列英雄 */
                case 6:
                    for (var i = 0; i < Owner.length; i++) {
                        if (Owner[i]) {
                            var colNum = owner.vo.colNum;
                            if (Owner[i].vo.colNum == colNum && owner.ID != Owner[i].ID) {
                                target.push(Owner[i]);
                            }
                        }
                    }
                    break;
                /**与队长范围内一格的英雄 */
                case 7:
                    for (var i = 0; i < Owner.length; i++) {
                        if (Owner[i]) {
                            var location_2 = Owner[i].vo.location;
                            if (location_2 == 1
                                || location_2 == 3
                                || location_2 == 5
                                || location_2 == 7) {
                                target.push(Owner[i]);
                            }
                        }
                    }
                    break;
                /**所有出战但未激活的英雄 */
                case 8:
                    var hclist = H52D_Framework.HeroManager.Instance.NHero();
                    for (var i = 0; i < hclist.length; i++) {
                        var hcdata = H52D_Framework.HeroManager.Instance.GetHero(hclist[i]);
                        var hc = new H52D_Framework.HeroCard(hcdata);
                        target.push(hc);
                    }
                    break;
                /**所有出战的英雄 */
                case 9:
                    target = Owner.concat();
                    break;
            }
            var id = buffdata.attributeId;
            if (!statusTarget || statusTarget == 0) {
                target = Owner.concat();
                if (id == 17 || id == 27 || id == 37 || id == 47) {
                    target.push(player);
                    target.push(pet);
                    target.push(camp);
                }
            }
            return target;
        };
        return SelectTarget;
    }());
    H52D_Framework.SelectTarget = SelectTarget;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SelectTarget.js.map
/*
* 角色技能
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**玩家技能类 常万 */
    var PlaySkill = /** @class */ (function () {
        /**初始化 */
        function PlaySkill() {
            /**玩家技能列表 */
            this._skillTab = [];
            this._skillList = [101, 201, 301, 401, 501, 601];
            this.type = eCharacter_TYPE.PLAYER;
            this.SE = SkinEnum.SkinTap;
            this.SetSkillIDList();
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.SPELL_SKILL, Laya.Handler.create(this, this.Spell));
            this.vo = H52D_Framework.MasterPlayer.Instance.player.vo;
        }
        Object.defineProperty(PlaySkill, "Init", {
            get: function () {
                if (PlaySkill._init == null) {
                    PlaySkill._init = new PlaySkill();
                }
                return PlaySkill._init;
            },
            enumerable: true,
            configurable: true
        });
        /**初始化玩家技能 */
        PlaySkill.prototype.SetSkillIDList = function (index, skillId) {
            if (index && skillId) {
                var ret = new H52D_Framework.Skill(skillId, this, eBELONGS_TO.PLAYER);
                this._skillList[index] = skillId;
                this._skillTab[index].Destroy();
                this._skillTab[index] = ret;
            }
            else {
                //主动技能
                var roleSkill = H52D_Framework.MainRoleLogic.Instance.roleSkill;
                var roleSkillCfg = H52D_Framework.MainRoleLogic.Instance.roleSkillCfg;
                for (var i = 0; i < roleSkill.length; i++) {
                    var element = roleSkill[i].lv;
                    if (element > 0) {
                        this._skillList[i] = roleSkillCfg[i][element].roleSkillId;
                    }
                }
                for (var i in this._skillList) {
                    this._skillTab[i] = new H52D_Framework.Skill(this._skillList[i], this, eBELONGS_TO.PLAYER);
                }
            }
        };
        /**释放技能 */
        PlaySkill.prototype.Spell = function (index, skillId) {
            this.SetSkillIDList(index, skillId);
            if (index == 0) {
                this.DamageSkill();
            }
            else {
                this.BuffSkill(index);
            }
        };
        /**伤害型技能 */
        PlaySkill.prototype.DamageSkill = function () {
            var monster = H52D_Framework.BattleManager.Instance.MonsterFormation.Getobject;
            var captian = [];
            for (var k in monster) {
                var m = monster[k];
                if (m && m.vo.location == 4) {
                    captian.push(m);
                }
            }
            this._skillTab[0].SpellSkill(captian);
        };
        /**Buff类技能 */
        PlaySkill.prototype.BuffSkill = function (index) {
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/buff.mp3");
            }
            var herolist = H52D_Framework.BattleManager.Instance.HeroCardMgr.CHeroList;
            this._skillTab[index].SpellSkill(herolist);
        };
        PlaySkill.prototype.OnUpdate = function () {
            for (var k in this._skillTab) {
                this._skillTab[k].OnUpdate();
            }
        };
        /**销毁 */
        PlaySkill.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.SPELL_SKILL, Laya.Handler.create(this, this.Spell));
        };
        return PlaySkill;
    }());
    H52D_Framework.PlaySkill = PlaySkill;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PlaySkill.js.map
/**
* 被动技能表数据
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**被动技能数据 */
    var PassiveSkillData = /** @class */ (function () {
        function PassiveSkillData(id) {
            this.id = id;
        }
        Object.defineProperty(PassiveSkillData.prototype, "nameId", {
            /**名字ID */
            get: function () { return H52D_Framework.PassiveSkillConfig[this.id]["nameId"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(PassiveSkillData.prototype, "descId", {
            /**描述ID */
            get: function () { return H52D_Framework.PassiveSkillConfig[this.id]["descId"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(PassiveSkillData.prototype, "strIcon", {
            /**图标ID */
            get: function () { return H52D_Framework.PassiveSkillConfig[this.id]["strIcon"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(PassiveSkillData.prototype, "level", {
            /**等级 */
            get: function () { return H52D_Framework.PassiveSkillConfig[this.id]["level"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(PassiveSkillData.prototype, "scriptID", {
            /**被动技能类型 */
            get: function () { return H52D_Framework.PassiveSkillConfig[this.id]["scriptID"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(PassiveSkillData.prototype, "scriptParam", {
            /**参数 */
            get: function () { return H52D_Framework.PassiveSkillConfig[this.id]["scriptParam"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(PassiveSkillData.prototype, "isPiao", {
            /**是否飘技能名称 */
            get: function () { return H52D_Framework.PassiveSkillConfig[this.id]["isPiao"]; },
            enumerable: true,
            configurable: true
        });
        ;
        return PassiveSkillData;
    }());
    H52D_Framework.PassiveSkillData = PassiveSkillData;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PassiveSkillData.js.map
/**
* name
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**条件被动技能 */
    var ConditionsPassiveSkill = /** @class */ (function () {
        function ConditionsPassiveSkill(id, owner) {
            this._data = null;
            /**buff id */
            this._buffId = 0;
            /**英雄 id */
            this._heroid = 0;
            /**属性 id */
            this._attributeID = 0;
            /**触发几率*/
            this._triggerOdds = 0;
            /**属性加值*/
            this._attributeSubValue = 0;
            /**技能id */
            this.id = 0;
            /**作用目标 */
            this._target = [];
            this._bhurt = false;
            this._battack = false;
            this._owner = owner;
            this._data = new H52D_Framework.PassiveSkillData(id);
            this.id = id;
            this._buffTab = [];
            this.initParmae();
        }
        Object.defineProperty(ConditionsPassiveSkill.prototype, "BHurt", {
            get: function () { return this._bhurt; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionsPassiveSkill.prototype, "BAttack", {
            get: function () { return this._battack; },
            enumerable: true,
            configurable: true
        });
        ConditionsPassiveSkill.prototype.initParmae = function () {
            switch (this._data.scriptID) {
                case 2:
                    this._buffId = this._data.scriptParam[1];
                    break;
                case 3:
                    this._heroid = this._data.scriptParam[1];
                    this._buffId = this._data.scriptParam[2];
                    break;
                case 4:
                    this._triggerOdds = this._data.scriptParam[1];
                    this._buffId = this._data.scriptParam[2];
                    break;
                case 5:
                    this._triggerOdds = this._data.scriptParam[1];
                    this._buffId = this._data.scriptParam[2];
                    break;
                case 6:
                    this._buffId = this._data.scriptParam[1];
                    break;
            }
        };
        ConditionsPassiveSkill.prototype.Do = function () {
            this.Destroy();
            switch (this._data.scriptID) {
                case 2:
                    this.TNotHeroAddBuff();
                    break;
                case 3:
                    this.CommonHero();
                    break;
                case 4:
                    if (!this._battack)
                        this._battack = true;
                    break;
                case 5:
                    if (!this._bhurt)
                        this._bhurt = true;
                    break;
                case 6:
                    this.AddBuff();
                    break;
            }
        };
        /**目中无人*/
        ConditionsPassiveSkill.prototype.TNotHeroAddBuff = function () {
            var colnum = this._owner.vo.colNum;
            var monster = H52D_Framework.MonsterManager.Instance.monsterList;
            if (colnum == 2)
                return;
            for (var k in monster) {
                var m = monster[k];
                if (monster[k]) {
                    if (m.vo.colNum != colnum) {
                        var buf = new H52D_Framework.Buff(this._buffId, this._owner);
                        buf.Do();
                        this._buffTab.push(buf);
                        return;
                    }
                }
            }
        };
        /**直接加buff */
        ConditionsPassiveSkill.prototype.AddBuff = function () {
            var buf = new H52D_Framework.Buff(this._buffId, this._owner);
            buf.Do();
            this._buffTab.push(buf);
        };
        /**与基友上阵时候触发 */
        ConditionsPassiveSkill.prototype.CommonHero = function () {
            var hl = H52D_Framework.BattleManager.Instance.HeroCardMgr.CHeroList;
            var Len = H52D_Framework.GetTabLength(hl);
            for (var i = 0; i < Len; i++) {
                if (hl[i]) {
                    if (hl[i].vo.nHeroID == this._heroid) {
                        var buf = new H52D_Framework.Buff(this._buffId, this._owner);
                        buf.Do();
                        this._buffTab.push(buf);
                        return;
                    }
                }
            }
        };
        /**攻击时触发Buff */
        ConditionsPassiveSkill.prototype.AttackTriggerSkill = function () {
            var num = Math.random() * 10000;
            if (num <= this._triggerOdds) {
                var buf = new H52D_Framework.Buff(this._buffId, this._owner);
                buf.Do();
                this._buffTab.push(buf);
            }
        };
        /**挨揍了触发 */
        ConditionsPassiveSkill.prototype.OnHurtTrigger = function () {
            var num = Math.random() * 10000;
            if (num <= this._triggerOdds) {
                var buf = new H52D_Framework.Buff(this._buffId, this._owner);
                buf.Do();
                this._buffTab.push(buf);
            }
        };
        ConditionsPassiveSkill.prototype.Destroy = function () {
            if (this._buffTab) {
                var len = this._buffTab.length;
                for (var i = 0; i < len; i++) {
                    if (this._buffTab[i]) {
                        this._buffTab[i].Destroy();
                        this._buffTab[i] = null;
                    }
                }
            }
            this._battack = false;
            this._bhurt = false;
            this._buffTab = [];
        };
        return ConditionsPassiveSkill;
    }());
    H52D_Framework.ConditionsPassiveSkill = ConditionsPassiveSkill;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ConditionsPassiveSkill.js.map
/**
* 属性被动管理
*/
var H52D_Framework;
(function (H52D_Framework) {
    /***属性被动技能管理*/
    var AttributePassiveManager = /** @class */ (function () {
        function AttributePassiveManager() {
            /**被动属性技能列表 */
            this._attributePassive = [];
        }
        Object.defineProperty(AttributePassiveManager, "Instance", {
            get: function () {
                if (!AttributePassiveManager._instance) {
                    AttributePassiveManager._instance = new AttributePassiveManager();
                }
                return AttributePassiveManager._instance;
            },
            enumerable: true,
            configurable: true
        });
        /**初始化被动 */
        AttributePassiveManager.prototype.Init = function () {
            this._attributePassive = [];
            var idList = [];
            var Ahero = H52D_Framework.HeroManager.Instance.Herolist;
            /**获取所有英雄的被动ID */
            for (var k in Ahero) {
                var info = Ahero[k];
                for (var j = 0; j < info.attributeID.length; j++) {
                    var ele = { id: info.attributeID[j], heroid: info.nHeroID };
                    idList.push(ele);
                }
            }
            /**初始化属性被动技能 */
            for (var i = 0; i < idList.length; i++) {
                var id = idList[i].id;
                var heroid = idList[i].heroid;
                var pas = new H52D_Framework.AttributePassive(id, Ahero[heroid]);
                this._attributePassive.push(pas);
            }
            /**产生被动加属性效果 */
            for (var i = 0; i < this._attributePassive.length; i++) {
                if (this._attributePassive[i]) {
                    this._attributePassive[i].OnEffect();
                }
            }
            /**刷新小面板UI*/
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.REFFIXEDATTR);
        };
        /**解锁属性被动 */
        AttributePassiveManager.prototype.OnLock = function (id, heroid) {
            var Ahero = H52D_Framework.HeroManager.Instance.Herolist;
            var type_id = H52D_Framework.PassiveSkillConfig[id]["scriptID"];
            if (type_id == 1) {
                var pas = new H52D_Framework.AttributePassive(id, Ahero[heroid]);
                pas.OnEffect();
                this._attributePassive.push(pas);
            }
            /**刷新小面板UI*/
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.REFFIXEDATTR);
        };
        AttributePassiveManager.prototype.Update = function () {
            for (var k in H52D_Framework.HeroManager.Instance.Herolist) {
                H52D_Framework.HeroManager.Instance.Herolist[k].UpdateAttrbute();
            }
            H52D_Framework.MasterPlayer.Instance.player.vo.UpdatePassive();
            if (H52D_Framework.MasterPlayer.Instance.player.CampID > 0) {
                H52D_Framework.BCampManager.Instance.vo.UpdatePassiveAttribute();
            }
            if (H52D_Framework.PetManager.Instance.CurrentpetID > 0) {
                var petvo = H52D_Framework.PetManager.Instance.GetPet_Instance(H52D_Framework.PetManager.Instance.CurrentpetID);
                petvo.UpdatePassiveAttribute();
            }
            for (var i = 0; i < this._attributePassive.length; i++) {
                if (this._attributePassive[i]) {
                    this._attributePassive[i].OnEffect();
                }
            }
            /**更新小面板属性 */
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.REFFIXEDATTR);
        };
        AttributePassiveManager._instance = null;
        return AttributePassiveManager;
    }());
    H52D_Framework.AttributePassiveManager = AttributePassiveManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=AttributePassiveManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**属性被动技能 */
    var AttributePassive = /** @class */ (function () {
        function AttributePassive(id, owner) {
            this.id = 0;
            this._data = null;
            /**属性id */
            this._attributeID = 0;
            /**属性加值*/
            this._attributeSubValue = 0;
            /**作用目标 */
            this._target = [];
            this._owner = owner;
            this._data = new H52D_Framework.PassiveSkillData(id);
            this.id = id;
            this._attributeID = this._data.scriptParam[1];
            this._attributeSubValue = this._data.scriptParam[2];
        }
        /**产生效果 */
        AttributePassive.prototype.OnEffect = function () {
            this._target = [];
            this._target = H52D_Framework.SelectTarget.ImpactTarget(this._attributeID, this._owner).concat();
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    this.AddAttribute(this._target[i]);
                }
            }
        };
        /**为单个目标 修改属性 */
        AttributePassive.prototype.AddAttribute = function (target) {
            var attr = target.attr;
            if (this._attributeID == 53 || this._attributeID == 51) {
                this.AttributePlayer();
                return;
            }
            var modfiy_id = attr.GetAttributeModfiyID(this._attributeID);
            var isPercent = attr.GetAttributeIsPer(modfiy_id);
            if (isPercent == 1) {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Percent, this._attributeSubValue);
            }
            else {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Fixed, this._attributeSubValue);
            }
        };
        /**增加主角特有属性 */
        AttributePassive.prototype.AttributePlayer = function () {
            if (this._attributeID == 53) {
                var subvalue = this._attributeSubValue / 10000;
                var mpCurrent = H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeTypeValue(53, H52D_Framework.eValueType.Base);
                var NowValue = mpCurrent * subvalue;
                NowValue = Math.ceil(NowValue);
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, H52D_Framework.eValueType.Fixed, NowValue);
                H52D_Framework.Event.DispatchEvent("MpRecoveryRateChange");
                return;
            }
            if (this._attributeID == 51) {
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, H52D_Framework.eValueType.Fixed, this._attributeSubValue);
                H52D_Framework.Event.DispatchEvent("MpPoolChange");
                return;
            }
        };
        AttributePassive.prototype.Destroy = function () {
            this._target = [];
        };
        return AttributePassive;
    }());
    H52D_Framework.AttributePassive = AttributePassive;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=AttributePassive.js.map
/**
* 点击技能类
*/
var H52D_Framework;
(function (H52D_Framework) {
    var TapSkill = /** @class */ (function () {
        function TapSkill(viewRoot) {
            this._path = "";
            this._name = "";
            this._scla = 0;
            this._dir = 1;
            this._sData = new H52D_Framework.SkillData(100);
            this._path = this._sData.actionEffect["3"];
            this._name = this._sData.actionEffect["4"];
            this._scla = this._sData.actionEffect["5"];
            this._dir = 1;
            this._viewRoot = viewRoot ? viewRoot : H52D_Framework.EffectRoot;
            this._sData = null;
        }
        /**点击技能 */
        TapSkill.prototype.TapSkill = function (clickType) {
            var _this = this;
            if (!this._tapAvatar) {
                this._tapAvatar = new H52D_Framework.Avatar(this._viewRoot);
                this._tapAvatar.Load(this._path, this._dir, this._scla, 0, 0, Laya.Handler.create(this, function () { _this.PlayTapEffect(clickType); }));
            }
            else {
                this.PlayTapEffect(clickType);
            }
        };
        /**播放技能特效 */
        TapSkill.prototype.PlayTapEffect = function (clickType) {
            if (!this._tapAvatar)
                return;
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/tap_sound.mp3");
            }
            if (clickType == 1) {
                var x = Laya.MouseManager.instance.mouseX;
                var y = Laya.MouseManager.instance.mouseY;
                var point = this._viewRoot.globalToLocal(new Laya.Point(x, y));
                this._tapAvatar.PosX = point.x;
                this._tapAvatar.PosY = point.y;
                //if(PrivilegeBuff.Instance.IsStart)
                this._tapAvatar.Play(this._name, false);
            }
        };
        TapSkill.prototype.Destroy = function () {
            if (this._tapAvatar) {
                this._tapAvatar.Destroy();
                this._tapAvatar = null;
            }
        };
        return TapSkill;
    }());
    H52D_Framework.TapSkill = TapSkill;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TapSkill.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**子弹类 */
    var SkillObject = /** @class */ (function () {
        function SkillObject(owner, data, view, to) {
            /**技能数据 */
            this._data = {};
            this.isdestroy = false;
            /** 抛物线开口参数：a */
            this.a = 0.003;
            /**
             * 1 抛物线
             * 2 直线
             */
            this._flyType = 0;
            /**被击特效播放 */
            this._hitAvatar = null;
            /**目标终点 */
            this._EndX = 0;
            /**目标起点X */
            this._TPosX = 0;
            /**目标起点Y */
            this._TPosY = 0;
            this._dir = 1;
            this._bcomplete = false;
            this.isdestroy = false;
            this._bcomplete = false;
            this._skillData = data;
            this._ViewRoot = view;
            this._dir = 1;
            this._owner = owner;
            this._flyType = this._skillData.flyEffect[2];
            this._belongs = to;
        }
        Object.defineProperty(SkillObject.prototype, "A", {
            get: function () {
                return this.a;
            },
            set: function (v) {
                this.a = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillObject.prototype, "Speed", {
            get: function () {
                return this.speed;
            },
            set: function (v) {
                this.a = v;
            },
            enumerable: true,
            configurable: true
        });
        // private _btype:number = 0;
        /**
         * 飞行曲线的参数调整
         * @param a 抛物线
         * @param speed 速度
         * @param start_point 子弹起点位置调节
         * @param end_x 子弹终点位置调节
         * @param end_y 子弹终点位置调节
         * @param area 子弹随机区域宽高
         * @param start_angle 初始角度调整s
         */
        SkillObject.prototype.Bullet = function (a, speed, start_point, end_x, end_y, area, start_angle) {
            if (a === void 0) { a = 3; }
            if (speed === void 0) { speed = 4; }
            if (end_x === void 0) { end_x = 0; }
            if (end_y === void 0) { end_y = -100; }
            if (area === void 0) { area = 100; }
            if (start_angle === void 0) { start_angle = 0; }
            this.a = a * 0.001;
            this.speed = speed * 0.01;
            this.correct_start_point = start_point;
            this.correct_end_x = end_x;
            this.correct_end_y = end_y;
            this.area = area;
            this.correct_angle = start_angle;
        };
        // Event.RegistEvent(EventDefine.MONSTER_DIE, Laya.Handler.create(this, this.MonsterDie));
        SkillObject.prototype.MonsterDie = function (id) {
            //let mon = this._target as Monster;
            //if (mon.vo.id == id) {
            this.CheckIsDestroy();
            //}
        };
        Object.defineProperty(SkillObject.prototype, "BComplete", {
            get: function () { return this._bcomplete; },
            set: function (value) { this._bcomplete = value; },
            enumerable: true,
            configurable: true
        });
        SkillObject.prototype.OnUpdate = function () {
        };
        /**释放技能*/
        SkillObject.prototype.Spell = function (target) {
            this._target = null;
            this._target = target;
            this.isdestroy = false;
            this._bcomplete = false;
            this.LoadSkillEffect();
        };
        SkillObject.prototype.LoadSkillEffect = function () {
            var _this = this;
            if (this._Object) {
                this.PlaySkillEffect();
            }
            else {
                this._Object = new H52D_Framework.Avatar(this._ViewRoot);
                this._Object.Load(this._skillData.flyEffect[3], this._dir, this._skillData.flyEffect["6"], 0, 0, Laya.Handler.create(this, function () { _this.PlaySkillEffect(); }));
            }
        };
        /**飞行特效*/
        SkillObject.prototype.PlaySkillEffect = function () {
            if (this.CheckIsDestroy()) {
                return;
            }
            this._EndX = this._target.PosX;
            //攻击动作开始后的延迟时间点上播放子弹特效
            var time = this._skillData.flyEffect["7"];
            var pointID = this._skillData.flyEffect["1"];
            var pointArr = H52D_Framework.OSkillPoint[pointID - 1];
            var point = new Laya.Point(pointArr[0], pointArr[1]);
            var h = 50 + Math.random() * 200;
            var area_target = 20;
            if (this._owner.type == eCharacter_TYPE.CAMP)
                h = 90;
            area_target = 0;
            // if(this._btype == -1){h = 100;area_target = 0;}
            switch (this._flyType) {
                case 1:
                    this.Bullet(3, this._skillData.flyEffect["5"], point, 0, -h, area_target, 0);
                    break;
                case 2:
                    this.Bullet(0, this._skillData.flyEffect["5"], point, 0, -h, area_target, 0);
                    break;
            }
            this._TPosX = this._target.PosX;
            this._TPosY = this._target.PosY;
            H52D_Framework.Tick.Once(time, this, this.palyEffect);
        };
        /**攻击特效 */
        SkillObject.prototype.palyEffect = function () {
            if (this._Object) {
                this._Object.visible = true;
                this._Object.Play(this._skillData.flyEffect[4], true);
                //起点绝对位置
                this.start_x = this._owner.avatar.PosX + this.correct_start_point.x;
                this.start_y = this._owner.avatar.PosY + this.correct_start_point.y;
                var t = this._TPosX;
                //终点相对位置,随机区域范围
                this.end_x = this._TPosX - this.start_x + this.correct_end_x + (Math.random() - 0.5) * this.area;
                this.end_y = this._TPosY - this.start_y + this.correct_end_y + (Math.random() - 0.5) * this.area;
                this._Object.PosX = this.start_x;
                this._Object.PosY = this.start_y;
                //步阶
                this.step_x = this.speed;
                if (this._Object) {
                    H52D_Framework.Tick.FrameLoop(1, this, this.FrameHander);
                }
            }
            else {
                this.isdestroy = true;
            }
        };
        /**更新逻辑 */
        SkillObject.prototype.FrameHander = function () {
            if (this._Object) {
                this._Object.PosX += (this.speed / 6) * H52D_Framework.Time.deltaTime;
                // y = a*x*x + b*x; b = -a*m + n/m; 推算公式：m、n分别是终点的x、y 400,160
                var x = this._Object.PosX - this.start_x;
                var b = (-this.a * this.end_x + this.end_y / this.end_x);
                this.step_y = this.a * x * x + b * x;
                this._Object.PosY = this.start_y + this.step_y;
                //旋转角度，求导 tan& = 2 * a * x + b;
                this.step_angle = Math.atan(2 * this.a * x + b) * 180 / Math.PI;
                this._Object.Rotate(this.correct_angle + this.step_angle);
                if (this._Object.PosX >= this._EndX) {
                    this.OnComplete();
                }
            }
            else {
                this.isdestroy = true;
            }
        };
        // private OnHurt(): void {
        // 	if (!this._target || !this._owner) return;
        // 	/**伤害计算 */
        // 	let skilldamage = new SkillDamage(this._owner, this._target, this._skillData.damageList);
        // 	let damage = skilldamage.ComputeDamage(this._target);
        // 	/**目标受伤 */
        // 	this._target.OnHurt(damage + this._skillData.fixedDamage >> 0, this._owner.SE, skilldamage.bCrit);
        // }
        /**远程特效到达目标点的回调 */
        SkillObject.prototype.OnComplete = function () {
            this.Hidden();
            this._bcomplete = true;
            // if (this.CheckIsDestroy()) {
            // 	return;
            // }
            /**播放被击特效 */
            var x = this._Object.PosX;
            var y = this._Object.PosY;
            if (!H52D_Framework.ObjIsEmpty(this._skillData.hitEffect)) {
                this.LoadHitEffect(x, y);
            }
        };
        SkillObject.prototype.LoadHitEffect = function (x, y) {
            var _this = this;
            if (this._hitAvatar) {
                this.PlayHitEffect(x, y);
            }
            else {
                this._hitAvatar = new H52D_Framework.Avatar(H52D_Framework.AvatarEffectRoot);
                this._hitAvatar.Load(this._skillData.hitEffect[1], this._dir, this._skillData.hitEffect[3], x, y, Laya.Handler.create(this, function () { _this.PlayHitEffect(x, y); }));
            }
        };
        SkillObject.prototype.PlayHitEffect = function (x, y) {
            var _this = this;
            if (this.CheckIsDestroy()) {
                return;
            }
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound(this._skillData.hitSound[1]);
            }
            if (this._hitAvatar.Armature) {
                this._hitAvatar.visible = true;
                this._hitAvatar.PosX = x;
                this._hitAvatar.PosY = y;
                this._hitAvatar.Play(this._skillData.hitEffect[2], false, true, function () {
                    _this.isdestroy = true;
                });
            }
        };
        /**检查是否需要销毁 */
        SkillObject.prototype.CheckIsDestroy = function () {
            if (!this._target || this._target.IsDie || !this._owner || !this._owner.avatar) {
                this.isdestroy = true;
                return true;
            }
            return false;
        };
        SkillObject.prototype.Hidden = function () {
            this.isdestroy = true;
            if (this._Object && this._Object.Armature) {
                this._Object.visible = false;
            }
            H52D_Framework.Tick.Clear(this, this.FrameHander);
        };
        SkillObject.prototype.Destroy = function () {
            if (this._Object) {
                this._Object.Destroy();
                this._Object = null;
            }
            if (this._hitAvatar) {
                this._hitAvatar.Destroy();
                this._hitAvatar = null;
            }
        };
        return SkillObject;
    }());
    H52D_Framework.SkillObject = SkillObject;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SkillObject.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**非子弹类 */
    var SkillNone = /** @class */ (function () {
        // private _btype: number = 0;
        function SkillNone(owner, data, view, to) {
            /**朝向 */
            this._dir = 1;
            this._order = 0;
            this._posX = 0;
            this._posY = 1;
            /**特效列表 */
            this._avtarTab = [];
            /**被击特效列表*/
            this._hitAvatarTab = [];
            this.isDie = false;
            this._bcomplete = false;
            this._skillData = data;
            this._owner = owner;
            this._order = 0;
            this._dir = 1;
            this._ViewRoot = view;
            this._avtarTab = [];
            this._hitAvatarTab = [];
            // this._btype = btype;
            this._belongs = to;
        }
        Object.defineProperty(SkillNone.prototype, "BComplete", {
            get: function () { return this._bcomplete; },
            set: function (value) { this._bcomplete = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillNone.prototype, "_path", {
            /**特效路径 */
            get: function () { return this._skillData.actionEffect[3]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillNone.prototype, "_scla", {
            /**特效大小 */
            get: function () { return this._skillData.actionEffect[5]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillNone.prototype, "_PointId", {
            /**特效挂点ID */
            get: function () { return this._skillData.actionEffect[1]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillNone.prototype, "_delayTime", {
            /**延迟时间 */
            get: function () { return this._skillData.actionEffect[2]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillNone.prototype, "_name", {
            /**特效动画名字 */
            get: function () { return this._skillData.actionEffect[4]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillNone.prototype, "_hitPath", {
            /**被击特效路径 */
            get: function () { return this._skillData.hitEffect[1]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillNone.prototype, "_hitName", {
            /**被击特效动画名 */
            get: function () { return this._skillData.hitEffect[2]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillNone.prototype, "_hitScla", {
            /**被击特效大小 */
            get: function () { return this._skillData.hitEffect[3]; },
            enumerable: true,
            configurable: true
        });
        /**释放技能 */
        SkillNone.prototype.SpellSkill = function (target, _belongs) {
            var _this = this;
            this._avtarTab = [];
            this._hitAvatarTab = [];
            this._target = [];
            this._bcomplete = false;
            if (this._skillData.special == 1) {
                /**设置目标 */
                for (var i = 0; i < target.length; i++) {
                    this._target.push(target[i]);
                }
            }
            else {
                for (var i = 0; i < target.length; i++) {
                    if ((target[i])) {
                        this._target.push(target[i]);
                        break;
                    }
                }
            }
            /**攻击特效 */
            for (var i = 0; i < target.length; i++) {
                this.DoPlayEffect(this._delayTime, target[i]);
            }
            /**有人物模型的 */
            if (this._owner.avatar) {
                H52D_Framework.Tick.Once(200, this, function () {
                    _this.AttackOnComplete();
                });
            }
            else {
                this.AttackOnComplete();
            }
        };
        /**攻击回调 */
        SkillNone.prototype.AttackOnComplete = function () {
            this.DoHitEffect();
            this._bcomplete = true;
            if (this._callBack) {
                this._callBack.run();
            }
        };
        /**目标受伤 */
        // private OnHurt(): void {
        // 	/**伤害计算 */
        // 	if (!ObjIsEmpty(this._skillData.damageList)) {
        // 		let skilldamage = new SkillDamage(this._owner,this._target,this._skillData.damageList);
        // 		for (let i = 0; i < this._target.length; i++) {
        // 			let mon: Monster = this._target[i] as Monster;
        // 			if (mon) {
        // 				let damage = skilldamage.ComputeDamage(mon);
        // 				mon.OnHurt(damage + this._skillData.fixedDamage >> 0,this._owner.SE, skilldamage.bCrit);
        // 			}
        // 		}
        // 		if (skilldamage.bCrit) {
        // 			let buff = new SkillBuff(this._skillData.statusList,this._owner,this._skillData.damageList);
        // 			buff.SetBuffasCrit();
        // 		}
        // 	}
        // }
        /**近战技能特效 */
        SkillNone.prototype.DoPlayEffect = function (time, target) {
            var _this = this;
            H52D_Framework.Tick.Once(time, this, function () {
                _this.PlaySkillEffect(target);
            });
        };
        SkillNone.prototype.PlaySkillEffect = function (target) {
            var _this = this;
            if (this.CheckDestroy())
                return;
            var avatar = new H52D_Framework.Avatar(this._ViewRoot);
            if (this._avtarTab) {
                this._avtarTab.push(avatar);
            }
            avatar.SetOrder(this._owner.Order);
            if (this._skillData.special == 2) {
                avatar.Load(this._path, this._dir, this._scla, 0, 0, Laya.Handler.create(this, function () {
                    _this.SkillPoint(avatar, target);
                    avatar.Play(_this._name, true, false, function () {
                    });
                    H52D_Framework.TweenList.to(_this, avatar, { PosX: 1000 }, 1000, function () {
                        avatar.PosX = 600;
                        avatar.Destroy();
                        avatar = null;
                    });
                }));
            }
            else {
                avatar.Load(this._path, this._dir, this._scla, 0, 0, Laya.Handler.create(this, function () {
                    _this.SkillPoint(avatar, target);
                    avatar.Play(_this._name, false, false, function () {
                        avatar.Destroy();
                        avatar = null;
                    });
                }));
            }
        };
        /**技能挂点 */
        SkillNone.prototype.SkillPoint = function (avatar, target) {
            if (!target)
                return;
            if (this._owner.avatar && this._belongs == eBELONGS_TO.ATTACK) {
                if (this._owner.avatar.Armature) {
                    var point = H52D_Framework.NSkillPoint[this._PointId - 1];
                    var Gglobal = this._ViewRoot.globalToLocal(new Laya.Point(this._owner.avatar.PosX + point[0], this._owner.avatar.PosY + point[1]));
                    avatar.PosX = this._owner.avatar.PosX + point[0];
                    avatar.PosY = this._owner.avatar.PosY + point[1];
                }
            }
            else if (this._belongs == eBELONGS_TO.ATTACK_S) {
                var point = void 0;
                if (target.type == eCharacter_TYPE.MONSTER) {
                    point = H52D_Framework.MonsterSkillPoint[this._PointId - 1];
                }
                else {
                    point = H52D_Framework.HeroSkillPoint[this._PointId - 1];
                }
                avatar.PosX = target.PosX + point[0];
                avatar.PosY = target.PosY + point[1];
            }
            else {
                var point = void 0;
                if (!H52D_Framework.ObjIsEmpty(this._skillData.point)) {
                    point = [this._skillData.point[1], this._skillData.point[2]];
                }
                else {
                    point = [0, 0];
                }
                avatar.PosX = target.PosX + point[0];
                avatar.PosY = target.PosY + point[1];
            }
        };
        SkillNone.prototype.DoHitEffect = function () {
            if (!H52D_Framework.ObjIsEmpty(this._skillData.hitEffect)) {
                for (var i = 0; i < this._target.length; i++) {
                    if (this._target[i]) {
                        if (this._target[i].avatar) {
                            var h = 50 + Math.random() * 200; //this._target[i].avatar.height * 0.5;
                            var newPos = new Laya.Point(this._target[i].PosX, this._target[i].PosY - h);
                            newPos.x += Math.random() * 40 - 20;
                            newPos.y += Math.random() * 40 - 20;
                            /**受伤特效 */
                            this.PlayHitEffect(newPos.x, newPos.y);
                        }
                    }
                }
            }
        };
        SkillNone.prototype.PlayHitEffect = function (x, y) {
            var _this = this;
            var hitAvatar = new H52D_Framework.Avatar(H52D_Framework.AvatarEffectRoot);
            if (this._hitAvatarTab) {
                this._hitAvatarTab.push(hitAvatar);
            }
            hitAvatar.Load(this._hitPath, this._dir, this._hitScla, x, y, Laya.Handler.create(this, function () {
                if (H52D_Framework.MasterPlayer.Instance.player.Sound && _this._skillData.hitSound[1] != null) {
                    H52D_Framework.SoundManager.Instance.OnPlaySound(_this._skillData.hitSound[1]);
                }
                hitAvatar.Play(_this._hitName, false, false, function () {
                    hitAvatar.Destroy();
                    hitAvatar = null;
                    _this.isDie = true;
                });
                hitAvatar.PosX = x;
                hitAvatar.PosY = y;
            }));
        };
        SkillNone.prototype.CheckDestroy = function () {
            if (!this._owner || H52D_Framework.GetTabLength(this._target) == 0) {
                this.HitTabDestroy();
                return true;
            }
            return false;
        };
        SkillNone.prototype.HitTabDestroy = function () {
            for (var k in this._hitAvatarTab) {
                if (this._hitAvatarTab[k]) {
                    if (this._hitAvatarTab[k].Armature) {
                        this._hitAvatarTab[k].visible = false;
                    }
                    this._hitAvatarTab[k].Destroy();
                    this._hitAvatarTab[k] = null;
                }
            }
            this._hitAvatarTab = [];
        };
        SkillNone.prototype.AvatarTabDestroy = function () {
            for (var k in this._avtarTab) {
                if (this._avtarTab[k]) {
                    if (this._avtarTab[k].Armature) {
                        this._avtarTab[k].visible = false;
                    }
                    this._avtarTab[k].Destroy();
                    this._avtarTab[k] = null;
                }
            }
            this._avtarTab = [];
        };
        SkillNone.prototype.Destroy = function () {
            this.AvatarTabDestroy();
            this.HitTabDestroy();
        };
        return SkillNone;
    }());
    H52D_Framework.SkillNone = SkillNone;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SkillNone.js.map
/**
* 技能数据类
*/
var H52D_Framework;
(function (H52D_Framework) {
    var SkillData = /** @class */ (function () {
        function SkillData(id) {
            this.id = id;
        }
        Object.defineProperty(SkillData.prototype, "nameId", {
            /** 名称ID*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].nameId; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "descId", {
            /** 描述ID*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].descId; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "strIcon", {
            /** 图标名称*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].nameId; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "actionEffect", {
            /** 技能特效*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].actionEffect; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "flyEffect", {
            /** 子弹特效*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].flyEffect; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "hitEffect", {
            /** 被击特效*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].hitEffect; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "soundParam", {
            /** 技能音效*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].soundParam; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "hitSound", {
            /** 被击音效*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].hitSound; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "level", {
            /** 技能等级*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].level; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "conMp", {
            /** 法力消耗*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].conMp; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "skillCD", {
            /** 技能cd*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].skillCD; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "hitEnemyMode", {
            /** 攻击目标*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].hitEnemyMode; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "hitEnemyNum", {
            /** 攻击数量*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].hitEnemyNum; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "damageList", {
            /** 技能伤害*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].damageList; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "statusList", {
            /** 技能状态*/
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].statusList; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "hierarchy", {
            /** 技能层级 */
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].hierarchy; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "shake", {
            /**效果id */
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].shake; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "point", {
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].point; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "special", {
            get: function () { return H52D_Framework.ActiveSkillConfig[this.id].special; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkillData.prototype, "fixedDamage", {
            get: function () {
                if (H52D_Framework.ActiveSkillConfig[this.id].fixedDamage[1])
                    return H52D_Framework.ActiveSkillConfig[this.id].fixedDamage[1];
                else
                    return 0;
            },
            enumerable: true,
            configurable: true
        });
        return SkillData;
    }());
    H52D_Framework.SkillData = SkillData;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SkillData.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**技能伤害计算类 @author zhangzhenming */
    var SkillDamage = /** @class */ (function () {
        function SkillDamage(onwer, target, data) {
            this._owner = onwer;
            this._target = target;
            this._data = data;
            this._bCrit = false;
        }
        Object.defineProperty(SkillDamage.prototype, "bCrit", {
            get: function () { return this._bCrit; },
            enumerable: true,
            configurable: true
        });
        SkillDamage.prototype.IsCrit = function () {
            if (!this._owner.vo)
                return false;
            var attr = this._owner.vo.attr;
            var num = Math.random() * 10000;
            if (num == 0)
                return false;
            if (num <= attr.GetAttributeValue(4)) {
                return true;
            }
            return false;
        };
        /**加上减免 计算出的伤害 */
        SkillDamage.prototype.TDamage = function (ratio, target) {
            var damage = 0;
            if (!this._owner.vo)
                return 0;
            var attr = this._owner.vo.attr;
            /**目标类型 */
            var type = target.type;
            /**己方类型 */
            var otype = this._owner.type;
            var tattr = target.vo.attr;
            var im = 0;
            var imo = 0;
            switch (otype) {
                case eCharacter_TYPE.AHERO:
                    im = tattr.GetAttributeTypeValue(22, H52D_Framework.eValueType.Percent) +
                        tattr.GetAttributeTypeValue(24, H52D_Framework.eValueType.Percent) +
                        tattr.GetAttributeTypeValue(27, H52D_Framework.eValueType.Percent);
                    imo = tattr.GetAttributeTypeValue(22, H52D_Framework.eValueType.BPercent) +
                        tattr.GetAttributeTypeValue(24, H52D_Framework.eValueType.BPercent) +
                        tattr.GetAttributeTypeValue(27, H52D_Framework.eValueType.BPercent);
                    damage = attr.GetAttributeDamage(ratio, im, imo);
                    break;
                case eCharacter_TYPE.DHERO:
                    im = tattr.GetAttributeTypeValue(23, H52D_Framework.eValueType.Percent) +
                        tattr.GetAttributeTypeValue(24, H52D_Framework.eValueType.Percent) +
                        tattr.GetAttributeTypeValue(27, H52D_Framework.eValueType.Percent);
                    imo = tattr.GetAttributeTypeValue(23, H52D_Framework.eValueType.BPercent) +
                        tattr.GetAttributeTypeValue(24, H52D_Framework.eValueType.BPercent) +
                        tattr.GetAttributeTypeValue(27, H52D_Framework.eValueType.BPercent);
                    damage = attr.GetAttributeDamage(ratio, im, imo);
                    break;
                case eCharacter_TYPE.PLAYER:
                    im = tattr.GetAttributeTypeValue(21, H52D_Framework.eValueType.Percent)
                        + tattr.GetAttributeTypeValue(27, H52D_Framework.eValueType.Percent);
                    imo = tattr.GetAttributeTypeValue(21, H52D_Framework.eValueType.BPercent);
                    tattr.GetAttributeTypeValue(27, H52D_Framework.eValueType.BPercent);
                    damage = attr.GetAttributeDamage(ratio, im);
                    break;
                case eCharacter_TYPE.PET:
                    im = tattr.GetAttributeTypeValue(25, H52D_Framework.eValueType.Percent) +
                        tattr.GetAttributeTypeValue(27, H52D_Framework.eValueType.Percent);
                    imo = tattr.GetAttributeTypeValue(25, H52D_Framework.eValueType.BPercent) +
                        tattr.GetAttributeTypeValue(27, H52D_Framework.eValueType.BPercent);
                    damage = attr.GetAttributeDamage(ratio, im, imo);
                    break;
                case eCharacter_TYPE.CAMP:
                    im = tattr.GetAttributeTypeValue(26, H52D_Framework.eValueType.Percent) +
                        tattr.GetAttributeTypeValue(27, H52D_Framework.eValueType.Percent);
                    imo = tattr.GetAttributeTypeValue(26, H52D_Framework.eValueType.BPercent) +
                        tattr.GetAttributeTypeValue(27, H52D_Framework.eValueType.BPercent);
                    damage = attr.GetAttributeDamage(ratio, im, imo);
                    break;
            }
            return damage >> 0;
        };
        SkillDamage.prototype.ComputeDamage = function (target) {
            if (!this._owner)
                return;
            this._bCrit = false;
            var num = this._data["1"]["2"] / 10000;
            var damage = this.TDamage(num, target);
            if (this.IsCrit()) {
                this._bCrit = true;
                var attr = this._owner.vo.attr;
                var wfb = attr.GetAttributeValue(5) / 10000;
                damage = damage * wfb;
            }
            return damage >> 0;
        };
        SkillDamage.prototype.ComputeDamageN = function (target) {
            if (!this._owner)
                return;
            this._bCrit = false;
            var attr = this._owner.vo.attr;
            var num = this._data["1"]["2"] / 10000;
            var damage = attr.GetAttributeD(num);
            if (this.IsCrit()) {
                this._bCrit = true;
                var wfb = attr.GetAttributeValue(5) / 10000;
                damage = damage * wfb;
            }
            return damage >> 0;
        };
        return SkillDamage;
    }());
    H52D_Framework.SkillDamage = SkillDamage;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SkillDamage.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**技能BUff @author zhangzhenming*/
    var SkillBuff = /** @class */ (function () {
        function SkillBuff(data, owner) {
            this._bHave = false;
            this._data = data;
            this._owner = owner;
            if (!H52D_Framework.ObjIsEmpty(this._data)) {
                this._bHave = true;
                var id = this._data[1][3];
                this._buff = new H52D_Framework.Buff(id, this._owner);
            }
        }
        /**数据表里有BUFF就增加 */
        SkillBuff.prototype.SetBuffasHave = function (ratio) {
            this._ratio = ratio;
            if (this._bHave) {
                var num = Math.random() * 10000;
                var odds = this._data[1][2];
                var type = this._data[1][1];
                if (num <= odds && type != 2) {
                    this.AddBuff();
                }
            }
        };
        /**暴击增加BUFF */
        SkillBuff.prototype.SetBuffasCrit = function (ratio) {
            this._ratio = ratio;
            if (this._bHave) {
                var num = Math.random() * 10000;
                var odds = this._data[1][2];
                var type = this._data[1][1];
                if (num <= odds && type == 2) {
                    this.AddBuff();
                }
            }
        };
        SkillBuff.prototype.AddBuff = function () {
            var stype = H52D_Framework.StatusConfig[this._buff.id]["statusType"];
            if (this._ratio > 0) {
                if (stype == 2) {
                    this._buff.Do(this._ratio);
                }
                else {
                    this._buff.Do();
                }
            }
            else {
                this._buff.Do();
            }
        };
        SkillBuff.prototype.OnUpdate = function () {
            this._buff.OnUpdate();
        };
        SkillBuff.prototype.Destroy = function () {
            if (this._buff) {
                this._buff.Destroy();
                this._buff = null;
            }
        };
        return SkillBuff;
    }());
    H52D_Framework.SkillBuff = SkillBuff;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SkillBuff.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**主动技能类
     * @author zhangzhenming
     */
    var Skill = /** @class */ (function () {
        function Skill(id, owner, to) {
            /**目标*/
            this._target = [];
            this._target_a = new H52D_Framework.Formation();
            this._isCd = false;
            this._bsbuff = false;
            this._delaybufftime = 0;
            this._currenttime = 0;
            this._damage = 0;
            this._data = new H52D_Framework.SkillData(id);
            this._owner = owner;
            this._cd = 0;
            this._belongs = to;
            this._ViewRoot = this._data.hierarchy == 1 ? H52D_Framework.AvatarRoot : H52D_Framework.AvatarEffectRoot;
            if (!H52D_Framework.ObjIsEmpty(this._data.actionEffect)) {
                this._type = eSKill_SHOW_TYPE.NOTBALL;
                this._skillNone = new H52D_Framework.SkillNone(this._owner, this._data, this._ViewRoot, this._belongs);
            }
            if (!H52D_Framework.ObjIsEmpty(this._data.flyEffect)) {
                this._type = eSKill_SHOW_TYPE.BALLISTIC;
                this._pool = new H52D_Framework.ObjectPool(5);
                for (var i = 0; i < this._pool.MaxIndex; i++) {
                    var av = new H52D_Framework.SkillObject(this._owner, this._data, this._ViewRoot, this._belongs);
                    this._pool.AddNoActivePool(av);
                }
            }
            if (!H52D_Framework.ObjIsEmpty(this.Data.statusList)) {
                this._buff = new H52D_Framework.SkillBuff(this.Data.statusList, this._owner);
            }
        }
        Object.defineProperty(Skill.prototype, "id", {
            get: function () { return this._data.id; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Skill.prototype, "Data", {
            get: function () { return this._data; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(Skill.prototype, "IsCD", {
            get: function () { return this._isCd; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(Skill.prototype, "sType", {
            get: function () { return this._belongs; },
            enumerable: true,
            configurable: true
        });
        /*** 释放技能*/
        Skill.prototype.SpellSkill = function (tar_arr) {
            this._target = [];
            /**在CD中 */
            if (this._isCd && this._belongs != eBELONGS_TO.BIG)
                return;
            /**释放技能*/
            this._isCd = true;
            this._target_a.Destroy();
            this._cd = this._data.skillCD;
            if (this._belongs == eBELONGS_TO.BIG) {
                H52D_Framework.Event.DispatchEvent("CaptainCd", [this._cd]);
            }
            this._target = tar_arr;
            if (!this._target)
                return;
            this._bsbuff = true;
            this.Select(this._type);
            this.PlaySound();
            this.SetShake();
        };
        Skill.prototype.OnHurt = function () {
            /**伤害计算 */
            if (!H52D_Framework.ObjIsEmpty(this._data.damageList)) {
                this._damage = 0;
                var damage = 0;
                var skilldamage = new H52D_Framework.SkillDamage(this._owner, this._target, this._data.damageList);
                for (var i = 0; i < this._target.length; i++) {
                    var mon = this._target[i];
                    if (mon) {
                        this._damage = skilldamage.ComputeDamageN(mon) + this._data.fixedDamage;
                        this._damage = this._damage * mon.vo.allDamgeReduction >> 0;
                        mon.OnHurt(this._damage, this._owner.SE, skilldamage.bCrit);
                    }
                }
                if (skilldamage.bCrit) {
                    if (this._buff)
                        this._buff.SetBuffasCrit(this._damage);
                }
            }
        };
        Skill.prototype.PlaySound = function () {
            var _this = this;
            if (!H52D_Framework.ObjIsEmpty(this.Data.soundParam)) {
                H52D_Framework.Tick.Once(this.Data.soundParam[2], this, function () {
                    if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                        H52D_Framework.SoundManager.Instance.OnPlaySound(_this.Data.soundParam[1]);
                    }
                });
            }
        };
        Skill.prototype.Select = function (type) {
            switch (type) {
                case eSKill_SHOW_TYPE.BALLISTIC:
                    if (this._pool.GetPoolElement()) {
                        this._pool.GetPoolElement().Spell(this._target[0]);
                    }
                    break;
                case eSKill_SHOW_TYPE.NOTBALL:
                    this._skillNone.SpellSkill(this._target);
                    break;
            }
        };
        Skill.prototype.SetShake = function () {
            var _this = this;
            if (!H52D_Framework.ObjIsEmpty(this._data.shake)) {
                H52D_Framework.Tick.Once(this._data.shake[2], this, function () {
                    H52D_Framework.EffectManager.Instance.StartShock(_this._data.shake[1]);
                });
            }
        };
        Skill.prototype.ClearTarget = function () {
            this._target = [];
            // if (this._skillNone) {
            //     this._skillNone.Destroytarget();
            // }
            // if (!this._pool) return;
            // if (this._pool.GetActivePool.length) {
            //     for (let i = this._pool.GetActivePool.length - 1; i >= 0; i--) {
            //         let ob = this._pool.GetActivePool[i] as SkillObject;
            //         ob.Destroytarget();
            //     }
            // }
        };
        Skill.prototype.OnUpdate = function () {
            if (this._isCd) {
                this._cd -= 100;
                if (this._cd <= 0) {
                    this._isCd = false;
                }
            }
            if (this._pool) {
                for (var k in this._pool.GetActivePool) {
                    if (this._pool.GetActivePool[k] && this._pool.GetActivePool[k].BComplete) {
                        this._pool.GetActivePool[k].BComplete = false;
                        this.OnHurt();
                    }
                }
                var len = this._pool.GetActivePool.length;
                for (var i = len - 1; i >= 0; i--) {
                    if (this._pool.GetActivePool[i]) {
                        if (this._pool.GetActivePool[i].isdestroy) {
                            this._pool.GetActivePool[i].Hidden();
                            this._pool.AddNoActivePool(this._pool.GetActivePool[i]);
                            this._pool.GetActivePool.splice(i, 1);
                        }
                    }
                }
            }
            if (this._skillNone && this._skillNone.BComplete) {
                this._skillNone.BComplete = false;
                this.OnHurt();
            }
            if (this._buff && this._bsbuff && !H52D_Framework.ObjIsEmpty(this.Data.damageList)) {
                this._delaybufftime += 100;
                if (this._delaybufftime >= 500) {
                    this._delaybufftime = 0;
                    this._buff.SetBuffasHave(this._damage);
                    this._bsbuff = false;
                }
            }
            else if (this._buff && this._bsbuff && H52D_Framework.ObjIsEmpty(this.Data.damageList)) {
                this._buff.SetBuffasHave(0);
                this._bsbuff = false;
            }
            if (this._buff) {
                this._buff.OnUpdate();
            }
        };
        Skill.prototype.Destroy = function () {
            H52D_Framework.Tick.ClearAll(this);
            if (this._buff) {
                this._buff.Destroy();
                this._buff = null;
            }
            if (this._skillNone) {
                this._skillNone.Destroy();
                this._skillNone = null;
            }
            if (this._pool) {
                this._pool.Destroy();
                this._pool = null;
            }
            // this.Currentbuttle = [];
            // this._owner = null;
            // this._data = null;
            // this._target_a = null;
            // this._target = [];
        };
        return Skill;
    }());
    H52D_Framework.Skill = Skill;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Skill.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**PVP数据管理 */
    var PSkillObject = /** @class */ (function () {
        function PSkillObject(owner, data, view, btype, to) {
            /**技能数据 */
            this._data = {};
            this.isdestroy = false;
            /** 抛物线开口参数：a */
            this.a = 0.003;
            /**
             * 1 抛物线
             * 2 直线
             */
            this._flyType = 0;
            /**被击特效播放 */
            this._hitAvatar = null;
            /**目标终点 */
            this._EndX = 0;
            /**目标起点X */
            this._TPosX = 0;
            /**目标起点Y */
            this._TPosY = 0;
            this._btype = 0;
            this._dir = 1;
            this._bcomplete = false;
            this.sTime = 1000;
            this.isdestroy = false;
            this._bcomplete = false;
            this._skillData = data;
            this._ViewRoot = view;
            this._dir = btype;
            this._owner = owner;
            this._flyType = this._skillData.flyEffect[2];
            this._btype = btype;
            this._belongs = to;
        }
        Object.defineProperty(PSkillObject.prototype, "A", {
            get: function () {
                return this.a;
            },
            set: function (v) {
                this.a = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PSkillObject.prototype, "Speed", {
            get: function () {
                return this.speed;
            },
            set: function (v) {
                this.a = v;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 飞行曲线的参数调整
         * @param a 抛物线
         * @param speed 速度
         * @param start_point 子弹起点位置调节
         * @param end_x 子弹终点位置调节
         * @param end_y 子弹终点位置调节
         * @param area 子弹随机区域宽高
         * @param start_angle 初始角度调整s
         */
        PSkillObject.prototype.Bullet = function (a, speed, start_point, end_x, end_y, area, start_angle) {
            if (a === void 0) { a = 3; }
            if (speed === void 0) { speed = 4; }
            if (end_x === void 0) { end_x = 0; }
            if (end_y === void 0) { end_y = -100; }
            if (area === void 0) { area = 100; }
            if (start_angle === void 0) { start_angle = 0; }
            this.a = a * 0.001;
            this.speed = speed * 0.01;
            this.correct_start_point = start_point;
            this.correct_end_x = end_x;
            this.correct_end_y = end_y;
            this.area = area;
            this.correct_angle = start_angle;
        };
        // Event.RegistEvent(EventDefine.MONSTER_DIE, Laya.Handler.create(this, this.MonsterDie));
        PSkillObject.prototype.MonsterDie = function (id) {
            //let mon = this._target as Monster;
            //if (mon.vo.id == id) {
            this.CheckIsDestroy();
            //}
        };
        Object.defineProperty(PSkillObject.prototype, "BComplete", {
            get: function () { return this._bcomplete; },
            set: function (value) { this._bcomplete = value; },
            enumerable: true,
            configurable: true
        });
        PSkillObject.prototype.OnUpdate = function () {
        };
        /**释放技能*/
        PSkillObject.prototype.Spell = function (target) {
            this._target = null;
            this._target = target;
            this.isdestroy = false;
            this._bcomplete = false;
            this.LoadSkillEffect();
        };
        PSkillObject.prototype.LoadSkillEffect = function () {
            var _this = this;
            if (this._Object) {
                this.PlaySkillEffect();
            }
            else {
                this._Object = new H52D_Framework.Avatar(this._ViewRoot);
                this._Object.Load(this._skillData.flyEffect[3], this._dir, this._skillData.flyEffect["6"], 0, 0, Laya.Handler.create(this, function () { _this.PlaySkillEffect(); }));
            }
        };
        /**飞行特效*/
        PSkillObject.prototype.PlaySkillEffect = function () {
            if (this.CheckIsDestroy()) {
                return;
            }
            this._EndX = this._target.PosX;
            //攻击动作开始后的延迟时间点上播放子弹特效
            var time = this._skillData.flyEffect["7"];
            var pointID = this._skillData.flyEffect["1"];
            var pointArr;
            if (this._btype == 1) {
                pointArr = H52D_Framework.OSkillPoint[pointID - 1];
            }
            else {
                pointArr = H52D_Framework.POSkillPoint[pointID - 1];
            }
            var point = new Laya.Point(pointArr[0], pointArr[1]);
            var h = 0;
            if (this._owner.type == eCharacter_TYPE.CAMP)
                h = 90;
            switch (this._flyType) {
                case 1:
                    this.Bullet(3, this._skillData.flyEffect["5"], point, 0, -100, 0, 0);
                    break;
                case 2:
                    this.Bullet(0, this._skillData.flyEffect["5"], point, 0, -100, 0, 0);
                    break;
            }
            this._TPosX = this._target.PosX;
            this._TPosY = this._target.PosY;
            // if (this._belongs == eBELONGS_TO.CAMP && this._btype == -1) {
            // 	this._TPosX = HeroLocal[2][0];
            // 	this._TPosY = HeroLocal[2][1];
            // }
            // else if (this._belongs == eBELONGS_TO.CAMP && this._btype == 1) {
            // 	this._TPosX = MonsterLocal[2][0] ;
            // 	this._TPosY = MonsterLocal[2][1];
            // }
            H52D_Framework.Tick.Once(time, this, this.palyEffect);
        };
        /**攻击特效 */
        PSkillObject.prototype.palyEffect = function () {
            if (this._Object) {
                this._Object.visible = true;
                this._Object.Play(this._skillData.flyEffect[4], true);
                //起点绝对位置
                this.start_x = this._owner.avatar.PosX + this.correct_start_point.x;
                this.start_y = this._owner.avatar.PosY + this.correct_start_point.y;
                var t = this._TPosX;
                //终点相对位置,随机区域范围
                this.end_x = this._TPosX - this.start_x + this.correct_end_x + (Math.random() - 0.5) * this.area;
                this.end_y = this._TPosY - this.start_y + this.correct_end_y + (Math.random() - 0.5) * this.area;
                this._Object.PosX = this.start_x;
                this._Object.PosY = this.start_y;
                //步阶
                this.step_x = this.speed;
                if (this._Object) {
                    H52D_Framework.Tick.FrameLoop(1, this, this.FrameHander);
                }
            }
            else {
                this.isdestroy = true;
            }
        };
        /**更新逻辑 */
        PSkillObject.prototype.FrameHander = function () {
            if (this._Object) {
                if (this._btype == 1) {
                    this._Object.PosX += (this.speed / 6) * H52D_Framework.Time.deltaTime;
                }
                else {
                    this._Object.PosX -= (this.speed / 6) * H52D_Framework.Time.deltaTime;
                }
                // y = a*x*x + b*x; b = -a*m + n/m; 推算公式：m、n分别是终点的x、y 400,160
                var x = this._Object.PosX - this.start_x;
                var b = (-this.a * this.end_x + this.end_y / this.end_x);
                this.step_y = this.a * x * x + b * x;
                this._Object.PosY = this.start_y + this.step_y;
                //旋转角度，求导 tan& = 2 * a * x + b;
                this.step_angle = Math.atan(2 * this.a * x + b) * 180 / Math.PI;
                this._Object.Rotate(this.correct_angle + this.step_angle);
                if (this._btype == 1) {
                    if (this._Object.PosX >= this._EndX) {
                        this.OnComplete();
                    }
                }
                else {
                    if (this._Object.PosX <= this._EndX) {
                        this.OnComplete();
                    }
                }
            }
            else {
                this.isdestroy = true;
            }
        };
        // private OnHurt(): void {
        // 	if (!this._target || !this._owner) return;
        // 	/**伤害计算 */
        // 	let skilldamage = new SkillDamage(this._owner, this._target, this._skillData.damageList);
        // 	let damage = skilldamage.ComputeDamage(this._target);
        // 	/**目标受伤 */
        // 	this._target.OnHurt(damage + this._skillData.fixedDamage >> 0, this._owner.SE, skilldamage.bCrit);
        // }
        /**远程特效到达目标点的回调 */
        PSkillObject.prototype.OnComplete = function () {
            this.Hidden();
            this._bcomplete = true;
            // if (this.CheckIsDestroy()) {
            // 	return;
            // }
            /**播放被击特效 */
            var x = this._Object.PosX;
            var y = this._Object.PosY;
            if (!H52D_Framework.ObjIsEmpty(this._skillData.hitEffect)) {
                this.LoadHitEffect(x, y);
            }
        };
        PSkillObject.prototype.LoadHitEffect = function (x, y) {
            var _this = this;
            if (this._hitAvatar) {
                this.PlayHitEffect(x, y);
            }
            else {
                this._hitAvatar = new H52D_Framework.Avatar(this._ViewRoot);
                this._hitAvatar.Load(this._skillData.hitEffect[1], this._dir, this._skillData.hitEffect[3], x, y, Laya.Handler.create(this, function () { _this.PlayHitEffect(x, y); }));
            }
        };
        PSkillObject.prototype.PlayHitEffect = function (x, y) {
            var _this = this;
            if (this.CheckIsDestroy()) {
                return;
            }
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound(this._skillData.hitSound[1]);
            }
            if (this._hitAvatar.Armature) {
                this._hitAvatar.visible = true;
                this._hitAvatar.PosX = x;
                this._hitAvatar.PosY = y;
                this._hitAvatar.Play(this._skillData.hitEffect[2], false, true, function () {
                    _this.isdestroy = true;
                });
            }
        };
        /**检查是否需要销毁 */
        PSkillObject.prototype.CheckIsDestroy = function () {
            if (!this._target || this._target.IsDie || !this._owner || !this._owner.avatar) {
                this.isdestroy = true;
                return true;
            }
            return false;
        };
        PSkillObject.prototype.Hidden = function () {
            this.isdestroy = true;
            if (this._Object && this._Object.Armature) {
                this._Object.visible = false;
            }
            H52D_Framework.Tick.Clear(this, this.FrameHander);
        };
        PSkillObject.prototype.Destroy = function () {
            if (this._Object) {
                this._Object.Destroy();
                this._Object = null;
            }
            if (this._hitAvatar) {
                this._hitAvatar.Destroy();
                this._hitAvatar = null;
            }
        };
        PSkillObject.prototype.Claer = function () {
            this._target = [];
            this._owner = null;
            this._data = null;
        };
        return PSkillObject;
    }());
    H52D_Framework.PSkillObject = PSkillObject;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PSkillObject.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**PVP数据管理 */
    var PSkillNone = /** @class */ (function () {
        function PSkillNone(owner, data, view, btype, to) {
            /**朝向 */
            this._dir = 1;
            this._order = 0;
            this._posX = 0;
            this._posY = 1;
            /**特效列表 */
            this._avtarTab = [];
            /**被击特效列表*/
            this._hitAvatarTab = [];
            this.isDie = false;
            this._bcomplete = false;
            this._btype = 0;
            this._skillData = data;
            this._owner = owner;
            this._order = 0;
            this._dir = btype;
            this._ViewRoot = view;
            this._avtarTab = [];
            this._hitAvatarTab = [];
            this._btype = btype;
            this._belongs = to;
        }
        Object.defineProperty(PSkillNone.prototype, "BComplete", {
            get: function () { return this._bcomplete; },
            set: function (value) { this._bcomplete = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PSkillNone.prototype, "_path", {
            /**特效路径 */
            get: function () { return this._skillData.actionEffect[3]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PSkillNone.prototype, "_scla", {
            /**特效大小 */
            get: function () { return this._skillData.actionEffect[5]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PSkillNone.prototype, "_PointId", {
            /**特效挂点ID */
            get: function () { return this._skillData.actionEffect[1]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PSkillNone.prototype, "_delayTime", {
            /**延迟时间 */
            get: function () { return this._skillData.actionEffect[2]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PSkillNone.prototype, "_name", {
            /**特效动画名字 */
            get: function () { return this._skillData.actionEffect[4]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PSkillNone.prototype, "_hitPath", {
            /**被击特效路径 */
            get: function () { return this._skillData.hitEffect[1]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PSkillNone.prototype, "_hitName", {
            /**被击特效动画名 */
            get: function () { return this._skillData.hitEffect[2]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PSkillNone.prototype, "_hitScla", {
            /**被击特效大小 */
            get: function () { return this._skillData.hitEffect[3]; },
            enumerable: true,
            configurable: true
        });
        // public sTime:number = 0;
        // public SpellSkillData(target: Array<any>) {
        // 	this.sTime = 0;
        // 	if (this._owner.avatar) {
        // 		this.sTime = this._owner.GetAniDuration();
        // 		if (this.sTime <= 0 || this._belongs == eBELONGS_TO.BIG) {
        // 			this.sTime = 600;
        // 		}
        // 		else {
        // 			this.sTime - 100;
        // 		}
        // 	}
        // 	else 
        // 	{
        // 		this.sTime = 0;
        // 	}
        // }
        PSkillNone.prototype.setNoCopayTarget = function (target) {
            var tar = null;
            for (var i = 0; i < target.length; i++) {
                if (target[i]) {
                    tar = target[i];
                    return tar;
                }
            }
        };
        /**释放技能 */
        PSkillNone.prototype.SpellSkill = function (target) {
            var _this = this;
            this._avtarTab = [];
            this._hitAvatarTab = [];
            this._target = [];
            this._bcomplete = false;
            if (this._belongs == eBELONGS_TO.BIG) {
                var xc = 0;
            }
            /**设置目标 */
            if (this._skillData.special == 1) {
                /**设置目标 */
                for (var i = 0; i < target.length; i++) {
                    this._target.push(target[i]);
                }
            }
            else {
                var tar = this.setNoCopayTarget(target);
                this._target.push(tar);
            }
            /**攻击特效 */
            for (var i = 0; i < this._target.length; i++) {
                this.DoPlayEffect(this._delayTime, this._target[i]);
            }
            /**有人物模型的 */
            if (this._owner.avatar) {
                H52D_Framework.Tick.Once(200, this, function () {
                    _this.AttackOnComplete();
                });
            }
            else //没有人物模型的
             {
                this.AttackOnComplete();
            }
        };
        /**攻击回调 */
        PSkillNone.prototype.AttackOnComplete = function () {
            this.DoHitEffect();
            this._bcomplete = true;
            if (this._callBack) {
                this._callBack.run();
            }
        };
        /**目标受伤 */
        // private OnHurt(): void {
        // 	/**伤害计算 */
        // 	if (!ObjIsEmpty(this._skillData.damageList)) {
        // 		let skilldamage = new SkillDamage(this._owner,this._target,this._skillData.damageList);
        // 		for (let i = 0; i < this._target.length; i++) {
        // 			let mon: Monster = this._target[i] as Monster;
        // 			if (mon) {
        // 				let damage = skilldamage.ComputeDamage(mon);
        // 				mon.OnHurt(damage + this._skillData.fixedDamage >> 0,this._owner.SE, skilldamage.bCrit);
        // 			}
        // 		}
        // 		if (skilldamage.bCrit) {
        // 			let buff = new SkillBuff(this._skillData.statusList,this._owner,this._skillData.damageList);
        // 			buff.SetBuffasCrit();
        // 		}
        // 	}
        // }
        /**近战技能特效 */
        PSkillNone.prototype.DoPlayEffect = function (time, target) {
            var _this = this;
            H52D_Framework.Tick.Once(time, this, function () {
                _this.PlaySkillEffect(target);
            });
        };
        PSkillNone.prototype.PlaySkillEffect = function (target) {
            var _this = this;
            if (this.CheckDestroy())
                return;
            var avatar = new H52D_Framework.Avatar(this._ViewRoot);
            if (this._avtarTab) {
                this._avtarTab.push(avatar);
            }
            avatar.SetOrder(this._owner.Order);
            if (this._skillData.special == 2) {
                avatar.Load(this._path, this._dir, this._scla, 0, 0, Laya.Handler.create(this, function () {
                    _this.SkillPoint(avatar, target);
                    avatar.Play(_this._name, true, false, function () {
                    });
                    var vpox = 0;
                    if (_this._btype == 1) {
                        vpox = 1000;
                    }
                    else {
                        vpox = -10;
                    }
                    H52D_Framework.TweenList.to(_this, avatar, { PosX: vpox }, 1000, function () {
                        avatar.PosX = vpox;
                        avatar.Destroy();
                        avatar = null;
                    });
                }));
            }
            else {
                avatar.Load(this._path, this._dir, this._scla, 0, 0, Laya.Handler.create(this, function () {
                    _this.SkillPoint(avatar, target);
                    avatar.Play(_this._name, false, false, function () {
                        avatar.Destroy();
                        avatar = null;
                    });
                }));
            }
        };
        /**技能挂点 */
        PSkillNone.prototype.SkillPoint = function (avatar, target) {
            if (!target)
                return;
            if (this._owner.avatar && this._belongs == eBELONGS_TO.ATTACK) {
                if (this._owner.avatar.Armature) {
                    var point = void 0;
                    if (this._btype == 1)
                        point = H52D_Framework.NSkillPoint[this._PointId - 1];
                    else
                        point = H52D_Framework.PSkillPoint[this._PointId - 1];
                    var Gglobal = this._ViewRoot.globalToLocal(new Laya.Point(this._owner.avatar.PosX + point[0], this._owner.avatar.PosY + point[1]));
                    avatar.PosX = this._owner.avatar.PosX + point[0];
                    avatar.PosY = this._owner.avatar.PosY + point[1];
                }
            }
            else if (this._belongs == eBELONGS_TO.ATTACK_S) {
                var point = void 0;
                if (target.type == eCharacter_TYPE.MONSTER) {
                    point = H52D_Framework.MonsterSkillPoint[this._PointId - 1];
                }
                else {
                    point = H52D_Framework.HeroSkillPoint[this._PointId - 1];
                }
                avatar.PosX = target.PosX + point[0];
                avatar.PosY = target.PosY + point[1];
            }
            else {
                var point = void 0;
                if (!H52D_Framework.ObjIsEmpty(this._skillData.point)) {
                    point = [this._skillData.point[1], this._skillData.point[2]];
                }
                else {
                    point = [0, 0];
                }
                avatar.PosX = target.PosX + point[0];
                avatar.PosY = target.PosY + point[1];
            }
        };
        PSkillNone.prototype.DoHitEffect = function () {
            if (!H52D_Framework.ObjIsEmpty(this._skillData.hitEffect)) {
                for (var i = 0; i < this._target.length; i++) {
                    if (this._target[i]) {
                        if (this._target[i].avatar) {
                            var h = 50 + Math.random() * 200; //this._target[i].avatar.height * 0.5;
                            var newPos = new Laya.Point(this._target[i].PosX, this._target[i].PosY - h);
                            newPos.x += Math.random() * 40 - 20;
                            newPos.y += Math.random() * 40 - 20;
                            /**受伤特效 */
                            this.PlayHitEffect(newPos.x, newPos.y);
                        }
                    }
                }
            }
        };
        PSkillNone.prototype.PlayHitEffect = function (x, y) {
            var _this = this;
            var hitAvatar = new H52D_Framework.Avatar(H52D_Framework.AvatarEffectRoot);
            if (this._hitAvatarTab) {
                this._hitAvatarTab.push(hitAvatar);
            }
            hitAvatar.Load(this._hitPath, this._dir, this._hitScla, x, y, Laya.Handler.create(this, function () {
                if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                    H52D_Framework.SoundManager.Instance.OnPlaySound(_this._skillData.hitSound[1]);
                }
                hitAvatar.Play(_this._hitName, false, false, function () {
                    hitAvatar.Destroy();
                    hitAvatar = null;
                    _this.isDie = true;
                });
                hitAvatar.PosX = x;
                hitAvatar.PosY = y;
            }));
        };
        PSkillNone.prototype.CheckDestroy = function () {
            if (!this._owner || H52D_Framework.GetTabLength(this._target) == 0) {
                this.HitTabDestroy();
                return true;
            }
            return false;
        };
        PSkillNone.prototype.HitTabDestroy = function () {
            for (var k in this._hitAvatarTab) {
                if (this._hitAvatarTab[k]) {
                    if (this._hitAvatarTab[k].Armature) {
                        this._hitAvatarTab[k].visible = false;
                    }
                    this._hitAvatarTab[k].Destroy();
                    this._hitAvatarTab[k] = null;
                }
            }
            this._hitAvatarTab = [];
        };
        PSkillNone.prototype.AvatarTabDestroy = function () {
            for (var k in this._avtarTab) {
                if (this._avtarTab[k]) {
                    if (this._avtarTab[k].Armature) {
                        this._avtarTab[k].visible = false;
                    }
                    this._avtarTab[k].Destroy();
                    this._avtarTab[k] = null;
                }
            }
            this._avtarTab = [];
        };
        PSkillNone.prototype.Destroy = function () {
            this.AvatarTabDestroy();
            this.HitTabDestroy();
        };
        PSkillNone.prototype.Clear = function () {
            this._target = [];
            this._owner = [];
            this._Data = [];
        };
        return PSkillNone;
    }());
    H52D_Framework.PSkillNone = PSkillNone;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PSkillNone.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**PVP数据管理 */
    var PSkill = /** @class */ (function () {
        function PSkill(id, owner, btype, to) {
            /**目标*/
            this._target = [];
            this._target_a = new H52D_Framework.Formation();
            this._isCd = false;
            this._bsbuff = false;
            this._delaybufftime = 0;
            this._currenttime = 0;
            this._damage = 0;
            this._btype = 0;
            this._data = new H52D_Framework.SkillData(id);
            this._owner = owner;
            this._cd = 0;
            this._belongs = to;
            this._btype = btype;
            if (this._data.hierarchy == 1) {
                this._ViewRoot = H52D_Framework.KickingManager.Instance.avatarRoot;
            }
            else {
                this._ViewRoot = H52D_Framework.KickingManager.Instance.effectRoot;
            }
            if (!H52D_Framework.ObjIsEmpty(this._data.actionEffect)) {
                this._type = eSKill_SHOW_TYPE.NOTBALL;
                this._skillNone = new H52D_Framework.PSkillNone(this._owner, this._data, this._ViewRoot, btype, this._belongs);
            }
            if (!H52D_Framework.ObjIsEmpty(this._data.flyEffect)) {
                this._type = eSKill_SHOW_TYPE.BALLISTIC;
                if (this._belongs == eBELONGS_TO.CAMP) {
                    this._pool = new H52D_Framework.ObjectPool(10);
                }
                else {
                    this._pool = new H52D_Framework.ObjectPool(5);
                }
                for (var i = 0; i < this._pool.MaxIndex; i++) {
                    var av = new H52D_Framework.PSkillObject(this._owner, this._data, this._ViewRoot, btype, this._belongs);
                    this._pool.AddNoActivePool(av);
                }
            }
            if (!H52D_Framework.ObjIsEmpty(this.Data.statusList)) {
                this._buff = new H52D_Framework.PSkillBuff(this.Data.statusList, this._owner, btype);
            }
        }
        Object.defineProperty(PSkill.prototype, "id", {
            get: function () { return this._data.id; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PSkill.prototype, "Data", {
            get: function () { return this._data; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(PSkill.prototype, "IsCD", {
            get: function () { return this._isCd; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(PSkill.prototype, "target", {
            get: function () { return this._target; },
            enumerable: true,
            configurable: true
        });
        /*** 释放技能*/
        PSkill.prototype.SpellSkill = function (tar_arr) {
            this._target = [];
            /**在CD中 */
            if (this._isCd)
                return;
            /**释放技能*/
            this._isCd = true;
            this._target_a.Destroy();
            this._cd = this._data.skillCD;
            if (this._belongs == eBELONGS_TO.BIG) {
                this.SetTarget(tar_arr);
            }
            else if (this._belongs == eBELONGS_TO.PET) {
                this.randomTarget(tar_arr);
            }
            else {
                this._target = tar_arr;
            }
            if (!this._target)
                return;
            this._bsbuff = true;
            this.Select(this._type);
            this.PlaySound();
            this.SetShake();
        };
        PSkill.prototype.OnHurt = function () {
            /**伤害计算 */
            if (!H52D_Framework.ObjIsEmpty(this._data.damageList)) {
                if (this._belongs == eBELONGS_TO.BIG) {
                    var x = 0;
                }
                this._damage = 0;
                var damage = 0;
                var skilldamage = new H52D_Framework.SkillDamage(this._owner, this._target, this._data.damageList);
                for (var i = 0; i < this._target.length; i++) {
                    if (this._target[i]) {
                        this._damage = skilldamage.ComputeDamage(this._target[i]) + this._data.fixedDamage >> 0;
                        this._target[i].OnHurt(this._belongs, this._owner, this._damage, this._owner.SE, skilldamage.bCrit);
                    }
                }
                if (skilldamage.bCrit) {
                    if (this._buff)
                        this._buff.SetBuffasCrit(this._damage);
                }
            }
        };
        PSkill.prototype.PlaySound = function () {
            var _this = this;
            if (!H52D_Framework.ObjIsEmpty(this.Data.soundParam)) {
                H52D_Framework.Tick.Once(this.Data.soundParam[2], this, function () {
                    if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                        H52D_Framework.SoundManager.Instance.OnPlaySound(_this.Data.soundParam[1]);
                    }
                });
            }
        };
        PSkill.prototype.Select = function (type) {
            switch (type) {
                case eSKill_SHOW_TYPE.BALLISTIC:
                    if (this._pool.GetPoolElement()) {
                        if (this._belongs == eBELONGS_TO.CAMP) {
                            for (var i = 0; i < this._target.length; i++) {
                                if (this._target[i]) {
                                    this._pool.GetPoolElement().Spell(this._target[i]);
                                    break;
                                }
                            }
                        }
                        else {
                            this._pool.GetPoolElement().Spell(this._target[0]);
                        }
                    }
                    break;
                case eSKill_SHOW_TYPE.NOTBALL:
                    this._skillNone.SpellSkill(this._target);
                    break;
            }
        };
        PSkill.prototype.SetShake = function () {
            var _this = this;
            if (!H52D_Framework.ObjIsEmpty(this._data.shake)) {
                H52D_Framework.Tick.Once(this._data.shake[2], this, function () {
                    H52D_Framework.EffectManager.Instance.StartShock(_this._data.shake[1]);
                });
            }
        };
        PSkill.prototype.ClearTarget = function () {
            this._target = [];
            if (this._skillNone) {
                this._skillNone.Clear();
            }
            if (!this._pool)
                return;
            if (this._pool.GetActivePool.length) {
                for (var i = this._pool.GetActivePool.length - 1; i >= 0; i--) {
                    var ob = this._pool.GetActivePool[i];
                    ob.Claer();
                }
            }
        };
        PSkill.prototype.OnUpdate = function () {
            if (this._isCd) {
                this._cd -= 100;
                if (this._cd <= 0) {
                    this._isCd = false;
                }
            }
            if (this._pool) {
                for (var k in this._pool.GetActivePool) {
                    if (this._pool.GetActivePool[k] && this._pool.GetActivePool[k].BComplete) {
                        this._pool.GetActivePool[k].BComplete = false;
                        this.OnHurt();
                    }
                }
                var len = this._pool.GetActivePool.length;
                for (var i = len - 1; i >= 0; i--) {
                    if (this._pool.GetActivePool[i]) {
                        if (this._pool.GetActivePool[i].isdestroy) {
                            this._pool.GetActivePool[i].Hidden();
                            this._pool.AddNoActivePool(this._pool.GetActivePool[i]);
                            this._pool.GetActivePool.splice(i, 1);
                        }
                    }
                }
            }
            if (this._skillNone && this._skillNone.BComplete) {
                this._skillNone.BComplete = false;
                this.OnHurt();
            }
            if (this._buff && this._bsbuff && !H52D_Framework.ObjIsEmpty(this.Data.damageList)) {
                this._delaybufftime += 100;
                if (this._delaybufftime >= 500) {
                    this._delaybufftime = 0;
                    this._buff.SetBuffasHave(this._damage);
                    this._bsbuff = false;
                }
            }
            else if (this._buff && this._bsbuff && H52D_Framework.ObjIsEmpty(this.Data.damageList)) {
                this._buff.SetBuffasHave(0);
                this._bsbuff = false;
            }
            if (this._buff) {
                this._buff.OnUpdate();
            }
        };
        PSkill.prototype.Destroy = function () {
            H52D_Framework.Tick.ClearAll(this);
            if (this._buff) {
                this._buff.Destroy();
                this._buff = null;
            }
            if (this._skillNone) {
                this._skillNone.Destroy();
                this._skillNone = null;
            }
            if (this._pool) {
                this._pool.Destroy();
                this._pool = null;
            }
            this._owner = null;
            this._data = null;
            this._target_a = null;
            this._target = [];
        };
        /**设置竖排目标 */
        PSkill.prototype.SetHTarget = function () {
            var id = 0;
            for (var k in this._target_a.GetHorizontalobject) {
                if (this._target_a.GetHorizontalobject[k].length > 0) {
                    id = Number(k);
                }
            }
            var h = this._target_a.GetHorizontalobject[id];
            this._target = h;
        };
        /**设置横排目标 */
        PSkill.prototype.SetForntTatget = function () {
            var fornt = this._target_a.GetFrontobject;
            var index = 0;
            for (var k in fornt) {
                if (index <= this._data.hitEnemyNum) {
                    this._target.push(fornt[k]);
                }
                index++;
            }
        };
        /**设置后排目标 */
        PSkill.prototype.SetBackTatget = function () {
            var back = this._target_a.GetBackobject;
            var index = 0;
            for (var k in back) {
                if (index < this._data.hitEnemyNum) {
                    this._target.push(back[k]);
                }
                index++;
            }
        };
        /**设置队长目标 */
        PSkill.prototype.SetCapTarget = function () {
            var obj = this._target_a.Getobject;
            for (var k in obj) {
                if (obj[k] && obj[k].vo.location == 4) {
                    this._target.push(obj[k]);
                    break;
                }
            }
            if (this._target.length <= 0) {
                for (var k in obj) {
                    if (obj[k]) {
                        this._target.push(obj[k]);
                        break;
                    }
                }
            }
        };
        PSkill.prototype.randomTarget = function (tar_arr) {
            this._target = [];
            for (var k = 0; k < tar_arr.length; k++) {
                if (tar_arr[k] && !tar_arr[k].IsDie) {
                    this._target.push(tar_arr[k]);
                    break;
                }
            }
        };
        /**设置目标 */
        PSkill.prototype.SetTarget = function (tar_arr) {
            this._target_a.GetFormatInfoArry(tar_arr);
            if (this._data.hitEnemyMode) {
                switch (this._data.hitEnemyMode) {
                    case 0:
                        this._target = tar_arr.concat();
                        break;
                    case 1:
                        this.SetForntTatget();
                        break;
                    case 2:
                        this.SetHTarget();
                        break;
                    case 3:
                        this.SetBackTatget();
                        break;
                    case 4:
                        this.SetCapTarget();
                        break;
                    case 5:
                        this._target = tar_arr.concat();
                        break;
                }
            }
        };
        return PSkill;
    }());
    H52D_Framework.PSkill = PSkill;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PSkill.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PPlayerInfo = /** @class */ (function () {
        function PPlayerInfo(data) {
            this._isvip = false;
            this._level = 0;
            this._MpMax = 0;
            /**当前MP */
            this.CMp = 0;
            this._MpRec = 0;
            this.SkillList = [];
            this.location = -2;
            this.MpMax = data["MpMax"];
            this._level = data["level"];
            this.MpRec = data["MpRec"];
            this.CMp = data["Cmp"];
            this.SkillList = data["sList"];
            this._isvip = data["isVip"];
            this.attr = new H52D_Framework.Attribute();
            var dataUp = H52D_Framework.RoleLevelUpConfig[this._level];
            this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, dataUp["Attack"]);
            this.attr.SetAttributeValue(4, H52D_Framework.eValueType.Base, dataUp["Crit"]);
            this.attr.SetAttributeValue(5, H52D_Framework.eValueType.Base, dataUp["CritRatio"]);
            if (this._isvip) {
                this.attr.ModfiyAttributeValue(2, H52D_Framework.eValueType.Percent, this._VipHitDamageUp);
            }
        }
        Object.defineProperty(PPlayerInfo.prototype, "_VipHitDamageUp", {
            /**Vip加成的点击伤害 */
            get: function () {
                return H52D_Framework.GameParamConfig["VipHitDamageUp"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPlayerInfo.prototype, "Level", {
            get: function () { return this._level; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPlayerInfo.prototype, "MpMax", {
            get: function () { return this._MpMax; },
            set: function (value) { this._MpMax = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPlayerInfo.prototype, "MpRec", {
            /**MP回复速度 */
            get: function () { return this._MpRec; },
            set: function (value) { this._MpRec = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPlayerInfo.prototype, "name", {
            get: function () { return "玩家"; },
            enumerable: true,
            configurable: true
        });
        return PPlayerInfo;
    }());
    H52D_Framework.PPlayerInfo = PPlayerInfo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PPlayerInfo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PPetInfo = /** @class */ (function () {
        function PPetInfo(data) {
            /**神兽ID */
            this.ID = 0;
            this.Direction = -1;
            /**神兽等级 */
            this._level = 0;
            /**状态：0：未上阵 1：上阵 */
            this._currentState = 0;
            this._attributePassive = [];
            /**神兽系数 */
            this.ratio = 0;
            this.CD = 0;
            this.location = -2;
            this.ID = data["id"];
            this.Level = data["level"];
            this.CurrentState = 0;
            this.currentAttribute = {};
            this.Direction = -1;
            this.attr = new H52D_Framework.Attribute();
            this.ratio = H52D_Framework.ActiveSkillConfig[this.Sid]["damageList"]["1"]["2"] / 10000;
            this.CD = H52D_Framework.ActiveSkillConfig[this.Sid]["skillCD"] / 1000;
        }
        Object.defineProperty(PPetInfo.prototype, "Path", {
            /**神兽模型路径 */
            get: function () { return H52D_Framework.PetConfig[this.ID].strPetModel; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "Scla", {
            /**神兽模型大小 */
            get: function () { return H52D_Framework.PetConfig[this.ID].modelScale; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "Sid", {
            /**神兽普攻ID */
            get: function () { return H52D_Framework.PetConfig[this.ID].attackSkillID; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "Level", {
            get: function () { return this._level; },
            set: function (value) {
                this._level = value;
                if (value < 2) {
                    this.SetAttribute_I();
                }
                else {
                    this.SetAttribute_X();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "CurrentState", {
            get: function () {
                return this._currentState;
            },
            set: function (value) {
                this._currentState = value;
                if (value == 0) {
                    this.currentAttribute = this._AllAuxAttribute;
                }
                else {
                    this.currentAttribute = this._AllMainAttribute;
                }
                this.OnEffectAttribute();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "name", {
            get: function () { return H52D_Framework.StringInfoConfig[H52D_Framework.PetConfig[this.ID].petName].s; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "_initMainAttribute", {
            /**初始化主属性 */
            get: function () { return H52D_Framework.PetConfig[this.ID].initialPrimeAttribute; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "_initAuxAttribute", {
            /**初始化辅属性 */
            get: function () { return H52D_Framework.PetConfig[this.ID].initialAuxiliaryAttribute; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "AllMainAttribute", {
            get: function () { return this._AllMainAttribute; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "AllAuxAttribute", {
            get: function () { return this._AllAuxAttribute; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "_addMainAttr", {
            /**每X级增加的主属性*/
            get: function () { return H52D_Framework.PetConfig[this.ID].primeAttributeUp; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PPetInfo.prototype, "_addAuxiliaryAttr", {
            /**每X级增加的辅属性*/
            get: function () { return H52D_Framework.PetConfig[this.ID].auxiliaryAttributeUp; },
            enumerable: true,
            configurable: true
        });
        PPetInfo.prototype.SetDamage = function (List) {
            var damage = 0;
            for (var k in List) {
                if (List[k]) {
                    damage += List[k].vo.attr.GetAttributeValue(2);
                }
            }
            this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, damage);
        };
        /**属性加成效果 */
        PPetInfo.prototype.OnEffectAttribute = function () {
            /*** 如果有先清理*/
            for (var i = 0; i < this._attributePassive.length; i++) {
                if (this._attributePassive[i]) {
                    this._attributePassive[i].Destroy();
                    this._attributePassive[i] = null;
                }
            }
            this._attributePassive = [];
            /**获取属性数据 */
            var data = [];
            for (var j = 0; j < H52D_Framework.GetTabLength(this.currentAttribute); j++) {
                data.push(this.currentAttribute[j + 1]);
            }
            /**初始化属性属性 */
            for (var i = 0; i < data.length; i++) {
                var p = new H52D_Framework.PPetAttributeAdd(this, data[i]);
                this._attributePassive.push(p);
            }
            /**产生属性加成效果 */
            for (var i = 0; i < this._attributePassive.length; i++) {
                if (this._attributePassive[i]) {
                    this._attributePassive[i].OnEffect();
                }
            }
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.REFFIXEDATTR);
        };
        /**1-4级用初始化属性 */
        PPetInfo.prototype.SetAttribute_I = function () {
            this._AllMainAttribute = this._initMainAttribute;
            this._AllAuxAttribute = this._initAuxAttribute;
        };
        /**5级以后，根据等级算出属性的加成 */
        PPetInfo.prototype.SetAttribute_X = function () {
            var config = H52D_Framework.PetConfig[this.ID];
            var PrimeAttributeInterval = H52D_Framework.GameParamConfig["PrimeAttributeInterval"];
            var main = this.AddAttribute(this._addMainAttr, PrimeAttributeInterval);
            if (this._level <= 4) {
                this._AllAuxAttribute = this._initAuxAttribute;
            }
            else {
                var AuxiliaryAttributeInterval = H52D_Framework.GameParamConfig["AuxiliaryAttributeInterval"];
                var aux = this.AddAttribute(this._addAuxiliaryAttr, AuxiliaryAttributeInterval);
                this._AllAuxAttribute = this.AddAttributeX(aux, this._initAuxAttribute);
            }
            this._AllMainAttribute = this.AddAttributeX(main, this._initMainAttribute);
            if (this._currentState == 1) {
                this.currentAttribute = this._AllMainAttribute;
            }
            else {
                this.currentAttribute = this._AllAuxAttribute;
            }
        };
        /**每X等级加属性*/
        PPetInfo.prototype.AddAttribute = function (O, I) {
            var index = Math.floor(this._level / I);
            if (index == 0)
                return O;
            var Odd = new Object();
            for (var idx in O) {
                var tAttr = O[idx];
                var id = tAttr[1];
                var value = tAttr[2];
                var modfiy = value * index;
                Odd[idx] = { 1: id, 2: modfiy };
            }
            return Odd;
        };
        /**每X等级加属性*/
        PPetInfo.prototype.AddAttributeX = function (add, init) {
            var Odd = new Object();
            for (var idx in add) {
                var aAttr = add[idx];
                var iAttr = init[idx];
                var id = aAttr[1];
                var value = aAttr[2];
                var value2 = iAttr[2];
                var modfiy = value + value2;
                Odd[idx] = { 1: id, 2: modfiy };
            }
            return Odd;
        };
        return PPetInfo;
    }());
    H52D_Framework.PPetInfo = PPetInfo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PPetInfo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PheroInfo = /** @class */ (function () {
        function PheroInfo(data) {
            /**普攻大招id */
            this.skillid = [];
            /**解锁技能id */
            this.onPassiveID = [];
            /**属性被动技能id */
            this.attributeID = [];
            /**条件被动技能id */
            this.conditionsID = [];
            /**表 被动技能id */
            this.passiveId = [];
            /**表  英雄解锁被动技能的等级*/
            this.passiveOnLevel = [];
            this.ToSpeed = 0;
            /**站位  -1 为上阵 */
            this._location = -1;
            this._id = data["id"];
            this._level = data["level"];
            this._star = data["star"];
            this._location = data["location"];
            this._cfg = H52D_Framework.HeroConfig[this._id];
            this.Init();
        }
        Object.defineProperty(PheroInfo.prototype, "id", {
            get: function () { return this._id; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PheroInfo.prototype, "heroCfg", {
            get: function () { return this._cfg; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PheroInfo.prototype, "Level", {
            /** 英雄等级 */
            get: function () { return this._level; },
            /** 英雄等级 */
            set: function (level) { this._level = level; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PheroInfo.prototype, "Star", {
            /***英雄星级 */
            get: function () { return this._star; },
            set: function (value) { this._star = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PheroInfo.prototype, "ModlePath", {
            get: function () { return this._cfg["strFacadeModel"]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PheroInfo.prototype, "name", {
            get: function () { return H52D_Framework.StringInfoConfig[this._cfg.name].s; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PheroInfo.prototype, "OnPassiveID", {
            get: function () { return this.onPassiveID; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PheroInfo.prototype, "attr", {
            /**基础属性表 */
            get: function () { return this._attr; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PheroInfo.prototype, "hero_Type", {
            get: function () { return this._cfg.type; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PheroInfo.prototype, "location", {
            get: function () { return this._location; },
            enumerable: true,
            configurable: true
        });
        /***获取英雄属性 */
        PheroInfo.prototype.GetHeroInfo = function (heroid) {
            var hero = H52D_Framework.HeroConfig[heroid];
            var info = H52D_Framework.HeroManager.Instance.GetHero(heroid);
            var base = H52D_Framework.HeroUpgrateConfig[hero.type][info.Level]["Attr"];
            return base;
        };
        /**初始化 */
        PheroInfo.prototype.Init = function () {
            this._attr = new H52D_Framework.Attribute();
            var s = this._cfg.heroPassiveSkill;
            for (var i = 1; i < H52D_Framework.GetTabLength(s); i++) {
                this.passiveId.push(s[i]["1"]);
                this.passiveOnLevel.push(s[i]["2"]);
            }
            /**升级表*/
            var Upgrate = H52D_Framework.HeroUpgrateConfig[this.hero_Type];
            /**进阶表*/
            var Advance = H52D_Framework.HeroAdvanceConfig[this._id];
            /**固定属性表*/
            var stationaryAttribute = H52D_Framework.HeroConfig[this._id]["stationaryAttribute"];
            /**英雄升级属性表*/
            var Level_attr = Upgrate[this._level]["Attr"];
            /**表HP */
            var TabHP = 0;
            /**表伤害 */
            var TabDamage = 0;
            /**英雄档次系数 */
            var heroRatio = this._cfg.heroRatio;
            /**有英雄星级 */
            if (this._star != 0) {
                /**进阶属性 */
                var adv = Advance[this._star]["Attr"];
                /**HP转化比 */
                var HpPer = 1 + adv[1][2] / 10000;
                /**伤害转化比 */
                var DamagePer = 1 + adv[2][2] / 10000;
                /**
                 * 最终属性 =  等级属性 * 系数 + 等及属性*加成比
                 */
                TabHP = Level_attr[1][2] * heroRatio * HpPer;
                TabDamage = Level_attr[2][2] * heroRatio * DamagePer;
            }
            /**没有英雄星级 */
            else {
                /**
                 * 最终属性 =  等级属性 * 英雄系数
                 */
                TabHP = Level_attr[1][2] * heroRatio;
                TabDamage = Level_attr[2][2] * heroRatio;
            }
            this.skillid = [this._cfg["heroAtt"], this._cfg["heroBigSkill"]];
            /**设置HP */
            this.attr.SetAttributeValue(1, H52D_Framework.eValueType.Base, TabHP >> 0);
            /**设置伤害 */
            this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, TabDamage >> 0);
            /**设置出手速度 */
            var speed = stationaryAttribute["1"]["2"];
            this.attr.SetAttributeValue(3, H52D_Framework.eValueType.Base, speed >> 0);
            /**设置暴击率 */
            var crit = stationaryAttribute["2"]["2"];
            this.attr.SetAttributeValue(4, H52D_Framework.eValueType.Base, crit >> 0);
            /**设置暴击倍率 */
            var ratio = stationaryAttribute["3"]["2"];
            this.attr.SetAttributeValue(5, H52D_Framework.eValueType.Base, ratio >> 0);
            this.InitPassiveID();
        };
        /**初始化被动技能id表 */
        PheroInfo.prototype.InitPassiveID = function () {
            this.onPassiveID = [];
            this.attributeID = [];
            this.conditionsID = [];
            for (var i = 0; i < this.passiveOnLevel.length; i++) {
                if (this._level >= this.passiveOnLevel[i]) {
                    this.onPassiveID.push(this.passiveId[i]);
                }
            }
            for (var i = 0; i < this.onPassiveID.length; i++) {
                var type_id = H52D_Framework.PassiveSkillConfig[this.onPassiveID[i]]["scriptID"];
                if (type_id == 1) {
                    this.attributeID.push(this.onPassiveID[i]);
                }
                else {
                    this.conditionsID.push(this.onPassiveID[i]);
                }
            }
            for (var k in this.attributeID) {
                if (this.attributeID[k]) {
                    var pas = H52D_Framework.PassiveSkillConfig[this.attributeID[k]]["scriptParam"];
                    if (pas[1] == 9 || pas[1] == 10) {
                        var po = new H52D_Framework.POAttribute(this, pas);
                        po.OnEffect();
                    }
                }
            }
        };
        /**设置第几排第几列 */
        PheroInfo.prototype.SetColOrow = function () {
            if (this._location == 0 || this._location == 1 || this._location == 2) {
                this.rowNum = 1;
            }
            else if (this._location == 3 || this._location == 4 || this._location == 5) {
                this.rowNum = 2;
            }
            else if (this._location == 6 || this._location == 7 || this._location == 8) {
                this.rowNum = 3;
            }
            if (this._location == 0 || this._location == 3 || this._location == 6) {
                this.colNum = 1;
            }
            else if (this._location == 1 || this._location == 4 || this._location == 7) {
                this.colNum = 2;
            }
            else if (this._location == 2 || this._location == 5 || this._location == 8) {
                this.colNum = 3;
            }
        };
        return PheroInfo;
    }());
    H52D_Framework.PheroInfo = PheroInfo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PheroInfo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PCampInfo = /** @class */ (function () {
        function PCampInfo(data) {
            this.level = 1;
            this.skillid = 0;
            this.ratio = 0;
            this.CD = 0;
            this.location = -2;
            this.attr = new H52D_Framework.Attribute();
            this.level = data["level"];
            this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, data["Base"]);
            this.skillid = H52D_Framework.GangLevelUpConfig[this.level]["GangSkillId"];
            this.ratio = H52D_Framework.ActiveSkillConfig[this.skillid]["damageList"]["1"]["2"] / 10000;
            this.CD = H52D_Framework.ActiveSkillConfig[this.skillid]["skillCD"] / 1000;
        }
        Object.defineProperty(PCampInfo.prototype, "Level", {
            get: function () { return this.level; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PCampInfo.prototype, "name", {
            get: function () { return "大船"; },
            enumerable: true,
            configurable: true
        });
        return PCampInfo;
    }());
    H52D_Framework.PCampInfo = PCampInfo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PCampInfo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**数据解包 */
    var DataUnPack = /** @class */ (function () {
        function DataUnPack(data) {
            this.HeroList = [];
            this.PetList = [];
            this.Camp = null;
            this.Playinfo = null;
            this.AttributeInfo = [];
            this.TypeArray = ["Hero", "Pet", "Camp", "Player", "Attribute"];
            this.Info = {};
            this.UnHeroData(data[this.TypeArray[0]]);
            this.UnPetData(data[this.TypeArray[1]]);
            this.UnCampData(data[this.TypeArray[2]]);
            this.UnPlayerData(data[this.TypeArray[3]]);
            this.UnAttribute(data[this.TypeArray[4]]);
            this.Info = {
                player: this.Playinfo,
                heroList: this.HeroList,
                pet: this.PetList,
                camp: this.Camp
            };
        }
        DataUnPack.prototype.UnHeroData = function (data) {
            for (var k in data) {
                var info = new H52D_Framework.PheroInfo(data[k]);
                this.HeroList.push(info);
            }
        };
        DataUnPack.prototype.UnPetData = function (data) {
            for (var k in data) {
                if (!H52D_Framework.ObjIsEmpty(data[k])) {
                    var info = new H52D_Framework.PPetInfo(data[k]);
                    this.PetList.push(info);
                }
            }
        };
        DataUnPack.prototype.UnCampData = function (data) {
            for (var k in data) {
                if (!H52D_Framework.ObjIsEmpty(data[k])) {
                    var info = new H52D_Framework.PCampInfo(data[k]);
                    this.Camp = info;
                }
            }
        };
        DataUnPack.prototype.UnPlayerData = function (data) {
            for (var k in data) {
                var info = new H52D_Framework.PPlayerInfo(data[k]);
                this.Playinfo = info;
            }
        };
        DataUnPack.prototype.UnAttribute = function (data) {
            if (!H52D_Framework.ObjIsEmpty(data)) {
                for (var k in data) {
                    var p = new H52D_Framework.PAttribute(data[k]);
                    this.AttributeInfo.push(p);
                }
            }
        };
        return DataUnPack;
    }());
    H52D_Framework.DataUnPack = DataUnPack;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DataUnPack.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**数据打包 */
    var DataPack = /** @class */ (function () {
        function DataPack() {
            this.Info = {};
            this.EInfo = {};
            this.heroInfo = {};
            this.petInfo = {};
            this.campInfo = {};
            this.Playerinfo = {};
            this.AttributeInfo = {};
            this.TypeArray = ["Hero", "Pet", "Camp", "Player", "Attribute"];
        }
        Object.defineProperty(DataPack, "Instance", {
            get: function () {
                if (this._instance == null) {
                    this._instance = new DataPack();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        DataPack.prototype.PackHeroInfo = function (info) {
            for (var k in info) {
                this.heroInfo[Number(k)] = {
                    id: info[k].nHeroID,
                    level: info[k].Level,
                    star: info[k].Star,
                    location: info[k].location
                };
            }
        };
        DataPack.prototype.PackPetInfo = function (info) {
            if (!H52D_Framework.ObjIsEmpty(info)) {
                this.petInfo[0] = { id: info.ID, level: info.Level };
            }
            else {
                this.petInfo[0] = info;
            }
        };
        DataPack.prototype.PackCampInfo = function (info) {
            if (!H52D_Framework.ObjIsEmpty(info)) {
                this.campInfo[0] = { level: info.Level, Base: info.attr.GetAttributeTypeValue(2, H52D_Framework.eValueType.Base) };
            }
            else {
                this.campInfo[0] = info;
            }
        };
        DataPack.prototype.PackPlayerInfo = function () {
            var info = H52D_Framework.MasterPlayer.Instance.player;
            this.Playerinfo[0] = {
                level: info.Level,
                MpMax: info.vo.attr.GetAttributeValue(51),
                MpRec: info.vo.attr.GetAttributeValue(53),
                Cmp: info.Mp,
                isVip: info.IsVip,
                sList: info.SkillList
            };
        };
        DataPack.prototype.PackAttribute = function () {
            var objs = [];
            this.AttributeInfo = [];
            var hero = H52D_Framework.HeroManager.Instance.Herolist;
            for (var k in hero) {
                var heroi = hero[k];
                var pass = heroi.attributeID;
                for (var i in pass) {
                    var p = H52D_Framework.PassiveSkillConfig[pass[i]];
                    objs.push(p["scriptParam"]);
                }
            }
            var petL = H52D_Framework.PetManager.Instance.OwnPetList;
            for (var k in petL) {
                if (petL[k]) {
                    var s = petL[k].currentAttribute;
                    objs.push(s[1]);
                    objs.push(s[2]);
                }
            }
            var eqa = H52D_Framework.EquipManager.Instance.CurrentAttrributeList;
            for (var k in eqa) {
                if (eqa[k]) {
                    for (var i in eqa[k]) {
                        if (eqa[k][i]) {
                            objs.push(eqa[k][i].getData);
                        }
                    }
                }
            }
            var eqs = H52D_Framework.EquipManager.Instance.CurrentAttrributeList;
            for (var k in eqs) {
                if (eqs[k]) {
                    for (var i in eqs[k]) {
                        if (eqs[k][i]) {
                            objs.push(eqs[k][i].getData);
                        }
                    }
                }
            }
            for (var i = objs.length - 1; i >= 0; i--) {
                if (objs[i][1] == 9 || objs[i][1] == 10) {
                    objs.splice(i, 1);
                }
            }
            this.AttributeInfo = objs.concat();
        };
        DataPack.prototype.Pack = function () {
            this.Info[this.TypeArray[0]] = this.heroInfo;
            this.Info[this.TypeArray[1]] = this.petInfo;
            this.Info[this.TypeArray[2]] = this.campInfo;
            this.Info[this.TypeArray[3]] = this.Playerinfo;
            this.Info[this.TypeArray[4]] = this.AttributeInfo;
        };
        DataPack.prototype.Destroy = function () {
            this.Info = {};
            this.EInfo = {};
            this.AttributeInfo = [];
            this.Playerinfo = {};
            this.petInfo = {};
            this.campInfo = {};
            this.heroInfo = {};
        };
        DataPack._instance = null;
        return DataPack;
    }());
    H52D_Framework.DataPack = DataPack;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DataPack.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**PVP数据管理 */
    var DataManager = /** @class */ (function () {
        function DataManager() {
        }
        Object.defineProperty(DataManager, "Instance", {
            get: function () {
                if (this._instance == null) {
                    this._instance = new DataManager();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataManager.prototype, "packdata", {
            /**打包类 */
            get: function () { return H52D_Framework.DataPack.Instance; },
            enumerable: true,
            configurable: true
        });
        DataManager.prototype.Init = function () {
            this.PackData();
            this.Pars();
        };
        DataManager.prototype.PackData = function () {
            /**获取自身数据 */
            this._CData = new H52D_Framework.CharacterData();
            if (!H52D_Framework.ObjIsEmpty(H52D_Framework.KickingManager.Instance.Kickingwar) && H52D_Framework.KickingManager.Instance.petId > 0) {
                this._CData.GetData(H52D_Framework.KickingManager.Instance.Kickingwar, H52D_Framework.KickingManager.Instance.petId);
            }
            else if (!H52D_Framework.ObjIsEmpty(H52D_Framework.KickingManager.Instance.Kickingwar) && H52D_Framework.KickingManager.Instance.petId <= 0) {
                this._CData.GetData(H52D_Framework.KickingManager.Instance.Kickingwar, H52D_Framework.PetManager.Instance.CurrentpetID);
            }
            else if (H52D_Framework.ObjIsEmpty(H52D_Framework.KickingManager.Instance.Kickingwar) && H52D_Framework.KickingManager.Instance.petId > 0) {
                this._CData.GetData(H52D_Framework.MasterPlayer.Instance.player.HeroWarList, H52D_Framework.KickingManager.Instance.petId);
            }
            else if (H52D_Framework.ObjIsEmpty(H52D_Framework.KickingManager.Instance.Kickingwar) && H52D_Framework.KickingManager.Instance.petId <= 0) {
                this._CData.GetData(H52D_Framework.MasterPlayer.Instance.player.HeroWarList, H52D_Framework.PetManager.Instance.CurrentpetID);
            }
            /**打包数据 */
            this.packdata.Destroy();
            this.packdata.PackHeroInfo(this._CData.Info[0]);
            this.packdata.PackPetInfo(this._CData.Info[1]);
            this.packdata.PackCampInfo(this._CData.Info[2]);
            this.packdata.PackPlayerInfo();
            this.packdata.PackAttribute();
            this.packdata.Pack();
            /**发送数据消息 */
            this.SendData(this.packdata.Info);
        };
        DataManager.prototype.MainPackData = function (bNotSendServer) {
            /**获取自身数据 */
            this._CData = new H52D_Framework.CharacterData();
            this._CData.GetData(H52D_Framework.MasterPlayer.Instance.player.HeroWarList, H52D_Framework.PetManager.Instance.CurrentpetID);
            /**打包数据 */
            this.packdata.Destroy();
            this.packdata.PackHeroInfo(this._CData.Info[0]);
            this.packdata.PackPetInfo(this._CData.Info[1]);
            this.packdata.PackCampInfo(this._CData.Info[2]);
            this.packdata.PackPlayerInfo();
            this.packdata.PackAttribute();
            this.packdata.Pack();
            /**发送数据消息 */
            if (!bNotSendServer) {
                this.SendData(this.packdata.Info);
            }
        };
        /**解包 自身与敌方的数据 */
        DataManager.prototype.Pars = function () {
            this.UnOPack = new H52D_Framework.DataUnPack(this.packdata.Info);
        };
        DataManager.prototype.SendData = function (data) {
            //发送数据消息
            H52D_Framework.RemoteCall.Instance.Send("K_ReqUpdateCombatInfo", data);
        };
        DataManager.prototype.ReciveData = function (edata) {
            this.UnEPack = new H52D_Framework.DataUnPack(edata);
        };
        DataManager._instance = null;
        return DataManager;
    }());
    H52D_Framework.DataManager = DataManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DataManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * PVP战斗数据类
     * @author zhang zhenming
     */
    var CharacterData = /** @class */ (function () {
        function CharacterData() {
            this._Info = [];
        }
        Object.defineProperty(CharacterData.prototype, "Info", {
            get: function () { return this._Info; },
            enumerable: true,
            configurable: true
        });
        CharacterData.prototype.GetData = function (war, petid) {
            this._Info = [];
            var h = this.GetHeroInfo(war);
            var p = this.GetPetInfo(petid);
            var c = this.GetCampInfo();
            this._Info.push(h);
            this._Info.push(p);
            this._Info.push(c);
            return this._Info;
        };
        CharacterData.prototype.GetHeroInfo = function (War) {
            var info = [];
            for (var _id in War) {
                var vo = H52D_Framework.HeroManager.Instance.GetHero(War[_id]);
                if (!vo) {
                    continue;
                }
                vo.location = Number(_id);
                info.push(vo);
            }
            return info;
        };
        CharacterData.prototype.GetPetInfo = function (id) {
            var info = {};
            if (id > 0) {
                info = H52D_Framework.BPetManager.Instance.LoadBPetinfo(id);
            }
            return info;
        };
        CharacterData.prototype.GetCampInfo = function () {
            var info = {};
            if (H52D_Framework.BCampManager.Instance.Camp) {
                info = H52D_Framework.BCampManager.Instance.Camp.vo;
            }
            return info;
        };
        return CharacterData;
    }());
    H52D_Framework.CharacterData = CharacterData;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CharacterData.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**PVP人物实例 */
    var PvPCharacter = /** @class */ (function () {
        function PvPCharacter(i) {
            this._btype = 0;
            this._btype = i;
        }
        Object.defineProperty(PvPCharacter.prototype, "Heromanager", {
            get: function () { return this._HeroManger; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PvPCharacter.prototype, "HeroList", {
            get: function () { return this._HeroManger.CHeroList; },
            enumerable: true,
            configurable: true
        });
        PvPCharacter.prototype.Load = function () {
            this.LoadHero();
            this.LoadPet();
            this.LoadCamp();
            this.LoadPlayer();
            if (this._btype == 1) {
                var info = H52D_Framework.DataManager.Instance.UnOPack.AttributeInfo;
                for (var k in info) {
                    info[k].OnEffect(H52D_Framework.DataManager.Instance.UnOPack.Info);
                }
            }
            else {
                var info = H52D_Framework.DataManager.Instance.UnEPack.AttributeInfo;
                for (var k in info) {
                    info[k].OnEffect(H52D_Framework.DataManager.Instance.UnEPack.Info);
                }
            }
        };
        PvPCharacter.prototype.LoadPlayer = function () {
            if (this._btype == 1) {
                this.player = new H52D_Framework.PPSkill(this._btype, H52D_Framework.DataManager.Instance.UnOPack.Playinfo);
            }
            else {
                this.player = new H52D_Framework.PPSkill(this._btype, H52D_Framework.DataManager.Instance.UnEPack.Playinfo);
            }
        };
        PvPCharacter.prototype.LoadHero = function () {
            this._HeroManger = new H52D_Framework.PHeroCradMgr(this._btype);
            if (this._btype == 1) {
                this._HeroManger.AvatarInit(null, H52D_Framework.DataManager.Instance.UnOPack.HeroList);
            }
            else {
                this._HeroManger.AvatarInit(null, H52D_Framework.DataManager.Instance.UnEPack.HeroList);
            }
        };
        PvPCharacter.prototype.LoadPet = function () {
            if (this._btype == 1) {
                if (!H52D_Framework.ObjIsEmpty(H52D_Framework.DataManager.Instance.UnOPack.PetList[0])) {
                    this.petMgr = new H52D_Framework.PPetManager();
                    this.petMgr.LoadBPet(H52D_Framework.PetManager.Instance.CurrentpetID, H52D_Framework.KickingManager.Instance.sceneId, this._btype, H52D_Framework.DataManager.Instance.UnOPack.PetList[0]);
                }
            }
            else {
                if (!H52D_Framework.ObjIsEmpty(H52D_Framework.DataManager.Instance.UnEPack.PetList[0])) {
                    this.petMgr = new H52D_Framework.PPetManager();
                    this.petMgr.LoadBPet(H52D_Framework.PetManager.Instance.CurrentpetID, H52D_Framework.KickingManager.Instance.sceneId, this._btype, H52D_Framework.DataManager.Instance.UnEPack.PetList[0]);
                }
            }
        };
        PvPCharacter.prototype.LoadCamp = function () {
            if (this._btype == 1) {
                if (!H52D_Framework.ObjIsEmpty(H52D_Framework.DataManager.Instance.UnOPack.Camp)) {
                    this.campMgr = new H52D_Framework.PCampManager();
                    this.campMgr.LoadBCamp(this._btype, H52D_Framework.DataManager.Instance.UnOPack.Camp);
                }
            }
            else {
                if (!H52D_Framework.ObjIsEmpty(H52D_Framework.DataManager.Instance.UnEPack.Camp)) {
                    this.campMgr = new H52D_Framework.PCampManager();
                    this.campMgr.LoadBCamp(this._btype, H52D_Framework.DataManager.Instance.UnEPack.Camp);
                }
            }
        };
        PvPCharacter.prototype.OnUpdate = function () {
            if (this._HeroManger) {
                this._HeroManger.OnUpdate();
            }
            if (this.campMgr) {
                this.campMgr.Camp.OnUpdate();
            }
            if (this.petMgr) {
                this.petMgr.PetIns.OnUpdate();
            }
            if (this.player) {
                this.player.OnUpdate();
            }
        };
        PvPCharacter.prototype.Destroy = function () {
            if (this._HeroManger) {
                this._HeroManger.Destroy();
                this._HeroManger = null;
            }
            if (this.campMgr) {
                this.campMgr.Destroy();
                this.campMgr = null;
            }
            if (this.petMgr) {
                this.petMgr.Destroy();
                this.petMgr = null;
            }
            if (this.player) {
                this.player.Destroy();
            }
        };
        return PvPCharacter;
    }());
    H52D_Framework.PvPCharacter = PvPCharacter;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PvPCharacter.js.map
/*
* 角色技能
*/
var H52D_Framework;
(function (H52D_Framework) {
    var PPSkill = /** @class */ (function () {
        /**初始化 */
        function PPSkill(btype, vo) {
            this._btype = 0;
            this.target_D = [];
            this.Target_B = [];
            this.bclose = false;
            this._dtime = 0;
            /**玩家技能列表 */
            this._skillTab = [];
            this._btype = btype;
            this.vo = vo;
            this.type = eCharacter_TYPE.PLAYER;
            this.SE = SkinEnum.SkinTap;
            this.SetSkillIDList();
            if (this._btype == 1) {
                H52D_Framework.Event.RegistEvent(H52D_Framework.FightType + H52D_Framework.EventDefine.SPELL_SKILL, Laya.Handler.create(this, this.Spell));
            }
        }
        PPSkill.prototype.ImValue = function () {
            var attr = this.vo.attr;
            var a = attr.GetAttributeTypeValue(22, H52D_Framework.eValueType.Percent);
            var d = attr.GetAttributeTypeValue(23, H52D_Framework.eValueType.Percent);
            var aa = attr.GetAttributeTypeValue(24, H52D_Framework.eValueType.Percent);
            var pet = attr.GetAttributeTypeValue(25, H52D_Framework.eValueType.Percent);
            var camp = attr.GetAttributeTypeValue(26, H52D_Framework.eValueType.Percent);
            var alld = attr.GetAttributeTypeValue(27, H52D_Framework.eValueType.Percent);
            var dstr = "";
            if (this._btype == 1) {
                dstr = "O_";
            }
            else {
                dstr = "E_";
            }
            // let damage = attr.GetAttributeValue(2);
            var basedamage = attr.GetAttributeTypeValue(2, H52D_Framework.eValueType.Base);
            var hpp = attr.GetAttributeValue(1);
            var lc = this.vo.location + 1;
            var sttt = "[" + lc + "]_" + "<" + dstr + this.vo.name + ">_";
            var str = "攻击型减免_" + a + " 防御型减免_" + d + " 所有英雄减免_" + a;
            var str2 = "宠物减免_" + pet + " 阵营减免_" + camp + " 所有伤害减免_" + alld;
            H52D_Framework.DamageShow.Instance.SetText(sttt);
            H52D_Framework.DamageShow.Instance.SetText(str);
            H52D_Framework.DamageShow.Instance.SetText(str2);
            H52D_Framework.DamageShow.Instance.SetText(" 基础伤害 " + "<" + basedamage + ">" +
                "面板血量 " + "<" + hpp + ">");
        };
        /**初始化玩家技能 */
        PPSkill.prototype.SetSkillIDList = function () {
            if (this.vo) {
                for (var i in this.vo.SkillList) {
                    this._skillTab[i] = new H52D_Framework.PSkill(this.vo.SkillList[i], this, this._btype, eBELONGS_TO.BIG);
                }
            }
        };
        /**释放技能 */
        PPSkill.prototype.Spell = function (index, skillId) {
            if (index == 0) {
                this.DamageSkill();
            }
            else {
                this.BuffSkill(index);
            }
        };
        /**伤害型技能 */
        PPSkill.prototype.DamageSkill = function () {
            this._skillTab[0].SpellSkill(this.target_D);
        };
        /**Buff类技能 */
        PPSkill.prototype.BuffSkill = function (index) {
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/buff.mp3");
            }
            this._skillTab[index].SpellSkill(this.Target_B);
        };
        PPSkill.prototype.OnUpdate = function () {
            if (this._btype == -1) {
                if (this.bclose) {
                    this._dtime += 100;
                }
                for (var k in this._skillTab) {
                    this._skillTab[k].OnUpdate();
                    if (this._skillTab[k] &&
                        !this._skillTab[k].IsCD &&
                        this.bclose &&
                        this._dtime >= 2000 &&
                        this.vo.CMp >= this._skillTab[k].Data.conMp) {
                        this._dtime = 0;
                        this.vo.CMp -= this._skillTab[k].Data.conMp;
                        if (Number(k) == 0) {
                            this._skillTab[k].SpellSkill(this.target_D);
                        }
                        else {
                            this._skillTab[k].SpellSkill(this.Target_B);
                        }
                    }
                }
            }
            else {
                for (var k in this._skillTab) {
                    if (this._skillTab[k])
                        this._skillTab[k].OnUpdate();
                }
            }
        };
        /**销毁 */
        PPSkill.prototype.Destroy = function () {
            if (this._btype == 1) {
                H52D_Framework.Event.RemoveEvent(H52D_Framework.FightType + H52D_Framework.EventDefine.SPELL_SKILL, Laya.Handler.create(this, this.Spell));
            }
            for (var i in this.vo.SkillList) {
                if (this._skillTab[i])
                    this._skillTab[i].Destroy();
            }
            this._skillTab = [];
        };
        return PPSkill;
    }());
    H52D_Framework.PPSkill = PPSkill;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PPSkill.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PPetManager = /** @class */ (function () {
        function PPetManager() {
        }
        Object.defineProperty(PPetManager.prototype, "PetIns", {
            get: function () { return this._Pet; },
            enumerable: true,
            configurable: true
        });
        /**加载神兽模型 */
        PPetManager.prototype.LoadBPet = function (id, sceneId, btype, vo) {
            this.Destroy();
            var sid = sceneId - 10000;
            var point;
            if (btype == 1) {
                point = H52D_Framework.PetPoint[sid];
            }
            else {
                point = H52D_Framework.EPetPoint[sid];
            }
            var x = point[0];
            var y = point[1];
            this._Pet = new H52D_Framework.PPet(id, vo, btype);
            this._Pet.LoadMoudle(x, y, 2, null);
            //点击宠物气泡
            // Event.DispatchEvent("SetClickPetButton", [x, y]);
        };
        /**设置目标开启战斗 */
        PPetManager.prototype.SetTarget = function (target) {
            this._Pet.Target = [];
            this._Pet.Target = target;
            this._Pet.BClose = false;
        };
        PPetManager.prototype.SetDamage = function () {
            this._Pet.SetDamage();
        };
        PPetManager.prototype.Destroy = function () {
            if (this._Pet) {
                this._Pet.Destroy();
                this._Pet = null;
            }
        };
        return PPetManager;
    }());
    H52D_Framework.PPetManager = PPetManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PPetManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**PVP数据管理 */
    var PHeroCradMgr = /** @class */ (function () {
        /**初始化 */
        function PHeroCradMgr(type) {
            this._type = 0;
            this._index = 0;
            this.Info = [];
            this.TospeedList = [];
            this._type = type;
            this._CHeroList = [];
        }
        Object.defineProperty(PHeroCradMgr.prototype, "CHeroList", {
            get: function () { return this._CHeroList; },
            enumerable: true,
            configurable: true
        });
        PHeroCradMgr.prototype.GetHeroCardByid = function (id) {
            for (var k in this._CHeroList) {
                if (this._CHeroList[k]) {
                    if (this._CHeroList[k].vo.id == id) {
                        return this._CHeroList[k];
                    }
                }
            }
        };
        PHeroCradMgr.prototype.OnUpdate = function () {
            for (var k in this._CHeroList) {
                if (this._CHeroList[k]) {
                    this._CHeroList[k].OnUpdate();
                }
            }
            for (var i = this._CHeroList.length; i >= 0; i--) {
                if (this._CHeroList[i] && this._CHeroList[i].IsDie) {
                    this._CHeroList[i] = null;
                }
            }
        };
        PHeroCradMgr.prototype.AvatarInit = function (callBack, info) {
            this.loadComplete = callBack;
            this.Info = info;
            this._CHeroList = [];
            this._index = 0;
            //加载英雄
            this.loadHero();
        };
        PHeroCradMgr.prototype.loadHero = function () {
            var _this = this;
            for (var key = 0; key < this.Info.length; key++) {
                var hero = new H52D_Framework.PHeroCrad(this.Info[key], this._type);
                var dir = 1;
                var id = this.Info[key].id;
                var scale = H52D_Framework.HeroConfig[id]["modelScale"];
                var x = 0;
                var y = 0;
                var location_1 = hero.vo.location;
                if (this._type == 1) {
                    x = H52D_Framework.HeroLocal[location_1][0] * G_StageWidthScale;
                    y = H52D_Framework.HeroLocal[location_1][1];
                    dir = 1;
                }
                else {
                    x = H52D_Framework.MonsterLocal[location_1][0] * G_StageWidthScale;
                    y = H52D_Framework.MonsterLocal[location_1][1];
                    dir = -1;
                }
                this._CHeroList.push(hero);
                hero.LoadMoudle(id, dir, scale, x, y, 0, Laya.Handler.create(this, function () {
                    _this._index++;
                    if (_this._index >= _this.Info.length) {
                        _this.HeroLoadComplete();
                    }
                }));
            }
        };
        PHeroCradMgr.prototype.HeroLoadComplete = function () {
            this.SortTospeed();
            if (this.loadComplete) {
                this.loadComplete.run();
            }
        };
        PHeroCradMgr.prototype.SortTospeed = function () {
            this.TospeedList = this._CHeroList.concat();
            /**英雄表长度 */
            var Length = this.TospeedList.length;
            /**用先手速度排序 最慢的是0 */
            for (var i = 0; i < Length; i++) {
                for (var j = i + 1; j < Length; j++) {
                    if (this.TospeedList[i] && this.TospeedList[j]) {
                        if (this.TospeedList[i].vo.ToSpeed > this.TospeedList[j].vo.ToSpeed) {
                            var current = this.TospeedList[i];
                            this.TospeedList[i] = this.TospeedList[j];
                            this.TospeedList[j] = current;
                        }
                    }
                }
            }
        };
        PHeroCradMgr.prototype.HeroAttack = function () {
            var hf = this.TospeedList;
            if (!hf)
                return;
            var len = hf.length - 1;
            var _loop_1 = function (i) {
                var hc = hf[i];
                if (!hc)
                    return { value: void 0 };
                var time = 0;
                /**第一位出手英雄 */
                var X = H52D_Framework.GameParamConfig["FastestHeroFirstAttackTime"];
                /**其他英雄出手 */
                var Y = H52D_Framework.GameParamConfig["OtherHeroFirstAttackTimeRatio"];
                if (i == len) {
                    time = X;
                }
                else {
                    var firstHero = hf[len];
                    var F = firstHero.vo.ToSpeed;
                    time = X + (F - hc.vo.ToSpeed) * Y;
                }
                // hc.InitTimer(time, Laya.Handler.create(this, () => {
                //     hc.BClose = false;
                // }));
                H52D_Framework.Tick.Once(time, this_1, function () {
                    hc.BClose = false;
                });
            };
            var this_1 = this;
            for (var i = len; i >= 0; i--) {
                var state_1 = _loop_1(i);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
            // this._OpenTimer = true;
        };
        /**销毁 */
        PHeroCradMgr.prototype.Destroy = function () {
            if (this._CHeroList) {
                for (var i = 0; i < H52D_Framework.GetTabLength(this._CHeroList); i++) {
                    if (this._CHeroList[i]) {
                        this._CHeroList[i].Destroy();
                        this._CHeroList[i] = null;
                    }
                }
                this._CHeroList = [];
            }
            this.TospeedList = [];
        };
        PHeroCradMgr.prototype.show = function () {
            if (this._CHeroList) {
                for (var i = 0; i < H52D_Framework.GetTabLength(this._CHeroList); i++) {
                    if (this._CHeroList[i]) {
                        this._CHeroList[i].ImValue();
                    }
                }
            }
        };
        return PHeroCradMgr;
    }());
    H52D_Framework.PHeroCradMgr = PHeroCradMgr;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PHeroCradMgr.js.map
/**
* name
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**阵营管理类 */
    var PCampManager = /** @class */ (function () {
        function PCampManager() {
        }
        Object.defineProperty(PCampManager.prototype, "Camp", {
            /**阵营 */
            get: function () { return this._Camp; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PCampManager.prototype, "vo", {
            get: function () { return this._Camp.vo; },
            enumerable: true,
            configurable: true
        });
        /**加载阵营模型 */
        PCampManager.prototype.LoadBCamp = function (btype, vo) {
            this.Destroy();
            this._Camp = new H52D_Framework.PCamp(vo, btype);
            var x;
            var y;
            if (btype == 1) {
                x = 30;
                y = 300;
            }
            else {
                x = 710;
                y = 300;
            }
            this._Camp.LoadMoudle(x, y, 2, null);
        };
        /**设置目标开启战斗 */
        PCampManager.prototype.SetTarget = function (target) {
            this._Camp.Target = target;
            this._Camp.BClose = false;
        };
        PCampManager.prototype.SetDamage = function () {
            this.Camp.SetDamage();
        };
        PCampManager.prototype.Destroy = function () {
            if (this._Camp) {
                this._Camp.Destroy();
                this._Camp = null;
            }
        };
        return PCampManager;
    }());
    H52D_Framework.PCampManager = PCampManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PCampManager.js.map
/**
* name
*/
var H52D_Framework;
(function (H52D_Framework) {
    var DamageShow = /** @class */ (function () {
        function DamageShow() {
            this.LogUI = null;
            this.LogUI = new H52D_Framework.TextNameView();
            H52D_Framework.ViewToppestRoot.addChild(this.LogUI);
            this.LogUI.visible = false;
            Laya.stage.on(Laya.Event.KEY_DOWN, this, this.KeyDownHander);
        }
        Object.defineProperty(DamageShow, "Instance", {
            get: function () {
                if (this.instance == null) {
                    this.instance = new DamageShow();
                }
                return this.instance;
            },
            enumerable: true,
            configurable: true
        });
        DamageShow.prototype.SetText = function (parame) {
            this.LogUI.SetLog(parame);
        };
        DamageShow.prototype._Cler = function () {
            this.LogUI._Cler();
        };
        DamageShow.prototype.KeyDownHander = function (key) {
            switch (key.keyCode) {
                case Laya.Keyboard.P:
                    this.LogUI.visible = !this.LogUI.visible;
                    break;
            }
        };
        DamageShow.instance = null;
        return DamageShow;
    }());
    H52D_Framework.DamageShow = DamageShow;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DamageShow.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**PVP人物 */
    var Character = /** @class */ (function () {
        /**初始化 */
        function Character(btype, bbool) {
            this._id = 0;
            /**攻击目标 */
            this._target = [];
            this._order = 0;
            this._PosX = 0;
            this._PosY = 0;
            /**被动技能列表 */
            this._passiveSkillList = [];
            this._bClose = true;
            this._currentHp = 0;
            this._btype = 1;
            this.CaptainTarget = [];
            this.IsDie = false;
            this.bAttack = false;
            this._bcaptain = false;
            this._btype = btype;
            this._bcaptain = false;
        }
        Object.defineProperty(Character.prototype, "ID", {
            get: function () { return this._id; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Character.prototype, "Target", {
            get: function () { return this._target; },
            /**攻击目标 */
            set: function (value) { this._target = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Character.prototype, "avatar", {
            get: function () { return this._avatar; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Character.prototype, "vo", {
            /**数据模型*/
            get: function () { return this._dataVo; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Character.prototype, "Order", {
            /**人物层级 */
            get: function () { return this._order; },
            enumerable: true,
            configurable: true
        });
        /**设置人物层级 */
        Character.prototype.SetOrderZ = function (i) {
            this._order = i;
            this._avatar.SetOrder(i);
        };
        Object.defineProperty(Character.prototype, "PosY", {
            /**人物位置Y坐标 */
            get: function () { return this._PosY; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Character.prototype, "PosX", {
            /**人物位置X坐标 */
            get: function () { return this._PosX; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Character.prototype, "BClose", {
            /**是否关闭战斗 */
            get: function () { return this._bClose; },
            set: function (Value) { this._bClose = Value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Character.prototype, "bCaptain", {
            get: function () { return this._bcaptain; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Character.prototype, "attackSkill", {
            get: function () { return this._attackskill; },
            enumerable: true,
            configurable: true
        });
        Character.prototype.setCurrentHp = function (value) {
            this._currentHp = value;
        };
        /**初始化英雄技能 */
        Character.prototype.InitSkill = function () {
            /**初始化英雄普攻 */
            this._attackskill = new H52D_Framework.PSkill(this.vo.skillid[0], this, this._btype, eBELONGS_TO.ATTACK);
            /**是队长就初始化队长技能 */
            if (this.vo.location == 4) {
                this._bcaptain = true;
                this._captainSkill = new H52D_Framework.PSkill(this.vo.skillid[1], this, this._btype, eBELONGS_TO.BIG);
            }
        };
        /**设置先手速度 */
        Character.prototype.SetToSpeed = function () {
            /**先手速度浮动点 （0.95-1.05） */
            var speedoffect = (Math.random() * 11 + 95) >> 0;
            /**转化百分比为小数 */
            var speedfloat = speedoffect / 100;
            /**先手速度 = 先手速度*浮动点 */
            var speed = this.vo.attr.GetAttributeValue(3);
            this.vo.ToSpeed = speed * speedfloat;
        };
        /**获取当前动画时间 */
        Character.prototype.GetAniDuration = function () {
            return this._avatar.GetAniDuration();
        };
        /**出生特效 */
        Character.prototype.ChangeEffect = function () {
            var _this = this;
            var oldScale = this.vo.Scla;
            this._avatar.scale = 0;
            H52D_Framework.TweenList.to(this, this._avatar, { scale: oldScale }, 250, function () {
                if (!_this._avatar)
                    return;
                _this._avatar.scale = oldScale;
            });
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/boss_appear2.mp3");
            }
            if (this._brithAvatar) {
                this._brithAvatar.Play("effect_state_qiehuan", false);
            }
            else {
                this._brithAvatar = new H52D_Framework.Avatar(H52D_Framework.AvatarEffectRoot);
                this._brithAvatar.Load("res/effect/effect_state_qiehuan/effect_state_qiehuan.sk", 1, 0.4, this.PosX, this.PosY - 78, Laya.Handler.create(this, function () {
                    _this._brithAvatar.Play("effect_state_qiehuan", false);
                }));
            }
        };
        /**释放队长技能 */
        Character.prototype.SpellCaptainSkill = function () {
            this._captainSkill.SpellSkill(this.CaptainTarget);
        };
        Character.prototype.CaptainEffct = function () {
            var avatar = new H52D_Framework.Avatar(H52D_Framework.EffectRoot);
            avatar.Load(H52D_Framework.EffectDefine.shifa, 1, 1, this.PosX, this.PosY, Laya.Handler.create(this, function () {
                avatar.Play("effect_state_shifa", false, false, function () {
                    avatar.Destroy();
                    avatar = null;
                });
            }));
        };
        /**普通攻击 */
        Character.prototype.SpellAttackSkill = function () {
            var _this = this;
            if (!this._target || !this._attackskill)
                return;
            this.bAttack = true;
            this._avatar.Play(H52D_Framework.AnimationName.attack, false, true, function () {
                _this.bAttack = false;
                _this.Idle();
            });
            this._attackskill.SpellSkill(this._target);
        };
        /** 待机 */
        Character.prototype.Idle = function () {
            if (!this._avatar)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.idle, true);
        };
        /** 被击 */
        Character.prototype.Hit = function () {
            var _this = this;
            if (!this._avatar || this.bAttack || this.IsDie)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.hit, false, true, function () {
                _this.Idle();
            });
        };
        /** 死亡 */
        Character.prototype.Die = function () {
            var _this = this;
            if (!this._avatar)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.die, false, false, function () {
                _this.Destroy();
            });
        };
        /** 受伤 */
        Character.prototype.OnHurt = function (be, owr, damage, e, iscrit, type, viewRoot) {
            if ((this._currentHp <= 0) || this.IsDie || this._avatar == null) {
                return;
            }
            if (type != SPECIAL_TYPE.SUSRAINED) {
                this.Hit();
            }
            if (damage == 0) {
                damage = 1;
            }
            H52D_Framework.Floating.DamageText_P(damage.toString(), e, this.PosX, this.PosY - 100, iscrit);
            this.setCurrentHp(this._currentHp - damage);
            var Bbji = "";
            if (iscrit) {
                Bbji = "暴击";
            }
            else {
                Bbji = " ";
            }
            var str = "";
            var oloc = 0;
            if (!owr.vo)
                return;
            if (owr.vo && owr.vo.location) {
                oloc = owr.vo.location + 1;
            }
            var eloc = this.vo.location + 1;
            var dtype = "普攻";
            if (be == eBELONGS_TO.BIG) {
                dtype = " 队长技能";
            }
            if (this._btype == 1) {
                str = "敌方【" + oloc + "】位置 [" + owr.vo.name + "]" + "使用【" + dtype + "】对我方【" +
                    eloc + "】位置 [" + this.vo.name + "] 造成 " + Bbji + damage.toString() + " 伤害";
            }
            else {
                str = "我方【" + oloc + "】位置 [" + owr.vo.name + "] " + "使用【" + dtype + "】对敌方【" +
                    eloc + "】位置 [" + this.vo.name + "] 造成 " + Bbji + damage.toString() + " 伤害";
            }
            H52D_Framework.DamageShow.Instance.SetText(str);
        };
        Character.prototype.ImValue = function () {
            var attr = this.vo.attr;
            var a = attr.GetAttributeTypeValue(22, H52D_Framework.eValueType.Percent);
            var d = attr.GetAttributeTypeValue(23, H52D_Framework.eValueType.Percent);
            var aa = attr.GetAttributeTypeValue(24, H52D_Framework.eValueType.Percent);
            var pet = attr.GetAttributeTypeValue(25, H52D_Framework.eValueType.Percent);
            var camp = attr.GetAttributeTypeValue(26, H52D_Framework.eValueType.Percent);
            var alld = attr.GetAttributeTypeValue(27, H52D_Framework.eValueType.Percent);
            var aj = attr.GetAttributeTypeValue(2, H52D_Framework.eValueType.Percent);
            var dstr = "";
            if (this._btype == 1) {
                dstr = "O_";
            }
            else {
                dstr = "E_";
            }
            var damage = attr.GetAttributeValue(2);
            var basedamage = attr.GetAttributeTypeValue(2, H52D_Framework.eValueType.Base);
            var hpp = attr.GetAttributeValue(1);
            var lc = this.vo.location + 1;
            var sttt = "[" + lc + "]_" + "<" + dstr + this.vo.name + ">_";
            var str = "攻击型减免_" + a + " 防御型减免_" + d + " 所有英雄减免_" + aa;
            var str2 = "宠物减免_" + pet + " 阵营减免_" + camp + " 所有伤害减免_" + alld;
            var strj = "伤害加成_" + aj;
            H52D_Framework.DamageShow.Instance.SetText(sttt);
            H52D_Framework.DamageShow.Instance.SetText(str);
            H52D_Framework.DamageShow.Instance.SetText(str2);
            H52D_Framework.DamageShow.Instance.SetText(strj);
            if (this.type == eCharacter_TYPE.PET || this.type == eCharacter_TYPE.CAMP) {
                // damage = damage * this.vo.ratio >>0;
                basedamage = basedamage * this.vo.ratio >> 0;
            }
            H52D_Framework.DamageShow.Instance.SetText(" 基础伤害 " + "<" + basedamage + ">" +
                " 面板血量 " + "<" + hpp + ">");
        };
        /**攻击触发Buff */
        Character.prototype.AttackTriggerConditions = function () {
            for (var i = 0; i < this._passiveSkillList.length; i++) {
                if (this._passiveSkillList[i]) {
                    if (this._passiveSkillList[i].BAttack) {
                        this._passiveSkillList[i].AttackTriggerSkill();
                    }
                }
            }
        };
        /**被攻击触发Buff */
        Character.prototype.OnHurtTriggerConditions = function () {
            for (var i = 0; i < this._passiveSkillList.length; i++) {
                if (this._passiveSkillList[i]) {
                    if (this._passiveSkillList[i].BHurt) {
                        this._passiveSkillList[i].OnHurtTrigger();
                    }
                }
            }
        };
        /**更新函数 */
        Character.prototype.OnUpdate = function () {
            if (this.IsDie)
                return;
            if (this._attackskill) {
                this._attackskill.OnUpdate();
                if (!this._attackskill.IsCD && !this._bClose && this._target.length > 0) {
                    this.SpellAttackSkill();
                }
            }
            if (this._captainSkill) {
                this._captainSkill.OnUpdate();
                if (!this._captainSkill.IsCD && !this._bClose && this.CaptainTarget.length > 0) {
                    this.SpellCaptainSkill();
                }
            }
            if (this.TargetIsNull()) {
                this._target = [];
            }
            if (this._currentHp <= 0) {
                if (!this.IsDie) {
                    this.IsDie = true;
                    this.Die();
                }
            }
        };
        /**判断目标是不是空 */
        Character.prototype.TargetIsNull = function () {
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    if (!this._target[i].IsDie) {
                        return false;
                    }
                }
            }
            return true;
        };
        /**清理目标 */
        Character.prototype.ClearTarget = function () {
            /**普攻目标清理 */
            if (this._attackskill) {
                this._attackskill.ClearTarget();
            }
            /**队长技能目标清理 */
            if (this._captainSkill) {
                this._captainSkill.ClearTarget();
            }
            if (this._target) {
                this._target = [];
            }
            this.CaptainTarget = [];
        };
        Character.prototype.DestroyPassive = function () {
            var Len = this._passiveSkillList.length;
            for (var i = 0; i < Len; i++) {
                if (this._passiveSkillList[i]) {
                    this._passiveSkillList[i].Destroy();
                    this._passiveSkillList[i] = null;
                }
            }
            this._passiveSkillList = [];
        };
        /**销毁 */
        Character.prototype.Destroy = function () {
            this.ClearTarget();
            this.DestroyPassive();
            if (this._avatar) {
                this._avatar.Destroy();
                this._avatar = null;
            }
            if (this._attackskill) {
                this._attackskill.Destroy();
                this._attackskill = null;
            }
            if (this._captainSkill) {
                this._captainSkill.Destroy();
                this._captainSkill = null;
            }
        };
        return Character;
    }());
    H52D_Framework.Character = Character;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Character.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PSkillBuff = /** @class */ (function () {
        function PSkillBuff(data, owner, btype) {
            this._bHave = false;
            this._data = data;
            this._owner = owner;
            if (!H52D_Framework.ObjIsEmpty(this._data)) {
                this._bHave = true;
                var id = this._data[1][3];
                this._buff = new H52D_Framework.PBuff(id, btype, this._owner);
            }
        }
        /**数据表里有BUFF就增加 */
        PSkillBuff.prototype.SetBuffasHave = function (ratio) {
            this._ratio = ratio;
            if (this._bHave) {
                var num = Math.random() * 10000;
                var odds = this._data[1][2];
                var type = this._data[1][1];
                if (num <= odds && type != 2) {
                    this.AddBuff();
                }
            }
        };
        /**暴击增加BUFF */
        PSkillBuff.prototype.SetBuffasCrit = function (ratio) {
            this._ratio = ratio;
            if (this._bHave) {
                var num = Math.random() * 10000;
                var odds = this._data[1][2];
                var type = this._data[1][1];
                if (num <= odds && type == 2) {
                    this.AddBuff();
                }
            }
        };
        PSkillBuff.prototype.AddBuff = function () {
            var stype = H52D_Framework.StatusConfig[this._buff.id]["statusType"];
            if (this._ratio > 0) {
                if (stype == 2) {
                    this._buff.Do(this._ratio);
                }
                else {
                    this._buff.Do();
                }
            }
            else {
                this._buff.Do();
            }
        };
        PSkillBuff.prototype.OnUpdate = function () {
            this._buff.OnUpdate();
        };
        PSkillBuff.prototype.Destroy = function () {
            if (this._buff) {
                this._buff.Destroy();
                this._buff = null;
            }
        };
        return PSkillBuff;
    }());
    H52D_Framework.PSkillBuff = PSkillBuff;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PSkillBuff.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PBuffEffect = /** @class */ (function () {
        function PBuffEffect(buffdata, owner, ratio, btype) {
            this._owner = null;
            this._buffData = null;
            /**作用目标列表 */
            this._target = [];
            /**取值目标列表 */
            this._takeTarget = [];
            /**取值之和 */
            this._subValueSum = 0;
            /**伤害系数 */
            this._ratio = 0;
            /**修改属性ID */
            this._modfiyID = 0;
            /**战场类型 1 我  -1 敌 */
            this._btype = 0;
            this._buffData = buffdata;
            this._owner = owner;
            this._ratio = ratio;
            this._btype = btype;
        }
        PBuffEffect.prototype.Do = function () {
            if (!this._buffData)
                return;
            if (this.BMpModfiy()) {
                return;
            }
            this.assTarget(this._btype);
            if (this._buffData.statusBirthTarget == 8) {
                this.GetSubValueA(this._takeTarget);
            }
            for (var i = 0; i < this._target.length; i++) {
                this.Select(i);
            }
            // this.Refresh();
        };
        /**给目标赋值 */
        PBuffEffect.prototype.assTarget = function (btype) {
            this._target = [];
            this._takeTarget = [];
            this._takeTarget = H52D_Framework.SelectTarget.PBuffTarget(this._buffData, this._buffData.statusBirthTarget, this._owner, btype).concat();
            this._target = H52D_Framework.SelectTarget.PBuffTarget(this._buffData, this._buffData.statusActionTarget, this._owner, btype).concat();
        };
        /**是否是修改MP */
        PBuffEffect.prototype.BMpModfiy = function () {
            if (!this._buffData)
                return false;
            if (this._buffData.attributeId == 53 || this._buffData.attributeId == 51) {
                return true;
            }
            return false;
        };
        PBuffEffect.prototype.Select = function (index) {
            switch (this._buffData.statusType) {
                case 1:
                    if (this.BMpModfiy()) {
                        return;
                    }
                    else {
                        if (this._buffData.statusBirthTarget == 8) {
                            this.Modfiy_Attr(this._target[index], this._subValueSum);
                        }
                        else {
                            this.Modfiy_Attr(this._target[index]);
                        }
                    }
                    break;
                case 2:
                    this.SuckHP(this._target[index]);
                    break;
                /**按生命上线比例回血 */
                case 3:
                    this.HPMaxBoold(this._target[index]);
                    break;
                /**嘲讽 */
                case 4:
                    this.Sneer();
                    break;
                case 5:
                    this.DoDizzness(this._target[index]);
                    break;
                case 6:
                    this.Sustained(this._target[index]);
                    break;
            }
        };
        /**获取加成值 */
        PBuffEffect.prototype.GetSubValue = function (target) {
            if (!target || !this._buffData.attributeId)
                return;
            // let modfiy_value = 0;
            // let last_value = 0;
            // let subvalue = 0;
            var attr = target.vo.attr;
            this._modfiyID = attr.GetAttributeModfiyID(this._buffData.attributeId);
            var isPer = attr.GetAttributeIsPer(this._modfiyID);
            if (isPer == 1) {
                attr.ModfiyAttributeValue(this._modfiyID, H52D_Framework.eValueType.BPercent, this._buffData.attributePer);
                // subvalue = this._buffData.attributePer / 10000;
                // modfiy_value = last_value * subvalue;
            }
            else {
                attr.ModfiyAttributeValue(this._modfiyID, H52D_Framework.eValueType.BFixed, this._buffData.attributePer);
                // modfiy_value = this._buffData.attributePer;
            }
            // if (this._buffData.statusBirthTarget == 8) {
            // 	this._subValueSum += modfiy_value >> 0;
            // }
            // else {
            // 	this._subValue.push(modfiy_value >> 0);
            // }
        };
        PBuffEffect.prototype.GetSubValueA = function (target) {
            for (var k in target) {
                if (target[k]) {
                    var modfiy_value = 0;
                    var last_value = 0;
                    var subvalue = 0;
                    var attr = target[k].vo.attr;
                    this._modfiyID = attr.GetAttributeModfiyID(this._buffData.attributeId);
                    subvalue = this._buffData.attributePer / 10000;
                    modfiy_value = last_value * subvalue;
                    this._subValueSum += modfiy_value >> 0;
                }
            }
            // attr.ModfiyAttributeValue(this._modfiyID, eValueType.BFixed, this._buffData.attributePer);
        };
        /**改属性 */
        PBuffEffect.prototype.Modfiy_Attr = function (target, subvalue) {
            /**目标属性 */
            if (!target || !this._buffData.attributeId)
                return;
            var attr = target.vo.attr;
            if (this._buffData.statusBirthTarget == 8) {
                attr.ModfiyAttributeValue(this._modfiyID, H52D_Framework.eValueType.Other, subvalue);
            }
            else {
                this._modfiyID = attr.GetAttributeModfiyID(this._buffData.attributeId);
                var isPer = attr.GetAttributeIsPer(this._modfiyID);
                if (isPer == 1) {
                    attr.ModfiyAttributeValue(this._modfiyID, H52D_Framework.eValueType.BPercent, this._buffData.attributePer);
                }
                else {
                    attr.ModfiyAttributeValue(this._modfiyID, H52D_Framework.eValueType.BFixed, this._buffData.attributePer);
                }
            }
        };
        PBuffEffect.prototype.Modfiy_MP = function () {
            // if (this._buffData.attributeId == 53) {
            // 	let subvalue = this._buffData.attributePer / 10000;
            // 	let MpRecoveryCurrent = MasterPlayer.Instance.player.vo.attr.GetAttributeValue(53);
            // 	let NowValue = MpRecoveryCurrent * subvalue;
            // 	NowValue = Math.ceil(NowValue);
            // 	this._MpRecoveryCurrent = NowValue;
            // 	MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, eValueType.Other, NowValue);
            // 	Event.DispatchEvent("MpRecoveryRateChange");
            // 	Tick.Once(this._buffData.existTime, this, () => {
            // 		MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, eValueType.Other, -NowValue);
            // 		Event.DispatchEvent("MpRecoveryRateChange");
            // 	});
            // }
            // if (this._buffData.attributeId == 51) {
            // 	MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, eValueType.Other, this._buffData.attributePer);
            // 	Event.DispatchEvent("MpPoolChange");
            // 	this._MpPoolCurrent = this._buffData.attributePer;
            // 	Tick.Once(this._buffData.existTime, this, () => {
            // 		MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, eValueType.Other, -this._buffData.attributePer);
            // 		Event.DispatchEvent("MpPoolChange");
            // 	});
            // }
        };
        /**眩晕BUFF*/
        PBuffEffect.prototype.DoDizzness = function (target) {
            var _this = this;
            H52D_Framework.Tick.Loop(100, this, function () {
                target.BClose = true;
                target.Idle();
            });
            H52D_Framework.Tick.Once(this._buffData.existTime, this, function () {
                H52D_Framework.Tick.Once(100, _this, function () {
                    target.BClsce = false;
                    H52D_Framework.Tick.ClearAll(_this);
                });
            });
        };
        /**吸血BUFF */
        PBuffEffect.prototype.SuckHP = function (target) {
            if (target && target.vo) {
                var attr = target.vo.attr;
                var num = this._buffData.attributePer / 10000;
                var mod_damage = this._ratio * num >> 0;
                target.CurrentHp += mod_damage;
                H52D_Framework.Floating.DamageText(mod_damage.toString(), SkinEnum.SkinHP, target.PosX, target.PosY - 30, false);
            }
        };
        /**按生命上限比例回血 */
        PBuffEffect.prototype.HPMaxBoold = function (target) {
            var _this = this;
            if (!target)
                return;
            var attr = this._owner.vo.attr;
            var hpMax = attr.GetAttributeValue(1);
            var oncehp = hpMax * (this._buffData.attributePer / 10000) >> 0;
            H52D_Framework.Tick.Loop(this._buffData.LoopTime, this, function () {
                H52D_Framework.Floating.DamageText_P(oncehp.toString(), SkinEnum.SkinHP, target.PosX, target.PosY - 30, false);
            });
            H52D_Framework.Tick.Once(this._buffData.existTime, this, function () {
                H52D_Framework.Tick.ClearAll(_this);
            });
        };
        /**哀木涕：嘿 ，孙子 */
        PBuffEffect.prototype.Sneer = function () {
        };
        /**持续效果BUFF */
        PBuffEffect.prototype.Sustained = function (target) {
            var _this = this;
            if (!this._owner)
                return;
            var attr = this._owner.vo.attr;
            var num = this._buffData.attributePer / 10000;
            var damage = attr.GetAttributeValue(2);
            var mod_damage = damage * num;
            H52D_Framework.Tick.Loop(this._buffData.LoopTime, this, function () {
                target.OnHurt(mod_damage >> 0, false, SPECIAL_TYPE.SUSRAINED);
            });
            H52D_Framework.Tick.Once(this._buffData.existTime, this, function () {
                H52D_Framework.Tick.Once(100, _this, function () {
                    H52D_Framework.Tick.ClearAll(_this);
                });
            });
        };
        /**移除加成的属性 */
        PBuffEffect.prototype.RemoveAttribute = function (target, subvalue) {
            var attr = target.vo.attr;
            attr.ModfiyAttributeValue(this._modfiyID, H52D_Framework.eValueType.Other, -subvalue);
        };
        PBuffEffect.prototype.RemoveMp = function () {
        };
        /**刷新所有属性面板 */
        PBuffEffect.prototype.Refresh = function () {
        };
        PBuffEffect.prototype.OnUpdate = function () {
        };
        PBuffEffect.prototype.Destroy = function () {
            H52D_Framework.Tick.ClearAll(this);
            if (this._buffData.statusType == 1) {
                for (var i = 0; i < this._target.length; i++) {
                    if (this._target[i]) {
                        if (this._buffData.statusBirthTarget == 8) {
                            this.RemoveAttribute(this._target[i], this._subValueSum);
                        }
                        else {
                            this.RemoveAttribute(this._target[i], this._buffData.attributePer);
                        }
                    }
                }
                // this.RemoveMp();
                // this.Refresh();
            }
            this._takeTarget = [];
            this._target = [];
            this._owner = null;
        };
        return PBuffEffect;
    }());
    H52D_Framework.PBuffEffect = PBuffEffect;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PBuffEffect.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PBuffAvatar = /** @class */ (function () {
        function PBuffAvatar(buffdata, owner, btype) {
            this._buffAvatar = {};
            this._buffData = buffdata;
            this._owner = owner;
            this._target = H52D_Framework.SelectTarget.PBuffTarget(this._buffData, this._buffData.statusActionTarget, this._owner, btype).concat();
            this._buffAvatar = {};
        }
        /**添加Buff显示效果 */
        PBuffAvatar.prototype.Do = function () {
            if (!this._target)
                return;
            for (var i = 0; i < this._target.length; i++) {
                var pointid = this._buffData.pointID;
                var point = H52D_Framework.PHeroBuffPoint[pointid - 1];
                if (this._target[i] && this._target[i]) {
                    var x = this._target[i].PosX + point[0];
                    var y = this._target[i].PosY + point[1];
                    this.AddbuffEffect(x, y, this._target[i]);
                }
            }
        };
        /**添加初始化Buff表现特效 */
        PBuffAvatar.prototype.AddbuffEffect = function (x, y, target) {
            var _this = this;
            if (this._buffData == null)
                return;
            this._buffData.hierarchy == 1 ? this._ViewRoot = H52D_Framework.KickingManager.Instance.avatarRoot :
                this._ViewRoot = H52D_Framework.KickingManager.Instance.effectRoot;
            var avatar = new H52D_Framework.Avatar(this._ViewRoot);
            this._buffAvatar[target.ID] = avatar;
            avatar.Load(this._buffData.effectPath, this._buffData.Dir, this._buffData.effectScla, x, y, Laya.Handler.create(this, function () {
                avatar.Play(_this._buffData.effectName, true);
            }));
        };
        PBuffAvatar.prototype.OnUpdate = function () {
            for (var t in this._target) {
                if (this._target[t] && this._target[t].IsDie) {
                    this.DestroyZ(this._target[t].ID);
                    this._target[t] = null;
                }
            }
        };
        PBuffAvatar.prototype.DestroyZ = function (index) {
            if (this._buffAvatar[index]) {
                this._buffAvatar[index].Destroy();
                this._buffAvatar[index] = null;
            }
        };
        /**删除所有buff的表现效果 */
        PBuffAvatar.prototype.Destroy = function () {
            for (var k in this._buffAvatar) {
                if (this._buffAvatar[k]) {
                    this._buffAvatar[k].Destroy();
                    this._buffAvatar[k] = null;
                }
            }
            this._buffAvatar = {};
            this._target = [];
            this._owner = null;
            // Tick.ClearAll(this);
        };
        return PBuffAvatar;
    }());
    H52D_Framework.PBuffAvatar = PBuffAvatar;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PBuffAvatar.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PBuff = /** @class */ (function () {
        /**初始化 */
        function PBuff(id, btype, owner) {
            this._owner = null;
            /** buff数据*/
            this._buffData = null;
            /**伤害系数 */
            this._ratio = 0;
            this._currentCd = 0;
            this._bCD = true;
            /**Buff表现 */
            this._avatar = null;
            /**Buff效果 */
            this._effect = null;
            this._id = 0;
            this._currenttime = 0;
            this._bSpell = false;
            this._btype = 0;
            this._buffData = new H52D_Framework.BuffData(id);
            this._id = id;
            this._btype = btype;
            this._owner = owner;
        }
        Object.defineProperty(PBuff.prototype, "id", {
            get: function () { return this._id; },
            enumerable: true,
            configurable: true
        });
        /**Buff产生效果 */
        PBuff.prototype.Do = function (ratio) {
            if (!this._buffData)
                return;
            if (this._bCD) {
                this._bSpell = true;
                this._currentCd = this._buffData.inlayCd;
                this._bCD = false;
                this._ratio = ratio;
                this._effect = new H52D_Framework.PBuffEffect(this._buffData, this._owner, this._ratio, this._btype);
                this._effect.Do();
                if (this._buffData.effectPath) {
                    this._avatar = new H52D_Framework.PBuffAvatar(this._buffData, this._owner, this._btype);
                    this._avatar.Do();
                }
            }
        };
        /**替换规则 */
        PBuff.prototype.RepeatBuff = function () {
        };
        PBuff.prototype.OnUpdate = function () {
            if (this._buffData) {
                if (this._buffData.existTime != -1 && this._buffData.id != 1 && this._bSpell) {
                    this._currenttime += 100;
                    if (this._currenttime >= this._buffData.existTime) {
                        this._currenttime = 0;
                        this._bSpell = false;
                        this.Destroy();
                    }
                }
                if (!this._buffData.existTime && this._buffData.continueType == 3 && this._bSpell) {
                    this._currenttime += 100;
                    if (this._currenttime >= 1000) {
                        this._currenttime = 0;
                        this._bSpell = false;
                        this.Destroy();
                    }
                }
            }
            if (this._effect)
                this._effect.OnUpdate();
            if (this._avatar)
                this._avatar.OnUpdate();
            if (this._currentCd > 0) {
                this._currentCd -= 100;
            }
            else if (this._currentCd <= 0) {
                this._bCD = true;
            }
            // if (!BattleManager.Instance.IsHasAliveTarget())  {
            //     this.Destroy_S();
            // }
        };
        PBuff.prototype.Destroy_S = function () {
            if (this._buffData.existTime == -1) {
                this.Destroy();
            }
        };
        /**销毁 */
        PBuff.prototype.Destroy = function () {
            if (this._effect) {
                this._effect.Destroy();
                this._effect = null;
            }
            //删除buff表现效果
            if (this._avatar) {
                this._avatar.Destroy();
                this._avatar = null;
            }
        };
        return PBuff;
    }());
    H52D_Framework.PBuff = PBuff;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PBuff.js.map
/**
* name
*/
var H52D_Framework;
(function (H52D_Framework) {
    var PPetAttributeAdd = /** @class */ (function () {
        /**记录增加的属性值 */
        //public LastArrary:Array<Array<number>> = [];
        /**
         * 初始化
         * @param owner 所属者
         * @param data 属性数据
         */
        function PPetAttributeAdd(owner, data) {
            /**属性id */
            this._attributeID = 0;
            /**属性加值*/
            this._attributeSubValue = 0;
            /**作用目标 */
            this._target = [];
            /**当前法力回复速度 */
            this._currentMpRecover = 0;
            /**当前法力上限制 */
            this._currentMp = 0;
            this._owner = owner;
            this._attributeID = data[1];
            this._attributeSubValue = data[2];
        }
        /**产生效果 */
        PPetAttributeAdd.prototype.OnEffect = function () {
            this._target = [];
            this._target = H52D_Framework.SelectTarget.ImpactTarget(this._attributeID, this._owner).concat();
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    this.AddAttribute(this._target[i]);
                }
            }
        };
        /**为单个目标 修改属性 */
        PPetAttributeAdd.prototype.AddAttribute = function (target) {
            var attr = target.attr;
            if (this._attributeID == 53 || this._attributeID == 51) {
                // this.AddAttributePlayer();
                return;
            }
            var modfiy_id = attr.GetAttributeModfiyID(this._attributeID);
            var isPercent = attr.GetAttributeIsPer(modfiy_id);
            if (isPercent == 1) {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Percent, this._attributeSubValue);
            }
            else {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Fixed, this._attributeSubValue);
            }
        };
        /**修改主角特有属性 */
        PPetAttributeAdd.prototype.AddAttributePlayer = function () {
            // if (this._attributeID == 53) {
            // 	let subvalue = this._attributeSubValue / 10000;
            // 	let mpCurrent = MasterPlayer.Instance.player.vo.attr.GetAttributeTypeValue(53,eValueType.Base);
            // 	this._currentMpRecover = mpCurrent * subvalue;
            // 	this._currentMpRecover = Math.ceil(this._currentMpRecover);
            // 	MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, eValueType.Fixed, this._currentMpRecover);
            // 	Event.DispatchEvent("MpRecoveryRateChange");
            // 	return;
            // }
            // if (this._attributeID == 51) {
            // 	MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, eValueType.Percent, this._attributeSubValue);
            // 	Event.DispatchEvent("MpPoolChange");
            // 	return;
            // }
        };
        /**
         * 删除增加的属性
         * @param target 目标
         */
        PPetAttributeAdd.prototype.RemoveAttribute = function (target) {
            var attr = target.attr;
            if (this._attributeID == 53 || this._attributeID == 51) {
                // this.RemoveAttributePlayer();
                return;
            }
            var modfiy_id = attr.GetAttributeModfiyID(this._attributeID);
            var isPercent = attr.GetAttributeIsPer(modfiy_id);
            if (isPercent == 1) {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Percent, -this._attributeSubValue);
            }
            else {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Fixed, -this._attributeSubValue);
            }
        };
        /**
         * 删除增加的主角特有属性
         */
        PPetAttributeAdd.prototype.RemoveAttributePlayer = function () {
            // if (this._attributeID == 53) {
            // 	MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, eValueType.Fixed, -this._currentMpRecover);
            // 	Event.DispatchEvent("MpRecoveryRateChange");
            // }
            // if (this._attributeID == 51) {
            // 	MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, eValueType.Percent, -this._attributeSubValue);
            // 	Event.DispatchEvent("MpPoolChange");
            // }
        };
        /**销毁 */
        PPetAttributeAdd.prototype.Destroy = function () {
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    this.RemoveAttribute(this._target[i]);
                }
            }
            this._target = [];
        };
        return PPetAttributeAdd;
    }());
    H52D_Framework.PPetAttributeAdd = PPetAttributeAdd;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PPetAttributeAdd.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var POAttribute = /** @class */ (function () {
        function POAttribute(owner, data) {
            this._owner = null;
            /**属性id */
            this._attributeID = 0;
            /**属性加值*/
            this._attributeSubValue = 0;
            this._owner = owner;
            this._attributeID = data[1];
            this._attributeSubValue = data[2];
        }
        /**修改属性 */
        POAttribute.prototype.OnEffect = function () {
            var attr = this._owner.attr;
            if (attr == null)
                return;
            var modfiy_id = attr.GetAttributeModfiyID(this._attributeID);
            var isPercent = attr.GetAttributeIsPer(modfiy_id);
            if (isPercent == 1) {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Percent, this._attributeSubValue);
            }
            else {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Fixed, this._attributeSubValue);
            }
        };
        return POAttribute;
    }());
    H52D_Framework.POAttribute = POAttribute;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=POAttribute.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PConditionsPassiveSkill = /** @class */ (function () {
        function PConditionsPassiveSkill(id, btype, owner) {
            this._data = null;
            /**buff id */
            this._buffId = 0;
            /**英雄 id */
            this._heroid = 0;
            /**属性 id */
            this._attributeID = 0;
            /**触发几率*/
            this._triggerOdds = 0;
            /**属性加值*/
            this._attributeSubValue = 0;
            /**技能id */
            this.id = 0;
            /**作用目标 */
            this._target = [];
            this._bhurt = false;
            this._battack = false;
            this._btype = 0;
            this._btype = btype;
            this._owner = owner;
            this._data = new H52D_Framework.PassiveSkillData(id);
            this.id = id;
            this._buffTab = [];
            switch (this._data.scriptID) {
                case 2:
                    this._buffId = this._data.scriptParam[1];
                    break;
                case 3:
                    this._heroid = this._data.scriptParam[1];
                    this._buffId = this._data.scriptParam[2];
                    break;
                case 4:
                    this._triggerOdds = this._data.scriptParam[1];
                    this._buffId = this._data.scriptParam[2];
                    break;
                case 5:
                    this._triggerOdds = this._data.scriptParam[1];
                    this._buffId = this._data.scriptParam[2];
                    break;
                case 6:
                    this._buffId = this._data.scriptParam[1];
                    break;
            }
        }
        Object.defineProperty(PConditionsPassiveSkill.prototype, "BHurt", {
            get: function () { return this._bhurt; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PConditionsPassiveSkill.prototype, "BAttack", {
            get: function () { return this._battack; },
            enumerable: true,
            configurable: true
        });
        PConditionsPassiveSkill.prototype.Do = function () {
            this.Destroy();
            switch (this._data.scriptID) {
                case 2:
                    this.TNotHeroAddBuff();
                    break;
                case 3:
                    this.CommonHero();
                    break;
                case 4:
                    if (!this._battack)
                        this._battack = true;
                    break;
                case 5:
                    if (!this._bhurt)
                        this._bhurt = true;
                    break;
                case 6:
                    this.AddBuff();
                    break;
            }
        };
        /**目中无人*/
        PConditionsPassiveSkill.prototype.TNotHeroAddBuff = function () {
            var colnum = this._owner.vo.colNum;
            var monster = H52D_Framework.MonsterManager.Instance.monsterList;
            if (colnum == 2)
                return;
            for (var k in monster) {
                var m = monster[k];
                if (monster[k]) {
                    if (m.vo.colNum != colnum) {
                        var buf = new H52D_Framework.PBuff(this._buffId, this._btype, this._owner);
                        buf.Do();
                        this._buffTab.push(buf);
                        return;
                    }
                }
            }
        };
        /**直接加buff */
        PConditionsPassiveSkill.prototype.AddBuff = function () {
            var buf = new H52D_Framework.PBuff(this._buffId, this._btype, this._owner);
            buf.Do();
            this._buffTab.push(buf);
        };
        /**与基友上阵时候触发 */
        PConditionsPassiveSkill.prototype.CommonHero = function () {
            var hl = H52D_Framework.BattleManager.Instance.HeroCardMgr.CHeroList;
            var Len = H52D_Framework.GetTabLength(hl);
            for (var i = 0; i < Len; i++) {
                if (hl[i]) {
                    if (hl[i].vo.nHeroID == this._heroid) {
                        var buf = new H52D_Framework.PBuff(this._buffId, this._btype, this._owner);
                        buf.Do();
                        this._buffTab.push(buf);
                        return;
                    }
                }
            }
        };
        /**攻击时触发Buff */
        PConditionsPassiveSkill.prototype.AttackTriggerSkill = function () {
            var num = Math.random() * 10000;
            if (num <= this._triggerOdds) {
                var buf = new H52D_Framework.PBuff(this._buffId, this._btype, this._owner);
                buf.Do();
                this._buffTab.push(buf);
            }
        };
        /**挨揍了触发 */
        PConditionsPassiveSkill.prototype.OnHurtTrigger = function () {
            var num = Math.random() * 10000;
            if (num <= this._triggerOdds) {
                var buf = new H52D_Framework.PBuff(this._buffId, this._btype, this._owner);
                buf.Do();
                this._buffTab.push(buf);
            }
        };
        PConditionsPassiveSkill.prototype.Destroy = function () {
            if (this._buffTab) {
                var len = this._buffTab.length;
                for (var i = 0; i < len; i++) {
                    if (this._buffTab[i]) {
                        this._buffTab[i].Destroy();
                        this._buffTab[i] = null;
                    }
                }
            }
            this._battack = false;
            this._bhurt = false;
            this._buffTab = [];
        };
        return PConditionsPassiveSkill;
    }());
    H52D_Framework.PConditionsPassiveSkill = PConditionsPassiveSkill;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PConditionsPassiveSkill.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PAttribute = /** @class */ (function () {
        /**owner在这里基本属于无用的 别问为什么 我也不知道 */
        // private tardata:any;
        /**
         * 初始化
         * @param owner 所属者
         * @param data 一条完整的数据格式{id:0,value:0}
         */
        function PAttribute(data) {
            /**属性id */
            this._attributeID = 0;
            /**属性加值*/
            this._attributeSubValue = 0;
            /**作用目标 */
            this._target = [];
            /**当前法力回复速度 */
            this._currentMpRecover = 0;
            /**当前法力上限制 */
            this._currentMp = 0;
            this._owner = this;
            this._attributeID = data[1];
            this._attributeSubValue = data[2];
        }
        /**产生效果 */
        PAttribute.prototype.OnEffect = function (tardata) {
            this._target = [];
            this._target = H52D_Framework.SelectTarget.PImpactTarget(this._attributeID, tardata).concat();
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    this.AddAttribute(this._target[i]);
                }
            }
        };
        /**为单个目标 修改属性 */
        PAttribute.prototype.AddAttribute = function (target) {
            var attr = target.attr;
            if (attr == null)
                return;
            if (this._attributeID == 53 || this._attributeID == 51) {
                // this.AddAttributePlayer();
                return;
            }
            var modfiy_id = attr.GetAttributeModfiyID(this._attributeID);
            var isPercent = attr.GetAttributeIsPer(modfiy_id);
            if (isPercent == 1) {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Percent, this._attributeSubValue);
            }
            else {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Fixed, this._attributeSubValue);
            }
        };
        /**修改主角特有属性 */
        PAttribute.prototype.AddAttributePlayer = function () {
            // if (this._attributeID == 53) {
            // 	let subvalue = this._attributeSubValue / 10000;
            // 	let mpCurrent = MasterPlayer.Instance.player.vo.attr.GetAttributeTypeValue(53, eValueType.Base);
            // 	this._currentMpRecover = mpCurrent * subvalue;
            // 	this._currentMpRecover = Math.ceil(this._currentMpRecover);
            // 	MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, eValueType.Fixed, this._currentMpRecover);
            // 	Event.DispatchEvent("MpRecoveryRateChange");
            // 	return;
            // }
            // if (this._attributeID == 51) {
            // 	MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, eValueType.Fixed, this._attributeSubValue);
            // 	Event.DispatchEvent("MpPoolChange");
            // 	return;
            // }
        };
        /**
         * 删除增加的属性
         * @param target 目标
         */
        PAttribute.prototype.RemoveAttribute = function (target) {
            var attr = target.attr;
            if (this._attributeID == 53 || this._attributeID == 51) {
                // this.RemoveAttributePlayer();
                return;
            }
            var modfiy_id = attr.GetAttributeModfiyID(this._attributeID);
            var isPercent = attr.GetAttributeIsPer(modfiy_id);
            if (isPercent == 1) {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Percent, -this._attributeSubValue);
            }
            else {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Fixed, -this._attributeSubValue);
            }
        };
        /**
         * 删除增加的主角特有属性
         */
        PAttribute.prototype.RemoveAttributePlayer = function () {
            // if (this._attributeID == 53) {
            // 	MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, eValueType.Fixed, -this._currentMpRecover);
            // 	Event.DispatchEvent("MpRecoveryRateChange");
            // }
            // if (this._attributeID == 51) {
            // 	MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, eValueType.Fixed, -this._attributeSubValue);
            // 	Event.DispatchEvent("MpPoolChange");
            // }
        };
        /**销毁 */
        PAttribute.prototype.Destroy = function () {
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    this.RemoveAttribute(this._target[i]);
                }
            }
            this._target = [];
        };
        return PAttribute;
    }());
    H52D_Framework.PAttribute = PAttribute;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PAttribute.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PAIOperation = /** @class */ (function () {
        function PAIOperation() {
            this._campDps = 0;
            this._heroDps = 0;
            this._petDps = 0;
            this._allDps = 0;
        }
        Object.defineProperty(PAIOperation.prototype, "CampDps", {
            /**阵营DPS */
            get: function () { return this._campDps; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PAIOperation.prototype, "HeroDps", {
            /**英雄DPS */
            get: function () { return this._heroDps; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PAIOperation.prototype, "PetDps", {
            /**神兽DPS */
            get: function () { return this._petDps; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PAIOperation.prototype, "AllDps", {
            /**总DPS */
            get: function () { return this._allDps; },
            enumerable: true,
            configurable: true
        });
        /**销毁 */
        PAIOperation.prototype.Destroy = function () {
        };
        PAIOperation.prototype.OnUpdate = function () {
        };
        /**DPS小面板 */
        PAIOperation.prototype.Dps = function () {
            this._allDps = 0;
            this._petDps = 0;
            this._heroDps = 0;
            this._campDps = 0;
            var pvpChara = H52D_Framework.BattlefieldManager.Instance.Characterlist[0];
            /**通知修改英雄DPS显示 */
            if (pvpChara.Heromanager) {
                var count = pvpChara.HeroList.length;
                for (var index = 0; index < count; index++) {
                    var heroC = pvpChara.HeroList[index];
                    if (heroC) {
                        var cd = 1.5;
                        if (heroC.attackSkill) {
                            cd = (heroC.attackSkill.Data.skillCD) / 1000;
                        }
                        var dps = heroC.vo.attr.GetAttributeValue(2) / cd;
                        this._heroDps += dps >> 0;
                    }
                }
                H52D_Framework.Event.DispatchEvent(H52D_Framework.FightType + H52D_Framework.EventDefine.HERO_DPS, [this._heroDps.toString()]);
            }
            /**通知修改神兽DPS显示 */
            if (pvpChara.petMgr) {
                this._petDps = pvpChara.petMgr.PetIns.vo.attr.GetAttributeValue(2);
                this._petDps = this._petDps * pvpChara.petMgr.PetIns.vo.ratio;
                this._petDps = this._petDps / pvpChara.petMgr.PetIns.vo.CD >> 0;
                H52D_Framework.Event.DispatchEvent(H52D_Framework.FightType + H52D_Framework.EventDefine.PET_DPS, [this._petDps.toString()]);
            }
            /**通知修改阵营DPS显示*/
            if (pvpChara.campMgr) {
                this._campDps = pvpChara.campMgr.Camp.vo.attr.GetAttributeValue(2) * pvpChara.campMgr.Camp.vo.ratio;
                var cd = pvpChara.campMgr.Camp.vo.CD;
                this._campDps = this._campDps / cd >> 0;
                H52D_Framework.Event.DispatchEvent(H52D_Framework.FightType + H52D_Framework.EventDefine.CAMP_DPS, [this._campDps.toString()]);
            }
            /**通知修改所有DPS显示*/
            this._allDps = this._heroDps + this._petDps + this._campDps >> 0;
            H52D_Framework.Event.DispatchEvent(H52D_Framework.FightType + H52D_Framework.EventDefine.ALL_DPS, [this._allDps.toString()]);
        };
        return PAIOperation;
    }());
    H52D_Framework.PAIOperation = PAIOperation;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PAIOperation.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var eBTYPE;
    (function (eBTYPE) {
        eBTYPE[eBTYPE["owner"] = 0] = "owner";
        eBTYPE[eBTYPE["enemy"] = 1] = "enemy";
    })(eBTYPE || (eBTYPE = {}));
    /**PVP战场管理 */
    var BattlefieldManager = /** @class */ (function () {
        function BattlefieldManager() {
            this._btype = [1, -1];
            this.end = false;
            this._currentTime = 0;
            this._Bstart = false;
            this._bort = false;
            this._characterList = [];
            this._aio = null;
            this._dieIndex = 0;
            this._dieIndex_e = 0;
            this._BTime = 0;
            /**星级 0星是我方失败*/
            this._starNum = -1;
            /**1 胜利  2失败 0平局 */
            this._nWin = -1;
            this._aio = new H52D_Framework.PAIOperation();
        }
        Object.defineProperty(BattlefieldManager, "Instance", {
            get: function () {
                if (this._instance == null) {
                    this._instance = new BattlefieldManager();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BattlefieldManager.prototype, "Characterlist", {
            get: function () { return this._characterList; },
            enumerable: true,
            configurable: true
        });
        BattlefieldManager.prototype.GetTypeChara = function (ty) {
            return this._characterList[ty];
        };
        BattlefieldManager.prototype.LoadBattle = function () {
            H52D_Framework.DamageShow.Instance._Cler();
            this._BTime = 120 * 1000;
            H52D_Framework.DataManager.Instance.Init();
            this._characterList = [];
            for (var k in this._btype) {
                this._characterList.push(new H52D_Framework.PvPCharacter(this._btype[k]));
            }
            for (var k in this._characterList) {
                this._characterList[k].Load();
            }
            for (var k in this._characterList) {
                if (this._characterList[k] && this._characterList[k].petMgr) {
                    this._characterList[k].petMgr.SetDamage();
                }
            }
            for (var k in this._characterList) {
                for (var i in this._characterList[k].HeroList) {
                    if (this._characterList[k].HeroList[i]) {
                        this._characterList[k].HeroList[i].OnEffectPassive();
                    }
                }
            }
            this._aio.Dps();
            this.GMTools_AttrShow();
        };
        /**测试数据工具 */
        BattlefieldManager.prototype.GMTools_AttrShow = function () {
            this.Characterlist[0].Heromanager.show();
            this.Characterlist[1].Heromanager.show();
            if (this.Characterlist[0].petMgr)
                this.Characterlist[0].petMgr.PetIns.ImValue();
            if (this.Characterlist[1].petMgr)
                this.Characterlist[1].petMgr.PetIns.ImValue();
            if (this.Characterlist[0].campMgr)
                this.Characterlist[0].campMgr.Camp.ImValue();
            if (this.Characterlist[1].campMgr)
                this.Characterlist[1].campMgr.Camp.ImValue();
            this.Characterlist[0].player.ImValue();
            this.Characterlist[1].player.ImValue();
        };
        BattlefieldManager.prototype.OnFire = function () {
            this._currentTime = 0;
            this._bort = true;
            this.end = false;
            H52D_Framework.Tick.Loop(100, this, this.OnUpdate);
        };
        BattlefieldManager.prototype.CaptainTarget = function (oid, eid) {
            for (var k in this._characterList[oid].HeroList) {
                if (this._characterList[oid].HeroList[k].bCaptain) {
                    this._characterList[oid].HeroList[k].CaptainTarget = this._characterList[eid].HeroList;
                }
            }
        };
        BattlefieldManager.prototype.setTarget = function (list1, list2) {
            var index = 0;
            /**给英雄赋值攻击目标 */
            for (var k in list1) {
                var hc = list1[k];
                if (index >= 3 && index < 6) {
                    index -= 3;
                }
                else if (index >= 6) {
                    index -= 6;
                }
                if (list1[index]) {
                    hc.Target = [];
                    hc.Target.push(list2[index]);
                    index += 1;
                }
                else {
                    if (index > 0)
                        index -= 1;
                    hc.Target = [];
                    hc.Target.push(list2[index]);
                }
            }
        };
        BattlefieldManager.prototype.OnEffectPassive = function (list1) {
            for (var k in list1.HeroList) {
                if (list1.HeroList) {
                    list1.HeroList[k].OnEffectPassive();
                }
            }
        };
        BattlefieldManager.prototype.OnUpdate = function () {
            for (var k in this._characterList) {
                if (this._characterList[k])
                    this._characterList[k].OnUpdate();
            }
            if (!this._Bstart) {
                this._Bstart = true;
                this.Characterlist[0].Heromanager.HeroAttack();
                this.Characterlist[1].Heromanager.HeroAttack();
                /**普攻目标 */
                this.setTarget(this._characterList[0].HeroList, this._characterList[1].HeroList);
                this.setTarget(this._characterList[1].HeroList, this._characterList[0].HeroList);
                /**队长目标 */
                this.CaptainTarget(0, 1);
                this.CaptainTarget(1, 0);
                /**阵营 */
                if (this.Characterlist[0].campMgr)
                    this.Characterlist[0].campMgr.SetTarget(this._characterList[1].HeroList);
                if (this.Characterlist[1].campMgr)
                    this.Characterlist[1].campMgr.SetTarget(this._characterList[0].HeroList);
                /**宠物 */
                if (this.Characterlist[0].petMgr)
                    this.Characterlist[0].petMgr.SetTarget(this._characterList[1].HeroList);
                if (this.Characterlist[1].petMgr)
                    this.Characterlist[1].petMgr.SetTarget(this._characterList[0].HeroList);
                /**主角 */
                this.Characterlist[0].player.target_D = this._characterList[1].HeroList;
                this.Characterlist[1].player.target_D = this._characterList[0].HeroList;
                this.Characterlist[0].player.Target_B = this._characterList[0].HeroList;
                this.Characterlist[1].player.Target_B = this._characterList[1].HeroList;
                this.Characterlist[0].player.bclose = true;
                this.Characterlist[1].player.bclose = true;
            }
            if (this._bort) {
                this._BTime -= 100;
                this.GroupChangeTarget();
                this.GroupChangeTarget_E();
                this.BattleComBat();
                if (this._starNum != -1) {
                    this.end = true;
                    H52D_Framework.KickingManager.Instance.PvpCombatEnd(this._starNum, this._nWin);
                    H52D_Framework.Tick.ClearAll(this);
                    H52D_Framework.UIManager.Instance.DestroyUI("FloatView", [H52D_Framework.KickingManager.Instance.effectRoot]);
                }
            }
        };
        /**英雄循环攻击 */
        BattlefieldManager.prototype.HeroAttack = function (id1) {
            var hf = this.Characterlist[id1].HeroList;
            if (!hf)
                return;
            var len = hf.length - 1;
            var _loop_1 = function (i) {
                var hc = hf[i];
                if (!hc)
                    return { value: void 0 };
                var time = 0;
                /**第一位出手英雄 */
                var X = H52D_Framework.GameParamConfig["FastestHeroFirstAttackTime"];
                /**其他英雄出手 */
                var Y = H52D_Framework.GameParamConfig["OtherHeroFirstAttackTimeRatio"];
                if (i == len) {
                    time = X;
                }
                else {
                    var firstHero = hf[len];
                    var F = firstHero.vo.ToSpeed;
                    time = X + (F - hc.vo.ToSpeed) * Y;
                }
                H52D_Framework.Tick.Once(time, this_1, function () {
                    hc.BClose = false;
                });
            };
            var this_1 = this;
            for (var i = len; i >= 0; i--) {
                var state_1 = _loop_1(i);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        };
        /**
        * 是否切换目标
        * 当前排或者中间3个没了，就切换 目标
        * 1vs1 2vs2 3vs3
        */
        BattlefieldManager.prototype.IsChangeTarget = function () {
            for (var m = 0; m < 3; m++) {
                var count = m + this._dieIndex;
                if (this.Characterlist[1].HeroList[count]) {
                    return false;
                }
            }
            return true;
        };
        /**
        * 集体切换目标
        */
        BattlefieldManager.prototype.GroupChangeTarget = function () {
            if (this.IsChangeTarget()) {
                this._dieIndex += 3;
                for (var i = 0; i < 9; i++) {
                    var index = i;
                    switch (this._dieIndex) {
                        case 3:
                            if (index < 3) {
                                index += 3;
                            }
                            else if (index >= 6) {
                                index -= 3;
                            }
                            break;
                        case 6:
                            if (index < 3) {
                                index += 6;
                            }
                            else if (index >= 3 && index < 6) {
                                index += 3;
                            }
                            break;
                    }
                    if (this.Characterlist[1].HeroList[index]) {
                        if (this.Characterlist[0].HeroList[i]) {
                            this.Characterlist[0].HeroList[i].Target = [];
                            this.Characterlist[0].HeroList[i].Target.push(this.Characterlist[1].HeroList[index]);
                        }
                    }
                    else {
                        if (this.Characterlist[0].HeroList[i]) {
                            var t = this.NullTargetSelect(1);
                            this.Characterlist[0].HeroList[i].Target = [];
                            this.Characterlist[0].HeroList[i].Target.push(t);
                        }
                    }
                }
            }
            else {
                for (var i = 0; i < 9; i++) {
                    if (this.Characterlist[0].HeroList[i] && this.Characterlist[0].HeroList[i].Target.length == 0) {
                        for (var m = 0; m < 3; m++) {
                            var count = m + this._dieIndex;
                            if (this.Characterlist[1].HeroList[count]) {
                                this.Characterlist[0].HeroList[i].Target.push(this.Characterlist[1].HeroList[count]);
                            }
                        }
                        if (this.Characterlist[0].HeroList[i].Target.length == 0) {
                            if (this.Characterlist[0].HeroList[i]) {
                                var t = this.NullTargetSelect(1);
                                this.Characterlist[0].HeroList[i].Target = [];
                                this.Characterlist[0].HeroList[i].Target.push(t);
                            }
                        }
                    }
                }
            }
        };
        BattlefieldManager.prototype.NullTargetSelect = function (id) {
            for (var k in this.Characterlist[id].HeroList) {
                if (this.Characterlist[id].HeroList[k]) {
                    return this.Characterlist[id].HeroList[k];
                }
            }
        };
        BattlefieldManager.prototype.IsChangeTarget_E = function () {
            for (var m = 0; m < 3; m++) {
                var count = m + this._dieIndex_e;
                if (this.Characterlist[0].HeroList[count]) {
                    return false;
                }
            }
            return true;
        };
        /**
        * 集体切换目标
        */
        BattlefieldManager.prototype.GroupChangeTarget_E = function () {
            if (this.IsChangeTarget_E()) {
                this._dieIndex_e += 3;
                for (var i = 0; i < 9; i++) {
                    var index = i;
                    switch (this._dieIndex_e) {
                        case 3:
                            if (index < 3) {
                                index += 3;
                            }
                            else if (index >= 6) {
                                index -= 3;
                            }
                            break;
                        case 6:
                            if (index < 3) {
                                index += 6;
                            }
                            else if (index >= 3 && index < 6) {
                                index += 3;
                            }
                            break;
                    }
                    if (this.Characterlist[0].HeroList[index]) {
                        if (this.Characterlist[1].HeroList[i]) {
                            this.Characterlist[1].HeroList[i].Target = [];
                            this.Characterlist[1].HeroList[i].Target.push(this.Characterlist[0].HeroList[index]);
                        }
                    }
                    else {
                        if (this.Characterlist[1].HeroList[i]) {
                            var t = this.NullTargetSelect(0);
                            this.Characterlist[1].HeroList[i].Target = [];
                            this.Characterlist[1].HeroList[i].Target.push(t);
                        }
                    }
                }
            }
            else {
                for (var i = 0; i < 9; i++) {
                    if (this.Characterlist[1].HeroList[i] && this.Characterlist[1].HeroList[i].Target.length == 0) {
                        for (var m = 0; m < 3; m++) {
                            var count = m + this._dieIndex_e;
                            if (this.Characterlist[0].HeroList[count]) {
                                this.Characterlist[1].HeroList[i].Target.push(this.Characterlist[0].HeroList[count]);
                            }
                        }
                        if (this.Characterlist[1].HeroList[i].Target.length == 0) {
                            var t = this.NullTargetSelect(0);
                            this.Characterlist[1].HeroList[i].Target = [];
                            this.Characterlist[1].HeroList[i].Target.push(t);
                        }
                    }
                }
            }
        };
        BattlefieldManager.prototype.BattleComBat = function () {
            if (this._BTime >= 61000 && this.getHeroNum(0) >= 6 && this.getHeroNum(1) <= 0) {
                this._starNum = 3;
                this._nWin = 1;
                return;
            }
            else if (this._BTime >= 31000 && this.getHeroNum(0) >= 3 && this.getHeroNum(1) <= 0) {
                this._starNum = 2;
                this._nWin = 1;
                return;
            }
            else if (this._BTime < 31000 && this.getHeroNum(0) > 0 && this.getHeroNum(1) <= 0) {
                this._starNum = 1;
                this._nWin = 1;
                return;
            }
            else if (this._BTime < 31000 && this.getHeroNum(0) <= 0 && this.getHeroNum(1) > 0) {
                this._starNum = 0;
                this._nWin = 2;
                return;
            }
            else if (this._BTime <= 0) {
                if (this.getHeroNum(0) > this.getHeroNum(1)) {
                    this._starNum = 1;
                    this._nWin = 1;
                }
                else if (this.getHeroNum(0) <= 0 && this.getHeroNum(1) <= 0) {
                    this._starNum = 0;
                    this._nWin = 0;
                }
                else if (this.getHeroNum(0) == this.getHeroNum(1)) {
                    this._starNum = 0;
                    this._nWin = 0;
                }
                else {
                    this._starNum = 0;
                    this._nWin = 2;
                }
                return;
            }
            else if (this._BTime >= 0) {
                if (this.getHeroNum(0) <= 0 && this.getHeroNum(1) <= 0) {
                    this._starNum = 0;
                    this._nWin = 0;
                }
                else if (this.getHeroNum(0) > 0 && this.getHeroNum(1) <= 0) {
                    this._starNum = 1;
                    this._nWin = 1;
                }
                else if (this.getHeroNum(0) <= 0 && this.getHeroNum(1) > 0) {
                    this._starNum = 0;
                    this._nWin = 2;
                }
                return;
            }
        };
        BattlefieldManager.prototype.getHeroNum = function (id) {
            var index = 0;
            for (var k in this._characterList[id].HeroList) {
                if (this._characterList[id].HeroList[k]) {
                    index += 1;
                }
            }
            return index;
        };
        BattlefieldManager.prototype.Destroy = function () {
            H52D_Framework.Tick.ClearAll(this);
            for (var k in this._characterList) {
                if (this._characterList[k]) {
                    this._characterList[k].Destroy();
                    this._characterList[k] = null;
                }
            }
            this._starNum = -1;
            this._nWin = -1;
            this._characterList = [];
            this._Bstart = false;
            this._bort = false;
        };
        BattlefieldManager._instance = null;
        return BattlefieldManager;
    }());
    H52D_Framework.BattlefieldManager = BattlefieldManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BattlefieldManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**神兽管理 */
    var PetManager = /** @class */ (function () {
        function PetManager() {
            /**已有神兽列表 */
            this._ownPetList = {};
            /**当前上阵的神兽ID */
            this._currentpetID = 0;
            /**神兽配置表 */
            this._Petlist = [];
            /** 红点列表 */
            this._NewList = {};
            for (var key in H52D_Framework.PetConfig) {
                var nIdx = Number(key);
                this._Petlist.push(nIdx);
            }
        }
        Object.defineProperty(PetManager.prototype, "PetList", {
            /**获取配置表中的所有神兽 */
            get: function () {
                return this._Petlist;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PetManager.prototype, "OwnPetList", {
            /**获取已有的神兽 */
            get: function () {
                return this._ownPetList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PetManager.prototype, "OwnPetNum", {
            /**获取已有的神兽数量 */
            get: function () {
                return H52D_Framework.GetTabLength(this._ownPetList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PetManager.prototype, "HasTimes", {
            /**拥有的孵化次数 */
            get: function () {
                return this._hasTimes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PetManager.prototype, "NextUpdateTime", {
            /**距离下次孵化的时间 */
            get: function () {
                return this._nextUpdatetime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PetManager.prototype, "CurrentpetID", {
            /**获取当前上阵的神兽 */
            get: function () {
                return this._currentpetID;
            },
            /**设置当前上阵的神兽 */
            set: function (id) {
                this._currentpetID = id;
            },
            enumerable: true,
            configurable: true
        });
        /**获取宠物实例 */
        PetManager.prototype.GetPet_Instance = function (nPetID) {
            return this._ownPetList[nPetID];
        };
        /** 主界面是否显示红点 */
        PetManager.prototype.IsMainShowRed = function () {
            var needOrder = H52D_Framework.OpenGradeConfig[E_OpenGrade.PET]["Checkpoint"];
            var customsOrder = H52D_Framework.MasterPlayer.Instance.player.CunstLevel;
            if (customsOrder < needOrder) {
                return false;
            }
            for (var flag in this._NewList) {
                return true;
            }
            return false;
        };
        /** 判断这个宠物是否是新获得的 */
        PetManager.prototype.IsNewPet = function (nPetID) {
            return this._NewList[nPetID] == 1;
        };
        Object.defineProperty(PetManager, "Instance", {
            get: function () {
                if (PetManager._init == null) {
                    PetManager._init = new PetManager();
                }
                return PetManager._init;
            },
            enumerable: true,
            configurable: true
        });
        PetManager.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SendPetInfo", this); //上线同步
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_PetUpdateTimes", this); //更新次数和时间
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_AddPet", this); //添加宠物
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqGetPet", this); //领取宠物通知
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqUsePet", this); //请求上阵通知
        };
        /**上线同步 */
        PetManager.prototype.C_SendPetInfo = function (buf) {
            var PetList = buf[0];
            for (var nPetID in PetList) {
                var Level = PetList[nPetID];
                var npet = new H52D_Framework.BPetVo(Number(nPetID));
                npet.Level = Level;
                npet.Level > H52D_Framework.GameParamConfig.PetMaxLevel ? H52D_Framework.GameParamConfig.PetMaxLevel : npet.Level;
                this._ownPetList[npet.ID] = npet;
            }
            this._hasTimes = buf[1];
            this._nextUpdatetime = buf[2];
            this._currentpetID = buf[3];
            this._NewList = buf[4];
        };
        /**更新次数和时间 */
        PetManager.prototype.C_PetUpdateTimes = function (buf) {
            this._hasTimes = buf[0];
            this._nextUpdatetime = buf[1];
            H52D_Framework.Event.DispatchEvent('PetInit');
            this.SetShopPetVisible();
        };
        /**添加宠物 */
        PetManager.prototype.C_AddPet = function (buf) {
            var tId = buf[0];
            var tNum = buf[1];
            if (this._ownPetList[tId] == null) {
                var npet = new H52D_Framework.BPetVo(tId);
                this._ownPetList[npet.ID] = npet;
                // npet.bNet = true;
                // this.SetPetPoint(npet.bNet);
                this._NewList[tId] = 1;
                this.SetPetPoint(this.IsMainShowRed());
            }
            this._ownPetList[tId].Level = tNum;
            this._ownPetList[tId].Level > H52D_Framework.GameParamConfig.PetMaxLevel ? H52D_Framework.GameParamConfig.PetMaxLevel : this._ownPetList[tId].Level;
            H52D_Framework.Event.DispatchEvent('PetInit');
        };
        /** 请求查看宠物 */
        PetManager.prototype.SendShowPet = function (nPetID) {
            if (this._NewList[nPetID] == 1) {
                delete this._NewList[nPetID];
            }
            H52D_Framework.RemoteCall.Instance.Send("K_ReqLookPet", nPetID);
            this.SetPetPoint(this.IsMainShowRed());
        };
        /**请求领取宠物 */
        PetManager.prototype.GetPet = function () {
            if (this._hasTimes < 1)
                return;
            H52D_Framework.RemoteCall.Instance.Send("K_ReqGetPet", this._hasTimes);
        };
        /**领取宠物通知 */
        PetManager.prototype.C_ReqGetPet = function (buf) {
            var pet_info = buf[0];
            this._hasTimes = buf[1];
            this._nextUpdatetime = buf[2];
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, pet_info]);
            H52D_Framework.Event.DispatchEvent('PetInit');
            this.SetShopPetVisible();
        };
        /** 请求上阵通知 */
        PetManager.prototype.C_ReqUsePet = function (buf) {
            var nPetID = buf[0];
            this._currentpetID = nPetID;
            H52D_Framework.Event.DispatchEvent("PET", [nPetID]);
            H52D_Framework.Event.DispatchEvent('PetInit');
            H52D_Framework.Event.DispatchEvent("ClearOneBubble", [E_BubbleType.ePet]);
        };
        /**宠物上阵请求 */
        PetManager.prototype.K_ReqUsePet = function (ID) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqUsePet", ID);
        };
        /**控制主界面的神兽按钮 */
        PetManager.prototype.SetShopPetVisible = function () {
            if (this._hasTimes > 0) {
                H52D_Framework.Event.DispatchEvent("SetShopPetVisible", [true]);
            }
            else {
                H52D_Framework.Event.DispatchEvent("SetShopPetVisible", [false]);
            }
        };
        /**控制主界面的神兽红点 */
        PetManager.prototype.SetPetPoint = function (bvisible) {
            H52D_Framework.Event.DispatchEvent("ShowRedPoint", [E_OpenGrade.PET, bvisible]);
        };
        return PetManager;
    }());
    H52D_Framework.PetManager = PetManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PetManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**神兽信息类 */
    var PetInfos = /** @class */ (function () {
        function PetInfos() {
        }
        /** 解析服务器数据 */
        PetInfos.prototype.unpackData = function (tData) {
            this._petID = tData[1];
            this._petLv = tData[2];
            //Event.RegistEvent(EventDefine.MODIFYATTR, Laya.Handler.create(this, this.LevelComplete)); 
        };
        Object.defineProperty(PetInfos.prototype, "PetID", {
            /**神兽ID */
            get: function () {
                return this._petID;
            },
            set: function (id) {
                this._petID = id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PetInfos.prototype, "PetLv", {
            /**神兽等级 */
            get: function () {
                return this._petLv;
            },
            set: function (lv) {
                this._petLv = lv;
            },
            enumerable: true,
            configurable: true
        });
        return PetInfos;
    }());
    H52D_Framework.PetInfos = PetInfos;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PetInfos.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /** 背景逻辑累 */
    var ViewUILogic = /** @class */ (function () {
        function ViewUILogic() {
        }
        Object.defineProperty(ViewUILogic, "Instance", {
            get: function () {
                if (ViewUILogic._inst == null) {
                    ViewUILogic._inst = new ViewUILogic();
                }
                return ViewUILogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        ViewUILogic.prototype.Initialize = function () {
            this.EventInit();
            this._halfPanel = true;
        };
        /** 零点刷新 */
        ViewUILogic.prototype.ZeroRefresh = function () {
            var date = H52D_Framework.Time.serverTime;
            if (date.getHours() + date.getMinutes() + date.getSeconds() == 0) {
                H52D_Framework.Event.DispatchEvent("ZeroRefresh");
            }
        };
        ViewUILogic.prototype.EventInit = function () {
            H52D_Framework.Event.RegistEvent("OpenRank", Laya.Handler.create(this, this.OpenRank));
            //系统设置中改名成功
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_RoleRename", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ChgHeadID", this);
            //全局心跳函数
            H52D_Framework.Tick.Loop(1000, this, this.OnFrameHander);
        };
        ViewUILogic.prototype.OpenRank = function () {
            H52D_Framework.UIManager.Instance.CreateUI("RankView", [H52D_Framework.ViewUpRoot]);
        };
        /** 全局心跳事件 */
        ViewUILogic.prototype.OnFrameHander = function () {
            //零点刷新
            var date = H52D_Framework.Time.serverTime;
            if (date.getHours() + date.getMinutes() + date.getSeconds() == 0) {
                H52D_Framework.MasterPlayer.Instance.dayInviteNum = 0;
                H52D_Framework.MasterPlayer.Instance.invitaVipFlag = 0;
                H52D_Framework.Event.DispatchEvent("ZeroRefresh");
            }
        };
        Object.defineProperty(ViewUILogic.prototype, "halfPanel", {
            get: function () {
                return this._halfPanel;
            },
            set: function (b) {
                this._halfPanel = b;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewUILogic.prototype, "listView", {
            get: function () {
                return this._listView;
            },
            set: function (view) {
                this._listView = view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewUILogic.prototype, "customWave", {
            get: function () {
                return this._customWave;
            },
            set: function (btn) {
                this._customWave = btn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewUILogic.prototype, "roleLvUp", {
            get: function () {
                return this.btn_role;
            },
            set: function (btn) {
                this.btn_role = btn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewUILogic.prototype, "CampRed", {
            get: function () {
                return this.camp_red;
            },
            set: function (btn) {
                this.camp_red = btn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewUILogic.prototype, "FirstSkillCd", {
            get: function () {
                return this.first_skill_cd;
            },
            set: function (value) {
                this.first_skill_cd = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewUILogic.prototype, "OpenPanel", {
            get: function () {
                return this._openPanel;
            },
            set: function (value) {
                this._openPanel = value;
            },
            enumerable: true,
            configurable: true
        });
        /** 系统设置中改名成功 */
        ViewUILogic.prototype.C_RoleRename = function (newName) {
            H52D_Framework.MasterPlayer.Instance.player.Name = newName[0];
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.PLAYER_NAME_UPDATE);
        };
        /** 系统设置中修改头像 */
        ViewUILogic.prototype.C_ChgHeadID = function (newHead) {
            H52D_Framework.MasterPlayer.Instance.player.HeadId = newHead[0];
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.PLAYER_HEAD_UPDATE);
        };
        ViewUILogic.prototype.Destroy = function () {
            H52D_Framework.Event.DispatchEvent("ClearMainView");
        };
        return ViewUILogic;
    }());
    H52D_Framework.ViewUILogic = ViewUILogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ViewUILogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var ViewPoint;
    (function (ViewPoint) {
        ViewPoint[ViewPoint["empty"] = 0] = "empty";
        ViewPoint[ViewPoint["support"] = 1] = "support";
        ViewPoint[ViewPoint["against"] = 2] = "against";
        ViewPoint[ViewPoint["draw"] = 3] = "draw";
    })(ViewPoint = H52D_Framework.ViewPoint || (H52D_Framework.ViewPoint = {}));
    ;
    /**
     * @ 活动管理类
     * @author zhangyusong
     */
    var TopicManager = /** @class */ (function () {
        function TopicManager() {
            /** 活动说明ID */
            this.INSTRUCTION_ID = 6001;
        }
        Object.defineProperty(TopicManager, "Instance", {
            get: function () {
                if (TopicManager._inst == null) {
                    TopicManager._inst = new TopicManager();
                }
                return TopicManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TopicManager.prototype, "CurrVo", {
            get: function () {
                return this.currVo;
            },
            enumerable: true,
            configurable: true
        });
        TopicManager.prototype.Initialize = function () {
            this.list = H52D_Framework.MainActionLogic.Instance.list[H52D_Framework.ActionType.topic];
        };
        TopicManager.prototype.TopicActivityInfo = function (id) {
            for (var i = 0; i < this.list.length; i++) {
                if (this.list[i].id == id) {
                    this.currVo = this.list[i];
                    break;
                }
            }
            H52D_Framework.RemoteCall.Instance.Send("K_ReqAddTopic", this.currVo.id);
        };
        TopicManager.prototype.InitEvent = function () {
            //****活动，话题先锋
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SyncTopicManager", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqAddTopic", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqTopicStarVote", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_TopicOver", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_TopicOverUpdate", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_TopicStart", this);
        };
        /** 显示红点 */
        TopicManager.prototype.ShowRedPoint = function () {
            var join = false;
            this.list.forEach(function (vo) {
                if (H52D_Framework.MainActionLogic.Instance.Period(vo)) {
                    if (vo.stamp == 0) {
                        join = true;
                        return;
                    }
                }
            });
            return join;
        };
        TopicManager.prototype.C_SyncTopicManager = function (data) {
            var info = data[0];
            this.list.forEach(function (vo) {
                vo.viewPoint = ViewPoint.empty;
                if (info[vo.id]) {
                    var user = new User(info[vo.id]);
                    vo.contribution = user.contribution;
                    vo.viewPoint = user.viewPoint;
                    vo.stamp = user.stamp;
                }
            });
        };
        /**
         * 成功进入活动,活动面板初始化
         */
        TopicManager.prototype.C_ReqAddTopic = function (data) {
            if (this.currVo.id != data[0])
                return;
            this.currVo.monsterId = H52D_Framework.GameParamConfig["TalkBOSS"];
            this.currVo.countdown = Number(H52D_Framework.GameParamConfig["TalkhitTime"]);
            this.currVo.attackPoint = "话题点：" + data[1]["desc"];
            this.currVo.attackInstruction = H52D_Framework.StringInfoConfig[this.INSTRUCTION_ID]["s"];
            var user = new User(data[2]);
            this.currVo.contribution = user.contribution;
            this.currVo.viewPoint = user.viewPoint;
            this.currVo.stamp = user.stamp;
            this.currVo.win = ViewPoint.empty;
            H52D_Framework.UIManager.Instance.CreateUI("TopicView", [H52D_Framework.ViewToppestRoot, this.currVo.id]);
        };
        /**
         * 点击支持或反对后，返回的消息
         * 主要用于刷新红点儿
         */
        TopicManager.prototype.C_ReqTopicStarVote = function (data) {
            var user = new User(data[0]);
            this.currVo.contribution = user.contribution;
            this.currVo.viewPoint = user.viewPoint;
            this.currVo.stamp = user.stamp;
            //显示红点
            this.ShowRedPoint();
        };
        /**
         * 活动结束
         */
        TopicManager.prototype.C_TopicOver = function (data) {
            if (this.Info(data)) {
                H52D_Framework.UIManager.Instance.CreateUI("ActionAttackView", [H52D_Framework.ViewToppestRoot]);
            }
        };
        TopicManager.prototype.C_TopicOverUpdate = function (data) {
            if (this.Info(data)) {
                H52D_Framework.Event.DispatchEvent("TopicInit");
            }
        };
        TopicManager.prototype.Info = function (data) {
            if (this.currVo.id != data[0] || !this.currVo)
                return;
            var info = data[1];
            this.currVo.viewPoint = ViewPoint.empty;
            if (info[this.currVo.id]) {
                this.currVo.viewPoint = info[2];
            }
            if ((this.currVo.viewPoint == ViewPoint.empty) || (info[4] == null)) {
                return false;
            }
            this.currVo.monsterId = H52D_Framework.GameParamConfig["TalkBOSS"];
            this.currVo.countdown = Number(H52D_Framework.GameParamConfig["TalkhitTime"]);
            this.currVo.attackPoint = "话题点：" + info[1]["desc"];
            this.currVo.attackInstruction = H52D_Framework.StringInfoConfig[this.INSTRUCTION_ID]["s"];
            var user = new User(info[4]);
            this.currVo.contribution = user.contribution;
            this.currVo.viewPoint = user.viewPoint;
            this.currVo.stamp = user.stamp;
            this.currVo.win = info[2];
            this.currVo.supportNum = info[3][1];
            this.currVo.againstNum = info[3][2];
            return true;
        };
        /** 游戏开启刷新 */
        TopicManager.prototype.C_TopicStart = function (buf) {
            var activityID = buf[0];
            H52D_Framework.Event.DispatchEvent("ActionListUpDate", activityID);
        };
        return TopicManager;
    }());
    H52D_Framework.TopicManager = TopicManager;
    // 玩家信息
    var User = /** @class */ (function () {
        function User(buf) {
            /** 当前分数,贡献值*/
            this.contribution = 0;
            /** 支持方 */
            this.viewPoint = ViewPoint.empty;
            /** 支持时间 */
            this.stamp = 0;
            if (!buf)
                return;
            this.contribution = Number(buf[1]);
            this.viewPoint = buf[2];
            this.stamp = Number(buf[3]);
        }
        return User;
    }());
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TopicManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var SettingLogic = /** @class */ (function () {
        function SettingLogic() {
        }
        Object.defineProperty(SettingLogic, "Instance", {
            get: function () {
                if (SettingLogic._inst == null) {
                    SettingLogic._inst = new SettingLogic();
                }
                return SettingLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        SettingLogic.prototype.Initialize = function () {
            this._defaultVo = new H52D_Framework.HeadVo();
            this.InitEvent();
        };
        SettingLogic.prototype.InitEvent = function () {
        };
        Object.defineProperty(SettingLogic.prototype, "defaultVo", {
            get: function () {
                this._defaultVo.headId = 0;
                this._defaultVo.headRes = "ui_head/icon_ui_01.png";
                this._defaultVo.headSelect = true;
                return this._defaultVo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SettingLogic.prototype, "headList", {
            get: function () {
                var list = new Array();
                this.heroHead = H52D_Framework.HeroManager.Instance.GetCfgHeroList();
                for (var i = 0; i < this.heroHead.length; i++) {
                    var nHeroID = this.heroHead[i];
                    var bActive = H52D_Framework.HeroManager.Instance.IsActive(nHeroID);
                    if (bActive) {
                        var hvo = new H52D_Framework.HeadVo();
                        hvo.headId = nHeroID;
                        hvo.headRes = "ui_icon/" + H52D_Framework.HeroConfig[nHeroID].strIcon;
                        hvo.headSelect = nHeroID == this._defaultVo.headId;
                        list.push(hvo);
                    }
                }
                list.unshift(this.defaultVo);
                return list;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SettingLogic.prototype, "cost", {
            get: function () {
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        return SettingLogic;
    }());
    H52D_Framework.SettingLogic = SettingLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SettingLogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var MainRoleLogic = /** @class */ (function () {
        function MainRoleLogic() {
            this._roleSkillCfg = [];
            //服务器返回的技能信息，index+1：技能，lv等级 cd时间戳
            this._roleSkill = [];
            this._privList = []; //特权
            this._privListInfo = new Object(); //特权
            this._maxSkill = 0;
            this.addGodNum = 0;
            this.SetPrivList();
        }
        Object.defineProperty(MainRoleLogic, "Instance", {
            get: function () {
                if (MainRoleLogic._inst == null) {
                    MainRoleLogic._inst = new MainRoleLogic();
                }
                return MainRoleLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        MainRoleLogic.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SyncSkillList", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqActivateSkill", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqSkillLevelUp", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_PrivilegeSystemInfo", this); //上线同步
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqAddPrivilege", this); //添加通知
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_DelPrivilege", this); //到期删除通知
            var cfg = H52D_Framework.RoleSkillUpConfig;
            for (var key in cfg) {
                if (Number(key) != 0) {
                    var object = cfg[key];
                    this._roleSkillCfg.push(object);
                }
            }
        };
        /**特权上线同步 */
        MainRoleLogic.prototype.C_PrivilegeSystemInfo = function (buf) {
            this._privListInfo = buf[0];
            for (var i in this._privListInfo) {
                if (this.PrivIsBuy(Number(i))) {
                    this.SetBuffId(Number(i));
                }
            }
        };
        //解锁的技能
        MainRoleLogic.prototype.C_SyncSkillList = function (buf) {
            this._roleSkill = [];
            var skillObj = buf[0];
            var skillCd = buf[1];
            //测试
            // skillCd[2] = Time.serverSecodes;
            for (var index = 0; index < this._roleSkillCfg.length; index++) {
                this._roleSkill[index] = { "lv": 0, "cd": 0 };
                var key = index + 1;
                if (skillObj[key]) {
                    this._roleSkill[index].lv = skillObj[key];
                }
                if (skillCd[key]) {
                    this._roleSkill[index].cd = skillCd[key];
                }
            }
            var roleSkill = this._roleSkill;
            var roleSkillCfg = this._roleSkillCfg;
            var addMp = 0;
            for (var index = 0; index < roleSkill.length; index++) {
                var lv = roleSkill[index].lv;
                if (lv > 0) {
                    addMp += roleSkillCfg[index][1].addMaxMp;
                }
            }
            H52D_Framework.MasterPlayer.Instance.player.vo.attr.SetAttributeValue(51, H52D_Framework.eValueType.Base, H52D_Framework.GameParamConfig["BaseMaxMp"] + addMp);
            H52D_Framework.MasterPlayer.Instance.player.vo.attr.SetAttributeValue(53, H52D_Framework.eValueType.Base, H52D_Framework.GameParamConfig["MpRecoveryRate"]);
            H52D_Framework.Event.DispatchEvent("SkillUpdate");
        };
        //激活回掉
        MainRoleLogic.prototype.C_ReqActivateSkill = function (buf) {
            var index = buf[0] - 1;
            this._roleSkill[index].lv = 1;
            var addMp = 0;
            for (var index = 0; index < this._roleSkill.length; index++) {
                var element = this._roleSkill[index].lv;
                if (element > 0) {
                    addMp += this._roleSkillCfg[index][1].addMaxMp;
                }
            }
            H52D_Framework.MasterPlayer.Instance.player.vo.attr.SetAttributeValue(51, H52D_Framework.eValueType.Base, H52D_Framework.GameParamConfig["BaseMaxMp"] + addMp);
            H52D_Framework.Event.DispatchEvent("RefreshList");
            H52D_Framework.Event.DispatchEvent("LvUpEffect");
            H52D_Framework.Event.DispatchEvent("SkillUpdate");
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/level_up.mp3");
            }
        };
        //升级回掉
        MainRoleLogic.prototype.C_ReqSkillLevelUp = function (buf) {
            var element = buf[1];
            var index = buf[0] - 1;
            this._roleSkill[index].lv = element;
            H52D_Framework.Event.DispatchEvent("RefreshList");
            H52D_Framework.Event.DispatchEvent("LvUpEffect");
            H52D_Framework.Event.DispatchEvent("SkillLeveUp");
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/level_up.mp3");
            }
        };
        /**添加特权回调 */
        MainRoleLogic.prototype.C_ReqAddPrivilege = function (buf) {
            var nPrivilege = buf[0];
            this._privListInfo[nPrivilege] = buf[1];
            //免费特权次数  nil为无次数
            var nFreeUseNum = buf[2];
            H52D_Framework.MasterPlayer.Instance.setFreeUseNum(nPrivilege, nFreeUseNum);
            this.SetBuffId(nPrivilege);
            this.SetPrivList();
            H52D_Framework.Event.DispatchEvent('privListTime');
            if (buf[0] == 4) { //金币特权
                this.addGodNum += 1;
                var timeNow = Date.now() / 1000;
                this._privListInfo[buf[0]] = timeNow + H52D_Framework.GameParamConfig.UseInterval;
                this.GoldDown();
                //this.PlayGoldDown();
            }
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/tequan.mp3");
            }
        };
        /**特权到期删除通知 */
        MainRoleLogic.prototype.C_DelPrivilege = function (buf) {
            this._privListInfo[buf[0]] = -1;
            if (this.GetBuffTime(buf[0]) != -1) {
                this.DelBuffId(buf[0]);
            }
        };
        /**设置特权list */
        MainRoleLogic.prototype.SetPrivList = function () {
            this._privList = new Array();
            for (var i in H52D_Framework.PrivilegeConfig) {
                var _name = H52D_Framework.GetInfoAttr.Instance.GetText(H52D_Framework.PrivilegeConfig[i].name);
                var _descri = H52D_Framework.GetInfoAttr.Instance.GetText(H52D_Framework.PrivilegeConfig[i].description);
                var _icon = 'ui_icon/' + H52D_Framework.PrivilegeConfig[i].stricon;
                var moneyTypeicon = H52D_Framework.PrivilegeConfig[i].PurchaseConsumption[1] == 2 ? '' : 'ui_common/icon-jinbi.png';
                var _diamonds = true;
                var _useNum = "<img src= 'ui_icon/icon_prop_013.png' width='20px' height='16px'></img>" + H52D_Framework.PrivilegeConfig[i].PurchaseConsumption[2] + '';
                var _bewrite = H52D_Framework.PrivilegeConfig[i].isActive == 1 ? '主动' : '被动';
                var free = H52D_Framework.MasterPlayer.Instance.getFreeUseNum(Number(i));
                var totle = H52D_Framework.GameParamConfig.FreePrivilegeStorageMaxNum[Number(i)];
                var _discount = -1;
                if (free > 0) //有可用次数
                 {
                    _useNum = "免费次数" + free + "/" + totle;
                    _diamonds = false;
                }
                else if (H52D_Framework.DiscountManager.Instance.IsStartPrivilegeAction() && (H52D_Framework.DiscountManager.Instance.getPrivilegeTims(i) < H52D_Framework.DiscountManager.Instance.nPrivilegeMaxTims)) {
                    _useNum = "<img src= 'ui_icon/icon_prop_013.png' width='20px' height='16px'></img>" + H52D_Framework.DiscountManager.Instance.tPrivilegeMoney[i] + "(" + H52D_Framework.DiscountManager.Instance.getPrivilegeTims(i) + "/" + H52D_Framework.DiscountManager.Instance.nPrivilegeMaxTims + ")";
                    _discount = (H52D_Framework.DiscountManager.Instance.tPrivilegeMoney[i] / H52D_Framework.PrivilegeConfig[i].PurchaseConsumption[2] * 10) >> 0;
                }
                this._privList.push({
                    privIcon: _icon, privName: _name, useIcon: { skin: moneyTypeicon, visible: false },
                    useNum: { text: _useNum, diamonds: _diamonds }, bewrite: _bewrite,
                    discount: _discount
                });
            }
        };
        MainRoleLogic.prototype.FreeNum = function (free, totle) {
            return "免费次数" + free + "/" + totle;
        };
        Object.defineProperty(MainRoleLogic.prototype, "roleMaxLv", {
            /**
             * 角色最大等级
             */
            get: function () {
                var roleMaxLv = 0;
                while (H52D_Framework.RoleLevelUpConfig[roleMaxLv + 1]) {
                    roleMaxLv++;
                }
                return roleMaxLv;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainRoleLogic.prototype, "roleSkillCfg", {
            /**
             * 技能配置表
             */
            get: function () {
                return this._roleSkillCfg;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainRoleLogic.prototype, "roleSkill", {
            /**
             * 当前技能信息
             */
            get: function () {
                return this._roleSkill;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainRoleLogic.prototype, "PrivList", {
            /**特权list */
            get: function () {
                return this._privList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainRoleLogic.prototype, "PrivListInfo", {
            /**特权时间信息  */
            get: function () {
                return this._privListInfo;
            },
            enumerable: true,
            configurable: true
        });
        /**特权是否已购买*/
        MainRoleLogic.prototype.PrivIsBuy = function (id) {
            if (this._privListInfo[id]) {
                var _time = H52D_Framework.GetInfoAttr.Instance.GetCountDown(this._privListInfo[id], false);
                if (_time <= 0) {
                    return false;
                }
                return true;
            }
            return false;
        };
        /**需要倒计时的特权 */
        MainRoleLogic.prototype.SetToUpdatePriv = function () {
            var obj = new Object();
            for (var i in this._privListInfo) {
                if (this.PrivIsBuy(Number(i))) {
                    obj[i] = this._privListInfo[i];
                }
                if (this.GetBuffTime(Number(i)) == -1) {
                    obj[i] = -1;
                }
            }
            return obj;
        };
        /**
         * 技能是否达到最高级
         */
        MainRoleLogic.prototype.IsMaxLv = function (index) {
            var maxLv = 0;
            for (var key in this._roleSkillCfg[index]) {
                maxLv++;
            }
            this._maxSkill = maxLv;
            if (this._roleSkill[index].lv == maxLv)
                return true;
            return false;
        };
        /**
         * 是否解锁了技能
         */
        MainRoleLogic.prototype.IsSkillUnlocked = function (index) {
            if (this._roleSkill[index].lv > 0)
                return true;
            return false;
        };
        /**
         * 获取技能的解锁需要的角色等级和需要的金币
         */
        MainRoleLogic.prototype.GetSkillUnlockCondition = function (index) {
            var obj = {};
            var needRoleLevel = this._roleSkillCfg[index][1].needRoleLevel;
            var needGoldNum = this._roleSkillCfg[index][1].needGoldNum;
            obj[1] = needRoleLevel;
            obj[2] = needGoldNum;
            return obj;
        };
        /**
         * 是否能升级
         */
        MainRoleLogic.prototype.IsSkillCanLvUp = function (index) {
            var skillLv = this._roleSkill[index].lv;
            var nextSkillLv = skillLv + 1;
            var needRoleLevel = this._roleSkillCfg[index][nextSkillLv].needRoleLevel;
            var needGoldNum = this._roleSkillCfg[index][nextSkillLv].needGoldNum;
            var money = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold);
            var rolelv = H52D_Framework.MasterPlayer.Instance.player.Level;
            if (rolelv >= needRoleLevel) {
                if (money >= needGoldNum) {
                    return true;
                }
            }
            return false;
        };
        /**
         * 获取技能的升级需要的角色等级和需要的金币
         */
        MainRoleLogic.prototype.GetSkillLvUpCondition = function (index) {
            var skillLv = this._roleSkill[index].lv;
            var nextSkillLv = skillLv + 1;
            var obj = {};
            if (this.IsMaxLv(index)) {
                nextSkillLv = this._maxSkill;
            }
            var needRoleLevel = this._roleSkillCfg[index][nextSkillLv].needRoleLevel;
            var needGoldNum = this._roleSkillCfg[index][nextSkillLv].needGoldNum;
            obj[1] = needRoleLevel;
            obj[2] = needGoldNum;
            return obj;
        };
        /**buff持续时间 s */
        MainRoleLogic.prototype.GetBuffTime = function (id) {
            return H52D_Framework.PrivilegeConfig[id].continueTime;
        };
        /**请求设置buff */
        MainRoleLogic.prototype.SetBuff = function () {
            for (var i in this._privListInfo) {
                if (this.PrivIsBuy(Number(i))) {
                    this.SetBuffId(Number(i));
                }
            }
        };
        //=======================按钮点击==============================
        /**使用/购买buff */
        MainRoleLogic.prototype.UseBuff = function (index) {
            var useType = H52D_Framework.PrivilegeConfig[index].PurchaseConsumption[1];
            var useNum = H52D_Framework.PrivilegeConfig[index].PurchaseConsumption[2];
            if (H52D_Framework.DiscountManager.Instance.getPrivilegeTims(index) < H52D_Framework.DiscountManager.Instance.nPrivilegeMaxTims) {
                useNum = H52D_Framework.DiscountManager.Instance.tPrivilegeMoney[index];
            }
            var ownMoney;
            var _type;
            var freeUseNum = H52D_Framework.MasterPlayer.Instance.getFreeUseNum(index);
            if (freeUseNum < 1) { //如果没有免费次数/没有拥有
                if (useType == 1) { //金币
                    ownMoney = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold);
                    _type = '金币';
                }
                else { //钻石
                    ownMoney = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdDiamonds);
                    _type = '钻石';
                }
                if (ownMoney < useNum) {
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips(_type + '不足');
                    return false;
                }
            }
            H52D_Framework.RemoteCall.Instance.Send("K_ReqAddPrivilege", index); //请求添加特权
            return true;
        };
        /**设置buffid */
        MainRoleLogic.prototype.SetBuffId = function (id) {
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.PRIVILEGE, [id]);
        };
        /**删除buff */
        MainRoleLogic.prototype.DelBuffId = function (id) {
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.PRIVILEGE_DELETE, [id]);
        };
        //=======================方法===============================
        MainRoleLogic.prototype.PlayGoldDown = function () {
            if (!H52D_Framework.GetInfoAttr.Instance.IsAllScreen) {
                for (var i = 1; i <= this.addGodNum; i++) {
                    //金币掉落
                    this.GoldDown();
                }
            }
        };
        /**金币掉落效果 */
        MainRoleLogic.prototype.GoldDown = function () {
            var goldNum = H52D_Framework.GetInfoAttr.Instance.GetThisOrderGoldNum();
            goldNum *= H52D_Framework.PrivilegeConfig[4].parameter[1];
            var nGold = (goldNum / 50) >> 0;
            for (var i = 0; i < 50; i++) {
                var x = Math.random() * 600 + 100;
                var y = Math.random() * 750;
                H52D_Framework.DropManager.Instance.AddDropCoin(x, y, nGold, 180);
            }
        };
        return MainRoleLogic;
    }());
    H52D_Framework.MainRoleLogic = MainRoleLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainRoleLogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var ActionType;
    (function (ActionType) {
        ActionType[ActionType["topic"] = 1] = "topic";
        ActionType[ActionType["kicking"] = 2] = "kicking";
        ActionType[ActionType["boss"] = 3] = "boss";
    })(ActionType = H52D_Framework.ActionType || (H52D_Framework.ActionType = {}));
    ;
    /**
     * @ 活动管理类
     * @author zhangyusong
     */
    var MainActionLogic = /** @class */ (function () {
        function MainActionLogic() {
            this.join = false;
            this.list = {};
            for (var id in H52D_Framework.ActivityConfig) {
                var activity = H52D_Framework.ActivityConfig[id];
                if (Number(activity["IsOneLine"]) == 0) {
                    continue;
                }
                //活动条信息
                var vo = new H52D_Framework.ActionVo();
                vo.id = Number(id);
                vo.type = activity["activiType"];
                vo.name = H52D_Framework.StringInfoConfig[activity["activiName"]]["s"];
                vo.detailsId = activity["Details"];
                vo.actionTime = activity["time"];
                vo.ledTime = activity["LedTime"];
                //奖励列表
                vo.reward = new Array();
                var reward = activity["awardShow"];
                for (var r in reward) {
                    var rid = Number(reward[r][2]);
                    var rnum = Number(reward[r][3]);
                    var item = new H52D_Framework.ItemModel(rid);
                    item.itemNumber = rnum;
                    vo.reward.push(item);
                }
                if (this.list[vo.type] == null) {
                    this.list[vo.type] = new Array();
                }
                this.list[vo.type].push(vo);
            }
            this.FrushTime();
            var _loop_1 = function (type) {
                var actionTimeShow = "";
                this_1.list[type].forEach(function (vo) {
                    actionTimeShow += (vo.actionTime + ",");
                });
                actionTimeShow = actionTimeShow.substring(0, actionTimeShow.lastIndexOf(","));
                this_1.list[type].forEach(function (vo) {
                    vo.actionTimeShow = actionTimeShow;
                });
            };
            var this_1 = this;
            for (var type in this.list) {
                _loop_1(type);
            }
        }
        Object.defineProperty(MainActionLogic, "Instance", {
            get: function () {
                if (MainActionLogic._inst == null) {
                    MainActionLogic._inst = new MainActionLogic();
                }
                return MainActionLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        MainActionLogic.prototype.Initialize = function () {
            H52D_Framework.TopicManager.Instance.Initialize();
            H52D_Framework.KickingManager.Instance.Initialize();
            this.InitEvent();
        };
        MainActionLogic.prototype.InitEvent = function () {
            H52D_Framework.TopicManager.Instance.InitEvent();
            H52D_Framework.KickingManager.Instance.InitEvent();
            H52D_Framework.Event.RegistEvent("ActionOpen", Laya.Handler.create(this, this.ActionOpen));
        };
        /** 刷新 */
        MainActionLogic.prototype.FrushTime = function () {
            for (var type in this.list) {
                this.list[type].forEach(function (vo) {
                    var cfg = H52D_Framework.ActivityConfig;
                    for (var id in H52D_Framework.ActivityConfig) {
                        if (vo.id == Number(id)) {
                            var timeArr = String(H52D_Framework.ActivityConfig[id]["time"]).split("-");
                            vo.timeStart = new Date(H52D_Framework.Time.serverTime.getTime());
                            vo.timeStart.setHours(Number(timeArr[0].split(":")[0]));
                            vo.timeStart.setMinutes(Number(timeArr[0].split(":")[1]));
                            vo.timeStart.setSeconds(0);
                            vo.timeEnd = new Date(H52D_Framework.Time.serverTime.getTime());
                            vo.timeEnd.setHours(Number(timeArr[1].split(":")[0]));
                            vo.timeEnd.setMinutes(Number(timeArr[1].split(":")[1]));
                            vo.timeEnd.setSeconds(0);
                        }
                    }
                });
            }
        };
        /** 显示红点 */
        MainActionLogic.prototype.ShowRedPoint = function () {
            var _this = this;
            H52D_Framework.Tick.Loop(1000, this, function () {
                var join = H52D_Framework.TopicManager.Instance.ShowRedPoint();
                if (_this.join != join) {
                    _this.join = join;
                    H52D_Framework.Event.DispatchEvent("ShowRedPoint", [E_OpenGrade.ACTION, join]);
                }
            });
        };
        /** 当前时间在时间范围内 */
        MainActionLogic.prototype.Period = function (vo) {
            return H52D_Framework.Time.serverTime > vo.timeStart && H52D_Framework.Time.serverTime < vo.timeEnd;
        };
        /**
         * 活动开启
         * @param type活动类型
         * @param id活动ID
         **/
        MainActionLogic.prototype.ActionOpen = function (type, id) {
            switch (type) {
                //话题先锋
                case ActionType.topic:
                    if (H52D_Framework.OpenCondition(E_OpenGrade.TOPIC)) {
                        H52D_Framework.TopicManager.Instance.TopicActivityInfo(id);
                    }
                    break;
                //pvp战斗
                case ActionType.kicking:
                    if (H52D_Framework.OpenCondition(E_OpenGrade.KICKING)) {
                        H52D_Framework.KickingManager.Instance.PvpActivityInfo();
                    }
                    break;
                case ActionType.boss:
                    if (H52D_Framework.OpenCondition(E_OpenGrade.BOSS)) {
                        H52D_Framework.WroldBossManager.Instance.OpenView();
                    }
                    break;
            }
        };
        return MainActionLogic;
    }());
    H52D_Framework.MainActionLogic = MainActionLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainActionLogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：王者约战管理类
     * @author：zhangyusong
     */
    var KickingManager = /** @class */ (function () {
        function KickingManager() {
            this.avatarRoot = null;
            this.effectRoot = null;
            /** 玩家的战斗数据 */
            this.fireData = null;
            /** 房间类型 */
            this.roomType = H52D_Framework.BaseDefine.ItemIdGold;
            /***pk阵容信息 */
            this._kickingwar = {};
            this._kickingherolist = [];
            this._PositionWar = {};
            this._HeroWar = {};
            this._bChange = false;
        }
        Object.defineProperty(KickingManager, "Instance", {
            get: function () {
                if (this.instance == null) {
                    this.instance = new KickingManager();
                }
                return this.instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KickingManager.prototype, "Kickingwar", {
            get: function () {
                return this._kickingwar;
            },
            set: function (value) {
                this._kickingwar = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KickingManager.prototype, "bChange", {
            get: function () {
                return this._bChange;
            },
            set: function (value) {
                this._bChange = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KickingManager.prototype, "ChallengeNum", {
            set: function (challengeNum) {
                this.surplusGold = H52D_Framework.GameParamConfig["ParticipationMaxNum"][1] -
                    (challengeNum[H52D_Framework.BaseDefine.ItemIdGold] || 0);
                this.surplusDiamonds = H52D_Framework.GameParamConfig["ParticipationMaxNum"][2] -
                    (challengeNum[H52D_Framework.BaseDefine.ItemIdDiamonds] || 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KickingManager.prototype, "Kickingherolist", {
            /**英雄的id数组 */
            get: function () {
                return this._kickingherolist;
            },
            set: function (value) {
                this._kickingherolist = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KickingManager.prototype, "SceneView", {
            get: function () {
                return this.sceneView;
            },
            set: function (value) {
                this.sceneView = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KickingManager.prototype, "HeroWar", {
            /** 当前英雄位置信息 */
            get: function () {
                return this._HeroWar;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KickingManager.prototype, "sceneId", {
            get: function () {
                var sceneId = this.currentVo ? this.currentVo.sceneId : 0;
                return sceneId;
            },
            enumerable: true,
            configurable: true
        });
        KickingManager.prototype.Initialize = function () {
            this.petId = H52D_Framework.PetManager.Instance.CurrentpetID;
        };
        KickingManager.prototype.InitEvent = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqPvpMatching", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqPvpCombatEnd", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqPvpActivityInfo", this);
        };
        KickingManager.prototype.OpenScene = function (vo) {
            H52D_Framework.UIManager.Instance.CreateUI("KickingSceneView", [H52D_Framework.ViewToppestRoot, vo], Laya.Handler.create(this, function () {
                //UIManager.Instance.DestroyUI("KickingChooseView", [ViewToppestRoot]);
            }));
        };
        KickingManager.prototype.GetwarInfo = function () {
            this._kickingherolist = [];
            for (var key in this._kickingwar) {
                var nId = this._kickingwar[key];
                if (nId) {
                    this._kickingherolist.push(nId);
                }
            }
            return this._kickingherolist;
        };
        KickingManager.prototype.getwar = function () {
            for (var key in this._kickingwar) {
                var nId = this._kickingwar[key];
                if (!nId) {
                    delete this._kickingwar[key];
                }
            }
            return this._kickingwar;
        };
        /** 初始化阵容信息 */
        KickingManager.prototype.InitPosInfo = function () {
            this._PositionWar = {};
            this._HeroWar = {};
            var HeroWarList = this._kickingwar;
            for (var pos in HeroWarList) {
                var nHeroID = HeroWarList[pos];
                this.PutHero(pos, nHeroID);
            }
            this._bChange = false;
        };
        Object.defineProperty(KickingManager.prototype, "PositionWar", {
            /** 当前布阵信息 */
            get: function () {
                return this._PositionWar;
            },
            enumerable: true,
            configurable: true
        });
        /**判断是否在保存的阵容上 */
        KickingManager.prototype.IsInSaveWar = function (pos, nHeroID) {
            var InWar = false;
            var NoWar = false;
            var war = H52D_Framework.MasterPlayer.Instance.player.HeroWarList;
            for (var nIdx in war) {
                var a = war[nIdx];
                if (a == nHeroID) {
                    InWar = true;
                }
                else {
                    NoWar = false;
                }
            }
            return (InWar || NoWar) ? true : false;
        };
        /** 判断是否在阵容上 */
        KickingManager.prototype.IsInWar = function (nHeroID) {
            return this._HeroWar[nHeroID] == null ? false : true;
        };
        /** 放置英雄 */
        KickingManager.prototype.PutHero = function (nPos, nHeroID) {
            // 目标位置当前英雄ID
            var nLastHeroID = this._kickingwar[nPos];
            // 目标英雄上一个位置
            var nLastPos = this._HeroWar[nHeroID];
            if (nLastHeroID != null) {
                this._HeroWar[nLastHeroID] = nLastPos;
                this._bChange = true;
            }
            if (nLastPos != null) {
                this._kickingwar[nLastPos] = nLastHeroID;
                this._bChange = true;
            }
            this._kickingwar[nPos] = nHeroID;
            this._HeroWar[nHeroID] = nPos;
        };
        /**请求更新玩家战斗数据*/
        KickingManager.prototype.UpdateCombatInfo = function () {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqUpdateCombatInfo", this.fireData);
        };
        /**
         * 请求匹配
         * nRoomType -- 房间类型
         * nRoomID -- 房间ID
         * tInfo -- 玩家战斗数据
         */
        KickingManager.prototype.PvpMatching = function (nRoomType, nRoomID, currentVo) {
            this.roomType = nRoomType;
            this.currentVo = currentVo;
            H52D_Framework.RemoteCall.Instance.Send("K_ReqPvpMatching", nRoomType, nRoomID, this.fireData);
        };
        /**
         * 匹配返回数据
         * code -- 错误码
         * nRoomType -- 房间类型
         * nRoomID -- 房间ID
         * tInfo -- 玩家战斗数据
         * tOtherInfo -- 对手数据
         */
        KickingManager.prototype.C_ReqPvpMatching = function (buf) {
            var code = buf[0];
            var nRoomType = buf[1];
            var nRoomID = buf[2];
            var tOtherInfo = buf[3];
            if (code == 1) { //成功
                this.enemyData = tOtherInfo;
                H52D_Framework.DataManager.Instance.ReciveData(tOtherInfo);
                KickingManager.Instance.OpenScene(this.currentVo);
            }
            else if (code == 2) { //已经在战斗中
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("已经在战斗中");
            }
            else { //没有匹配到玩家
            }
        };
        /**
         * 请求结束战斗
         * nStar -- 结算评星级
         * nWin -- 1 胜利 2 失败 0 平局
         */
        KickingManager.prototype.PvpCombatEnd = function (nStar, nWin) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqPvpCombatEnd", nStar, nWin);
        };
        /**
         * 结束战斗返回
         * nStar -- 结算评星级
         * nWin -- 1 胜利 2 失败 0 平局
         * tAllAward -- 奖励
         */
        KickingManager.prototype.C_ReqPvpCombatEnd = function (buf) {
            var nStar = buf[0];
            var nWin = buf[1];
            var roomType = buf[2];
            var money = buf[3];
            if (roomType == H52D_Framework.BaseDefine.ItemIdGold) {
                if (nWin == 1) {
                    this.surplusGold--;
                }
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.ADD_GOLD);
            }
            else if (roomType == H52D_Framework.BaseDefine.ItemIdDiamonds) {
                if (nWin == 1) {
                    this.surplusDiamonds--;
                }
                // Event.DispatchEvent(EventDefine.ADD_GOLD);
            }
            H52D_Framework.UIManager.Instance.CreateUI("KickingResultView", [H52D_Framework.ViewToppestRoot, nStar, nWin, roomType, money]);
        };
        /** 请求活动数据 */
        KickingManager.prototype.PvpActivityInfo = function () {
            if (this.fireData == null) {
                H52D_Framework.RemoteCall.Instance.Send("K_ReqPvpActivityInfo");
            }
            else {
                H52D_Framework.UIManager.Instance.CreateUI("KickingChooseView", [H52D_Framework.ViewToppestRoot]);
            }
        };
        /**活动数据返回*/
        KickingManager.prototype.C_ReqPvpActivityInfo = function (buf) {
            var tData = buf[0];
            var tInfo = tData[1];
            var bSave = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.common, CacheTypeCommon.pvpSaveCombat);
            if (H52D_Framework.ObjIsEmpty(tInfo) || (!bSave)) {
                H52D_Framework.DataManager.Instance.MainPackData(true);
                tInfo = H52D_Framework.DataManager.Instance.packdata.Info;
            }
            this.fireData = tInfo;
            this._PositionWar = this.fireData.Hero;
            this.ChangeWar();
            H52D_Framework.UIManager.Instance.CreateUI("KickingChooseView", [H52D_Framework.ViewToppestRoot]);
        };
        KickingManager.prototype.ChangeWar = function () {
            for (var key in this._PositionWar) {
                var nhero = this._PositionWar[key];
                this._kickingwar[nhero["location"]] = nhero["id"];
            }
        };
        /**给服务器发送 保存战斗的阵容信息 */
        KickingManager.prototype.KickingWarInfo = function (kickwar) {
            this._kickingwar = kickwar;
            H52D_Framework.TipsLogic.Instance.OpenSystemTips("保存成功！");
            H52D_Framework.DataManager.Instance.PackData();
        };
        return KickingManager;
    }());
    H52D_Framework.KickingManager = KickingManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=KickingManager.js.map
/**
* 签到逻辑
*/
var H52D_Framework;
(function (H52D_Framework) {
    var SignInLogic = /** @class */ (function () {
        function SignInLogic() {
            /**今天第几天*/
            this._toDayNum = 1;
            /**今天签到了没*/
            this._toDayAlr = false;
            /**七日今天签到了没*/
            this._toDayAlrSeven = false;
            /**累计几天 七日*/
            this._toDayNumSeven = 0;
            /**输入天数 获取7日物品*/
            this._sevenListData = {};
            /**List数据*/
            this._listData = {};
        }
        Object.defineProperty(SignInLogic, "Instance", {
            get: function () {
                if (SignInLogic._inst == null)
                    SignInLogic._inst = new SignInLogic();
                return SignInLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SignInLogic.prototype, "ListData", {
            /**获取List数据*/
            get: function () {
                return this._listData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SignInLogic.prototype, "SevenListData", {
            /**获取SevenList数据*/
            get: function () {
                return this._sevenListData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SignInLogic.prototype, "ToDayNum", {
            /**获取今天第几天*/
            get: function () {
                return this._toDayNum;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SignInLogic.prototype, "ToDayNumSeven", {
            /**获取今天第几天 七日*/
            get: function () {
                return this._toDayNumSeven;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SignInLogic.prototype, "toDayAlrSeven", {
            /**今天是否领取了七日*/
            get: function () {
                return this._toDayAlrSeven;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SignInLogic.prototype, "ToDayAlr", {
            /**获取今天签到了没*/
            get: function () {
                return this._toDayAlr;
            },
            enumerable: true,
            configurable: true
        });
        SignInLogic.prototype.Initialize = function () {
            //上线同步 每日签到
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_SignInSystemInfo', this);
            //签到回调 每日签到
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_ReqSignIn', this);
            //上线同步 七日签到
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_UpdateSevenInfo', this);
            //签到回调 七日签到
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_ReqSevenSignIn', this);
        };
        /** 是否显示主界面按钮 */
        SignInLogic.prototype.IsShowMainBtn = function () {
            var needOrder = H52D_Framework.OpenGradeConfig[E_OpenGrade.SEVEN]["Checkpoint"];
            var customsOrder = H52D_Framework.MasterPlayer.Instance.player.CunstLevel;
            return (this._toDayNumSeven < 7) && (this._toDayAlrSeven == false) && (customsOrder > needOrder);
        };
        /** 是否显示主界面按钮 */
        SignInLogic.prototype.IsBtnVisible = function () {
            return !((this._toDayNumSeven >= 7) && (this._toDayAlrSeven));
        };
        /**上线同步 每日签到 */
        SignInLogic.prototype.C_SignInSystemInfo = function (buf) {
            var toDay = Number(buf[0]);
            var alreadyArr = buf[1];
            this.AddData(toDay, alreadyArr);
        };
        /**上线同步 七日签到 */
        SignInLogic.prototype.C_UpdateSevenInfo = function (buf) {
            var nSevenFlagDay = buf[0];
            var nSevenGetFlag = buf[1];
            this._toDayNumSeven = nSevenFlagDay;
            this._toDayAlrSeven = nSevenGetFlag == 1;
            this.SevenData();
            H52D_Framework.Event.DispatchEvent("UpdateBtnList");
        };
        /**签到回调 每日签到 */
        SignInLogic.prototype.C_ReqSignIn = function (buf) {
            var item_info = buf[1];
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, item_info]);
            this._listData[this._toDayNum].bAlready = true;
            this._toDayAlr = true;
            H52D_Framework.Event.DispatchEvent("UpDateList");
            H52D_Framework.Event.DispatchEvent("ConcealIcon");
            H52D_Framework.Event.DispatchEvent("ShowRedPoint", [E_OpenGrade.ROLE]);
        };
        /**签到回调 七日签到 */
        SignInLogic.prototype.C_ReqSevenSignIn = function (buf) {
            var item_info = buf[0];
            this._toDayAlrSeven = true;
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, item_info]);
            this.SevenData();
            H52D_Framework.Event.DispatchEvent("UpdateBtnList");
        };
        /**每日签到请求 */
        SignInLogic.prototype.SendReqSignIn = function () {
            H52D_Framework.RemoteCall.Instance.Send('K_ReqSignIn');
        };
        /**七日签到请求 */
        SignInLogic.prototype.SendReqSevenSignIn = function () {
            H52D_Framework.RemoteCall.Instance.Send('K_ReqSevenSignIn');
        };
        SignInLogic.prototype.AddData = function (toDay, alreadyArr) {
            this._toDayNum = toDay;
            this._signData = {};
            for (var dayId in H52D_Framework.SignConfig) {
                var rewardId = H52D_Framework.SignConfig[dayId].reward;
                var reWradData = H52D_Framework.RewardConfig[rewardId].reWrad;
                this._signData[Number(dayId)] = reWradData;
            }
            for (var dayId in this._signData) {
                var dayIdNum = Number(dayId);
                var data = this._signData[dayId][1];
                var isOpt = void 0;
                var isToDay = void 0;
                var isOverdue = void 0;
                var isAlready = void 0;
                var isAlr = Number(alreadyArr[dayId] ? alreadyArr[dayId] : 0);
                isAlr == 0 ? isAlready = false : isAlready = true;
                dayIdNum < toDay ? isOverdue = true : isOverdue = false;
                if (dayIdNum == toDay) {
                    isToDay = true;
                    isOpt = true;
                }
                else {
                    isToDay = false;
                    isOpt = false;
                }
                this.ListData[Number(dayId)] = {
                    itemType: data[H52D_Framework.BaseDefine.ItemSellContentType],
                    itemId: data[H52D_Framework.BaseDefine.ItemSellContentId],
                    itemNum: data[H52D_Framework.BaseDefine.ItemNumSellContent],
                    bOpt: isOpt,
                    btToDay: isToDay,
                    bOverdue: isOverdue,
                    bAlready: isAlready
                };
            }
            if (this._toDayNum > 0) {
                this._toDayAlr = this.ListData[this._toDayNum].bAlready;
            }
            ;
        };
        SignInLogic.prototype.EmptyData = function () {
            this._toDayAlrSeven = false;
            this.AddData(1, []);
            H52D_Framework.Event.DispatchEvent("UpDateList");
        };
        SignInLogic.prototype.SevenData = function () {
            //七日
            for (var dayId in H52D_Framework.SevenConfig) {
                var rewardId = H52D_Framework.SevenConfig[dayId].reward;
                var reward = H52D_Framework.RewardConfig[rewardId].reWrad;
                var toDay = this._toDayNumSeven == Number(dayId);
                var already = this._toDayNumSeven > Number(dayId);
                this.SevenListData[Number(dayId)] = {
                    itemType: reward[1][H52D_Framework.BaseDefine.ItemSellContentType],
                    itemId: reward[1][H52D_Framework.BaseDefine.ItemSellContentId],
                    itemNum: reward[1][H52D_Framework.BaseDefine.ItemNumSellContent],
                    btToDay: toDay,
                    bAlready: already,
                };
            }
            if (this._toDayNumSeven > 0) {
                this.SevenListData[this._toDayNumSeven].bAlready = this._toDayAlrSeven;
            }
            H52D_Framework.Event.DispatchEvent("UpDateSevenList");
        };
        return SignInLogic;
    }());
    H52D_Framework.SignInLogic = SignInLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SignInLogic.js.map
/**
* 商城系统数据类;
*/
//商城数据类型
var ShopDataEnum;
(function (ShopDataEnum) {
    ShopDataEnum[ShopDataEnum["eEmpty"] = 0] = "eEmpty";
    ShopDataEnum[ShopDataEnum["eProShop"] = 1] = "eProShop";
    ShopDataEnum[ShopDataEnum["eBoxShop"] = 2] = "eBoxShop";
    ShopDataEnum[ShopDataEnum["ePetShop"] = 3] = "ePetShop"; //宝箱商城
})(ShopDataEnum || (ShopDataEnum = {}));
//钻石充值数据类型
var ChargeDataEnum;
(function (ChargeDataEnum) {
    ChargeDataEnum[ChargeDataEnum["eCharge"] = 1] = "eCharge";
    ChargeDataEnum[ChargeDataEnum["eVIP"] = 2] = "eVIP";
    ChargeDataEnum[ChargeDataEnum["eFristCharge"] = 3] = "eFristCharge"; //首充
})(ChargeDataEnum || (ChargeDataEnum = {}));
//抽奖数据类型
var LotteryDataEnum;
(function (LotteryDataEnum) {
    LotteryDataEnum[LotteryDataEnum["eOne"] = 1] = "eOne";
    LotteryDataEnum[LotteryDataEnum["eTen"] = 2] = "eTen";
})(LotteryDataEnum || (LotteryDataEnum = {}));
var ErrorCode;
(function (ErrorCode) {
    ErrorCode[ErrorCode["Succeed"] = 1] = "Succeed";
    ErrorCode[ErrorCode["CostUnEnough"] = 2] = "CostUnEnough"; //消耗不足
})(ErrorCode || (ErrorCode = {}));
var H52D_Framework;
(function (H52D_Framework) {
    var ShopLogic = /** @class */ (function () {
        function ShopLogic() {
            this.tChargeTimes = {};
            /** 商城数据*/
            this._shopData = {};
            /** 充值数据*/
            this._chargeData = {};
            /** 抽奖数据*/
            this._lotteryData = {};
            this._moneyback = {};
            this.money_arr = [];
            this._SendLotteryFlag = true;
            /**是否打开vip */
            this.bOpenVipView = false;
            //初始化数据
            this._isFirst = false;
            this._shopData[ShopDataEnum.eBoxShop] = [];
            this._chargeData[ShopDataEnum.eBoxShop] = {};
            this._lotteryData[ShopDataEnum.eBoxShop] = [];
            this.SortData(H52D_Framework.MarketConfig, this._shopData);
            this.SortGemData(H52D_Framework.ChargeConfig, this._chargeData);
            this.SortData(H52D_Framework.LotteryConfig, this._lotteryData);
            this.setmoneydata();
        }
        Object.defineProperty(ShopLogic, "Instance", {
            get: function () {
                if (ShopLogic._inst == null)
                    ShopLogic._inst = new ShopLogic();
                return ShopLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShopLogic.prototype, "isFirst", {
            get: function () {
                return this._isFirst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShopLogic.prototype, "isPromotion", {
            get: function () {
                return this._isPromotion;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShopLogic.prototype, "nIdx", {
            /**商品id */
            get: function () {
                return this.n_Idx;
            },
            set: function (value) {
                this.n_Idx = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShopLogic.prototype, "EffShow", {
            get: function () {
                return this.eff_bool;
            },
            set: function (value) {
                this.eff_bool = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShopLogic.prototype, "ShopData", {
            /**获取商城数据*/
            get: function () {
                return this._shopData;
            },
            enumerable: true,
            configurable: true
        });
        ShopLogic.prototype.setmoneydata = function () {
            for (var key in H52D_Framework.ChargeReturnConfig) {
                var nIdx = Number(key);
                this.money_arr.push(nIdx);
            }
        };
        Object.defineProperty(ShopLogic.prototype, "MonenArr", {
            get: function () {
                return this.money_arr;
            },
            enumerable: true,
            configurable: true
        });
        ShopLogic.prototype.Eff_show = function () {
            var arr = [];
            var c_cfg = H52D_Framework.ChargeConfig[1];
            for (var key in c_cfg) {
                for (var nIdx in H52D_Framework.ChargeReturnConfig) {
                    var shopInfo = c_cfg[key];
                    if (shopInfo.Money == nIdx) {
                        arr.push(Number(key));
                    }
                }
            }
            return arr;
        };
        ShopLogic.prototype.Contr_redshow = function () {
            var a = 0;
            for (var key in this._moneyback) {
                if (!this._moneyback[key])
                    return false;
                if (this._moneyback[key] == 1) {
                    a++;
                }
            }
            if (a < 3) {
                return false;
            }
            else {
                return true;
            }
        };
        Object.defineProperty(ShopLogic.prototype, "ChargeData", {
            /**获取充值数据*/
            get: function () {
                return this._chargeData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShopLogic.prototype, "MoneyBack", {
            get: function () {
                return this._moneyback;
            },
            set: function (value) {
                this._moneyback = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShopLogic.prototype, "LotteryData", {
            /**获取抽奖数据*/
            get: function () {
                return this._lotteryData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShopLogic.prototype, "gemNum", {
            /**获取钻石*/
            get: function () {
                return H52D_Framework.BagManager.Instance.getItemNumber(2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShopLogic.prototype, "goldNum", {
            /**获取金币*/
            get: function () {
                return H52D_Framework.BagManager.Instance.getItemNumber(1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShopLogic.prototype, "ticketNum", {
            /**获取待抽券*/
            get: function () {
                return H52D_Framework.BagManager.Instance.getItemNumber(2301);
            },
            enumerable: true,
            configurable: true
        });
        /** 初始化*/
        ShopLogic.prototype.Initialize = function () {
            //购买回调通知
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_MarketBuyRes', this);
            //抽奖回调通知
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_ReqLottery', this);
            //充值信息
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_ChargeTime', this);
            //vip购买成功
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_Charge', this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqChargeFeedback", this);
            /**sdk 付费回调 */
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_OnCharge", this);
            this.eff_bool = true;
        };
        /**购买通知 */
        ShopLogic.prototype.C_MarketBuyRes = function (buf) {
            var nErrorCode = buf[0];
            var type = buf[1];
            var Id = buf[2];
            var raw = buf[3];
            if (nErrorCode == ErrorCode.Succeed) {
                var bIsHasRes = false;
                for (var i in raw) {
                    bIsHasRes = true;
                    break;
                }
                if (bIsHasRes) {
                    H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, raw]);
                }
                H52D_Framework.Event.DispatchEvent("BuySucceed");
            }
            else {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("钻石不足！");
                H52D_Framework.Event.DispatchEvent("toGemShop");
            }
            // if (type == 2) {
            // 	if (DiscountManager.Instance.IsStartBoxAction &&
            // 		DiscountManager.Instance.getBoxTims(Id) < DiscountManager.Instance.nBoxMaxTims) {
            // 		DiscountManager.Instance.addBoxTims(Id);
            // 	}
            // }
            if (type == 3) {
                H52D_Framework.WroldBossManager.Instance.ReqBuyBuff(type, Id);
            }
        };
        ShopLogic.prototype.C_OnCharge = function (buf) {
            var goodsType = buf[0];
            var goodsId = buf[1];
            var tAllGift = buf[2];
            if (goodsType == 5) {
                H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, tAllGift]);
            }
        };
        ShopLogic.prototype.C_ReqLottery = function (buf) {
            this._SendLotteryFlag = true;
            var nErrorCode = buf[0];
            var type = buf[1];
            var item_info = buf[2];
            if (nErrorCode == ErrorCode.Succeed) {
                H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, item_info, type == 2]);
                H52D_Framework.Event.DispatchEvent("BuySucceed");
            }
            else {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("钻石不足！");
                H52D_Framework.Event.DispatchEvent("toGemShop");
            }
            H52D_Framework.Event.DispatchEvent("ShowRedPoint", [E_OpenGrade.SHOP]);
        };
        /**付费 回调 */
        ShopLogic.prototype.C_ChargeTime = function (buf) {
            ShopLogic.Instance.tChargeTimes = buf[0];
            H52D_Framework.Event.DispatchEvent("UpdateBtnList");
            H52D_Framework.Event.DispatchEvent("UpdateChargeList");
            H52D_Framework.Event.DispatchEvent("CloseEffect", [false]);
            H52D_Framework.Tick.Once(1000, this, function () {
                H52D_Framework.Event.DispatchEvent("UpdateLotteryShop");
            });
            H52D_Framework.Event.DispatchEvent("updataview_twoyuan");
        };
        ShopLogic.prototype.C_Charge = function (buf) {
            var goodsType = buf[0];
            var goodsId = buf[1];
            H52D_Framework.Event.DispatchEvent("UpdateVipInfo");
        };
        /** 加载数据*/
        ShopLogic.prototype.SortData = function (cfg, shopData) {
            for (var shop_Info in cfg) {
                shopData[shop_Info] = [];
                var data = cfg[shop_Info];
                for (var com_info in data) {
                    var info = data[com_info];
                    shopData[shop_Info].push(info);
                }
            }
        };
        /** 加载数据*/
        ShopLogic.prototype.SortGemData = function (cfg, shopData) {
            for (var shop_Info in cfg) {
                shopData[shop_Info] = {};
                var data = cfg[shop_Info];
                for (var com_info in data) {
                    var info = data[com_info];
                    shopData[shop_Info][com_info] = info;
                }
            }
        };
        /***领取奖励 */
        ShopLogic.prototype.C_ReqChargeFeedback = function (buf) {
            var data = buf[0];
            var item = buf[1];
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, item]);
            this._moneyback[data] = 1;
            H52D_Framework.Event.DispatchEvent("UpdateView_moneyback");
        };
        /** 发送购买消息
         * @param i_ntype   商品类型
         * @param i_nID     物品Id
         * @param i_nNum    购买数量
         */
        ShopLogic.prototype.SendBuyMsg = function (i_ntype, i_nID, i_nNum) {
            H52D_Framework.RemoteCall.Instance.Send('K_MarketBuyReq', i_ntype, i_nID, i_nNum);
        };
        /** 发送抽奖请求
         * @param i_ntype   抽奖类型
         */
        ShopLogic.prototype.SendLotteryMsg = function (i_ntype) {
            var _this = this;
            if (this._SendLotteryFlag == false) {
                return;
            }
            this._SendLotteryFlag = false;
            H52D_Framework.RemoteCall.Instance.Send('K_ReqLottery', i_ntype);
            H52D_Framework.OneTimer(1000, Laya.Handler.create(this, function () {
                _this._SendLotteryFlag = true;
            }), "SendLotteryMsg");
        };
        /**是否是第一次充值该商品 */
        ShopLogic.prototype.isFristCharge = function (i_nType, i_nID) {
            if (ShopLogic.Instance.tChargeTimes[i_nType] == null) {
                return true;
            }
            else if (ShopLogic.Instance.tChargeTimes[i_nType][i_nID] == null) {
                return true;
            }
            return ShopLogic.Instance.tChargeTimes[i_nType][i_nID] == 0;
        };
        /**发送请求领取对应档位的奖励 */
        ShopLogic.prototype.K_ReqChargeFeedback = function (nMoney) {
            H52D_Framework.RemoteCall.Instance.Send('K_ReqChargeFeedback', nMoney); //K_GetActivityAwardReq
        };
        /**
          * 转换奖励tip格式
          * @param item {1:x,2:x,3:x}
          */
        ShopLogic.prototype.ConvertAwardFormat = function (item) {
            var _a;
            var award = {};
            for (var key in item) {
                var a1 = item[key][1];
                var a2 = item[key][2];
                var a3 = item[key][3];
                award[a1] = (_a = {}, _a[a2] = a3, _a);
            }
            return award;
        };
        return ShopLogic;
    }());
    H52D_Framework.ShopLogic = ShopLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ShopLogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var ShareType;
    (function (ShareType) {
        ShareType[ShareType["base"] = 0] = "base";
        ShareType[ShareType["hero"] = 1] = "hero";
        ShareType[ShareType["customs"] = 2] = "customs";
        ShareType[ShareType["achieven"] = 3] = "achieven";
    })(ShareType = H52D_Framework.ShareType || (H52D_Framework.ShareType = {}));
    /**
     * @class 分享管理类
     * @author zhangyusong
     **/
    var ShareLogic = /** @class */ (function () {
        function ShareLogic() {
            this._custemsArr = [];
            this._isOpenShare = false;
            this._ShareCustomsMax = 0;
        }
        Object.defineProperty(ShareLogic, "Instance", {
            get: function () {
                if (ShareLogic._instance == null) {
                    ShareLogic._instance = new ShareLogic();
                }
                return ShareLogic._instance;
            },
            enumerable: true,
            configurable: true
        });
        ShareLogic.prototype.Initialize = function () {
            var custemsConfig = H52D_Framework.GameParamConfig.ShareRelationCustoms;
            for (var key in custemsConfig) {
                if (custemsConfig[key]) {
                    var custems = custemsConfig[key];
                    this._custemsArr.push(custems);
                }
            }
            this.ShareCustemsMax();
            this.EventInit();
        };
        ShareLogic.prototype.EventInit = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqAddFreeUseNum", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqGetInviteAward", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqShareGame", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqGetInviteVip", this);
        };
        ShareLogic.prototype.C_ReqAddFreeUseNum = function () {
            var totle = H52D_Framework.GameParamConfig["ShareDialyGetFreePrivilegeNum"];
            var prv = H52D_Framework.MasterPlayer.Instance.GetEventDayProByType(EventProEnum.ShareNum);
            if (prv > totle) {
                var str = H52D_Framework.SysPromptConfig[30050].strPromptInfo;
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
            }
            var aa = H52D_Framework.MasterPlayer.Instance._FreeSum;
            if (H52D_Framework.MasterPlayer.Instance._FreeSum == H52D_Framework.MasterPlayer.Instance.getFreeUseSum()) {
                var str = H52D_Framework.SysPromptConfig[30035].strPromptInfo;
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
            }
            if (H52D_Framework.UIManager.Instance.IsHave("ShareBaseView", H52D_Framework.ViewUpRoot)) {
                H52D_Framework.Event.DispatchEvent("ShareInit");
            }
            //刷新特权数据
            H52D_Framework.MainRoleLogic.Instance.SetPrivList();
        };
        /** 领取邀请奖励返回 */
        ShareLogic.prototype.C_ReqGetInviteAward = function (buf) {
            var award = buf[1];
            H52D_Framework.MasterPlayer.Instance.setInvitation(buf[0], 1);
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, award]);
            H52D_Framework.Event.DispatchEvent("InviteAwardFrush");
        };
        ShareLogic.prototype.C_ReqShareGame = function (buf) {
            var nCallType = buf[0];
            var nId = buf[1];
            var info = buf[2];
            if (nCallType == ShareType.hero) {
                var heroName = H52D_Framework.StringInfoConfig[H52D_Framework.HeroConfig[nId].name].s;
                var str = H52D_Framework.Format(H52D_Framework.SysPromptConfig[30036].strPromptInfo, heroName);
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
                H52D_Framework.Event.DispatchEvent("ReqHeroLevelUp");
            }
            else if (nCallType == ShareType.customs) {
                var str = H52D_Framework.SysPromptConfig[30037].strPromptInfo;
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
                H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, info]);
            }
            else if (nCallType == ShareType.achieven) {
                var str = H52D_Framework.SysPromptConfig[30038].strPromptInfo;
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
            }
            else if (nCallType == ShareType.base) {
                var str = H52D_Framework.SysPromptConfig[30037].strPromptInfo;
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
            }
        };
        ShareLogic.prototype.C_ReqGetInviteVip = function (buf) {
            H52D_Framework.MasterPlayer.Instance.invitaVipFlag = 1;
            H52D_Framework.MasterPlayer.Instance.invitaVipTimes++;
            H52D_Framework.Event.DispatchEvent("FrushVipTime");
        };
        ShareLogic.prototype.ShareCustemsMax = function () {
            var max = 0;
            for (var i = 0; i < this._custemsArr.length; i++) {
                if (this._custemsArr[i] > max) {
                    max = this._custemsArr[i];
                }
            }
            this._ShareCustomsMax = max;
        };
        Object.defineProperty(ShareLogic.prototype, "shareCustems", {
            /**
            * 获取可分享的关卡数据
            */
            get: function () {
                return this._custemsArr;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareLogic.prototype, "ShareMax", {
            /**
            * 获取可分享的最大关卡
            */
            get: function () {
                return this._ShareCustomsMax;
            },
            enumerable: true,
            configurable: true
        });
        /** 英雄激活分享 */
        ShareLogic.prototype.ShareHero = function (heroId) {
            H52D_Framework.UIManager.Instance.CreateUI("ShareHeroView", [H52D_Framework.ViewToppestRoot, heroId]);
        };
        /** 通关分享 */
        ShareLogic.prototype.ShareCustoms = function (order) {
            H52D_Framework.UIManager.Instance.CreateUI("ShareCustomsView", [H52D_Framework.ViewToppestRoot, order]);
        };
        /** 成就分享 */
        ShareLogic.prototype.ShareAchieven = function (type, id) {
            H52D_Framework.UIManager.Instance.CreateUI("ShareAchievenView", [H52D_Framework.ViewToppestRoot, type, id]);
        };
        /** 助力通关 */
        ShareLogic.prototype.AssistanceCustems = function () {
            H52D_Framework.UIManager.Instance.CreateUI("InvitationCustemsView", [H52D_Framework.ViewToppestRoot, 0]);
        };
        /** 助力邀请 */
        ShareLogic.prototype.AssistanceInvitation = function () {
            H52D_Framework.UIManager.Instance.CreateUI("InvitationCustemsView", [H52D_Framework.ViewToppestRoot, 1]);
        };
        Object.defineProperty(ShareLogic.prototype, "isOpenShare", {
            /**
             * 是否开启分享
             */
            get: function () {
                return this._isOpenShare;
            },
            enumerable: true,
            configurable: true
        });
        return ShareLogic;
    }());
    H52D_Framework.ShareLogic = ShareLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ShareLogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class 邀请管理类
     * @author zhangyusong
     **/
    var InvitationLogic = /** @class */ (function () {
        function InvitationLogic() {
        }
        Object.defineProperty(InvitationLogic.prototype, "Instance", {
            get: function () {
                if (InvitationLogic._instance == null) {
                    InvitationLogic._instance = new InvitationLogic();
                }
                return InvitationLogic._instance;
            },
            enumerable: true,
            configurable: true
        });
        return InvitationLogic;
    }());
    H52D_Framework.InvitationLogic = InvitationLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=InvitationLogic.js.map
/**
* 排行榜逻辑类;
*/
// 排行榜类型
var RankTypeEnum;
(function (RankTypeEnum) {
    RankTypeEnum[RankTypeEnum["ePer"] = 1] = "ePer";
    RankTypeEnum[RankTypeEnum["Charm"] = 2] = "Charm";
    RankTypeEnum[RankTypeEnum["Boss"] = 3] = "Boss";
    //ecul,			//养成榜
})(RankTypeEnum || (RankTypeEnum = {}));
// 排行榜类型
var RankEnum;
(function (RankEnum) {
    RankEnum[RankEnum["eNull"] = 0] = "eNull";
    RankEnum[RankEnum["ePerStrength"] = 1] = "ePerStrength";
    RankEnum[RankEnum["ePerHreo"] = 5] = "ePerHreo";
    RankEnum[RankEnum["ePerClick"] = 3] = "ePerClick";
    RankEnum[RankEnum["ePerTreasure"] = 2] = "ePerTreasure";
    RankEnum[RankEnum["ePerRich"] = 4] = "ePerRich";
    RankEnum[RankEnum["CharmAll"] = 6] = "CharmAll";
    RankEnum[RankEnum["CharmWeek"] = 7] = "CharmWeek";
    RankEnum[RankEnum["CharmLastWeek"] = 8] = "CharmLastWeek";
    RankEnum[RankEnum["NowBossRank"] = 9] = "NowBossRank";
    RankEnum[RankEnum["LastBossRank"] = 10] = "LastBossRank";
    //eCampHeat, 		//阵营热度榜
    //eCampStrength, 	//阵营实力榜
    //eCulHreo,			//养成英雄榜
    //eCulSuit,			//养成套装榜
})(RankEnum || (RankEnum = {}));
// 排行榜类型
var OtherInfoEnum;
(function (OtherInfoEnum) {
    OtherInfoEnum[OtherInfoEnum["RDRoleId"] = 1] = "RDRoleId";
    OtherInfoEnum[OtherInfoEnum["RDName"] = 2] = "RDName";
    OtherInfoEnum[OtherInfoEnum["RDLevel"] = 3] = "RDLevel";
    OtherInfoEnum[OtherInfoEnum["RDProf"] = 4] = "RDProf";
    OtherInfoEnum[OtherInfoEnum["RDVipLv"] = 5] = "RDVipLv";
    OtherInfoEnum[OtherInfoEnum["RDHead"] = 6] = "RDHead";
    OtherInfoEnum[OtherInfoEnum["RDCamp"] = 7] = "RDCamp";
})(OtherInfoEnum || (OtherInfoEnum = {}));
var H52D_Framework;
(function (H52D_Framework) {
    var RankLogic = /** @class */ (function () {
        function RankLogic() {
            //排行榜数据
            this._rankAllArray = {};
            this._otherInfoArray = {};
        }
        Object.defineProperty(RankLogic, "Instance", {
            get: function () {
                if (RankLogic._inst == null)
                    RankLogic._inst = new RankLogic();
                return RankLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        RankLogic.prototype.Initialize = function () {
            //请求更新排行榜
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_RankData', this);
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.TAP_NUMBER, Laya.Handler.create(this, this.K_ReqClickTimes));
        };
        /**请求排行榜数据
         * @param type 排行榜类型
         */
        RankLogic.prototype.K_RankDataReq = function (type, startIndex, endIndex) {
            var params = [OtherInfoEnum.RDHead, OtherInfoEnum.RDVipLv, OtherInfoEnum.RDCamp];
            H52D_Framework.RemoteCall.Instance.Send("K_RankDataReq", type, startIndex, endIndex, params);
        };
        /**
         * 接收排行榜数据
         * @param buf
         */
        RankLogic.prototype.C_RankData = function (buf) {
            var rankType = buf[0]; //排行版类型
            var tData = buf[1]; //排行榜数据
            var tProData = buf[2]; //排行榜属性数据
            var tOnline = buf[3]; //是否在线数据
            var nRanking = buf[4]; //自身排名数据
            //初始化
            this._rankAllArray[rankType] = [];
            this._otherInfoArray[rankType] = [];
            //0号位置是自己的排名
            this._rankAllArray[rankType][0] = nRanking;
            //1-100是上榜玩家的排名
            for (var rank in tData) {
                var cls = tData[rank];
                this._rankAllArray[rankType][Number(rank)] = cls;
                this._otherInfoArray[rankType][Number(rank)] = tProData[Number(rank)];
            }
            H52D_Framework.Event.DispatchEvent('UpdateRankList', rankType);
        };
        /** 获取排行榜数据 */
        RankLogic.prototype.GetDataByType = function (type) {
            return this._rankAllArray[type];
        };
        /** 获取排行榜额外数据 */
        RankLogic.prototype.GetOtherInfoByType = function (type) {
            return this._otherInfoArray[type];
        };
        Object.defineProperty(RankLogic.prototype, "SetClickNum", {
            set: function (value) {
                this._clickNum = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RankLogic.prototype, "ClickNum", {
            get: function () {
                return this._clickNum;
            },
            enumerable: true,
            configurable: true
        });
        RankLogic.prototype.K_ReqClickTimes = function (value) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqClickTimes", value);
        };
        return RankLogic;
    }());
    H52D_Framework.RankLogic = RankLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=RankLogic.js.map
/*
* 邮件系统数据类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var MailLogic = /** @class */ (function () {
        function MailLogic() {
            // 所有邮件数据
            this._tList = [];
            // 保存排序之后的邮件信息
            this._tSortList = [];
            // 正在领取的邮件ID
            this._sendingMailId = [];
            // 是否已经打开
            this._hadOpen = false;
            this._attachAward = [];
            this._worldMailAccessoryTime = 0;
            /**
             * 领取邮件附件的回调
             * @param mailId 邮件ID
             * @param bSucess 是否领取成功
             */
            this._Award = {};
            this._listData = [];
        }
        Object.defineProperty(MailLogic, "Inst", {
            get: function () {
                if (MailLogic._inst == null)
                    MailLogic._inst = new MailLogic();
                return MailLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        MailLogic.prototype.Initialize = function () {
            // 同步玩家的个人邮件信息
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_MailList', this);
            // 同步玩家个人邮件信息结束
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_MailListEnd', this);
            // 新增个人邮件
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_AddMail', this);
            // 删除邮件结果消息
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_DelMailsRes', this);
            // 服务器返回读取或领取的结果
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_MailState', this);
            // 邮件附件领取结果
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_GetMailAffixRes', this);
            this._gameParam = H52D_Framework.GameParamConfig;
            this._sysPromptCfg = H52D_Framework.SysPromptConfig;
            this._worldMailAccessoryTime = this._gameParam['MailStorageMaxTime'] * 86400;
            // 登录时如果有未读邮件
            if (MailLogic.Inst.haveNotReadMail) {
                // 注册消息通知主界面入口提示特效
                H52D_Framework.Event.DispatchEvent('UpdateEntrance');
            }
        };
        // 私有方法begin。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
        // 邮件排序
        MailLogic.prototype.sortMailList = function () {
            // 排序前先清空
            this._tSortList = [];
            for (var i in this._tList) {
                var index = Number(i);
                var data = this._tList[index];
                this._tSortList.push(data);
            }
            // 对邮件根据获取时间进行排序
            function sortMail(a, b) {
                return b.isNew - a.isNew;
            }
            this._tSortList.sort(sortMail);
            // 刷新界面消息 
            H52D_Framework.Event.DispatchEvent('UpdateMailView');
            H52D_Framework.Event.DispatchEvent('UpdateMailList');
        };
        // 接收服务器发送到客户端的消息begin。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
        // 同步个人邮件信息
        MailLogic.prototype.C_MailList = function (buf) {
            for (var i in buf[0]) {
                var key = Number(i);
                var data = new H52D_Framework.MailItem(buf[0][key][1], buf[0][key][2], buf[0][key][3], buf[0][key][4], buf[0][key][5], buf[0][key][6], buf[0][key][7]);
                this._tList.push(data);
            }
        };
        // 同步个人邮件信息结束
        MailLogic.prototype.C_MailListEnd = function (buf) {
            // 接受邮件结束，对邮件进行排序
            for (var i in buf[0]) {
                var key = Number(i);
                var data = new H52D_Framework.MailItem(buf[0][key][1], buf[0][key][2], buf[0][key][3], buf[0][key][4], buf[0][key][5], buf[0][key][6], buf[0][key][7]);
                this._tList.push(data);
            }
            this.sortMailList();
        };
        // 新增个人邮件
        MailLogic.prototype.C_AddMail = function (buf) {
            // 向邮件列表中添加一条邮件信息，然后重新排序
            var mailData = new H52D_Framework.MailItem();
            mailData.instId = buf[0];
            mailData.mailType = buf[1];
            mailData.tAffix = buf[2];
            mailData.lastTime = this._worldMailAccessoryTime;
            mailData.isNew = true;
            mailData.bAward = false;
            mailData.contentInfo = buf[3];
            mailData.reciveTime = (new Date().getTime() / 1000);
            mailData.dueTime = (new Date().getTime() / 1000) + this._worldMailAccessoryTime;
            this._tList.push(mailData);
            this.sortMailList();
            // 刷新界面消息
            H52D_Framework.Event.DispatchEvent('UpdateMailView');
            // 新邮件提示,刷新入口图标
            H52D_Framework.Event.DispatchEvent('UpdateEntrance');
            H52D_Framework.Event.DispatchEvent('UpdateMailList');
        };
        /**
         * 删除邮件的消息
         * @param buf 删除的邮件的ID数组
         */
        MailLogic.prototype.C_DelMailsRes = function (buf) {
            // 删除对应的邮件，重新排序，注册消息刷新UI
            for (var i in buf[0]) {
                for (var k in this._tList) {
                    var index = Number(k);
                    if (this._tList[index].instId == buf[0][i]) {
                        this._tList.splice(index, 1);
                        break;
                    }
                }
            }
            this.sortMailList();
            // 刷新界面消息
            H52D_Framework.Event.DispatchEvent('UpdateMailView');
            // 关闭打开的邮件详情页
            H52D_Framework.Event.DispatchEvent('CloseMailTips');
            H52D_Framework.Event.DispatchEvent('UpdateMailList');
        };
        /**
         * 读取或者领取邮件的消息
         * @param para1 mailId
         * @param parm2 type(为1时已读邮件，为2时已经取附件)
         */
        MailLogic.prototype.C_MailState = function (buf) {
            var para1 = buf[0];
            var parm2 = buf[1];
            var mailData;
            for (var i in this._tList) {
                var index = Number(i);
                if (this._tList[i].instId == para1) {
                    if (parm2 == 0) {
                    }
                    else if (parm2 == 1) {
                        // 读取邮件
                        this._tList[i].isNew = false;
                        // 更新列表数据源
                        this.sortMailList();
                    }
                    else if (parm2 == 2) {
                        // 领取附件
                        this._tList[i].isNew = false;
                        this._tList[i].bAward = true;
                        // 更新列表数据源
                        this.sortMailList();
                        // 刷新邮件tips界面
                        H52D_Framework.Event.DispatchEvent('UpdateMailTipView', [this._tList[i]]);
                    }
                    mailData = this._tList[i];
                    break;
                }
            }
            // 刷新UI界面
            H52D_Framework.Event.DispatchEvent('UpdateMailView');
            H52D_Framework.Event.DispatchEvent('UpdateMailList');
        };
        MailLogic.prototype.C_GetMailAffixRes = function (buf) {
            var _this = this;
            var mailId = buf[0];
            var _Award = buf[1];
            var isExpire = buf[2];
            var bSucess = [];
            for (var i in this._tList) {
                var index = Number(i);
                if (this._tList[i].instId == mailId) {
                    // 更新UI界面  
                    this._tList[i].bAward = true;
                }
            }
            //是否是一键领取
            if (!isExpire) {
                for (var type in _Award) {
                    var itemType = Number(type);
                    var data = _Award[itemType];
                    if (this._Award[itemType] == null) {
                        this._Award[itemType] = {};
                    }
                    var tAwardInfo = this._Award[itemType];
                    for (var id in data) {
                        var ID = Number(id);
                        var num = data[id];
                        if (tAwardInfo[ID] == null) {
                            tAwardInfo[ID] = num;
                        }
                        else {
                            tAwardInfo[ID] += num;
                        }
                    }
                }
                H52D_Framework.OneTimer(500, Laya.Handler.create(this, function () {
                    H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, _this._Award]);
                    _this._Award = {};
                }), "C_GetMailAffixRes");
            }
            H52D_Framework.Event.DispatchEvent('UpdateMailView');
            H52D_Framework.Event.DispatchEvent('UpdateMailList');
        };
        // 读取邮件请求,个人和运营共用
        MailLogic.prototype.ReadMail = function (mailId) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReadPersonalMail", mailId);
        };
        // 领取邮件附件请求，个人和运营共用
        MailLogic.prototype.GetMailAffix = function (mailId) {
            H52D_Framework.RemoteCall.Instance.Send("K_GetMailAffix", mailId);
        };
        // 删除邮件请求
        MailLogic.prototype.DelMailsReq = function (delList) {
            // 区分个人邮件和运营邮件
            var delList0 = []; //个人邮件
            for (var i = 0; i < delList.length; i++) {
                delList0.push(delList[i]);
            }
            H52D_Framework.RemoteCall.Instance.Send("K_DelMailsReq", delList0);
        };
        // 单封删除邮件请求
        MailLogic.prototype.DelMailsReq1 = function (delList) {
            H52D_Framework.RemoteCall.Instance.Send("K_DelMailsReq", [delList]);
        };
        // 一键领取邮件附件并删除
        MailLogic.prototype.GetMailAffixAndDel = function (i_tMailId) {
            // i_nType 为1是个人，为2是世界，为3是所有
            H52D_Framework.RemoteCall.Instance.Send("K_GetMailAffixAndDel", i_tMailId);
        };
        // 领取邮件附件（从GS返回的消息,个人和运营共用此消息）
        MailLogic.prototype.GetMailAffixRes = function (i_sMailId, i_bSuc) {
            H52D_Framework.RemoteCall.Instance.Send("K_GetMailAffixRes", i_sMailId);
        };
        Object.defineProperty(MailLogic.prototype, "mailList", {
            // 所有的邮件数据
            get: function () {
                return this._tList;
            },
            enumerable: true,
            configurable: true
        });
        MailLogic.prototype.SortData = function () {
            this._listData = [];
            for (var key in this._tSortList) {
                this._listData.push(this._tSortList[key]);
            }
        };
        Object.defineProperty(MailLogic.prototype, "listData", {
            // 排序好的邮件数据
            get: function () {
                return this._listData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailLogic.prototype, "sortList", {
            // 排序好的邮件数据
            get: function () {
                return this._tSortList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailLogic.prototype, "mailCount", {
            // 当前邮件数量
            get: function () {
                return this._tSortList.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailLogic.prototype, "sysPromptCfg", {
            // 获取提示配置信息
            get: function () {
                return this._sysPromptCfg;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailLogic.prototype, "haveNotReadMail", {
            // 获取是否有未读邮件
            get: function () {
                var bool = false;
                for (var i in this._tList) {
                    var index = Number(i);
                    if (this._tList[i].isNew) {
                        bool = true;
                        break;
                    }
                }
                return bool;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailLogic.prototype, "haveNewAffix", {
            // 获取是否有附件未领取
            get: function () {
                var bool = false;
                for (var i in this._tList) {
                    var index = Number(i);
                    if (this._tList[i].tAffixData.length > 0 && !this._tList[i].bAward) {
                        bool = true;
                        break;
                    }
                }
                return bool;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailLogic.prototype, "checkShowRed", {
            /** 是否显示红点 */
            get: function () {
                for (var i in this._tList) {
                    var index = Number(i);
                    var mailItem = this._tList[i];
                    if (!mailItem.bAward && mailItem.tAffixData && mailItem.tAffixData.length > 0) {
                        return true;
                    }
                    if (mailItem.isNew) {
                        return true;
                    }
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailLogic.prototype, "canAwardId", {
            // 获取所有可以领取附件的邮件ID集合
            get: function () {
                var mailIdArr = [];
                for (var i in this._tList) {
                    var index = Number(i);
                    // 有附件并且没有被领取
                    for (var key in this._tList[index].tAffix) {
                        if (this._tList[index].tAffix[key]) {
                            if (this._tList[index].tAffixData.length && !this._tList[index].bAward && mailIdArr.indexOf(this._tList[index].instId) < 0) {
                                mailIdArr.push(this._tList[index].instId);
                            }
                        }
                    }
                }
                return mailIdArr;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailLogic.prototype, "canDelId", {
            // 获取所有可以被删除的邮件ID集合
            get: function () {
                // 无附件、已领取过附件、
                var mailIdArr = [];
                for (var i in this._tList) {
                    var index = Number(i);
                    if (!this._tList[index].tAffixData.length || this._tList[index].bAward || this._tList[index].lastTime < 0) {
                        mailIdArr.push(this._tList[index].instId);
                    }
                }
                return mailIdArr;
            },
            enumerable: true,
            configurable: true
        });
        // 通过ID获取到邮件数据
        MailLogic.prototype.GetMailById = function (mailId) {
            var mailData;
            for (var i in this._tList) {
                var index = Number(i);
                if (this._tList[index].instId == mailId) {
                    mailData = this._tList[index];
                    break;
                }
            }
            return mailData;
        };
        // 通过邮件ID获取到该邮件对应的附件物品信息
        MailLogic.prototype.GetAffixById = function (mailId) {
            return this.GetMailById(mailId).tAffix;
        };
        return MailLogic;
    }());
    H52D_Framework.MailLogic = MailLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MailLogic.js.map
/*
* 邮件模板类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var MailItem = /** @class */ (function () {
        /**
         *
         * @param instId        邮件ID
         * @param mailType      邮件类型
         * @param dueTime       到期时间
         * @param tAffix        附件
         * @param isNew         新邮件标记
         * @param bAward        是否被领取
         * @param contentInfo   邮件正文文本
         */
        function MailItem(instId, mailType, dueTime, tAffix, isNew, bAward, contentInfo) {
            this.rankTypeName = {
                1: "战力榜",
                2: "等级榜",
                3: "杀戮榜"
            };
            this._instId = instId;
            this._mailType = mailType;
            this._tAffix = tAffix ? tAffix : {};
            this._isNew = (isNew == 0);
            this._bAward = (bAward == 1);
            this._lastTime = dueTime - new Date().getTime() / 1000;
            this._dueTime = dueTime;
            this._contentInfo = this.AnaContInfo(contentInfo);
            this._keepTime = H52D_Framework.ConfigSystem.Inst.GetGameParmas('MailStorageMaxTime') * 86400;
            this._reciveTime = dueTime - this._keepTime;
        }
        // 解析附件文本内容
        MailItem.prototype.AnaContInfo = function (contInfo) {
            if (!contInfo) {
                return [];
            }
            return contInfo;
        };
        // 时间日期格式化
        MailItem.prototype.DateFormate = function (dd, fmt) {
            var date = new Date(dd);
            var o = {
                'M+': date.getMonth() + 1,
                'D+': date.getDate(),
                'h+': date.getHours(),
                'm+': date.getMinutes(),
                's+': date.getSeconds()
            };
            if (/(Y+)/.test(fmt)) {
                fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
            }
            for (var k in o) {
                if (new RegExp("(" + k + ")").test(fmt)) {
                    fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(('' + o[k]).length)));
                }
            }
            return fmt;
        };
        Object.defineProperty(MailItem.prototype, "dueTime", {
            // 获取邮件到期时间
            get: function () {
                return this._dueTime;
            },
            // 设置邮件到期时间
            set: function (val) {
                this._dueTime = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "instId", {
            // 获取到邮件ID
            get: function () {
                return this._instId;
            },
            // 设置邮件ID
            set: function (val) {
                this._instId = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "mailType", {
            // 获取到邮件类型，根据此字段加载邮件标题等
            get: function () {
                return this._mailType;
            },
            // 设置邮件type
            set: function (val) {
                this._mailType = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "lastTime", {
            // 获取邮件剩余保存时间秒数
            get: function () {
                return this._lastTime;
            },
            // 设置保存时间
            set: function (val) {
                this._lastTime = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "mailTitle", {
            // 获取到邮件标题
            get: function () {
                var mailTitle = '';
                mailTitle = H52D_Framework.ConfigSystem.Inst.GetMailTitle(this._mailType) || '这个类型的邮件标题我还没配' + this._mailType;
                return mailTitle;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "srcContent", {
            // 获取邮件正文列表(Array)
            get: function () {
                return this._contentInfo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "mailContent", {
            // TODO 获取到邮件正文字符串(string)
            get: function () {
                if (!this._strContentInfo) {
                    var str = H52D_Framework.ConfigSystem.Inst.GetMailContent(this._mailType) || '这个类型的邮件内容我也么有配' + this._mailType;
                    var strCont = str;
                    var TypeStr = "";
                    if (this._mailType == 1) {
                        if (this._contentInfo[1] == 1) {
                            strCont = H52D_Framework.Format(str, "赞同");
                        }
                        else if (this._contentInfo[1] == 2) {
                            strCont = H52D_Framework.Format(str, "反对");
                        }
                    }
                    else if (this._mailType == 3) {
                        var presId = Number(this._contentInfo[3]);
                        var num = Number(this._contentInfo[4]) - H52D_Framework.PresentConfig[presId].charm;
                        var original = num + "";
                        strCont = H52D_Framework.Format(str, this._contentInfo[1], original, this._contentInfo[4]);
                    }
                    else if (this._mailType == 11) {
                        strCont = H52D_Framework.Format(str, this._contentInfo[1]);
                    }
                    this._strContentInfo = strCont;
                }
                return this._strContentInfo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "keepTime", {
            // 获取到邮件保存时间
            get: function () {
                return this._keepTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "tAffixData", {
            /**
             * @_tAffix [配置ID， 数量]
             * {"1": {"1": "130070", "2": 1, s"3": 1, "4": 0, "5": 0}, "2": {"1": "130070", "2": 4, "3": 1, "4": 0, "5": 0}}
             */
            // 获取附件奖励数据
            get: function () {
                var tAffixData = [];
                for (var i in this._tAffix) {
                    var key = Number(i);
                    var data = void 0;
                    var id = this._tAffix[key][2];
                    var type = this._tAffix[key][1];
                    if (!this._tAffix[key][2]) {
                        return;
                    }
                    data = new H52D_Framework.ItemData(id, type);
                    data.num = this._tAffix[key][3];
                    tAffixData.push(data);
                }
                return tAffixData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "tAffix", {
            // 获取附件信息
            get: function () {
                return this._tAffix;
            },
            // 设置附件信息
            set: function (val) {
                this._tAffix = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "isNew", {
            // 获取到新邮件标记
            get: function () {
                return this._isNew;
            },
            // 设置新邮件标记
            set: function (val) {
                this._isNew = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "bAward", {
            // 获取到邮件领取状态
            get: function () {
                return this._bAward;
            },
            // 设置邮件领取状态
            set: function (val) {
                this._bAward = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "contentInfo", {
            // 设置正文文本
            set: function (val) {
                this._contentInfo = this.AnaContInfo(val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "reciveTime", {
            // 获取接收邮件的时间
            get: function () {
                return this._reciveTime;
            },
            // 设置接收邮件的时间
            set: function (val) {
                this._reciveTime = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "reciveTimeToStr", {
            // 获取接收邮件时间 转换格式 2018-03-20 10:20:05
            get: function () {
                return this.DateFormate(this._reciveTime * 1000, "YYYY-MM-DD ");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MailItem.prototype, "getAffixContent", {
            //显示邮件正文前15个字
            get: function () {
                var content = this.mailContent;
                var rtnContent = '';
                if (content && content != '') {
                    rtnContent = content.substring(0, 15) + '.........';
                }
                return rtnContent;
            },
            enumerable: true,
            configurable: true
        });
        // 读取邮件操作
        MailItem.prototype.ReadMail = function () {
            if (this._isNew) {
                return true;
            }
            else {
                return false;
            }
        };
        return MailItem;
    }());
    H52D_Framework.MailItem = MailItem;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MailItem.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var ItemData = /** @class */ (function () {
        /**
         * @biref 构造函数
         * @param Param 物品数据或配置ID
         * 随机属性
         */
        function ItemData(Param, type, instId, num) {
            this._cfgId = 0; // 配置ID
            this._instId = ""; // 实例ID
            this._num = 0; // 数量
            this._holder = 0; // 容器类型
            this._slot = 0; // 物品位置
            this._cfgData = null; // 配置数据
            this._strCfgData = null; // 中文对照数据
            this._qulityValue = null; // 属性值配置表
            this._type = 0; // 类型
            /** 兼容机制 */
            if (typeof (Param) == "number") {
                this._instId = instId;
                this._num = num;
                this._type = type;
                this.cfgId = Param;
            }
            else {
                this.unpackData(Param);
            }
        }
        /** 解析服务器数据 */
        ItemData.prototype.unpackData = function (itemData) {
            // 接收数据
            this._instId = itemData[2]; // 实例ID
            this._num = itemData[3]; // 叠加个数
            this._holder = itemData[4]; // 容器类型
            this._slot = itemData[5]; // 容器类型
            this.cfgId = itemData[1]; // 配置ID
        };
        Object.defineProperty(ItemData.prototype, "cfgId", {
            /**
             * 获取配置ID
             */
            get: function () {
                return this._cfgId;
            },
            /** 设置配置ID */
            set: function (cfgId) {
                this._cfgId = cfgId;
                if (this._type == H52D_Framework.BaseDefine.ItemTypePro) {
                    this._cfgData = H52D_Framework.ItemConfig[this._cfgId];
                }
                else if (this._type == H52D_Framework.BaseDefine.ItemTypeEquip) {
                    this._cfgData = H52D_Framework.EquipConfig[this._cfgId];
                }
                else if (this._type == H52D_Framework.BaseDefine.ItemTypePet) {
                    this._cfgData = H52D_Framework.PetConfig[this._cfgId];
                }
                // 获取配置信息
                if (!this._cfgData) {
                    H52D_Framework.Debugger.LogError("错误的配置ID-->" + String(this._cfgId));
                    return;
                }
                // 获取中文配置表对照信息
                this._strCfgData = H52D_Framework.StringInfoConfig;
                if (!this._strCfgData) {
                    H52D_Framework.Debugger.LogError("错误的中文ID-->" + String(this._cfgData.dwItemName));
                }
                this._qulityValue = H52D_Framework.QualityValue;
                if (!this._qulityValue) {
                    H52D_Framework.Debugger.LogError("读取不到正确的属性配置表-->");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "instId", {
            /**
             * 获取实例ID
             */
            get: function () {
                return this._instId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "type", {
            get: function () {
                return this._type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "num", {
            /**
             * 获取数量
             */
            get: function () {
                return this._num;
            },
            set: function (val) {
                this._num = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "holder", {
            /** 获取容器类型 */
            get: function () {
                return this._holder;
            },
            enumerable: true,
            configurable: true
        });
        /** 设置位置 */
        ItemData.prototype.setPosInfo = function (holder, slot) {
            this._holder = holder; // 容器类型
            this._slot = slot; // 容器类型
        };
        Object.defineProperty(ItemData.prototype, "isProp", {
            /**
             * 是否是物品
             */
            get: function () {
                return this._cfgData.dwItemType == 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "name", {
            /**
             * 获取名称
             */
            get: function () {
                if (this._cfgData) {
                    if (this._type == H52D_Framework.BaseDefine.ItemTypePro) {
                        return this._strCfgData[this._cfgData.dwItemName] ? this._strCfgData[this._cfgData.dwItemName]['s'] : '';
                    }
                    else if (this._type == H52D_Framework.BaseDefine.ItemTypeEquip) {
                        return this._strCfgData[this._cfgData.equipName] ? this._strCfgData[this._cfgData.equipName]['s'] : '';
                    }
                    else if (this._type == H52D_Framework.BaseDefine.ItemTypePet) {
                        return this._strCfgData[this._cfgData.petName] ? this._strCfgData[this._cfgData.petName]['s'] : '';
                    }
                }
                else {
                    return " ";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "icon", {
            /**
             * 获取图片资源路径
             */
            get: function () {
                if (this._cfgData) {
                    if (this._type == H52D_Framework.BaseDefine.ItemTypePro) {
                        return this._cfgData.strIconID_B;
                    }
                    else if (this._type == H52D_Framework.BaseDefine.ItemTypeEquip) {
                        return this._cfgData.equipIcon;
                    }
                    else if (this._type == H52D_Framework.BaseDefine.ItemTypePet) {
                        return this._cfgData.strPetIcon;
                    }
                }
                else {
                    return "icon_shili.png";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "itemType", {
            /**
             * 获取类型
             */
            get: function () {
                if (this._type == H52D_Framework.BaseDefine.ItemTypePro) {
                    return this._cfgData.dwItemType;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "itemTypes", {
            /**
             * 获取子类型
             */
            get: function () {
                return this._cfgData.dwItemTypes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "useLevel", {
            /**
             * 获取等级需求 bug
             */
            get: function () {
                if (this._cfgData)
                    return this._cfgData.dwUseCondition;
                else
                    return 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "itemState", {
            /**
             * 获取道具描述
             */
            get: function () {
                return this._strCfgData[this._cfgData.dwItemAState] ? this._strCfgData[this._cfgData.dwItemAState]['s'] : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "color", {
            /**
             * 获取品质对应的颜色值
             */
            get: function () {
                if (this._type == H52D_Framework.BaseDefine.ItemTypePro) {
                    return this._cfgData.dwItemQuality;
                }
                else if (this._type == H52D_Framework.BaseDefine.ItemTypeEquip) {
                    return this._cfgData.equipColor;
                }
                else if (this._type == H52D_Framework.BaseDefine.ItemTypePet) {
                    return this._cfgData.petColor;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "itemDesc", {
            /**
             * 获取道具描述
             */
            get: function () {
                if (this._strCfgData) {
                    return this._strCfgData[this._cfgData.dwItemAState] ? this._strCfgData[this._cfgData.dwItemAState]['s'] : '';
                }
                else {
                    return "";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemData.prototype, "tbQualPro", {
            /**基础属性 */
            get: function () {
                return this._cfgData.dwUseEffect;
            },
            enumerable: true,
            configurable: true
        });
        return ItemData;
    }());
    H52D_Framework.ItemData = ItemData;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ItemData.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var LoginLogic = /** @class */ (function () {
        function LoginLogic() {
            this._bLogin = false;
            this.InviteRoleID = "";
        }
        Object.defineProperty(LoginLogic, "Instance", {
            get: function () {
                if (LoginLogic._inst == null)
                    LoginLogic._inst = new LoginLogic();
                return LoginLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        LoginLogic.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_LoadCharListMsg", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_CreateCharResMsg", this);
        };
        LoginLogic.prototype.OnReConnect = function () {
            H52D_Framework.RemoteCall.Instance.Connect(H52D_Framework.GameLink.Instance.urlParams['selServerIP'], H52D_Framework.GameLink.Instance.urlParams['selServerPort']);
            this._bLogin = true;
        };
        /**
         * 登录
         * @param accountName 账户名
         */
        LoginLogic.prototype.Login = function (accountName, InviteRoleID) {
            this.InviteRoleID = InviteRoleID || "";
            if (this._bLogin) {
                return;
            }
            if (accountName == "") {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("请输入账号！");
                return;
            }
            this._account = accountName;
            H52D_Framework.RemoteCall.Instance.Connect(H52D_Framework.GameLink.Instance.urlParams['selServerIP'], H52D_Framework.GameLink.Instance.urlParams['selServerPort']);
            this._bLogin = true;
        };
        LoginLogic.prototype.OnConnected = function () {
            this.GWHandShakeRequest();
        };
        LoginLogic.prototype.OnConnectFail = function () {
            this._bLogin = false;
        };
        LoginLogic.prototype.OnDisConnect = function () {
            this._bLogin = false;
        };
        LoginLogic.prototype.C_LoadCharListMsg = function (buf) {
            if (buf[0] == 1) {
                //请求创建角色
                H52D_Framework.RemoteCall.Instance.Send("K_PlayerCreate");
            }
            else {
                //进入创建流程
                H52D_Framework.UIManager.Instance.CreateUI("CreateView", [H52D_Framework.ViewDownRoot]);
            }
        };
        LoginLogic.prototype.GWHandShakeRequest = function () {
            // 网关参数
            var strTGW = "tgw_l7_forward\r\nHost:%s\r\n\r\n\0";
            var replaceIP = H52D_Framework.GameLink.Instance.urlParams['selServerIP'] + ":" + H52D_Framework.GameLink.Instance.urlParams['selServerPort'];
            strTGW = strTGW.replace("%s", replaceIP);
            var byte = new Laya.Byte();
            byte.endian = Laya.Byte.getSystemEndian();
            byte.writeUTFBytes(strTGW);
            H52D_Framework.RemoteCall.Instance.SendDirect(byte.buffer);
            // 发送登录消息
            H52D_Framework.GameLink.Instance.urlParams['openid'] = this._account;
            H52D_Framework.GameLink.Instance.urlParams['inviteroleid'] = this.InviteRoleID;
            H52D_Framework.RemoteCall.Instance.Send("K_EnterKSReqMsg", H52D_Framework.GameLink.Instance.urlParams, false);
        };
        LoginLogic.prototype.C_CreateCharResMsg = function (ncode) {
            if (ncode == 1) {
                // 名字重复
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("角色名重复！");
            }
        };
        return LoginLogic;
    }());
    H52D_Framework.LoginLogic = LoginLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=LoginLogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class 基金管理类
     * @author zhangyusong
     **/
    var FundLogic = /** @class */ (function () {
        function FundLogic() {
        }
        Object.defineProperty(FundLogic, "Instance", {
            get: function () {
                if (FundLogic._instance == null) {
                    FundLogic._instance = new FundLogic();
                }
                return FundLogic._instance;
            },
            enumerable: true,
            configurable: true
        });
        FundLogic.prototype.Initialize = function () {
            this.EventInit();
        };
        FundLogic.prototype.EventInit = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_RecBuyFund", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_RecGetFundAward", this);
        };
        /** 基金红点 */
        FundLogic.prototype.ShowRedPoint = function () {
            var has = false;
            if (H52D_Framework.MasterPlayer.Instance.player.IsPermanentVip) {
                if (H52D_Framework.MasterPlayer.Instance.fundBuy) {
                    for (var i in H52D_Framework.FoundationConfig) {
                        if (H52D_Framework.CustomsManager.Instance.customsOrder >= H52D_Framework.FoundationConfig[i]["customsNum"] &&
                            !H52D_Framework.MasterPlayer.Instance.getFundReceive(Number(i))) {
                            has = true;
                            break;
                        }
                    }
                }
            }
            return has;
        };
        /** 购买基金 */
        FundLogic.prototype.ReqBuyFund = function () {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqBuyFund");
        };
        /** 领取基金 */
        FundLogic.prototype.ReqGetFundAward = function (fundId) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqGetFundAward", fundId);
        };
        /** 购买基金回调 */
        FundLogic.prototype.C_RecBuyFund = function (buf) {
            H52D_Framework.MasterPlayer.Instance.fundBuy = true;
            H52D_Framework.TipsLogic.Instance.OpenSystemTips("基金购买成功");
            H52D_Framework.Event.DispatchEvent("ShowControlRedPoint", E_OpenGrade.FUND);
            H52D_Framework.Event.DispatchEvent("FundFrush");
        };
        /** 领取基金回调 */
        FundLogic.prototype.C_RecGetFundAward = function (buf) {
            H52D_Framework.MasterPlayer.Instance.setFundReceive(buf[0], 1);
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, buf[1]]);
            H52D_Framework.Event.DispatchEvent("ShowControlRedPoint", E_OpenGrade.FUND);
            H52D_Framework.Event.DispatchEvent("FundFrush");
        };
        return FundLogic;
    }());
    H52D_Framework.FundLogic = FundLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=FundLogic.js.map
//# sourceMappingURL=FightLogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var InteractLogic = /** @class */ (function () {
        function InteractLogic() {
            //赠送配置表
            this._presentCfg = [];
            this._presentNum = 0;
        }
        Object.defineProperty(InteractLogic, "Inst", {
            get: function () {
                if (InteractLogic._inst == null)
                    InteractLogic._inst = new InteractLogic();
                return InteractLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        InteractLogic.prototype.Initialize = function () {
            //接收服务器返回的好友信息            
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqGiveGifts", this);
            var tempArr = [];
            for (var key in H52D_Framework.PresentConfig) {
                var object = H52D_Framework.PresentConfig[key];
                object["presentId"] = key;
                tempArr.push(object);
            }
            this._presentNum = tempArr.length;
            //礼物排序
            function tsort(a, b) {
                return a.sequence < b.sequence ? -1 : 1;
            }
            tempArr.sort(tsort);
            var page = {};
            for (var index = 0; index < tempArr.length; index++) {
                var obj = tempArr[index];
                if (index != 0 && index % 8 == 0) {
                    this._presentCfg.push(page);
                    page = {};
                }
                page[index % 8] = obj;
            }
            if (!H52D_Framework.ObjIsEmpty(page)) {
                this._presentCfg.push(page);
            }
        };
        InteractLogic.prototype.C_ReqGiveGifts = function (buf) {
            var itemID = 0;
            var charm = 0;
            for (var index = 0; index < this._presentCfg.length; index++) {
                if (itemID != 0) {
                    break;
                }
                var page = this._presentCfg[index];
                for (var key in page) {
                    var object = page[key];
                    if (object["presentId"] == buf[0]) {
                        itemID = object["itemId"];
                        charm = object["charm"];
                        break;
                    }
                }
            }
            if (charm >= 0) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(buf[1] + "魅力值+" + charm);
            }
            else {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(buf[1] + "魅力值" + charm);
            }
            var chatStr = "1~%" + H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[itemID].dwItemName].s + "~" + buf[1] + "~" + itemID;
            // if (MasterPlayer.Instance.player.CampID > 0) {
            //     RemoteCall.Instance.Send("K_SendChatInfoMsg", E_ChatChannel.C_CAMP, [0, chatStr, {}],
            //         GetSig(MasterPlayer.Instance.player.ID.toString(), chatStr));
            // } else {
            H52D_Framework.RemoteCall.Instance.Send("K_SendChatInfoMsg", E_ChatChannel.C_WORLD, [0, chatStr, {}], GetSig(H52D_Framework.MasterPlayer.Instance.player.ID.toString(), chatStr));
            // }
            H52D_Framework.Event.DispatchEvent("RefreshInteractViewList");
        };
        Object.defineProperty(InteractLogic.prototype, "presentCfg", {
            get: function () {
                return this._presentCfg;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InteractLogic.prototype, "presentNum", {
            get: function () {
                return this._presentNum;
            },
            enumerable: true,
            configurable: true
        });
        return InteractLogic;
    }());
    H52D_Framework.InteractLogic = InteractLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=InteractLogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var ChatLogic = /** @class */ (function () {
        function ChatLogic() {
            //频道消息记录
            this._chatViewLines = {};
            //各频道消息条数限制
            this._chatLinesLimit = {};
            //读取各频道的发言CD
            this._chatTimeCD = {};
            //各频道最新的发言时间
            this._chatTime = {};
            //切换频道时记录输入的内容
            this._channelChatMsg = {};
            //当前选中的频道
            this._curChannel = E_ChatChannel.C_WORLD;
            //记录各频道是否有新消息，有：1 无：0
            this._newMsgOrder = {};
            //发言字数限制
            this._letterNumLimit = 0;
            //红点
            this._worldChat = false;
            this._campChat = false;
            /** 表情列表 */
            this.FaceList = [];
        }
        Object.defineProperty(ChatLogic, "Inst", {
            get: function () {
                if (ChatLogic._inst == null)
                    ChatLogic._inst = new ChatLogic();
                return ChatLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        ChatLogic.prototype.Initialize = function () {
            //接收服务器返回的好友信息            
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SendChatMsg", this);
            this.FaceList = [[]];
            var flag = 0;
            for (var idx = 1; idx <= 50; idx++) {
                if (this.FaceList[flag].length == 30) {
                    flag += 1;
                    this.FaceList[flag] = [];
                }
                this.FaceList[flag].push(idx);
            }
            //初始化各频道 限制条数 限制时间 最新发言时间
            for (var index = 0; index < E_ChatChannel.C_CNUM - 1; index++) {
                //初始为0，各频道都没有新消息
                this._newMsgOrder[index] = 0;
                //频道消息记录
                this._chatViewLines[index] = [];
                //切换频道时记录输入的内容
                this._channelChatMsg[index] = "";
                //各频道消息条数限制
                this._chatLinesLimit[index] = 20; //配置表
                //读取各频道的发言CD
                this._chatTimeCD[index] = H52D_Framework.GameParamConfig["worldchanneltime"]; //配置表
                //各频道最新的发言时间
                this._chatTime[index] = 0;
            }
            this._letterNumLimit = 25; //配置表
        };
        ChatLogic.prototype.C_SendChatMsg = function (buf) {
            if (H52D_Framework.MasterPlayer.Instance.player.CunstLevel <= H52D_Framework.OpenGradeConfig[8].Checkpoint) {
                return;
            }
            if (buf[1][3] != H52D_Framework.MasterPlayer.Instance.player.ID) {
                if (H52D_Framework.UIManager.Instance.IsHave("ChatView", H52D_Framework.ViewUpRoot) && this._curChannel == buf[0]) {
                }
                else {
                    this._newMsgOrder[buf[0]] = 1;
                }
            }
            this._curChannel = buf[0];
            this.SaveMsg(buf);
            H52D_Framework.Event.DispatchEvent("UpdateAllPannelEvent", buf[0]);
        };
        Object.defineProperty(ChatLogic.prototype, "newMsg", {
            get: function () {
                for (var index = 0; index < E_ChatChannel.C_CNUM - 1; index++) {
                    if (this._newMsgOrder[index] > 0) {
                        return true;
                    }
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        ChatLogic.prototype.GetNewMsgOrder = function () {
            return this._newMsgOrder;
        };
        Object.defineProperty(ChatLogic.prototype, "factionChat", {
            get: function () {
                return this._worldChat;
            },
            set: function (val) {
                this._worldChat = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChatLogic.prototype, "privateChat", {
            get: function () {
                return this._campChat;
            },
            set: function (val) {
                this._campChat = val;
            },
            enumerable: true,
            configurable: true
        });
        ChatLogic.prototype.GetChatLineNum = function (channel) {
            return this._chatLinesLimit[channel];
        };
        ChatLogic.prototype.SaveMsg = function (buf) {
            if (buf[0] == E_ChatChannel.C_WORLD) {
                var arr = this._chatViewLines[buf[0]];
                var data = new H52D_Framework.ChatData();
                data.channel = buf[0];
                data.smallChannel = buf[0];
                data.roleID = buf[1][3];
                data.msg = buf[1][2];
                data.time = H52D_Framework.FormatTime();
                data.headId = buf[1][5];
                data.strName = buf[1][1];
                data.campID = buf[1][4];
                data.vipLevel = buf[1][6];
                if (arr.length >= this._chatLinesLimit[data.channel]) {
                    arr.shift();
                }
                //根据 频道 存信息，每一条信息是一个obj，obj中对应发言人ID
                arr.push(data);
            }
            else if (buf[0] == E_ChatChannel.C_CAMP) {
                //存到阵营频道
                var arr = this._chatViewLines[buf[0]];
                var data = new H52D_Framework.ChatData();
                data.channel = buf[0];
                data.smallChannel = buf[0];
                data.roleID = buf[1][3];
                data.msg = buf[1][2];
                data.time = H52D_Framework.FormatTime();
                data.headId = buf[1][5];
                data.strName = buf[1][1];
                data.campID = buf[1][4];
                data.vipLevel = buf[1][6];
                if (arr.length >= this._chatLinesLimit[data.channel]) {
                    arr.shift();
                }
                //根据 频道 存信息，每一条信息是一个obj，obj中对应发言人ID
                arr.push(data);
                //也存到世界频道
                var arr1 = this._chatViewLines[E_ChatChannel.C_WORLD];
                var data1 = new H52D_Framework.ChatData();
                data1.channel = E_ChatChannel.C_WORLD;
                data1.smallChannel = buf[0];
                data1.roleID = buf[1][3];
                data1.msg = buf[1][2];
                data1.time = H52D_Framework.FormatTime();
                data1.headId = buf[1][5];
                data1.strName = buf[1][1];
                data1.campID = buf[1][4];
                data1.vipLevel = buf[1][6];
                if (arr1.length >= this._chatLinesLimit[data1.channel]) {
                    arr1.shift();
                }
                //根据 频道 存信息，每一条信息是一个obj，obj中对应发言人ID
                arr1.push(data1);
            }
            else if (buf[0] == E_ChatChannel.C_SYSTEM) {
                //存到世界频道
                var arr1 = this._chatViewLines[E_ChatChannel.C_WORLD];
                var data1 = new H52D_Framework.ChatData();
                data1.channel = E_ChatChannel.C_WORLD;
                data1.smallChannel = E_ChatChannel.C_SYSTEM;
                data1.roleID = buf[1][3];
                data1.msg = buf[1][2];
                data1.time = H52D_Framework.FormatTime();
                data1.headId = buf[1][5];
                data1.strName = buf[1][1];
                data1.campID = buf[1][4];
                data1.vipLevel = buf[1][6];
                if (arr1.length >= this._chatLinesLimit[data1.channel]) {
                    arr1.shift();
                }
                //根据 频道 存信息，每一条信息是一个obj，obj中对应发言人ID
                arr1.push(data1);
            }
        };
        ChatLogic.prototype.GetChatMsg = function (channel) {
            return this._chatViewLines[channel];
        };
        ChatLogic.prototype.SetCurChannel = function (channel) {
            this._curChannel = channel;
        };
        ChatLogic.prototype.GetCurChannel = function () {
            if (this._newMsgOrder[E_ChatChannel.C_WORLD] == 1 && this._newMsgOrder[E_ChatChannel.C_CAMP] == 1) {
                this._curChannel = E_ChatChannel.C_WORLD;
                return this._curChannel;
            }
            if (this._newMsgOrder[E_ChatChannel.C_WORLD] == 0 && this._newMsgOrder[E_ChatChannel.C_CAMP] == 0) {
                this._curChannel = E_ChatChannel.C_WORLD;
                return this._curChannel;
            }
            if (this._newMsgOrder[E_ChatChannel.C_WORLD] == 1) {
                this._curChannel = E_ChatChannel.C_WORLD;
                return this._curChannel;
            }
            if (this._newMsgOrder[E_ChatChannel.C_CAMP] == 1) {
                this._curChannel = E_ChatChannel.C_CAMP;
                return this._curChannel;
            }
            this._curChannel = E_ChatChannel.C_WORLD;
            return this._curChannel;
        };
        //点击Tab后，此页签新消息清0
        ChatLogic.prototype.SetNewMsgOrder = function (channel) {
            this._newMsgOrder[channel] = 0;
        };
        //保存频道最新的发言时间
        ChatLogic.prototype.SaveChatTime = function (channel) {
            var nowDate = new Date();
            var timeSeconds = (nowDate.getDate() * 24 * 60 + nowDate.getHours() * 60 + nowDate.getMinutes()) * 60 + nowDate.getSeconds();
            this._chatTime[channel] = timeSeconds;
        };
        ChatLogic.prototype.GetChatTime = function (channel) {
            return this._chatTime[channel];
        };
        ChatLogic.prototype.GetLetterNumLimit = function () {
            return this._letterNumLimit;
        };
        ChatLogic.prototype.SaveChannelChatMsg = function (channel, msg) {
            this._channelChatMsg[channel] = msg;
        };
        ChatLogic.prototype.GetChannelChatMsg = function (channel) {
            return this._channelChatMsg[channel];
        };
        /** 获取匹配后的聊天内容 **/
        ChatLogic.prototype.OnGetChatInfo = function (chatInfo) {
            //获取输入文本框(聊天单条内容)的文本内容
            var chatStr = chatInfo;
            if (!chatInfo)
                return "";
            //为聊天内容进行图片匹配：全局搜索图片类型字符串，替换为img标签  
            for (var idx = 1; idx <= 50; idx++) {
                var flag = new RegExp("@" + idx + "@", "g");
                chatStr = chatStr.replace(flag, "<img src='ui_chat/i_f" + idx + ".png' width='45px' height='45px'></img>");
            }
            //返回匹配后的聊天内容
            return chatStr.toString();
        };
        ChatLogic.prototype.GMCommondMsg = function (chatStr) {
            var tabMsg = this.CheckGMCmd(chatStr);
            if (tabMsg && tabMsg.length > 0) {
                H52D_Framework.RemoteCall.Instance.Send("K_GMCommondMsg", tabMsg);
                return;
            }
        };
        //判断当前是否是GM命令
        ChatLogic.prototype.CheckGMCmd = function (strText) {
            var gmMsg = [];
            if (strText.length > 2) {
                var x = strText.search("@"); //0
                var arg = strText.split(" ");
                for (var index = 1; index < 10000; index++) {
                    var buf = H52D_Framework.GmConfig[index];
                    if (buf == null)
                        return;
                    if ("@" + buf.cmd != arg[0] && index == 999)
                        return;
                    if ("@" + buf.cmd != arg[0])
                        continue;
                    var arg1 = arg[0].substring(1, arg[0].length).toLocaleLowerCase();
                    if (arg1 == buf.cmd) {
                        gmMsg.push(Number(buf.id));
                        break;
                    }
                }
                for (var i = 1; i < arg.length; i++) {
                    gmMsg.push(Number(arg[i]));
                }
            }
            return gmMsg;
        };
        return ChatLogic;
    }());
    H52D_Framework.ChatLogic = ChatLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ChatLogic.js.map
/**
 * 聊天数据结构
 */
var H52D_Framework;
(function (H52D_Framework) {
    var ChatData = /** @class */ (function () {
        function ChatData() {
        }
        Object.defineProperty(ChatData.prototype, "channel", {
            get: function () {
                return this._channel;
            },
            set: function (val) {
                this._channel = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChatData.prototype, "smallChannel", {
            get: function () {
                return this._smallChannel;
            },
            set: function (val) {
                this._smallChannel = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChatData.prototype, "roleID", {
            get: function () {
                return this._roleID;
            },
            set: function (val) {
                this._roleID = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChatData.prototype, "headId", {
            get: function () {
                return this._headId;
            },
            set: function (val) {
                this._headId = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChatData.prototype, "strName", {
            get: function () {
                return this._strName;
            },
            set: function (val) {
                this._strName = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChatData.prototype, "msg", {
            get: function () {
                return this._msg;
            },
            set: function (val) {
                this._msg = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChatData.prototype, "campID", {
            get: function () {
                return this._campID;
            },
            set: function (val) {
                this._campID = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChatData.prototype, "time", {
            get: function () {
                return this._time;
            },
            set: function (val) {
                this._time = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChatData.prototype, "vipLevel", {
            get: function () {
                return this._vipLevel;
            },
            set: function (val) {
                this._vipLevel = val;
            },
            enumerable: true,
            configurable: true
        });
        return ChatData;
    }());
    H52D_Framework.ChatData = ChatData;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ChatData.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /** 背景逻辑累 */
    var BackgroundManager = /** @class */ (function () {
        function BackgroundManager() {
        }
        Object.defineProperty(BackgroundManager, "Instance", {
            get: function () {
                if (BackgroundManager._inst == null) {
                    BackgroundManager._inst = new BackgroundManager();
                }
                return BackgroundManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        BackgroundManager.prototype.Initialize = function () {
        };
        /** 更换背景图 */
        BackgroundManager.prototype.changePictrue = function () {
        };
        return BackgroundManager;
    }());
    H52D_Framework.BackgroundManager = BackgroundManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BackgroundLogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var SelectType;
    (function (SelectType) {
        SelectType[SelectType["One"] = 1] = "One";
        SelectType[SelectType["Five"] = 2] = "Five";
        SelectType[SelectType["Max"] = 3] = "Max";
    })(SelectType || (SelectType = {}));
    var HeroManager = /** @class */ (function () {
        function HeroManager() {
            /**所有已有英雄 */
            this._herolist = [];
            /**英雄布阵存储信息 */
            this._heroWar = [];
            /**所有英雄的id数组 */
            this.hero_List = [];
            /**已拥有英雄id */
            this.has_List = [];
            this._hero_peck = [];
            this._hero_pecktime = {};
            this.HeroMaxLv = 0;
            this._HeroMaxStar = 0;
            this._peck_num = 0;
            this._peck_icon = false;
            this._loading = false;
            this.MoneyColor = {
                1: "#75d888",
                2: "#ffa5a7"
            };
            this.hero_List = [];
            for (var key in H52D_Framework.HeroConfig) {
                var nHeroID = Number(key);
                this.hero_List.push(nHeroID);
            }
            this._heroNum = 0;
            this.HeroMaxLv = 0;
            var tCfg = H52D_Framework.HeroUpgrateConfig[1];
            for (var nLv in tCfg) {
                this.HeroMaxLv = Number(nLv);
            }
            this._HeroMaxStar = 0;
            var n_tCfg = H52D_Framework.HeroAdvanceConfig[this.hero_List[0]];
            for (var star in n_tCfg) {
                this._HeroMaxStar = Number(star);
            }
            for (var key in H52D_Framework.HeroPeckConfig) {
                var nId = Number(key);
                this._hero_peck.push(nId);
            }
        }
        Object.defineProperty(HeroManager.prototype, "PeckIcon", {
            get: function () {
                return this._peck_icon;
            },
            set: function (value) {
                this._peck_icon = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroManager.prototype, "PeckShow", {
            get: function () {
                return this._peck_show;
            },
            set: function (value) {
                this._peck_show = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroManager.prototype, "PeckNum", {
            get: function () {
                return this._peck_num;
            },
            set: function (value) {
                this._peck_num = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroManager.prototype, "HeroPeck", {
            get: function () {
                return this._hero_peck;
            },
            set: function (value) {
                this._hero_peck = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroManager.prototype, "HeroPeckTime", {
            get: function () {
                return this._hero_pecktime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroManager.prototype, "HeroMaxStar", {
            get: function () {
                return this._HeroMaxStar;
            },
            enumerable: true,
            configurable: true
        });
        HeroManager.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqActivateHero", this); //激活英雄
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqHeroLevelUp", this); //请求英雄升级回调
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_HeroLevelUp", this); //英雄升级
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqHeroStarUp", this); //英雄进阶
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SendHeroBeginMsg", this); //开始同步上线英雄  
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SendGroupHeroMsg", this); //上线同步英雄
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SendHeroEndMsg", this); //上线同步英雄结束
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SaveBattleArray", this); //发送布阵的数据信息  
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_AddHero", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ActivateHeroAward", this);
            this._peck_show = true;
            this._hero_pecktime = H52D_Framework.MasterPlayer.Instance.player.Hero_pecktime;
        };
        HeroManager.prototype.GetHeroStar = function (nIdx) {
            var ntcfg = H52D_Framework.HeroAdvanceConfig[nIdx];
            var star;
            for (var nstar in ntcfg) {
                star = Number(nstar);
            }
            return star;
        };
        HeroManager.prototype.C_SendHeroBeginMsg = function () {
            this._herolist = {};
        };
        /** 上线同步英雄 */
        HeroManager.prototype.C_SendGroupHeroMsg = function (buf) {
            var tGroup = buf[0];
            for (var nIdx in tGroup) {
                var tData = tGroup[nIdx];
                var oHero = new H52D_Framework.HeroInfo();
                oHero.unpackData(tData);
                this._herolist[oHero.nHeroID] = oHero;
            }
        };
        /** 上綫同步英雄結束 */
        HeroManager.prototype.C_SendHeroEndMsg = function (buf) {
            var tGroup = buf[0];
            for (var nIdx in tGroup) {
                var tData = tGroup[nIdx];
                var oHero = new H52D_Framework.HeroInfo();
                oHero.unpackData(tData);
                this._herolist[oHero.nHeroID] = oHero;
            }
        };
        /** 添加英雄 */
        HeroManager.prototype.C_AddHero = function (buf) {
            var tData = buf[0];
            var oHero = new H52D_Framework.HeroInfo();
            oHero.unpackData(tData);
            this._herolist[oHero.nHeroID] = oHero;
            H52D_Framework.AttributePassiveManager.Instance.Update();
        };
        HeroManager.prototype.C_ActivateHeroAward = function (buf) {
            var data = buf[0];
            H52D_Framework.MasterPlayer.Instance.player.Hero_pecktime[data] = buf[1];
            HeroManager.Instance.PeckShow = true;
            this._peck_icon = true;
            H52D_Framework.Event.DispatchEvent("UpdateBtnList");
        };
        /**返回单个英雄的礼包时间 */
        HeroManager.prototype.GetHeroPecktime = function (nHeroId) {
            return H52D_Framework.MasterPlayer.Instance.player.Hero_pecktime[nHeroId];
            // return 0;
        };
        /** 获取配置全部英雄 */
        HeroManager.prototype.GetCfgHeroList = function () {
            return this.hero_List;
        };
        /** 檢測英雄是否激活 */
        HeroManager.prototype.IsActive = function (nHeroID) {
            return this._herolist[nHeroID] ? true : false;
        };
        /**英雄是否满足激活条件 */
        HeroManager.prototype.HeroIstrue = function (nHeroID) {
            var bool = this.IsActive(nHeroID);
            if (bool) {
                return false;
            }
            var herolv;
            var hero = this.GetHero(nHeroID);
            if (!hero) {
                herolv = 1;
            }
            else {
                herolv = hero.Level;
            }
            //let iteminfo=HeroAdvanceConfig[nHeroID][herolv].Consume;
            var iteminfo = H52D_Framework.HeroConfig[nHeroID].needNum;
            //let itemID=iteminfo[1][1];
            var itemID = H52D_Framework.HeroConfig[nHeroID].needItem;
            //let itenNum=iteminfo[1][2];
            var itenNum = H52D_Framework.HeroConfig[nHeroID].needNum;
            var hasitem = H52D_Framework.BagManager.Instance.getItemNumber(itemID);
            return (hasitem >= itenNum) ? true : false;
        };
        /**判断英雄是否满足进阶条件 */
        HeroManager.prototype.HeroIsStar = function (nHeroID) {
            var herostar;
            var hero = this.GetHero(nHeroID);
            if (!hero)
                return;
            else {
                herostar = hero.Star;
            }
            if (herostar < this.HeroMaxStar) {
                var iteminfo = H52D_Framework.HeroAdvanceConfig[nHeroID][herostar + 1].Consume;
                var itemID = iteminfo[1][1];
                var itenNum = iteminfo[1][2];
                var hasitem = H52D_Framework.BagManager.Instance.getItemNumber(itemID);
                return (hasitem >= itenNum) ? true : false;
            }
            else {
                var iteminfo = H52D_Framework.HeroAdvanceConfig[nHeroID][herostar].Consume;
                var itemID = iteminfo[1][1];
                var itenNum = iteminfo[1][2];
                var hasitem = H52D_Framework.BagManager.Instance.getItemNumber(itemID);
                return false;
                //return (hasitem >= itenNum) ? true : false;
            }
        };
        HeroManager.prototype.HeroIsHave_peck = function (nheroId) {
            for (var key in this._hero_peck) {
                var nId = this._hero_peck[key];
                if (nId == nheroId) {
                    return true;
                }
            }
            return false;
        };
        /**判断英雄是否可以升级 */
        HeroManager.prototype.HeroIsUp = function (nheroID) {
            var hero_cfg = H52D_Framework.HeroConfig[nheroID];
            var hero = this.GetHero(nheroID);
            var type = hero_cfg.type;
            var nx = hero_cfg.heroRatio;
            if (hero && hero.Level < 300) {
                var lv = hero ? hero.Level : 1;
                var n_money = H52D_Framework.HeroUpgrateConfig[type][lv + 1].ConsumeGold - H52D_Framework.HeroUpgrateConfig[type][lv].ConsumeGold;
                var lock_Money = Math.floor(n_money * nx);
                var lock_lv = H52D_Framework.HeroUpgrateConfig[type][lv + 1].needPlayerLv;
                var play_money = H52D_Framework.BagManager.Instance.getItemNumber(1);
                var play_lv = H52D_Framework.MasterPlayer.Instance.player.Level;
                if (play_lv >= lock_lv && play_money >= lock_Money) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        };
        HeroManager.prototype.GetheroUpMoney = function (Idx) {
            for (var key in this._herolist) {
                var nheroID = Number(key);
                this.has_List.push(nheroID);
            }
            var a = this.has_List[Idx];
            var needMoney = this.GetHeroLvUpUse(a, 1);
            // if(!this.HeroIsUp(a)){
            //     return                                          
            // }
            return needMoney[1];
        };
        /** 获取升级需要的金币数量 */
        HeroManager.prototype.GetHeroLvUpUse = function (nHeroID, nSelectType) {
            if (nSelectType == 0) {
                nSelectType = 1;
            }
            var nUpLevel = null;
            var nMoney = 0; //升级需要的钱数
            var hero = HeroManager.Instance.GetHero(nHeroID);
            var nNowLevel = hero.Level;
            var tCfg = H52D_Framework.HeroConfig[nHeroID];
            var nx = tCfg.heroRatio;
            var nUpgrate_Cfg = H52D_Framework.HeroUpgrateConfig[tCfg.type];
            var nMaxLv = HeroManager.Instance.HeroMaxLv;
            var nHasMoney = H52D_Framework.BagManager.Instance.getItemNumber(1); //人物金币
            // 判断是否已经满级
            if (nUpgrate_Cfg[nNowLevel + 1] == null) {
                return [-1, 0];
            }
            var nNowMoney = nUpgrate_Cfg[nNowLevel].ConsumeGold;
            if (nSelectType == SelectType.One) {
                var tLastCfg_1 = nUpgrate_Cfg[nNowLevel + 1];
                nMoney = tLastCfg_1.ConsumeGold - nNowMoney;
                return [nNowLevel + 1, nMoney];
            }
            var nCanMaxLv = 0;
            // 检测当前能升到的最大等级
            for (var nCanLv = nNowLevel + 1; nCanLv <= nMaxLv; nCanLv++) {
                var tLastCfg_2 = nUpgrate_Cfg[nCanLv];
                var nCanMoney = tLastCfg_2.ConsumeGold - nNowMoney;
                if (nCanMoney > nHasMoney) {
                    nCanMaxLv = nCanLv - 1;
                    break;
                }
                nCanMaxLv = nCanLv;
            }
            switch (nSelectType) {
                case SelectType.Five:
                    if (nNowLevel + 10 > nCanMaxLv) {
                        nUpLevel = nCanMaxLv;
                    }
                    else {
                        nUpLevel = nNowLevel + 10;
                    }
                    break;
                case SelectType.Max:
                    nUpLevel = nCanMaxLv;
                    break;
                default:
                    break;
            }
            var tLastCfg = nUpgrate_Cfg[nUpLevel];
            nMoney = tLastCfg.ConsumeGold - nNowMoney;
            return [nUpLevel, nMoney];
        };
        /**未上阵的英雄 */
        HeroManager.prototype.NHero = function () {
            var heroobj = H52D_Framework.HeroCardManager.Instance.CHeroList;
            var key = [];
            var nkey = [];
            for (var k in this._herolist) {
                key.push(Number(k));
            }
            for (var k in heroobj) {
                nkey.push(heroobj[k].vo.nHeroID);
            }
            for (var i = 0; i < nkey.length; i++) {
                key.push(nkey[i]);
            }
            for (var i = 0; i < key.length; i++) {
                for (var j = i + 1; j < key.length; j++) {
                    if (key[i] && key[j]) {
                        if (key[i] == key[j]) {
                            key[i] = null;
                            key[j] = null;
                        }
                    }
                }
            }
            for (var i = key.length; i >= 0; i--) {
                if (key[i] == null) {
                    key.splice(i, 1);
                }
            }
            return key;
        };
        Object.defineProperty(HeroManager, "Instance", {
            get: function () {
                if (HeroManager._init == null) {
                    HeroManager._init = new HeroManager();
                }
                return HeroManager._init;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroManager.prototype, "Herolist", {
            /** 获取已有英雄列表 */
            get: function () {
                return this._herolist;
            },
            enumerable: true,
            configurable: true
        });
        HeroManager.prototype.Hero_sort = function (id) {
            var heroID = [];
            for (var nheroId in this._herolist) {
                var nIdx = Number(nheroId);
                heroID.push(nIdx);
            }
            function tsort(a, b) {
                var a_q = H52D_Framework.HeroConfig[a].quality;
                var b_q = H52D_Framework.HeroConfig[b].quality;
                if (a_q == b_q) {
                    return a > b ? 1 : -1;
                }
                return a_q > b_q ? -1 : 1;
            }
            heroID.sort(tsort);
            return heroID[id];
        };
        Object.defineProperty(HeroManager.prototype, "ActiveHeroNum", {
            /** 获取玩家可激活的英雄数量 */
            get: function () {
                var length = 0;
                for (var nHeroID in H52D_Framework.HeroConfig) {
                    if (!this.IsActive(nHeroID)) {
                        var hero = H52D_Framework.HeroConfig[nHeroID];
                        var heroID_item = hero.needItem;
                        var heroID_itemNum = hero.needNum;
                        var itemNum = H52D_Framework.BagManager.Instance.getItemNumber(heroID_item);
                        if (itemNum >= heroID_itemNum) {
                            length++;
                        }
                    }
                }
                return length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroManager.prototype, "StarHeroNum", {
            /**获取英雄可以进阶的数量 */
            get: function () {
                var num = 0;
                for (var nHeroID in H52D_Framework.HeroConfig) {
                    if (this.IsActive(nHeroID)) {
                        if (this.HeroIsStar(nHeroID)) {
                            num++;
                        }
                    }
                }
                return num;
            },
            enumerable: true,
            configurable: true
        });
        /**获取玩家英雄解锁数量 */
        HeroManager.prototype.GetHeroNum = function () {
            var _HasHeroList = [];
            for (var nHeroID in HeroManager.Instance.Herolist) {
                _HasHeroList.push(nHeroID);
            }
            return _HasHeroList.length;
        };
        /** 获取英雄实例 */
        HeroManager.prototype.GetHero = function (nHeroID) {
            return this._herolist[nHeroID];
        };
        Object.defineProperty(HeroManager.prototype, "Herowar", {
            get: function () {
                return this._heroWar;
            },
            set: function (value) {
                this._heroWar = value;
            },
            enumerable: true,
            configurable: true
        });
        /**激活英雄 */
        HeroManager.prototype.OpenHero = function (nHeroID) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqActivateHero", nHeroID);
        };
        /**英雄等级提升 */
        HeroManager.prototype.HeroLevlUp = function (index, how) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqHeroLevelUp", index, how);
        };
        /**进阶 */
        HeroManager.prototype.HeroStartUp = function (index) {
            var hero = this.Herolist[index];
            H52D_Framework.RemoteCall.Instance.Send("K_ReqHeroStarUp", index);
        };
        /**英雄布阵信息 */
        HeroManager.prototype.HeroWarInfo = function (herowar) {
            H52D_Framework.RemoteCall.Instance.Send("K_SaveBattleArray", herowar);
        };
        /** 通知英雄布阵信息 */
        HeroManager.prototype.C_SaveBattleArray = function (buf) {
            var _this = this;
            //if (this._loading) return;
            this._loading = true;
            var HeroWarList = buf[0];
            H52D_Framework.MasterPlayer.Instance.player.HeroWarList = HeroWarList;
            // 更新完阵容信息后刷新对话列表
            H52D_Framework.BubbleManager.Instance.UpdateAllBubbleID();
            //清除气泡
            H52D_Framework.Event.DispatchEvent("ClearBubble");
            H52D_Framework.HeroCardManager.Instance.AvatarInit(Laya.Handler.create(this, function () {
                _this._loading = false;
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.BEGIN_FIRE);
                if (buf[1]) {
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips("阵容保存成功！");
                }
            }));
        };
        /** 通知客户端激活成功 */
        HeroManager.prototype.C_ReqActivateHero = function (buf) {
            var heroid = buf[0];
            var a = true;
            var hero = H52D_Framework.HeroConfig[heroid];
            //hero.OwnIsTrue(a);            
            H52D_Framework.Event.DispatchEvent("ReqActivateHero");
            //重新生效武器属性
            H52D_Framework.EquipManager.Instance.AnewLoadAttribute();
            //激活成功后，打开分享
            H52D_Framework.ShareLogic.Instance.ShareHero(heroid);
        };
        /** 通知客户端升级成功*/
        HeroManager.prototype.C_ReqHeroLevelUp = function (buf) {
            H52D_Framework.Event.DispatchEvent("ReqHeroLevelUp");
        };
        HeroManager.prototype.C_HeroLevelUp = function (buf) {
            var heroid = buf[0];
            var lvnum = buf[1];
            var herobase = this._herolist[heroid];
            herobase.Level = lvnum;
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.MODIFYATTR, [heroid]);
        };
        /*** 通知客户端进阶成功 */
        HeroManager.prototype.C_ReqHeroStarUp = function (buf) {
            var heroid = buf[0];
            var herostat = buf[1];
            var hero = this._herolist[heroid];
            hero.Star = herostat;
            H52D_Framework.Event.DispatchEvent("ReqHeroStartUps");
            //调用方法 进阶
        };
        /** 主界面红点 */
        HeroManager.prototype.HeroMainRed = function () {
            var herolist = HeroManager.Instance.GetCfgHeroList();
            for (var Idex = 0; Idex < herolist.length; Idex++) {
                var nheroID = herolist[Idex];
                var hero = this.GetHero(nheroID);
                if (this._peck_show && this._peck_icon) {
                    return true;
                }
                var IsActive = HeroManager.Instance.IsActive(nheroID);
                if (IsActive) {
                    var Red_star = HeroManager.Instance.HeroIsStar(nheroID);
                    if (Red_star) {
                        return true;
                    }
                    var Red_lvup = HeroManager.Instance.HeroIsUp(nheroID);
                    if (Red_lvup) {
                        return true;
                    }
                }
                else {
                    var Red_open = HeroManager.Instance.HeroIstrue(nheroID);
                    if (Red_open) {
                        return true;
                    }
                }
            }
        };
        HeroManager.prototype.OpenView = function (nHeroID) {
            if (H52D_Framework.UIManager.Instance.IsHave("Hero_AlInfo", H52D_Framework.ViewUpRoot)) {
                H52D_Framework.UIManager.Instance.DestroyUI("Hero_AlInfo", [H52D_Framework.ViewUpRoot]);
            }
            H52D_Framework.UIManager.Instance.CreateUI("Hero_AlInfo", [H52D_Framework.ViewUpRoot, nHeroID]);
        };
        /**My_money 自己的金币 ，need_mone需要的金币  判断等级不足时 金币数量的颜色  */
        HeroManager.prototype.HeroUp_labelcolor = function (My_money, need_money) {
            var a = My_money >= need_money ? 1 : 2;
            return [this.MoneyColor[a], a];
        };
        /**同一等级限制下能升级的最大等级 */
        HeroManager.prototype.MaxLvUp = function (nHeroID, playlv) {
            var hero = HeroManager.Instance.GetHero(nHeroID);
            var type = H52D_Framework.HeroConfig[nHeroID].type;
            var lv = H52D_Framework.HeroUpgrateConfig[type][hero.Level].needPlayerLv;
            for (var Idex = hero.Level; Idex < Idex + 10; Idex++) {
                if (Idex > 300)
                    return 300;
                var lock = H52D_Framework.HeroUpgrateConfig[type][Idex].needPlayerLv;
                if (playlv < lock) {
                    if (lv < lock) {
                        return Idex - 1;
                    }
                }
            }
        };
        /**现有金币下能升的级数 */
        HeroManager.prototype.M_MaxLvup = function (nHeroID, play_money) {
            var hero = HeroManager.Instance.GetHero(nHeroID);
            var type = H52D_Framework.HeroConfig[nHeroID].type;
            var nx = H52D_Framework.HeroConfig[nHeroID].heroRatio;
            var lv = H52D_Framework.HeroUpgrateConfig[type][hero.Level].needPlayerLv;
            for (var Idex = hero.Level; Idex < Idex + 10; Idex++) {
                if (Idex > 300)
                    return 300;
                var needMoney = H52D_Framework.HeroUpgrateConfig[type][Idex].ConsumeGold - H52D_Framework.HeroUpgrateConfig[type][hero.Level].ConsumeGold;
                needMoney = needMoney * nx;
                if (play_money < needMoney) {
                    return Idex - 1;
                }
            }
        };
        HeroManager.prototype.HeroUp_ = function (nHeroID, nIdex, nx, nType) {
            var hero = this.GetHero(nHeroID);
        };
        return HeroManager;
    }());
    H52D_Framework.HeroManager = HeroManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeroManager.js.map
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**英雄站位  常万*/
    var HeroPosition = /** @class */ (function () {
        function HeroPosition() {
            /** 当前界面布阵信息 */
            this._PositionWar = {};
            this._HeroWar = {};
            this._bChange = false;
            this.bool = false;
            /**存放英雄的数组 */
            this._putHero = [];
            this.AddEvent();
        }
        HeroPosition.prototype.AddEvent = function () {
        };
        Object.defineProperty(HeroPosition, "Instance", {
            get: function () {
                if (HeroPosition._init == null) {
                    HeroPosition._init = new HeroPosition();
                }
                return HeroPosition._init;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroPosition.prototype, "bChange", {
            get: function () {
                return this._bChange;
            },
            set: function (value) {
                this._bChange = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroPosition.prototype, "Puthero", {
            set: function (value) {
                this._putHero = value;
            },
            enumerable: true,
            configurable: true
        });
        HeroPosition.prototype.Close = function () {
            this.bool = true;
        };
        /** 判断是否在阵容上 */
        HeroPosition.prototype.IsInWar = function (nHeroID) {
            return this._HeroWar[nHeroID] == null ? false : true;
        };
        /** 初始化阵容信息 */
        HeroPosition.prototype.InitPosInfo = function () {
            this._PositionWar = {};
            this._HeroWar = {};
            var HeroWarList = H52D_Framework.MasterPlayer.Instance.player.HeroWarList;
            for (var pos in HeroWarList) {
                var nHeroID = HeroWarList[pos];
                this.PutHero(pos, nHeroID);
            }
        };
        Object.defineProperty(HeroPosition.prototype, "PositionWar", {
            /** 当前布阵信息 */
            get: function () {
                return this._PositionWar;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroPosition.prototype, "HeroWar", {
            /** 当前英雄位置信息 */
            get: function () {
                return this._HeroWar;
            },
            enumerable: true,
            configurable: true
        });
        /**判断是否在保存的阵容上 */
        HeroPosition.prototype.IsInSaveWar = function (pos, nHeroID) {
            var InWar = false;
            var NoWar = false;
            var war = H52D_Framework.MasterPlayer.Instance.player.HeroWarList;
            for (var nIdx in war) {
                var a = war[nIdx];
                if (a == nHeroID) {
                    InWar = true;
                }
                else {
                    NoWar = false;
                }
            }
            return (InWar || NoWar) ? true : false;
        };
        /** 放置英雄 */
        HeroPosition.prototype.PutHero = function (nPos, nHeroID) {
            // 目标位置当前英雄ID
            var nLastHeroID = this._PositionWar[nPos];
            // 目标英雄上一个位置
            var nLastPos = this._HeroWar[nHeroID];
            if (nLastHeroID != null) {
                this._HeroWar[nLastHeroID] = nLastPos;
                this._bChange = true;
            }
            if (nLastPos != null) {
                this._PositionWar[nLastPos] = nLastHeroID;
                this._bChange = true;
            }
            this._PositionWar[nPos] = nHeroID;
            this._HeroWar[nHeroID] = nPos;
        };
        HeroPosition.prototype.HeroWar_Info = function () {
            for (var key in H52D_Framework.MasterPlayer.Instance.player.HeroWarList) {
                this._putHero.push(H52D_Framework.MasterPlayer.Instance.player.HeroWarList[key]);
            }
            return this._putHero;
        };
        return HeroPosition;
    }());
    H52D_Framework.HeroPosition = HeroPosition;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeroPosition.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /** 英雄类型*/
    var HeroType;
    (function (HeroType) {
    })(HeroType = H52D_Framework.HeroType || (H52D_Framework.HeroType = {}));
    /** 英雄技能*/
    var HeroSkill;
    (function (HeroSkill) {
    })(HeroSkill || (HeroSkill = {}));
    /**英雄信息  常万 */
    var HeroInfo = /** @class */ (function () {
        function HeroInfo() {
            /**普攻大招id */
            this.skillid = [];
            /**站位  -1 为上阵 */
            this.location = -1;
            /**解锁技能id */
            this.onPassiveID = [];
            /**属性被动技能id */
            this.attributeID = [];
            /**条件被动技能id */
            this.conditionsID = [];
            /**表  所有被动技能id列表 */
            this.passiveId = [];
            /**表  英雄解锁被动技能的等级列表*/
            this.passiveOnLevel = [];
            this.ToSpeed = 0;
        }
        /** 解析服务器数据 */
        HeroInfo.prototype.unpackData = function (tData) {
            this.nHeroID = tData[1];
            this._level = tData[2];
            this._star = tData[3];
            this.Init();
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.MODIFYATTR, Laya.Handler.create(this, this.LevelComplete));
        };
        Object.defineProperty(HeroInfo.prototype, "nHeroID", {
            get: function () {
                return this._id;
            },
            /** 配置ID */
            set: function (id) {
                this._cfg = H52D_Framework.HeroConfig[id];
                this._id = id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "heroCfg", {
            get: function () {
                return this._cfg;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "Level", {
            /** 英雄等级 */
            get: function () {
                return this._level;
            },
            /** 英雄等级 */
            set: function (level) {
                this._level = level;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "Star", {
            /***英雄星级 */
            get: function () {
                return this._star;
            },
            set: function (value) {
                this._star = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "OnPassiveID", {
            get: function () { return this.onPassiveID; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "attr", {
            /**基础属性表 */
            get: function () { return this._attr; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "HeadIcon", {
            /** 英雄头像 */
            get: function () {
                return "ui_icon/" + this._cfg.strIcon;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "HeroType", {
            get: function () { return this._cfg.type; },
            enumerable: true,
            configurable: true
        });
        /***获取英雄属性 */
        HeroInfo.prototype.GetHeroInfo = function (heroid) {
            var hero = H52D_Framework.HeroConfig[heroid];
            var info = H52D_Framework.HeroManager.Instance.GetHero(heroid);
            var base = H52D_Framework.HeroUpgrateConfig[hero.type][info.Level]["Attr"];
            return base;
        };
        Object.defineProperty(HeroInfo.prototype, "ModlePath", {
            get: function () { return this._cfg["strFacadeModel"]; },
            enumerable: true,
            configurable: true
        });
        HeroInfo.prototype.LevelComplete = function (id) {
            if (id == this.nHeroID) {
                this.Update();
                this.UpdatePassiveskill();
                // AttributePassiveManager.Instance.Update();
            }
        };
        Object.defineProperty(HeroInfo.prototype, "Upgrate", {
            /**升级表*/
            get: function () { return H52D_Framework.HeroUpgrateConfig[this.HeroType]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "Advance", {
            /**进阶表*/
            get: function () { return H52D_Framework.HeroAdvanceConfig[this._id]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "stationaryAttribute", {
            /**固定属性表*/
            get: function () { return H52D_Framework.HeroConfig[this._id]["stationaryAttribute"]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "Level_attr", {
            /**升级属性表 */
            get: function () { return this.Upgrate[this._level]["Attr"]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "Start_attr", {
            /**进阶属性表 */
            get: function () { return this.Advance[this._star]["Attr"]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroInfo.prototype, "heroRatio", {
            /**英雄系数 */
            get: function () { return this._cfg.heroRatio; },
            enumerable: true,
            configurable: true
        });
        /**初始化 */
        HeroInfo.prototype.Init = function () {
            this._attr = new H52D_Framework.Attribute();
            this.ReadAttr();
            this.InitPassiveID();
        };
        /**读表属性*/
        HeroInfo.prototype.ReadAttr = function () {
            /**表HP */
            var TabHP = 0;
            /**表伤害 */
            var TabDamage = 0;
            /**有英雄星级 */
            if (this._star != 0) {
                /**HP转化比 */
                var HpPer = 1 + this.Start_attr[1][2] / 10000;
                /**伤害转化比 */
                var DamagePer = 1 + this.Start_attr[2][2] / 10000;
                /**
                 * 最终属性 =  等级属性 * 系数 + 等及属性*加成比
                 */
                TabHP = this.Level_attr[1][2] * this.heroRatio * HpPer;
                TabDamage = this.Level_attr[2][2] * this.heroRatio * DamagePer;
            }
            /**没有英雄星级 */
            else {
                /**
                 * 最终属性 =  等级属性 * 英雄系数
                 */
                TabHP = this.Level_attr[1][2] * this.heroRatio;
                TabDamage = this.Level_attr[2][2] * this.heroRatio;
            }
            this.skillid = [this._cfg["heroAtt"], this._cfg["heroBigSkill"]];
            /**设置HP */
            this.attr.SetAttributeValue(1, H52D_Framework.eValueType.Base, TabHP);
            /**设置伤害 */
            this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, TabDamage);
            /**设置出手速度 */
            var speed = this.stationaryAttribute["1"]["2"];
            this.attr.SetAttributeValue(3, H52D_Framework.eValueType.Base, speed);
            /**设置暴击率 */
            var crit = this.stationaryAttribute["2"]["2"];
            this.attr.SetAttributeValue(4, H52D_Framework.eValueType.Base, crit);
            /**设置暴击倍率 */
            var ratio = this.stationaryAttribute["3"]["2"];
            this.attr.SetAttributeValue(5, H52D_Framework.eValueType.Base, ratio);
        };
        /**初始化被动技能id表 */
        HeroInfo.prototype.InitPassiveID = function () {
            for (var i = 1; i < H52D_Framework.GetTabLength(this._cfg.heroPassiveSkill); i++) {
                this.passiveId.push(this._cfg.heroPassiveSkill[i]["1"]);
                this.passiveOnLevel.push(this._cfg.heroPassiveSkill[i]["2"]);
            }
            this.onPassiveID = [];
            this.attributeID = [];
            this.conditionsID = [];
            for (var i = 0; i < this.passiveOnLevel.length; i++) {
                if (this._level >= this.passiveOnLevel[i]) {
                    this.onPassiveID.push(this.passiveId[i]);
                }
            }
            for (var i = 0; i < this.onPassiveID.length; i++) {
                var type_id = H52D_Framework.PassiveSkillConfig[this.onPassiveID[i]]["scriptID"];
                if (type_id == 1) {
                    this.attributeID.push(this.onPassiveID[i]);
                }
                else {
                    this.conditionsID.push(this.onPassiveID[i]);
                }
            }
        };
        /**更新属性 */
        HeroInfo.prototype.Update = function () {
            this.ReadAttr();
            this.UpdatePassiveskill();
        };
        /**更新被动属性技能*/
        HeroInfo.prototype.UpdatePassiveskill = function () {
            for (var i = 0; i < this.passiveOnLevel.length; i++) {
                if (this._level >= this.passiveOnLevel[i]) {
                    if (this.onPassiveID.length == 0) {
                        var id = this.passiveId[0];
                        H52D_Framework.AttributePassiveManager.Instance.OnLock(id, this.nHeroID);
                        this.onPassiveID.push(id);
                        this.attributeID.push(id);
                        if (this.onlockpassive) {
                            this.onlockpassive.run();
                        }
                        return;
                    }
                    var sid = this.passiveId[i];
                    var oid = this.onPassiveID[i];
                    if (sid != oid) {
                        var id = this.passiveId[i];
                        this.onPassiveID.push(id);
                        this.attributeID.push(id);
                        H52D_Framework.AttributePassiveManager.Instance.OnLock(id, this.nHeroID);
                        if (this.onlockpassive) {
                            this.onlockpassive.run();
                        }
                        return;
                    }
                }
            }
        };
        HeroInfo.prototype.OnLock = function () {
        };
        /**加成属性设置为0 以便不重复加成 */
        HeroInfo.prototype.UpdateAttrbute = function () {
            for (var i = 1; i <= 5; i++) {
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Percent, 0);
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Fixed, 0);
            }
            for (var i = 21; i <= 27; i++) {
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Percent, 0);
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Fixed, 0);
            }
        };
        /**设置第几排第几列 */
        HeroInfo.prototype.SetColOrow = function () {
            if (this.location == 0 || this.location == 1 || this.location == 2) {
                this.rowNum = 1;
            }
            else if (this.location == 3 || this.location == 4 || this.location == 5) {
                this.rowNum = 2;
            }
            else if (this.location == 6 || this.location == 7 || this.location == 8) {
                this.rowNum = 3;
            }
            if (this.location == 0 || this.location == 3 || this.location == 6) {
                this.colNum = 1;
            }
            else if (this.location == 1 || this.location == 4 || this.location == 7) {
                this.colNum = 2;
            }
            else if (this.location == 2 || this.location == 5 || this.location == 8) {
                this.colNum = 3;
            }
        };
        return HeroInfo;
    }());
    H52D_Framework.HeroInfo = HeroInfo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeroInfo.js.map
/*
* 新手引导
*/
var H52D_Framework;
(function (H52D_Framework) {
    var E_GuidanceStep;
    (function (E_GuidanceStep) {
        E_GuidanceStep[E_GuidanceStep["E_Empty"] = 0] = "E_Empty";
        E_GuidanceStep[E_GuidanceStep["E_First"] = 1] = "E_First";
        E_GuidanceStep[E_GuidanceStep["E_Second"] = 2] = "E_Second";
        E_GuidanceStep[E_GuidanceStep["E_Thirdly"] = 3] = "E_Thirdly";
        E_GuidanceStep[E_GuidanceStep["E_Fourthly"] = 4] = "E_Fourthly";
        E_GuidanceStep[E_GuidanceStep["E_Fifth"] = 5] = "E_Fifth";
        E_GuidanceStep[E_GuidanceStep["E_Sixth"] = 6] = "E_Sixth";
        E_GuidanceStep[E_GuidanceStep["E_Seventh"] = 7] = "E_Seventh";
        E_GuidanceStep[E_GuidanceStep["E_Eighth"] = 8] = "E_Eighth";
        E_GuidanceStep[E_GuidanceStep["E_Ninth"] = 9] = "E_Ninth";
        E_GuidanceStep[E_GuidanceStep["E_Aide"] = 10] = "E_Aide";
    })(E_GuidanceStep = H52D_Framework.E_GuidanceStep || (H52D_Framework.E_GuidanceStep = {}));
    var Guidance = /** @class */ (function () {
        function Guidance() {
            this._bWar = false;
            //剧情数据
            this._storyData = {};
            this._needGold = 0;
            this._bSecondGold = false;
            this._bProceeding = false;
            this._guidanceStep = E_GuidanceStep.E_First;
            //获取剧情数据
            for (var id in H52D_Framework.StoryConfig) {
                this._storyData[Number(id)] = H52D_Framework.StoryConfig[id];
            }
        }
        Object.defineProperty(Guidance, "Instance", {
            get: function () {
                if (Guidance._inst == null)
                    Guidance._inst = new Guidance();
                return Guidance._inst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Guidance.prototype, "bWar", {
            get: function () {
                return this._bWar;
            },
            set: function (b) {
                this._bWar = b;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Guidance.prototype, "bProceeding", {
            set: function (b) {
                this._bProceeding = b;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Guidance.prototype, "storyData", {
            get: function () {
                return this._storyData;
            },
            enumerable: true,
            configurable: true
        });
        /** 初始化*/
        Guidance.prototype.Initialize = function () {
            //剧情
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_NewPlayerInit', this);
            H52D_Framework.Event.RegistEvent('ShowMainView', Laya.Handler.create(this, this.Show));
        };
        Guidance.prototype.Show = function () {
            if (H52D_Framework.MasterPlayer.Instance.bNewbie) {
                Guidance.Instance.StartGuidance(E_GuidanceStep.E_Aide);
            }
        };
        /**新人登入播放剧情 */
        Guidance.prototype.C_NewPlayerInit = function () {
            H52D_Framework.UIManager.Instance.CreateUI("GuidanceView", [H52D_Framework.NewGuidRoot], Laya.Handler.create(this, function () {
                H52D_Framework.Event.DispatchEvent("ShowStory");
                H52D_Framework.Event.DispatchEvent("PanelClose");
            }));
        };
        Guidance.prototype.PlayStory = function (customsOrder) {
            if (this._storyData[customsOrder] == null)
                return;
            H52D_Framework.BattleManager.Instance.StopBattle();
            H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.story, customsOrder, true);
            H52D_Framework.UIManager.Instance.CreateUI("StoryView", [H52D_Framework.ViewStoryRoot, this._storyData[customsOrder]]);
        };
        /**开始引导 */
        Guidance.prototype.StartGuidance = function (guidanceStep) {
            var _this = this;
            if (guidanceStep === void 0) { guidanceStep = E_GuidanceStep.E_Empty; }
            this._bProceeding = true;
            this.SetGuidanceStep(guidanceStep);
            if (H52D_Framework.UIManager.Instance.IsHave("GuidanceView", H52D_Framework.NewGuidRoot)) {
                H52D_Framework.UIManager.Instance.DestroyUI("GuidanceView", [H52D_Framework.NewGuidRoot]);
            }
            H52D_Framework.UIManager.Instance.CreateUI("GuidanceView", [H52D_Framework.NewGuidRoot], Laya.Handler.create(this, function () {
                H52D_Framework.Event.DispatchEvent("PanelClose");
                if (guidanceStep == E_GuidanceStep.E_Empty) {
                    H52D_Framework.Event.DispatchEvent(H52D_Framework.BaseDefine.StartGuidanceEvent[_this._guidanceStep]);
                }
                else {
                    H52D_Framework.Event.DispatchEvent(H52D_Framework.BaseDefine.StartGuidanceEvent[guidanceStep]);
                }
            }));
        };
        Object.defineProperty(Guidance.prototype, "guidanceStep", {
            /**获取新手引导步骤 */
            get: function () {
                return this._guidanceStep;
            },
            enumerable: true,
            configurable: true
        });
        /**设置新手引导步骤 */
        Guidance.prototype.SetGuidanceStep = function (type) {
            this._guidanceStep = type;
        };
        Guidance.prototype.Trigger_SaveWar = function () {
            if (Guidance.Instance.guidanceStep == E_GuidanceStep.E_Fourthly ||
                Guidance.Instance.guidanceStep == E_GuidanceStep.E_Eighth) {
                H52D_Framework.UIManager.Instance.CreateUI("GuidanceView", [H52D_Framework.NewGuidRoot], Laya.Handler.create(this, function () { H52D_Framework.Event.DispatchEvent("EventSaveWar"); }));
            }
            if (Guidance.Instance.guidanceStep == E_GuidanceStep.E_Fourthly) {
                this._bWar = true;
            }
        };
        Object.defineProperty(Guidance.prototype, "needGold", {
            set: function (num) {
                this._needGold = num;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Guidance.prototype, "bSecondGold", {
            get: function () {
                return this._bSecondGold;
            },
            set: function (b) {
                this._bSecondGold = b;
            },
            enumerable: true,
            configurable: true
        });
        Guidance.prototype.Trigger_Aide = function () {
            this.StartGuidance(E_GuidanceStep.E_Aide);
        };
        Guidance.prototype.Trigger_Second = function () {
            if (this._bProceeding)
                return;
            var b = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.SecondGuidance);
            var goldNum = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold);
            var heroNum = H52D_Framework.HeroManager.Instance.GetHeroNum();
            if (!b) {
                this._needGold = H52D_Framework.HeroManager.Instance.GetheroUpMoney(0);
            }
            else if (H52D_Framework.HeroManager.Instance.GetHeroNum() > 1) {
                this._needGold = H52D_Framework.HeroManager.Instance.GetheroUpMoney(1);
            }
            if (goldNum >= this._needGold) {
                this._bSecondGold = false;
            }
            else {
                this._bSecondGold = true;
                return;
            }
            if (!b || this._bWar) {
                H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.SecondGuidance, true);
                this.StartGuidance(E_GuidanceStep.E_Second);
                this._bSecondGold = false;
            }
        };
        Guidance.prototype.Trigger_Thirdly = function () {
            if (this._bProceeding)
                return;
            var b = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.ThirdlyGuidance);
            if (H52D_Framework.HeroManager.Instance.ActiveHeroNum >= 1 && !b) {
                b = true;
                H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.ThirdlyGuidance, true);
                this.StartGuidance(E_GuidanceStep.E_Thirdly);
            }
        };
        Guidance.prototype.Trigger_Fourthly = function () {
            if (this._bProceeding)
                return;
            var b = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.FourthlyGuidance);
            if (Guidance.Instance.guidanceStep == E_GuidanceStep.E_Fourthly && !b) {
                H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.FourthlyGuidance, true);
                this.StartGuidance(E_GuidanceStep.E_Fourthly);
            }
        };
        Guidance.prototype.Trigger_Fifth = function () {
            if (this._bProceeding)
                return;
            var b = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.FifthGuidance);
            if (H52D_Framework.HeroManager.Instance.StarHeroNum >= 1 && !b) {
                H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.FifthGuidance, true);
                this.StartGuidance(E_GuidanceStep.E_Fifth);
            }
        };
        Guidance.prototype.Trigger_Sixth = function () {
            if (this._bProceeding)
                return;
            var b = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.SixthGuidance);
            var killLv = Number(H52D_Framework.RoleSkillUpConfig[1][1].needRoleLevel);
            var goldNum = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold);
            var needGoldNum = H52D_Framework.RoleSkillUpConfig[1][1].needGoldNum;
            if (H52D_Framework.MasterPlayer.Instance.player.Level >= killLv && !b && goldNum >= needGoldNum) {
                H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.SixthGuidance, true);
                this.StartGuidance(E_GuidanceStep.E_Sixth);
            }
        };
        Guidance.prototype.Trigger_Seventh = function () {
            if (this._bProceeding)
                return;
            var b1 = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.SeventhGuidance_1);
            var b2 = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.SeventhGuidance_2);
            var b3 = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.SeventhGuidance_3);
            if (!b1 || !b2 || !b3) {
                if (!b1) {
                    H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.SeventhGuidance_1, true);
                }
                else if (!b2) {
                    H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.SeventhGuidance_2, true);
                }
                else if (!b3) {
                    H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.SeventhGuidance_3, true);
                }
                this.StartGuidance(E_GuidanceStep.E_Seventh);
            }
        };
        Guidance.prototype.Trigger_Eighth = function () {
            if (this._bProceeding)
                return;
            var b = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.EighthGuidance);
            if (H52D_Framework.HeroManager.Instance.GetHeroNum() >= 10 && !b) {
                H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.EighthGuidance, true);
                this.StartGuidance(E_GuidanceStep.E_Eighth);
            }
        };
        Guidance.prototype.Trigger_Ninth = function () {
            if (this._bProceeding)
                return;
            var b = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.NinthGuidance);
            var needOrder = H52D_Framework.OpenGradeConfig[E_OpenGrade.PET]["Checkpoint"];
            var customsOrder = H52D_Framework.MasterPlayer.Instance.player.CunstLevel;
            var petnum = H52D_Framework.PetManager.Instance.OwnPetNum;
            if (customsOrder >= needOrder && !b && petnum >= 1) {
                H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.NinthGuidance, true);
                this.StartGuidance(E_GuidanceStep.E_Ninth);
            }
        };
        /**引导后检测是否有引导满足 */
        Guidance.prototype.TriggerAll = function () {
            this.Trigger_Thirdly();
            this.Trigger_Fourthly();
            this.Trigger_Fifth();
            this.Trigger_Sixth();
            this.Trigger_Eighth();
            this.Trigger_Ninth();
        };
        return Guidance;
    }());
    H52D_Framework.Guidance = Guidance;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Guidance.js.map
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**离线收益 管理 */
    var ProfManager = /** @class */ (function () {
        function ProfManager() {
        }
        ProfManager.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_AddLeaveAward", this);
        };
        Object.defineProperty(ProfManager, "Instance", {
            get: function () {
                if (this._instance == null) {
                    this._instance = new ProfManager();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        /**接收 离线收益 */
        ProfManager.prototype.C_AddLeaveAward = function (buf) {
            this._time = buf[0];
            this._reward = buf[1];
        };
        /**创建离线收益面板 */
        ProfManager.prototype.Add_Prof = function () {
            if (this._time > 60) { //如果离线时间大于了表里面的时间就创建面板
                H52D_Framework.UIManager.Instance.CreateUI("ProfitView", [H52D_Framework.ViewUpRoot]);
            }
        };
        Object.defineProperty(ProfManager.prototype, "Time", {
            get: function () {
                return this._time;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProfManager.prototype, "AddReward", {
            get: function () {
                return this._reward;
            },
            enumerable: true,
            configurable: true
        });
        return ProfManager;
    }());
    H52D_Framework.ProfManager = ProfManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ProfManager.js.map
/** 容器模块 */
var H52D_Framework;
(function (H52D_Framework) {
    var PackModule = /** @class */ (function () {
        function PackModule(sortFunc) {
            this._list = {};
            this._count = 0;
            this._dirty = false;
            this._array = [];
            this._sort = sortFunc;
        }
        /** 添加 */
        PackModule.prototype.Add = function (key, val) {
            if (this._list[key] == null) {
                this._count++;
            }
            this._list[key] = val;
            this._dirty = true;
        };
        /** 移除 */
        PackModule.prototype.Remove = function (key) {
            if (this._list[key] == null) {
                return;
            }
            delete this._list[key];
            this._count--;
            this._dirty = true;
        };
        Object.defineProperty(PackModule.prototype, "list", {
            /** 获取容器 */
            get: function () {
                return this._list;
            },
            enumerable: true,
            configurable: true
        });
        /** 获取值 */
        PackModule.prototype.getVal = function (key) {
            return this._list[key];
        };
        Object.defineProperty(PackModule.prototype, "count", {
            /** 获取数量 */
            get: function () {
                return this._count;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PackModule.prototype, "dirty", {
            /** 获取脏位 */
            get: function () {
                return this._dirty;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PackModule.prototype, "array", {
            /** 获取数组列表 */
            get: function () {
                if (this._dirty) {
                    this._array = [];
                    for (var key in this._list) {
                        var val = this._list[key];
                        this._array.push(val);
                    }
                    if (this._sort != null) {
                        this._array.sort(this._sort);
                    }
                    this._dirty = false;
                }
                return this._array;
            },
            enumerable: true,
            configurable: true
        });
        return PackModule;
    }());
    H52D_Framework.PackModule = PackModule;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PackModule.js.map
/**
* 时空法器类
*/
var H52D_Framework;
(function (H52D_Framework) {
    var EquipVo = /** @class */ (function () {
        /**
         * @param equipData 装备数据
         */
        function EquipVo(cfgId) {
            this._cfgId = cfgId; // 配置ID
            this._instId = -1; // 实例ID
            this._bLock = false; // 是否上锁
            this._cfgData = H52D_Framework.EquipConfig[this._cfgId];
        }
        Object.defineProperty(EquipVo.prototype, "instId", {
            /**装备实例ID */
            get: function () { return this._instId; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "cfgId", {
            /**装备配置ID */
            get: function () { return this._cfgId; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "bLock", {
            /**装备是否上锁 */
            get: function () { return this._bLock; },
            /**设置装备是否上锁 */
            set: function (b) { this._bLock = b; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "bNew", {
            /**是否新装备 */
            get: function () { return this._bNew; },
            /**设置是否新装备 */
            set: function (b) { this._bNew = b; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "equipGroup", {
            /**所属装备组 */
            get: function () { return this._cfgData.equipGroup; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "suitId", {
            /**归属套装ID */
            get: function () { return this._cfgData.suitId; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "equipLevel", {
            /**装备等级 */
            get: function () { return this._cfgData.equipLevel; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "baseAttribute", {
            /**基础属性 */
            get: function () { return this._cfgData.baseAttribute; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "composeNeedNum", {
            /**合成需要数量 */
            get: function () { return this._cfgData.composeNeedNum; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "sellNum", {
            /**出售钻石数量 */
            get: function () { return this._cfgData.sellNum; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "equipName", {
            /**装备名称 */
            get: function () {
                if (this._cfgData) {
                    return H52D_Framework.StringInfoConfig[this._cfgData.equipName] ? H52D_Framework.StringInfoConfig[this._cfgData.equipName].s : " ";
                }
                else {
                    return "时空法器";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "equipIcon", {
            /**装备图标 */
            get: function () {
                if (this._cfgData) {
                    return this._cfgData.equipIcon ? this._cfgData.equipIcon : "lw_icon_20.png";
                }
                else {
                    return "lw_icon_20.png";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "equipType", {
            /**装备类型 */
            get: function () {
                if (this._cfgData) {
                    return this._cfgData.equipType;
                }
                else {
                    return 1;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipVo.prototype, "equipColor", {
            /**装备品质 */
            get: function () {
                if (this._cfgData) {
                    return this._cfgData.equipColor;
                }
                else {
                    return 1;
                }
            },
            enumerable: true,
            configurable: true
        });
        /** 解析服务器数据 */
        EquipVo.prototype.unpackData = function (equipData) {
            // 接收数据
            this._instId = equipData[0]; // 实例ID
            this._bLock = equipData[1] == 1; // 是否上锁
            this._bNew = equipData[2] == 1; // 是否上锁
            this._cfgData = H52D_Framework.EquipConfig[this._cfgId];
        };
        return EquipVo;
    }());
    H52D_Framework.EquipVo = EquipVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=EquipVo.js.map
/**
* 时空法器套装管理器
*/
var H52D_Framework;
(function (H52D_Framework) {
    var EquipSuitManager = /** @class */ (function () {
        function EquipSuitManager() {
        }
        Object.defineProperty(EquipSuitManager, "Instance", {
            get: function () {
                if (EquipSuitManager._init == null) {
                    EquipSuitManager._init = new EquipSuitManager();
                }
                return EquipSuitManager._init;
            },
            enumerable: true,
            configurable: true
        });
        return EquipSuitManager;
    }());
    H52D_Framework.EquipSuitManager = EquipSuitManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=EquipSuitManager.js.map
/**
* 时空法器管理器
*/
var H52D_Framework;
(function (H52D_Framework) {
    var EquipManager = /** @class */ (function () {
        function EquipManager() {
            /**是否溢出 */
            this._IsOverflow = false;
            /**已拥有武器信息 */
            this._ownEquipList = {};
            /**已拥有武器库容器 */
            this._equipInstIdList = {};
            /**武器所属装备组ID映射表 */
            this._equipGroupList = {};
            /**当前佩戴的武器 */
            this._currentEquipList = {};
            /**当前佩戴的武器属性生效 */
            this._currentAttrributeList = {};
            /**当前套装属性生效列表 */
            this._suitAttrributeList = {};
            /**套装激活 */
            this._suitActivateList = {};
            /**套装配置type映射表 */
            this._suitCfgList = {};
            /**套装id、等级映射表*/
            this._suitMakeList = {};
            this.Init();
            /**初始化套装列表 */
            for (var suitId in H52D_Framework.SuitConfig) {
                var suit = H52D_Framework.SuitConfig[suitId];
                var suitColor = suit.suitColor;
                if (this._suitCfgList[suitColor] == null) {
                    this._suitCfgList[suitColor] = [];
                }
                this._suitCfgList[suitColor].push(Number(suitId));
            }
        }
        Object.defineProperty(EquipManager, "Instance", {
            get: function () {
                if (EquipManager._init == null) {
                    EquipManager._init = new EquipManager();
                }
                return EquipManager._init;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipManager.prototype, "CurrentAttrributeList", {
            get: function () { return this._currentAttrributeList; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EquipManager.prototype, "SuitAttrributeList", {
            get: function () { return this._suitAttrributeList; },
            enumerable: true,
            configurable: true
        });
        EquipManager.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_AddEquip", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_DelEquip", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqUseEquip", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqLockEquip", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqSellEquip", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SendEquipInfo", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqCompoundEquip", this);
        };
        EquipManager.prototype.Init = function () {
            var _a, _b;
            /**初始化已拥有武器信息 */
            this._ownEquipList = {};
            /**初始化武器库容器 */
            this._equipInstIdList = (_a = {},
                /** 手套背包 */
                _a[E_EquipType.eGlove] = new H52D_Framework.PackModule(),
                /** 星戒背包 */
                _a[E_EquipType.eRing] = new H52D_Framework.PackModule(),
                /** 卷轴背包 */
                _a[E_EquipType.eScroll] = new H52D_Framework.PackModule(),
                /** 容器背包 */
                _a[E_EquipType.eContainer] = new H52D_Framework.PackModule(),
                /** 灵背包 */
                _a[E_EquipType.eSoul] = new H52D_Framework.PackModule(),
                _a);
            /**初始化当前佩戴的武器 */
            this._currentEquipList = (_b = {},
                /** 佩戴手套Id */
                _b[E_EquipType.eGlove] = 0,
                /** 佩戴星戒Id */
                _b[E_EquipType.eRing] = 0,
                /** 佩戴卷轴Id */
                _b[E_EquipType.eScroll] = 0,
                /** 佩戴容器Id */
                _b[E_EquipType.eContainer] = 0,
                /** 佩戴灵Id */
                _b[E_EquipType.eSoul] = 0,
                _b);
            /***********************************/
            for (var cfgId in H52D_Framework.EquipConfig) {
                var cfg = H52D_Framework.EquipConfig[cfgId];
                var equipGroup = cfg.equipGroup;
                var equipLevel = cfg.equipLevel;
                if (this._suitMakeList[equipGroup] == null) {
                    this._suitMakeList[equipGroup] = {};
                }
                this._suitMakeList[equipGroup][equipLevel] = Number(cfgId);
            }
        };
        /**上线同步回调 */
        EquipManager.prototype.C_SendEquipInfo = function (buf) {
            this.Init();
            //装备实例列表
            var tEquipList = buf[0];
            //装备穿戴信息
            var tUseList = buf[1];
            //同步客户端装备实例列表
            for (var Id in tEquipList) {
                var instId = Number(Id);
                var info = tEquipList[Id];
                var cfgId = info[1];
                var bLock = info[2];
                var bNew = info[3];
                var bUse = info[4];
                var equip = new H52D_Framework.EquipVo(cfgId);
                this._ownEquipList[instId] = equip;
                equip.unpackData([instId, bLock, bNew]);
                var equipType = equip.equipType;
                var equipGroup = equip.equipGroup;
                this._equipInstIdList[equipType].Add(instId, equip);
                if (this._equipGroupList[equipGroup] == null) {
                    this._equipGroupList[equipGroup] = new H52D_Framework.PackModule();
                }
                this._equipGroupList[equipGroup].Add(instId, equip);
                var suitId = equip.suitId;
                this.SuitOnceActivate(suitId, equipGroup, true);
                //同步客户端当前佩戴的武器
                if (bUse != null && bUse == 1) {
                    this._currentEquipList[equipType] = instId;
                    this.LoadAttribute(instId);
                }
            }
            this._IsOverflow = this.GetEquipNum() == H52D_Framework.GameParamConfig.EquipMaxNum;
        };
        /**添加装备回调 */
        EquipManager.prototype.C_AddEquip = function (buf) {
            //装备实例ID
            var instId = buf[0];
            //装备信息
            var tUseList = buf[1];
            //装备配置ID
            var cfgId = tUseList[1];
            //装备是否上锁			
            var bLock = tUseList[2];
            //装备是否new		
            var bNew = tUseList[3];
            var equip = new H52D_Framework.EquipVo(cfgId);
            equip.unpackData([instId, bLock, bNew]);
            this._IsOverflow = false;
            this._ownEquipList[instId] = equip;
            var equipType = equip.equipType;
            var equipGroup = equip.equipGroup;
            var suitId = equip.suitId;
            this._equipInstIdList[equipType].Add(instId, equip);
            if (this._equipGroupList[equipGroup] == null) {
                this._equipGroupList[equipGroup] = new H52D_Framework.PackModule();
            }
            this._equipGroupList[equipGroup].Add(instId, equip);
            this.SuitOnceActivate(suitId, equipGroup, true);
            H52D_Framework.Event.DispatchEvent("ShowRedPoint", E_OpenGrade.EQUIP);
        };
        /**删除装备回调 */
        EquipManager.prototype.C_DelEquip = function (buf) {
            //装备实例ID
            var instId = buf[0];
            var equip = this._ownEquipList[instId];
            var cfgId = equip.cfgId;
            var equipType = equip.equipType;
            var equipGroup = equip.equipGroup;
            var suitId = equip.suitId;
            //先卸载装备属性
            if (instId == this._currentEquipList[equipType]) {
                this.UnLoadAttribute(instId);
            }
            if (this.IsSuitActivate && this._equipGroupList[equipGroup].count == 1) {
                this.UnLoadSuitAttribute(suitId);
            }
            if (this._ownEquipList[instId] != null) {
                delete this._ownEquipList[instId];
            }
            this._equipInstIdList[equipType].Remove(instId);
            this._equipGroupList[equipGroup].Remove(instId);
            if (this._equipGroupList[equipGroup].count == 0) {
                this.SuitOnceActivate(suitId, equipGroup, false);
            }
            this._IsOverflow = true;
            H52D_Framework.Event.DispatchEvent("DeleShow");
        };
        /**出售装备获得奖励回调 */
        EquipManager.prototype.C_ReqSellEquip = function (buf) {
            //奖励
            var tAllAward = buf[0];
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, tAllAward]);
        };
        /**请求穿戴装备回调 */
        EquipManager.prototype.C_ReqUseEquip = function (buf) {
            //装备类型
            var equipType = buf[0];
            //装备实例ID
            var instId = buf[1];
            //先卸载装备属性
            this.UnLoadAttribute(this._currentEquipList[equipType]);
            //再装载装备属性
            this._currentEquipList[equipType] = instId;
            this.LoadAttribute(instId);
            H52D_Framework.Event.DispatchEvent("Puton", [instId]);
            H52D_Framework.Event.DispatchEvent("ShowRedPoint", E_OpenGrade.EQUIP);
        };
        /**请求设置锁头回调 */
        EquipManager.prototype.C_ReqLockEquip = function (buf) {
            //装备实例ID
            var nInstID = buf[0];
            //是否锁定 0 or null = false : 1 = true
            var bLock = buf[1];
            this._ownEquipList[nInstID].bLock = bLock;
            H52D_Framework.Event.DispatchEvent("Setlock", [bLock]);
        };
        /**合成装备回调 */
        EquipManager.prototype.C_ReqCompoundEquip = function (buf) {
            var _a;
            var equipId = buf[0];
            var nameId = H52D_Framework.EquipConfig[equipId].equipName;
            var name = H52D_Framework.StringInfoConfig[nameId].s;
            var suitId = H52D_Framework.EquipConfig[equipId].suitId;
            var equipType = H52D_Framework.EquipConfig[equipId].equipType;
            var tAllAward = { 2: (_a = {}, _a[equipId] = 1, _a) };
            var equipGroup = H52D_Framework.EquipConfig[equipId].equipGroup;
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, tAllAward], Laya.Handler.create(this, function () {
                var str = H52D_Framework.Format(H52D_Framework.SysPromptConfig[30031].strPromptInfo, H52D_Framework.GetHtmlStrByColor(name, H52D_Framework.BaseDefine.EquipQualityColor[H52D_Framework.EquipConfig[equipId].equipColor]));
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
            }));
            //this.SuitOnceActivate(suitId, equipGroup, true);
            H52D_Framework.Event.DispatchEvent("updatelist_equip", [equipId]);
        };
        /*******************************************************/
        /**请求穿戴装备 */
        EquipManager.prototype.K_ReqUseEquip = function (instId) {
            H52D_Framework.RemoteCall.Instance.Send('K_ReqUseEquip', instId);
        };
        /**请求设置锁头 */
        EquipManager.prototype.K_ReqLockEquip = function (instId, bLock) {
            var b = bLock ? 1 : 0;
            H52D_Framework.RemoteCall.Instance.Send('K_ReqLockEquip', instId, b);
        };
        /**出售装备 */
        EquipManager.prototype.K_ReqSellEquip = function (instId) {
            H52D_Framework.RemoteCall.Instance.Send('K_ReqSellEquip', instId);
        };
        /**查看装备消除New */
        EquipManager.prototype.K_ReqLookEquip = function (instId) {
            H52D_Framework.RemoteCall.Instance.Send('K_ReqLookEquip', instId);
            this._ownEquipList[instId].bNew = false;
        };
        /**请求合成装备 */
        EquipManager.prototype.K_ReqCompoundEquip = function (equipGroup) {
            //let equipLevel: number = CustomsManager.Instance.CustomsVo.composeEquipLevel;
            this._IsOverflow = true;
            H52D_Framework.RemoteCall.Instance.Send('K_ReqCompoundEquip', equipGroup);
        };
        /*******************************************************/
        /**获取已拥有武器数量 */
        EquipManager.prototype.GetEquipNum = function () {
            return H52D_Framework.GetTabLength(this._ownEquipList);
        };
        /**获取已拥有武器信息 */
        EquipManager.prototype.GetEquipByInstId = function (instId) {
            return this._ownEquipList[instId];
        };
        /**获取武器库容器 */
        EquipManager.prototype.GetEquipByType = function (type) {
            return this._equipInstIdList[type];
        };
        /**获取当前佩戴的武器 */
        EquipManager.prototype.GetCurrentEquipByType = function (type) {
            return this._currentEquipList[type];
        };
        /**获取套装列表 */
        EquipManager.prototype.GetSuitCfgListByType = function (type) {
            return this._suitCfgList[type];
        };
        /**获取装备ID */
        EquipManager.prototype.GetEquipIdBySuitId = function (suitId) {
            var equipLevel = H52D_Framework.CustomsManager.Instance.CustomsVo.composeEquipLevel;
            return this._suitMakeList[suitId][equipLevel];
        };
        Object.defineProperty(EquipManager.prototype, "IsOverflow", {
            /**装备是否溢出 */
            get: function () {
                return this._IsOverflow;
            },
            enumerable: true,
            configurable: true
        });
        /**套装单个内容是否激活 */
        EquipManager.prototype.IsSuitOnceActivate = function (groupId) {
            if (this._equipGroupList[groupId] == null) {
                return false;
            }
            return this._equipGroupList[groupId].count != 0;
        };
        /**套装是否激活 */
        EquipManager.prototype.IsSuitActivate = function (suitId) {
            var suit = this._suitActivateList[suitId];
            if (suit == null) {
                return false;
            }
            for (var groupId in suit) {
                if (suit[groupId] == false) {
                    return false;
                }
            }
            return H52D_Framework.GetTabLength(suit) == 5;
        };
        /**套装单个激活 */
        EquipManager.prototype.SuitOnceActivate = function (suitId, groupId, bActivate) {
            if (suitId == 0)
                return;
            if (this._suitActivateList[suitId] == null) {
                this._suitActivateList[suitId] = {};
            }
            this._suitActivateList[suitId][groupId] = bActivate;
            if (this.IsSuitActivate(suitId) == true) {
                this.UnLoadSuitAttribute(suitId);
                this.LoadSuitAttribute(suitId);
            }
        };
        /**某套装单个激活件数 */
        EquipManager.prototype.GetSuitOnceActivateNum = function (suitId) {
            var suitActivate = this._suitActivateList[suitId];
            var num = 0;
            for (var key in suitActivate) {
                var b = suitActivate[key];
                if (b) {
                    num++;
                }
            }
            return num;
        };
        /**重新生成武器属性 */
        EquipManager.prototype.AnewLoadAttribute = function () {
            for (var type in this._currentAttrributeList) {
                var arr = this._currentAttrributeList[type];
                for (var i in arr) {
                    arr[i].OnEffect();
                }
            }
            for (var suitId in this._suitAttrributeList) {
                var arr = this._suitAttrributeList[suitId];
                for (var i in arr) {
                    arr[i].OnEffect();
                }
            }
        };
        /**装载装备属性到角色 */
        EquipManager.prototype.LoadAttribute = function (instId) {
            if (instId == 0)
                return;
            var equip = this._ownEquipList[instId];
            var equipType = equip.equipType;
            var baseAttribute = equip.baseAttribute;
            for (var baseId in baseAttribute) {
                var attribute = baseAttribute[baseId];
                var attrributeEquipment = new H52D_Framework.AttrributeEquipment(attribute);
                this._currentAttrributeList[equipType];
                if (this._currentAttrributeList[equipType] == null) {
                    this._currentAttrributeList[equipType] = [];
                }
                attrributeEquipment.OnEffect();
                this._currentAttrributeList[equipType].push(attrributeEquipment);
            }
        };
        /**卸载装备属性 */
        EquipManager.prototype.UnLoadAttribute = function (instId) {
            if (instId == 0)
                return;
            var equip = this._ownEquipList[instId];
            var equipType = equip.equipType;
            var attrributeList = this._currentAttrributeList[equipType];
            for (var id in attrributeList) {
                attrributeList[id].Destroy();
            }
            this._currentAttrributeList[equipType] = [];
        };
        /**装载套装属性到角色 */
        EquipManager.prototype.LoadSuitAttribute = function (suitId) {
            var suit = H52D_Framework.SuitConfig[suitId];
            var suitAttribute = suit.suitAttribute;
            for (var baseId in suitAttribute) {
                var attribute = suitAttribute[baseId];
                var attrributeEquipment = new H52D_Framework.AttrributeEquipment(attribute);
                this._suitAttrributeList[suitId];
                if (this._suitAttrributeList[suitId] == null) {
                    this._suitAttrributeList[suitId] = [];
                }
                attrributeEquipment.OnEffect();
                this._suitAttrributeList[suitId].push(attrributeEquipment);
            }
        };
        /**卸载套装属性 */
        EquipManager.prototype.UnLoadSuitAttribute = function (suitId) {
            // if (instId == 0) return;
            // let equip = this._ownEquipList[instId];
            // let suitId = equip.suitId;
            if (suitId == 0)
                return;
            var attrributeList = this._suitAttrributeList[suitId];
            if (attrributeList == [])
                return;
            for (var id in attrributeList) {
                attrributeList[id].Destroy();
            }
            this._suitAttrributeList[suitId] = [];
        };
        /**控制主界面红点` */
        EquipManager.prototype.IsMainShowRed = function () {
            for (var instId in this._ownEquipList) {
                var equip = this._ownEquipList[instId];
                if (equip.bNew) {
                    return true;
                }
            }
            return false;
        };
        return EquipManager;
    }());
    H52D_Framework.EquipManager = EquipManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=EquipManager.js.map
/** 特效管理类 */
var H52D_Framework;
(function (H52D_Framework) {
    var EffectManager = /** @class */ (function () {
        function EffectManager() {
            //打开掉落函数，多出调用，静态私有
            // private static _droping: boolean;
            //一个金币多少钱
            this.min = 1;
            this.max = 9;
            this.box = null;
            //-----------------------------------------屏幕震动效果-----------------------------------------
            this._shockTime = 0;
            this._shockTotalTime = 0;
            this.nShakeTime = 0;
        }
        Object.defineProperty(EffectManager, "Instance", {
            get: function () {
                if (EffectManager._inst == null) {
                    EffectManager._inst = new EffectManager();
                }
                return EffectManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        EffectManager.prototype.Initialize = function () {
        };
        /** 增加物品 */
        EffectManager.prototype.AddItem = function (itemId, itemNum) {
            if (itemId == H52D_Framework.BaseDefine.ItemIdGold) { //金币
                // EffectManager._droping = true;
                var location_1 = H52D_Framework.BattleManager.Instance.LastMosterLocation;
                if (!location_1.x)
                    return;
                // 设定多少个金币
                var howMoney = this.min + Math.floor(Math.random() * (this.max - this.min + 1));
                var cost = Math.round(itemNum / howMoney);
                var lastCost = itemNum % cost;
                if (lastCost < (cost >> 1)) {
                    lastCost += cost;
                }
                else {
                    howMoney++;
                }
                for (var i = 0; i < howMoney; i++) {
                    H52D_Framework.DropManager.Instance.AddDropCoin(location_1.x, 500, i ? cost : lastCost, 400);
                }
            }
            if (itemId == H52D_Framework.BaseDefine.ItemIdDiamonds) { //钻石
                this.ShowDiamonds(itemNum);
            }
            if (itemId == H52D_Framework.BaseDefine.ItemIdExperience) { //经验
                this.ShowExp(itemNum);
            }
        };
        /** 增加宝箱 */
        EffectManager.prototype.AddBox = function (type, itemId, itemNum) {
            if (this.box == null) {
                this.box = {};
            }
            if (this.box[type] == null) {
                this.box[type] = {};
            }
            this.box[type][itemId] = itemNum;
        };
        EffectManager.prototype.SendBox = function () {
            if (this.box == null)
                return;
            var location = H52D_Framework.BattleManager.Instance.LastMosterLocation;
            H52D_Framework.DropManager.Instance.AddDropBox(location.x, location.y - 120, this.box);
            this.box = null;
        };
        EffectManager.prototype.ShowGold = function (goldNum) {
        };
        EffectManager.prototype.ShowDiamonds = function (diamondsNum) {
            H52D_Framework.Tick.Once(3000, this, function () {
            });
        };
        EffectManager.prototype.ShowExp = function (expNum) {
            H52D_Framework.Tick.Once(3000, this, function () {
            });
        };
        /**
         * 屏幕震动
         * @param time 震动时间
         * @param bNew 新手引导特殊震动
         * @param nShakeTime 震动次数
         */
        EffectManager.prototype.StartShock = function (time, bNew, nShakeTime) {
            H52D_Framework.Tick.Clear(this, this.UpdateShock);
            if (!nShakeTime) {
                this.nShakeTime = 3;
            }
            else {
                this.nShakeTime = nShakeTime;
            }
            H52D_Framework.Tick.FrameLoop(1, this, this.UpdateShock, [bNew]);
            this._shockTotalTime = this._shockTime = (time / 1000) || 0.3;
        };
        /**处理震屏效果 */
        EffectManager.prototype.UpdateShock = function (bNew) {
            if (this._shockTime > 0) {
                // 震动次数
                //let nShakeTime: number = 3;
                var nRate = 1 - this._shockTime / this._shockTotalTime;
                // 求震动偏移
                // y = ( 1 - t ) * sin( t * shockTime * x * 2PI )
                var nOffX = nRate * this.nShakeTime * Math.PI * 2;
                var nOffset = (1 - nRate) * Math.sin(nOffX);
                // 屏幕震动最大偏移量
                nOffset = nOffset * 10;
                if (bNew == true) {
                    H52D_Framework.NewGuidRoot.centerX = nOffset;
                    H52D_Framework.NewGuidRoot.centerY = nOffset;
                    H52D_Framework.ViewStoryRoot.centerX = nOffset;
                    H52D_Framework.ViewStoryRoot.centerY = nOffset;
                }
                else {
                    H52D_Framework.SceneRoot.centerX = nOffset;
                    H52D_Framework.SceneRoot.centerY = nOffset;
                }
                //AvatarRoot.centerX = nOffset;
                //AvatarRoot.centerY = nOffset;
                this._shockTime -= H52D_Framework.Time.deltaTime / 1000;
            }
            else {
                this._shockTime = 0;
                if (bNew == true) {
                    H52D_Framework.NewGuidRoot.centerX = 0;
                    H52D_Framework.NewGuidRoot.centerY = 0;
                }
                else {
                    H52D_Framework.SceneRoot.centerX = 0;
                    H52D_Framework.SceneRoot.centerY = 0;
                }
                //AvatarRoot.centerX = 0;
                //AvatarRoot.centerY = 0;
                H52D_Framework.Tick.Clear(this, this.UpdateShock);
            }
        };
        /**
      * 屏幕震动
      * @param time 震动时间
      * @param bNew 新手引导特殊震动
      */
        EffectManager.prototype.PStartShock = function (time, nShakeTime) {
            H52D_Framework.Tick.Clear(this, this.UpdateShock);
            if (!nShakeTime) {
                this.nShakeTime = 3;
            }
            else {
                this.nShakeTime = nShakeTime;
            }
            H52D_Framework.Tick.FrameLoop(1, this, this.PUpdateShock);
            this._shockTotalTime = this._shockTime = (time / 1000) || 0.3;
        };
        // private nShakeTime:number = 0;
        /**处理震屏效果 */
        EffectManager.prototype.PUpdateShock = function () {
            if (this._shockTime > 0) {
                // 震动次数
                //let nShakeTime: number = 3;
                var nRate = 1 - this._shockTime / this._shockTotalTime;
                // 求震动偏移
                // y = ( 1 - t ) * sin( t * shockTime * x * 2PI )
                var nOffX = nRate * this.nShakeTime * Math.PI * 2;
                var nOffset = (1 - nRate) * Math.sin(nOffX);
                // 屏幕震动最大偏移量
                nOffset = nOffset * 10;
                H52D_Framework.SceneRoot.centerX = nOffset;
                H52D_Framework.SceneRoot.centerY = nOffset;
                //AvatarRoot.centerX = nOffset;
                //AvatarRoot.centerY = nOffset;
                this._shockTime -= H52D_Framework.Time.deltaTime / 1000;
            }
            else {
                this._shockTime = 0;
                H52D_Framework.SceneRoot.centerX = 0;
                H52D_Framework.SceneRoot.centerY = 0;
                //AvatarRoot.centerX = 0;
                //AvatarRoot.centerY = 0;
                H52D_Framework.Tick.Clear(this, this.UpdateShock);
            }
        };
        return EffectManager;
    }());
    H52D_Framework.EffectManager = EffectManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=EffectManager.js.map
/** 掉落管理类 */
var H52D_Framework;
(function (H52D_Framework) {
    var DropManager = /** @class */ (function () {
        function DropManager() {
            this._arrayCoinCls = [];
            this._arrayBoxCls = [];
        }
        Object.defineProperty(DropManager, "Instance", {
            get: function () {
                if (DropManager._inst == null) {
                    DropManager._inst = new DropManager();
                }
                return DropManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        /** 创建金币
        * @param nX 位置
        * @param nY 位置
        * @param nMoney  金币卸载量
        * @param callback 金币消失回调
        */
        DropManager.prototype.AddDropCoin = function (nX, nY, nMoney, speed_x) {
            var cls = new H52D_Framework.DropCoin(nX, nY, nMoney, speed_x);
            this._arrayCoinCls.push(cls);
        };
        /** 设置附近胡金币全部飞回 */
        DropManager.prototype.SearchCoinFlyback = function (nX, nY) {
            for (var i = 0; i < this._arrayCoinCls.length; i++) {
                var coin = this._arrayCoinCls[i];
                if (coin.IsCanFlyback()) {
                    // 求是否在范围
                    var nDesX = Math.abs(nX - coin.GetPosX());
                    if (nDesX < 64) {
                        this._arrayCoinCls[i].BeginFlyBack();
                    }
                }
            }
        };
        /** 创建宝箱
        * @param nX 位置
        * @param nY 位置
        * @param nid 宝箱ID
        * @param callback 金币消失回调
        */
        DropManager.prototype.AddDropBox = function (nX, nY, nbox, callback) {
            var cls = new H52D_Framework.DropBox(nX, nY, nbox, callback);
            this._arrayBoxCls.push(cls);
        };
        /** 销毁掉落物 */
        DropManager.prototype.DeleteCoin = function (cls) {
            for (var i = 0; i < this._arrayCoinCls.length; i++) {
                if (this._arrayCoinCls[i] == cls) {
                    this._arrayCoinCls[i].Destroy();
                    this._arrayCoinCls[i] = null;
                    this._arrayCoinCls.splice(i, 1);
                    return;
                }
            }
        };
        /** 销毁掉宝箱 */
        DropManager.prototype.DeleteBox = function (cls) {
            for (var i = 0; i < this._arrayBoxCls.length; i++) {
                if (this._arrayBoxCls[i] == cls) {
                    this._arrayBoxCls[i].Destroy();
                    this._arrayBoxCls[i] = null;
                    this._arrayBoxCls.splice(i, 1);
                    return;
                }
            }
        };
        /** 清空所有金币 */
        DropManager.prototype.Destroy = function () {
            for (var i = 0; i < this._arrayCoinCls.length; i++) {
                if (this._arrayCoinCls[i]) {
                    this._arrayCoinCls[i].Destroy();
                    this._arrayCoinCls[i] = null;
                }
            }
            this._arrayCoinCls = [];
        };
        return DropManager;
    }());
    H52D_Framework.DropManager = DropManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DropManager.js.map
/** 掉落金币类 */
var H52D_Framework;
(function (H52D_Framework) {
    // 金币状态
    var DropCoinState;
    (function (DropCoinState) {
        DropCoinState[DropCoinState["none"] = -1] = "none";
        DropCoinState[DropCoinState["down"] = 0] = "down";
        DropCoinState[DropCoinState["stop"] = 1] = "stop";
        DropCoinState[DropCoinState["flyback"] = 2] = "flyback";
    })(DropCoinState || (DropCoinState = {}));
    ;
    // 金币飞回的贝塞尔方向
    var DropCoinFlyDir;
    (function (DropCoinFlyDir) {
        DropCoinFlyDir[DropCoinFlyDir["left"] = 0] = "left";
        DropCoinFlyDir[DropCoinFlyDir["right"] = 1] = "right";
    })(DropCoinFlyDir || (DropCoinFlyDir = {}));
    var DropCoin = /** @class */ (function () {
        /** 创建金币
        * @param nX 位置
        * @param nY 位置
        * @param nMoney  金币卸载量
        * @param callback 金币消失回调
        */
        function DropCoin(nX, nY, nMoney, speed_x) {
            /** 金币停留时间 */
            this.RESIDENCE = 8000;
            this._AccSpdY = 1800; // 重力加速度
            // 初始化状态
            this._nMoney = nMoney;
            this._eState = DropCoinState.down;
            this._coinImage = new Laya.Image();
            this._coinImage.skin = "ui_common/icon-jinbi.png";
            this._coinImage.anchorX = this._coinImage.anchorY = 0.5;
            this._coinImage.scaleX = this._coinImage.scaleY = 0.6;
            this._ImgH = this._coinImage.displayHeight;
            // 居中显示
            this._coinImage.x = this._PosX = nX;
            this._coinImage.y = this._PosY = nY;
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.DROP_ADD_CHILD, [this._coinImage]);
            // 初始化初速度
            this._SpeedX = (Math.random() - 0.5) * speed_x;
            this._SpeedY = -Math.random() * 1000;
            //飞回的速度
            this._FlySpdY = 400 + (300 * Math.random() >> 0);
            if (this._SpeedX > 0) {
                this._FlyDir = DropCoinFlyDir.right;
            }
            else {
                this._FlyDir = DropCoinFlyDir.left;
            }
            H52D_Framework.Tick.FrameLoop(1, this, this.Update);
        }
        DropCoin.prototype.OnClick = function () {
            // 鼠标点击即飞回
            if (this._eState == DropCoinState.stop) {
                if (H52D_Framework.MasterPlayer.Instance.player.Sound && !H52D_Framework.BattleManager.Instance.bStopBattle) {
                    H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/gold_sound.mp3");
                }
                this.BeginFlyBack();
                // 让周围的金币也飞回
                H52D_Framework.DropManager.Instance.SearchCoinFlyback(this._PosX, this._PosY);
            }
        };
        DropCoin.prototype.IsCanFlyback = function () {
            return (this._eState == DropCoinState.stop);
        };
        DropCoin.prototype.GetPosX = function () {
            return this._PosX;
        };
        DropCoin.prototype.GetPosY = function () {
            return this._PosY;
        };
        DropCoin.prototype.Update = function () {
            // 下落
            if (this._eState == DropCoinState.down) {
                var t = H52D_Framework.Time.deltaTime / 1000;
                // s = v * t
                var s_x = this._SpeedX * t;
                // s = v * t + a * t^2 * 0.5
                var s_y = this._SpeedY * t + this._AccSpdY * t * t * 0.5;
                // v = v + a * t
                this._SpeedY = this._SpeedY + this._AccSpdY * t;
                this._coinImage.x = this._PosX = this._PosX + s_x;
                this._coinImage.y = this._PosY = this._PosY + s_y;
                this._coinImage.rotation += this._SpeedX * 0.1;
                // 落到地上了
                if (this._PosY + this._ImgH > H52D_Framework.FloorHeight()) {
                    this._coinImage.y = this._PosY = H52D_Framework.FloorHeight() - this._ImgH;
                    // 反弹，如果速度不够，就切换成静止状态
                    this._SpeedY = -this._SpeedY * 0.25;
                    this._SpeedX = this._SpeedX * 0.5;
                    if (this._SpeedY > -10) {
                        this._SpeedY = 0;
                        this._stopTime = 0;
                        this._eState = DropCoinState.stop;
                    }
                    if (H52D_Framework.MasterPlayer.Instance.player.Sound && !H52D_Framework.BattleManager.Instance.bStopBattle) {
                        H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/gold_sound.mp3");
                    }
                }
            }
            // 停止状态
            else if (this._eState == DropCoinState.stop) {
                this._stopTime += H52D_Framework.Time.deltaTime;
                if (this._stopTime > this.RESIDENCE) { // 时间到了，要飞回
                    this.BeginFlyBack();
                }
            }
            // 飞回，简化模拟一阶贝塞尔曲线
            else if (this._eState == DropCoinState.flyback) {
                var t = H52D_Framework.Time.deltaTime / 1000;
                this._FlybackTime = this._FlybackTime - t;
                if (this._FlybackTime < 0) {
                    // 完成回调
                    this.Complete();
                    // 删除
                    H52D_Framework.DropManager.Instance.DeleteCoin(this);
                }
                else {
                    // 向上移动
                    var s_y = this._FlySpdY * t;
                    // 水平移动
                    var s_x = this._SpeedX * t;
                    // 贝塞尔偏移
                    // f(x) = a * sin( sqrt( x ) )     ( 0 < x < PI/b )
                    var b = 1;
                    this._FlyBesarX = this._FlyBesarX + this._FlyBesarXSpeed * t;
                    this._PosX = this._PosX - s_x;
                    this._coinImage.x = this._PosX + this._FlyRandA * Math.sin(b * this._FlyBesarX * this._FlyBesarX);
                    this._coinImage.y = this._PosY = this._PosY - s_y;
                }
            }
        };
        // 启动飞回
        DropCoin.prototype.BeginFlyBack = function () {
            if (H52D_Framework.MasterPlayer.Instance.player.Sound && !H52D_Framework.BattleManager.Instance.bStopBattle) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/gold_sound.mp3");
            }
            H52D_Framework.Floating.DamageText(this._nMoney.toString(), SkinEnum.RewardCoin, this.GetPosX(), this.GetPosY() - (10 + Math.random() * 20 >> 0), false, 120);
            // 切换飞回状态
            this._eState = DropCoinState.flyback;
            var pos = H52D_Framework.CoinFlyBackPos;
            // 计算简化模拟一阶贝塞尔曲线所需要的参数
            this._FlybackTime = (this._PosY - H52D_Framework.CoinFlyBackPos[1]) / this._FlySpdY;
            // X轴的标准速度
            this._SpeedX = (this._PosX - H52D_Framework.CoinFlyBackPos[0]) / this._FlybackTime;
            // 求贝塞尔参数
            // f(x) = a * sin( sqrt( x ) )     ( 0 < x < PI/b )
            this._FlyRandA = (Math.random() * 290 >> 0) + 10;
            var b = 1;
            if (this._FlyDir == DropCoinFlyDir.left) {
                this._FlyRandA = -this._FlyRandA;
            }
            this._FlyBesarX = 0;
            this._FlyBesarXSpeed = Math.sqrt(Math.PI / b) / this._FlybackTime;
        };
        DropCoin.prototype.Complete = function () {
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.ADD_GOLD, this._nMoney);
        };
        DropCoin.prototype.Destroy = function () {
            this._coinImage.offAll();
            H52D_Framework.Tick.ClearAll(this);
            if (this._coinImage) {
                this._coinImage.destroy(true);
                this._coinImage = null;
            }
        };
        return DropCoin;
    }());
    H52D_Framework.DropCoin = DropCoin;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DropCoin.js.map
/** 掉落宝箱类 */
var H52D_Framework;
(function (H52D_Framework) {
    // 宝箱状态
    var DropBoxState;
    (function (DropBoxState) {
        DropBoxState[DropBoxState["down"] = 0] = "down";
        DropBoxState[DropBoxState["stop"] = 1] = "stop";
    })(DropBoxState || (DropBoxState = {}));
    ;
    // 宝箱飞回的贝塞尔方向
    var DropBoxFlyDir;
    (function (DropBoxFlyDir) {
        DropBoxFlyDir[DropBoxFlyDir["left"] = 0] = "left";
        DropBoxFlyDir[DropBoxFlyDir["right"] = 1] = "right";
    })(DropBoxFlyDir || (DropBoxFlyDir = {}));
    var DropBox = /** @class */ (function () {
        ////////////////////////////////////////////////////////
        /** 创建金币
        * @param nX 位置
        * @param nY 位置
        * @param nid  金币卸载量
        * @param callback 金币消失回调
        */
        function DropBox(nX, nY, nbox, callback) {
            this._AccSpdY = 1800; // 重力加速度
            ////////////////////////////////////////////////////////
            // 飞回需要的参数
            this._FlySpdY = 600; // 飞回的速度（向上的垂直方向）
            // 初始化状态
            this._nbox = nbox;
            this._callBack = callback;
            this._eState = DropBoxState.down;
            this._coinImage = new Laya.Image();
            this._coinImage.skin = "ui_common/icon_baoxiang.png";
            this._coinImage.scaleX = this._coinImage.scaleY = 1;
            this._ImgH = this._coinImage.displayHeight;
            this._coinImage.on(Laya.Event.CLICK, this, this.OnClick);
            // 居中显示
            this._coinImage.x = this._PosX = nX - this._coinImage.displayWidth * 0.5 >> 0;
            this._coinImage.y = this._PosY = nY - this._coinImage.displayHeight * 0.5 >> 0;
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.DROP_ADD_CHILD, [this._coinImage]);
            // 初始化初速度
            this._SpeedX = (Math.random() - 0.5) * 200;
            this._SpeedY = -Math.random() * 500;
            if (this._SpeedX > 0) {
                this._FlyDir = DropBoxFlyDir.right;
            }
            else {
                this._FlyDir = DropBoxFlyDir.left;
            }
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/drop_baoxiang.mp3");
            }
            H52D_Framework.Tick.FrameLoop(1, this, this.Update);
        }
        DropBox.prototype.OnClick = function () {
            // 鼠标点击即飞回
            if (this._eState == DropBoxState.stop) {
                H52D_Framework.DropManager.Instance.DeleteBox(this);
                H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, this._nbox]);
            }
        };
        DropBox.prototype.IsCanFlyback = function () {
            return (this._eState == DropBoxState.stop);
        };
        DropBox.prototype.GetPosX = function () {
            return this._PosX;
        };
        DropBox.prototype.GetPosY = function () {
            return this._PosY;
        };
        DropBox.prototype.Update = function () {
            // 下落
            if (this._eState == DropBoxState.down) {
                var t = H52D_Framework.Time.deltaTime / 1000;
                // s = v * t
                var s_x = this._SpeedX * t;
                // s = v * t + a * t^2 * 0.5
                var s_y = this._SpeedY * t + this._AccSpdY * t * t * 0.5;
                // v = v + a * t
                this._SpeedY = this._SpeedY + this._AccSpdY * t;
                this._coinImage.x = this._PosX = this._PosX + s_x;
                this._coinImage.y = this._PosY = this._PosY + s_y;
                // 落到地上了
                if (this._PosY + this._ImgH > H52D_Framework.FloorHeight()) {
                    this._coinImage.y = this._PosY = H52D_Framework.FloorHeight() - this._ImgH;
                    // 反弹，如果速度不够，就切换成静止状态
                    this._SpeedY = -this._SpeedY * 0.25;
                    this._SpeedX = this._SpeedX * 0.5;
                    if (this._SpeedY > -10) {
                        this._SpeedY = 0;
                        this._stopTime = 0;
                        this._eState = DropBoxState.stop;
                    }
                }
            }
            // 停止状态
            else if (this._eState == DropBoxState.stop) {
                this._stopTime += H52D_Framework.Time.deltaTime;
                if (H52D_Framework.BattleManager.Instance.bStopBattle) {
                    this._stopTime = 0;
                }
                if (this._stopTime > 2000) {
                    // 时间到了，要飞回
                    H52D_Framework.DropManager.Instance.DeleteBox(this);
                    H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, this._nbox]);
                }
            }
        };
        DropBox.prototype.Destroy = function () {
            this._coinImage.offAll();
            H52D_Framework.Tick.ClearAll(this);
            if (this._coinImage) {
                this._coinImage.destroy(true);
                this._coinImage = null;
            }
        };
        return DropBox;
    }());
    H52D_Framework.DropBox = DropBox;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DropBox.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var CustomsVo = /** @class */ (function () {
        function CustomsVo(id, waveOrder) {
            /** 配置 */
            this._cfg = null;
            this.customsId = id;
            this.waveOrder = waveOrder;
        }
        Object.defineProperty(CustomsVo.prototype, "customsId", {
            /** 副本ID */
            get: function () {
                return this._customsId;
            },
            set: function (nCustomsID) {
                this._customsId = nCustomsID;
                this._cfg = H52D_Framework.CustomspassConfig[nCustomsID];
                var mpdata = this._cfg["monstorPosition"];
                this.monstorPosition = {};
                for (var w in mpdata) {
                    this.monstorPosition[w] = {}; //这里放置1波怪
                    for (var m in mpdata[w]) {
                        this.monstorPosition[w][Number(mpdata[w][m][1])] = Number(mpdata[w][m][2]);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "waveNum", {
            /** 共几波 */
            get: function () {
                return this._cfg.waveNum;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "customsOrder", {
            /** 第几关 */
            get: function () {
                return this._cfg.customsOrder;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "sceneID", {
            /** 场景ID */
            get: function () {
                return this._cfg.sceneID;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "strCustomsIcon", {
            /** 副本图标 */
            get: function () {
                return this._cfg.strCustomsIcon;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "customsType", {
            /** 副本类型 */
            get: function () {
                return this._cfg.dunType;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "waveTime", {
            /** 波次持续时间，大boss用 */
            get: function () {
                return this._cfg.waveTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "waveRewardID", {
            /** 通关奖励，每波怪都有 */
            get: function () {
                return this._cfg.waveRewardID;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "extraRewardID", {
            /** 通关额外奖励*/
            get: function () {
                return this._cfg.extraRewardID;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "composeEquipLevel", {
            /**可合成装备等级 */
            get: function () {
                return this._cfg.composeEquipLevel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "aside", {
            /** 旁白ID */
            get: function () {
                return this._cfg.aside;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsVo.prototype, "asideB", {
            /** 旁白ID，场景前 */
            get: function () {
                return this._cfg.asideb;
            },
            enumerable: true,
            configurable: true
        });
        return CustomsVo;
    }());
    H52D_Framework.CustomsVo = CustomsVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CustomsVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 怪物数据模型
     * @author zhangyusong
     */
    var SceneVo = /** @class */ (function () {
        function SceneVo(sceneId) {
            this.sceneId = sceneId;
            var data = H52D_Framework.SceneConfig[sceneId][1];
            this.sceneName = H52D_Framework.StringInfoConfig[data["SceneName"]]["s"];
            this.strSceneChange = data["strSceneChange"];
            this.strSceneFileName = data["strSceneFileName"];
            this.strSceneBacSound = data["strSceneBacSound"];
        }
        return SceneVo;
    }());
    H52D_Framework.SceneVo = SceneVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SceneVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 场景管理类;
     * @author zhangyusong
     */
    var SceneManager = /** @class */ (function () {
        function SceneManager() {
            this.firstId = 10001;
            this.firstSound = false;
            this._scene = null;
            H52D_Framework.Event.RegistEvent("PET", Laya.Handler.create(this, this.LoadPet));
            H52D_Framework.Event.RegistEvent("PlayMusic", Laya.Handler.create(this, this.PlaySound));
            H52D_Framework.Event.RegistEvent("StoryEvent", Laya.Handler.create(this, this.SceneLoad));
        }
        Object.defineProperty(SceneManager, "Instance", {
            get: function () {
                if (this._instance == null) {
                    this._instance = new SceneManager();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneManager.prototype, "sceneId", {
            get: function () {
                return this.datavo.sceneId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneManager.prototype, "Datavo", {
            get: function () {
                return this.datavo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneManager.prototype, "scene", {
            get: function () {
                return this._scene;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 场景创建
         * @param sceneId 场景ID
         */
        SceneManager.prototype.Create = function (sceneId) {
            var _this = this;
            //先销毁       
            this.Destroy(Laya.Handler.create(this, function () {
                _this.firstSound = _this.firstId == sceneId;
                _this.PlaySound(false);
                _this.datavo = new H52D_Framework.SceneVo(sceneId);
                //加载场景Loading
                var customsOrder = H52D_Framework.CustomsManager.Instance.customsOrder;
                var b = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.story, customsOrder);
                if (H52D_Framework.Guidance.Instance.storyData[customsOrder] && !b) {
                    H52D_Framework.Guidance.Instance.PlayStory(customsOrder);
                }
                else {
                    H52D_Framework.CustomsManager.Instance.OpenAside(H52D_Framework.CustomsManager.Instance.CustomsVo.asideB, function () {
                        _this.SceneLoad();
                    });
                }
            }));
        };
        SceneManager.prototype.SceneLoad = function () {
            if (H52D_Framework.CustomsManager.Instance.first) { //开始不加载
                H52D_Framework.CustomsManager.Instance.first = false;
            }
            else {
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.SHOW_SCENE, [this.datavo]);
            }
            // 通知刷新UI层
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT);
            this.currentScene = this.datavo.strSceneFileName;
            H52D_Framework.UIManager.Instance.CreateUI(this.currentScene, [H52D_Framework.SceneRoot], Laya.Handler.create(this, this.CreateComplete));
        };
        SceneManager.prototype.PlaySound = function (play) {
            if (play === void 0) { play = true; }
            if (play && H52D_Framework.MasterPlayer.Instance.player.Music) {
                var index = 0;
                if (this.firstSound) {
                    index = 0;
                    this._lastMusic = index;
                }
                else {
                    do {
                        index = (Math.random() * 3 >> 0);
                    } while (this._lastMusic == index);
                    this._lastMusic = index;
                }
                H52D_Framework.SoundManager.Instance.OnPlayMusic(H52D_Framework.soundScene[index]);
            }
            else {
                H52D_Framework.SoundManager.Instance.OnStopMusic();
            }
        };
        SceneManager.prototype.CreateComplete = function (view) {
            var _this = this;
            this._scene = view;
            //将角色层赋值
            H52D_Framework.AvatarRoot = this._scene.getChildByName("avatarRoot");
            H52D_Framework.AvatarEffectRoot = this._scene.getChildByName("effectRoot");
            this.LoadHero(function () {
                _this.LoadMonster(function () {
                    _this.LoadComplete();
                });
            });
        };
        /**
         * 场景更新
         */
        SceneManager.prototype.Update = function () {
            this.LoadMonster(function () {
                // 通知刷新UI层
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT);
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.BEGIN_FIRE);
            });
        };
        /** 战斗初始化,加载英雄 */
        SceneManager.prototype.LoadHero = function (callBack) {
            H52D_Framework.BattleManager.Instance.Initialize(Laya.Handler.create(this, callBack));
        };
        /** 战斗初始化,加载怪物  */
        SceneManager.prototype.LoadMonster = function (callBack, boss) {
            if (boss === void 0) { boss = false; }
            H52D_Framework.MonsterManager.Instance.Initialize(Laya.Handler.create(this, callBack));
        };
        /** 战斗初始化,加载宠物  */
        SceneManager.prototype.LoadPet = function (id) {
            H52D_Framework.BPetManager.Instance.LoadBPet(id, this.datavo.sceneId);
        };
        /** 战斗初始化,加载大船  */
        SceneManager.prototype.LoadCamp = function () {
            H52D_Framework.BCampManager.Instance.LoadBCamp();
        };
        /**加载完成，触发战斗流程 */
        SceneManager.prototype.LoadComplete = function () {
            this.PlaySound();
            if (H52D_Framework.PetManager.Instance.CurrentpetID > 0) {
                this.LoadPet(H52D_Framework.PetManager.Instance.CurrentpetID);
            }
            if (H52D_Framework.MasterPlayer.Instance.player.CampID > 0) {
                this.LoadCamp();
            }
            H52D_Framework.BattleManager.Instance.aIOperation.Dps();
            //先关闭场景加载页面，再加载旁白，最后发起战斗
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.CLOSE_SCENE, function () {
                H52D_Framework.CustomsManager.Instance.OpenAside(H52D_Framework.CustomsManager.Instance.CustomsVo.aside, function () {
                    //开始战斗
                    if (H52D_Framework.CustomsManager.Instance.CustomsVo.customsType != Customs_Type.Boss) {
                        H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.BEGIN_FIRE);
                    }
                });
            });
        };
        /**销毁场景 */
        SceneManager.prototype.Destroy = function (callBack) {
            var _this = this;
            H52D_Framework.Event.DispatchEvent("ClearBubble");
            H52D_Framework.Event.DispatchEvent("StopBubbleMonster");
            if (this.currentScene) {
                H52D_Framework.UIManager.Instance.DestroyUI(this.currentScene, [H52D_Framework.SceneRoot], Laya.Handler.create(this, function () {
                    _this.ClearRoot(H52D_Framework.AvatarRoot);
                    _this.ClearRoot(H52D_Framework.AvatarEffectRoot);
                    _this.ClearRoot(H52D_Framework.EffectRoot);
                    _this.ClearRoot(H52D_Framework.SceneRoot);
                    if (callBack) {
                        callBack.run();
                    }
                }));
            }
            else {
                callBack.run();
            }
            H52D_Framework.ViewUILogic.Instance.Destroy();
            H52D_Framework.BattleManager.Instance.Destroy();
            H52D_Framework.MonsterManager.Instance.Destroy();
        };
        SceneManager.prototype.ClearRoot = function (root) {
            if (root) {
                var childList = root._childs;
                for (var i in childList) {
                    var _childs = childList[i];
                    if (_childs._emitter == null) {
                        _childs.destroy(true);
                    }
                }
                root.destroyChildren();
            }
        };
        return SceneManager;
    }());
    H52D_Framework.SceneManager = SceneManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SceneManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var RewardType;
    (function (RewardType) {
        RewardType[RewardType["Item"] = 1] = "Item";
        RewardType[RewardType["Equip"] = 2] = "Equip";
        RewardType[RewardType["Hero"] = 3] = "Hero";
        RewardType[RewardType["Pet"] = 4] = "Pet"; //神兽
    })(RewardType = H52D_Framework.RewardType || (H52D_Framework.RewardType = {}));
    /**
     * 奖励处理类
     * @author zhangyusong
     */
    var Reward = /** @class */ (function () {
        function Reward() {
            this.coinlist = [1, 2, 3, 4];
        }
        /**
         * 奖励物品分拣站，物品归类处理
         * @param list 奖励列表
         * --服务器返回的原始数据
         */
        Reward.prototype.RewardSorting = function (list) {
            for (var t in list) {
                var data = list[t];
                switch (Number(t)) {
                    case RewardType.Item:
                        var _loop_1 = function (itemId) {
                            var _in = false;
                            this_1.coinlist.forEach(function (id) {
                                if (Number(itemId) == id) {
                                    _in = true;
                                }
                            });
                            if (_in) { //这是货币
                                H52D_Framework.EffectManager.Instance.AddItem(Number(itemId), data[itemId]);
                            }
                            else { //不是货币就装进宝箱,碎片
                                H52D_Framework.EffectManager.Instance.AddBox(Number(t), Number(itemId), data[itemId]);
                            }
                        };
                        var this_1 = this;
                        for (var itemId in data) {
                            _loop_1(itemId);
                        }
                        //箱子装满，发送出去
                        H52D_Framework.EffectManager.Instance.SendBox();
                        break;
                    case RewardType.Equip:
                        for (var itemId in data) {
                            H52D_Framework.EffectManager.Instance.AddBox(Number(t), Number(itemId), data[itemId]);
                        }
                        //箱子装满，发送出去
                        H52D_Framework.EffectManager.Instance.SendBox();
                        break;
                    case RewardType.Hero:
                        break;
                    case RewardType.Pet:
                        break;
                    default:
                        break;
                }
            }
        };
        Reward.prototype.getData = function (type, list) {
        };
        return Reward;
    }());
    H52D_Framework.Reward = Reward;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Reward.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 怪物数据模型
     * @author zhangyusong
     */
    var MonsterVo = /** @class */ (function () {
        function MonsterVo(_id) {
            this.attr = new H52D_Framework.Attribute();
            this.id = _id;
            this.cfg = H52D_Framework.MonstorConfig[this.id];
            this.attr.SetAttributeValue(1, H52D_Framework.eValueType.Base, this.cfg["hp"]);
            this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, this.cfg["damage"]);
            this.attr.SetAttributeValue(4, H52D_Framework.eValueType.Base, this.cfg["critProbability"]);
            this.attr.SetAttributeValue(5, H52D_Framework.eValueType.Base, this.cfg["critDamgeRatio"]);
            /**战斗属性 */
            this.MaxHP = this.attr.GetAttributeValue(1);
            this.CurrentHP = this.MaxHP;
        }
        Object.defineProperty(MonsterVo.prototype, "name", {
            // 怪物名字	
            get: function () {
                var n = H52D_Framework.StringInfoConfig[this.cfg["NameId"]]["s"];
                if (!n)
                    n = "任性的Boss";
                return n;
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(MonsterVo.prototype, "strHeadIcon", {
            // 怪物头像	
            get: function () { return this.cfg["strHeadIcon"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(MonsterVo.prototype, "strModelId", {
            // 怪物模型	
            get: function () { return this.cfg["strModelId"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(MonsterVo.prototype, "modelScale", {
            // 模型缩放比例	
            get: function () { return this.cfg["modelScale"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(MonsterVo.prototype, "monType", {
            // 怪物类型	
            get: function () { return this.cfg["MonType"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(MonsterVo.prototype, "skillId", {
            // 怪物技能	
            get: function () { return this.cfg["skillId"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(MonsterVo.prototype, "dropRewardId", {
            // 掉落ID	
            get: function () { return this.cfg["dropRewardId"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(MonsterVo.prototype, "hpListNum", {
            // 血条数量	
            get: function () { return this.cfg["HpListNum"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(MonsterVo.prototype, "modlight", {
            /** 怪物闪光亮度 */
            get: function () { return this.cfg["Modlight"]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(MonsterVo.prototype, "allDamgeReduction", {
            get: function () {
                var ad = this.cfg["allDamgeReduction"];
                if (ad == 0) {
                    ad = 1;
                }
                else {
                    ad = 1 - this.cfg["allDamgeReduction"] / 10000;
                }
                return ad;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MonsterVo.prototype, "boss", {
            /**是不是Boss*/
            get: function () {
                return this.monType == 2;
            },
            enumerable: true,
            configurable: true
        });
        MonsterVo.prototype.SetCol = function () {
            if (this.location == 0 || this.location == 1 || this.location == 2) {
                this.rowNum = 1;
            }
            if (this.location == 3 || this.location == 4 || this.location == 5) {
                this.rowNum = 2;
            }
            if (this.location == 6 || this.location == 7 || this.location == 8) {
                this.rowNum = 3;
            }
            if (this.location == 0 || this.location == 3 || this.location == 6) {
                this.colNum = 1;
            }
            if (this.location == 1 || this.location == 4 || this.location == 7) {
                this.colNum = 2;
            }
            if (this.location == 2 || this.location == 5 || this.location == 8) {
                this.colNum = 3;
            }
        };
        return MonsterVo;
    }());
    H52D_Framework.MonsterVo = MonsterVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MonsterVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 怪物管理类
     * @author zhangyusong
     */
    var MonsterManager = /** @class */ (function () {
        function MonsterManager() {
        }
        Object.defineProperty(MonsterManager, "Instance", {
            get: function () {
                if (this._instance == null) {
                    this._instance = new MonsterManager();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MonsterManager.prototype, "monsterList", {
            get: function () {
                return this._monsterList;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 管理类设置数据
         * @param data
         * @constructor
         */
        MonsterManager.prototype.DataInit = function (obj) {
            this.data = new Array();
            for (var _id in obj) {
                var vo = new H52D_Framework.MonsterVo(Number(_id));
                vo.location = obj[_id] - 1;
                this.data.push(vo);
            }
        };
        MonsterManager.prototype.GetMonsterByID = function (id) {
            if (this.monsterList[id]) {
                return this.monsterList[id];
            }
        };
        /**
         * 加载资源
         * @param callBack 加载完成时回调
         * @constructor
         */
        MonsterManager.prototype.Initialize = function (callBack) {
            this.loadComplete = callBack;
            this._monsterList = {};
            MonsterManager.index = 0;
            //循环加载怪物
            this.loadMonster();
        };
        /** 清除所有怪物 */
        MonsterManager.prototype.Destroy = function () {
            if (this._monsterList) {
                var kaylist = [];
                for (var index in this._monsterList) {
                    kaylist.push(index);
                }
                var Len = kaylist.length;
                for (var i = 0; i < Len; i++) {
                    if (this._monsterList[kaylist[i]]) {
                        this._monsterList[kaylist[i]].Destroy();
                        this._monsterList[kaylist[i]] = null;
                    }
                }
                kaylist = [];
            }
            MonsterManager.index = 0;
            this._monsterList = {};
        };
        MonsterManager.prototype.loadMonster = function () {
            var _this = this;
            var _hp = 0;
            var _name = "";
            var _loop_1 = function (md) {
                var vo = this_1.data[md];
                var monster = new H52D_Framework.Monster(vo);
                //队长位
                if (vo.location == 4) {
                    _name = vo.name;
                }
                var scale = vo.modelScale;
                var x = H52D_Framework.MonsterLocal[vo.location][0] * G_StageWidthScale;
                var y = H52D_Framework.MonsterLocal[vo.location][1];
                //阴影大小
                var shadow = H52D_Framework.MonstorConfig[vo.id]["shadow"];
                _hp += vo.attr.GetAttributeValue(1);
                monster.LoadMonster(AvatarDirection.right, scale, x, y, shadow, vo.location, Laya.Handler.create(this_1, function () {
                    _this._monsterList[MonsterManager.index] = monster;
                    MonsterManager.index++;
                    if (MonsterManager.index >= _this.data.length) {
                        H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.CUSTOMS_BASEINFOR, { "monster_name": _name, "blood": _hp });
                        _this.loadComplete.run();
                    }
                }));
            };
            var this_1 = this;
            for (var md in this.data) {
                _loop_1(md);
            }
        };
        return MonsterManager;
    }());
    H52D_Framework.MonsterManager = MonsterManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MonsterManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 怪物类
     */
    var Monster = /** @class */ (function () {
        /**初始化 */
        function Monster(vo, viewRoot) {
            this.type = eCharacter_TYPE.MONSTER;
            this.PosX = 0;
            this.PosY = 0;
            this._isLoadDown = false;
            this._isDestroyDwon = false;
            this._scla = 0.1;
            this.beforDie = false;
            this.afterDie = false;
            this.bAttack = false;
            this._dataVo = vo;
            this.viewRoot = viewRoot ? viewRoot : H52D_Framework.AvatarRoot;
            this.Init();
        }
        Object.defineProperty(Monster.prototype, "avatar", {
            get: function () {
                return this._avatar;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Monster.prototype, "vo", {
            get: function () {
                return this._dataVo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Monster.prototype, "blood", {
            get: function () {
                return this._blood;
            },
            set: function (value) {
                this._blood = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Monster.prototype, "IsDie", {
            get: function () {
                return this._isDie;
            },
            set: function (value) {
                this._isDie = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Monster.prototype, "Hp", {
            get: function () {
                return this._currentHP;
            },
            set: function (value) {
                if (value > this._currentHP) {
                    value = this._currentHP;
                }
                if (value <= 0) {
                    value = 0;
                }
                this._currentHP = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Monster.prototype, "ViewRoot", {
            get: function () { return this.viewRoot; },
            enumerable: true,
            configurable: true
        });
        Monster.prototype.Init = function () {
            this._avatar = new H52D_Framework.Avatar(this.viewRoot);
            this._isLoadDown = false;
            this._isDestroyDwon = false;
            this._currentHP = this._dataVo.attr.GetAttributeValue(1);
            this._isDie = false;
            H52D_Framework.Tick.Loop(1, this, this.OnUpdate);
        };
        Monster.prototype.LoadMonster = function (dir, scale, x, y, shadow, order, callback) {
            var _this = this;
            this.PosX = x;
            this._scla = scale;
            this.PosY = y;
            this._isDie = false;
            this.vo.SetCol();
            this._avatar.Load(this._dataVo.strModelId, dir, this._scla, x, y, Laya.Handler.create(this, function () {
                _this.ChangeEffect(shadow);
                _this._isLoadDown = true;
                _this._avatar.SetOrder(order);
                _this.Idle();
                if (callback) {
                    callback.run();
                }
            }), this.vo.modlight);
        };
        /**死亡函数 */
        Monster.prototype.Die = function (callback) {
            var _this = this;
            if (!this._avatar)
                return;
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/die_sound.mp3");
            }
            H52D_Framework.CustomsManager.Instance.monsterDieNum++;
            this.beforDie = true;
            this._avatar.Play(H52D_Framework.AnimationName.die, false, true, function () {
                _this._isDestroyDwon = true;
                _this.afterDie = true;
                H52D_Framework.Event.DispatchEvent("ClearOneBubble", [E_BubbleType.eMonster]);
                _this.Destroy();
                if (callback) {
                    callback.run();
                }
            });
            H52D_Framework.Event.DispatchEvent("ClearOneBubble", [E_BubbleType.eMonster]);
            H52D_Framework.Event.DispatchEvent("StopBubbleMonster");
        };
        /**出生特效 */
        Monster.prototype.ChangeEffect = function (shadow) {
            var _this = this;
            if (!this._avatar)
                return;
            if (this.vo.boss) {
                var oPosY_1 = 0;
                oPosY_1 = this._avatar.PosY;
                this._avatar.PosY = -100;
                if (!oPosY_1)
                    oPosY_1 = 730;
                H52D_Framework.TweenList.to(this, this._avatar, { PosY: oPosY_1 }, 350, function () {
                    if (!_this._avatar)
                        return;
                    if (!oPosY_1)
                        oPosY_1 = 730;
                    _this._avatar.PosY = oPosY_1;
                    _this._avatar.Shadow(shadow, true);
                    H52D_Framework.EffectManager.Instance.StartShock(600, null, 6);
                });
            }
            else {
                if (!this._avatar)
                    return;
                this._avatar.scale = 0;
                if (!this._avatar)
                    return;
                H52D_Framework.TweenList.to(this, this._avatar, { scale: this._scla }, 250, function () {
                    if (!_this._scla) {
                        _this._scla = 0;
                    }
                    if (!_this._avatar)
                        return;
                    if (_this._avatar) {
                        _this._avatar.scale = _this._scla;
                    }
                    if (!_this._avatar)
                        return;
                    _this._avatar.Shadow(shadow, true);
                });
                if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                    H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/boss_appear2.mp3");
                }
                if (this._brithAvatar) {
                    this._brithAvatar.Play("effect_state_qiehuan", false);
                }
                else {
                    this._brithAvatar = new H52D_Framework.Avatar(H52D_Framework.AvatarEffectRoot);
                    this._brithAvatar.Load("res/effect/effect_state_qiehuan/effect_state_qiehuan.sk", 1, 1.1, this.PosX, this.PosY - 200, Laya.Handler.create(this, function () {
                        _this._brithAvatar.Play("effect_state_qiehuan", false);
                    }));
                }
            }
        };
        Monster.prototype.Idle = function () {
            if (this._isDie || this._avatar == null || this._isLoadDown == false) {
                return;
            }
            this._avatar.Play(H52D_Framework.AnimationName.idle, true);
        };
        Monster.prototype.Attack = function () {
            var _this = this;
            if (this._isDie || this._avatar == null || this._isLoadDown == false) {
                return;
            }
            this.bAttack = true;
            this._avatar.Play(H52D_Framework.AnimationName.attack, false, true, function () {
                _this.bAttack = false;
                _this.Idle();
            });
        };
        Monster.prototype.Hit = function () {
            var _this = this;
            if (this._isDie || this._avatar == null || this._isLoadDown == false || this.bAttack) {
                return;
            }
            this._avatar.Play(H52D_Framework.AnimationName.hit, false, true, function () {
                _this.Idle();
            });
        };
        Monster.prototype.setHp = function () {
            this.Hp = -1;
        };
        Monster.prototype.OnHurt = function (damage, e, iscrit, type, viewRoot) {
            if ((this._currentHP <= 0) || this._isDie || this._avatar == null || this._isLoadDown == false) {
                return;
            }
            if (type != SPECIAL_TYPE.SUSRAINED) {
                this.Hit();
            }
            if (type == SPECIAL_TYPE.ACTION) {
                H52D_Framework.UIManager.Instance.InstanceUI("FloatView", [viewRoot, damage.toString(), e, 420, 100, false]);
                return;
            }
            H52D_Framework.Floating.DamageText(damage.toString(), e, 500, 500, iscrit);
            this.Hp -= damage;
            H52D_Framework.BattleManager.Instance.TheWordBossDamage += damage;
            //通知UI
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.CUSTOMS_DROP_BLOOD, damage);
        };
        Monster.prototype.OnUpdate = function () {
            if (this._isDie) {
                return;
            }
            if (this._currentHP <= 0) {
                this._isDie = true;
                // Event.DispatchEvent(EventDefine.MONSTER_DIE, [this.vo.id]);
                // Event.DispatchEvent(EventDefine.MONSTER_DIE_N, [this.vo.id]);
                this.Die();
            }
        };
        /**销毁 */
        Monster.prototype.Destroy = function () {
            if (this._avatar) {
                this._avatar.Destroy();
                this._avatar = null;
            }
            if (this._brithAvatar) {
                this._brithAvatar.Destroy();
                this._brithAvatar = null;
            }
            // if (this._buff) {
            //     this._buff.Destroy();
            //     this._buff = null;
            // }
            // this._dataVo = null;
            // Tick.ClearAll(this);
        };
        return Monster;
    }());
    H52D_Framework.Monster = Monster;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Monster.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 副本逻辑类
     * @author zhangyusong
     */
    var CustomsManager = /** @class */ (function () {
        function CustomsManager() {
            //测试一下
            this.LEAVE = "离开战斗";
            this.CHALLENGE = "挑战BOSS";
            this.FlOAT_ID = 10019;
            /** 累计消灭怪物*/
            this.monsterDieNum = 0;
            this.first = true;
            /** 关卡旁白，只有战斗胜利了开启，在切换战斗模式时不开启 */
            this.canaside = false;
            /** 由奖励界面进入场景 */
            this.rewardIntoScene = false;
            /** 是不是Boss关 */
            this.boss = false;
            /** 强制通关 */
            this.through = false;
            this.failNum = 0;
            /** 直通特权次数 */
            this.privilegeNum = 1;
        }
        Object.defineProperty(CustomsManager.prototype, "bBoss", {
            get: function () {
                return this.boss;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsManager, "Instance", {
            get: function () {
                if (CustomsManager._inst == null) {
                    CustomsManager._inst = new CustomsManager();
                }
                return CustomsManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsManager.prototype, "customsOrder", {
            /** 第几关 */
            get: function () {
                return this.customsVo ? this.customsVo.customsOrder : -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomsManager.prototype, "CustomsVo", {
            /** 获取当前副本数据 */
            get: function () {
                return this.customsVo;
            },
            enumerable: true,
            configurable: true
        });
        /**切换战斗模式 */
        CustomsManager.prototype.CustomsModelChange = function (mode) {
            this.customsMode = mode;
            //循环模式进入
            if (this.customsMode == Customs_Mode.Loop) {
                this.rewardIntoScene = true;
                H52D_Framework.RemoteCall.Instance.Send("K_WinDungeons", false);
                H52D_Framework.Event.DispatchEvent("CunstomsModel", [this.CHALLENGE]);
            }
            //循环模式退出
            else if (this.customsMode == Customs_Mode.Auto) {
                this.customsMode = Customs_Mode.Auto;
                H52D_Framework.RemoteCall.Instance.Send("K_GotoDungeons");
                H52D_Framework.Event.DispatchEvent("CunstomsModel", [this.LEAVE]);
            }
            this.canaside = false;
            H52D_Framework.BattleManager.Instance.DestroyMonster();
        };
        /** 通关 */
        CustomsManager.prototype.CustomsThrough = function () {
            this.boss = true;
            this.through = true;
            this.CustomsModelChange(Customs_Mode.Auto);
            H52D_Framework.BattleManager.Instance.bdirct();
        };
        CustomsManager.prototype.Initialize = function () {
            var _this = this;
            this.customsMode = H52D_Framework.MasterPlayer.Instance.player.CustomsMode;
            this.prevSceneId = 0;
            this.reward = new H52D_Framework.Reward();
            // 副本数据初始化
            var customsId = H52D_Framework.MasterPlayer.Instance.player.CustomsId;
            var waveOrder = H52D_Framework.MasterPlayer.Instance.player.WaveOrder;
            this.customsVo = new H52D_Framework.CustomsVo(customsId, waveOrder);
            // 事件注册
            this.EventInit();
            this.canaside = false;
            //加载关卡场景
            H52D_Framework.UIManager.Instance.CreateUI("ChangeSceneView", [H52D_Framework.ViewToppestRoot], Laya.Handler.create(this, function () {
                //第一关，第一波，做特殊处理
                if (_this.customsOrder == 1 && _this.customsVo.waveOrder == 1) {
                    _this.canaside = true;
                    _this.OpenAside(_this.CustomsVo.asideB, function () {
                        _this.canaside = false;
                        H52D_Framework.Event.DispatchEvent("ShowMainView");
                        _this.SceneUpdate();
                    });
                }
                else {
                    H52D_Framework.Event.DispatchEvent("ShowMainView");
                    //创建场景
                    _this.SceneUpdate();
                }
            }));
        };
        /**
         * 场景创建或更新
         */
        CustomsManager.prototype.SceneUpdate = function () {
            var _this = this;
            this.boss = this.customsVo.waveOrder == this.customsVo.waveNum;
            // 初始化副本怪物
            H52D_Framework.MonsterManager.Instance.DataInit(this.customsVo.monstorPosition[this.customsVo.waveOrder]);
            // 主线关卡
            if (this.customsVo.customsType == Customs_Type.Customs) {
                if (this.customsVo.sceneID == this.prevSceneId) {
                    //Boss的旁白对话
                    if (this.boss) {
                        var bossId = 0;
                        var position = this.customsVo.monstorPosition[this.customsVo.waveOrder];
                        for (var b in position) {
                            if (position[b] == "5") {
                                bossId = Number(b);
                                break;
                            }
                        }
                        if (H52D_Framework.MonstorConfig[bossId]) {
                            var asideId = H52D_Framework.MonstorConfig[bossId]["aside"];
                            this.OpenAside(asideId, function () { H52D_Framework.SceneManager.Instance.Update(); });
                        }
                        else {
                            H52D_Framework.SceneManager.Instance.Update();
                        }
                    }
                    else { //自动模式第一波，展示旁白
                        if (this.customsMode == Customs_Mode.Auto && this.customsVo.waveOrder == 1) {
                            this.OpenAside(this.customsVo.aside, function () {
                                //通关分享，在旁白之后
                                var prevCustoms = 0;
                                for (var i in H52D_Framework.GameParamConfig["ShareRelationCustoms"]) {
                                    var currCustoms = H52D_Framework.GameParamConfig["ShareRelationCustoms"][i];
                                    if (_this.customsOrder - 1 == currCustoms) {
                                        prevCustoms = _this.customsOrder - 1;
                                        break;
                                    }
                                }
                                if (prevCustoms > 0) {
                                    H52D_Framework.ShareLogic.Instance.ShareCustoms(prevCustoms);
                                }
                                H52D_Framework.SceneManager.Instance.Update();
                            });
                        }
                        else {
                            H52D_Framework.SceneManager.Instance.Update();
                        }
                    }
                }
                else { //场景ID更换，需要创建场景
                    this.prevSceneId = this.customsVo.sceneID;
                    H52D_Framework.SceneManager.Instance.Create(this.customsVo.sceneID);
                }
            }
            else {
                // 如果切换回来则必须要切换场景
                this.prevSceneId = 0;
                // 通知刷新UI层
                //Event.DispatchEvent(EventDefine.CUSTOMS_CURRENT);
            }
            // 世界boss
            if (this.customsVo.customsType == Customs_Type.Boss) {
                H52D_Framework.SceneManager.Instance.Create(this.customsVo.sceneID);
            }
            //关于关卡的红点儿，基金
            H52D_Framework.Event.DispatchEvent("ShowControlRedPoint", E_OpenGrade.FUND);
        };
        CustomsManager.prototype.EventInit = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_WinDungeons', this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_GotoDungeons', this);
            H52D_Framework.Event.RegistEvent("CUSTOMS_RESULT", Laya.Handler.create(this, this.FightResult));
            H52D_Framework.Event.RegistEvent("CUSTOMS_UPDATE", Laya.Handler.create(this, this.FightUpdate));
        };
        /**
         * 跳转波数
         * @param waveOrder
         */
        CustomsManager.prototype.C_GotoDungeons = function (buf) {
            var waveOrder = buf[0];
            this.customsVo.waveOrder = waveOrder;
            H52D_Framework.MasterPlayer.Instance.player.WaveOrder = waveOrder;
            // 创建场景
            if (!this.through) {
                this.SceneUpdate();
            }
        };
        CustomsManager.prototype.FightResult = function (win) {
            switch (this.customsVo.customsType) {
                // 主线副本
                case Customs_Type.Customs:
                    //Boss清除倒计时
                    if (this.customsVo.waveOrder == this.customsVo.waveNum) {
                        H52D_Framework.Event.DispatchEvent("BossThrough", [win]);
                    }
                    if (win) {
                        if (this.boss) {
                            //击杀Boss数量
                            H52D_Framework.MasterPlayer.Instance.ReqOnEvent(EventProEnum.KillBoss, 1);
                            //Boss也是怪物，所以要清掉
                            this.monsterDieNum = 0;
                            H52D_Framework.MasterPlayer.Instance.ReqOnEvent(EventProEnum.WinCustoms, 1);
                            if (this.customsVo.customsOrder >= H52D_Framework.GameParamConfig["ValueOffNumber"]) {
                                H52D_Framework.DataManager.Instance.PackData();
                            }
                        }
                        else {
                            //累计消灭怪物
                            H52D_Framework.MasterPlayer.Instance.ReqOnEvent(EventProEnum.KillMonster, this.monsterDieNum);
                            this.monsterDieNum = 0;
                        }
                        H52D_Framework.Event.DispatchEvent("CustomsClear");
                        this.rewardIntoScene = false;
                        H52D_Framework.RemoteCall.Instance.Send("K_WinDungeons", true);
                        this.failNum = 0;
                    }
                    else {
                        if (this.boss) {
                            H52D_Framework.Event.DispatchEvent("BossCome", [false]);
                            //助理通关，特权有没有使用过
                            if (H52D_Framework.MasterPlayer.Instance.invitadunFlag == 0) {
                                //邀请人数是否够使用特权次数
                                if (H52D_Framework.MasterPlayer.Instance.dayInviteNum >= H52D_Framework.GameParamConfig["HelpPassNeedPlayerNum"]) {
                                    H52D_Framework.ShareLogic.Instance.AssistanceCustems();
                                } //失败>1次
                                else if (++this.failNum > 1) {
                                    H52D_Framework.ShareLogic.Instance.AssistanceInvitation();
                                }
                            }
                            if (this.customsMode == Customs_Mode.Auto) {
                                this.CustomsModelChange(Customs_Mode.Loop);
                            }
                        }
                    }
                    break;
                case Customs_Type.Boss: // 世界boss
                    if (win) {
                        // 几乎不可能 肯定开挂了  
                    }
                    else {
                    }
                    // 获取累计伤害
                    var nDamage = H52D_Framework.BattleManager.Instance.TheWordBossDamage;
                    H52D_Framework.Event.DispatchEvent("WroldBoss_hurt", [nDamage]);
                    // 上传伤害
                    H52D_Framework.RemoteCall.Instance.Send('K_ReqSendChallengeHarm', nDamage);
                    this.LeaveCustomsManager();
                    break;
                default:
                    break;
            }
        };
        /**
         * 胜利结算
         * @param buf 数组
         *  [0]是否是循环模式
         *  [1]准备切换的副本ID
         *  [2]切换到该副本中的第几波
         *  [3]奖励列表
         **/
        CustomsManager.prototype.C_WinDungeons = function (buf) {
            var win = buf[0];
            var customsId = buf[1];
            var waveOrder = buf[2];
            var award = buf[3];
            // 更新本地关卡
            H52D_Framework.MasterPlayer.Instance.player.CustomsId = customsId;
            H52D_Framework.MasterPlayer.Instance.player.WaveOrder = waveOrder;
            H52D_Framework.CampManager.Instance.Add_camp();
            if (win) { //赢了有奖励
                this.reward.RewardSorting(award);
                this.canaside = true;
            }
            else {
                this.customsMode = Customs_Mode.Loop;
                this.canaside = false;
            }
            this.customsVo.customsId = customsId;
            this.customsVo.waveOrder = waveOrder;
            if (this.rewardIntoScene || this.through) {
                this.SceneUpdate();
                this.through = false;
            }
        };
        /** 战斗刷新，更新场景 */
        CustomsManager.prototype.FightUpdate = function () {
            if (this.customsVo) {
                this.SceneUpdate();
            }
        };
        /** 进入副本 */
        CustomsManager.prototype.EnterCustoms = function (nCustomsID, nWaveOrder) {
            var cfg = H52D_Framework.CustomspassConfig[nCustomsID];
            if (cfg == null) {
                return;
            }
            if (cfg.dunType == 1) {
                return;
            }
            this.customsVo.customsId = nCustomsID;
            this.customsVo.waveOrder = nWaveOrder || 1;
            this.SceneUpdate();
        };
        /** 离开副本 回到当前主线关卡 */
        CustomsManager.prototype.LeaveCustomsManager = function () {
            var cfg = H52D_Framework.CustomspassConfig[this.customsVo.customsId];
            if (cfg.dunType == 1) {
                return;
            }
            this.customsMode = Customs_Mode.Auto;
            this.customsVo.customsId = H52D_Framework.MasterPlayer.Instance.player.CustomsId;
            this.customsVo.waveOrder = H52D_Framework.MasterPlayer.Instance.player.WaveOrder;
            this.SceneUpdate();
        };
        CustomsManager.prototype.OpenAside = function (id, callBack) {
            var _this = this;
            if (!this.canaside || id == 0) {
                callBack.call(this);
            }
            else {
                //暂停战斗
                H52D_Framework.BattleManager.Instance.StopBattle();
                if (H52D_Framework.UIManager.Instance.IsHave("AsideView", H52D_Framework.ViewStoryRoot)) {
                    H52D_Framework.UIManager.Instance.DestroyUI("AsideView", [H52D_Framework.ViewStoryRoot]);
                }
                H52D_Framework.UIManager.Instance.CreateUI("AsideView", [H52D_Framework.ViewStoryRoot, id, Laya.Handler.create(this, function () {
                        //开始战斗
                        H52D_Framework.BattleManager.Instance.OpenBattle();
                        callBack.call(_this);
                    })]);
            }
        };
        return CustomsManager;
    }());
    H52D_Framework.CustomsManager = CustomsManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CustomsManager.js.map
//ui管理类
var H52D_Framework;
(function (H52D_Framework) {
    // 加载UI资源
    var _viewResArray = {};
    function AddViewResource(viewname, resArray) {
        _viewResArray[viewname] = resArray;
    }
    H52D_Framework.AddViewResource = AddViewResource;
    /**
     * 清除图集资源
     */
    function ClearViewResource(viewName) {
        for (var i in _viewResArray) {
            if (!viewName || i == viewName) {
                for (var j = 0; j < _viewResArray[i].length; j++) {
                    var url = _viewResArray[i][j];
                    if (typeof (url) == 'string') {
                        Laya.loader.clearTextureRes(url);
                    }
                    else {
                        Laya.loader.clearTextureRes(url.url);
                    }
                }
            }
        }
    }
    H52D_Framework.ClearViewResource = ClearViewResource;
    //手机屏幕适配
    function Adaptation(view) {
        if (Laya.Browser.onMobile) {
            view.width = G_StageWidth;
            view.height = G_StageHeight;
            view.centerY = 0;
            view.centerX = 0;
        }
    }
    H52D_Framework.Adaptation = Adaptation;
    var UIManager = /** @class */ (function () {
        //构造函数
        function UIManager() {
            //所有命令集合
            this.cmdList = [];
            H52D_Framework.Tick.FrameLoop(1, this, this.Update);
        }
        Object.defineProperty(UIManager, "Instance", {
            get: function () {
                if (UIManager._inst == null)
                    UIManager._inst = new UIManager();
                return UIManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        //注册命令->创建唯一ui
        UIManager.prototype.CreateUI = function (uiName, params, callBack, bImmediately) {
            if (bImmediately) {
                this._Create(Command.CreateCmd(uiName, params, callBack));
            }
            else {
                this.cmdList.push(Command.CreateCmd(uiName, params, callBack));
            }
        };
        //注册命令->实例化多个ui
        UIManager.prototype.InstanceUI = function (uiName, params, callBack) {
            this.cmdList.push(Command.InstanceCmd(uiName, params, callBack));
        };
        //注册命令->显示ui
        UIManager.prototype.ShowUI = function (ui, params, callBack) {
            this.cmdList.push(Command.ShowCmd(ui, params, callBack));
        };
        //注册命令->隐藏ui
        UIManager.prototype.HideUI = function (ui, params, callBack) {
            this.cmdList.push(Command.HideCmd(ui, params, callBack));
        };
        //注册命令->删除ui
        UIManager.prototype.DestroyUI = function (ui, params, callBack, bImmediately) {
            if (bImmediately) {
                this._Destroy(Command.DestroyCmd(ui, params, callBack));
            }
            else {
                this.cmdList.push(Command.DestroyCmd(ui, params, callBack));
            }
        };
        //每帧调用
        UIManager.prototype.Update = function () {
            if (this.cmdList.length <= 0)
                return;
            var tempCmd = this.cmdList[0];
            if (tempCmd == null) {
                this.cmdList.splice(0, 1);
                return;
            }
            if (tempCmd._cmdType == CmdType.Create) {
                this._Create(tempCmd);
            }
            else if (tempCmd._cmdType == CmdType.InstanceCmd) {
                this._Instance(tempCmd);
            }
            else if (tempCmd._cmdType == CmdType.Destroy) {
                this._Destroy(tempCmd);
            }
            else if (tempCmd._cmdType == CmdType.Hide) {
                this._Hide(tempCmd);
            }
            else if (tempCmd._cmdType == CmdType.Show) {
                this._Show(tempCmd);
            }
            this.cmdList.splice(0, 1);
        };
        //创建Loading
        UIManager.prototype._CreateLoading = function (cmd) {
            function _loaded() {
                var view = new H52D_Framework.LoadingView();
                view.name = String(cmd._ui);
                Adaptation(view);
                cmd._params[0].addChild(view);
                if (cmd._callBack != null)
                    cmd._callBack.runWith(view);
            }
            var view = cmd._params[0].getChildByName(String(cmd._ui));
            if (view == null) {
                var res = _viewResArray["LoadingView"];
                if (res != null) {
                    Laya.loader.load(res, Laya.Handler.create(this, function () {
                        _loaded();
                    }));
                }
                else {
                    _loaded();
                }
            }
        };
        //创建ui
        UIManager.prototype._Create = function (cmd) {
            function _loaded(uiClass) {
                view = new uiClass(cmd._params);
                view.name = String(cmd._ui);
                Adaptation(view);
                cmd._params[0].addChild(view);
                if (cmd._callBack != null)
                    cmd._callBack.runWith(view);
            }
            var view = cmd._params[0].getChildByName(String(cmd._ui));
            if (view == null) {
                var uiClass_1 = H52D_Framework[String(cmd._ui)];
                if (uiClass_1 != null) {
                    var res = _viewResArray[String(cmd._ui)];
                    if (res != null) {
                        Laya.loader.load(res, Laya.Handler.create(this, function () {
                            _loaded(uiClass_1);
                        }));
                    }
                    else {
                        _loaded(uiClass_1);
                    }
                }
                else {
                    H52D_Framework.Debugger.LogError(String(cmd._ui) + "对应的类不存在，UI加载失败！");
                }
            }
        };
        //创建实例ui
        UIManager.prototype._Instance = function (cmd) {
            function _loaded(uiClass) {
                var view = new uiClass(cmd._params);
                view.name = String(cmd._ui);
                cmd._params[0].addChild(view);
                if (cmd._callBack != null)
                    cmd._callBack.runWith(view);
            }
            var uiClass = H52D_Framework[String(cmd._ui)];
            if (uiClass != null) {
                var res = _viewResArray[String(cmd._ui)];
                if (res != null) {
                    Laya.loader.load(res, Laya.Handler.create(this, function () {
                        _loaded(uiClass);
                    }));
                }
                else {
                    _loaded(uiClass);
                }
            }
            else {
                H52D_Framework.Debugger.LogError(String(cmd._ui) + "对应的类不存在，UI加载失败！");
            }
        };
        //显示ui
        UIManager.prototype._Show = function (cmd) {
            if (cmd._ui) {
                if (typeof (cmd._ui) == 'string') {
                    var ui_1 = cmd._params[0].getChildByName(String(cmd._ui));
                    if (ui_1 != null) {
                        ui_1.visible = true;
                        if (cmd._callBack != null) {
                            cmd._callBack.run();
                        }
                    }
                }
                else {
                    if (cmd._ui != null) {
                        cmd._ui.visible = true;
                        if (cmd._callBack != null) {
                            cmd._callBack.run();
                        }
                    }
                }
            }
            else {
                H52D_Framework.Debugger.LogError("UI不存在，UI显示失败！");
            }
        };
        //隐藏ui
        UIManager.prototype._Hide = function (cmd) {
            if (cmd._ui) {
                if (typeof (cmd._ui) == 'string') {
                    var ui_2 = cmd._params[0].getChildByName(String(cmd._ui));
                    if (ui_2 != null) {
                        ui_2.visible = false;
                        if (cmd._callBack != null) {
                            cmd._callBack.run();
                        }
                    }
                }
                else {
                    if (cmd._ui != null) {
                        cmd._ui.visible = false;
                        if (cmd._callBack != null) {
                            cmd._callBack.run();
                        }
                    }
                }
            }
            else {
                H52D_Framework.Debugger.LogError("UI不存在，UI隐藏失败！");
            }
        };
        //销毁ui
        UIManager.prototype._Destroy = function (cmd) {
            if (cmd._ui) {
                if (typeof (cmd._ui) == 'string') {
                    var ui_3 = cmd._params[0].getChildByName(cmd._ui);
                    if (ui_3 != null) {
                        ui_3.destroy(true);
                    }
                }
                else {
                    if (cmd._ui != null) {
                        cmd._ui.destroy(true);
                    }
                }
                if (cmd._callBack != null)
                    cmd._callBack.run();
            }
            else {
                H52D_Framework.Debugger.LogError("UI不存在，UI销毁失败！");
            }
        };
        /**
         * 是否存在此ui
         * @param uiName ui名字
         * @param root 界面层级
         */
        UIManager.prototype.IsHave = function (uiName, root) {
            return root.getChildByName(uiName) != null;
        };
        return UIManager;
    }());
    H52D_Framework.UIManager = UIManager;
    var Command = /** @class */ (function () {
        //构造函数
        function Command(cmdType, ui, params, callBack) {
            //参数
            this._params = [];
            this._cmdType = cmdType;
            this._ui = ui;
            this._params = params;
            this._callBack = callBack;
        }
        //获取创建的命令
        Command.CreateCmd = function (uiName, params, callBack) {
            return new Command(CmdType.Create, uiName, params, callBack);
        };
        //获取实例化多个的命令
        Command.InstanceCmd = function (uiName, params, callBack) {
            return new Command(CmdType.InstanceCmd, uiName, params, callBack);
        };
        //获取显示的命令
        Command.ShowCmd = function (ui, params, callBack) {
            return new Command(CmdType.Show, ui, params, callBack);
        };
        //获取隐藏命令
        Command.HideCmd = function (ui, params, callBack) {
            return new Command(CmdType.Hide, ui, params, callBack);
        };
        //获取删除的命令
        Command.DestroyCmd = function (ui, params, callBack) {
            return new Command(CmdType.Destroy, ui, params, callBack);
        };
        return Command;
    }());
    H52D_Framework.Command = Command;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=UIManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var SoundManager = /** @class */ (function () {
        function SoundManager() {
            Laya.SoundManager.autoReleaseSound = false;
        }
        Object.defineProperty(SoundManager, "Instance", {
            get: function () {
                if (SoundManager._inst == null)
                    SoundManager._inst = new SoundManager();
                return SoundManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        /**播放背景音乐 */
        SoundManager.prototype.OnPlayMusic = function (soundUrl, loops) {
            if (soundUrl != "") {
                Laya.loader.load(soundUrl, Laya.Handler.create(this, function () {
                    Laya.SoundManager.playMusic(soundUrl, loops || 0);
                }));
            }
        };
        /**设置背景音乐音量0-1 */
        SoundManager.prototype.OnSetMusicVolume = function (volume) {
            Laya.SoundManager.setMusicVolume(volume);
        };
        /**停止播放背景音乐 */
        SoundManager.prototype.OnStopMusic = function () {
            Laya.SoundManager.stopMusic();
        };
        /**播放音效,音效可以同时播放多个 */
        SoundManager.prototype.OnPlaySound = function (soundUrl) {
            if (!soundUrl) {
                return;
            }
            if (soundUrl != "") {
                Laya.loader.load(soundUrl, Laya.Handler.create(this, function () {
                    Laya.SoundManager.playSound(soundUrl, 1);
                }));
            }
        };
        /**设置音效音量，不传id将设置所有音效音量 */
        SoundManager.prototype.OnSetSoundVolume = function (volume, soundUrl) {
            if (soundUrl != "") {
                Laya.SoundManager.setSoundVolume(volume, soundUrl);
            }
        };
        /**停止音效播放 */
        SoundManager.prototype.OnStopSound = function (soundUrl) {
            if (soundUrl != "") {
                Laya.SoundManager.stopSound(soundUrl);
            }
        };
        /**停止播放所有音效（不包括背景音乐） */
        SoundManager.prototype.OnStopAllSound = function () {
            Laya.SoundManager.stopAllSound();
        };
        /**停止播放所有声音（包括背景音乐和音效） */
        SoundManager.prototype.OnStopAll = function () {
            Laya.SoundManager.stopAll();
        };
        return SoundManager;
    }());
    H52D_Framework.SoundManager = SoundManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SoundManager.js.map
/*
* 资源管理类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var ResourceManager = /** @class */ (function () {
        function ResourceManager() {
            this._cacheResList = [];
            //ui特效图集资源
            this._uiAtlasRes = [];
        }
        Object.defineProperty(ResourceManager, "Instance", {
            get: function () {
                if (ResourceManager._inst == null)
                    ResourceManager._inst = new ResourceManager();
                return ResourceManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        ResourceManager.prototype.Initialize = function (callBack) {
            var _this = this;
            //全局缓存资源不销毁
            this._cacheResList.push("res/ui/ui_common.atlas");
            this._cacheResList.push("res/ui/ui_icon.atlas");
            this._cacheResList.push("res/ui/ui_main.atlas");
            //预加载，首次进入游戏达到流畅
            this._cacheResList.push("res/ui/ui_sign.atlas");
            this._cacheResList.push("res/ui/ui_hero.atlas");
            this._cacheResList.push("res/ui/ui_action.atlas");
            this._cacheResList.push("res/ui/ui_camp.atlas");
            this._cacheResList.push("res/ui/ui_equip.atlas");
            this._cacheResList.push("res/ui/ui_shop.atlas");
            this._cacheResList.push("res/ui/ui_pet.atlas");
            this._cacheResList.push("res/ui/ui_head.atlas");
            this._cacheResList.push("res/ui/ui_setting.atlas");
            //加载缓存资源
            var loadedNum = 0;
            for (var i in this._cacheResList) {
                Laya.loader.load(this._cacheResList[i], Laya.Handler.create(this, function () {
                    loadedNum++;
                    // 检查数据表压缩包是否存在（打包情况下使用）
                    if (Laya.ResourceVersion.manifest && Laya.ResourceVersion.manifest["res/config/config1.zip"]) {
                        H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.UPDATE_LOADING_SLIDER_VALUE, [0.5 + loadedNum / _this._cacheResList.length * 0.5, "正在解压游戏配置信息，请稍后"]);
                    }
                    else {
                        H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.UPDATE_LOADING_SLIDER_VALUE, [loadedNum / _this._cacheResList.length, "加载中，请稍后"]);
                    }
                    if (loadedNum == _this._cacheResList.length) {
                        callBack.run();
                        //播放背景音效
                        H52D_Framework.SoundManager.Instance.OnPlayMusic("res/sound/background_sound.mp3");
                    }
                }));
            }
            H52D_Framework.Tick.Loop(1000 * 30, this, this.Dispose);
        };
        Object.defineProperty(ResourceManager.prototype, "uiAtlasData", {
            set: function (value) {
                if (this._uiAtlasRes.indexOf(value) == -1) {
                    this._uiAtlasRes.push(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 加载图集动画
         * @param ani 动画对象
         * @param url 图集路径
         * @param loaded 完成回调
         */
        ResourceManager.prototype.loadAtlas = function (ani, url, loaded) {
            this.uiAtlasData = url;
            ani.loadAtlas(url, Laya.Handler.create(this, function () {
                if (loaded) {
                    loaded.run();
                }
            }));
        };
        //释放资源
        ResourceManager.prototype.Dispose = function () {
            //当前内存大于G_CurrentMemoryMaxSize的时候清理资源
            var currentMemorySize = Laya.Stat.currentMemorySize / 1024 / 1024;
            if (currentMemorySize < G_CurrentMemoryMaxSize) {
                return;
            }
            //销毁散图资源
            for (var i = 0; i < this._uiAtlasRes.length; i++) {
                Laya.loader.clearTextureRes(this._uiAtlasRes[i]);
            }
            this._uiAtlasRes = [];
            //销毁缓存文件
            var total = Laya.ResourceManager.currentResourceManager.getResourcesLength();
            for (var i = total - 1; i >= 0; i--) {
                var res = Laya.ResourceManager.currentResourceManager.getResourceByIndex(i);
                if (!res || !res["constructor"] || res["constructor"]["name"] != "WebGLImage") {
                    continue;
                }
                if (res && this._cacheResList.indexOf(res.url) < 0) {
                    Laya.ResourceManager.currentResourceManager.removeResource(res);
                }
            }
        };
        return ResourceManager;
    }());
    H52D_Framework.ResourceManager = ResourceManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ResourceManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var GameLink = /** @class */ (function () {
        function GameLink() {
            this._urlParams = {};
            this._defaultGatewayIP = "127.0.0.1";
            this._defaultGatewayPort = 8888;
        }
        Object.defineProperty(GameLink.prototype, "urlParams", {
            // private readonly _defaultGatewayIP = "wss://ssjxzh5-agent.gyyx.cn";
            // private readonly _defaultGatewayPort: number = 20001;
            //private readonly _defaultGatewayIP = "140.143.155.252";
            //private readonly _defaultGatewayPort: number = 8887; 
            // 测试
            // private readonly _defaultGatewayIP = "140.143.155.252";
            // private readonly _defaultGatewayPort: number = 8866;
            get: function () {
                return this._urlParams;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameLink, "Instance", {
            get: function () {
                if (GameLink._inst == null)
                    GameLink._inst = new GameLink();
                return GameLink._inst;
            },
            enumerable: true,
            configurable: true
        });
        GameLink.prototype.Initialize = function () {
            this.SetGameParams();
        };
        // 设置游戏参数
        GameLink.prototype.SetGameParams = function () {
            this._urlParams['selServerIP'] = this._defaultGatewayIP;
            this._urlParams['selServerPort'] = this._defaultGatewayPort;
            this._urlParams['serverid'] = new Link().loginParams.serverid;
            this._urlParams['sid'] = new Link().loginParams.sid;
            this._urlParams['firstGame'] = 'false';
            this._urlParams['mac'] = '';
            this._urlParams['openid'] = new Link().loginParams.openid;
            this._urlParams['pf'] = new Link().loginParams.pf;
        };
        return GameLink;
    }());
    H52D_Framework.GameLink = GameLink;
    // 本地开发参数
    var Link = /** @class */ (function () {
        function Link() {
            this.loginParams = {
                openid: "",
                serverid: 1,
                sid: 1,
                pf: "pf",
                firstGame: "FALSE",
                openkey: null,
                seqid: null,
                pfkey: null,
                sig: null,
                mac: ""
            };
        }
        return Link;
    }());
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=GameLink.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var GameApplication = /** @class */ (function () {
        function GameApplication() {
        }
        Object.defineProperty(GameApplication.prototype, "ConfigManager", {
            get: function () {
                return this._configManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameApplication, "Inst", {
            get: function () {
                if (GameApplication._inst == null) {
                    GameApplication._inst = new GameApplication();
                }
                return GameApplication._inst;
            },
            enumerable: true,
            configurable: true
        });
        GameApplication.prototype.Startup = function () {
            var _this = this;
            //初始化层级属性
            H52D_Framework.SceneRoot = this.CreateUIRoot("SceneRoot");
            H52D_Framework.EffectRoot = this.CreateUIRoot("EffectRoot");
            H52D_Framework.ViewDownRoot = this.CreateUIRoot("ViewDownRoot");
            H52D_Framework.ViewDownRoot.on(Laya.Event.CLICK, this, this.OnClickEvent);
            H52D_Framework.NewGuidRoot = this.CreateUIRoot("NewGuidRoot");
            H52D_Framework.ViewUpRoot = this.CreateUIRoot("ViewUpRoot");
            H52D_Framework.ViewUpRoot.on(Laya.Event.CLICK, this, this.OnClickEvent);
            H52D_Framework.ViewToppestRoot = this.CreateUIRoot("ViewToppestRoot");
            H52D_Framework.ViewTipRoot = this.CreateUIRoot("ViewTipRoot");
            H52D_Framework.ViewStoryRoot = this.CreateUIRoot("ViewStoryRoot");
            H52D_Framework.UIManager.Instance.CreateUI("LoadingView", [H52D_Framework.ViewUpRoot], Laya.Handler.create(this, function () {
                //读取配置信息
                _this._configManager = new H52D_Framework.ConfigManager(Laya.Handler.create(_this, function () {
                    //初始化资源管理、并预加载一些资源
                    H52D_Framework.ResourceManager.Instance.Initialize(Laya.Handler.create(_this, function () {
                        //所有系统功能初始化
                        _this.Initialize();
                        H52D_Framework.UIManager.Instance.DestroyUI("LoadingView", [H52D_Framework.ViewUpRoot], null, true);
                    }));
                }));
            }));
        };
        /**创建uiRoot */
        GameApplication.prototype.CreateUIRoot = function (viewName) {
            var view = new Laya.View();
            view.name = viewName;
            view.width = G_StageWidth;
            view.height = G_StageHeight;
            view.centerX = 0;
            view.centerY = 0;
            view.mouseThrough = true;
            Laya.stage.addChild(view);
            var masksp = new Laya.Sprite();
            masksp.graphics.drawRect(0, 0, G_StageWidth, G_StageHeight, "#000000");
            view.mask = masksp;
            return view;
        };
        /**所有按钮的点击事件 */
        GameApplication.prototype.OnClickEvent = function (params) {
            var events = params.target._events;
            if (events && events.click) {
                //按钮点击效果
                if (events.click.length == undefined || events.click.length < 2 || !events.click[0])
                    return;
                var btn_1 = events.click[0].caller;
                //只对按钮生效
                if (!btn_1["stateNum"])
                    return;
                if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                    H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/check.mp3");
                }
                btn_1.scaleX = 1;
                btn_1.scaleY = 1;
                Laya.Tween.to(btn_1, { scaleX: 0.9, scaleY: 0.9 }, 100, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                    Laya.Tween.to(btn_1, { scaleX: 1, scaleY: 1 }, 100, Laya.Ease.linearIn);
                }));
            }
        };
        /**所有系统功能初始化 */
        GameApplication.prototype.Initialize = function () {
            H52D_Framework.GameLink.Instance.Initialize();
            H52D_Framework.BaiDuSDK.Instance.Initialize();
            H52D_Framework.LoginLogic.Instance.Initialize();
            H52D_Framework.MasterPlayer.Instance.Initialize();
            H52D_Framework.TipsLogic.Instance.Initialize();
            /** 特效 */
            H52D_Framework.EffectManager.Instance.Initialize();
            /** 道具背包 */
            H52D_Framework.BagManager.Instance.Initialize();
            /**商城数据加载 */
            H52D_Framework.ShopLogic.Instance.Initialize();
            /**英雄数据加载 */
            H52D_Framework.HeroManager.Instance.Initialize();
            H52D_Framework.MainRoleLogic.Instance.Initialize();
            H52D_Framework.MainActionLogic.Instance.Initialize();
            H52D_Framework.ViewUILogic.Instance.Initialize();
            /**排行榜数据加载 */
            H52D_Framework.RankLogic.Instance.Initialize();
            /**签到数据加载 */
            H52D_Framework.SignInLogic.Instance.Initialize();
            H52D_Framework.ChatLogic.Inst.Initialize();
            H52D_Framework.ShareLogic.Instance.Initialize();
            /** 基金加载 */
            H52D_Framework.FundLogic.Instance.Initialize();
            /**阵营数据加载 */
            H52D_Framework.CampManager.Instance.Initialize();
            H52D_Framework.MailLogic.Inst.Initialize();
            H52D_Framework.PrivilegeBuff.Instance;
            //赠送
            H52D_Framework.InteractLogic.Inst.Initialize();
            H52D_Framework.NoticeLogic.Inst.Initialize();
            /**新手内容加载*/
            H52D_Framework.Guidance.Instance.Initialize();
            /**离线收益 */
            H52D_Framework.ProfManager.Instance.Initialize();
            /**神兽数据加载 */
            H52D_Framework.PetManager.Instance.Initialize();
            /**时空法器数据加载 */
            H52D_Framework.EquipManager.Instance.Initialize();
            /**运营活动数据加载 */
            H52D_Framework.OActivityLogic.Instance.Initialize();
            /**世界boss 数据加载 */
            H52D_Framework.WroldBossManager.Instance.Initialize();
        };
        return GameApplication;
    }());
    H52D_Framework.GameApplication = GameApplication;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=GameApplication.js.map
/*
* 百度sdk;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var BaiDuSDK = /** @class */ (function () {
        function BaiDuSDK() {
            /**是否是百度平台 */
            this._isBaiDu = false;
            /**百度用户唯一id */
            this._openid = "";
            /**获取百度昵称 */
            this._nickname = "";
            /**获取百度账号头像地址(https://......) */
            this._headimgUrl = "";
            /**获取百度用户性别(女:0,男:1) */
            this._sex = -1;
        }
        Object.defineProperty(BaiDuSDK, "Instance", {
            get: function () {
                if (BaiDuSDK._inst == null) {
                    BaiDuSDK._inst = new BaiDuSDK();
                }
                return BaiDuSDK._inst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaiDuSDK.prototype, "isBaiDu", {
            get: function () {
                return this._isBaiDu;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaiDuSDK.prototype, "openid", {
            get: function () {
                return this._openid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaiDuSDK.prototype, "nickname", {
            get: function () {
                return this._nickname;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaiDuSDK.prototype, "headimgUrl", {
            get: function () {
                return this._headimgUrl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaiDuSDK.prototype, "sex", {
            get: function () {
                return this._sex;
            },
            enumerable: true,
            configurable: true
        });
        /**初始化 */
        BaiDuSDK.prototype.Initialize = function () {
            this.GetEnv();
        };
        /**接收小程序发来的消息 */
        BaiDuSDK.prototype.GetEnv = function () {
            if (!window["swan"]) {
                H52D_Framework.UIManager.Instance.CreateUI("LoginView", [H52D_Framework.ViewDownRoot]);
                return;
            }
            window["swan"].webView.getEnv(function (res) {
                BaiDuSDK.Instance._isBaiDu = res.smartprogram;
                if (BaiDuSDK.Instance._isBaiDu) {
                    var url = window.location.search;
                    var params = BaiDuSDK.Instance.ParseQueryString(url);
                    BaiDuSDK.Instance._openid = params["openid"] || "";
                    BaiDuSDK.Instance._nickname = params["nickname"] || "";
                    BaiDuSDK.Instance._headimgUrl = params["headimgUrl"] || "";
                    BaiDuSDK.Instance._sex = params["sex"] || -1;
                    var InviteRoleID = params["inviteRoleID"] || "";
                    H52D_Framework.LoginLogic.Instance.Login(BaiDuSDK.Instance.openid, InviteRoleID);
                }
                else {
                    H52D_Framework.UIManager.Instance.CreateUI("LoginView", [H52D_Framework.ViewDownRoot]);
                }
            });
        };
        /**
         * 解析网页参数
         * @param url 网页地址
         */
        BaiDuSDK.prototype.ParseQueryString = function (url) {
            var params = {};
            if (url == "") {
                return params;
            }
            var arr = url.split("?");
            var arr1 = arr[1].split("&");
            for (var i = 0; i < arr1.length; i++) {
                var arr2 = arr1[i].split('=');
                if (!arr2[1]) {
                    params[arr2[0]] = 'true';
                }
                else if (params[arr2[0]]) {
                    var arr3 = [params[arr2[0]]];
                    arr3.push(arr2[1]);
                    params[arr2[0]] = arr3;
                }
                else {
                    params[arr2[0]] = decodeURI(arr2[1]);
                }
            }
            return params;
        };
        /**
         * 前往充值
         * @param goodsType 商品类型
         * @param goodsId 商品id
         * @param goodsDesc 商品描述
         */
        BaiDuSDK.prototype.ToRecharge = function (goodsType, goodsId, goodsDesc) {
            if (!this._isBaiDu) {
                H52D_Framework.RemoteCall.Instance.Send('K_ChgCharge', goodsType, goodsId);
                return;
            }
            if (Laya.Browser.onIOS) {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("受苹果政策影响，IOS充值暂未开放。请用户到安卓系统上充值。");
                return;
            }
            var price = H52D_Framework.ChargeConfig[goodsType][goodsId].Price;
            if (!price) {
                return;
            }
            window["swan"].webView.navigateTo({
                url: '/pages/payment/payment?' +
                    'openid=' + H52D_Framework.GameLink.Instance.urlParams["openid"] + '&' +
                    'payTime=' + H52D_Framework.Time.serverMilliSecodes + '&' +
                    'price=' + price + '&' +
                    'dealTitle=' + goodsDesc + '&' +
                    'serverid=' + H52D_Framework.GameLink.Instance.urlParams["serverid"] + '&' +
                    'roleid=' + H52D_Framework.MasterPlayer.Instance.player.ID + '&' +
                    'rolename=' + H52D_Framework.MasterPlayer.Instance.player.Name + '&' +
                    'goodsType=' + goodsType + '&' +
                    'goodsId=' + goodsId
            });
        };
        /**
         * 分享
         */
        BaiDuSDK.prototype.CallTieBa = function (nType, tParam) {
            var _a;
            if (!this._isBaiDu) {
                var tInfo = (_a = {},
                    _a["calltype"] = nType,
                    _a["roleid"] = H52D_Framework.MasterPlayer.Instance.player.ID,
                    _a);
                if (tParam) {
                    for (var k in tParam) {
                        tInfo[k] = tParam[k];
                    }
                }
                H52D_Framework.RemoteCall.Instance.Send("K_ReqShareGame", tInfo);
                return;
            }
            window["swan"].webView.navigateTo({
                url: '/pages/calltieba/calltieba?' +
                    'calltype=' + nType + '&' +
                    'roleid=' + H52D_Framework.MasterPlayer.Instance.player.ID + '&' +
                    'param=' + JSON.stringify(tParam || null)
            });
        };
        return BaiDuSDK;
    }());
    H52D_Framework.BaiDuSDK = BaiDuSDK;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BaiDuSDK.js.map
/**
 * 加载、播放图集动画
 */
var H52D_Framework;
(function (H52D_Framework) {
    var Animation = /** @class */ (function () {
        /**
         * 创建图集动画
         * @param ui 父对象
         * @param url 图集路径
         * @param bLoop 是否循环
         * @param posX x偏移
         * @param posY y偏移
         * @param scaleX x大小
         * @param scaleY y大小
         * @param interval 播放间隔时间（毫秒）
         * @param callBack 回调
         */
        function Animation(ui, url, bLoop, posX, posY, scaleX, scaleY, interval, callBack) {
            if (posX === void 0) { posX = 0; }
            if (posY === void 0) { posY = 0; }
            if (scaleX === void 0) { scaleX = 1; }
            if (scaleY === void 0) { scaleY = 1; }
            if (interval === void 0) { interval = 33; }
            var _this = this;
            this._ani = new Laya.Animation();
            // 加载图集动画
            H52D_Framework.ResourceManager.Instance.loadAtlas(this._ani, url, Laya.Handler.create(this, function () {
                if (!ui || !_this._ani || !ui._bitmap) {
                    if (callBack) {
                        callBack.run();
                    }
                    _this.Destroy();
                    return;
                }
                // 设置播放间隔（单位：毫秒）
                _this._ani.interval = interval;
                // 播放图集动画
                _this._ani.play(null, bLoop);
                var bounds = _this._ani.frames[0].getBounds();
                _this._ani.pivot(bounds.width / 2, bounds.height / 2);
                _this._ani.pos(ui.width / 2, ui.height / 2);
                _this._ani.pos(_this._ani.x + posX, _this._ani.y + posY);
                _this._ani.scale(scaleX, scaleY);
                ui.addChild(_this._ani);
                if (callBack) {
                    callBack.run();
                }
                // 非循环的自动销毁
                if (!bLoop) {
                    _this._ani.on(Laya.Event.COMPLETE, _this, function () {
                        this.Destroy();
                    });
                }
            }));
        }
        /**
         * 销毁图集特效
         */
        Animation.prototype.Destroy = function () {
            if (this._ani) {
                this._ani.offAll();
                this._ani.destroy(true);
                this._ani = null;
            }
        };
        return Animation;
    }());
    H52D_Framework.Animation = Animation;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Animation.js.map
var SystemTipsEnum;
(function (SystemTipsEnum) {
    SystemTipsEnum[SystemTipsEnum["CommonEnum"] = 1] = "CommonEnum";
    SystemTipsEnum[SystemTipsEnum["RoleEnum"] = 2] = "RoleEnum";
    SystemTipsEnum[SystemTipsEnum["ItemEnum"] = 3] = "ItemEnum";
})(SystemTipsEnum || (SystemTipsEnum = {}));
var H52D_Framework;
(function (H52D_Framework) {
    var TipsLogic = /** @class */ (function () {
        function TipsLogic() {
            this._tipsArr = [];
            this._tipsMaxLen = 100;
            //---------------------------------------------------------服务器断线提示------------------------------------------------------------
            //离线类型
            this.offLineType = OffLineEnum.eUnknow;
            this._disConnectTips = {
                1: "与服务器断开连接(#%s)！<br>",
                2: "您的账号将在%s被解封，请大侠耐心等待！",
                3: "登陆异常！您的账号在IP：%s登录！您已被迫下线！",
                4: "抱歉,您已被GM请出游戏！",
                5: "服务器已关闭,请诸位耐心等候！",
                6: "登录失败,请大侠重新登陆！",
                7: "登录服务器出现异常,请重新登陆！",
                8: "当前在线人数已超出服务器上限，请大侠重新登录！",
                9: "恭喜您,改名成功，请重新登录！",
                10: "当前网络出现异常，请重新登录！",
                11: "检测到您正在使用外挂, 请关闭后重试！",
                12: "您的数据出现异常，请重新登录！",
            };
        }
        Object.defineProperty(TipsLogic, "Instance", {
            get: function () {
                if (TipsLogic._inst == null)
                    TipsLogic._inst = new TipsLogic();
                return TipsLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        TipsLogic.prototype.Initialize = function () {
            this.ShowTweenBox();
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SystemTips", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_LastError", this);
        };
        /**获得物品提示 */
        TipsLogic.prototype.OpenGoodsProTips = function (params) {
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, params]);
        };
        /**
         * @系统提示
         * @param msg 提示信息
         */
        TipsLogic.prototype.OpenTips = function (msg) {
            var object = {};
            object[1] = msg;
            this._tipsArr.unshift(object);
            if (this._tipsArr.length >= this._tipsMaxLen) {
                this._tipsArr.splice(this._tipsMaxLen - 1, 1);
            }
        };
        TipsLogic.prototype.ShowTweenBox = function () {
            var _this = this;
            H52D_Framework.Tick.ClearAll(this);
            if (this._tipsArr.length <= 0) {
                H52D_Framework.Tick.Once(500, this, this.ShowTweenBox);
                return;
            }
            var data = this._tipsArr[0];
            H52D_Framework.UIManager.Instance.InstanceUI("TipsView", [H52D_Framework.ViewTipRoot, data], Laya.Handler.create(this, function () {
                H52D_Framework.Tick.Once(400, _this, _this.ShowTweenBox);
                _this._tipsArr.splice(0, 1);
            }));
        };
        //系统弹框
        TipsLogic.prototype.OpenMessageBox = function (msg, okFun, cancelFun, closeTime) {
            H52D_Framework.UIManager.Instance.CreateUI("MessageBoxView", [H52D_Framework.ViewToppestRoot, msg, okFun, cancelFun, closeTime]);
        };
        /**
         * @系统提示
         * @param msg 提示信息
         * @param args %s 参数
         */
        TipsLogic.prototype.OpenSystemTips = function (msg) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (typeof (msg) == "string") {
                msg = msg;
            }
            else if (typeof (msg) == "number") {
                if (H52D_Framework.SysPromptConfig[msg]) {
                    msg = H52D_Framework.SysPromptConfig[msg].strPromptInfo; //系统提示
                }
                else if (H52D_Framework.StringInfoConfig[msg]) {
                    msg = H52D_Framework.StringInfoConfig[msg].s; //国际化
                }
                else {
                    msg = "";
                }
            }
            else {
                msg = "";
            }
            msg = H52D_Framework.Format.apply(void 0, [msg].concat(args));
            TipsLogic.Instance.OpenTips(msg);
        };
        /**
         * 服务器发来的系统提示
         * @param buf
         */
        TipsLogic.prototype.C_SystemTips = function (buf) {
            var tipsID = buf[0];
            var params = buf[1];
            var data = H52D_Framework.SysPromptConfig[tipsID];
            if (!data) {
                H52D_Framework.Debugger.LogError("错误的系统提示提示ID: " + tipsID);
                return;
            }
            if (data.promptPos == 1) {
                this.OpenSystemTips1(data, params || []);
            }
            else if (data.promptPos == 2) {
                this.OpenSystemTips2(data, params || []);
            }
            else if (data.promptPos == 3) {
                var strName = "";
                if (buf && buf[1] && buf[1][1] && buf[1][1][2]) {
                    strName = buf[1][1][2];
                }
                this.OpenSystemTips4(data, params || [], tipsID, strName);
            }
        };
        //系统提示信息
        TipsLogic.prototype.OpenSystemTips1 = function (data, params) {
            var msg = H52D_Framework.Format(data.strPromptInfo, params[1], params[2], params[3], params[4], params[5], params[6], params[7], params[8], params[9], params[10]);
            TipsLogic.Instance.OpenSystemTips(msg);
        };
        //弹出提示、二级确认面板
        TipsLogic.prototype.OpenSystemTips2 = function (data, params) {
            var msg = H52D_Framework.Format(data.strPromptInfo, params[1], params[2], params[3], params[4], params[5], params[6], params[7], params[8], params[9], params[10]);
            TipsLogic.Instance.OpenMessageBox(msg);
        };
        //系统公告(走马灯)
        TipsLogic.prototype.OpenSystemTips4 = function (data, params, tipsID, strName) {
            var Str = [];
            for (var i in params) {
                switch (params[i][1]) {
                    case SystemTipsEnum.CommonEnum: {
                        Str.push(params[i][2]);
                        break;
                    }
                    case SystemTipsEnum.RoleEnum: {
                        Str.push(H52D_Framework.GetHtmlStrByColor(params[i][2], "#ffec50"));
                        break;
                    }
                    case SystemTipsEnum.ItemEnum: {
                        var item = new H52D_Framework.ItemData(params[i][2]);
                        var itemName = item.name;
                        var ret = H52D_Framework.GetHtmlStrByColor(itemName, H52D_Framework.BaseDefine.LabelColor[H52D_Framework.ItemConfig[params[i][2]].dwItemQuality]);
                        Str.push(ret);
                        break;
                    }
                    default: {
                        break;
                    }
                }
            }
            var msg = H52D_Framework.Format(data.strPromptInfo, Str[0], Str[1], Str[2], Str[3], Str[4], Str[5], Str[6], Str[7], Str[8], Str[9], Str[10]);
            var id = tipsID;
            if (id == 100181 || id == 100235) {
                // msg = msg + id + "~" + GetHtmlStrByColor(strName, "#ffec50");
                msg = msg + id + "~" + strName;
            }
            H52D_Framework.Event.DispatchEvent("NoticeEvent", [msg]);
        };
        /**
         * 服务器返回账号掉线信息
         * @param type 掉线类型
         * @param data 提示数据
         */
        TipsLogic.prototype.C_LastError = function (buf) {
            this.offLineType = buf[0];
            this.offLineData = buf[1];
        };
        /**
         * 服务器连接断开了，给予提示信息
         */
        TipsLogic.prototype.OnDisConnect = function () {
            var str = H52D_Framework.Format(this._disConnectTips[1], this.offLineType);
            //封号踢人
            if (OffLineEnum.eBanPlay == this.offLineType) {
                var tstr = H52D_Framework.GetFormatTime(this.offLineData);
                str += H52D_Framework.Format(this._disConnectTips[2], tstr);
                H52D_Framework.RemoteCall.Instance.CloseReConnect();
            }
            //顶号（重复登录）
            else if (OffLineEnum.eRepeatLogin == this.offLineType) {
                str += H52D_Framework.Format(this._disConnectTips[3], this.offLineData);
                H52D_Framework.RemoteCall.Instance.CloseReConnect();
            }
            //GM踢人，不封号
            else if (OffLineEnum.eGMKick == this.offLineType) {
                str += this._disConnectTips[4];
                H52D_Framework.RemoteCall.Instance.CloseReConnect();
            }
            //服务器关闭
            else if (OffLineEnum.eServerShutdown == this.offLineType) {
                str += this._disConnectTips[5];
                H52D_Framework.RemoteCall.Instance.CloseReConnect();
            }
            //登陆失败
            else if (OffLineEnum.eLoginFailed == this.offLineType) {
                str += this._disConnectTips[6];
                H52D_Framework.RemoteCall.Instance.CloseReConnect();
            }
            // 登陆服务器错误
            else if (OffLineEnum.eLoginServerError == this.offLineType) {
                str += this._disConnectTips[7];
                H52D_Framework.RemoteCall.Instance.CloseReConnect();
            }
            //服务器高负载
            else if (OffLineEnum.eLoginFull == this.offLineType) {
                str += this._disConnectTips[8];
                H52D_Framework.RemoteCall.Instance.CloseReConnect();
            }
            //改名被踢
            else if (OffLineEnum.eReName == this.offLineType) {
                str += this._disConnectTips[9];
                H52D_Framework.RemoteCall.Instance.CloseReConnect();
            }
            //网络异常
            else if (OffLineEnum.eUnknow == this.offLineType) {
                if (H52D_Framework.MasterPlayer.Instance.bInGame) {
                    return;
                }
                else {
                    str += this._disConnectTips[10];
                }
            }
            //使用外挂，恶意软件
            else if (OffLineEnum.eShield == this.offLineType) {
                str += this._disConnectTips[11];
                H52D_Framework.RemoteCall.Instance.CloseReConnect();
            }
            //未知错误
            else {
                //已经在游戏中，不提示，走断线重连
                if (H52D_Framework.MasterPlayer.Instance.bInGame) {
                    return;
                }
                else {
                    str += this._disConnectTips[12];
                }
            }
            TipsLogic.Instance.OpenMessageBox(str, Laya.Handler.create(this, function () {
                location.reload();
            }));
        };
        return TipsLogic;
    }());
    H52D_Framework.TipsLogic = TipsLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TipsLogic.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 国际化配置表信息类
     */
    var CStrValueConfig = /** @class */ (function () {
        function CStrValueConfig() {
        }
        Object.defineProperty(CStrValueConfig, "Inst", {
            get: function () {
                if (!this._inst) {
                    this._inst = new CStrValueConfig();
                }
                return this._inst;
            },
            enumerable: true,
            configurable: true
        });
        /**获取国际化文字 */
        CStrValueConfig.prototype.GetText = function (id) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (!H52D_Framework.StringInfoConfig[id]) {
                H52D_Framework.Debugger.LogError("错误的国际化ID --> " + id);
                return "";
            }
            var str = H52D_Framework.StringInfoConfig[id].s;
            if (args.length > 0) {
                str = H52D_Framework.Format.apply(void 0, [str].concat(args));
            }
            return str;
        };
        /**获取系统提示文字 */
        CStrValueConfig.prototype.GetSysText = function (id) {
            if (!H52D_Framework.SysPromptConfig[id]) {
                H52D_Framework.Debugger.LogError("错误的系统提示ID --> " + id);
                return "";
            }
            return H52D_Framework.SysPromptConfig[id].strPromptInfo;
        };
        return CStrValueConfig;
    }());
    H52D_Framework.CStrValueConfig = CStrValueConfig;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=StringConfig.js.map
/*
* 敏感词系统;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var SensitiveWord = /** @class */ (function () {
        function SensitiveWord() {
        }
        Object.defineProperty(SensitiveWord, "Instance", {
            get: function () {
                if (SensitiveWord._inst == null)
                    SensitiveWord._inst = new SensitiveWord();
                return SensitiveWord._inst;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 检测参数字符串是否存在敏感词
         * @param strText 字符串
         */
        SensitiveWord.prototype.Check = function (strText) {
            for (var i in H52D_Framework.SensitiveWords) {
                if (strText.indexOf(H52D_Framework.SensitiveWords[i]) != -1) {
                    return true;
                }
            }
            return false;
        };
        /**
         * 替换参数有字符串中的所有敏感词，并返回替换后的字符串和字符串中包含的敏感词数量
         * @param strText 字符串
         * @param replaceText 替换的字符
         */
        SensitiveWord.prototype.Replace = function (strText, replaceText) {
            var retText = strText;
            var replace = replaceText || "**";
            for (var i in H52D_Framework.SensitiveWords) {
                if (retText.indexOf(H52D_Framework.SensitiveWords[i]) != -1) {
                    retText = retText.replace(H52D_Framework.SensitiveWords[i], replace);
                }
            }
            return retText;
        };
        return SensitiveWord;
    }());
    H52D_Framework.SensitiveWord = SensitiveWord;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SensitiveWord.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var NoticeLogic = /** @class */ (function () {
        function NoticeLogic() {
            //公告信息容器
            this._noticeMsgArr = [];
        }
        Object.defineProperty(NoticeLogic, "Inst", {
            get: function () {
                if (NoticeLogic._inst == null)
                    NoticeLogic._inst = new NoticeLogic();
                return NoticeLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        NoticeLogic.prototype.Initialize = function () {
            H52D_Framework.Event.RegistEvent("NoticeEvent", Laya.Handler.create(this, this.NoticeEvent));
        };
        NoticeLogic.prototype.NoticeEvent = function (buf) {
            //系统聊天
            if (buf != "" && buf) {
                // ChatLogic.Inst.SaveMsg(4, -1, buf, "", 1, 0, "", 1);
                H52D_Framework.Event.DispatchEvent("UpdateAllPannelEvent", 7);
                H52D_Framework.Event.DispatchEvent("ChatMsgEvent", [{ 1: 4, 2: "", 3: buf, 4: -1, 5: 0 }]);
            }
            if (buf.search("100181") != -1 || buf.search("100235") != -1) {
                buf = buf.replace("100181", "");
                buf = buf.replace("100235", "");
            }
            buf = buf.split("~")[0];
            this._noticeMsgArr.unshift(buf);
        };
        NoticeLogic.prototype.GetNoticeMsg = function () {
            if (this._noticeMsgArr == null || this._noticeMsgArr.length == 0) {
                return "";
            }
            var msg = this._noticeMsgArr.pop();
            return msg || "";
        };
        return NoticeLogic;
    }());
    H52D_Framework.NoticeLogic = NoticeLogic;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=NoticeLogic.js.map
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var InstMsg = /** @class */ (function () {
        function InstMsg() {
            this._InstID = 0;
            this._FreeList = [];
            this._UseMap = {};
            this._Num = 0;
        }
        /** 获取一个新的实力ID */
        InstMsg.prototype.GetNewInstID = function () {
            var nNewInstID = 0;
            if (this._FreeList.length > 0) {
                nNewInstID = this._FreeList.pop();
            }
            else {
                this._InstID += 1;
                nNewInstID = this._InstID;
            }
            this._UseMap[nNewInstID] = 1;
            this._Num += 1;
            //Debugger.Log( "Avatar:" + this._Num )
            return nNewInstID;
        };
        /** 释放回收ID */
        InstMsg.prototype.RemInstID = function (nInstID) {
            if (this._UseMap[nInstID] != 1) {
                return false;
            }
            this._UseMap[nInstID] = 0;
            this._FreeList.push(nInstID);
            this._Num -= 1;
            return true;
        };
        return InstMsg;
    }());
    H52D_Framework.InstMsg = InstMsg;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=InstMsg.js.map
/**
 * 所有配置表调用接口，请按规则添加
 */
var H52D_Framework;
(function (H52D_Framework) {
    var GameConfig = /** @class */ (function () {
        function GameConfig(cls) {
            this.Init(cls);
        }
        GameConfig.data = function (key) {
            GameConfig._data[key];
        };
        GameConfig.prototype.Init = function (cls) {
            H52D_Framework.ActiveSkillConfig = cls.Get("ActiveSkillConfig");
            H52D_Framework.ActivityConfig = cls.Get("ActivityConfig");
            H52D_Framework.AsideConfig = cls.Get("AsideConfig");
            H52D_Framework.ChargeConfig = cls.Get("ChargeConfig");
            H52D_Framework.CustomspassConfig = cls.Get("CustomspassConfig");
            H52D_Framework.FoundationConfig = cls.Get("FoundationConfig");
            H52D_Framework.GameParamConfig = cls.Get("GameParamConfig");
            H52D_Framework.GangConfig = cls.Get("GangConfig");
            H52D_Framework.GangLevelUpConfig = cls.Get("GangLevelUpConfig");
            H52D_Framework.GangDonateConfig = cls.Get("GangDonateConfig");
            H52D_Framework.GmConfig = cls.Get("GmConfig");
            H52D_Framework.HeroAdvanceConfig = cls.Get("HeroAdvanceConfig");
            H52D_Framework.HeroConfig = cls.Get("HeroConfig");
            H52D_Framework.HeroUpgrateConfig = cls.Get("HeroUpgrateConfig");
            H52D_Framework.HeroPeckConfig = cls.Get("HeroPeckConfig");
            H52D_Framework.InvitationConfig = cls.Get("InvitationConfig");
            H52D_Framework.ItemConfig = cls.Get("ItemConfig");
            H52D_Framework.KickingConfig = cls.Get("KickingConfig");
            H52D_Framework.LotteryConfig = cls.Get("LotteryConfig");
            H52D_Framework.Mail = cls.Get("Mail");
            H52D_Framework.MarketConfig = cls.Get("MarketConfig");
            H52D_Framework.MailConfig = cls.Get("MailConfig");
            H52D_Framework.MonstorConfig = cls.Get("MonstorConfig");
            H52D_Framework.OpenGradeConfig = cls.Get("OpenGradeConfig");
            H52D_Framework.PassiveSkillConfig = cls.Get("PassiveSkillConfig");
            H52D_Framework.PrivilegeConfig = cls.Get("PrivilegeConfig");
            H52D_Framework.PetConfig = cls.Get("petConfig");
            H52D_Framework.QualityValue = cls.Get("QualityValue");
            H52D_Framework.RandomNameConfig = cls.Get("RandomNameConfig");
            H52D_Framework.RewardConfig = cls.Get("RewardConfig");
            H52D_Framework.RoleLevelUpConfig = cls.Get("RoleLevelUpConfig");
            H52D_Framework.RoleSkillUpConfig = cls.Get("RoleSkillUpConfig");
            H52D_Framework.SceneConfig = cls.Get("SceneConfig");
            H52D_Framework.SensitiveWords = cls.Get("SensitiveWords");
            H52D_Framework.SignConfig = cls.Get("SignConfig");
            H52D_Framework.StatusConfig = cls.Get("StatusConfig");
            H52D_Framework.StringInfoConfig = cls.Get("StringInfoConfig");
            H52D_Framework.SysPromptConfig = cls.Get("SysPromptConfig");
            H52D_Framework.PresentConfig = cls.Get("PresentConfig");
            H52D_Framework.PetConfig = cls.Get("petConfig");
            H52D_Framework.LineConfig = cls.Get("Line");
            H52D_Framework.DayAchieveConfig = cls.Get("DayAchieveConfig");
            H52D_Framework.AchieveConfig = cls.Get("AchieveConfig");
            H52D_Framework.GroupConfig = cls.Get("GroupConfig");
            H52D_Framework.HeroWordConfig = cls.Get("HeroWordConfig");
            H52D_Framework.MonsterWordConfig = cls.Get("MonsterWordConfig");
            H52D_Framework.PetWordConfig = cls.Get("PetWordConfig");
            H52D_Framework.SceneAnimConfig = cls.Get("SceneAnimConfig");
            H52D_Framework.EquipConfig = cls.Get("EquipConfig");
            H52D_Framework.SuitConfig = cls.Get("SuitConfig");
            H52D_Framework.ChargeReturnConfig = cls.Get("ChargeReturnConfig");
            H52D_Framework.SevenConfig = cls.Get("SevenConfig");
            H52D_Framework.StoryConfig = cls.Get("StoryConfig");
        };
        return GameConfig;
    }());
    H52D_Framework.GameConfig = GameConfig;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=GameConfig.js.map
/*
* 邮件配置文件类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var ConfigSystem = /** @class */ (function () {
        function ConfigSystem() {
            this._weaponArr = {};
            var gamePar = H52D_Framework.GameParamConfig['WeaponAndMethod'];
            for (var i in gamePar) {
                for (var j in gamePar[i]) {
                    var type = gamePar[i][j][1];
                    if (!this._weaponArr[type]) {
                        this._weaponArr[type] = [];
                    }
                    this._weaponArr[type].push(gamePar[i][j][2]);
                }
            }
            this._mail_Cfg_FB = H52D_Framework.MailConfig;
        }
        Object.defineProperty(ConfigSystem, "Inst", {
            get: function () {
                if (ConfigSystem._inst == null)
                    ConfigSystem._inst = new ConfigSystem();
                return ConfigSystem._inst;
            },
            enumerable: true,
            configurable: true
        });
        // 获取中文信息
        ConfigSystem.prototype.GetStringInfo = function (stringId) {
            var str = H52D_Framework.CStrValueConfig.Inst.GetText(stringId);
            return str;
        };
        //  获取邮件标题
        ConfigSystem.prototype.GetMailTitle = function (mailType) {
            var str = '';
            if (this._mail_Cfg_FB[mailType]) {
                str = this.GetStringInfo(this._mail_Cfg_FB[mailType].dwTitle);
            }
            return str;
        };
        // 获取邮件正文
        ConfigSystem.prototype.GetMailContent = function (mailType) {
            var str = '';
            if (this._mail_Cfg_FB[mailType]) {
                str = this.GetStringInfo(this._mail_Cfg_FB[mailType].dwContent);
            }
            return str;
        };
        // 添加一条邮件信息
        ConfigSystem.prototype.SetNewMail = function (InstId, mailTitle, mailContent) {
            // 运营邮件标记
            this._mail_Cfg_FB[InstId + 10000] = {
                "dwContent": mailContent,
                "dwTitle": mailTitle
            };
        };
        // 获取游戏参数
        ConfigSystem.prototype.GetGameParmas = function (text) {
            return H52D_Framework.GameParamConfig[text];
        };
        // 获取物品详细信息
        ConfigSystem.prototype.GetItemInfo = function (itemId) {
            return H52D_Framework.ItemConfig[itemId];
        };
        // 获取提示信息
        ConfigSystem.prototype.GetSysPrompt = function (cfgId) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var str = H52D_Framework.SysPromptConfig[cfgId].strPromptInfo;
            if (args.length > 0) {
                str = H52D_Framework.Format.apply(void 0, [str].concat(args));
            }
            return str;
        };
        // // 获取开启等级
        // public GetOpenGradeLv(cfgId: any) {
        //     return OpenGrade_Cfg[cfgId].Level;
        // }
        // 获取属性价值
        ConfigSystem.prototype.GetQualityValue = function (qualityId) {
            return H52D_Framework.QualityValue[qualityId].dwValue;
        };
        // 属性对应战斗力
        ConfigSystem.prototype.GetSword = function (attrId, attrNum) {
            return Math.floor(attrNum * H52D_Framework.QualityValue[attrId].dwValue);
        };
        // 获取属性名称
        ConfigSystem.prototype.GetQualityName = function (qualityId) {
            return H52D_Framework.CStrValueConfig.Inst.GetText(H52D_Framework.QualityValue[qualityId].dwName);
        };
        // 获取被动技能名称
        ConfigSystem.prototype.GetPasSkillName = function (skillId) {
            return this.GetStringInfo(H52D_Framework.PassiveSkillConfig[skillId].nameId);
        };
        // 获取被动技能图标
        ConfigSystem.prototype.GetPasSkillIcon = function (skillId) {
            return H52D_Framework.PassiveSkillConfig[skillId].strIcon;
        };
        // 获取被动技能描述ID
        ConfigSystem.prototype.GetPasSkillDes = function (skillId) {
            return H52D_Framework.PassiveSkillConfig[skillId].descId;
        };
        return ConfigSystem;
    }());
    H52D_Framework.ConfigSystem = ConfigSystem;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ConfigSystem.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 格式化字符串（替换%s）
     * @param value 字符串
     * @param args 替换的参数
     */
    function Format(str) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var params = args.slice();
        var index = 0;
        while (str.search("%S") != -1) {
            str = str.replace('%S', "%s");
        }
        while (str.search("%s") != -1) {
            str = str.replace('%s', params[index]);
            ++index;
        }
        return str;
    }
    H52D_Framework.Format = Format;
    /**Object Array Map 类型判断长度用
     *
     */
    function GetTabLength(tab) {
        var leght = 0;
        for (var o in tab) {
            if (o) {
                leght++;
            }
        }
        return leght;
    }
    H52D_Framework.GetTabLength = GetTabLength;
    /**
     * 判断对象是否为空
     * @param object 对象
     */
    function ObjIsEmpty(object) {
        var ret = true;
        for (var key in object) {
            ret = false;
            break;
        }
        return ret;
    }
    H52D_Framework.ObjIsEmpty = ObjIsEmpty;
    /**对象的长度 */
    function ObjLength(object) {
        var length = 0;
        for (var key in object) {
            length++;
        }
        return length;
    }
    H52D_Framework.ObjLength = ObjLength;
    /**
     * 判断字符串是否为空
     * @param str 字符串
     */
    function StringIsEmpty(str) {
        var ret = true;
        if (str && str.trim() != "") {
            ret = false;
        }
        return ret;
    }
    H52D_Framework.StringIsEmpty = StringIsEmpty;
    /**
     * 十进制转成二进制
     * @param num
     */
    function TenToTwo(num) {
        return num.toString(2);
    }
    H52D_Framework.TenToTwo = TenToTwo;
    /**
     * 二进制转成十进制
     * @param str
     */
    function TwoToTen(str) {
        return parseInt(str, 2);
    }
    H52D_Framework.TwoToTen = TwoToTen;
    /**
     * 获取本地变量
     * @param key 键值
     */
    function GetLocalStorage(key, bOnly) {
        if (bOnly) {
            return Laya.LocalStorage.getItem(key + H52D_Framework.MasterPlayer.Instance.player.ID);
        }
        else {
            return Laya.LocalStorage.getItem(key);
        }
    }
    H52D_Framework.GetLocalStorage = GetLocalStorage;
    /**
     * 设置本地变量
     * @param key 键值
     * @param value 值
     * @param bOnly 唯一性
     */
    function SetLocalStorage(key, value, bOnly) {
        if (bOnly) {
            Laya.LocalStorage.setItem(key + H52D_Framework.MasterPlayer.Instance.player.ID, value);
        }
        else {
            Laya.LocalStorage.setItem(key, value);
        }
    }
    H52D_Framework.SetLocalStorage = SetLocalStorage;
    /**
     * 获取姓氏和名字的个数
     */
    function GetNameNum() {
        var n1 = 0;
        var n2 = 0;
        var n3 = 0;
        var n4 = 0;
        for (var i in H52D_Framework.RandomNameConfig) {
            var v = H52D_Framework.RandomNameConfig[i];
            if (v.strSurnameBoy != "") {
                ++n1;
            }
            if (v.strSurnameGirl != "") {
                ++n2;
            }
            if (v.strGirl != "") {
                ++n3;
            }
            if (v.strBoy != "") {
                ++n4;
            }
        }
        return [n1, n2, n3, n4];
    }
    H52D_Framework.GetNameNum = GetNameNum;
    /**
     * 随机姓名
     * @param gender 性别
     */
    function GetRandName(gender) {
        //随机取名        
        var tLength = GetNameNum();
        var lNum = 0;
        var fNum = 0;
        var lStr = "";
        var fStr = "";
        if (gender == GenderEnum.Female) {
            lNum = tLength[2];
            fNum = tLength[0];
            lStr = "strGirl";
            fStr = "strSurnameGirl";
        }
        else if (gender == GenderEnum.Male) {
            lNum = tLength[3];
            fNum = tLength[1];
            lStr = "strBoy";
            fStr = "strSurnameBoy";
        }
        var fNameIndex = Math.ceil(fNum * Math.random());
        var lNameIndex = Math.ceil(lNum * Math.random());
        var strName = H52D_Framework.RandomNameConfig[fNameIndex][fStr] + H52D_Framework.RandomNameConfig[lNameIndex][lStr];
        return strName;
    }
    H52D_Framework.GetRandName = GetRandName;
    /**
     * 创建一个html富文本框
     * @param width 宽度
     * @param height 长度
     * @param x 位置x
     * @param y 位置y
     */
    function CreateHTMLDivElement(width, height, x, y) {
        var html = new Laya.HTMLDivElement();
        html.width = width || 0;
        html.height = height || 0;
        html.x = x || 0;
        html.y = y || 0;
        return html;
    }
    H52D_Framework.CreateHTMLDivElement = CreateHTMLDivElement;
    /**
     * 设置html样式(未经允许不能擅自扩展此接口)
     * @param html 控件
     * @param fontSize 字体大小
     * @param color 颜色
     * @param align 水平对齐方式
     * @param bold 是否加粗
     */
    function SetHtmlStyle(html, fontSize, color, align, bold, line) {
        //字体样式
        html.style.font = "SimHei";
        //字体大小
        html.style.fontSize = fontSize;
        //字体颜色
        html.style.color = color;
        //加粗
        html.style.bold = bold || false;
        //垂直对齐方式
        html.style.valign = "top";
        //水平对齐方式
        html.style.align = align;
        //字体间距
        html.style.letterSpacing = 1.5;
        //自动换行
        html.style.wordWrap = true;
        //行间距
        html.style.leading = 6;
        //下划线(可用到text)
        html.style.underLine = line;
    }
    H52D_Framework.SetHtmlStyle = SetHtmlStyle;
    /**
     * 返回带有颜色的html文本
     * @param str 文本
     * @param color 颜色
     */
    function GetHtmlStrByColor(str, color, font) {
        if (font) {
            return "<span style='color:" + color + " ; fontSize:" + font + "'>" + str + "</span>";
        }
        else {
            return "<span style='color:" + color + ";'>" + str + "</span>";
        }
    }
    H52D_Framework.GetHtmlStrByColor = GetHtmlStrByColor;
    /**
     * 根据秒返回时间字符串（XX天YY小时、XX小时YY分钟、XX分钟YY秒）
     * @param secs 秒
     */
    function GetFormatTime(secs) {
        secs = Number(secs.toString().split(".")[0]);
        var day = Math.floor(secs / 86400);
        var hour = Math.floor((secs - day * 86400) / 3600);
        var min = Math.floor((secs - hour * 3600) / 60);
        var sec = secs - hour * 3600 - min * 60;
        var str = '';
        if (day > 0) {
            str = (day >= 10 ? day : '0' + day) + '天' + (hour >= 10 ? hour : '0' + hour) + '小时';
        }
        else if (hour > 0) {
            str = (hour >= 10 ? hour : '0' + hour) + '小时' + (min >= 10 ? min : '0' + min) + '分钟';
        }
        else if (min > 0) {
            str = (min >= 10 ? min : '0' + min) + '分钟' + (sec >= 10 ? sec : '0' + sec) + '秒';
        }
        else {
            str = (min >= 10 ? min : '0' + min) + '分钟' + (sec >= 10 ? sec : '0' + sec) + '秒';
        }
        return str;
    }
    H52D_Framework.GetFormatTime = GetFormatTime;
    /**
        * 根据秒返回时间字符串（00:00:00）
        * @param secs 秒
        */
    function GetFormatNumTime(secs) {
        secs = Number(secs.toString().split(".")[0]);
        //let day: number = Math.floor(secs / 86400);
        var hour = Math.floor(secs / 3600);
        var min = Math.floor((secs - hour * 3600) / 60);
        var sec = secs - hour * 3600 - min * 60;
        var str = '';
        str = (hour >= 10 ? hour : '0' + hour) + ':' + (min >= 10 ? min : '0' + min) + ':' + (sec >= 10 ? sec : '0' + sec);
        return str;
    }
    H52D_Framework.GetFormatNumTime = GetFormatNumTime;
    function TimeYMDHMS(i_nSecs) {
        var arr = [];
        var aa = new Date(i_nSecs);
        var n = aa.getFullYear();
        arr.push(n);
        n = aa.getMonth() + 1;
        arr.push(n);
        n = aa.getDate();
        arr.push(n);
        n = aa.getHours();
        arr.push(n);
        n = aa.getMinutes();
        arr.push(n);
        n = aa.getSeconds();
        arr.push(n);
        return arr;
    }
    H52D_Framework.TimeYMDHMS = TimeYMDHMS;
    /**
     * 获取属性对应战斗力
     * @param attrId 属性id
     * @param attrNum 属性值
     */
    function GetCombatPower(attrId, attrNum) {
        // return Math.floor(attrNum * QualityValue[attrId].dwValue);
        return 0;
    }
    H52D_Framework.GetCombatPower = GetCombatPower;
    /**
     * 获取随机属性倍数
     * @param attrNum 属性值
     * @param randQul 随机系数
     */
    function GetRandAttrVal(attrNum, randQul) {
        if (randQul == 0)
            return 0;
        return Number((attrNum * (randQul / 1000)).toFixed(0));
    }
    H52D_Framework.GetRandAttrVal = GetRandAttrVal;
    var TimeMapping = {};
    /**
     * 延迟调用
     * @param time
     * @param oneFunc
     * @param name
     */
    function OneTimer(time, oneFunc, name) {
        if (name && TimeMapping[name] == true) {
            return;
        }
        TimeMapping[name] = true;
        H52D_Framework.Tick.Once(time, null, function () {
            if (oneFunc) {
                oneFunc.run();
            }
            if (name) {
                TimeMapping[name] = false;
            }
        });
    }
    H52D_Framework.OneTimer = OneTimer;
    function GetIcon(icon) {
        return "ui_icon/" + icon;
    }
    H52D_Framework.GetIcon = GetIcon;
    function GetHeadIcon(headID) {
        if (headID == 1) {
            return "ui_head/icon-tou-lydd.png";
        }
        else {
            return "ui_head/icon-tou-zrt.png";
        }
    }
    H52D_Framework.GetHeadIcon = GetHeadIcon;
    function FormatTime() {
        var nowDate = new Date();
        var hour = nowDate.getHours() + "";
        if (hour.length < 2)
            hour = "0" + hour;
        var min = nowDate.getMinutes() + "";
        if (min.length < 2)
            min = "0" + min;
        var sec = nowDate.getSeconds() + "";
        if (sec.length < 2)
            sec = "0" + sec;
        var timeStr = hour + ":" + min + ":" + sec;
        return timeStr;
    }
    H52D_Framework.FormatTime = FormatTime;
    /**
     * 缩写单位(百万)
     */
    function Abbreviation(value) {
        if (!value) {
            value = 0;
        }
        if (value >= 1000000) {
            var num = Math.round(value / 10000);
            return num + 'w';
        }
        else {
            return value.toString();
        }
    }
    H52D_Framework.Abbreviation = Abbreviation;
    /**
     * 添加场景动画
     */
    function InitSceneAnim(SceneClass, sName) {
        if (H52D_Framework.SceneAnimConfig == null) {
            return;
        }
        var tCfgInfo = H52D_Framework.SceneAnimConfig[sName];
        if (tCfgInfo != null) {
            var _loop_1 = function (idx) {
                var tCfg = tCfgInfo[idx];
                var animation = new H52D_Framework.Avatar(SceneClass);
                animation.Load(tCfg.resName, 1, tCfg.scale, 0, 0, Laya.Handler.create(SceneClass, function () {
                    animation.PosX = tCfg.pos[1];
                    animation.PosY = tCfg.pos[2];
                    animation.Play(tCfg.animName, true);
                    SceneClass.setChildIndex(animation.Armature, tCfg.idx);
                }));
            };
            for (var idx in tCfgInfo) {
                _loop_1(idx);
            }
        }
    }
    H52D_Framework.InitSceneAnim = InitSceneAnim;
    /** 是否是ios设备 */
    function IsIOSExamine() {
        return Laya.Browser.onIOS;
    }
    H52D_Framework.IsIOSExamine = IsIOSExamine;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ComFunction.js.map
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var Cartridge = /** @class */ (function () {
        function Cartridge() {
            this._Flag = [];
        }
        /** 添加一个方法 */
        Cartridge.prototype.AddFunc = function (handler) {
            this._Flag.push(handler);
        };
        /** 添加一个延迟 */
        Cartridge.prototype.AddDelay = function (time) {
            this._Flag.push(time);
        };
        /** 清除 */
        Cartridge.prototype.Clear = function () {
            this._Flag = [];
            H52D_Framework.Tick.ClearAll(this);
        };
        /** 执行 */
        Cartridge.prototype.Do = function () {
            var _this = this;
            var obg = this._Flag.shift();
            while (obg != null) {
                if (typeof (obg) == "number") {
                    H52D_Framework.Tick.Once(obg, this, function () {
                        _this.Do();
                    });
                    return;
                }
                else {
                    obg.run();
                }
                obg = this._Flag.shift();
            }
        };
        Cartridge.prototype.RemoveNum = function () {
            for (var key in this._Flag) {
                var obg = this._Flag[key];
                if (typeof (obg) == "number") {
                    this._Flag[key] = 10;
                }
            }
        };
        return Cartridge;
    }());
    H52D_Framework.Cartridge = Cartridge;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Cartridge.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class 缓存管理类
     * @author zhangyusong
     */
    var CacheManager = /** @class */ (function () {
        function CacheManager() {
        }
        Object.defineProperty(CacheManager, "Instance", {
            get: function () {
                if (CacheManager._inst == null) {
                    CacheManager._inst = new CacheManager();
                }
                return CacheManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        /** 获取开关信息 */
        CacheManager.prototype.getDerailByType = function (cls, type) {
            var local = type;
            var cacheValue = H52D_Framework.MasterPlayer.Instance.cacheValue;
            this._derailData = cacheValue[Number(cls)];
            // this._derailData = MasterPlayer.Instance.cacheValue[cls];
            var open = !!(this._derailData & (1 << local));
            return open;
        };
        /**
         * 设置某个类型的开关
         */
        CacheManager.prototype.setDerailByType = function (cls, type, open) {
            var local = type;
            this._derailData = H52D_Framework.MasterPlayer.Instance.cacheValue[cls];
            if (open) {
                this._derailData |= (1 << local);
            }
            else {
                this._derailData &= ~(1 << local);
            }
            H52D_Framework.MasterPlayer.Instance.cacheValue[cls] = this._derailData;
            H52D_Framework.RemoteCall.Instance.Send("K_ChgCliendInfo", cls, this._derailData);
        };
        return CacheManager;
    }());
    H52D_Framework.CacheManager = CacheManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CacheManager.js.map
/**
* name
*/
var H52D_Framework;
(function (H52D_Framework) {
    var CampManager = /** @class */ (function () {
        function CampManager() {
            /***所有的阵营信息 */
            this.camp_List = {};
            this.camp_Id = [];
            this.Play_List = {};
            this._LogList = []; //捐献信息
            this.bool = true;
            this._bool = true;
            this._OtherPlay_Info = [];
            this.Campview_list = {
                0: "CampDonateView",
                1: "CampInfoView",
                2: "CampMainInfo",
                3: "CampMemberView",
                4: "CampPlayInfo",
                5: "CampRankView",
                6: "CampView",
                7: "JoinCampTip",
                8: "ReplaceCampView",
                9: "ReplaceTipView",
            };
            this.camp_info = [];
            this.camplist = [];
            /**设定 关闭一次后 不再打开  再次登陆重置 */
            this.bShowFlag = true;
            for (var campid in H52D_Framework.GangConfig) {
                var nId = Number(campid);
                this.camp_Id.push(nId);
            }
        }
        Object.defineProperty(CampManager, "Instance", {
            get: function () {
                if (this._instance == null) {
                    this._instance = new CampManager();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        CampManager.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqAddGuild", this); //请求加入阵营
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqGuildList", this); //请求阵营列表  C_WinDungeons
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqGuildPlayerList", this); //请求阵营成员信息
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_AddGuildLog", this); //请求阵营日志
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqContribution", this); //捐献
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqObserverInfo", this); //他人信息
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqGuildInfo", this); //获取本公会信息			
            this.Play_List = {};
            this.OpenCond();
        };
        CampManager.prototype.OpenCond = function () {
            this.openlv = H52D_Framework.OpenGradeConfig[9].Checkpoint;
        };
        Object.defineProperty(CampManager.prototype, "camp_Info", {
            get: function () {
                return this.camp_info;
            },
            set: function (value) {
                this.camp_info = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CampManager.prototype, "Bool", {
            get: function () {
                return this.bool;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CampManager.prototype, "Camp_PlayInfO", {
            /**获取阵营中的玩家信息 */
            get: function () {
                return this.Play_List;
            },
            enumerable: true,
            configurable: true
        });
        /**zhe */
        CampManager.prototype.Camp_LvMax = function () {
            var lv = 0;
            for (var key in H52D_Framework.GangLevelUpConfig) {
                var MaxLv = Number(key);
                if (lv < MaxLv) {
                    lv = MaxLv;
                }
                else {
                    return lv;
                }
            }
            return lv;
        };
        CampManager.prototype.Camp_sort = function () {
            for (var key in this.camp_List) {
                var camp = this.camp_List[key];
                this.camp_info.push(camp);
            }
            //return this.camp_info;
        };
        CampManager.prototype.campList = function () {
            for (var key in CampManager.Instance.CampList) {
                var Indx = Number(key);
                this.camplist.push(Indx);
            }
        };
        Object.defineProperty(CampManager.prototype, "CampHot", {
            /**当前阵营热度 */
            get: function () {
                return this._camp_hot;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CampManager.prototype, "PlayRank", {
            get: function () {
                return this.my_rank;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CampManager.prototype, "LogList", {
            /**获取阵营日志信息 */
            get: function () {
                return this._LogList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CampManager.prototype, "OntherPlatInfo", {
            /**他人信息 */
            get: function () {
                return this._OtherPlay_Info;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CampManager.prototype, "CampList", {
            /**阵营列表 */
            get: function () {
                return this.camp_List;
            },
            set: function (list) {
                this.camp_List = list;
            },
            enumerable: true,
            configurable: true
        });
        /**获取指定的阵营 */
        CampManager.prototype.nCamp = function (ncampid) {
            return this.camp_List[ncampid];
        };
        Object.defineProperty(CampManager.prototype, "CampId", {
            /**阵营id */
            get: function () {
                return this.camp_Id;
            },
            enumerable: true,
            configurable: true
        });
        /**发送消息给服务器 请求当前阵营信息 */
        CampManager.prototype.Camp_Info = function () {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqGuildInfo");
        };
        /**发送消息给服务器 请求加入阵营 */
        CampManager.prototype.Camp_Jion = function (campId) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqAddGuild", campId);
        };
        /**发送消息给服务器 请求阵营列表 */
        CampManager.prototype.GetCamp_List = function () {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqGuildList");
        };
        /**请求阵营成员列表 */
        CampManager.prototype.GetCampPlayInfo = function (campID) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqGuildPlayerList", campID);
        };
        /**发送消息  获取玩家的捐献次数 */
        CampManager.prototype.Donate_times = function (itemId) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqContribution", itemId);
        };
        /**请求查看他人信息  */
        CampManager.prototype.n_Play = function (play_Id) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqObserverInfo", play_Id);
        };
        /**接受他人信息 */
        CampManager.prototype.C_ReqObserverInfo = function (buf) {
            this._OtherPlay_Info = buf[0];
        };
        /**捐献成功 */
        CampManager.prototype.C_ReqContribution = function (buf) {
            var nType = buf[0];
            var campInfo = buf[1];
            var camp_Id = campInfo[1];
            this.camp_List[camp_Id] = campInfo;
            this._camp_hot = campInfo[4];
            H52D_Framework.MasterPlayer.Instance.player.Donatetimes[nType] += 1;
            H52D_Framework.TipsLogic.Instance.OpenSystemTips("捐献成功！");
            H52D_Framework.Event.DispatchEvent("changetimes");
        };
        /**阵营日志信息 */
        CampManager.prototype.C_AddGuildLog = function (buf) {
            var info = [buf[0], buf[1]];
            this._LogList.push(info);
            H52D_Framework.Event.DispatchEvent("updatecamplist");
        };
        /**通知客户端 加入阵营成功 */
        CampManager.prototype.C_ReqAddGuild = function (buf) {
            var campid = buf[0];
            var campInfo = buf[1];
            var old_Id = H52D_Framework.MasterPlayer.Instance.player.CampID;
            H52D_Framework.MasterPlayer.Instance.player.CampID = campid;
            this.camp_List[campid] = campInfo;
            if (old_Id != 0) {
                H52D_Framework.Event.DispatchEvent("ReqchangeCamp");
                this._LogList = [];
                this._camp_hot = 0;
            }
            else {
                H52D_Framework.Event.DispatchEvent("C_ReqAddCamp");
            }
            H52D_Framework.BCampManager.Instance.LoadBCamp();
        };
        /**获取玩家成员列表 */
        CampManager.prototype.C_ReqGuildPlayerList = function (buf) {
            this.Play_List = {};
            var camp_ID = buf[0];
            var nData = buf[1];
            this.my_rank = buf[2];
            this.Play_List = nData;
        };
        Object.defineProperty(CampManager.prototype, "BShowFlag", {
            get: function () {
                return this.bShowFlag;
            },
            set: function (bool) {
                this.bShowFlag = bool;
            },
            enumerable: true,
            configurable: true
        });
        /**满足条件 弹出阵营面板 */
        CampManager.prototype.Add_camp = function () {
            if (H52D_Framework.UIManager.Instance.IsHave("CampView", H52D_Framework.ViewUpRoot)) {
                return;
            }
            //CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.camp, true)	
            var bool = H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.camp);
            var customsOrder = H52D_Framework.MasterPlayer.Instance.player.CunstLevel;
            if (H52D_Framework.MasterPlayer.Instance.player.CampID == 0) {
                if (customsOrder >= this.openlv) {
                    if (!bool) {
                        H52D_Framework.UIManager.Instance.CreateUI("JoinCampTip", [H52D_Framework.ViewUpRoot]);
                    }
                }
            }
        };
        /** 通知客户端  请求阵营列表 */
        CampManager.prototype.C_ReqGuildList = function (buf) {
            this.camp_List = buf[0];
            H52D_Framework.Event.DispatchEvent("C_ReqGuildList");
        };
        /** 获取当前阵营信息 */
        CampManager.prototype.C_ReqGuildInfo = function (buf) {
            var info = buf[0];
            var camp_Id = info[1];
            this.camp_List[camp_Id] = info;
            H52D_Framework.Event.DispatchEvent("chengehot");
        };
        CampManager.prototype.SortCamp = function (camp_Info) {
            function C_sort(up, down) {
                var hot_up = up[4]; //热度
                var hot_down = down[4]; //id 人数 等级 贡献值 
                if (up[3] == down[3]) {
                    return up[2] > down[2] ? -1 : 1; //根据阵营人数排行
                }
                else {
                    return up[3] > down[3] ? -1 : 1;
                }
            }
            camp_Info.sort(C_sort);
            return camp_Info;
        };
        /**红点显示 */
        CampManager.prototype.ShowRed = function (D_red) {
            if (H52D_Framework.MasterPlayer.Instance.player.CunstLevel < this.openlv) {
                return false;
            }
            var n_tcfg = H52D_Framework.GangDonateConfig[1];
            if (!H52D_Framework.MasterPlayer.Instance.player.Donatetimes[1]) {
                H52D_Framework.MasterPlayer.Instance.player.Donatetimes[1] = 0;
            }
            var image = H52D_Framework.ViewUILogic.Instance.CampRed;
            var tiems = n_tcfg.num - H52D_Framework.MasterPlayer.Instance.player.Donatetimes[1];
            var item = n_tcfg.consume;
            var itemId = item[1];
            var play_itemNum = H52D_Framework.BagManager.Instance.getItemNumber(itemId);
            if (tiems > 0 && play_itemNum > n_tcfg.consume[1]) {
                return D_red.visible = image.visible = true;
            }
            else {
                return D_red.visible = image.visible = false;
            }
        };
        return CampManager;
    }());
    H52D_Framework.CampManager = CampManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CampManager.js.map
/**
* 气泡对话
*/
var H52D_Framework;
(function (H52D_Framework) {
    var BubbleManager = /** @class */ (function () {
        function BubbleManager() {
            /** 对话组反向映射表 */
            this._tMappingList = {};
            /** 当前的可用的对话组ID */
            this._tBuffleList = [];
            /**是否弹了第一个怪物气泡 */
            this._bMonsterBubble = false;
            this._bMonsterFirst = false;
            // 制作反向映射表
            for (var nGroupID in H52D_Framework.GroupConfig) {
                var cfg = H52D_Framework.GroupConfig[nGroupID];
                var hero1 = cfg.hero1;
                var hero2 = cfg.hero2;
                if (this._tMappingList[hero1] == null) {
                    this._tMappingList[hero1] = {};
                }
                if (this._tMappingList[hero2] == null) {
                    this._tMappingList[hero2] = {};
                }
                this._tMappingList[hero1][hero2] = nGroupID;
                this._tMappingList[hero2][hero1] = nGroupID;
            }
        }
        Object.defineProperty(BubbleManager, "Instance", {
            get: function () {
                if (BubbleManager._inst == null)
                    BubbleManager._inst = new BubbleManager();
                return BubbleManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BubbleManager.prototype, "bMonsterBubble", {
            get: function () {
                return this._bMonsterBubble;
            },
            set: function (b) {
                this._bMonsterBubble = b;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BubbleManager.prototype, "bMonsterFirst", {
            get: function () {
                return this._bMonsterFirst;
            },
            set: function (b) {
                this._bMonsterFirst = b;
            },
            enumerable: true,
            configurable: true
        });
        /** 刷新缓存当前所有可能的对话ID */
        BubbleManager.prototype.UpdateAllBubbleID = function () {
            // 清空对话列表
            this._tBuffleList = [];
            // 记录已有ID
            var tFlagBubbleID = {};
            //获取当前阵容ID
            var tHeroWarList = H52D_Framework.MasterPlayer.Instance.player.HeroWarList;
            // 开始寻找聊天伙伴
            for (var nPos1 in tHeroWarList) {
                var nHero1ID = tHeroWarList[nPos1];
                if (this._tMappingList[nHero1ID] != null) {
                    for (var nPos2 in tHeroWarList) {
                        var nHero2ID = tHeroWarList[nPos2];
                        // 检测是否有话题
                        var nGroupID = this._tMappingList[nHero1ID][nHero2ID];
                        if (nGroupID != null) {
                            var cfg = H52D_Framework.GroupConfig[nGroupID];
                            var tBubbleIdList = cfg.talkid;
                            for (var idx in tBubbleIdList) {
                                var nBubbleID = tBubbleIdList[idx];
                                if (tFlagBubbleID[nBubbleID] != true) {
                                    this._tBuffleList.push(nBubbleID);
                                    tFlagBubbleID[nBubbleID] = true;
                                }
                            }
                        }
                    }
                }
            }
        };
        //** 随机一个对话ID */
        BubbleManager.prototype.RandomHeroBubbleID = function () {
            if (this._tBuffleList.length <= 0) {
                return null;
            }
            var idx = Math.random() * this._tBuffleList.length >> 0;
            return this._tBuffleList[idx];
        };
        return BubbleManager;
    }());
    H52D_Framework.BubbleManager = BubbleManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BubbleManager.js.map
/*
* 指令状态机;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var StateOperation = /** @class */ (function () {
        /**
         * 初始化
         */
        function StateOperation() {
            this.Destroy();
            this._tapSkill = new H52D_Framework.TapSkill();
        }
        /**销毁 */
        StateOperation.prototype.Destroy = function () {
            if (this._tapSkill) {
                this._tapSkill.Destroy();
                this._tapSkill = null;
            }
        };
        /**接收到指令触发行为 */
        StateOperation.prototype.Do = function (params, clickType) {
            if (params != null) {
                this._tapSkill.TapSkill(clickType);
            }
        };
        return StateOperation;
    }());
    H52D_Framework.StateOperation = StateOperation;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=StateOperation.js.map
/**
* 阵容系统
* @张振明
*/
var H52D_Framework;
(function (H52D_Framework) {
    var Formation = /** @class */ (function () {
        /**
         *
         * @param owner 所属于谁
         */
        function Formation(owner) {
            this._objectList = []; //上阵英雄的列表
            this._frontobjectList = []; //前排英雄列表
            this._backobjectList = []; //后排英雄列表
            this._horizontalobjectList = []; //横排英雄列表
            this._maxNum = 9; //阵容最大人数
        }
        Object.defineProperty(Formation.prototype, "GetCaptain", {
            //获取队长
            get: function () { return this._captain; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Formation.prototype, "Getobject", {
            /**
             * 获取阵容英雄列表
             */
            get: function () { return this._objectList; },
            enumerable: true,
            configurable: true
        });
        Formation.prototype.GetobjectByID = function (id) {
            if (this.Getobject[id] != null) {
                return this.Getobject[id];
            }
            return null;
        };
        Object.defineProperty(Formation.prototype, "GetFrontobject", {
            /**
             * 获取前排英雄列表
             */
            get: function () { return this._frontobjectList; },
            enumerable: true,
            configurable: true
        });
        /**
         * 获取前排列表中指定id英雄
         * @param id 英雄id
         */
        Formation.prototype.GetFrontobjectById = function (id) {
            if (this.GetFrontobject[id] != null)
                return this.GetFrontobject[id];
            return null;
        };
        Object.defineProperty(Formation.prototype, "GetBackobject", {
            /**
             * 获取后排英雄列表
             */
            get: function () { return this._backobjectList; },
            enumerable: true,
            configurable: true
        });
        /**
         * 获取后排英雄列表中指定id英雄
         * @param id 英雄id
         */
        Formation.prototype.GetBackobjectById = function (id) {
            if (this.GetBackobject[id] != null)
                return this.GetBackobject[id];
            return null;
        };
        Object.defineProperty(Formation.prototype, "GetHorizontalobject", {
            /**
             * 获取横排英雄字典
             */
            get: function () { return this._horizontalobjectList; },
            enumerable: true,
            configurable: true
        });
        /**
         * 根据id获取指定某排英雄列表
         * @param id 横排id
         */
        Formation.prototype.GetHorizontalobjectListById = function (id) {
            if (this.GetHorizontalobject[id] != null)
                return this.GetHorizontalobject[id];
            return null;
        };
        /**
         * 获取横排字典中指定id横排中指定id英雄
         * @param listID 横排id
         * @param id     英雄id
         */
        Formation.prototype.GetHorizontalobjectById = function (listID, id) {
            var objectList = this.GetHorizontalobjectListById(listID);
            if (objectList[id] != null) {
                return objectList[id];
            }
        };
        /**
         * 位置信息写在这 暂时空缺
         */
        Formation.prototype.InitPositionList = function () {
        };
        /**
         * 前排的数量，最大为3，最小为1
         */
        Formation.prototype.FrontNum = function () {
            return H52D_Framework.GetTabLength(this._frontobjectList);
        };
        /**
         * 后排的数量,最大为6，最小为0
         */
        Formation.prototype.BackNum = function () {
            return H52D_Framework.GetTabLength(this._backobjectList);
        };
        /**给敌人表 */
        Formation.prototype.GetFormatInfo = function (objectTab) {
            var key = [];
            for (var k in objectTab) {
                key.push(k);
            }
            for (var i = 0; i < H52D_Framework.GetTabLength(objectTab); i++) {
                if (objectTab[key[i]]) {
                    this._objectList.push(objectTab[key[i]]);
                }
            }
            this.SetFrontobject();
            this.Backobject();
            this.Horizontalobject();
        };
        /**给敌人表 */
        Formation.prototype.GetFormatInfoArry = function (objectTab) {
            this._objectList = objectTab.concat();
            this.SetFrontobject();
            this.Backobject();
            this.Horizontalobject();
        };
        /**
         * 添加到前排英雄列表
         */
        Formation.prototype.SetFrontobject = function () {
            for (var i = 0; i < this._objectList.length; i++) {
                var hc = this._objectList[i];
                if (this._objectList[i]) {
                    if (hc.vo.location == 0 || hc.vo.location == 1 || hc.vo.location == 2) {
                        this._frontobjectList.push(this._objectList[i]);
                    }
                }
            }
            if (this._frontobjectList.length <= 0) {
                for (var i = 0; i < this._objectList.length; i++) {
                    var hc = this._objectList[i];
                    if (this._objectList[i]) {
                        if (hc.vo.location == 3 || hc.vo.location == 4 || hc.vo.location == 5) {
                            this._frontobjectList.push(this._objectList[i]);
                        }
                    }
                }
            }
            if (this._frontobjectList.length <= 0) {
                for (var i = 0; i < this._objectList.length; i++) {
                    var hc = this._objectList[i];
                    if (this._objectList[i]) {
                        if (hc.vo.location == 6 || hc.vo.location == 7 || hc.vo.location == 8) {
                            this._frontobjectList.push(this._objectList[i]);
                        }
                    }
                }
            }
        };
        /**
         * 添加到后排英雄列表
         */
        Formation.prototype.Backobject = function () {
            for (var i = 0; i < this._objectList.length; i++) {
                if (this._objectList[i]) {
                    if (this._objectList[i].vo.location > 5) {
                        this._backobjectList.push(this._objectList[i]);
                    }
                }
            }
            if (this._backobjectList.length == 0) {
                for (var i = 0; i < this._objectList.length; i++) {
                    if (this._objectList[i]) {
                        if (this._objectList[i].vo.location == 3 || this._objectList[i].vo.location == 4 ||
                            this._objectList[i].vo.location == 5) {
                            this._backobjectList.push(this._objectList[i]);
                        }
                    }
                }
            }
        };
        /**
         * 添加到横排英雄列表
         */
        Formation.prototype.Horizontalobject = function () {
            var horizontal_1 = [];
            var horizontal_2 = [];
            var horizontal_3 = [];
            for (var i = 0; i < this._objectList.length; i++) {
                var hc = this._objectList[i];
                if (this._objectList[i]) {
                    if (hc.vo.location == 0 || hc.vo.location == 3 || hc.vo.location == 6) {
                        horizontal_1.push(this._objectList[i]);
                    }
                }
            }
            for (var i = 0; i < this._objectList.length; i++) {
                var hc = this._objectList[i];
                if (this._objectList[i]) {
                    if (hc.vo.location == 1 || hc.vo.location == 4 || hc.vo.location == 7) {
                        horizontal_2.push(this._objectList[i]);
                    }
                }
            }
            for (var i = 0; i < this._objectList.length; i++) {
                var hc = this._objectList[i];
                if (this._objectList[i]) {
                    if (hc.vo.location == 2 || hc.vo.location == 5 || hc.vo.location == 8) {
                        horizontal_3.push(this._objectList[i]);
                    }
                }
            }
            this._horizontalobjectList.push(horizontal_1);
            this._horizontalobjectList.push(horizontal_2);
            this._horizontalobjectList.push(horizontal_3);
        };
        Formation.prototype.Destroy = function () {
            this._objectList = [];
            this._frontobjectList = [];
            this._backobjectList = [];
            this._horizontalobjectList = [];
        };
        return Formation;
    }());
    H52D_Framework.Formation = Formation;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Formation.js.map
/**
* 漂字类
* @author张振明
*/
var H52D_Framework;
(function (H52D_Framework) {
    var Floating = /** @class */ (function () {
        function Floating() {
        }
        /**
         * 漂字函数
         * @param value 数字
         * @param skinEnum  类型
         * @param x 位置x
         * @param y 位置y
         * @param birthY y位置随机高度
         */
        Floating.DamageText = function (value, skinEnum, x, y, isCrit, birthY) {
            if (birthY === void 0) { birthY = 0; }
            H52D_Framework.UIManager.Instance.InstanceUI("FloatView", [H52D_Framework.EffectRoot, value, skinEnum, x, y, isCrit, birthY]);
        };
        Floating.SkillNameText = function (name, x, y) {
            H52D_Framework.UIManager.Instance.InstanceUI("SkillNameView", [H52D_Framework.EffectRoot, name, x, y]);
        };
        Floating.DamageText_P = function (value, skinEnum, x, y, isCrit, birthY) {
            if (birthY === void 0) { birthY = 0; }
            H52D_Framework.UIManager.Instance.InstanceUI("FloatView", [H52D_Framework.KickingManager.Instance.effectRoot, value, skinEnum, x, y, isCrit, birthY]);
        };
        Floating.SkillNameText_P = function (name, x, y) {
            H52D_Framework.UIManager.Instance.InstanceUI("SkillNameView", [H52D_Framework.KickingManager.Instance.effectRoot, name, x, y]);
        };
        return Floating;
    }());
    H52D_Framework.Floating = Floating;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Floating.js.map
/*
* 特效类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var Effect = /** @class */ (function () {
        /**初始化 */
        function Effect() {
        }
        /**销毁 */
        Effect.prototype.Destroy = function () {
        };
        return Effect;
    }());
    H52D_Framework.Effect = Effect;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Effect.js.map
/**
* 特权Buff类
*/
var H52D_Framework;
(function (H52D_Framework) {
    var PrivilegeBuff = /** @class */ (function () {
        function PrivilegeBuff() {
            this._isStart = false;
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.PRIVILEGE, Laya.Handler.create(this, this.AddBuff));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.PRIVILEGE_DELETE, Laya.Handler.create(this, this.Destroy));
        }
        Object.defineProperty(PrivilegeBuff, "Instance", {
            get: function () {
                if (PrivilegeBuff._instance == null) {
                    PrivilegeBuff._instance = new PrivilegeBuff();
                }
                return PrivilegeBuff._instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PrivilegeBuff.prototype, "IsStart", {
            get: function () { return this._isStart; },
            enumerable: true,
            configurable: true
        });
        /**添加Buff*/
        PrivilegeBuff.prototype.AddBuff = function (id) {
            var buffid = H52D_Framework.PrivilegeConfig[id]["parameter"][1];
            switch (id) {
                case 1:
                    this._isStart = true;
                    break;
                case 2:
                    this.AllDamageBuff(buffid);
                    break;
                case 3:
                    this.MpRely(buffid);
                    break;
            }
        };
        /**法力值回复 */
        PrivilegeBuff.prototype.MpRely = function (buffid) {
            this._mbuff = new H52D_Framework.Buff(buffid, this);
            this._mbuff.Do();
        };
        /**增加所有伤害BUff */
        PrivilegeBuff.prototype.AllDamageBuff = function (buffid) {
            this._dbuff = new H52D_Framework.Buff(buffid, this);
            this._dbuff.Do();
        };
        /**销毁 */
        PrivilegeBuff.prototype.Destroy = function (id) {
            if (id == 1) {
                this._isStart = true;
            }
            else if (id == 2) {
                this._dbuff.Destroy();
                this._dbuff = null;
            }
            else if (id == 3) {
                this._mbuff.Destroy();
                this._mbuff = null;
            }
        };
        return PrivilegeBuff;
    }());
    H52D_Framework.PrivilegeBuff = PrivilegeBuff;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PrivilegeBuff.js.map
/**
* Buff效果类
*/
var H52D_Framework;
(function (H52D_Framework) {
    var BuffEffect = /** @class */ (function () {
        function BuffEffect(buffdata, owner, ratio) {
            this._owner = null;
            this._buffData = null;
            /**作用目标列表 */
            this._target = [];
            /**取值目标列表 */
            this._takeTarget = [];
            /**最大取值列表数 */
            this._maxSubValueNum = 0;
            /**当前取值列表数 */
            this._indexSubValueNum = 0;
            /**Mp回复速度 */
            this._MpRecoveryCurrent = 0;
            /**Mp上限值 */
            this._MpPoolCurrent = 0;
            this._LastValueArray = [];
            /**从取值目标里获得的加值列表 */
            this._subValue = [];
            /**取值之和 */
            this._subValueSum = 0;
            /**伤害系数 */
            this._ratio = 0;
            this._modfiyID = 0;
            this._buffData = buffdata;
            this._owner = owner;
            if (!this._buffData)
                return;
            if (this.BMpModfiy()) {
                this._target.push(H52D_Framework.MasterPlayer.Instance.player);
                this.Select(0);
                return;
            }
            this._target = [];
            this._takeTarget = [];
            this._takeTarget = H52D_Framework.SelectTarget.BuffTarget(this._buffData, this._buffData.statusBirthTarget, this._owner).concat();
            this._target = H52D_Framework.SelectTarget.BuffTarget(this._buffData, this._buffData.statusActionTarget, this._owner).concat();
            if (ratio) {
                this._ratio = ratio;
            }
            for (var i = 0; i < this._takeTarget.length; i++) {
                this.GetSubValue(this._takeTarget[i]);
            }
            for (var i = 0; i < this._target.length; i++) {
                this.Select(i);
            }
            this.Refresh();
        }
        /**是否是修改MP */
        BuffEffect.prototype.BMpModfiy = function () {
            if (!this._buffData)
                return false;
            if (this._buffData.attributeId == 53 || this._buffData.attributeId == 51) {
                return true;
            }
            return false;
        };
        BuffEffect.prototype.Select = function (index) {
            this._maxSubValueNum = this._subValue.length;
            switch (this._buffData.statusType) {
                case 1:
                    if (this.BMpModfiy()) {
                        this.Modfiy_MP();
                    }
                    else {
                        this.Modfiy_Target(index);
                    }
                    break;
                case 2:
                    this.SuckHP(this._target[index]);
                    break;
                /**按生命上线比例回血 */
                case 3:
                    this.HPMaxBoold(this._target[index]);
                    break;
                /**嘲讽 */
                case 4:
                    this.Sneer();
                    break;
                case 5:
                    this.DoDizzness(this._target[index]);
                    break;
                case 6:
                    this.Sustained(this._target[index]);
                    break;
            }
        };
        /**获取加成值 */
        BuffEffect.prototype.GetSubValue = function (target) {
            if (!target || !this._buffData.attributeId)
                return;
            var modfiy_value = 0;
            var last_value = 0;
            var subvalue = 0;
            var attr = target.vo.attr;
            this._modfiyID = attr.GetAttributeModfiyID(this._buffData.attributeId);
            var isPer = attr.GetAttributeIsPer(this._modfiyID);
            last_value = attr.GetAttributeBuff(this._modfiyID);
            if (isPer == 1) {
                subvalue = this._buffData.attributePer / 10000;
                modfiy_value = last_value * subvalue;
            }
            else {
                modfiy_value = this._buffData.attributePer;
            }
            if (this._buffData.statusBirthTarget == 8) {
                this._subValueSum += modfiy_value >> 0;
            }
            else {
                this._subValue.push(modfiy_value >> 0);
            }
        };
        /**从取值列表里选择取值*/
        BuffEffect.prototype.Modfiy_Target = function (index) {
            if (this._indexSubValueNum >= this._maxSubValueNum)
                this._indexSubValueNum = 0;
            if (this._buffData.statusBirthTarget == 8)
                this.Modfiy_Attr(this._target[index], this._subValueSum);
            else
                this.Modfiy_Attr(this._target[index], this._subValue[this._indexSubValueNum]);
            this._indexSubValueNum++;
        };
        /**改属性 */
        BuffEffect.prototype.Modfiy_Attr = function (target, subvalue) {
            /**目标属性 */
            if (!target)
                return;
            this._LastValueArray.push(subvalue);
            if (this._modfiyID == 0) {
                this._modfiyID = target.vo.attr.GetAttributeModfiyID(this._buffData.attributeId);
                subvalue = 0;
            }
            target.vo.attr.ModfiyAttributeValue(this._modfiyID, H52D_Framework.eValueType.Other, subvalue);
        };
        BuffEffect.prototype.Modfiy_MP = function () {
            var _this = this;
            if (this._buffData.attributeId == 53) {
                var subvalue = this._buffData.attributePer / 10000;
                var MpRecoveryCurrent = H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeValue(53);
                var NowValue_1 = MpRecoveryCurrent * subvalue;
                NowValue_1 = Math.ceil(NowValue_1);
                this._MpRecoveryCurrent = NowValue_1;
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, H52D_Framework.eValueType.Other, NowValue_1);
                H52D_Framework.Event.DispatchEvent("MpRecoveryRateChange");
                H52D_Framework.Tick.Once(this._buffData.existTime, this, function () {
                    H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, H52D_Framework.eValueType.Other, -NowValue_1);
                    H52D_Framework.Event.DispatchEvent("MpRecoveryRateChange");
                });
            }
            if (this._buffData.attributeId == 51) {
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, H52D_Framework.eValueType.Other, this._buffData.attributePer);
                H52D_Framework.Event.DispatchEvent("MpPoolChange");
                this._MpPoolCurrent = this._buffData.attributePer;
                H52D_Framework.Tick.Once(this._buffData.existTime, this, function () {
                    H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, H52D_Framework.eValueType.Other, -_this._buffData.attributePer);
                    H52D_Framework.Event.DispatchEvent("MpPoolChange");
                });
            }
        };
        /**眩晕BUFF*/
        BuffEffect.prototype.DoDizzness = function (target) {
            var _this = this;
            H52D_Framework.Tick.Loop(100, this, function () {
                target.Idle();
            });
            H52D_Framework.Tick.Once(this._buffData.existTime, this, function () {
                H52D_Framework.Tick.Once(100, _this, function () {
                    H52D_Framework.Tick.ClearAll(_this);
                });
            });
        };
        /**吸血BUFF */
        BuffEffect.prototype.SuckHP = function (target) {
            if (target && target.vo) {
                var attr = target.vo.attr;
                var num = this._buffData.attributePer / 10000;
                //let damage = attr.GetAttributeValue(2) * this._ratio;
                var mod_damage = this._ratio * num >> 0;
                H52D_Framework.Floating.DamageText(mod_damage.toString(), SkinEnum.SkinHP, target.PosX, target.PosY - 30, false);
            }
        };
        /**按生命上限比例回血 */
        BuffEffect.prototype.HPMaxBoold = function (target) {
            var _this = this;
            var attr = this._owner.vo.attr;
            var hpMax = attr.GetAttributeValue(1);
            var oncehp = hpMax * (this._buffData.attributePer / 10000) >> 0;
            H52D_Framework.Tick.Loop(this._buffData.LoopTime, this, function () {
                H52D_Framework.Floating.DamageText(oncehp.toString(), SkinEnum.SkinHP, target.PosX, target.PosY - 30, false);
            });
            H52D_Framework.Tick.Once(this._buffData.existTime, this, function () {
                H52D_Framework.Tick.Clear(_this, _this.HPMaxBoold);
            });
        };
        /**哀木涕：嘿 ，孙子 */
        BuffEffect.prototype.Sneer = function () {
        };
        /**持续效果BUFF */
        BuffEffect.prototype.Sustained = function (target) {
            var _this = this;
            if (!this._owner)
                return;
            var attr = this._owner.vo.attr;
            var num = this._buffData.attributePer / 10000;
            var damage = attr.GetAttributeValue(2);
            var mod_damage = damage * num;
            H52D_Framework.Tick.Loop(this._buffData.LoopTime, this, function () {
                target.OnHurt(mod_damage >> 0, false, SPECIAL_TYPE.SUSRAINED);
            });
            H52D_Framework.Tick.Once(this._buffData.existTime, this, function () {
                H52D_Framework.Tick.Once(100, _this, function () {
                    H52D_Framework.Tick.ClearAll(_this);
                });
            });
        };
        BuffEffect.prototype.Remove_Target = function (index) {
            if (this._indexSubValueNum >= this._maxSubValueNum)
                this._indexSubValueNum = 0;
            if (this._buffData.statusBirthTarget == 8)
                this.RemoveAttribute(this._target[index], this._subValueSum);
            else
                this.RemoveAttribute(this._target[index], this._subValue[this._indexSubValueNum]);
            this._indexSubValueNum++;
        };
        /**移除加成的属性 */
        BuffEffect.prototype.RemoveAttribute = function (target, subvalue) {
            var attr = target.vo.attr;
            attr.ModfiyAttributeValue(this._modfiyID, H52D_Framework.eValueType.Other, -subvalue);
        };
        BuffEffect.prototype.RemoveMp = function () {
            if (this._buffData.attributeId) {
                if (this._buffData.attributeId == 53) {
                    H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, H52D_Framework.eValueType.Other, -this._MpRecoveryCurrent);
                    H52D_Framework.Event.DispatchEvent("MpRecoveryRateChange");
                }
                if (this._buffData.attributeId == 51) {
                    H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, H52D_Framework.eValueType.Other, -this._MpPoolCurrent);
                    H52D_Framework.Event.DispatchEvent("MpPoolChange");
                }
            }
        };
        /**刷新所有属性面板 */
        BuffEffect.prototype.Refresh = function () {
            if (H52D_Framework.BattleManager.Instance.aIOperation) {
                H52D_Framework.BattleManager.Instance.aIOperation.Dps();
            }
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.REFFIXEDATTR);
            H52D_Framework.Event.DispatchEvent("RefreshList");
        };
        BuffEffect.prototype.OnUpdate = function () {
            for (var k in this._target) {
                if (this._target[k]) {
                    if (this._target[k].type == eCharacter_TYPE.MONSTER) {
                        var a = this._target[k];
                        if (a.IsDie)
                            this.Destroy();
                    }
                }
            }
        };
        BuffEffect.prototype.Destroy = function () {
            H52D_Framework.Tick.ClearAll(this);
            this._indexSubValueNum = 0;
            if (this._buffData.statusType == 1) {
                for (var i = 0; i < this._target.length; i++) {
                    this.Remove_Target(i);
                }
                this.RemoveMp();
                this.Refresh();
            }
            this._LastValueArray = [];
            this._takeTarget = [];
            this._target = [];
            this._owner = null;
            // this._buffData = null;
        };
        return BuffEffect;
    }());
    H52D_Framework.BuffEffect = BuffEffect;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BuffEffect.js.map
/**
* Buff数据类
*/
var H52D_Framework;
(function (H52D_Framework) {
    var BuffData = /** @class */ (function () {
        function BuffData(id) {
            this.id = id;
            this.firstTime = H52D_Framework.StatusConfig[id].periodEffect["1"];
            this.LoopTime = H52D_Framework.StatusConfig[id].periodEffect["2"];
            this.existTime = H52D_Framework.StatusConfig[id].periodEffect["3"];
            this.inlayCd = H52D_Framework.StatusConfig[id].inlayCd;
            this.statusType = H52D_Framework.StatusConfig[id].statusType;
            this.attributeId = H52D_Framework.StatusConfig[id].effectList["1"];
            this.attributePer = H52D_Framework.StatusConfig[id].effectList["2"];
            this.statusBirthTarget = H52D_Framework.StatusConfig[id].statusBirthTarget;
            this.statusActionTarget = H52D_Framework.StatusConfig[id].statusActionTarget;
            this.PosX = 0;
            this.PosY = 0;
            this.Dir = 1;
            this.DataDispose();
        }
        Object.defineProperty(BuffData.prototype, "nameId", {
            /**名称ID */
            get: function () { return H52D_Framework.StatusConfig[this.id].nameId; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BuffData.prototype, "descId", {
            /**描述ID */
            get: function () { return H52D_Framework.StatusConfig[this.id].descId; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BuffData.prototype, "strIcon", {
            /**图标名称 */
            get: function () { return H52D_Framework.StatusConfig[this.id].strIcon; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BuffData.prototype, "pointID", {
            /**状态特效 */
            //public spcEftId:any;
            /**挂点ID */
            get: function () { return H52D_Framework.StatusConfig[this.id].spcEftId[1]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(BuffData.prototype, "effectPath", {
            /**效果路径 */
            get: function () { return H52D_Framework.StatusConfig[this.id].spcEftId[2]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(BuffData.prototype, "effectName", {
            /**动画名字 */
            get: function () { return H52D_Framework.StatusConfig[this.id].spcEftId[3]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(BuffData.prototype, "effectScla", {
            /**特效大小 */
            get: function () { return H52D_Framework.StatusConfig[this.id].spcEftId[4]; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(BuffData.prototype, "level", {
            /**状态等级 */
            get: function () { return H52D_Framework.StatusConfig[this.id].level; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BuffData.prototype, "repeatType", {
            /**替换规则 */
            get: function () { return H52D_Framework.StatusConfig[this.id].repeatType; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BuffData.prototype, "isGoodStatus", {
            /**是否增益 */
            get: function () { return H52D_Framework.StatusConfig[this.id].isGoodStatus; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BuffData.prototype, "continueType", {
            /**状态持续类型 */
            get: function () { return H52D_Framework.StatusConfig[this.id].continueType; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BuffData.prototype, "isDieRemove", {
            /**死亡是否消失 */
            get: function () { return H52D_Framework.StatusConfig[this.id].isDieRemove; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(BuffData.prototype, "offlineDispose", {
            /**离线处理 */
            get: function () { return H52D_Framework.StatusConfig[this.id].offlineDispose; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(BuffData.prototype, "hierarchy", {
            get: function () { return H52D_Framework.StatusConfig[this.id].hierarchy; },
            enumerable: true,
            configurable: true
        });
        ;
        BuffData.prototype.DataDispose = function () {
            if (this.statusType == 2 || this.statusType == 6) {
                this.attributePer = this.attributeId;
                this.attributeId = 2;
            }
            else if (this.statusType == 3) {
                this.attributePer = this.attributeId;
                this.attributeId = 1;
            }
            switch (this.statusActionTarget) {
                case 1:
                    if (this.statusBirthTarget == 0) {
                        this.statusBirthTarget = 1;
                    }
                    break;
                case 5:
                    if (this.statusBirthTarget == 0) {
                        this.statusBirthTarget = 5;
                    }
                    break;
                case 6:
                    if (this.statusBirthTarget == 0) {
                        this.statusBirthTarget = 6;
                    }
                    break;
                case 7:
                    if (this.statusBirthTarget == 0) {
                        this.statusBirthTarget = 7;
                    }
                    break;
            }
        };
        return BuffData;
    }());
    H52D_Framework.BuffData = BuffData;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BuffData.js.map
/**
* Buff表现类
*/
var H52D_Framework;
(function (H52D_Framework) {
    var BuffAvatar = /** @class */ (function () {
        function BuffAvatar(buffdata, owner) {
            this._buffData = buffdata;
            this._owner = owner;
            this._target = H52D_Framework.SelectTarget.BuffTarget(this._buffData, this._buffData.statusActionTarget, this._owner).concat();
            this._buffAvatar = [];
            this.Do();
        }
        /**添加Buff显示效果 */
        BuffAvatar.prototype.Do = function () {
            if (!this._target)
                return;
            for (var i = 0; i < this._target.length; i++) {
                var pointid = this._buffData.pointID;
                var point = void 0;
                if (this._target[i]) {
                    if (this._target[i].type == eCharacter_TYPE.AHERO
                        || this._target[i].type == eCharacter_TYPE.DHERO) {
                        point = H52D_Framework.HeroBuffPoint[pointid - 1];
                    }
                    else {
                        if (this._target[i].vo.boss) {
                            point = H52D_Framework.BossBuffPoint[pointid - 1];
                        }
                        else {
                            point = H52D_Framework.MonsterBuffPoint[pointid - 1];
                        }
                    }
                    var x = this._target[i].PosX + point[0];
                    var y = this._target[i].PosY + point[1];
                    this.AddbuffEffect(x, y, this._target[i]);
                }
            }
        };
        /**添加初始化Buff表现特效 */
        BuffAvatar.prototype.AddbuffEffect = function (x, y, target) {
            var _this = this;
            if (this._buffData == null)
                return;
            this._buffData.hierarchy == 1 ? this._ViewRoot = H52D_Framework.AvatarRoot : this._ViewRoot = H52D_Framework.AvatarEffectRoot;
            var avatar = new H52D_Framework.Avatar(this._ViewRoot);
            this._buffAvatar.push(avatar);
            avatar.Load(this._buffData.effectPath, this._buffData.Dir, this._buffData.effectScla, x, y, Laya.Handler.create(this, function () {
                avatar.Play(_this._buffData.effectName, true);
            }));
        };
        BuffAvatar.prototype.OnUpdate = function () {
            for (var k in this._target) {
                if (this._target[k]) {
                    if (this._target[k].type == eCharacter_TYPE.MONSTER) {
                        var a = this._target[k];
                        if (a.IsDie)
                            this.Destroy();
                    }
                }
            }
        };
        /**删除所有buff的表现效果 */
        BuffAvatar.prototype.Destroy = function () {
            for (var i = 0; i < this._buffAvatar.length; i++) {
                if (this._buffAvatar[i]) {
                    this._buffAvatar[i].Destroy();
                    this._buffAvatar[i] = null;
                }
            }
            this._buffAvatar = [];
            this._target = [];
            this._owner = null;
            // this._buffData = null;
            H52D_Framework.Tick.ClearAll(this);
        };
        return BuffAvatar;
    }());
    H52D_Framework.BuffAvatar = BuffAvatar;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BuffAvatar.js.map
/*
* buff类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var Buff = /** @class */ (function () {
        /**初始化 */
        function Buff(id, owner) {
            this._owner = null;
            /** buff数据*/
            this._buffData = null;
            /**伤害系数 */
            this._ratio = 0;
            this._currentCd = 0;
            this._bCD = true;
            /**Buff表现 */
            this._avatar = null;
            /**Buff效果 */
            this._effect = null;
            this._id = 0;
            this._currenttime = 0;
            this._bSpell = false;
            this._buffData = new H52D_Framework.BuffData(id);
            this._id = id;
            this._owner = owner;
        }
        Object.defineProperty(Buff.prototype, "id", {
            get: function () { return this._id; },
            enumerable: true,
            configurable: true
        });
        /**Buff产生效果 */
        Buff.prototype.Do = function (ratio) {
            if (!this._buffData)
                return;
            // this.DsetroyEvent();
            H52D_Framework.Event.RegistEvent("Destroy_s", Laya.Handler.create(this, this.Destroy_S));
            if (this._bCD) {
                this._bSpell = true;
                this._currentCd = this._buffData.inlayCd;
                this._bCD = false;
                if (ratio)
                    this._ratio = ratio;
                else
                    this._ratio = 0;
                this._effect = new H52D_Framework.BuffEffect(this._buffData, this._owner, this._ratio);
                if (this._buffData.effectPath)
                    this._avatar = new H52D_Framework.BuffAvatar(this._buffData, this._owner);
            }
        };
        /**替换规则 */
        Buff.prototype.RepeatBuff = function () {
        };
        Buff.prototype.OnUpdate = function () {
            if (this._buffData) {
                if (this._buffData.existTime != -1 && this._buffData.id != 1 && this._bSpell) {
                    this._currenttime += 100;
                    if (this._currenttime >= this._buffData.existTime) {
                        this._currenttime = 0;
                        this._bSpell = false;
                        this.Destroy();
                    }
                }
                if (!this._buffData.existTime && this._buffData.continueType == 3 && this._bSpell) {
                    this._currenttime += 100;
                    if (this._currenttime >= 1000) {
                        this._currenttime = 0;
                        this._bSpell = false;
                        this.Destroy();
                    }
                }
            }
            if (this._effect)
                this._effect.OnUpdate();
            if (this._avatar)
                this._avatar.OnUpdate();
            if (this._currentCd > 0) {
                this._currentCd -= 100;
            }
            else if (this._currentCd <= 0) {
                this._bCD = true;
            }
            if (!H52D_Framework.BattleManager.Instance.IsHasAliveTarget()) {
                this.Destroy_S();
            }
        };
        Buff.prototype.Destroy_S = function () {
            if (this._buffData.existTime == -1) {
                this.Destroy();
            }
        };
        /**
         * DsetroyEvent
         */
        Buff.prototype.DsetroyEvent = function () {
        };
        /**销毁 */
        Buff.prototype.Destroy = function () {
            if (this._effect) {
                this._effect.Destroy();
                this._effect = null;
            }
            //删除buff表现效果
            if (this._avatar) {
                this._avatar.Destroy();
                this._avatar = null;
            }
            H52D_Framework.Event.RemoveEvent("Destroy_s", Laya.Handler.create(this, this.Destroy_S));
            // this._buffData = null;
            // this._owner = null;
            // Event.RemoveEvent("Destroy_s", Laya.Handler.create(this, this.Destroy_S));
        };
        return Buff;
    }());
    H52D_Framework.Buff = Buff;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Buff.js.map
/*
* 战斗管理类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var BattleManager = /** @class */ (function () {
        /**初始化 */
        function BattleManager() {
            this._dieIndex = 0;
            this._isBorth = false;
            // 点击次数
            this.clickNum = 0;
            // 英雄攻击次数
            this.heroAttackNum = 0;
            // 宠物攻击次数
            this.petAttackNum = 0;
            // 点击暴击次数
            this.clickCritNum = 0;
            this.bStopBattle = false;
            this._isOnce = false;
            /**给服务器传的点击数 */
            this._IndexNumber = 0;
            /**当前点击数 */
            this._TapIndex = 0;
            /**点击的最大次数 */
            this._TapMaxNum = 0;
            /**是否开启 点击上限值逻辑 */
            this._isUpper = false;
            /**是否达到最大点击上限值 */
            this._isUpperValue = false;
            /**记录点击的时间 */
            this._tapTime = 0;
            /**记录上一次点击时间 */
            this._lasttapTime = 0;
            /**开启DPS刷新 */
            this._isOpen = false;
            this.TriggerBubblNum = 0;
            this.tirgegrBubblJudge = false;
            this.first = false;
            // 当前累积伤害
            this.TheWordBossDamage = 0;
            this.bWordBoss = false;
            this._bdirct = false;
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.BEGIN_FIRE, Laya.Handler.create(this, this.OnFire));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.MAIN_VIEW_CLICK, Laya.Handler.create(this, this.OnClick));
            H52D_Framework.Event.RegistEvent("ChallengeBossFail", Laya.Handler.create(this, this.BattleFail));
            H52D_Framework.Event.RegistEvent("StopBubbleMonster", Laya.Handler.create(this, this.StopBubbleMonster));
            H52D_Framework.Event.RegistEvent("AchievenAttackNum", Laya.Handler.create(this, this.AchievenAttackNum));
            H52D_Framework.PlaySkill.Init;
            this._aIOperation = new H52D_Framework.AIOperation();
            this._stateOperation = new H52D_Framework.StateOperation();
            H52D_Framework.Tick.Loop(100, this, this.Update);
        }
        Object.defineProperty(BattleManager, "Instance", {
            get: function () {
                if (BattleManager._inst == null) {
                    BattleManager._inst = new BattleManager();
                }
                return BattleManager._inst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BattleManager.prototype, "HeroCardMgr", {
            get: function () { return this._herocardMgr; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BattleManager.prototype, "MonsterFormation", {
            get: function () { return this._monsterFormation; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BattleManager.prototype, "IsBorth", {
            /**判断怪物是否已经生成,
             * true 生成
             * false 没有生成
             */
            get: function () {
                return this._isBorth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BattleManager.prototype, "aIOperation", {
            get: function () {
                return this._aIOperation;
            },
            enumerable: true,
            configurable: true
        });
        BattleManager.prototype.Initialize = function (callBack) {
            this._aIOperation = new H52D_Framework.AIOperation();
            this._stateOperation = new H52D_Framework.StateOperation();
            this._herocardMgr = H52D_Framework.HeroCardManager.Instance;
            /**执行英雄初始化,加载资源 */
            this._herocardMgr.AvatarInit(callBack);
            this._monsterFormation = null;
            this._monsterFormation = new H52D_Framework.Formation();
        };
        /**进入战斗 */
        BattleManager.prototype.OnFire = function () {
            this._bdirct = false;
            this.TheWordBossDamage = 0;
            if (!this._herocardMgr)
                return;
            if (!this._herocardMgr.CHeroList && H52D_Framework.ObjIsEmpty(this._herocardMgr.CHeroList))
                return;
            var monster = H52D_Framework.MonsterManager.Instance.monsterList;
            if (this._herocardMgr.CHeroList) {
                for (var i = 0; i < H52D_Framework.GetTabLength(this._herocardMgr.CHeroList); i++) {
                    var hc = this._herocardMgr.CHeroList[i];
                    if (hc) {
                        hc.Target = [];
                        hc.CloseAutoAttack();
                    }
                }
            }
            this._monsterFormation.GetFormatInfo(monster);
            var index = 0;
            var t;
            /**给英雄赋值攻击目标 */
            for (var i = 0; i < H52D_Framework.GetTabLength(this._herocardMgr.CHeroList); i++) {
                var hc = this._herocardMgr.CHeroList[i];
                if (index >= 3 && index < 6) {
                    index -= 3;
                }
                else if (index >= 6) {
                    index -= 6;
                }
                if (this._monsterFormation.GetFrontobject[index]) {
                    var target = this._monsterFormation.GetFrontobject[index];
                    hc.Target.push(target);
                    t = target;
                    index += 1;
                }
                else {
                    if (index > 0)
                        index -= 1;
                    var target = this._monsterFormation.GetFrontobject[index];
                    hc.Target.push(target);
                }
            }
            this._isBorth = true;
            this.HeroAttack();
            if (H52D_Framework.BPetManager.Instance.PetIns) {
                H52D_Framework.BPetManager.Instance.SetTarget(t);
            }
            if (H52D_Framework.BCampManager.Instance.Camp) {
                H52D_Framework.BCampManager.Instance.SetTarget(t);
            }
            this.OnEffectPassive();
            /** 如果当前勾选了技能则自动释放 */
            if (H52D_Framework.MainSkillView.IsAuto && H52D_Framework.CaptainSkill.CurCdTime <= 0) {
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.CAPATIAN_SKILL);
            }
            /** 新手指导 */
            H52D_Framework.Guidance.Instance.Trigger_Fourthly();
        };
        // public RefHero() {
        //     if (this._herocardMgr && this._herocardMgr.CHeroList) {
        //         for (let k in this._herocardMgr.CHeroList) {
        //             if (this._herocardMgr.CHeroList[k]) {
        //                 this._herocardMgr.CHeroList[k].avatar.visible = true;
        //             }
        //         }
        //     }
        // }
        BattleManager.prototype.OnEffectPassive = function () {
            for (var i = 0; i < this.HeroCardMgr.CHeroList.length; i++) {
                if (this.HeroCardMgr.CHeroList[i]) {
                    this.HeroCardMgr.CHeroList[i].OnEffectPassive();
                }
            }
        };
        /**更新函数 */
        BattleManager.prototype.Update = function () {
            if (this._herocardMgr && this._herocardMgr.CHeroList) {
                for (var k in this._herocardMgr.CHeroList) {
                    if (this._herocardMgr.CHeroList[k])
                        this._herocardMgr.CHeroList[k].OnUpdate();
                }
            }
            if (H52D_Framework.BPetManager.Instance.PetIns) {
                H52D_Framework.BPetManager.Instance.PetIns.OnUpdate();
            }
            if (H52D_Framework.BCampManager.Instance.Camp) {
                H52D_Framework.BCampManager.Instance.Camp.OnUpdate();
            }
            H52D_Framework.PlaySkill.Init.OnUpdate();
            if (!this._isBorth)
                return;
            this.LastMosterLocation = this.LastMosterLocationF();
            this.MonsterDieLogic();
            this.BattleSuccess();
            this.SetOnceTarget();
        };
        /**获得最后一个英雄的位置信息 */
        BattleManager.prototype.LastMosterLocationF = function () {
            var location = new Laya.Point(0, 0);
            var monster;
            var monstersList = this._monsterFormation.Getobject;
            if (monstersList) {
                var Len = H52D_Framework.GetTabLength(monstersList);
                if (Len <= 0) {
                    monster = null;
                }
                else if (Len == 1) {
                    monster = monstersList[0];
                }
                else {
                    var index = 0;
                    for (var i = 0; i < Len; i++) {
                        if (monstersList[i] == null) {
                            index += 1;
                        }
                        var num = Len - index;
                        if (num == 1) {
                            for (var j = 0; j < Len; j++) {
                                if (monstersList[j]) {
                                    monster = monstersList[j];
                                }
                            }
                        }
                    }
                }
            }
            if (monster && monster.avatar != null) {
                location.x = H52D_Framework.MonsterLocal[monster.vo.location][0] * G_StageWidthScale;
                location.y = H52D_Framework.MonsterLocal[monster.vo.location][1] - monster.avatar.height;
            }
            return location;
        };
        /**英雄循环攻击 */
        BattleManager.prototype.HeroAttack = function () {
            if (!this._herocardMgr || !this._herocardMgr.CHeroList)
                return;
            var len = H52D_Framework.GetTabLength(this._herocardMgr.CHeroList) - 1;
            var _loop_1 = function (i) {
                var hc = this_1._herocardMgr.CHeroList[i];
                if (!hc)
                    return { value: void 0 };
                var time = 0;
                /**第一位出手英雄 */
                var X = H52D_Framework.GameParamConfig["FastestHeroFirstAttackTime"];
                /**其他英雄出手 */
                var Y = H52D_Framework.GameParamConfig["OtherHeroFirstAttackTimeRatio"];
                if (i == len) {
                    time = X;
                }
                else {
                    var firstHero = this_1._herocardMgr.CHeroList[len];
                    var F = firstHero.vo.ToSpeed;
                    time = X + (F - hc.vo.ToSpeed) * Y;
                }
                H52D_Framework.Tick.Once(time, this_1, function () {
                    hc.OpenAutoAttack();
                });
            };
            var this_1 = this;
            for (var i = len; i >= 0; i--) {
                var state_1 = _loop_1(i);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        };
        /**
         * 集体切换目标
         */
        BattleManager.prototype.GroupChangeTarget = function () {
            if (this.IsChangeTarget()) {
                this._dieIndex += 3;
                for (var i = 0; i < 9; i++) {
                    var index = i;
                    switch (this._dieIndex) {
                        case 3:
                            if (index < 3) {
                                index += 3;
                            }
                            else if (index >= 6) {
                                index -= 3;
                            }
                            break;
                        case 6:
                            if (index < 3) {
                                index += 6;
                            }
                            else if (index >= 3 && index < 6) {
                                index += 3;
                            }
                            break;
                    }
                    if (this._monsterFormation.Getobject[index]) {
                        this._herocardMgr.CHeroList[i].Target = this._monsterFormation.Getobject[index];
                    }
                }
            }
        };
        /**
         * 是否切换目标
         * 当前排或者中间3个没了，就切换 目标
         * 1vs1 2vs2 3vs3
         */
        BattleManager.prototype.IsChangeTarget = function () {
            for (var m = 0; m < 3; m++) {
                var count = m + this._dieIndex;
                if (this._monsterFormation.Getobject[count]) {
                    return false;
                }
            }
            return true;
        };
        /**设置一个目标
         * 当前排少了一个，空目标的英雄会去选择最小数字的那个怪物
         * 如 0 1 2 2死  就切换去打0
         */
        BattleManager.prototype.SetOnceTarget = function () {
            if (this._herocardMgr && this._herocardMgr.CHeroList) {
                for (var i = 0; i < H52D_Framework.GetTabLength(this._herocardMgr.CHeroList); i++) {
                    if (this._herocardMgr.CHeroList[i]) {
                        if (!this._herocardMgr.CHeroList[i].Target) {
                            this._herocardMgr.CHeroList[i].Target = [];
                            for (var j = 0; j < H52D_Framework.GetTabLength(this._monsterFormation.Getobject); j++) {
                                if (this._monsterFormation.Getobject[j]) {
                                    this._herocardMgr.CHeroList[i].Target = this._monsterFormation.Getobject[j];
                                    return;
                                }
                            }
                        }
                    }
                }
            }
        };
        /**
         * 怪物死亡刷新逻辑
         */
        BattleManager.prototype.MonsterDieLogic = function () {
            for (var i = 0; i < H52D_Framework.GetTabLength(this._monsterFormation.Getobject); i++) {
                if (this._monsterFormation.Getobject[i] != null) {
                    if (this._monsterFormation.Getobject[i]._isDown == true) {
                        this._monsterFormation.Getobject[i] = null;
                    }
                }
            }
        };
        /**判断是不是过关成功 */
        BattleManager.prototype.isSuccess = function () {
            if (!this._monsterFormation.Getobject) {
                return 0;
            }
            for (var i = 0; i < H52D_Framework.GetTabLength(this._monsterFormation.Getobject); i++) {
                if (this._monsterFormation.Getobject[i]) {
                    if (this._monsterFormation.Getobject[i].afterDie) {
                        this._monsterFormation.Getobject[i].afterDie = false;
                        if (H52D_Framework.CustomsManager.Instance.bBoss) {
                            H52D_Framework.Guidance.Instance.Trigger_Second();
                        }
                        return 2;
                    }
                    if (this._monsterFormation.Getobject[i].beforDie) {
                        this._monsterFormation.Getobject[i].beforDie = false;
                        return 1;
                    }
                }
            }
            return 0;
        };
        /** 是否有活着第目标 */
        BattleManager.prototype.IsHasAliveTarget = function () {
            if (!this._monsterFormation) {
                return false;
            }
            if (!this._monsterFormation.Getobject) {
                return false;
            }
            for (var i = 0; i < H52D_Framework.GetTabLength(this._monsterFormation.Getobject); i++) {
                if (this._monsterFormation.Getobject[i]) {
                    if (this._monsterFormation.Getobject[i]._currentHP > 0) {
                        return true;
                    }
                }
            }
            return false;
        };
        BattleManager.prototype.AchievenAttackNum = function () {
            //英雄攻击次数
            H52D_Framework.MasterPlayer.Instance.ReqOnEvent(EventProEnum.HeroAttack, this.heroAttackNum);
            this.heroAttackNum = 0;
            //神兽攻击次数
            H52D_Framework.MasterPlayer.Instance.ReqOnEvent(EventProEnum.PetAttack, this.petAttackNum);
            this.petAttackNum = 0;
            //点击暴击次数
            H52D_Framework.MasterPlayer.Instance.ReqOnEvent(EventProEnum.GetClickCritNum, this.clickCritNum);
            this.clickCritNum = 0;
            //点击次数
            H52D_Framework.RemoteCall.Instance.Send("K_ReqClickTimes", this.clickNum);
            this.clickNum = 0;
            //刷新成就页面
            H52D_Framework.Event.DispatchEvent("UpdateAchievenDate");
        };
        BattleManager.prototype.bdirct = function () {
            this._bdirct = true;
            for (var k in this._monsterFormation.Getobject) {
                if (this._monsterFormation.Getobject[k]) {
                    this._monsterFormation.Getobject[k].setHp();
                }
            }
            this._monsterFormation.Destroy();
            this._bdirct = true;
            H52D_Framework.Event.DispatchEvent("Destroy_s");
        };
        /**战斗胜利 */
        BattleManager.prototype.BattleSuccess = function () {
            var success = this._bdirct ? 1 : this.isSuccess();
            if (success > 0 && this._isBorth) {
                if (success == 1) {
                    if (this._bdirct)
                        this._isBorth = false;
                    H52D_Framework.Event.DispatchEvent("CUSTOMS_RESULT", [true]);
                }
                else if (success == 2) {
                    this._isBorth = false;
                    this._monsterFormation.Destroy();
                    // Event.DispatchEvent("CUSTOMS_UPDATE");
                    /**buff为-1的销毁 */
                    //Event.DispatchEvent("BattleEnd");
                    H52D_Framework.Event.DispatchEvent("Destroy_s");
                    H52D_Framework.CustomsManager.Instance.FightUpdate();
                    // Tick.Clear(this, this.Update);
                }
            }
        };
        /**战斗失败 */
        BattleManager.prototype.BattleFail = function () {
            /**buff为-1的销毁 */
            H52D_Framework.Event.DispatchEvent("Destroy_s");
            //Event.DispatchEvent("BattleEnd");
            //提示没在指定时间内打败，进入循环打小怪模式
            if (H52D_Framework.CustomsManager.Instance.CustomsVo.customsType == Customs_Type.Boss) {
                BattleManager.Instance.StopBattle();
                H52D_Framework.WroldBossManager.Instance.Buff_Del();
                H52D_Framework.UIManager.Instance.CreateUI("WroldBossEndView", [H52D_Framework.ViewUpRoot]);
                if (H52D_Framework.UIManager.Instance.IsHave("WroldBossBuffView", H52D_Framework.ViewUpRoot)) {
                    H52D_Framework.UIManager.Instance.DestroyUI("WroldBossBuffView", [H52D_Framework.ViewUpRoot]);
                }
            }
            else {
                H52D_Framework.Event.DispatchEvent("CUSTOMS_RESULT", [false]);
            }
        };
        /**暂停战斗 */
        BattleManager.prototype.StopBattle = function () {
            H52D_Framework.MainSkillView.IsAuto = false;
            this.bStopBattle = true;
            H52D_Framework.Tick.Clear(this, this.Update);
        };
        /**开启战斗 */
        BattleManager.prototype.OpenBattle = function () {
            H52D_Framework.MainSkillView.IsAuto = true;
            this.bStopBattle = false;
            H52D_Framework.Tick.Loop(100, this, this.Update);
        };
        /**接收到点击事件 */
        BattleManager.prototype.OnClick = function (strEvent) {
            var _this = this;
            if (!this.IsHasAliveTarget()) {
                return;
            }
            if (!this._isUpper) {
                this._isUpper = true;
                H52D_Framework.Tick.Once(1000, this, function () {
                    _this._isUpperValue = false;
                    _this._TapMaxNum = 0;
                    _this._isUpper = false;
                });
            }
            if (H52D_Framework.BubbleManager.Instance.bMonsterFirst) {
                var startTime = H52D_Framework.GameParamConfig.MonsterHidden[1] * 1000;
                H52D_Framework.Tick.Once(startTime, this, this.StartBubbleFirst, [], false);
                this.TriggerBubblNum += 1;
            }
            if (this._isUpperValue)
                return;
            /**点击上限次数 */
            var upper = H52D_Framework.GameParamConfig["ClickMaxEffectiveNumPerSecond"];
            this._TapMaxNum += 1;
            this.clickNum++;
            if (this._TapMaxNum > upper) {
                this._isUpperValue = true;
            }
            var params = this._aIOperation.Do();
            this._stateOperation.Do(params, strEvent);
            this.TapTarget();
            this.DPSshow(params[1]);
        };
        BattleManager.prototype.StartBubbleFirst = function () {
            var clickNum = H52D_Framework.GameParamConfig.MonsterHidden[2];
            if (this.TriggerBubblNum >= clickNum) {
                this.TriggerBubblNum = 0;
                if (H52D_Framework.BubbleManager.Instance.bMonsterBubble) {
                    H52D_Framework.Tick.Once(2000, this, this.StartBubbleMonster, [], false);
                }
            }
        };
        BattleManager.prototype.StartBubbleMonster = function () {
            H52D_Framework.Event.DispatchEvent("StartBubbleMonster", [E_BubbleType.eMonster, 1, 20000, false, false]);
        };
        BattleManager.prototype.StopBubbleMonster = function () {
            H52D_Framework.Tick.Clear(this, this.StartBubbleFirst);
            H52D_Framework.Tick.Clear(this, this.StartBubbleMonster);
            this.TriggerBubblNum = 0;
        };
        /**点击目标 */
        BattleManager.prototype.TapTarget = function () {
            var index = 0;
            var num = H52D_Framework.GetTabLength(this._monsterFormation.Getobject);
            for (var j = 0; j < num; j++) {
                if (this._monsterFormation.Getobject[j] != null) {
                    this.RememberNumber();
                    this._IndexNumber += 1;
                    index = j;
                    return;
                }
            }
        };
        /**记每6S的点击次数，给服务器 */
        BattleManager.prototype.RememberNumber = function () {
            var _this = this;
            if (this._IndexNumber != 0) {
                if (!this._isOnce) {
                    H52D_Framework.Tick.Once(60000, this, function () {
                        _this._isOnce = false;
                        H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.TAP_NUMBER, [_this._IndexNumber]);
                        _this._IndexNumber = 0;
                    });
                }
                this._isOnce = true;
            }
        };
        /**总DPS小面板 */
        BattleManager.prototype.DPSshow = function (damage) {
            var _this = this;
            var DpsCountingInterval = H52D_Framework.GameParamConfig["DpsCountingInterval"];
            var DpsPurgeInterval = H52D_Framework.GameParamConfig["DpsPurgeInterval"];
            this._TapIndex += 1;
            if (!this._isOpen && this._aIOperation) {
                this._isOpen = true;
                H52D_Framework.Tick.Loop(DpsCountingInterval, this, function () {
                    if (_this._tapTime >= DpsPurgeInterval && _this._lasttapTime > 1000) {
                        _this._tapTime = 0;
                        _this._TapIndex = 0;
                        if (!_this._aIOperation)
                            return;
                        H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.ALL_DPS, [_this.aIOperation.AllDps]);
                        return;
                    }
                    _this._lasttapTime = _this._tapTime - _this._lasttapTime;
                    _this._tapTime += DpsCountingInterval;
                    var currentTime = _this._tapTime / 1000;
                    if (!_this._aIOperation)
                        return;
                    var heroDps = _this.aIOperation.AllDps;
                    var idamage = 0;
                    if (currentTime >= 1) {
                        idamage = (_this._TapIndex * damage / currentTime) + heroDps >> 0;
                    }
                    else {
                        idamage = _this._TapIndex * damage + heroDps >> 0;
                    }
                    H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.ALL_DPS, [idamage.toString()]);
                });
            }
        };
        /**切换Boss用 */
        BattleManager.prototype.DestroyMonster = function () {
            H52D_Framework.Event.DispatchEvent("Destroy_s");
            for (var i = 0; i < this._monsterFormation.Getobject.length; i++) {
                if (this._monsterFormation.Getobject[i])
                    this._monsterFormation.Getobject[i].IsDie = true;
            }
            H52D_Framework.MonsterManager.Instance.Destroy();
            this._monsterFormation.Destroy();
            if (this._herocardMgr && this._herocardMgr.CHeroList) {
                for (var i = 0; i < H52D_Framework.GetTabLength(this._herocardMgr.CHeroList); i++) {
                    var hc = this._herocardMgr.CHeroList[i];
                    if (hc)
                        hc.ClearTarget();
                }
            }
        };
        /**销毁 */
        BattleManager.prototype.Destroy = function () {
            H52D_Framework.Event.DispatchEvent("Destroy_s");
            this._isUpperValue = false;
            this._TapMaxNum = 0;
            this._isUpper = false;
            this._isOpen = false;
            this._isBorth = false;
            if (this._aIOperation) {
                this._aIOperation.Destroy();
                this._aIOperation = null;
                "";
            }
            if (this._stateOperation) {
                this._stateOperation.Destroy();
                this._stateOperation = null;
            }
            if (this._herocardMgr) {
                this._herocardMgr.Destroy();
                this._herocardMgr = null;
            }
            H52D_Framework.BPetManager.Instance.Destroy();
            H52D_Framework.BCampManager.Instance.Destroy();
            H52D_Framework.MonsterManager.Instance.Destroy();
            if (this._monsterFormation)
                this._monsterFormation.Destroy();
            // Tick.ClearAll(this);
        };
        return BattleManager;
    }());
    H52D_Framework.BattleManager = BattleManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BattleManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**装备属性类
     * @author zhangzhenming
     * */
    var AttrributeEquipment = /** @class */ (function () {
        /**owner在这里基本属于无用的 别问为什么 我也不知道 */
        /**
         * 初始化
         * @param owner 所属者
         * @param data 一条完整的数据格式{id:0,value:0}
         */
        function AttrributeEquipment(data) {
            /**属性id */
            this._attributeID = 0;
            /**属性加值*/
            this._attributeSubValue = 0;
            /**作用目标 */
            this._target = [];
            /**当前法力回复速度 */
            this._currentMpRecover = 0;
            /**当前法力上限制 */
            this._currentMp = 0;
            this._data = {};
            this._owner = this;
            this._data = data;
            this._attributeID = data[1];
            this._attributeSubValue = data[2];
        }
        Object.defineProperty(AttrributeEquipment.prototype, "getData", {
            get: function () { return this._data; },
            enumerable: true,
            configurable: true
        });
        /**产生效果 */
        AttrributeEquipment.prototype.OnEffect = function () {
            this._target = [];
            this._target = H52D_Framework.SelectTarget.ImpactTarget(this._attributeID, this._owner).concat();
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    this.AddAttribute(this._target[i]);
                }
            }
        };
        /**为单个目标 修改属性 */
        AttrributeEquipment.prototype.AddAttribute = function (target) {
            var attr = target.attr;
            if (attr == null)
                return;
            if (this._attributeID == 53 || this._attributeID == 51) {
                this.AddAttributePlayer();
                return;
            }
            var modfiy_id = attr.GetAttributeModfiyID(this._attributeID);
            var isPercent = attr.GetAttributeIsPer(modfiy_id);
            if (isPercent == 1) {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Percent, this._attributeSubValue);
            }
            else {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Fixed, this._attributeSubValue);
            }
        };
        /**修改主角特有属性 */
        AttrributeEquipment.prototype.AddAttributePlayer = function () {
            if (this._attributeID == 53) {
                var subvalue = this._attributeSubValue / 10000;
                var mpCurrent = H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeTypeValue(53, H52D_Framework.eValueType.Base);
                this._currentMpRecover = mpCurrent * subvalue;
                this._currentMpRecover = Math.ceil(this._currentMpRecover);
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, H52D_Framework.eValueType.Fixed, this._currentMpRecover);
                H52D_Framework.Event.DispatchEvent("MpRecoveryRateChange");
                return;
            }
            if (this._attributeID == 51) {
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, H52D_Framework.eValueType.Fixed, this._attributeSubValue);
                H52D_Framework.Event.DispatchEvent("MpPoolChange");
                return;
            }
        };
        /**
         * 删除增加的属性
         * @param target 目标
         */
        AttrributeEquipment.prototype.RemoveAttribute = function (target) {
            var attr = target.attr;
            if (this._attributeID == 53 || this._attributeID == 51) {
                this.RemoveAttributePlayer();
                return;
            }
            var modfiy_id = attr.GetAttributeModfiyID(this._attributeID);
            var isPercent = attr.GetAttributeIsPer(modfiy_id);
            if (isPercent == 1) {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Percent, -this._attributeSubValue);
            }
            else {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Fixed, -this._attributeSubValue);
            }
        };
        /**
         * 删除增加的主角特有属性
         */
        AttrributeEquipment.prototype.RemoveAttributePlayer = function () {
            if (this._attributeID == 53) {
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, H52D_Framework.eValueType.Fixed, -this._currentMpRecover);
                H52D_Framework.Event.DispatchEvent("MpRecoveryRateChange");
            }
            if (this._attributeID == 51) {
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, H52D_Framework.eValueType.Fixed, -this._attributeSubValue);
                H52D_Framework.Event.DispatchEvent("MpPoolChange");
            }
        };
        /**销毁 */
        AttrributeEquipment.prototype.Destroy = function () {
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    this.RemoveAttribute(this._target[i]);
                }
            }
            this._target = [];
        };
        return AttrributeEquipment;
    }());
    H52D_Framework.AttrributeEquipment = AttrributeEquipment;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=AttrributeEquipment.js.map
/**
* name
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**值类型 */
    var eValueType;
    (function (eValueType) {
        /**配置值 */
        eValueType[eValueType["Base"] = 0] = "Base";
        /**加成百分比 */
        eValueType[eValueType["Percent"] = 1] = "Percent";
        /**加成固定值 */
        eValueType[eValueType["Fixed"] = 2] = "Fixed";
        /**附加固定值 */
        eValueType[eValueType["Other"] = 3] = "Other";
        eValueType[eValueType["BFixed"] = 4] = "BFixed";
        eValueType[eValueType["BPercent"] = 5] = "BPercent";
    })(eValueType = H52D_Framework.eValueType || (H52D_Framework.eValueType = {}));
    /**属性值 */
    var AttributeValue = /** @class */ (function () {
        /**
         *
         * @param base 配置值
         * @param percent 加成百分比
         * @param fixed 加成固定值
         * @param other 附加固定值
         */
        function AttributeValue(base, percent, fixed, other, peta, bfixed, bper) {
            var _a;
            this._value = {};
            this._value = (_a = {},
                _a[eValueType.Base] = base >> 0,
                _a[eValueType.Percent] = percent >> 0,
                _a[eValueType.Fixed] = fixed >> 0,
                _a[eValueType.Other] = other >> 0,
                _a[eValueType.BFixed] = bfixed >> 0,
                _a[eValueType.BPercent] = bper >> 0,
                _a);
        }
        /**设置属性 */
        AttributeValue.prototype.SetValue = function (valType, value) {
            this._value[valType] = value;
            if (this._value[valType] < 0) {
                this._value[valType] = 0;
            }
        };
        /**修改属性 */
        AttributeValue.prototype.ModfiyValue = function (valType, value) {
            this._value[valType] += value;
            if (this._value[valType] < 0) {
                this._value[valType] = 0;
            }
        };
        Object.defineProperty(AttributeValue.prototype, "bValue", {
            get: function () {
                var value = (this._value[eValueType.Base]
                    + this._value[eValueType.Fixed])
                    * (1 + this._value[eValueType.Percent] / 10000);
                return Math.floor(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "Value", {
            /**获取属性值 */
            get: function () {
                var value = (this._value[eValueType.Base]
                    + this._value[eValueType.Fixed])
                    * (1 + this._value[eValueType.Percent] / 10000)
                    + this._value[eValueType.Other];
                value = value + this._value[eValueType.BFixed] *
                    (1 + this._value[eValueType.BPercent] / 10000);
                return Math.floor(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "Fixed", {
            /**获取固定属性值 */
            get: function () {
                var value = this._value[eValueType.Fixed];
                return Math.floor(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "Percent", {
            /**获取百分比属性加值 */
            get: function () {
                var value = this._value[eValueType.Percent];
                return Math.floor(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "Base", {
            /**获取配置表属性值 */
            get: function () {
                var value = this._value[eValueType.Base];
                return Math.floor(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "Other", {
            /**获取附加值 */
            get: function () {
                var value = this._value[eValueType.Other];
                return Math.floor(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "BFixed", {
            /**获取附加值 */
            get: function () {
                var value = this._value[eValueType.BFixed];
                return Math.floor(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValue.prototype, "BPercent", {
            /**获取附加值 */
            get: function () {
                var value = this._value[eValueType.BPercent];
                return Math.floor(value);
            },
            enumerable: true,
            configurable: true
        });
        return AttributeValue;
    }());
    H52D_Framework.AttributeValue = AttributeValue;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=AttributeValue.js.map
/**
* name
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**属性 */
    var Attribute = /** @class */ (function () {
        /**1: 0 固定值 1百分比 */
        /**2: 0 不显示百分比 1显示百分比 */
        /**3: 0 没有  对应修改的ID*/
        /**4: 0 不带目标  1：主角 2：攻击型 3：防御型  4：所有英雄 5：神兽 6：阵营 7：所有*/
        function Attribute() {
            var _a;
            this._attributeTab = {};
            this._attributeTab = (_a = {},
                _a[1] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 0, 3: 1, 4: 0 },
                _a[2] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 0, 3: 2, 4: 0 },
                _a[3] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 0, 3: 3, 4: 0 },
                _a[4] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 4, 4: 0 },
                _a[5] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 5, 4: 0 },
                _a[8] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 3, 4: 0 },
                _a[9] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 1, 4: 0 },
                _a[10] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 2, 4: 0 },
                _a[11] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 2, 4: 1 },
                _a[12] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 2, 4: 2 },
                _a[13] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 2, 4: 3 },
                _a[14] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 2, 4: 4 },
                _a[15] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 2, 4: 5 },
                _a[16] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 2, 4: 6 },
                _a[17] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 2, 4: 7 },
                _a[21] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 21, 4: 1 },
                _a[22] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 22, 4: 4 },
                _a[23] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 23, 4: 4 },
                _a[24] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 24, 4: 4 },
                _a[25] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 25, 4: 4 },
                _a[26] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 26, 4: 4 },
                _a[27] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 27, 4: 7 },
                _a[31] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 4, 4: 1 },
                _a[32] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 4, 4: 2 },
                _a[33] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 4, 4: 3 },
                _a[34] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 4, 4: 4 },
                _a[35] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 4, 4: 5 },
                _a[36] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 4, 4: 6 },
                _a[37] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 4, 4: 7 },
                _a[41] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 5, 4: 1 },
                _a[42] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 5, 4: 2 },
                _a[43] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 5, 4: 3 },
                _a[44] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 5, 4: 4 },
                _a[45] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 5, 4: 5 },
                _a[46] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 5, 4: 6 },
                _a[47] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 5, 4: 7 },
                _a[51] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 0, 3: 51, 4: 1 },
                _a[52] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 0, 3: 52, 4: 1 },
                _a[53] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 0, 3: 53, 4: 1 },
                _a[54] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 0, 4: 0 },
                _a[55] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 0, 4: 0 },
                _a[56] = { 0: new H52D_Framework.AttributeValue(), 1: 0, 2: 1, 3: 0, 4: 0 },
                _a[57] = { 0: new H52D_Framework.AttributeValue(), 1: 1, 2: 1, 3: 0, 4: 0 },
                _a);
        }
        /**获取属性表————
         * 属性 1 生命  2 伤害 3 先手速度 4 暴击率 5 暴击倍率
         * 其他id 用于修改以上属性
         */
        Attribute.prototype.GetAttributeTab = function (id) {
            if (this._attributeTab[id]) {
                return this._attributeTab[id];
            }
            H52D_Framework.Debugger.LogError(id + "GetAttributeTab() this attribute is no exist");
            return null;
        };
        /**获取是否以百分比的方式加成 0固定值  1百分比加成 */
        Attribute.prototype.GetAttributeIsPer = function (id) {
            if (this._attributeTab[id]) {
                return this._attributeTab[id][1];
            }
            H52D_Framework.Debugger.LogError(id + "GetAttributeIsPer() this attribute is no exist");
            return null;
        };
        /**获取属性是否显示百分比 0不显示  1显示 */
        Attribute.prototype.GetAttributeIsPerShow = function (id) {
            if (this._attributeTab[id]) {
                return this._attributeTab[id][2];
            }
            H52D_Framework.Debugger.LogError(id + "GetAttributeIsPerShow() this attribute is no exist");
            return null;
        };
        /**获取属性修改ID */
        Attribute.prototype.GetAttributeModfiyID = function (id) {
            if (this._attributeTab[id]) {
                return this._attributeTab[id][3];
            }
            H52D_Framework.Debugger.LogError(id + "GetAttributeModfiyID() this attribute is no exist");
            return null;
        };
        /**获得属性目标ID */
        Attribute.prototype.GetAttributeTargetID = function (id) {
            if (this._attributeTab[id]) {
                return this._attributeTab[id][4];
            }
            H52D_Framework.Debugger.LogError(id + "GetAttributeTargetID() this attribute is no exist");
            return null;
        };
        /**获取属性值
         * 属性ID 1 生命  2 伤害 3 先手速度 4 暴击率 5 暴击倍率
         * 其他id 用于修改以上属性
         */
        Attribute.prototype.GetAttributeValue = function (id) {
            if (this._attributeTab[id]) {
                var v = this._attributeTab[id][0].Value;
                if (id == 4 && v > 10000) {
                    var y = 0;
                    return 10000;
                }
                else {
                    return this._attributeTab[id][0].Value;
                }
            }
            H52D_Framework.Debugger.LogError(id + "GetAttributeValue() this attribute is no exist");
            return null;
        };
        /**
         * 计算非暴击最终伤害
         * @param sratio 技能系数
         * @param id 减免ID1
         * @param id1 减免ID2
         */
        Attribute.prototype.GetAttributeDamage = function (sratio, breaks, Others) {
            var B = this._attributeTab[2][0].Base;
            var P = this._attributeTab[2][0].Percent;
            var F = this._attributeTab[2][0].Fixed;
            var O = this._attributeTab[2][0].Other;
            var bp = this._attributeTab[2][0].BPercent;
            var bf = this._attributeTab[2][0].BFixed;
            var sp = (P - breaks) / 10000;
            if (sp <= H52D_Framework.GameParamConfig["InjuryInsuranceCoefficient"]) {
                sp = H52D_Framework.GameParamConfig["InjuryInsuranceCoefficient"];
            }
            var bl = 1 + sp;
            var op = (bp - Others) / 10000;
            if (op <= H52D_Framework.GameParamConfig["InjuryInsuranceCoefficient"]) {
                op = H52D_Framework.GameParamConfig["InjuryInsuranceCoefficient"];
            }
            var opbl = 1 + op;
            var Damage = B * sratio * bl * opbl + F + O + bf;
            return Math.floor(Damage);
        };
        Attribute.prototype.GetAttributeD = function (sratio) {
            var B = this._attributeTab[2][0].Base;
            var P = this._attributeTab[2][0].Percent;
            var F = this._attributeTab[2][0].Fixed;
            var O = this._attributeTab[2][0].Other;
            var bl = 1 + (P / 10000);
            var Damage = B * sratio * bl + F + O;
            return Math.floor(Damage);
        };
        /**Buff获取基础值 */
        Attribute.prototype.GetAttributeBuff = function (id) {
            if (this._attributeTab[id]) {
                return this._attributeTab[id][0].bValue;
            }
            H52D_Framework.Debugger.LogError(id + "GetAttributeBuff() this attribute is no exist");
            return null;
        };
        /**属性ID 1 生命  2 伤害 3 先手速度 4 暴击率 5 暴击倍率
         * Base 配置值  Fixed 固定加值  Percent 百分比加值  Other 附加值
         * @param id 属性ID
         * @param type 类型ID
         */
        Attribute.prototype.GetAttributeTypeValue = function (id, type) {
            if (this._attributeTab[id]) {
                var value = 0;
                switch (type) {
                    case H52D_Framework.eValueType.Base:
                        value = this._attributeTab[id][0].Base;
                        break;
                    case H52D_Framework.eValueType.Fixed:
                        value = this._attributeTab[id][0].Fixed;
                        break;
                    case H52D_Framework.eValueType.Other:
                        value = this._attributeTab[id][0].Other;
                        break;
                    case H52D_Framework.eValueType.Percent:
                        value = this._attributeTab[id][0].Percent;
                        break;
                    case H52D_Framework.eValueType.BFixed:
                        value = this._attributeTab[id][0].BFixed;
                        break;
                    case H52D_Framework.eValueType.BPercent:
                        value = this._attributeTab[id][0].BPercent;
                        break;
                }
                return value;
            }
            H52D_Framework.Debugger.LogError(id + " GetAttributeTypev()  this attribute is no exist");
            return null;
        };
        /**属性 1 生命  2 伤害 3 先手速度 4 暴击率 5 暴击倍率
         * 其他id 用于修改以上属性
         * type：base配置值 percent加成百分比 fixed加成固定值 other附加固定值
         * 不可叠加
         */
        Attribute.prototype.SetAttributeValue = function (id, type, value) {
            if (this._attributeTab[id]) {
                this._attributeTab[id][0].SetValue(type, value);
            }
            else {
                H52D_Framework.Debugger.LogError(id + "SetAttributeValue()  this attribute is no exist");
            }
        };
        /**属性 1 生命  2 伤害 3 先手速度 4 暴击率 5 暴击倍率
         * 其他id 用于修改以上属性
         * type：base配置值 percent加成百分比 fixed加成固定值 other附加固定值
         * 可叠加
         */
        Attribute.prototype.ModfiyAttributeValue = function (id, type, value) {
            if (this._attributeTab[id]) {
                var x = this._attributeTab[id][0];
                x.ModfiyValue(type, value);
            }
            else {
                H52D_Framework.Debugger.LogError(id + "ModfiyAttributeValue()  this attribute is no exist");
            }
        };
        return Attribute;
    }());
    H52D_Framework.Attribute = Attribute;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Attribute.js.map
/*
* AI计算类;
*/
//备注：战斗流程
var H52D_Framework;
(function (H52D_Framework) {
    var AIOperation = /** @class */ (function () {
        function AIOperation() {
            this.heroDpsNum = 0;
            this._campDps = 0;
            this._heroDps = 0;
            this._petDps = 0;
            this._allDps = 0;
            this.PetShoWDamage = 0;
            this.heroDpsNum = H52D_Framework.MasterPlayer.Instance.GetEventProByType(EventProEnum.HeroDPS);
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.MODIFYATTR, Laya.Handler.create(this, this.Dps));
        }
        Object.defineProperty(AIOperation.prototype, "CampDps", {
            /**阵营DPS */
            get: function () { return this._campDps; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AIOperation.prototype, "HeroDps", {
            /**英雄DPS */
            get: function () { return this._heroDps; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AIOperation.prototype, "PetDps", {
            /**神兽DPS */
            get: function () { return this._petDps; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AIOperation.prototype, "AllDps", {
            /**总DPS */
            get: function () { return this._allDps; },
            enumerable: true,
            configurable: true
        });
        /**销毁 */
        AIOperation.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.MODIFYATTR, Laya.Handler.create(this, this.Dps));
        };
        AIOperation.prototype.OnUpdate = function () {
        };
        /**DPS小面板 */
        AIOperation.prototype.Dps = function () {
            this._allDps = 0;
            this._petDps = 0;
            this._heroDps = 0;
            this._campDps = 0;
            this.PetShoWDamage = 0;
            if (H52D_Framework.BattleManager.Instance.HeroCardMgr) {
                var count = H52D_Framework.BattleManager.Instance.HeroCardMgr.CHeroList.length;
                for (var index = 0; index < count; index++) {
                    var heroC = H52D_Framework.BattleManager.Instance.HeroCardMgr.CHeroList[index];
                    if (heroC) {
                        var cd = 0;
                        if (heroC.attackSkill) {
                            cd = (heroC.attackSkill.Data.skillCD) / 1000;
                        }
                        else {
                            cd = 1.5;
                        }
                        var dps = heroC.vo.attr.GetAttributeValue(2) / cd;
                        this._heroDps += dps >> 0;
                        this._petDps += heroC.vo.attr.GetAttributeValue(2);
                        this.PetShoWDamage += heroC.vo.attr.GetAttributeValue(2);
                    }
                }
            }
            if (this.heroDpsNum < this._heroDps) {
                this.heroDpsNum = this._heroDps;
                //英雄DPS最大值
                H52D_Framework.MasterPlayer.Instance.ReqOnEvent(EventProEnum.HeroDPS, this.heroDpsNum);
            }
            /**通知修改英雄DPS显示 */
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.HERO_DPS, [this._heroDps.toString()]);
            /**通知修改神兽DPS显示 */
            if (H52D_Framework.BPetManager.Instance.PetIns) {
                H52D_Framework.BPetManager.Instance.PetIns.vo.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, this._petDps >> 0);
                this._petDps = this._petDps * H52D_Framework.BPetManager.Instance.PetIns.vo.ratio;
                this._petDps = this._petDps / H52D_Framework.BPetManager.Instance.PetIns.vo.CD;
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.PET_DPS, this._petDps >> 0);
                this._allDps = this._petDps + this._heroDps >> 0;
            }
            else {
                this._allDps = this._heroDps;
            }
            /**知修改阵营DPS显示*/
            if (H52D_Framework.BCampManager.Instance.Camp) {
                H52D_Framework.BCampManager.Instance.Camp.vo.setDamage();
                this._campDps = H52D_Framework.BCampManager.Instance.Camp.vo.attr.GetAttributeValue(2) * H52D_Framework.BCampManager.Instance.Camp.vo.ratio;
                var cd = H52D_Framework.BCampManager.Instance.Camp.vo.CD;
                this._campDps = this._campDps / H52D_Framework.BCampManager.Instance.Camp.vo.CD >> 0;
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.CAMP_DPS, this._campDps);
            }
            this._allDps = this._allDps + this._campDps;
            /**通知修改所有伤害DPS显示 */
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.ALL_DPS, [this._allDps.toString()]);
        };
        AIOperation.prototype.IsCrit = function () {
            var randnum = Math.random() * 10000;
            if (randnum == 0)
                return false;
            if (randnum <= H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeValue(4)) {
                return true;
            }
            return false;
        };
        AIOperation.prototype.EnemyOnHurt = function (damage, bScrit) {
            var monsterarr = H52D_Framework.BattleManager.Instance.MonsterFormation.Getobject;
            var num = H52D_Framework.GetTabLength(monsterarr);
            for (var j = 0; j < num; j++) {
                if (monsterarr[j] != null) {
                    damage = damage * monsterarr[j].vo.allDamgeReduction;
                    monsterarr[j].OnHurt(damage >> 0, SkinEnum.SkinTap, bScrit);
                    return;
                }
            }
        };
        /**执行ai计算并触发攻击指令 */
        AIOperation.prototype.Do = function () {
            var _a, _b;
            var data = new H52D_Framework.SkillData(100);
            if (H52D_Framework.MasterPlayer.Instance.Damage == 999999999) {
                var color = SkinEnum.SkinTap;
                H52D_Framework.BattleManager.Instance.clickCritNum++;
                this.EnemyOnHurt(H52D_Framework.MasterPlayer.Instance.Damage >> 0, false);
                return _a = {}, _a[1] = H52D_Framework.MasterPlayer.Instance.Damage >> 0, _a[2] = color, _a[3] = false, _a;
            }
            else {
                var damage = H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeValue(2);
                var color = SkinEnum.SkinTap;
                var isCrit = false;
                if (this.IsCrit()) {
                    isCrit = true;
                    var ratio = H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeValue(5) / 10000;
                    damage = damage * ratio;
                    H52D_Framework.BattleManager.Instance.clickCritNum++;
                }
                this.EnemyOnHurt(damage + data.fixedDamage >> 0, isCrit);
                return _b = {}, _b[1] = damage + data.fixedDamage >> 0, _b[2] = color, _b[3] = isCrit, _b;
            }
        };
        return AIOperation;
    }());
    H52D_Framework.AIOperation = AIOperation;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=AIOperation.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * ：道具模型
     * @author zhangyusong
     */
    var ItemVo = /** @class */ (function () {
        function ItemVo(id, num) {
            this.id = id;
            var a = H52D_Framework.ItemConfig;
            var data = H52D_Framework.ItemConfig[id];
            this.dwItemName = data["dwItemName"];
            this.dwItemType = data["dwItemType"];
            this.dwItemTypes = data["dwItemTypes"];
            this.dwItemAState = data["dwItemAState"];
            this.strIconID = data["strIconID"];
            this.strIconID_B = data["strIconID_B"];
            this.strDrop = data["strDrop"];
            this.dwItemQuality = data["dwItemQuality"];
            this.heroId = data["heroId"];
            this.dwUseCondition = data["dwUseCondition"];
            this.dwUseEffect = data["dwUseEffect"];
            this.itemNumber = num;
        }
        Object.defineProperty(ItemVo.prototype, "itemNumber", {
            get: function () {
                return this._itemNumber;
            },
            set: function (value) {
                this._itemNumber = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemVo.prototype, "itemStrName", {
            /** 获取道具名字 */
            get: function () {
                return H52D_Framework.StringInfoConfig[this.dwItemName] ? H52D_Framework.StringInfoConfig[this.dwItemName].s : "没有配置国际化";
            },
            enumerable: true,
            configurable: true
        });
        return ItemVo;
    }());
    H52D_Framework.ItemVo = ItemVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ItemVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 物品类
     * @author zhangyusong
     */
    var ItemModel = /** @class */ (function () {
        /**
         * @class 物品类
         * @param 物品数据或配置ID
         * 随机属性
         */
        function ItemModel(id, num) {
            this._itemId = id;
            this._itemNumber = num;
        }
        Object.defineProperty(ItemModel.prototype, "itemId", {
            get: function () {
                return this._itemId;
            },
            set: function (value) {
                this._itemId = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemModel.prototype, "itemNumber", {
            get: function () {
                return this._itemNumber;
            },
            set: function (value) {
                this._itemNumber = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemModel.prototype, "itemVo", {
            get: function () {
                return this._itemVo;
            },
            enumerable: true,
            configurable: true
        });
        return ItemModel;
    }());
    H52D_Framework.ItemModel = ItemModel;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ItemModel.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var BagManager = /** @class */ (function () {
        function BagManager() {
            this.bagData = new H52D_Framework.BagData();
            this.data = 0;
        }
        ;
        Object.defineProperty(BagManager, "Instance", {
            get: function () {
                if (this._instance == null) {
                    this._instance = new BagManager();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        BagManager.prototype.Initialize = function () {
            //开始同步通知
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SendItemBeginMsg", this);
            //同步物品
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SendGroupItemMsg", this);
            //同步物品结束
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SendItemEndMsg", this);
            //更新物品数量
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_UpdateItemCount", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqExchangeItem", this);
        };
        /**
         * 道具开始准备工作
         */
        BagManager.prototype.C_SendItemBeginMsg = function () {
            this.bagData.Init();
        };
        /**
         * 物品收货，最大50个
         * @param tGroup
         */
        BagManager.prototype.C_SendGroupItemMsg = function (tGroup) {
            for (var key in tGroup[0]) {
                var data = tGroup[0][key];
                this.bagData.Push(new H52D_Framework.ItemVo(data[1], data[2]));
            }
        };
        /**
         * 物品结束，最大50个
         * @param tGroup
         */
        BagManager.prototype.C_SendItemEndMsg = function (tGroup) {
            for (var key in tGroup[0]) {
                var data = tGroup[0][key];
                this.bagData.Push(new H52D_Framework.ItemVo(data[1], data[2]));
            }
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.ADD_DIAMONDS);
        };
        /**
         * 物品更新
         * @param tGroup
         */
        BagManager.prototype.C_UpdateItemCount = function (itemInfo) {
            this.bagData.UpdateItem(itemInfo[0], itemInfo[1]);
            H52D_Framework.OneTimer(500, Laya.Handler.create(this, function () {
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.ADD_DIAMONDS);
                H52D_Framework.Event.DispatchEvent("PackRef");
            }));
            H52D_Framework.Guidance.Instance.Trigger_Sixth();
            if (H52D_Framework.Guidance.Instance.bSecondGold) {
                H52D_Framework.Guidance.Instance.Trigger_Second();
            }
        };
        /**请求兑换道具 的回掉 */
        BagManager.prototype.C_ReqExchangeItem = function (buf) {
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, buf[1]]);
            if (H52D_Framework.UIManager.Instance.IsHave("GiftBag2YuanView", H52D_Framework.ViewUpRoot)) {
                H52D_Framework.Event.DispatchEvent("closeview_twodoller");
            }
            this.data = this.getItemNumber(buf[0]);
            H52D_Framework.Event.DispatchEvent("UpdateBtnList");
        };
        Object.defineProperty(BagManager.prototype, "Data", {
            get: function () {
                return this.data;
            },
            enumerable: true,
            configurable: true
        });
        BagManager.prototype.getItemNumber = function (id) {
            return this.bagData.getItemNum(id);
        };
        /** 获取道具列表 */
        BagManager.prototype.GetItemList = function () {
            return this.bagData.GetList();
        };
        /**发送请求 兑换道具 */
        BagManager.prototype.K_ReqExchangeItem = function (item_Id) {
            H52D_Framework.RemoteCall.Instance.Send('K_ReqExchangeItem', item_Id);
            this.getItemNumber(item_Id);
        };
        return BagManager;
    }());
    H52D_Framework.BagManager = BagManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BagManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 背包类,存放物品
     * @author zhangyusong
     */
    var BagData = /** @class */ (function () {
        function BagData() {
        }
        /** 获取道具列表 */
        BagData.prototype.GetList = function () {
            return this.data;
        };
        /** 初始化 */
        BagData.prototype.Init = function () {
            this.data = {};
        };
        /** 道具放入背包 */
        BagData.prototype.Push = function (vo) {
            this.data[vo.id] = vo;
        };
        /**
         * 获取物品
         * @param itemType:道具类型,
         * @param id:道具ID,没有id返回整个列表
         */
        BagData.prototype.getItem = function (id) {
            return this.data[id];
        };
        /**
         * 获取物品数量
         * @param itemType:道具类型,
         * @param id:道具ID,没有id返回整个列表
         */
        BagData.prototype.getItemNum = function (id) {
            var oItem = this.data[id];
            if (!oItem) {
                return 0;
            }
            return oItem.itemNumber;
        };
        /** 道具数量更新 */
        BagData.prototype.UpdateItem = function (id, num) {
            var item = this.data[id];
            if (!item) {
                item = new H52D_Framework.ItemVo(id, num);
                this.data[id] = item;
            }
            else {
                item.itemNumber = num;
            }
            // 派发金币事件
            if (id == H52D_Framework.BaseDefine.ItemIdGold) {
                H52D_Framework.Event.DispatchEvent("ChangeMoeny");
            }
            //新手引导
            // if (Guidance.Instance.bNewbie == true &&
            //     item.dwItemTypes == 21 &&
            //     HeroManager.Instance.HeroIstrue(item.heroId) == true) {
            //     Guidance.Instance.SecondGuidance();
            // }
        };
        return BagData;
    }());
    H52D_Framework.BagData = BagData;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BagData.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var PlayerVo = /** @class */ (function () {
        function PlayerVo() {
            this._isvip = false;
            this.attr = new H52D_Framework.Attribute();
            var level = H52D_Framework.MasterPlayer.Instance.player.Level;
            var data = H52D_Framework.RoleLevelUpConfig[level];
            this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, data["Attack"]);
            this.attr.SetAttributeValue(4, H52D_Framework.eValueType.Base, data["Crit"]);
            this.attr.SetAttributeValue(5, H52D_Framework.eValueType.Base, data["CritRatio"]);
        }
        Object.defineProperty(PlayerVo.prototype, "_VipHitDamageUp", {
            get: function () {
                return H52D_Framework.GameParamConfig["VipHitDamageUp"];
            },
            enumerable: true,
            configurable: true
        });
        PlayerVo.prototype.setVip = function () {
            this._isvip = true;
            this.attr.ModfiyAttributeValue(2, H52D_Framework.eValueType.Percent, this._VipHitDamageUp);
        };
        PlayerVo.prototype.UpdateInfo = function () {
            this.attr = new H52D_Framework.Attribute();
            var level = H52D_Framework.MasterPlayer.Instance.player.Level;
            var data = H52D_Framework.RoleLevelUpConfig[level];
            if (this._isvip) {
                this.attr.ModfiyAttributeValue(2, H52D_Framework.eValueType.Percent, this._VipHitDamageUp);
            }
            this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, data["Attack"]);
            this.attr.SetAttributeValue(4, H52D_Framework.eValueType.Base, data["Crit"]);
            this.attr.SetAttributeValue(5, H52D_Framework.eValueType.Base, data["CritRatio"]);
        };
        PlayerVo.prototype.UpdateBase = function () {
            var level = H52D_Framework.MasterPlayer.Instance.player.Level;
            var data = H52D_Framework.RoleLevelUpConfig[level];
            this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, data["Attack"]);
        };
        PlayerVo.prototype.UpdatePassive = function () {
            for (var i = 1; i <= 5; i++) {
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Percent, 0);
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Fixed, 0);
            }
            for (var i = 21; i <= 27; i++) {
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Percent, 0);
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Fixed, 0);
            }
            if (this._isvip) {
                /**设置伤害 */
                this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Percent, this._VipHitDamageUp);
            }
            this.attr.SetAttributeValue(51, H52D_Framework.eValueType.Fixed, 0);
            this.attr.SetAttributeValue(53, H52D_Framework.eValueType.Fixed, 0);
        };
        return PlayerVo;
    }());
    H52D_Framework.PlayerVo = PlayerVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PlayerVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var Player = /** @class */ (function () {
        /**初始化 */
        function Player() {
            /**是否是主玩家 */
            this._isMaster = false;
            /**角色等级*/
            this._level = 1;
            /**玩家布阵英雄信息 */
            this._heroWarList = {};
            /**阵营ID */
            this._nCampID = -1;
            /**头像ID */
            this._headId = -1;
            /**英雄礼包 时间 */
            this._heropeck_time = {};
            /** 玩家vip过期时间 */
            this._ExpirationTime = 0;
            /**玩家技能存放处 */
            this._playSkillList = {};
            /**存放英雄的集合 */
            this._heroList = {};
            /**存放宠物的集合 */
            this._pet = {};
            this._campInfo = {};
            this._skillList = {};
            /** 播放音效 */
            this._sound = true;
            /** 播放音乐 */
            this._music = true;
            this.damage = 100;
            this.type = eCharacter_TYPE.PLAYER;
        }
        Object.defineProperty(Player.prototype, "vo", {
            get: function () { return this._playervo; },
            set: function (value) { this._playervo = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player, "Init", {
            /**单例 */
            get: function () {
                if (Player._init == null) {
                    Player._init = new Player();
                }
                return Player._init;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "isMaster", {
            /**是否是主玩家*/
            get: function () {
                return this._isMaster;
            },
            set: function (value) {
                this._isMaster = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "HeroWarList", {
            get: function () {
                return this._heroWarList;
            },
            set: function (herowar) {
                this._heroWarList = herowar;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "MpRecoveryRate", {
            get: function () {
                return this._mpRecoveryRate;
            },
            set: function (value) {
                this._mpRecoveryRate = value;
                H52D_Framework.Event.DispatchEvent("MpRecoveryRateChange");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "MpPool", {
            get: function () {
                return this._mpPool;
            },
            set: function (value) {
                this._mpPool = value;
                H52D_Framework.Event.DispatchEvent("MpPoolChange");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Name", {
            /**角色名称 */
            get: function () {
                return this._name;
            },
            set: function (value) {
                this._name = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Head", {
            /**角色头像 */
            get: function () {
                return this._head;
            },
            set: function (val) {
                this._head = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Base", {
            /**角色属性 */
            get: function () {
                return this._base;
            },
            set: function (value) {
                this._base = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "ID", {
            /**角色id */
            get: function () {
                return this._id;
            },
            set: function (value) {
                this._id = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Exp", {
            /**当前角色经验 */
            get: function () {
                return this._exp;
            },
            set: function (value) {
                this._exp = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "NeedExp", {
            /**升级所需经验 */
            get: function () {
                return this._needExp;
            },
            set: function (value) {
                this._needExp = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "CustomsId", {
            /** 第几关 */
            get: function () {
                return this._customsId;
            },
            /** 第几关 */
            set: function (value) {
                this._customsId = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "WaveOrder", {
            /** 第几波 */
            get: function () {
                return this._waveOrder;
            },
            /** 第几波 */
            set: function (value) {
                this._waveOrder = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "CustomsMode", {
            get: function () {
                return this._customsMode;
            },
            set: function (value) {
                this._customsMode = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "CampID", {
            get: function () {
                return this._nCampID;
            },
            set: function (id) {
                this._nCampID = id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "HeadId", {
            get: function () {
                return this._headId;
            },
            set: function (id) {
                this._headId = id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "CampDonate", {
            get: function () {
                return this._nCampDonate;
            },
            set: function (Num) {
                this._nCampDonate = Num;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Donatetimes", {
            /**玩家捐献次数 */
            get: function () {
                return this._Camptimes;
            },
            set: function (tNum) {
                this._Camptimes = tNum;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Hero_pecktime", {
            get: function () {
                return this._heropeck_time;
            },
            set: function (tNum) {
                this._heropeck_time = tNum;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "MoneyNum", {
            /**角色金币数量 */
            get: function () {
                return this._moneyNum;
            },
            set: function (value) {
                this._moneyNum = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "GoodStone", {
            /**玩家宝石数量 */
            get: function () {
                return this._goodStone;
            },
            set: function (value) {
                this._goodStone = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Level", {
            /**角色等级 */
            get: function () {
                return this._level;
            },
            set: function (value) {
                this._level = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Proint", {
            /**角色点击伤害 */
            get: function () {
                return this._proint;
            },
            set: function (value) {
                this._proint = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Strike", {
            /** 英雄点击暴击率*/
            get: function () {
                return this._Strike;
            },
            set: function (value) {
                this._Strike = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "StrikeTimes", {
            /** 英雄点击暴击倍率*/
            get: function () {
                return this._Striketimes;
            },
            set: function (value) {
                this._Striketimes = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "MaxMp", {
            /**角色最大魔法值 */
            get: function () {
                return this._maxMp;
            },
            set: function (value) {
                this._maxMp = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "RecoverMp", {
            /**角色魔法值回复速度 */
            get: function () {
                return this._recoverMp;
            },
            set: function (value) {
                this._recoverMp = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Mp", {
            /**角色当前魔法值 */
            get: function () {
                return this._mp;
            },
            set: function (value) {
                this._mp = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "HeroNum", {
            /**玩家拥有的已解锁英雄数量 */
            get: function () {
                return this._heroNum;
            },
            set: function (value) {
                this._heroNum = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Donate", {
            /**捐献材料的数量 */
            get: function () {
                return this._donate;
            },
            set: function (value) {
                this._donate = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "TopUp", {
            /**充值信息 */
            get: function () {
                return this._TopUp;
            },
            set: function (value) {
                this._TopUp = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "ExpirationTime", {
            get: function () {
                return this._ExpirationTime;
            },
            set: function (value) {
                this._ExpirationTime = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "IsVip", {
            /** 是否是VIP */
            get: function () {
                return this.IsPermanentVip || this._ExpirationTime > H52D_Framework.Time.serverSecodes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "IsPermanentVip", {
            /** 是否是永久VIP */
            get: function () {
                return this._ExpirationTime == -1;
            },
            enumerable: true,
            configurable: true
        });
        /** 是否是VIP  ExpirationTime */
        Player.prototype.getIsVip = function (ExpirationTime) {
            if (ExpirationTime == -1) {
                return true;
            }
            return ExpirationTime > H52D_Framework.Time.serverSecodes;
        };
        Object.defineProperty(Player.prototype, "PassOut", {
            /**通关数 */
            get: function () {
                return this._pass;
            },
            set: function (value) {
                this._pass = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Sound", {
            /**通关数 */
            get: function () {
                return this._sound;
            },
            set: function (value) {
                this._sound = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "Music", {
            /**通关数 */
            get: function () {
                return this._music;
            },
            set: function (value) {
                this._music = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Player.prototype, "SkillList", {
            /** 已解锁技能 */
            get: function () {
                return this._skillList;
            },
            enumerable: true,
            configurable: true
        });
        /** 设置已解锁技能 */
        Player.prototype.SetSkillList = function (type, id) {
            if (type === void 0) { type = -128; }
            if (id === void 0) { id = 0; }
            if (type == -128) {
                this._skillList = {};
            }
            else {
                this._skillList[type] = id;
            }
        };
        /**角色等级提升 */
        Player.prototype.levelUp = function (needExp) {
            if (this.Level < this._maxLevel) {
                if (this.Exp > this.NeedExp) {
                    this.Level += 1;
                    this.Exp -= this.NeedExp;
                    //this.Base 基础属性改变
                    //this.Proint=对应级数的点击伤害
                    //玩家显示等级的文本改变
                    //播放升级声音 特效
                }
                else {
                    //经验不在累计
                }
            }
        };
        Object.defineProperty(Player.prototype, "CunstLevel", {
            /**去掉1W的关卡数 */
            get: function () {
                return H52D_Framework.CustomspassConfig[this._customsId].customsOrder;
            },
            enumerable: true,
            configurable: true
        });
        /**销毁 */
        Player.prototype.Destroy = function () {
            for (var i in this._heroList) {
                this._heroList[i].Destroy();
                this._heroList[i] = null;
            }
            this._heroList = {};
        };
        return Player;
    }());
    H52D_Framework.Player = Player;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Player.js.map
/*
* 主玩家类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var MasterPlayer = /** @class */ (function () {
        function MasterPlayer() {
            /**是否在游戏中 */
            this._bInGame = false;
            this._bNewbie = false;
            this._fundBuy = false;
            /** 特权免费使用次数 */
            this.freeUseNum = {};
            /** 特权免费使用总次数 */
            this._FreeSum = 0;
            /**事件属性*/
            this.eventPro = {};
            /**事件每日属性*/
            this.eventDayPro = {};
            this._cacheValue = {};
            this._dayInviteNum = 0;
            this.Damage = 0;
            this._player = new H52D_Framework.Player();
            this._player.isMaster = true;
        }
        Object.defineProperty(MasterPlayer, "Instance", {
            get: function () {
                if (MasterPlayer._inst == null)
                    MasterPlayer._inst = new MasterPlayer();
                return MasterPlayer._inst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MasterPlayer.prototype, "bInGame", {
            get: function () {
                return this._bInGame;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MasterPlayer.prototype, "player", {
            get: function () {
                return this._player;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MasterPlayer.prototype, "days", {
            get: function () {
                return this._days;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MasterPlayer.prototype, "bNewbie", {
            get: function () {
                return this._bNewbie;
            },
            set: function (value) {
                this._bNewbie = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MasterPlayer.prototype, "fundBuy", {
            get: function () {
                return this._fundBuy;
            },
            set: function (value) {
                this._fundBuy = value;
            },
            enumerable: true,
            configurable: true
        });
        MasterPlayer.prototype.getFundReceive = function (id) {
            return this.fundReceive[id] || 0;
        };
        MasterPlayer.prototype.setFundReceive = function (id, value) {
            this.fundReceive[id] = value;
        };
        /** 特权免费使用次数 */
        MasterPlayer.prototype.getFreeUseNum = function (nPrivilege) {
            return this.freeUseNum[nPrivilege] || 0;
        };
        /** 特权免费使用次数 */
        MasterPlayer.prototype.setFreeUseNum = function (nPrivilege, nFreeUseNum) {
            this.freeUseNum[nPrivilege] = nFreeUseNum;
        };
        /** 获取已拥有特权免费使用总次数 */
        MasterPlayer.prototype.getFreeUseSum = function () {
            var NumSum = 0;
            for (var nPrivilege in this.freeUseNum) {
                NumSum += this.freeUseNum[nPrivilege];
            }
            return NumSum;
        };
        /** 通过类型获取事件属性 */
        MasterPlayer.prototype.GetEventProByType = function (type) {
            return this.eventPro[type] || 0;
        };
        /** 通过类型获取事件每日属性 */
        MasterPlayer.prototype.GetEventDayProByType = function (type) {
            return this.eventDayPro[type] || 0;
        };
        Object.defineProperty(MasterPlayer.prototype, "cacheValue", {
            get: function () {
                return this._cacheValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MasterPlayer.prototype, "newInviteNum", {
            /** 获取邀请的总人数 */
            get: function () {
                return this.GetEventProByType(EventProEnum.InvitationNum);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MasterPlayer.prototype, "dayInviteNum", {
            get: function () {
                return this._dayInviteNum;
            },
            /** 当日邀请的人数 */
            set: function (num) {
                this._dayInviteNum = num;
            },
            enumerable: true,
            configurable: true
        });
        /** 领取奖励标记 */
        MasterPlayer.prototype.getInvitation = function (key) {
            return this.invitation[key] || 0;
        };
        MasterPlayer.prototype.setInvitation = function (key, value) {
            this.invitation[key] = value;
        };
        Object.defineProperty(MasterPlayer.prototype, "invitadunFlag", {
            get: function () {
                return this._invitadunFlag;
            },
            set: function (value) {
                this._invitadunFlag = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MasterPlayer.prototype, "invitaVipFlag", {
            get: function () {
                return this._invitaVipFlag;
            },
            set: function (value) {
                this._invitaVipFlag = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MasterPlayer.prototype, "invitaVipTimes", {
            get: function () {
                return this._invitaVipTimes;
            },
            set: function (value) {
                this._invitaVipTimes = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 发送累计数据
         * @param pro:EventProEnum
         * @param nun 数量
         */
        MasterPlayer.prototype.ReqOnEvent = function (pro, nun) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqOnEvent", pro, nun);
        };
        MasterPlayer.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ServerTime", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_SyncPlayerInfoMsg", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_EnterMap", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_OnLevelUp", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_OnChangeExp", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_AddMP", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_SendInitEventMsg', this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol('C_SendEventMsg', this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_OnlineSyncEnd", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ClientInfo", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_Whosyourdaddy", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_DayRefreshMsg", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ChargeRes", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_VipInfo", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_AddVip", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_UpdatePrivilege", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_OnInvite", this);
            var tcfg = H52D_Framework.GameParamConfig.FreePrivilegeStorageMaxNum;
            for (var key in tcfg) {
                this._FreeSum += tcfg[key];
            }
        };
        /** 更新当天邀请的人数 */
        MasterPlayer.prototype.C_OnInvite = function (buf) {
            this.dayInviteNum = buf[0];
            H52D_Framework.Event.DispatchEvent("InviteTodayNum");
        };
        MasterPlayer.prototype.C_Whosyourdaddy = function () {
            this.Damage = 999999999;
        };
        /** 上线同步VIP */
        MasterPlayer.prototype.C_VipInfo = function (buf) {
            var nExpirationTime = buf[0];
            this._player.ExpirationTime = nExpirationTime;
            if (this._player.IsVip) {
                this._player.vo.setVip();
            }
        };
        /** 添加VIP */
        MasterPlayer.prototype.C_AddVip = function (buf) {
            var nExpirationTime = buf[0];
            this._player.ExpirationTime = nExpirationTime;
            this._player.vo.setVip();
        };
        /** 特权次数更新 */
        MasterPlayer.prototype.C_UpdatePrivilege = function (buf) {
            var nPrivilege = buf[0];
            var nCount = buf[1];
            this.freeUseNum[nPrivilege] = nCount;
        };
        /** 充值成功通知 */
        MasterPlayer.prototype.C_ChargeRes = function (buf) {
            var nGold = buf[0];
            var nMoney = buf[1];
            H52D_Framework.TipsLogic.Instance.OpenSystemTips("充值" + nGold + "钻石成功！");
        };
        /**0:00服务器通知 */
        MasterPlayer.prototype.C_DayRefreshMsg = function () {
            this.eventDayPro = {};
            this._player.Donatetimes = {};
            H52D_Framework.AchievenManger.Instance.LoadDayMission();
            H52D_Framework.SignInLogic.Instance.EmptyData();
        };
        /** 玩家等级 */
        MasterPlayer.prototype.C_OnLevelUp = function (buf) {
            MasterPlayer.Instance.player.vo.UpdateBase();
            this._player.Level = buf[0];
            H52D_Framework.Event.DispatchEvent("RefreshList");
            H52D_Framework.Event.DispatchEvent("Role_lvup");
            //新手引导
            H52D_Framework.Guidance.Instance.Trigger_Sixth();
            H52D_Framework.Guidance.Instance.Trigger_Ninth();
        };
        /** 玩家经验 */
        MasterPlayer.prototype.C_OnChangeExp = function (buf) {
            this._player.Exp = buf[0];
            H52D_Framework.Event.DispatchEvent("RefreshList");
        };
        MasterPlayer.prototype.C_OnlineSyncEnd = function () {
            H52D_Framework.BCampManager.Instance.initData();
            H52D_Framework.AttributePassiveManager.Instance.Init();
        };
        /** 玩家添加MP */
        MasterPlayer.prototype.C_AddMP = function (buf) {
            var nMP = buf[0];
            H52D_Framework.Event.DispatchEvent("MpValueChange", [nMP]);
            var bAdd = nMP >= 0;
            H52D_Framework.TipsLogic.Instance.OpenSystemTips("法力值 " + (bAdd ? "+" : "") + nMP);
        };
        /** 玩家上线事件消息 */
        MasterPlayer.prototype.C_SendInitEventMsg = function (buf) {
            this.eventPro = buf[0];
            this.eventDayPro = buf[1];
            /**成就系统 */
            H52D_Framework.AchievenManger.Instance.Initialize();
        };
        /** 玩家事件消息 */
        MasterPlayer.prototype.C_SendEventMsg = function (buf) {
            var data = buf[0];
            var dataDay = buf[1];
            for (var eventKey in data) {
                this.eventPro[eventKey] = data[eventKey];
            }
            for (var eventKey in dataDay) {
                this.eventDayPro[eventKey] = dataDay[eventKey];
            }
        };
        /**服务器当前时间 */
        MasterPlayer.prototype.C_ServerTime = function (buf) {
            H52D_Framework.Time.SetServerTime(buf[0]);
            this._days = 10;
        };
        /**同步主玩家基本数据 */
        MasterPlayer.prototype.C_SyncPlayerInfoMsg = function (buf) {
            var info = buf[0];
            this._player.ID = info[1]; //角色ID
            this._player.Name = info[2]; //玩家名字
            this._player.CustomsId = info[3]; //当前关卡
            this._player.WaveOrder = info[4]; //当前波次
            this._player.HeroWarList = info[5]; //阵容信息
            this._player.Level = info[6]; //角色等级
            this._player.Exp = info[7]; //角色经验
            this._player.CustomsMode = info[8]; //关卡模式
            this._player.Mp = info[9]; //法力值
            this._player.CampID = info[10]; //阵营ID
            this._player.HeadId = info[11]; //头像ID
            this._player.Donatetimes = info[12]; //捐献次数
            H52D_Framework.ShopLogic.Instance.tChargeTimes = info[13];
            H52D_Framework.ShopLogic.Instance.MoneyBack = info[14];
            H52D_Framework.KickingManager.Instance.ChallengeNum = info[15];
            this.freeUseNum = info[17]; //免费特权次数
            this.invitation = info[18]; //领取奖励标记
            this.invitadunFlag = info[19]; //跳关标记
            this.invitaVipFlag = info[20]; //领取vip标记
            this.invitaVipTimes = info[21]; //领取vip次数
            this.bNewbie = info[23] || false; //是否是新玩家
            this.fundBuy = info[24] == 1; //购买基金标记0/1
            this.fundReceive = info[25]; //领取基金标记{"1":0/1}
            H52D_Framework.DiscountManager.Instance.tPrivilegeTims = info[26]; //特权打折
            H52D_Framework.DiscountManager.Instance.tBoxTims = info[27]; //宝箱打折
            this._player.Hero_pecktime = info[28]; //英雄礼包的倒计时
            if (!this._player.Mp) {
                this._player.Mp = 0;
            }
            H52D_Framework.HeroManager.Instance.PeckIcon = H52D_Framework.GetTabLength(this._player.Hero_pecktime) > 0 ? true : false;
            this._player.vo = new H52D_Framework.PlayerVo(); //战斗数据
            if (!H52D_Framework.GetLocalStorage("sound", true)) {
                H52D_Framework.SetLocalStorage("sound", "1", true);
                H52D_Framework.SetLocalStorage("music", "1", true);
            }
            this.player.Sound = !!Number(H52D_Framework.GetLocalStorage("sound", true));
            this.player.Music = !!Number(H52D_Framework.GetLocalStorage("music", true));
            for (var key in H52D_Framework.BaseDefine.StartGuidanceEvent) {
                if (!H52D_Framework.GetLocalStorage(H52D_Framework.BaseDefine.StartGuidanceEvent[key], true)) {
                    H52D_Framework.SetLocalStorage(H52D_Framework.BaseDefine.StartGuidanceEvent[key], "0", true);
                }
                var b = H52D_Framework.GetLocalStorage(H52D_Framework.BaseDefine.StartGuidanceEvent[key], true);
                H52D_Framework.BaseDefine.bStartGuidance[key] = b;
            }
            // 同步完阵容信息后刷新对话列表
            H52D_Framework.BubbleManager.Instance.UpdateAllBubbleID();
        };
        /** 缓存数据同步 */
        MasterPlayer.prototype.C_ClientInfo = function (buff) {
            for (var i = 0; i < buff.length; i++) {
                for (var key in buff[i]) {
                    this._cacheValue[key] = buff[i][key];
                }
            }
        };
        /**主玩家进入地图 */
        MasterPlayer.prototype.C_EnterMap = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("CreateView", [H52D_Framework.ViewDownRoot]);
            H52D_Framework.UIManager.Instance.DestroyUI("LoginView", [H52D_Framework.ViewDownRoot]);
            //进入游戏状态
            this._bInGame = true;
            //开启断线重连
            H52D_Framework.RemoteCall.Instance.OpenReConnect();
            if (this.bNewbie == false) {
                if (!H52D_Framework.UIManager.Instance.IsHave("MainView", H52D_Framework.ViewDownRoot)) {
                    //加载主界面
                    H52D_Framework.UIManager.Instance.CreateUI("MainView", [H52D_Framework.ViewDownRoot], Laya.Handler.create(this, function () {
                        //加载关卡场景
                        H52D_Framework.CustomsManager.Instance.Initialize();
                    }));
                }
            }
        };
        return MasterPlayer;
    }());
    H52D_Framework.MasterPlayer = MasterPlayer;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MasterPlayer.js.map
/**玩家英雄类 */
var H52D_Framework;
(function (H52D_Framework) {
    var HeroCardManager = /** @class */ (function () {
        /**初始化 */
        function HeroCardManager() {
            this.data = [];
            this._index = 0;
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_HeartBeat", this);
            this._CHeroList = [];
        }
        Object.defineProperty(HeroCardManager, "Instance", {
            get: function () {
                if (HeroCardManager._init == null) {
                    HeroCardManager._init = new HeroCardManager();
                }
                return HeroCardManager._init;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroCardManager.prototype, "AscriptionId", {
            get: function () {
                return this._ascriptionId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroCardManager.prototype, "CHeroList", {
            get: function () {
                return this._CHeroList;
            },
            enumerable: true,
            configurable: true
        });
        HeroCardManager.prototype.GetHeroCardByid = function (id) {
            for (var k in this._CHeroList) {
                if (this._CHeroList[k]) {
                    if (this._CHeroList[k].vo.nHeroID == id) {
                        return this._CHeroList[k];
                    }
                }
            }
        };
        HeroCardManager.prototype.DataInit = function (Obj) {
            this.data = new Array();
            for (var _id in Obj) {
                var vo = H52D_Framework.HeroManager.Instance.GetHero(Obj[_id]); // new HeroCardData(Obj[_id])
                vo.location = Number(_id);
                this.data.push(vo);
            }
        };
        HeroCardManager.prototype.AvatarInit = function (callBack) {
            this.loadComplete = callBack;
            var Len = H52D_Framework.GetTabLength(this.CHeroList);
            this.DataInit(H52D_Framework.MasterPlayer.Instance.player.HeroWarList);
            if (Len < 9 && Len > 0) {
                HeroCardManager._index = Len + 1;
            }
            if (Len > 0) {
                for (var i = Len - 1; i >= 0; i--) {
                    if (this.CHeroList[i]) {
                        this.CHeroList[i].Destroy();
                        this.CHeroList[i] = null;
                    }
                }
            }
            HeroCardManager.index = 0;
            //加载英雄
            this.loadHero();
        };
        HeroCardManager.prototype.loadHero = function () {
            var _this = this;
            var _loop_1 = function (cdata) {
                var hero = new H52D_Framework.HeroCard(this_1.data[cdata]);
                var dir = 1;
                var id = this_1.data[cdata].nHeroID;
                var scale = H52D_Framework.HeroConfig[id]["modelScale"];
                var x = H52D_Framework.HeroLocal[this_1.data[cdata]["location"]][0] * G_StageWidthScale;
                var y = H52D_Framework.HeroLocal[this_1.data[cdata]["location"]][1];
                this_1._index += 1;
                hero.LoadMoudle(dir, scale, x, y, this_1._index, false, Laya.Handler.create(this_1, function () {
                    _this.CHeroList[HeroCardManager.index] = hero;
                    HeroCardManager.index++;
                    if (HeroCardManager._index > 0 && HeroCardManager.index == HeroCardManager._index &&
                        HeroCardManager._index != 9) {
                        _this.CHeroList[HeroCardManager.index - 1].ChangeEffect();
                    }
                    if (HeroCardManager.index >= _this.data.length) {
                        _this.HeroLoadComplete();
                    }
                }));
            };
            var this_1 = this;
            for (var cdata in this.data) {
                _loop_1(cdata);
            }
        };
        HeroCardManager.prototype.HeroLoadComplete = function () {
            this.SortHero();
            // this.OnEffectPassive();
            /**所有英雄伤害之和 */
            H52D_Framework.BattleManager.Instance.aIOperation.Dps();
            this.loadComplete.run();
        };
        HeroCardManager.prototype.AddTarget = function (target) {
            for (var i = 0; i < 9; i++) {
                if (this.CHeroList[i] != null) {
                    if (this.CHeroList[i].Target != null) {
                        this.CHeroList[i].Target = null;
                    }
                    this.CHeroList[i].Target = target;
                }
            }
        };
        HeroCardManager.prototype.SortHero = function () {
            /**英雄表长度 */
            var Length = this._CHeroList.length;
            /**用先手速度排序 最慢的是0 */
            for (var i = 0; i < Length; i++) {
                for (var j = i + 1; j < Length; j++) {
                    if (this._CHeroList[i] && this._CHeroList[j]) {
                        if (this._CHeroList[i].vo.ToSpeed > this._CHeroList[j].vo.ToSpeed) {
                            var current = this._CHeroList[i];
                            this._CHeroList[i] = this._CHeroList[j];
                            this._CHeroList[j] = current;
                        }
                    }
                }
            }
        };
        /**销毁 */
        HeroCardManager.prototype.Destroy = function () {
            if (this._CHeroList) {
                for (var i = 0; i < H52D_Framework.GetTabLength(this._CHeroList); i++) {
                    if (this._CHeroList[i]) {
                        this._CHeroList[i].Destroy();
                        this._CHeroList[i] = null;
                    }
                }
                this._CHeroList = [];
            }
        };
        HeroCardManager._index = 0;
        return HeroCardManager;
    }());
    H52D_Framework.HeroCardManager = HeroCardManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeroCardManager.js.map
/**
 * 战斗英雄实例
 */
var H52D_Framework;
(function (H52D_Framework) {
    var HeroCard = /** @class */ (function () {
        /**初始化 */
        function HeroCard(vo, viewRoot, bbool) {
            /**被动技能列表 */
            this._passiveSkillList = [];
            this._bAttack = false;
            this._isPlayAttackDown = false;
            this._bClose = true;
            this._target = [];
            this._order = 0;
            this._PosX = 0;
            this._PosY = 0;
            this._dataVo = vo;
            this.SE = SkinEnum.SkinHero;
            this._viewRoot = viewRoot ? viewRoot : H52D_Framework.AvatarRoot;
            this.type = vo.HeroType == 1 ? eCharacter_TYPE.AHERO : eCharacter_TYPE.DHERO;
            this.vo.onlockpassive = Laya.Handler.create(this, this.OnlockPassive, [], false);
            /**如果是队长就启动 队长技能事件 */
            if (this._dataVo.location == 4) {
                H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.CAPATIAN_SKILL, Laya.Handler.create(this, this.SpellCaptainSkill));
            }
            this.SetToSpeed();
            this.vo.SetColOrow();
        }
        Object.defineProperty(HeroCard.prototype, "avatar", {
            /**英雄的模型 */
            get: function () { return this._avatar; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroCard.prototype, "ID", {
            /** ID */
            get: function () { return this.vo.nHeroID; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroCard.prototype, "Target", {
            get: function () { return this._target; },
            /**攻击目标 */
            set: function (value) { this._target = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroCard.prototype, "vo", {
            /**是否加载完成 */
            // public get IsLoadDown() { return this._isLoadDown; }
            /**数据模型*/
            get: function () { return this._dataVo; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroCard.prototype, "Order", {
            /**人物层级 */
            get: function () { return this._order; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroCard.prototype, "PosX", {
            /**人物位置X坐标 */
            get: function () { return this._PosX; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroCard.prototype, "PosY", {
            /**人物位置Y坐标 */
            get: function () { return this._PosY; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeroCard.prototype, "attackSkill", {
            /**英雄普攻 */
            get: function () { return this._attackskill; },
            enumerable: true,
            configurable: true
        });
        /**
         * 加载英雄模型
         * @param dir:方向
         * @param scale:缩放比例
         * @param xy: 位置
         * @param order: 层级
         * @param blood: 血条
         * @param callback:回调函数
         **/
        HeroCard.prototype.LoadMoudle = function (dir, scale, x, y, order, blood, callback) {
            var _this = this;
            if (blood === void 0) { blood = false; }
            if (callback === void 0) { callback = null; }
            this._PosX = x;
            this._PosY = y;
            /**加载模型 */
            this._avatar = new H52D_Framework.Avatar(this._viewRoot);
            this._avatar.Load(this.vo.ModlePath, dir, scale, x, y, Laya.Handler.create(this, function () {
                _this._ComLoad();
                if (callback)
                    callback.run();
            }));
        };
        HeroCard.prototype.LoadPassive = function () {
            this._passiveSkillList = [];
            for (var i = 0; i < this.vo.conditionsID.length; i++) {
                var pas = new H52D_Framework.ConditionsPassiveSkill(this.vo.conditionsID[i], this);
                this._passiveSkillList.push(pas);
            }
        };
        /**模型加载完毕后的回调 */
        HeroCard.prototype._ComLoad = function () {
            this.LoadPassive();
            this.InitSkill();
            /**设置阴影 */
            this._avatar.Shadow(1, true);
            this._avatar.visible = true;
            this.SetOrderZ(this.vo.colNum);
            this.Idle();
        };
        /**条件类被动技能生效 */
        HeroCard.prototype.OnEffectPassive = function () {
            for (var i = 0; i < this._passiveSkillList.length; i++) {
                if (this._passiveSkillList[i]) {
                    this._passiveSkillList[i].Do();
                }
            }
        };
        /**解锁条件被动技能 */
        HeroCard.prototype.OnlockPassive = function () {
            var clen = this.vo.OnPassiveID.length;
            if (clen == 0)
                return;
            var id = this.vo.OnPassiveID[clen - 1];
            var type_id = H52D_Framework.PassiveSkillConfig[id]["scriptID"];
            if (type_id != 1) {
                var pas = new H52D_Framework.ConditionsPassiveSkill(id, this);
                pas.Do();
                this._passiveSkillList.push(pas);
            }
            this.OnEffectPassive();
        };
        HeroCard.prototype.DestroyPassive = function () {
            var Len = this._passiveSkillList.length;
            for (var i = 0; i < Len; i++) {
                if (this._passiveSkillList[i]) {
                    this._passiveSkillList[i].Destroy();
                    this._passiveSkillList[i] = null;
                }
            }
            this._passiveSkillList = [];
        };
        /**获取当前动画时间 */
        HeroCard.prototype.GetAniDuration = function () {
            return this._avatar.GetAniDuration();
        };
        /** 受伤 */
        HeroCard.prototype.OnHurt = function (damage, e, iscrit, type, viewRoot) {
            // if ((this._currentHP <= 0) || this._isDie || this._avatar == null || this._isLoadDown == false) {
            //     return;
            // }
            if (type != SPECIAL_TYPE.SUSRAINED) {
                this.Hit();
            }
            if (type == SPECIAL_TYPE.ACTION) {
                H52D_Framework.UIManager.Instance.InstanceUI("FloatView", [viewRoot, damage.toString(), e, 420, 100, false]);
                return;
            }
            H52D_Framework.Floating.DamageText(damage.toString(), e, 500, 500, iscrit);
            //this.Hp -= damage;
            this.OnHurtTriggerConditions();
        };
        /**出生特效 */
        HeroCard.prototype.ChangeEffect = function () {
            var _this = this;
            // if (MasterPlayer.Instance.player.Sound) {
            //     // SoundManager.Instance.playSound("res/sound/boss_appear.mp3", 1);
            // }
            if (this._brithAvatar) {
                this._brithAvatar.Play("effect_state_appear", false);
            }
            else {
                this._brithAvatar = new H52D_Framework.Avatar(H52D_Framework.AvatarEffectRoot);
                this._brithAvatar.Load("res/effect/effect_state_appear/effect_state_appear.sk", 1, 1, this.PosX, this.PosY - 175, Laya.Handler.create(this, function () {
                    _this._brithAvatar.Play("effect_state_appear", false);
                }));
            }
        };
        /**普通攻击 */
        HeroCard.prototype.SpellAttackSkill = function () {
            var _this = this;
            if (!this._target || !this._attackskill)
                return;
            this._isPlayAttackDown = false;
            this._bAttack = true;
            this._avatar.Play(H52D_Framework.AnimationName.attack, false, true, function () {
                _this._bAttack = false;
                _this._isPlayAttackDown = true;
                _this.Idle();
            });
            this._attackskill.SpellSkill(this._target);
            this.AttackTriggerConditions();
            H52D_Framework.BattleManager.Instance.heroAttackNum++;
        };
        /** 待机 */
        HeroCard.prototype.Idle = function () {
            if (!this._avatar)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.idle, true);
        };
        /**开启自动攻击 */
        HeroCard.prototype.OpenAutoAttack = function () {
            this._bClose = false;
        };
        /**关闭自动攻击 */
        HeroCard.prototype.CloseAutoAttack = function () {
            this._bClose = true;
        };
        HeroCard.prototype.SkillUpdate = function () {
            if (this._attackskill)
                this._attackskill.OnUpdate();
            if (this._captainSkill)
                this._captainSkill.OnUpdate();
        };
        /**更新函数 */
        HeroCard.prototype.OnUpdate = function () {
            this.SkillUpdate();
            if (!this._target)
                return;
            if (this._attackskill) {
                if (!this._attackskill.IsCD && !this._bClose) {
                    this.SpellAttackSkill();
                }
            }
            if (this._captainSkill) {
                if (this.vo.location != 4) {
                    H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.CAPATIAN_SKILL, Laya.Handler.create(this, this.SpellCaptainSkill));
                }
            }
            if (this.TargetIsNull()) {
                this.CloseAutoAttack();
                this._target = [];
            }
        };
        /**清理目标 */
        HeroCard.prototype.ClearTarget = function () {
            /**普攻目标清理 */
            if (this.attackSkill) {
                this.attackSkill.ClearTarget();
            }
            /**队长技能目标清理 */
            if (this._captainSkill) {
                this._captainSkill.ClearTarget();
            }
            this._target = [];
        };
        /**销毁 */
        HeroCard.prototype.Destroy = function () {
            this.vo.onlockpassive.recover();
            this.DestroyPassive();
            if (this._attackskill) {
                this._attackskill.Destroy();
                this._attackskill = null;
            }
            if (this._captainSkill) {
                this._captainSkill.Destroy();
                this._captainSkill = null;
            }
            if (this._dataVo.location == 4) {
                H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.CAPATIAN_SKILL, Laya.Handler.create(this, this.SpellCaptainSkill));
            }
            this.ClearTarget();
            if (this._avatar) {
                this._avatar.Destroy();
                this._avatar = null;
            }
            // Tick.ClearAll(this);
        };
        /**初始化英雄技能 */
        HeroCard.prototype.InitSkill = function () {
            /**初始化英雄普攻 */
            this._attackskill = new H52D_Framework.Skill(this.vo.skillid[0], this, eBELONGS_TO.ATTACK);
            /**是队长就初始化队长技能 */
            if (this.vo.location == 4) {
                this._captainSkill = new H52D_Framework.Skill(this.vo.skillid[1], this, eBELONGS_TO.BIG);
                var icon = "ui_icon/" + H52D_Framework.ActiveSkillConfig[this.vo.skillid[1]]["strIcon"];
                H52D_Framework.Event.DispatchEvent("CaptainSkillInit", [icon]);
            }
        };
        HeroCard.prototype.SetOrderZ = function (i) {
            /**设置人物层级 */
            this._order = i;
            this._avatar.SetOrder(i);
        };
        /**设置先手速度 */
        HeroCard.prototype.SetToSpeed = function () {
            /**先手速度浮动点 （0.95-1.05） */
            var speedoffect = (Math.random() * 11 + 95) >> 0;
            /**转化百分比为小数 */
            var speedfloat = speedoffect / 100;
            /**先手速度 = 先手速度*浮动点 */
            var speed = this.vo.attr.GetAttributeValue(3);
            this.vo.ToSpeed = speed * speedfloat;
        };
        /**释放队长技能 */
        HeroCard.prototype.SpellCaptainSkill = function () {
            var _this = this;
            // 如果目标是空则不自动放技能
            if (this.TargetIsNull()) {
                return;
            }
            this._captainSkill.SpellSkill(this.Target);
            this.CaptainEffct();
            H52D_Framework.Tick.Once(200, this, function () {
                _this.CaptainEffct_Z();
                var name = H52D_Framework.SkillName[_this.vo.skillid[1]];
                H52D_Framework.Floating.SkillNameText(name, _this.PosX, _this.PosY - 130);
            });
        };
        HeroCard.prototype.CaptainEffct = function () {
            var avatar = new H52D_Framework.Avatar(H52D_Framework.EffectRoot);
            avatar.Load(H52D_Framework.EffectDefine.shifa, 1, 1, this.PosX + 5, this.PosY - 75, Laya.Handler.create(this, function () {
                avatar.Play("effect_state_shifa", false, false, function () {
                    avatar.Destroy();
                    avatar = null;
                });
            }));
        };
        HeroCard.prototype.CaptainEffct_Z = function () {
            var _this = this;
            var avatar = new H52D_Framework.Avatar(H52D_Framework.EffectRoot);
            avatar.Load("res/effect/effect_state_shifa2/effect_state_shifa2.sk", 1, 1, this.PosX, this.PosY - 160, Laya.Handler.create(this, function () {
                avatar.Armature.alpha = 0;
                avatar.Play("effect_state_shifa2", true, false, function () {
                });
                H52D_Framework.TweenList.to(_this, avatar.Armature, { alpha: 1 }, 200, function () {
                    H52D_Framework.Tick.Once(700, _this, function () {
                        H52D_Framework.TweenList.to(_this, avatar.Armature, { alpha: 0 }, 200, function () {
                            if (avatar != null) {
                                avatar.Destroy();
                                avatar = null;
                            }
                        });
                    });
                });
            }));
        };
        /** 被击 */
        HeroCard.prototype.Hit = function () {
            var _this = this;
            if (!this._avatar || this._bAttack)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.hit, false, true, function () {
                _this.Idle();
            });
        };
        /** 死亡 */
        HeroCard.prototype.Die = function () {
            if (!this._avatar)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.die, false);
        };
        /**攻击触发Buff */
        HeroCard.prototype.AttackTriggerConditions = function () {
            for (var i = 0; i < this._passiveSkillList.length; i++) {
                if (this._passiveSkillList[i]) {
                    if (this._passiveSkillList[i].BAttack) {
                        this._passiveSkillList[i].AttackTriggerSkill();
                    }
                }
            }
        };
        /**被攻击触发Buff */
        HeroCard.prototype.OnHurtTriggerConditions = function () {
            for (var i = 0; i < this._passiveSkillList.length; i++) {
                if (this._passiveSkillList[i]) {
                    if (this._passiveSkillList[i].BHurt) {
                        this._passiveSkillList[i].OnHurtTrigger();
                    }
                }
            }
        };
        /**判断目标是不是空 */
        HeroCard.prototype.TargetIsNull = function () {
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    if (!this._target[i].IsDie) {
                        return false;
                    }
                }
            }
            return true;
        };
        return HeroCard;
    }());
    H52D_Framework.HeroCard = HeroCard;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeroCard.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**神兽数据类 */
    var BPetVo = /** @class */ (function () {
        function BPetVo(id) {
            /**神兽ID */
            this.ID = 0;
            /**神兽模型的朝向 */
            /**神兽等级 */
            this._level = 0;
            this.Direction = -1;
            /**状态：0：未上阵 1：上阵 */
            this._currentState = 0;
            /**神兽系数 */
            this.ratio = 0;
            this.CD = 0;
            this._attributePassive = [];
            this.ID = id;
            this.bNet = false;
            this.currentAttribute = {};
            this.Direction = -1;
            this.Level = 0;
            this.attr = new H52D_Framework.Attribute();
            this.ratio = H52D_Framework.ActiveSkillConfig[this.SkillID]["damageList"]["1"]["2"] / 10000;
            if (H52D_Framework.BattleManager.Instance.aIOperation) {
                this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, H52D_Framework.BattleManager.Instance.aIOperation.PetDps);
            }
            this.CurrentState = 0;
            this.ratio = H52D_Framework.ActiveSkillConfig[this.SkillID]["damageList"]["1"]["2"] / 10000;
            this.CD = H52D_Framework.ActiveSkillConfig[this.SkillID]["skillCD"] / 1000;
        }
        Object.defineProperty(BPetVo.prototype, "Path", {
            /**神兽模型路径 */
            get: function () { return H52D_Framework.PetConfig[this.ID].strPetModel; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "Scla", {
            /**神兽模型大小 */
            get: function () { return H52D_Framework.PetConfig[this.ID].modelScale; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "SkillID", {
            /**神兽普攻ID */
            get: function () { return H52D_Framework.PetConfig[this.ID].attackSkillID; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "Level", {
            get: function () {
                return this._level;
            },
            set: function (value) {
                this._level = value;
                if (value < 2) {
                    this.SetAttribute_I();
                }
                else {
                    this.SetAttribute_X();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "CurrentState", {
            get: function () {
                return this._currentState;
            },
            set: function (value) {
                this._currentState = value;
                if (value == 0) {
                    this.currentAttribute = this._AllAuxAttribute;
                }
                else {
                    this.currentAttribute = this._AllMainAttribute;
                }
                this.OnEffectAttribute();
                this.GetAddAttribute();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "petName", {
            /**神兽名字 */
            get: function () { return H52D_Framework.StringInfoConfig[H52D_Framework.PetConfig[this.ID]["petName"]].s; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "petPhyle", {
            /**神兽种族 */
            get: function () { return H52D_Framework.StringInfoConfig[H52D_Framework.PetConfig[this.ID]["petPhyle"]].s; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "petStory", {
            /**神兽背景 */
            get: function () { return H52D_Framework.StringInfoConfig[H52D_Framework.PetConfig[this.ID]["petStory"]].s; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "strPetIcon", {
            /**神兽图标 */
            get: function () { return H52D_Framework.PetConfig[this.ID].strPetIcon; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "petColor", {
            /**神兽品质 */
            get: function () { return H52D_Framework.PetConfig[this.ID].petColor; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "_initMainAttribute", {
            /**初始化主属性 */
            get: function () { return H52D_Framework.PetConfig[this.ID].initialPrimeAttribute; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "_initAuxAttribute", {
            /**初始化辅属性 */
            get: function () { return H52D_Framework.PetConfig[this.ID].initialAuxiliaryAttribute; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "AllMainAttribute", {
            get: function () { return this._AllMainAttribute; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "AllAuxAttribute", {
            get: function () { return this._AllAuxAttribute; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "_addMainAttr", {
            /**每X级增加的主属性*/
            get: function () { return H52D_Framework.PetConfig[this.ID].primeAttributeUp; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "_addAuxiliaryAttr", {
            /**每X级增加的辅属性*/
            get: function () { return H52D_Framework.PetConfig[this.ID].auxiliaryAttributeUp; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetVo.prototype, "position", {
            /**神兽tip坐标 */
            get: function () { return H52D_Framework.PetConfig[this.ID].position; },
            enumerable: true,
            configurable: true
        });
        /**获得增加的属性 */
        BPetVo.prototype.GetAddAttribute = function () {
            if (this._currentState == 0) {
                this.addCurrentAttribute_1 = this._addAuxiliaryAttr[1][2];
                this.addCurrentAttribute_2 = this._addAuxiliaryAttr[2][2];
            }
            else {
                this.addCurrentAttribute_1 = this._addMainAttr[1][2];
                this.addCurrentAttribute_2 = this._addMainAttr[2][2];
            }
        };
        /**属性加成效果 */
        BPetVo.prototype.OnEffectAttribute = function () {
            /*** 如果有先清理*/
            for (var i = 0; i < this._attributePassive.length; i++) {
                if (this._attributePassive[i]) {
                    this._attributePassive[i].Destroy();
                    this._attributePassive[i] = null;
                }
            }
            this._attributePassive = [];
            /**获取属性数据 */
            var data = [];
            for (var j = 0; j < H52D_Framework.GetTabLength(this.currentAttribute); j++) {
                data.push(this.currentAttribute[j + 1]);
            }
            /**初始化属性属性 */
            for (var i = 0; i < data.length; i++) {
                var p = new H52D_Framework.BPetAttribute(this, data[i]);
                this._attributePassive.push(p);
            }
            /**产生属性加成效果 */
            for (var i = 0; i < this._attributePassive.length; i++) {
                if (this._attributePassive[i]) {
                    this._attributePassive[i].OnEffect();
                }
            }
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.REFFIXEDATTR);
        };
        BPetVo.prototype.GetDamage = function () {
            return H52D_Framework.BattleManager.Instance.aIOperation.PetShoWDamage;
        };
        /**1-4级用初始化属性 */
        BPetVo.prototype.SetAttribute_I = function () {
            this._AllMainAttribute = this._initMainAttribute;
            this._AllAuxAttribute = this._initAuxAttribute;
        };
        /**5级以后，根据等级算出属性的加成 */
        BPetVo.prototype.SetAttribute_X = function () {
            var config = H52D_Framework.PetConfig[this.ID];
            var PrimeAttributeInterval = H52D_Framework.GameParamConfig["PrimeAttributeInterval"];
            var main = this.AddAttribute(this._addMainAttr, PrimeAttributeInterval);
            if (this._level <= 4) {
                this._AllAuxAttribute = this._initAuxAttribute;
            }
            else {
                var AuxiliaryAttributeInterval = H52D_Framework.GameParamConfig["AuxiliaryAttributeInterval"];
                var aux = this.AddAttribute(this._addAuxiliaryAttr, AuxiliaryAttributeInterval);
                this._AllAuxAttribute = this.AddAttributeX(aux, this._initAuxAttribute);
            }
            this._AllMainAttribute = this.AddAttributeX(main, this._initMainAttribute);
            if (this._currentState == 1) {
                this.currentAttribute = this._AllMainAttribute;
            }
            else {
                this.currentAttribute = this._AllAuxAttribute;
            }
            this.OnEffectAttribute();
        };
        /**每X等级加属性*/
        BPetVo.prototype.AddAttribute = function (O, I) {
            var index = 0;
            if (I == 5) {
                var Lv = this._level - 1;
                index = Math.floor(Lv / I);
            }
            else {
                index = Math.floor(this._level / I) - 1;
            }
            if (index <= 0)
                return O;
            var Odd = new Object();
            for (var idx in O) {
                var tAttr = O[idx];
                var id = tAttr[1];
                var value = tAttr[2];
                var modfiy = value * index;
                Odd[idx] = { 1: id, 2: modfiy };
            }
            return Odd;
        };
        /**每X等级加属性*/
        BPetVo.prototype.AddAttributeX = function (add, init) {
            var Odd = new Object();
            for (var idx in add) {
                var aAttr = add[idx];
                var iAttr = init[idx];
                var id = aAttr[1];
                var value = aAttr[2];
                var value2 = iAttr[2];
                var modfiy = value + value2;
                Odd[idx] = { 1: id, 2: modfiy };
            }
            return Odd;
        };
        BPetVo.prototype.UpdatePassiveAttribute = function () {
            for (var i = 1; i <= 5; i++) {
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Percent, 0);
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Fixed, 0);
            }
            for (var i = 21; i <= 27; i++) {
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Percent, 0);
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Fixed, 0);
            }
        };
        return BPetVo;
    }());
    H52D_Framework.BPetVo = BPetVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BPetVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var BPetManager = /** @class */ (function () {
        function BPetManager() {
        }
        Object.defineProperty(BPetManager, "Instance", {
            get: function () {
                if (!BPetManager._instance) {
                    BPetManager._instance = new BPetManager();
                }
                return BPetManager._instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPetManager.prototype, "PetIns", {
            get: function () {
                return this._Pet;
            },
            enumerable: true,
            configurable: true
        });
        /**加载神兽模型 */
        BPetManager.prototype.LoadBPet = function (id, sceneId) {
            this.Destroy();
            var sid = sceneId - 10000;
            var point = H52D_Framework.PetPoint[sid];
            var x = point[0];
            var y = point[1];
            //点击宠物气泡
            H52D_Framework.Event.DispatchEvent("SetClickPetButton", [x, y]);
            this._Pet = new H52D_Framework.BPet(id);
            this._Pet.vo.CurrentState = 1;
            this._Pet.LoadMoudle(x, y, 2, null);
            if (H52D_Framework.BattleManager.Instance.MonsterFormation) {
                this.SetTarget(H52D_Framework.BattleManager.Instance.MonsterFormation.GetFrontobject[0]);
            }
            if (H52D_Framework.BattleManager.Instance.aIOperation) {
                H52D_Framework.BattleManager.Instance.aIOperation.Dps();
            }
            for (var k in H52D_Framework.PetManager.Instance.OwnPetList) {
                H52D_Framework.PetManager.Instance.OwnPetList[k].OnEffectAttribute();
            }
        };
        BPetManager.prototype.LoadBPetinfo = function (id) {
            var pet = H52D_Framework.PetManager.Instance.GetPet_Instance(id);
            pet.CurrentState = 1;
            return pet;
        };
        /**设置目标开启战斗 */
        BPetManager.prototype.SetTarget = function (target) {
            this._Pet.Target = [];
            this._Pet.Target.push(target);
            this._Pet.OpenAutoAttack();
        };
        BPetManager.prototype.Destroy = function () {
            if (this._Pet) {
                this._Pet.Destroy();
                this._Pet = null;
            }
        };
        return BPetManager;
    }());
    H52D_Framework.BPetManager = BPetManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BPetManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var BPetAttribute = /** @class */ (function () {
        /**记录增加的属性值 */
        //public LastArrary:Array<Array<number>> = [];
        /**
         * 初始化
         * @param owner 所属者
         * @param data 属性数据
         */
        function BPetAttribute(owner, data) {
            /**属性id */
            this._attributeID = 0;
            /**属性加值*/
            this._attributeSubValue = 0;
            /**作用目标 */
            this._target = [];
            /**当前法力回复速度 */
            this._currentMpRecover = 0;
            /**当前法力上限制 */
            this._currentMp = 0;
            this._owner = owner;
            this._attributeID = data[1];
            this._attributeSubValue = data[2];
        }
        /**产生效果 */
        BPetAttribute.prototype.OnEffect = function () {
            this._target = [];
            this._target = H52D_Framework.SelectTarget.ImpactTarget(this._attributeID, this._owner).concat();
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    this.AddAttribute(this._target[i]);
                }
            }
        };
        /**为单个目标 修改属性 */
        BPetAttribute.prototype.AddAttribute = function (target) {
            var attr = target.attr;
            if (this._attributeID == 53 || this._attributeID == 51) {
                this.AddAttributePlayer();
                return;
            }
            var modfiy_id = attr.GetAttributeModfiyID(this._attributeID);
            var isPercent = attr.GetAttributeIsPer(modfiy_id);
            if (isPercent == 1) {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Percent, this._attributeSubValue);
            }
            else {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Fixed, this._attributeSubValue);
            }
        };
        /**修改主角特有属性 */
        BPetAttribute.prototype.AddAttributePlayer = function () {
            if (this._attributeID == 53) {
                var subvalue = this._attributeSubValue / 10000;
                var mpCurrent = H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeTypeValue(53, H52D_Framework.eValueType.Base);
                this._currentMpRecover = mpCurrent * subvalue;
                this._currentMpRecover = Math.ceil(this._currentMpRecover);
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, H52D_Framework.eValueType.Fixed, this._currentMpRecover);
                H52D_Framework.Event.DispatchEvent("MpRecoveryRateChange");
                return;
            }
            if (this._attributeID == 51) {
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, H52D_Framework.eValueType.Fixed, this._attributeSubValue);
                H52D_Framework.Event.DispatchEvent("MpPoolChange");
                return;
            }
        };
        /**
         * 删除增加的属性
         * @param target 目标
         */
        BPetAttribute.prototype.RemoveAttribute = function (target) {
            var attr = target.attr;
            if (this._attributeID == 53 || this._attributeID == 51) {
                this.RemoveAttributePlayer();
                return;
            }
            var modfiy_id = attr.GetAttributeModfiyID(this._attributeID);
            var isPercent = attr.GetAttributeIsPer(modfiy_id);
            if (isPercent == 1) {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Percent, -this._attributeSubValue);
            }
            else {
                attr.ModfiyAttributeValue(modfiy_id, H52D_Framework.eValueType.Fixed, -this._attributeSubValue);
            }
        };
        /**
         * 删除增加的主角特有属性
         */
        BPetAttribute.prototype.RemoveAttributePlayer = function () {
            if (this._attributeID == 53) {
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(53, H52D_Framework.eValueType.Fixed, -this._currentMpRecover);
                H52D_Framework.Event.DispatchEvent("MpRecoveryRateChange");
            }
            if (this._attributeID == 51) {
                H52D_Framework.MasterPlayer.Instance.player.vo.attr.ModfiyAttributeValue(51, H52D_Framework.eValueType.Fixed, -this._attributeSubValue);
                H52D_Framework.Event.DispatchEvent("MpPoolChange");
            }
        };
        /**销毁 */
        BPetAttribute.prototype.Destroy = function () {
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    this.RemoveAttribute(this._target[i]);
                }
            }
            this._target = [];
        };
        return BPetAttribute;
    }());
    H52D_Framework.BPetAttribute = BPetAttribute;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BPetAttribute.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var BPet = /** @class */ (function () {
        /**初始化 */
        function BPet(id, viewRoot, bbool) {
            /**挂点类型*/
            this.type = eCharacter_TYPE.PET;
            /** ID */
            this._id = 0;
            /**攻击目标 */
            this._target = [];
            //temp
            this._isLoadDown = false;
            this._order = 0;
            this._PosX = 0;
            this._PosY = 0;
            /**重置循环普攻 */
            this._bClose = true;
            this.SE = SkinEnum.SkinPet;
            this._dataVo = H52D_Framework.PetManager.Instance.GetPet_Instance(id);
            this.viewRoot = viewRoot ? viewRoot : H52D_Framework.AvatarRoot;
        }
        Object.defineProperty(BPet.prototype, "avatar", {
            get: function () { return this._avatar; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPet.prototype, "ID", {
            get: function () { return this._id; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPet.prototype, "Target", {
            get: function () { return this._target; },
            /**攻击目标 */
            set: function (value) { this._target = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPet.prototype, "IsLoadDown", {
            /**是否加载完成 */
            get: function () { return this._isLoadDown; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPet.prototype, "vo", {
            /**数据模型*/
            get: function () { return this._dataVo; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPet.prototype, "Order", {
            /**人物层级 */
            get: function () { return this._order; },
            enumerable: true,
            configurable: true
        });
        /**设置人物层级 */
        BPet.prototype.SetOrderZ = function (i) {
            this._order = i;
            this._avatar.SetOrder(i);
        };
        Object.defineProperty(BPet.prototype, "PosX", {
            /**人物位置X坐标 */
            get: function () { return this._PosX; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPet.prototype, "PosY", {
            /**人物位置Y坐标 */
            get: function () { return this._PosY; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BPet.prototype, "attackSkill", {
            /**英雄普攻 */
            get: function () { return this._attackskill; },
            enumerable: true,
            configurable: true
        });
        /**出生特效 */
        BPet.prototype.ChangeEffect = function () {
            var _this = this;
            var oldScale = this.vo.Scla;
            this._avatar.scale = 0;
            H52D_Framework.TweenList.to(this, this._avatar, { scale: oldScale }, 250, function () {
                if (!_this._avatar)
                    return;
                _this._avatar.scale = oldScale;
            });
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/boss_appear2.mp3");
            }
            if (this._brithAvatar) {
                this._brithAvatar.Play("effect_state_qiehuan", false);
            }
            else {
                this._brithAvatar = new H52D_Framework.Avatar(H52D_Framework.AvatarEffectRoot);
                this._brithAvatar.Load("res/effect/effect_state_qiehuan/effect_state_qiehuan.sk", 1, 0.4, this.PosX, this.PosY - 78, Laya.Handler.create(this, function () {
                    _this._brithAvatar.Play("effect_state_qiehuan", false);
                }));
            }
        };
        /**加载英雄模型 */
        BPet.prototype.LoadMoudle = function (x, y, order, callback) {
            var _this = this;
            this._PosX = x;
            this._PosY = y;
            /**加载模型 */
            this._avatar = new H52D_Framework.Avatar(this.viewRoot);
            this._avatar.Load(this.vo.Path, this.vo.Direction, this.vo.Scla, x, y, Laya.Handler.create(this, function () {
                /**设置阴影 */
                //this._avatar.Shadow(0.5,true);
                _this.ChangeEffect();
                _this._isLoadDown = true;
                _this.SetOrderZ(order);
                // Tick.Loop(100,this,this.OnUpdate);
                /**初始化英雄普攻 */
                _this._attackskill = new H52D_Framework.Skill(_this.vo.SkillID, _this, eBELONGS_TO.ATTACK_S);
                _this.Idle();
                if (callback)
                    callback.run();
            }));
        };
        /**获取当前动画时间 */
        BPet.prototype.GetAniDuration = function () {
            return this._avatar.GetAniDuration();
        };
        /** 待机 */
        BPet.prototype.Idle = function () {
            if (!this._avatar)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.idle, true);
        };
        /** 被击 */
        BPet.prototype.Hit = function () {
            var _this = this;
            if (!this._avatar)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.hit, false, true, function () {
                _this.Idle();
            });
        };
        /** 死亡 */
        BPet.prototype.Die = function () {
            if (!this._avatar)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.die, false);
        };
        /** 受伤 */
        BPet.prototype.OnHurt = function () {
        };
        /** 攻击 */
        BPet.prototype.Attack = function () {
            var _this = this;
            if (!this._target || !this._attackskill || !this._avatar)
                return;
            /**神兽攻击动画 攻击完毕  自动待机状态 */
            this._avatar.Play(H52D_Framework.AnimationName.attack, false, true, function () {
                _this.Idle();
            });
            this.SpellAttackSkill();
            H52D_Framework.BattleManager.Instance.petAttackNum++;
        };
        BPet.prototype.SpellAttackSkill = function () {
            /**普攻释放*/
            this._attackskill.SpellSkill(this._target);
        };
        /**攻击回调 */
        BPet.prototype.Complete = function () {
        };
        /**开启更新函数 */
        BPet.prototype.OpenAutoAttack = function () {
            this._bClose = false;
        };
        BPet.prototype.CloseAutoAttack = function () {
            this._bClose = true;
        };
        /**更新函数 */
        BPet.prototype.OnUpdate = function () {
            if (!this._target)
                return;
            if (this._attackskill) {
                if (!this._attackskill.IsCD && !this._bClose) {
                    this.Attack();
                }
                this._attackskill.OnUpdate();
            }
            if (this.TargetIsNull()) {
                this.CloseAutoAttack();
                this._target = [];
            }
        };
        /**判断目标是不是空 */
        BPet.prototype.TargetIsNull = function () {
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    if (!this._target[i].IsDie) {
                        return false;
                    }
                }
            }
            return true;
        };
        /**清理目标 */
        BPet.prototype.ClearTarget = function () {
            if (this._target) {
                this._target = [];
            }
            /**普攻目标清理 */
            if (this.attackSkill) {
                this.attackSkill.ClearTarget();
            }
        };
        /**销毁 */
        BPet.prototype.Destroy = function () {
            this.CloseAutoAttack();
            this.ClearTarget();
            if (this._avatar) {
                this._avatar.Destroy();
                this._avatar = null;
            }
            if (this._attackskill) {
                this._attackskill.Destroy();
                this._attackskill = null;
            }
            // Tick.ClearAll(this);
        };
        return BPet;
    }());
    H52D_Framework.BPet = BPet;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BPet.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var BCampVo = /** @class */ (function () {
        function BCampVo() {
            this.level = 1;
            this.skillid = 0;
            this.ratio = 0;
            this.CD = 0;
            this.attr = new H52D_Framework.Attribute();
        }
        Object.defineProperty(BCampVo.prototype, "Level", {
            get: function () { return this.level; },
            enumerable: true,
            configurable: true
        });
        BCampVo.prototype.Setattribute = function () {
            this.setDamage();
            var cmp = H52D_Framework.CampManager.Instance.nCamp(H52D_Framework.MasterPlayer.Instance.player.CampID);
            if (!cmp) {
                return;
            }
            this.level = cmp["3"];
            this.skillid = H52D_Framework.GangLevelUpConfig[this.level]["GangSkillId"];
            this.ratio = H52D_Framework.ActiveSkillConfig[this.skillid]["damageList"]["1"]["2"] / 10000;
            this.CD = H52D_Framework.ActiveSkillConfig[this.skillid]["skillCD"] / 1000;
        };
        BCampVo.prototype.setDamage = function () {
            var damage = 0;
            for (var k in H52D_Framework.HeroManager.Instance.Herolist) {
                var Hc = H52D_Framework.HeroManager.Instance.Herolist[k];
                if (Hc) {
                    damage += Hc.attr.GetAttributeValue(2);
                }
            }
            this.attr.SetAttributeValue(2, H52D_Framework.eValueType.Base, damage);
        };
        BCampVo.prototype.UpdatePassiveAttribute = function () {
            for (var i = 1; i <= 5; i++) {
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Percent, 0);
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Fixed, 0);
            }
            for (var i = 21; i <= 27; i++) {
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Percent, 0);
                this.attr.SetAttributeValue(i, H52D_Framework.eValueType.Fixed, 0);
            }
        };
        return BCampVo;
    }());
    H52D_Framework.BCampVo = BCampVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BCampVo.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**阵营管理类 */
    var BCampManager = /** @class */ (function () {
        function BCampManager() {
        }
        Object.defineProperty(BCampManager, "Instance", {
            get: function () {
                if (!BCampManager._instance) {
                    BCampManager._instance = new BCampManager();
                }
                return BCampManager._instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BCampManager.prototype, "Camp", {
            /**阵营 */
            get: function () { return this._Camp; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BCampManager.prototype, "vo", {
            get: function () { return this._CampVo; },
            enumerable: true,
            configurable: true
        });
        BCampManager.prototype.initData = function () {
            this._CampVo = new H52D_Framework.BCampVo();
        };
        /**加载阵营模型 */
        BCampManager.prototype.LoadBCamp = function () {
            this.Destroy();
            this._Camp = new H52D_Framework.BCamp(this._CampVo);
            this._Camp.LoadMoudle(30, 300, 2, Laya.Handler.create(this, function () {
                H52D_Framework.BattleManager.Instance.aIOperation.Dps();
            }));
            if (H52D_Framework.BattleManager.Instance.MonsterFormation.GetFrontobject[0]) {
                this.SetTarget(H52D_Framework.BattleManager.Instance.MonsterFormation.GetFrontobject[0]);
            }
        };
        /**设置目标开启战斗 */
        BCampManager.prototype.SetTarget = function (target) {
            this._Camp.Target = [];
            this._Camp.Target.push(target);
            this._Camp.OpenAutoAttack();
        };
        BCampManager.prototype.Destroy = function () {
            if (this._Camp) {
                this._Camp.Destroy();
                this._Camp = null;
            }
        };
        return BCampManager;
    }());
    H52D_Framework.BCampManager = BCampManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BCampManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var BCamp = /** @class */ (function () {
        function BCamp(vo, viewRoot) {
            /**挂点类型*/
            this.type = eCharacter_TYPE.CAMP;
            /** ID */
            this._id = 0;
            /**攻击目标 */
            this._target = [];
            //temp
            this._isLoadDown = false;
            this._order = 0;
            this._PosX = 0;
            this._PosY = 0;
            /**重置循环普攻 */
            this._bClose = true;
            this._dataVo = vo;
            this.SE = SkinEnum.SkinCamp;
            this.viewRoot = viewRoot ? viewRoot : H52D_Framework.AvatarRoot;
        }
        Object.defineProperty(BCamp.prototype, "avatar", {
            get: function () { return this._avatar; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BCamp.prototype, "ID", {
            get: function () { return this._id; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BCamp.prototype, "Target", {
            get: function () { return this._target; },
            /**攻击目标 */
            set: function (value) { this._target = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BCamp.prototype, "IsLoadDown", {
            /**是否加载完成 */
            get: function () { return this._isLoadDown; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BCamp.prototype, "vo", {
            /**数据模型*/
            get: function () { return this._dataVo; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BCamp.prototype, "Order", {
            /**人物层级 */
            get: function () { return this._order; },
            enumerable: true,
            configurable: true
        });
        /**设置人物层级 */
        BCamp.prototype.SetOrderZ = function (i) {
            this._order = i;
            this._avatar.SetOrder(i);
        };
        Object.defineProperty(BCamp.prototype, "PosX", {
            /**人物位置X坐标 */
            get: function () { return this._PosX; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BCamp.prototype, "PosY", {
            /**人物位置Y坐标 */
            get: function () { return this._PosY; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BCamp.prototype, "attackSkill", {
            /**英雄普攻 */
            get: function () { return this._attackskill; },
            enumerable: true,
            configurable: true
        });
        /**加载阵营模型 */
        BCamp.prototype.LoadMoudle = function (x, y, order, callback) {
            var _this = this;
            this._PosX = x;
            this._PosY = y;
            /**加载模型 */
            this._avatar = new H52D_Framework.Avatar(this.viewRoot);
            this._avatar.Load("res/player/chuan/chuan.sk", 1, 0.3, x, y, Laya.Handler.create(this, function () {
                _this._avatar.Rotate(8);
                _this.vo.Setattribute();
                _this._isLoadDown = true;
                _this.SetOrderZ(order);
                // Tick.Loop(100,this,this.OnUpdate);
                /**初始化英雄普攻 */
                _this._attackskill = new H52D_Framework.Skill(_this.vo.skillid, _this, eBELONGS_TO.ATTACK_S);
                _this.Idle();
                if (callback)
                    callback.run();
            }));
        };
        /**获取当前动画时间 */
        BCamp.prototype.GetAniDuration = function () {
            return this._avatar.GetAniDuration();
        };
        /** 待机 */
        BCamp.prototype.Idle = function () {
            if (!this._avatar)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.idle, true);
        };
        /** 被击 */
        BCamp.prototype.Hit = function () {
            var _this = this;
            if (!this._avatar)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.hit, false, true, function () {
                _this.Idle();
            });
        };
        /** 死亡 */
        BCamp.prototype.Die = function () {
            if (!this._avatar)
                return;
            this._avatar.Play(H52D_Framework.AnimationName.die, false);
        };
        /** 受伤 */
        BCamp.prototype.OnHurt = function () {
        };
        /** 攻击 */
        BCamp.prototype.Attack = function () {
            var _this = this;
            if (!this._target || !this._attackskill || !this._avatar)
                return;
            /**神兽攻击动画 攻击完毕  自动待机状态 */
            this._avatar.Play(H52D_Framework.AnimationName.attack, false, true, function () {
                _this.Idle();
            });
            this.SpellAttackSkill();
        };
        BCamp.prototype.SpellAttackSkill = function () {
            /**普攻释放*/
            this._attackskill.SpellSkill(this._target);
        };
        /**攻击回调 */
        BCamp.prototype.Complete = function () {
        };
        /**开启更新函数 */
        BCamp.prototype.OpenAutoAttack = function () {
            this._bClose = false;
        };
        BCamp.prototype.CloseAutoAttack = function () {
            this._bClose = true;
        };
        /**更新函数 */
        BCamp.prototype.OnUpdate = function () {
            if (!this._target)
                return;
            if (this._attackskill) {
                if (!this._attackskill.IsCD && !this._bClose) {
                    this.Attack();
                }
                this._attackskill.OnUpdate();
            }
            if (this.TargetIsNull()) {
                this.CloseAutoAttack();
                this._target = [];
            }
        };
        /**判断目标是不是空 */
        BCamp.prototype.TargetIsNull = function () {
            for (var i = 0; i < this._target.length; i++) {
                if (this._target[i]) {
                    if (!this._target[i].IsDie) {
                        return false;
                    }
                }
            }
            return true;
        };
        /**清理目标 */
        BCamp.prototype.ClearTarget = function () {
            if (this._target) {
                this._target = [];
            }
            /**普攻目标清理 */
            if (this.attackSkill) {
                this.attackSkill.ClearTarget();
            }
        };
        BCamp.prototype.Destroy = function () {
            this.CloseAutoAttack();
            this.ClearTarget();
            if (this._avatar) {
                this._avatar.Destroy();
                this._avatar = null;
            }
            if (this._attackskill) {
                this._attackskill.Destroy();
                this._attackskill = null;
            }
            // Tick.ClearAll(this);
        };
        return BCamp;
    }());
    H52D_Framework.BCamp = BCamp;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BCamp.js.map
/*
* 模型类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**模型类 */
    var Avatar = /** @class */ (function () {
        function Avatar(viewRoot) {
            this._posx = 0;
            this._posy = 0;
            this._curAniName = "";
            this._shadow = null;
            this._factory = null;
            this._armature = null;
            /** 闪光亮度 */
            this._lightVal = 0;
            this._lighterFactory = null;
            this._lighterArmature = null;
            /**大小 */
            this._scale = 1;
            /**移动速度 */
            this._speed = 100;
            /**方向 */
            this._direction = AvatarDirection.right;
            /**是否加载完成 */
            this._loaded = false;
            this._shadow = new Laya.Image();
            this._shadow.anchorX = 0.5;
            this._shadow.anchorY = 0.5;
            this.viewRoot = viewRoot;
        }
        Object.defineProperty(Avatar.prototype, "Armature", {
            get: function () {
                return this._armature;
            },
            enumerable: true,
            configurable: true
        });
        Avatar.prototype.AddPendant = function (Obj) {
            if (!this._armature)
                return;
            this._armature.addChildAt(Obj, 0);
        };
        Object.defineProperty(Avatar.prototype, "width", {
            get: function () {
                return this._width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Avatar.prototype, "height", {
            get: function () {
                return this._height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Avatar.prototype, "scale", {
            get: function () {
                return this._scale;
            },
            set: function (value) {
                if (this._armature == null || this._armature.destroyed)
                    return;
                this._scale = value;
                this._armature.scale(this._scale * this._direction, this._scale);
                if (this._lighterArmature) {
                    this._lighterArmature.scale(this._scale * this._direction, this._scale);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Avatar.prototype, "rotation", {
            set: function (value) {
                if (this._armature == null || this._armature.destroyed)
                    return;
                this._armature.rotation = value;
                if (this._lighterArmature) {
                    this._lighterArmature.rotation = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Avatar.prototype, "PosX", {
            get: function () {
                return this._posx;
            },
            /**x坐标 */
            set: function (value) {
                this._posx = value;
                if (this._armature) {
                    this._armature.x = this._posx;
                    if (this._lighterArmature) {
                        this._lighterArmature.x = this._posx;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Avatar.prototype, "PosY", {
            get: function () {
                return this._posy;
            },
            /**y坐标 */
            set: function (value) {
                this._posy = value;
                if (this._armature) {
                    this._armature.y = this._posy;
                    if (this._lighterArmature) {
                        this._lighterArmature.y = this._posy;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Avatar.prototype, "visible", {
            get: function () {
                return this._armature.visible;
            },
            /** 显示隐藏 */
            set: function (value) {
                if (this._armature) {
                    this._armature.visible = value;
                }
                if (this._lighterArmature) {
                    this._lighterArmature.visible = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Avatar.prototype, "speed", {
            get: function () {
                return this._speed;
            },
            set: function (value) {
                this._speed = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Avatar.prototype, "direction", {
            get: function () {
                return this._direction;
            },
            set: function (value) {
                if (!this._armature || this._armature.destroyed)
                    return;
                this._direction = value;
                this._armature.scale(this._scale * this._direction, this._scale);
                if (this._lighterArmature) {
                    this._lighterArmature.scale(this._scale * this._direction, this._scale);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Avatar.prototype, "loaded", {
            get: function () {
                return this._loaded;
            },
            enumerable: true,
            configurable: true
        });
        /** 添加缓存资源 */
        Avatar.prototype.AddAvatarRes = function (path) {
            if (Avatar.acatarCache[path] == null) {
                Avatar.acatarCache[path] = 1;
            }
            else {
                Avatar.acatarCache[path] += 1;
            }
        };
        /** 删除资源缓存 */
        Avatar.prototype.RemAvatarRes = function (path) {
            if (Avatar.acatarCache[path] == null) {
                // 如果调用没有问题则这个里是不会执行的
                return;
            }
            if (Avatar.acatarCache[path] > 0) {
                Avatar.acatarCache[path] -= 1;
            }
        };
        /** 判断是否删除资源 */
        Avatar.prototype.CheckDispose = function (path) {
            if (Avatar.acatarCache[path] == null) {
                return true;
            }
            return Avatar.acatarCache[path] <= 0;
        };
        /**
         * 加载模型
         * @param path 路径
         * @param direction 方向（右：1，左：-1）
         * @param scale 出生大小
         * @param x 出生点坐标x
         * @param y 出生点坐标y
         * @param callBack 回调函数
         * @param bUseLight 是否发光
         */
        Avatar.prototype.Load = function (path, direction, scale, x, y, callBack, lightVal) {
            if (direction === void 0) { direction = 1; }
            if (scale === void 0) { scale = 1; }
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (lightVal === void 0) { lightVal = 0; }
            if (this._loaded) {
                this.Destroy();
            }
            this._instID = Avatar.instMsg.GetNewInstID();
            this._path = path;
            this.AddAvatarRes(path);
            this._posx = x;
            this._posy = y;
            this._scale = scale;
            this._direction = direction;
            this._lightVal = lightVal;
            //加载常规模型
            this._factory = new Laya.Templet();
            this._factory.loadAni(path);
            this._factory.on(Laya.Event.COMPLETE, this, this.LoadComplete, [callBack]);
        };
        /**
         * 加载完成
         * @param callBack 回调函数
         */
        Avatar.prototype.LoadComplete = function (callBack) {
            this._armature = this._factory.buildArmature(0);
            this._armature.scale(this._scale * this._direction, this._scale);
            this._armature.x = this._posx;
            this._armature.y = this._posy;
            if (this.viewRoot) {
                this.viewRoot.addChild(this._armature);
            }
            if (this._lightVal > 0) {
                this.LoadLighterAvatar(callBack);
            }
            else {
                this._loaded = true;
                if (callBack) {
                    callBack.run();
                }
            }
        };
        /**加载发光模型 */
        Avatar.prototype.LoadLighterAvatar = function (callBack) {
            this._lighterFactory = new Laya.Templet();
            this._lighterFactory.loadAni(this._path);
            this._lighterFactory.on(Laya.Event.COMPLETE, this, this.LighterComplete, [callBack]);
        };
        /**加载完成 */
        Avatar.prototype.LighterComplete = function (callBack) {
            var _this = this;
            this._lighterArmature = this._factory.buildArmature(0);
            this._lighterArmature.scale(this._scale * this._direction, this._scale);
            this._lighterArmature.x = this._posx;
            this._lighterArmature.y = this._posy;
            this._lighterArmature.blendMode = "lighter";
            if (this.viewRoot) {
                this.viewRoot.addChild(this._lighterArmature);
            }
            H52D_Framework.Tick.FrameLoop(1, this, function () {
                var value = Math.abs(Math.sin(H52D_Framework.Time.time / 1000)) * 0.5;
                _this._lighterArmature.alpha = value * _this._lightVal;
            });
            this._loaded = true;
            if (callBack) {
                callBack.run();
            }
        };
        /**
         * 加载阴影
         *
         **/
        Avatar.prototype.Shadow = function (scale, bMonster) {
            if (bMonster === void 0) { bMonster = false; }
            if (!this.viewRoot)
                return;
            function loop(self) {
                if (!self._armature || self._armature.destroyed)
                    return;
                var ret = self._armature.getBounds();
                if (ret.width > 0 || ret.height > 0) {
                    self._width = ret.width;
                    self._height = ret.height;
                    self._shadow.skin = "ui_common/img-yingzi.png";
                    self._shadow.scale(scale, scale);
                    if (bMonster) {
                        self._shadow.pos(self._posx, self._posy);
                    }
                    else {
                        self._shadow.pos(ret.x + ret.width * 0.5, ret.y + ret.height - 5);
                    }
                    self.viewRoot.addChildAt(self._shadow, 0);
                    H52D_Framework.Tick.Clear(self, loop);
                    return;
                }
            }
            H52D_Framework.Tick.FrameLoop(1, this, loop, [this]);
        };
        /**设置层级顺序 */
        Avatar.prototype.SetOrder = function (order) {
            if (this._armature) {
                this._armature.zOrder = order;
                this._armature.updateZOrder();
            }
            if (this._lighterArmature) {
                this._lighterArmature.zOrder = order;
                this._lighterArmature.updateZOrder();
            }
        };
        /**获取骨骼点位置信息 */
        Avatar.prototype.GetBoneTransform = function (boneName) {
            var ret = new Laya.Point();
            var arr = this._factory.mBoneArr;
            if (arr) {
                var bone = this._factory.boneSlotDic[boneName];
                if (bone) {
                    var tran = bone.currDisplayData.transform;
                    ret.x = tran.x;
                    ret.y = tran.y;
                }
            }
            return ret;
        };
        /**
         * 播放一次，播放后隐藏
         */
        Avatar.prototype.PlayOnce = function (nameOrIndex) {
            var _this = this;
            if (nameOrIndex === void 0) { nameOrIndex = null; }
            if (!nameOrIndex) {
                var start = this._path.lastIndexOf("/") + 1;
                var end = this._path.indexOf(".sk");
                nameOrIndex = this._path.substring(start, end);
            }
            if (this.Armature) {
                this.Armature.visible = true;
                this.Play(nameOrIndex, false, true, function () {
                    _this.Armature.visible = false;
                });
            }
        };
        /**
         * 播放动画
         * @param nameOrIndex 动画名字或者索引,默认动画名称
         * @param loop 是否循环播放
         * @param force false,如果要播的动画跟上一个相同就不生效,true,强制生效
         * @param callBack 播放完成回调
         */
        Avatar.prototype.Play = function (nameOrIndex, loop, force, callBack, ones) {
            var _this = this;
            if (nameOrIndex === void 0) { nameOrIndex = null; }
            if (loop === void 0) { loop = true; }
            if (!this._armature || this._armature.destroyed)
                return;
            if (!nameOrIndex) {
                var start = this._path.lastIndexOf("/") + 1;
                var end = this._path.indexOf(".sk");
                nameOrIndex = this._path.substring(start, end);
            }
            //只播放第一帧
            if (ones) {
                this._armature.play(nameOrIndex, loop, force, 1, 1);
                if (this._lighterArmature) {
                    this._lighterArmature.play(nameOrIndex, loop, force, 1, 1);
                }
                return;
            }
            //如果是hit动作则不从头播放直接播放后半部分动画
            if (nameOrIndex == this._curAniName && nameOrIndex == AnimationName.hit) {
                var index = this._armature["_currAniIndex"];
                var duration = this._factory.getAniDuration(index);
                this._armature.play(nameOrIndex, loop, force, duration / 2);
                if (this._lighterArmature) {
                    this._lighterArmature.play(nameOrIndex, loop, force, duration / 2);
                }
            }
            else {
                this._armature.play(nameOrIndex, loop, force);
                if (this._lighterArmature) {
                    this._lighterArmature.play(nameOrIndex, loop, force);
                }
            }
            this._curAniName = nameOrIndex;
            //动画播放完成
            this._armature.offAll();
            this._armature.on(Laya.Event.STOPPED, this, function () {
                if (callBack != null) {
                    callBack();
                }
                if (_this._armature) {
                    _this._armature.offAll();
                }
            });
            if (this._lighterArmature) {
                this._lighterArmature.offAll();
                this._lighterArmature.on(Laya.Event.STOPPED, this, function () {
                    if (_this._lighterArmature) {
                        _this._lighterArmature.offAll();
                    }
                });
            }
        };
        /**获取动画时间 */
        Avatar.prototype.GetAniDuration = function () {
            if (!this._armature || !this._factory)
                return;
            var index = this._armature["_currAniIndex"];
            var duration = this._factory.getAniDuration(index);
            return duration;
        };
        /**停止播放动画 */
        Avatar.prototype.Stop = function () {
            this._armature.stop();
            this._armature.offAll();
            if (this._lighterArmature) {
                this._lighterArmature.stop();
                this._lighterArmature.offAll();
            }
        };
        Avatar.prototype.Rotate = function (value) {
            if (!this._armature || this._armature.destroyed)
                return;
            this._armature.rotation = value;
            if (this._lighterArmature) {
                this._lighterArmature.rotation = value;
            }
        };
        /**销毁 */
        Avatar.prototype.Destroy = function () {
            if (Avatar.instMsg.RemInstID(this._instID)) {
                this.RemAvatarRes(this._path);
            }
            H52D_Framework.Tick.ClearAll(this);
            if (this._shadow) {
                this._shadow.destroy(true);
                this._shadow = null;
            }
            if (this._factory) {
                this._factory.offAll();
                this._factory.destroy();
                if (this.CheckDispose(this._path)) {
                    this._factory.dispose();
                }
                this._factory = null;
            }
            if (this._armature) {
                this._armature.offAll();
                this._armature.destroy(true);
                this._armature = null;
            }
            if (this._lighterFactory) {
                this._lighterFactory.offAll();
                this._lighterFactory.destroy();
                if (this.CheckDispose(this._path)) {
                    this._lighterFactory.dispose();
                }
                this._lighterFactory = null;
            }
            if (this._lighterArmature) {
                this._lighterArmature.offAll();
                this._lighterArmature.destroy(true);
                this._lighterArmature = null;
            }
            this._loaded = false;
        };
        Avatar.acatarCache = {};
        Avatar.instMsg = new H52D_Framework.InstMsg();
        return Avatar;
    }());
    H52D_Framework.Avatar = Avatar;
    /**动画名称类 */
    var AnimationName = /** @class */ (function () {
        function AnimationName() {
        }
        /**待机动作 */
        AnimationName.idle = "idle";
        /**受伤（被击）动作 */
        AnimationName.hit = "hit";
        /**攻击动作 */
        AnimationName.attack = "attack";
        /**死亡动作 */
        AnimationName.die = "dead";
        return AnimationName;
    }());
    H52D_Framework.AnimationName = AnimationName;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Avatar.js.map
/**
* name
*/
var H52D_Framework;
(function (H52D_Framework) {
    // export enum ANI_STATE {
    // 	NONE,
    // 	IDLE,
    // 	HIT,
    // 	DIE,
    // 	ATTACK
    // }
    /**状态
     * @author zhang zhenming
     */
    var AnimationState = /** @class */ (function () {
        function AnimationState(avatar) {
            this._avatar = avatar;
        }
        /**待机动作 */
        AnimationState.prototype.Idle = function () {
            this._avatar.Play(H52D_Framework.AnimationName.idle, true);
        };
        /**攻击动作 */
        AnimationState.prototype.Attack = function (callback) {
            var _this = this;
            this._avatar.Play(H52D_Framework.AnimationName.attack, false, true, function () {
                if (callback) {
                    _this.Idle();
                    callback.run();
                }
            });
        };
        /**被击动作 */
        AnimationState.prototype.OnHit = function (callback) {
            var _this = this;
            this._avatar.Play(H52D_Framework.AnimationName.hit, false, true, function () {
                if (callback) {
                    _this.Idle();
                    callback.run();
                }
            });
        };
        /**死亡动作 */
        AnimationState.prototype.Die = function (callback) {
            this._avatar.Play(H52D_Framework.AnimationName.die, false, true, function () {
                if (callback) {
                    callback.run();
                }
            });
        };
        /**销毁 */
        AnimationState.prototype.Destroy = function () {
            if (this._avatar) {
                this._avatar.Destroy();
                this._avatar = null;
            }
        };
        return AnimationState;
    }());
    H52D_Framework.AnimationState = AnimationState;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=AnimationState.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var GetInfoAttr = /** @class */ (function () {
        function GetInfoAttr() {
            this.b_isAllScreen = false;
        }
        Object.defineProperty(GetInfoAttr, "Instance", {
            get: function () {
                if (GetInfoAttr._inst == null) {
                    GetInfoAttr._inst = new GetInfoAttr();
                }
                return GetInfoAttr._inst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GetInfoAttr.prototype, "IsAllScreen", {
            get: function () {
                return this.b_isAllScreen;
            },
            /**主界面下方界面是否为全屏 */
            set: function (buf) {
                this.b_isAllScreen = buf;
            },
            enumerable: true,
            configurable: true
        });
        /**获取国际化文字 */
        GetInfoAttr.prototype.GetText = function (id) {
            if (H52D_Framework.StringInfoConfig[id]) {
                return H52D_Framework.StringInfoConfig[id].s;
            }
            H52D_Framework.GameConfig.data[H52D_Framework.StringInfoConfig];
            return '';
        };
        /** 获取国际化文字,包含替换 */
        GetInfoAttr.prototype.GetSystemText = function (msg) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (typeof (msg) == "string") {
                msg = msg;
            }
            else if (typeof (msg) == "number") {
                if (H52D_Framework.SysPromptConfig[msg]) {
                    msg = H52D_Framework.SysPromptConfig[msg].strPromptInfo; //系统提示
                }
                else if (H52D_Framework.StringInfoConfig[msg]) {
                    msg = H52D_Framework.StringInfoConfig[msg].s; //国际化
                }
                else {
                    msg = "";
                }
            }
            else {
                msg = "";
            }
            return H52D_Framework.Format.apply(void 0, [msg].concat(args));
        };
        /**获取时间间隔(时间戳)
         * b_front:是否为前置的时间戳
         */
        GetInfoAttr.prototype.GetCountDown = function (time, b_front) {
            var timeNow = Date.now() / 1000;
            if (b_front) {
                return timeNow - time;
            }
            return time - timeNow;
        };
        /**获取倒计时 */
        GetInfoAttr.prototype.GrtTimeOut = function (secs) {
            secs = Number(secs.toString().split(".")[0]);
            var day = Math.floor(secs / 86400);
            var hour = Math.floor((secs - day * 86400) / 3600);
            var min = Math.floor((secs - hour * 3600) / 60);
            var sec = secs - hour * 3600 - min * 60;
            var str = '';
            if (day > 0) {
                str = (day >= 10 ? day : '0' + day) + ':' + (hour >= 10 ? hour : '0' + hour);
            }
            else if (hour > 0) {
                str = (hour >= 10 ? hour : '0' + hour) + ':' + (min >= 10 ? min : '0' + min);
            }
            else if (min > 0) {
                str = (min >= 10 ? min : '0' + min) + ':' + (sec >= 10 ? sec : '0' + sec);
            }
            else {
                str = (min >= 10 ? min : '0' + min) + ':' + (sec >= 10 ? sec : '0' + sec);
            }
            return str;
        };
        /**[]是否为空 */
        GetInfoAttr.prototype.GetObjIsNull = function (obj) {
            for (var i in obj) {
                return false;
            }
            return true;
        };
        /**起名空格 */
        GetInfoAttr.prototype.Format = function (str) {
            var index = 0;
            while (str.search(" ") != -1) {
                str = str.replace(' ', "");
            }
            return str;
        };
        /**当前关卡可得金币数量 */
        GetInfoAttr.prototype.GetThisOrderGoldNum = function () {
            var Order = H52D_Framework.MasterPlayer.Instance.player.CunstLevel;
            var goldNum = 0;
            var rewardObj = new Object();
            for (var i in H52D_Framework.CustomspassConfig) {
                if (H52D_Framework.CustomspassConfig[i].customsOrder == Order) {
                    rewardObj[1] = H52D_Framework.CustomspassConfig[i].waveRewardID;
                    rewardObj[2] = H52D_Framework.CustomspassConfig[i].extraRewardID;
                    break;
                }
            }
            for (var i in rewardObj) {
                var _reward = H52D_Framework.RewardConfig[rewardObj[i]].reWrad;
                for (var j in _reward) {
                    if (_reward[j][2] == 1) {
                        //金币
                        goldNum += _reward[j][3];
                    }
                }
            }
            return goldNum;
        };
        /**根据物品品质获取颜色 */
        GetInfoAttr.prototype.GetColor = function (num) {
            return QulityColorEnum[num] ? QulityColorEnum[num] : QulityColorEnum[7];
        };
        return GetInfoAttr;
    }());
    H52D_Framework.GetInfoAttr = GetInfoAttr;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=GetInfoAttr.js.map
/**
* 运营活动逻辑类;
*/
//活动入口位置
var OActivityPosEnum;
(function (OActivityPosEnum) {
    OActivityPosEnum[OActivityPosEnum["eOActivityPos0"] = 0] = "eOActivityPos0";
    OActivityPosEnum[OActivityPosEnum["eOActivityPos1"] = 1] = "eOActivityPos1";
})(OActivityPosEnum || (OActivityPosEnum = {}));
// 活动入口名称
var OActivityPosName = {
    1: "活动",
};
//活动入口图标
var OActivityPosIcon = {
    1: "btn-zhujiemian-huodong.png",
};
// 功能类型
var OActivityEnum;
(function (OActivityEnum) {
    OActivityEnum[OActivityEnum["eEverydayMoney"] = 1] = "eEverydayMoney";
    OActivityEnum[OActivityEnum["eDiamondView"] = 2] = "eDiamondView";
    OActivityEnum[OActivityEnum["eLotteryDiscount"] = 3] = "eLotteryDiscount";
    OActivityEnum[OActivityEnum["ePrivilegeDiscount"] = 4] = "ePrivilegeDiscount";
    OActivityEnum[OActivityEnum["eBoxDiscount"] = 5] = "eBoxDiscount";
})(OActivityEnum || (OActivityEnum = {}));
// 功能类型对应的View名
var OActivityViewName = {
    1: "EverydayMoneyView",
    2: "DiamondView",
    3: "",
    4: "",
    5: "",
};
var H52D_Framework;
(function (H52D_Framework) {
    var OActivityLogic = /** @class */ (function () {
        function OActivityLogic() {
            /**活动逻辑类对象集合 */
            this.OActivityFun = {};
            /**缓存当前开启的运营活动数据 */
            this._openData = {};
            /**同步状态 */
            this._msgLoaded = false;
            /**储存当前开启的活动数据 */
            this._openList = {};
            /**储存当前未开启的活动数据 */
            this._unOpenList = {};
        }
        Object.defineProperty(OActivityLogic, "Instance", {
            get: function () {
                if (OActivityLogic._inst == null)
                    OActivityLogic._inst = new OActivityLogic();
                return OActivityLogic._inst;
            },
            enumerable: true,
            configurable: true
        });
        /**注册类对象*/
        OActivityLogic.prototype.RegisterClass = function () {
            this.OActivityFun[OActivityEnum.eEverydayMoney] = H52D_Framework.mEverydayManager;
            this.OActivityFun[OActivityEnum.eDiamondView] = H52D_Framework.DEverydayManager;
            this.OActivityFun[OActivityEnum.eLotteryDiscount] = H52D_Framework.DiscountManager;
            this.OActivityFun[OActivityEnum.ePrivilegeDiscount] = H52D_Framework.DiscountManager;
            this.OActivityFun[OActivityEnum.eBoxDiscount] = H52D_Framework.DiscountManager;
        };
        /**初始化所有活动 */
        OActivityLogic.prototype.Initialize = function () {
            //注册类对象
            this.RegisterClass();
            //调用所有类对象
            for (var i in this.OActivityFun) {
                this.OActivityFun[i].Instance;
            }
            //每5秒更新一次活动状态
            H52D_Framework.Tick.Loop(5000, this, this.UpdateOActivityOpen);
            H52D_Framework.Tick.Loop(1000, this, this.UpdateOActivityCloseTime);
            //同步所有活动的信息
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_AllActivitys", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_AllActivitysEnd", this);
        };
        /**同步所有活动的信息 */
        OActivityLogic.prototype.C_AllActivitys = function (data) {
            if (this._msgLoaded) {
                this._openList = {};
                this._unOpenList = {};
            }
            this._msgLoaded = false;
            this.SaveOActivitysData(data[0]);
        };
        /**同步所有活动信息结束 */
        OActivityLogic.prototype.C_AllActivitysEnd = function () {
            this._msgLoaded = true;
            H52D_Framework.Event.DispatchEvent("UpdateOActivitysEntrance");
            H52D_Framework.Event.DispatchEvent("CloseOActivityView");
        };
        //添加活动
        OActivityLogic.prototype.Start = function (type, data) {
            if (type) {
                this.OActivityFun[type].Instance.Start(data);
            }
        };
        //移除活动
        OActivityLogic.prototype.OnDestroy = function (type) {
            if (type) {
                this.OActivityFun[type].Instance.OnDestroy(type);
                H52D_Framework.Event.DispatchEvent("OActivityOnDestroy", [type]);
            }
        };
        //更新活动状态
        OActivityLogic.prototype.UpdateOActivityOpen = function () {
            var curTime = Date.now() / 1000;
            //删除已结束的活动
            for (var i in this._openList) {
                var data = this._openList[i];
                for (var j = data.length - 1; j >= 0; j--) {
                    var cls = data[j];
                    if (curTime >= cls.clot) {
                        //此活动已结束
                        this.OnDestroy(cls.type);
                        delete this._openData[cls.type];
                        data.splice(j, 1);
                    }
                }
            }
            for (var i in this._openList) {
                if (this._openList[i].length == 0) {
                    delete this._openList[i];
                }
            }
            //增加已开启的活动
            for (var i in this._unOpenList) {
                var data = this._unOpenList[i];
                for (var j = data.length - 1; j >= 0; j--) {
                    var cls = data[j];
                    if (curTime >= cls.clst && curTime < cls.clot && H52D_Framework.MasterPlayer.Instance.player.Level >= cls.limitLevel) {
                        //此活动已开启
                        if (!this._openList[cls.pos]) {
                            this._openList[cls.pos] = [];
                        }
                        this._openList[cls.pos].push(cls);
                        this._openList[cls.pos].sort(function (o1, o2) { return o1.order - o2.order; });
                        this._openData[cls.type] = cls;
                        this.Start(cls.type, cls);
                        data.splice(j, 1);
                    }
                }
            }
            for (var i in this._unOpenList) {
                if (this._unOpenList[i].length == 0) {
                    delete this._unOpenList[i];
                }
            }
        };
        /**更新活动剩余时间 */
        OActivityLogic.prototype.UpdateOActivityCloseTime = function () {
            var curTime = Date.now() / 1000;
            for (var i in this._openList) {
                var data = this._openList[i];
                for (var j = data.length - 1; j >= 0; j--) {
                    var cls = data[j];
                    var svot = cls.svot;
                    var lastTime = svot - curTime;
                    cls.svotString = GetActivityLastTime(lastTime);
                }
            }
            //更新运营剩余时间通知
            H52D_Framework.Event.DispatchEvent('UpdateOActivityCloseTime');
        };
        OActivityLogic.prototype.GetActivityDataByType = function (type) {
            return this._openData[type];
        };
        Object.defineProperty(OActivityLogic.prototype, "msgLoaded", {
            get: function () {
                return this._msgLoaded;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityLogic.prototype, "openList", {
            get: function () {
                return this._openList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityLogic.prototype, "unOpenList", {
            get: function () {
                return this._unOpenList;
            },
            enumerable: true,
            configurable: true
        });
        /**保存活动数据 */
        OActivityLogic.prototype.SaveOActivitysData = function (data) {
            var cls = new OActivityData(data);
            // if (cls.pos <= 0) {
            // 	this.Start(cls.type, cls);
            // 	return;
            // }
            //当前时间戳(秒)
            var curTime = Date.now() / 1000;
            if (curTime >= cls.clst && curTime < cls.clot && H52D_Framework.MasterPlayer.Instance.player.Level >= cls.limitLevel) {
                //活动开启
                if (!this._openList[cls.pos]) {
                    this._openList[cls.pos] = [];
                }
                this._openList[cls.pos].push(cls);
                this._openList[cls.pos].sort(function (o1, o2) { return o1.order - o2.order; });
                //存已开启活动的所有数据
                this._openData[cls.type] = cls;
                this.Start(cls.type, cls);
            }
            else {
                //活动未开启
                if (!this._unOpenList[cls.pos]) {
                    this._unOpenList[cls.pos] = [];
                }
                this._unOpenList[cls.pos].push(cls);
            }
        };
        /** 请求领取奖励 */
        OActivityLogic.prototype.K_GetActivityAwardReq = function (i_sActionID, i_nIndex, i_nNum) {
            H52D_Framework.RemoteCall.Instance.Send('K_GetActivityAwardReq', i_sActionID, i_nIndex, i_nNum);
        };
        return OActivityLogic;
    }());
    H52D_Framework.OActivityLogic = OActivityLogic;
    /** 活动数据*/
    var OActivityData = /** @class */ (function () {
        function OActivityData(data) {
            this._type = data['type'];
            this._pos = data['pos'];
            this._order = data['order'];
            this._tabName = data['name'];
            this._desc = data['desc'];
            this._icon = data['icon'];
            this._limitLevel = data['level'];
            this._svot = data['svot'];
            this._svst = data['svst'];
            this._clot = data['clot'];
            this._clst = data['clst'];
            var lastTime = this._svot - Date.now() / 1000;
            this._svotString = GetActivityLastTime(lastTime);
            this._data = data;
        }
        Object.defineProperty(OActivityData.prototype, "type", {
            get: function () {
                return this._type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "pos", {
            get: function () {
                return this._pos;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "order", {
            get: function () {
                return this._order;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "tabName", {
            get: function () {
                return this._tabName;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "desc", {
            get: function () {
                return this._desc;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "limitLevel", {
            get: function () {
                return this._limitLevel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "svst", {
            get: function () {
                return this._svst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "svot", {
            get: function () {
                return this._svot;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "svotString", {
            get: function () {
                return this._svotString;
            },
            set: function (buf) {
                this._svotString = buf;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "clst", {
            get: function () {
                return this._clst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "clot", {
            get: function () {
                return this._clot;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OActivityData.prototype, "data", {
            get: function () {
                return this._data;
            },
            enumerable: true,
            configurable: true
        });
        return OActivityData;
    }());
    H52D_Framework.OActivityData = OActivityData;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=OActivityLogic.js.map
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**每日累充 数据管理 */
    var mEverydayManager = /** @class */ (function () {
        function mEverydayManager() {
            this.activon_arr = [];
            this._lingqu = {};
            this.Initialize();
        }
        Object.defineProperty(mEverydayManager, "Instance", {
            get: function () {
                if (mEverydayManager._init == null) {
                    mEverydayManager._init = new mEverydayManager();
                }
                return mEverydayManager._init;
            },
            enumerable: true,
            configurable: true
        });
        mEverydayManager.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_DayTotalChargeInfo", this); //上线同步 
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_DayTotalChargeGetAward", this);
            //this.GetArr();
        };
        // 活动开启
        mEverydayManager.prototype.Start = function (cls) {
            this.ActionData = cls.data;
        };
        //活动结束
        mEverydayManager.prototype.OnDestroy = function (_type) {
            H52D_Framework.Event.DispatchEvent("CloseOActivityView", _type);
        };
        Object.defineProperty(mEverydayManager.prototype, "ActionData", {
            /**当前的数据信息 */
            get: function () {
                return this._actionDate;
            },
            set: function (view) {
                this._actionDate = view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(mEverydayManager.prototype, "Activonarr", {
            /**活动里面的数组 */
            get: function () {
                return this.activon_arr;
            },
            set: function (view) {
                this.activon_arr = view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(mEverydayManager.prototype, "MyMoney", {
            get: function () {
                return this._mymoney;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(mEverydayManager.prototype, "Lingqu", {
            get: function () {
                return this._lingqu;
            },
            enumerable: true,
            configurable: true
        });
        /**获取活动的数组 */
        mEverydayManager.prototype.GetArr = function () {
            if (this._actionDate == null)
                return this.activon_arr;
            for (var key in this._actionDate.award) {
                this.activon_arr.push(Number(key));
            }
            return this.activon_arr;
        };
        mEverydayManager.prototype.red_contr = function () {
            if (this._actionDate == null)
                return false;
            if (H52D_Framework.MasterPlayer.Instance.player.Level < 3)
                return false;
            for (var key in this._actionDate.award) {
                var info = this._actionDate.award[key];
                var bool = info.value > this._mymoney ? false : true;
                if (this._lingqu[key] != 1 && bool) {
                    return true;
                }
            }
            return false;
        };
        /**控制特效显示 */
        mEverydayManager.prototype.eff_Contr = function () {
            if (this._actionDate == null)
                return false;
            for (var key in this._actionDate.award) {
                var info = this._actionDate.award[key];
                var bool = info.value > this._mymoney ? false : true;
                if (!this._lingqu[key] && !bool) {
                    return true;
                }
            }
            return false;
        };
        //********************************* */
        /**上线同步数据 */
        mEverydayManager.prototype.C_DayTotalChargeInfo = function (buf) {
            this._mymoney = buf[0];
            this._lingqu = buf[1];
        };
        /**请求领取奖励成功 */
        mEverydayManager.prototype.C_DayTotalChargeGetAward = function (buf) {
            var data = buf[0];
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, buf[1]]);
            this._lingqu[data] = 1;
            H52D_Framework.Event.DispatchEvent("UpdateView_everydaymoney");
        };
        return mEverydayManager;
    }());
    H52D_Framework.mEverydayManager = mEverydayManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=mEverydayManager.js.map
/**
* 打折管理器
*/
var H52D_Framework;
(function (H52D_Framework) {
    var DiscountManager = /** @class */ (function () {
        function DiscountManager() {
            //活动购买价格
            this.tPrivilegeMoney = {};
            this.tBoxMoney = {};
            //活动购买最大次数
            this.nPrivilegeMaxTims = 0;
            this.nBoxMaxTims = 0;
            //活动已购买次数
            this.tPrivilegeTims = {};
            this.tBoxTims = {};
            // public addPrivilegeTims(id) {
            // 	if (!this.tPrivilegeTims[id]) {
            // 		this.tPrivilegeTims[id] = 0
            // 	}
            // 	this.tPrivilegeTims[id]++
            // }
            // public addBoxTims(id) {
            // 	if (!this.tBoxTims[id]) {
            // 		this.tBoxTims[id] = 0
            // 	}
            // 	this.tBoxTims[id]++
            // }
            //活动结束时间
            this.tPrivilegeSvot = 0;
            this.tBoxSvot = 0;
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_UpdatePrivilegeDiscount", this);
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_UpdateBoxDiscount", this);
            this._bStartLottery = false;
            this._bStartPrivilege = false;
            this._bStartBox = false;
        }
        Object.defineProperty(DiscountManager, "Instance", {
            get: function () {
                if (DiscountManager._init == null) {
                    DiscountManager._init = new DiscountManager();
                }
                return DiscountManager._init;
            },
            enumerable: true,
            configurable: true
        });
        DiscountManager.prototype.getPrivilegeTims = function (id) {
            return this.tPrivilegeTims[id] || 0;
        };
        DiscountManager.prototype.getBoxTims = function (id) {
            return this.tBoxTims[id] || 0;
        };
        DiscountManager.prototype.C_UpdatePrivilegeDiscount = function (buf) {
            var nPrivilege = buf[0];
            var nPrivilegeDiscount = buf[1];
            this.tPrivilegeTims[nPrivilege] = nPrivilegeDiscount;
        };
        DiscountManager.prototype.C_UpdateBoxDiscount = function (buf) {
            var nID = buf[0];
            var nBoxDiscount = buf[1];
            this.tBoxTims[nID] = nBoxDiscount;
        };
        // 活动开启
        DiscountManager.prototype.Start = function (cls) {
            this.ActionData = cls.data;
            var type = cls.type;
            if (type == OActivityEnum.eLotteryDiscount) {
                this._bStartLottery = true;
                H52D_Framework.Event.DispatchEvent("ShowRedPoint", [E_OpenGrade.SHOP]);
            }
            else if (type == OActivityEnum.ePrivilegeDiscount) {
                this._bStartPrivilege = true;
                this.tPrivilegeMoney = this.ActionData.award[1].money;
                this.nPrivilegeMaxTims = this.ActionData.award[1].value;
                this.tPrivilegeSvot = cls.svot;
            }
            else if (type == OActivityEnum.eBoxDiscount) {
                this._bStartBox = true;
                this.tBoxMoney = this.ActionData.award[1].money;
                this.nBoxMaxTims = this.ActionData.award[1].value;
                this.tBoxSvot = cls.svot;
            }
        };
        //活动结束
        DiscountManager.prototype.OnDestroy = function (_type) {
            H52D_Framework.Event.DispatchEvent("CloseOActivityView", _type);
            //打折类型
            if (_type == OActivityEnum.eLotteryDiscount) {
                this._bStartLottery = false;
            }
            else if (_type == OActivityEnum.ePrivilegeDiscount) {
                this._bStartPrivilege = false;
                H52D_Framework.MainRoleLogic.Instance.SetPrivList();
                H52D_Framework.Event.DispatchEvent('privListTime');
            }
            else if (_type == OActivityEnum.eBoxDiscount) {
                this._bStartBox = false;
                H52D_Framework.Event.DispatchEvent("UpdateBoxList");
            }
            H52D_Framework.Event.DispatchEvent("ShowRedPoint", [E_OpenGrade.SHOP]);
        };
        Object.defineProperty(DiscountManager.prototype, "ActionData", {
            /**当前的数据信息 */
            get: function () {
                return this._actionDate;
            },
            set: function (view) {
                this._actionDate = view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscountManager.prototype, "LotteryMoney", {
            get: function () {
                if (this._actionDate == null)
                    return;
                return this._actionDate.award[1].money;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscountManager.prototype, "DiscountDay", {
            get: function () {
                if (this._actionDate == null)
                    return;
                return this._actionDate.award[1].value;
            },
            enumerable: true,
            configurable: true
        });
        /**是否开启了十连抽打折 */
        DiscountManager.prototype.IsStartLotteryAction = function () {
            if (this.DiscountDay == null)
                return false;
            var day = H52D_Framework.Time.serverTime.getDay();
            var b = false;
            var daySer = this.DiscountDay.split("#");
            for (var key in daySer) {
                b = daySer[key] == String(day);
                if (b)
                    break;
            }
            return this._bStartLottery && (H52D_Framework.MasterPlayer.Instance.GetEventDayProByType(EventProEnum.LotteryNum) == null || H52D_Framework.MasterPlayer.Instance.GetEventDayProByType(EventProEnum.LotteryNum) == 0) && b;
        };
        /**是否开启了特权打折 */
        DiscountManager.prototype.IsStartPrivilegeAction = function () {
            if (this.DiscountDay == null) {
                return false;
            }
            return this._bStartPrivilege;
        };
        /**是否开启了宝箱打折 */
        DiscountManager.prototype.IsStartBoxAction = function () {
            if (this.DiscountDay == null) {
                return false;
            }
            return this._bStartBox;
        };
        /**是否显示红点 宝箱 */
        DiscountManager.prototype.IsShowShopPint = function () {
            var b;
            var boxCfg = H52D_Framework.MarketConfig[2];
            for (var id in boxCfg) {
                if (this.getBoxTims(id) < this.nBoxMaxTims) {
                    b = true;
                }
            }
            return this.IsStartBoxAction() && b && this.IsStartLotteryAction();
        };
        /**是否显示红点 特权 */
        DiscountManager.prototype.IsShowRolePint = function () {
            var b;
            var cfg = H52D_Framework.PrivilegeConfig;
            for (var id in cfg) {
                if (this.getPrivilegeTims(id) < this.nPrivilegeMaxTims) {
                    b = true;
                }
            }
            return this.IsStartPrivilegeAction() && b;
        };
        return DiscountManager;
    }());
    H52D_Framework.DiscountManager = DiscountManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DiscountManager.js.map
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    /***消耗钻石  数据管理 */
    var DEverydayManager = /** @class */ (function () {
        function DEverydayManager() {
            this._lingqu = {};
            this.action_arr = [];
            this.Initialize();
        }
        Object.defineProperty(DEverydayManager, "Instance", {
            get: function () {
                if (DEverydayManager._init == null) {
                    DEverydayManager._init = new DEverydayManager();
                }
                return DEverydayManager._init;
            },
            enumerable: true,
            configurable: true
        });
        DEverydayManager.prototype.Initialize = function () {
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_DayConsumeInfo", this); // 花费了多少钻石
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_DayConsumeGetAward", this);
            this._bool = true;
        };
        Object.defineProperty(DEverydayManager.prototype, "ShowEff", {
            get: function () {
                return this._bool;
            },
            set: function (value) {
                this._bool = value;
            },
            enumerable: true,
            configurable: true
        });
        // 活动开启
        DEverydayManager.prototype.Start = function (cls) {
            this.ActionData = cls.data;
        };
        //活动结束
        DEverydayManager.prototype.OnDestroy = function (_type) {
            H52D_Framework.Event.DispatchEvent("CloseOActivityView", _type);
        };
        Object.defineProperty(DEverydayManager.prototype, "Dnum", {
            /** 消耗的钻石数 */
            get: function () {
                return this.d_num;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DEverydayManager.prototype, "ActionData", {
            /**当前的数据信息 */
            get: function () {
                return this._actionDate;
            },
            set: function (view) {
                this._actionDate = view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DEverydayManager.prototype, "ActionArr", {
            get: function () {
                return this.action_arr;
            },
            set: function (value) {
                this.action_arr = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DEverydayManager.prototype, "LingQu", {
            get: function () {
                return this._lingqu;
            },
            enumerable: true,
            configurable: true
        });
        DEverydayManager.prototype.GetInfoArr = function () {
            if (this._actionDate == null)
                return this.action_arr;
            for (var key in this._actionDate.award) {
                this.action_arr.push(Number(key));
            }
            return this.action_arr;
        };
        /**控制特效显示 */
        DEverydayManager.prototype.eff_Contr = function () {
            if (this._actionDate == null)
                return false;
            for (var key in this._actionDate.award) {
                var info = this._actionDate.award[key];
                var bool = info.value > this.d_num ? false : true;
                if (this._lingqu[key] != 1 && !bool) {
                    return true;
                }
            }
            return false;
        };
        DEverydayManager.prototype.red_contr = function () {
            if (this._actionDate == null)
                return false;
            for (var key in this._actionDate.award) {
                var info = this._actionDate.award[key];
                var bool = info.value > this.d_num ? false : true;
                if (this._lingqu[key] != 1 && bool) {
                    return true;
                }
            }
            return false;
        };
        /**************************** */
        /** 消耗了多少钻石 */
        DEverydayManager.prototype.C_DayConsumeInfo = function (buf) {
            this.d_num = buf[0];
            this._lingqu = buf[1];
        };
        /**请求领取奖励成功 */
        DEverydayManager.prototype.C_DayConsumeGetAward = function (buf) {
            var item_id = buf[0];
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, buf[1]]);
            this._lingqu[item_id] = 1;
            H52D_Framework.Event.DispatchEvent("resh_diamond");
            H52D_Framework.Event.DispatchEvent("UpdateOActivitysEntrance");
        };
        return DEverydayManager;
    }());
    H52D_Framework.DEverydayManager = DEverydayManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DEverydayManager.js.map
/**
* 成就模板
*/
var H52D_Framework;
(function (H52D_Framework) {
    var DayAchievenVo = /** @class */ (function () {
        function DayAchievenVo(eventId) {
            this._star = 1;
            this._eventId = eventId;
            this.Init();
        }
        Object.defineProperty(DayAchievenVo.prototype, "eventId", {
            /**事件ID */
            get: function () {
                return this._eventId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DayAchievenVo.prototype, "aimvalue", {
            /**达成条件值 */
            get: function () {
                return this._aimValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DayAchievenVo.prototype, "yetvalue", {
            /**已达成条件值 */
            get: function () {
                return this._yetValue;
            },
            set: function (value) {
                this._yetValue = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DayAchievenVo.prototype, "reward", {
            /**达成奖励 */
            get: function () {
                return this._reward;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DayAchievenVo.prototype, "rewardType", {
            /**达成奖励类型 */
            get: function () {
                return this._rewardType;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DayAchievenVo.prototype, "order", {
            /**类型排序 */
            get: function () {
                return this._order;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DayAchievenVo.prototype, "star", {
            /**第几星 */
            get: function () {
                return this._star;
            },
            set: function (num) {
                this._star = num;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DayAchievenVo.prototype, "maxStar", {
            /**最大星星数 */
            get: function () {
                return this._maxStar;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DayAchievenVo.prototype, "info", {
            /**成就描述 */
            get: function () {
                return this._info;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DayAchievenVo.prototype, "strPic", {
            /**成就图片路径 */
            get: function () {
                return this._strPic;
            },
            enumerable: true,
            configurable: true
        });
        DayAchievenVo.prototype.Init = function () {
            this._maxStar = H52D_Framework.GetTabLength(H52D_Framework.DayAchieveConfig[this._eventId]);
            var star = this._star > this._maxStar ? this._maxStar : this._star;
            var achieve = H52D_Framework.DayAchieveConfig[this._eventId][star];
            this._aimValue = achieve.Value;
            this._yetValue = H52D_Framework.MasterPlayer.Instance.GetEventDayProByType(this._eventId);
            achieve.Reward[1] == 0 ? this._reward = achieve.Reward[2] : this._reward = achieve.Reward[1];
            achieve.Reward[1] != 0 ? this._rewardType = H52D_Framework.BaseDefine.ItemIdGold : this._rewardType = H52D_Framework.BaseDefine.ItemIdDiamonds;
            this._order = achieve.order;
            this._info = H52D_Framework.StringInfoConfig[achieve.info].s;
            this._strPic = achieve.strPic;
        };
        DayAchievenVo.prototype.SetYetValue = function () {
            this._yetValue = H52D_Framework.MasterPlayer.Instance.GetEventProByType(this._eventId);
        };
        return DayAchievenVo;
    }());
    H52D_Framework.DayAchievenVo = DayAchievenVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DayAchievenVo.js.map
/**
* 成就模板
*/
var H52D_Framework;
(function (H52D_Framework) {
    var AchievenVo = /** @class */ (function () {
        /**
         *
         * @param eventId 事件ID
         * @param achievenType 成就类型
         */
        function AchievenVo(eventId, achievenType) {
            this._star = 1;
            this._eventId = eventId;
            this._achievenType = achievenType;
            this.Init();
        }
        Object.defineProperty(AchievenVo.prototype, "eventId", {
            /**事件ID */
            get: function () {
                return this._eventId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenVo.prototype, "achievenType", {
            /**成就类型 */
            get: function () {
                return this._achievenType;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenVo.prototype, "aimvalue", {
            /**达成条件值 */
            get: function () {
                return this._aimValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenVo.prototype, "yetvalue", {
            /**已达成条件值 */
            get: function () {
                return this._yetValue;
            },
            set: function (value) {
                this._yetValue = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenVo.prototype, "reward", {
            /**达成奖励 */
            get: function () {
                return this._reward;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenVo.prototype, "rewardType", {
            /**达成奖励类型 */
            get: function () {
                return this._rewardType;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenVo.prototype, "order", {
            /**类型排序 */
            get: function () {
                return this._order;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenVo.prototype, "star", {
            /**第几星 */
            get: function () {
                return this._star;
            },
            set: function (num) {
                this._star = num;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenVo.prototype, "maxStar", {
            /**最大星星数 */
            get: function () {
                return this._maxStar;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenVo.prototype, "info", {
            /**成就描述 */
            get: function () {
                return this._info;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenVo.prototype, "strPic", {
            /**成就图片路径 */
            get: function () {
                return this._strPic;
            },
            enumerable: true,
            configurable: true
        });
        AchievenVo.prototype.Init = function () {
            var star;
            var achieve;
            if (this._achievenType == E_AchievenType.eDay) {
                this._maxStar = H52D_Framework.GetTabLength(H52D_Framework.DayAchieveConfig[this._eventId]);
                star = this._star > this._maxStar ? this._maxStar : this._star;
                achieve = H52D_Framework.DayAchieveConfig[this._eventId][star];
                this._yetValue = H52D_Framework.MasterPlayer.Instance.GetEventDayProByType(this._eventId);
            }
            else if (this._achievenType == E_AchievenType.eAchieven) {
                this._maxStar = H52D_Framework.GetTabLength(H52D_Framework.AchieveConfig[this._eventId]);
                star = this._star > this._maxStar ? this._maxStar : this._star;
                achieve = H52D_Framework.AchieveConfig[this._eventId][star];
                this._yetValue = H52D_Framework.MasterPlayer.Instance.GetEventProByType(this._eventId);
            }
            this._aimValue = achieve.Value;
            achieve.Reward[1] == 0 ? this._reward = achieve.Reward[2] : this._reward = achieve.Reward[1];
            achieve.Reward[1] != 0 ? this._rewardType = H52D_Framework.BaseDefine.ItemIdGold : this._rewardType = H52D_Framework.BaseDefine.ItemIdDiamonds;
            this._order = achieve.order;
            this._info = H52D_Framework.StringInfoConfig[achieve.info].s;
            this._strPic = achieve.strPic;
        };
        AchievenVo.prototype.SetYetValue = function () {
            this._yetValue = H52D_Framework.MasterPlayer.Instance.GetEventProByType(this._eventId);
        };
        return AchievenVo;
    }());
    H52D_Framework.AchievenVo = AchievenVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=achievenVo.js.map
/**
* 成就管理器
*/
var H52D_Framework;
(function (H52D_Framework) {
    var AchievenManger = /** @class */ (function () {
        function AchievenManger() {
            /**每日成就任务列表 */
            this._dayMission = {};
            /**永久成就任务列表 */
            this._achievenMission = {};
            /**当前页面类型 */
            this._achievenType = E_AchievenType.eDay;
            this.LoadDayMission();
            this.LoadAchievenMission();
            H52D_Framework.Tick.Loop(5000, this, function () {
                H52D_Framework.Event.DispatchEvent("AchievenAttackNum");
            });
        }
        Object.defineProperty(AchievenManger, "Instance", {
            get: function () {
                if (AchievenManger._init == null) {
                    AchievenManger._init = new AchievenManger();
                }
                return AchievenManger._init;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenManger.prototype, "dayMission", {
            /**每日成就任务列表 */
            get: function () {
                return this._dayMission;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenManger.prototype, "achievenMission", {
            /**永久成就任务列表 */
            get: function () {
                return this._achievenMission;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AchievenManger.prototype, "achievenType", {
            /**当前页面类型 */
            get: function () {
                return this._achievenType;
            },
            /**设置当前页面类型 */
            set: function (type) {
                this._achievenType = type;
            },
            enumerable: true,
            configurable: true
        });
        AchievenManger.prototype.Initialize = function () {
            //开始同步通知
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_AllAchieveOnLine", this);
            //请求领取成就奖励回调
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqAchievementAward", this);
            //请求领取每日成就回调
            H52D_Framework.RemoteCall.Instance.RegistJXS2CProtocol("C_ReqDayAchievementAward", this);
        };
        /**上线同步成就信息 */
        AchievenManger.prototype.C_AllAchieveOnLine = function (buf) {
            var m_tAwardRecord = buf[0];
            var m_tDayAwardRecord = buf[1];
            for (var id in m_tAwardRecord) {
                var eventId = Number(id);
                var star = m_tAwardRecord[id];
                this._achievenMission[eventId].star = star;
                this._achievenMission[eventId].Init();
            }
            for (var id in m_tDayAwardRecord) {
                var eventId = Number(id);
                var star = m_tDayAwardRecord[id];
                this._dayMission[eventId].star = star;
                this._dayMission[eventId].Init();
            }
        };
        /**请求领取成就奖励回调 */
        AchievenManger.prototype.C_ReqAchievementAward = function (buf) {
            var nEventType = buf[0];
            var m_tAwardRecord = buf[1];
            var tAllAward = buf[2];
            var proType = H52D_Framework.BaseDefine.ItemShopTypePro;
            var reward = this._achievenMission[nEventType].reward;
            var rewardType = this._achievenMission[nEventType].rewardType;
            this._achievenMission[nEventType].star = m_tAwardRecord;
            this._achievenMission[nEventType].Init();
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, tAllAward]);
            H52D_Framework.OneTimer(200, Laya.Handler.create(this, function () {
                H52D_Framework.Event.DispatchEvent("UpdateAchievenDate", [E_AchievenType.eAchieven]);
            }));
        };
        /**请求领取每日成就回调 */
        AchievenManger.prototype.C_ReqDayAchievementAward = function (buf) {
            var nEventType = buf[0];
            var m_tAwardRecord = buf[1];
            var tAllAward = buf[2];
            var proType = H52D_Framework.BaseDefine.ItemShopTypePro;
            var reward = this._dayMission[nEventType].reward;
            var rewardType = this._dayMission[nEventType].rewardType;
            this._dayMission[nEventType].star = m_tAwardRecord;
            this._dayMission[nEventType].Init();
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot, tAllAward]);
            H52D_Framework.OneTimer(200, Laya.Handler.create(this, function () {
                H52D_Framework.Event.DispatchEvent("UpdateAchievenDate", [E_AchievenType.eDay]);
            }));
        };
        /**请求领取成就奖励 */
        AchievenManger.prototype.K_ReqAchievementAward = function (nEventType) {
            H52D_Framework.RemoteCall.Instance.Send('K_ReqAchievementAward', nEventType);
        };
        /**请求领取每日成就 */
        AchievenManger.prototype.K_ReqDayAchievementAward = function (nEventType) {
            H52D_Framework.RemoteCall.Instance.Send('K_ReqDayAchievementAward', nEventType);
        };
        /**加载成就任务 */
        AchievenManger.prototype.LoadAchievenMission = function () {
            /**加载永久成就任务 */
            for (var id in H52D_Framework.AchieveConfig) {
                var eventId = Number(id);
                this._achievenMission[eventId] = new H52D_Framework.AchievenVo(eventId, E_AchievenType.eAchieven);
            }
            /**加载每日目标 */
        };
        AchievenManger.prototype.LoadDayMission = function () {
            this._dayMission = {};
            /**加载每日成就任务 */
            for (var id in H52D_Framework.DayAchieveConfig) {
                var eventId = Number(id);
                this._dayMission[eventId] = new H52D_Framework.AchievenVo(eventId, E_AchievenType.eDay);
            }
            if (H52D_Framework.UIManager.Instance.IsHave("AchievementView", H52D_Framework.ViewUpRoot)) {
                H52D_Framework.Event.DispatchEvent("UpdateAchievenDate", [E_AchievenType.eDay]);
            }
        };
        /**是否显示红点 */
        AchievenManger.prototype.showPoint = function () {
            var bShow = false;
            for (var id in this._achievenMission) {
                var achieve = this._achievenMission[id];
                achieve.Init();
                if (achieve.yetvalue >= achieve.aimvalue && achieve.star <= achieve.maxStar) {
                    bShow = true;
                }
            }
            for (var id in this._dayMission) {
                var achieve = this._dayMission[id];
                achieve.Init();
                if (achieve.yetvalue >= achieve.aimvalue && achieve.star <= achieve.maxStar) {
                    bShow = true;
                }
            }
            return bShow;
        };
        AchievenManger.prototype.showPointAchieven = function () {
            var bShow = false;
            for (var id in this._achievenMission) {
                var achieve = this._achievenMission[id];
                achieve.Init();
                if (achieve.yetvalue >= achieve.aimvalue && achieve.star <= achieve.maxStar) {
                    bShow = true;
                }
            }
            return bShow;
        };
        AchievenManger.prototype.showPointDay = function () {
            var bShow = false;
            for (var id in this._dayMission) {
                var achieve = this._dayMission[id];
                achieve.Init();
                if (achieve.yetvalue >= achieve.aimvalue && achieve.star <= achieve.maxStar) {
                    bShow = true;
                }
            }
            return bShow;
        };
        return AchievenManger;
    }());
    H52D_Framework.AchievenManger = AchievenManger;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=AchievenManger.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var SHORT_SIZE = 2;
    var RemoteCall = /** @class */ (function () {
        function RemoteCall() {
            //---------------------------------------------------------断线重连------------------------------------------------------------
            /**断线重连次数 */
            this._reConnectNum = 0;
            /**断线重连最大次数 */
            this._reConnectMaxNum = 5;
            /**断线重连第一次重连间隔(毫秒)  */
            this._firstReConnectIntervalTime = 2000;
            /**断线重连间隔时间(毫秒) */
            this._reConnectIntervalTime = 5000;
            /**心跳包超时(毫秒) */
            this._heartBeatOverTime = 14000;
            /**心跳包延时(毫秒) */
            this._heartBeatDelayed = 5000;
            /**重连缓冲时间 */
            this._bufferTime = 1000;
            /**是否正在重连 */
            this._bReConnecting = false;
            this.network = new H52D_Framework.Network();
            this.RegistJXS2CProtocol("C_HeartBeat", this);
        }
        Object.defineProperty(RemoteCall, "Instance", {
            get: function () {
                if (RemoteCall._inst == null)
                    RemoteCall._inst = new RemoteCall();
                return RemoteCall._inst;
            },
            enumerable: true,
            configurable: true
        });
        RemoteCall.prototype.Connect = function (host, port, endian) {
            if (endian == null)
                endian = Laya.Byte.getSystemEndian();
            this.network.Connect(host, port, endian);
        };
        RemoteCall.prototype.Close = function () {
            this.network.Close();
        };
        RemoteCall.prototype.IsConnected = function () {
            return this.network.IsConnected();
        };
        RemoteCall.prototype.RegistJXS2CProtocol = function (protocolId, cls) {
            this.network.RegisterProtocol(protocolId, Laya.Handler.create(cls, cls[protocolId]));
        };
        RemoteCall.prototype.Send = function (i_strMsg) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var _a;
            (_a = this.network).Send.apply(_a, [i_strMsg].concat(args));
        };
        //---------------------------------------------------------------
        RemoteCall.prototype.UnPackUpTable = function (reader, tabSize) {
            if (tabSize === void 0) { tabSize = 0; }
            if (tabSize == 0) { //ushort
                tabSize = reader.getUint16();
            }
            var tabEnd = reader.pos + tabSize; //uint
            var luaTab = {};
            while (reader.pos < tabEnd) {
                var tabKV = new Array();
                this.UnPackUp(reader, tabKV);
                this.UnPackUp(reader, tabKV);
                luaTab[tabKV[0]] = tabKV[1];
            }
            return luaTab;
        };
        RemoteCall.prototype.UnPackUpString = function (reader) {
            //读取长度描述为一个字符的string.
            var length = reader.getUint8(); //byte
            var str = "";
            if (length > 0)
                str = reader.readUTFBytes(length); //byte[]
            reader.getUint8(); //byte
            return str;
        };
        RemoteCall.prototype.UnPackUpBigString = function (reader) {
            //读取长度描述为两个字符的string.
            var length = reader.getUint16(); //ushort
            var str = "";
            if (length > 0) {
                str = reader.readUTFBytes(length); //byte[]
            }
            reader.getUint8(); //byte
            return str;
        };
        RemoteCall.prototype.UnPackUp = function (reader, values) {
            var eRet = reader.getByte();
            switch (eRet) {
                case RemoteObjectType.Bool:
                    values.push(reader.getByte());
                    break;
                case RemoteObjectType.UInt8:
                    values.push(reader.getUint8());
                    break;
                case RemoteObjectType.UInt16:
                    values.push(reader.getUint16());
                    break;
                case RemoteObjectType.UInt32:
                    values.push(reader.getUint32());
                    break;
                case RemoteObjectType.Int8:
                    values.push(reader.getByte());
                    break;
                case RemoteObjectType.Int16:
                    values.push(reader.getInt16());
                    break;
                case RemoteObjectType.Int32:
                    values.push(reader.getInt32());
                    break;
                case RemoteObjectType.Float:
                    values.push(reader.getFloat32());
                    break;
                case RemoteObjectType.Double:
                    values.push(reader.getFloat64());
                    break;
                case RemoteObjectType.String:
                    values.push(this.UnPackUpString(reader));
                    break;
                case RemoteObjectType.BigString:
                    values.push(this.UnPackUpBigString(reader));
                    break;
                case RemoteObjectType.UInt64:
                    values.push(reader.getUint32());
                    reader.getUint32();
                    break;
                case RemoteObjectType.DataStream:
                    values.push(this.UnPackUpTable(reader));
                    break;
                case RemoteObjectType.Null:
                    values.push(null);
                    break;
                default:
                    H52D_Framework.Debugger.LogError("RemoteCall UnPackUp Error, type  unsupported, type:" + eRet);
                    eRet = RemoteObjectType.Invalid;
                    break;
            }
        };
        RemoteCall.prototype.UnPackUpAll = function (data) {
            var values = new Array();
            var reader = new Laya.Byte(data);
            reader.endian = Laya.Byte.getSystemEndian();
            while (reader.pos != reader.length) {
                this.UnPackUp(reader, values);
            }
            return values;
        };
        RemoteCall.prototype.PackString = function (writer, src) {
            if (src.length < 256) {
                writer.writeByte(RemoteObjectType.String);
                writer.writeByte(src.length);
                writer.writeUTFBytes(src);
                writer.writeByte(0);
            }
            else if (src.length < 1024) {
                writer.writeByte(RemoteObjectType.BigString);
                writer.writeUTFString(src);
                writer.writeByte(0);
            }
            else {
                return false;
            }
            return true;
        };
        RemoteCall.prototype.PackTable = function (writer, src) {
            var packSize = 0; //ushort
            writer.writeByte(RemoteObjectType.DataStream);
            var beignPos = writer.pos; //long
            writer.writeUint16(packSize);
            var ret = false;
            for (var key in src) {
                if (!this.PackUp(writer, key)) {
                    H52D_Framework.Debugger.LogError("Table WritePack error, WriteKey error");
                    return false;
                }
                if (!this.PackUp(writer, src[key])) {
                    H52D_Framework.Debugger.LogError("Table WritePack error, WriteValue error");
                    return false;
                }
            }
            var endPos = writer.pos; //long
            packSize = endPos - beignPos - SHORT_SIZE; //long
            if (packSize < 0 || packSize >= 0xFFFF) {
                H52D_Framework.Debugger.LogError("RemoteTable WritePack error, pack size error, length:" + packSize);
                return false;
            }
            writer.pos = beignPos;
            writer.writeUint16(packSize);
            writer.pos = endPos;
            return true;
        };
        RemoteCall.prototype.PackUp = function (writer, value) {
            if ("number" == typeof (value)) {
                writer.writeByte(RemoteObjectType.Double);
                writer.writeFloat64(value);
            }
            else if ("string" == typeof (value)) {
                this.PackString(writer, value);
            }
            else if ("boolean" == typeof (value)) {
                H52D_Framework.Debugger.LogError("发送服务端参数不能有bool值,请使用0,1代替");
                writer.writeByte(RemoteObjectType.Bool);
                if (value == true)
                    writer.writeByte(1);
                else
                    writer.writeByte(0);
            }
            else if ("object" == typeof (value)) {
                this.PackTable(writer, value);
            }
            else {
                H52D_Framework.Debugger.LogError("Call Script Has UnSuport Type");
                return false;
            }
            return true;
        };
        RemoteCall.prototype.PackUpAll = function (writer, strFunc, params) {
            //写入remotecall 包头
            var hashCode = GetBKDRHash(strFunc);
            writer.writeByte(RemoteObjectType.UInt32);
            writer.writeUint32(hashCode);
            if (params != null) {
                for (var i = 0; i < params.length; i++) {
                    if (!this.PackUp(writer, params[i]))
                        return false;
                }
            }
            return true;
        };
        RemoteCall.prototype.SendDirect = function (i_SendBuffer) {
            this.network.SendDirect(i_SendBuffer);
        };
        Object.defineProperty(RemoteCall.prototype, "bReConnecting", {
            get: function () {
                return this._bReConnecting;
            },
            enumerable: true,
            configurable: true
        });
        /**开启断线重连 */
        RemoteCall.prototype.OpenReConnect = function () {
            if (!H52D_Framework.MasterPlayer.Instance.bInGame)
                return;
            this.K_HeartBeat();
        };
        /**关闭断线重连、直接踢下线 */
        RemoteCall.prototype.CloseReConnect = function () {
            this._bReConnecting = false;
            H52D_Framework.Tick.Clear(this, this.K_HeartBeat);
            H52D_Framework.Tick.Clear(this, this.OnReConnectBuffer);
            H52D_Framework.Tick.Clear(this, this.OnReConnectStart);
            H52D_Framework.Tick.Clear(this, this.OnReConnectWait);
            // 关闭当前连接
            RemoteCall.Instance.Close();
        };
        /**发送心跳包 */
        RemoteCall.prototype.K_HeartBeat = function () {
            if (this._bReConnecting)
                return;
            RemoteCall.Instance.Send("K_HeartBeat");
            H52D_Framework.Tick.Once(this._heartBeatOverTime, this, this.OnReConnectBuffer);
        };
        /**接收心跳包 */
        RemoteCall.prototype.C_HeartBeat = function () {
            if (this._bReConnecting)
                return;
            H52D_Framework.Tick.Clear(this, this.OnReConnectBuffer);
            H52D_Framework.Tick.Clear(this, this.OnReConnectStart);
            H52D_Framework.Tick.Once(this._heartBeatDelayed, this, this.K_HeartBeat);
        };
        /**重连缓冲 */
        RemoteCall.prototype.OnReConnectBuffer = function () {
            if (this._bReConnecting)
                return;
            H52D_Framework.Tick.Once(this._bufferTime, this, this.OnReConnectStart);
        };
        /**断线重连开始 */
        RemoteCall.prototype.OnReConnectStart = function () {
            var _this = this;
            // 如果当前在loading则不走断线重连，尝试继续发送心跳包
            if (H52D_Framework.UIManager.Instance.IsHave("LoadingView", H52D_Framework.ViewUpRoot)) {
                this.K_HeartBeat();
                return;
            }
            if (this._bReConnecting)
                return;
            this._bReConnecting = true;
            // 关闭当前连接
            RemoteCall.Instance.Close();
            H52D_Framework.UIManager.Instance.CreateUI("ReConnectView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.Tick.Once(this._firstReConnectIntervalTime, this, function () {
                _this.OnReConnectWait();
                H52D_Framework.Tick.Loop(_this._reConnectIntervalTime, _this, _this.OnReConnectWait);
            });
        };
        /**尝试重连等待 */
        RemoteCall.prototype.OnReConnectWait = function () {
            this._reConnectNum++;
            if (this._reConnectNum > this._reConnectMaxNum) {
                this.OnReConnecEnd(false);
            }
            else {
                H52D_Framework.LoginLogic.Instance.OnReConnect();
            }
        };
        /**断线重连结束 */
        RemoteCall.prototype.OnReConnecEnd = function (bSuccess) {
            this._bReConnecting = false;
            this.OpenReConnect();
            this._reConnectNum = 0;
            H52D_Framework.Tick.Clear(this, this.OnReConnectWait);
            H52D_Framework.Event.DispatchEvent("Event_ReConnectEnd", [bSuccess]);
        };
        return RemoteCall;
    }());
    H52D_Framework.RemoteCall = RemoteCall;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=RemoteCall.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var ProcessInfo = /** @class */ (function () {
        function ProcessInfo(protocolId) {
            this.handlerList = new Array();
            this.protocolId = protocolId;
            this.protoBuf = new H52D_Framework.JXS2CL_RESPONE();
        }
        ProcessInfo.prototype.AddHandler = function (handler) {
            if (handler != null) {
                this.handlerList.push(handler);
            }
        };
        ProcessInfo.prototype.DelHandler = function (handler) {
            for (var i = 0; i < this.handlerList.length; i++) {
                if (handler.caller == this.handlerList[i].caller && handler.method == this.handlerList[i].method) {
                    this.handlerList[i].recover();
                    this.handlerList.splice(i, 1);
                    handler.recover();
                    return;
                }
            }
        };
        ProcessInfo.prototype.Dispatch = function () {
            this.protoBuf.data.shift();
            for (var i = 0; i < this.handlerList.length; i++) {
                var handler = this.handlerList[i];
                if (handler != null) {
                    handler.setTo(handler.caller, handler.method, [this.protoBuf.data], false);
                    handler.run();
                }
            }
        };
        return ProcessInfo;
    }());
    H52D_Framework.ProcessInfo = ProcessInfo;
    var ProtocolMap = /** @class */ (function () {
        function ProtocolMap() {
            this._processInfoDict = {};
        }
        ProtocolMap.prototype.AddProtocolHandler = function (protocolId, handler) {
            var info = this._processInfoDict[protocolId];
            if (info == null) {
                info = new ProcessInfo(protocolId);
                this._processInfoDict[protocolId] = info;
            }
            info.AddHandler(handler);
        };
        ProtocolMap.prototype.DelProtocolHandler = function (protocolId, handler) {
            var info = this._processInfoDict[protocolId];
            if (info != null && handler != null) {
                info.DelHandler(handler);
            }
        };
        ProtocolMap.prototype.GetProcessInfo = function (protocolId) {
            return this._processInfoDict[protocolId];
        };
        return ProtocolMap;
    }());
    H52D_Framework.ProtocolMap = ProtocolMap;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ProtocolMap.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var MESSAGE_HEAD_LENGTH = 2;
    var Network = /** @class */ (function () {
        function Network() {
            this._socket = null;
            this._state = SocketState.NONE;
            this._sequence = 0;
            this._protocolMap = new H52D_Framework.ProtocolMap();
            this._sendBuffer = new Laya.Byte();
            this._recvBuffer = new Laya.Byte();
            this._codeService = new H52D_Framework.CodeService();
        }
        Network.prototype.Close = function () {
            if (this._socket == null)
                return;
            try {
                if (this._socket.connected == true) {
                    this._socket.cleanSocket();
                }
                this._socket.close();
            }
            catch (e) {
                H52D_Framework.Debugger.LogError(e);
            }
            finally {
                this._socket = null;
                this._sequence = 0;
                this.SetSocketState(SocketState.CLOSE);
            }
        };
        Network.prototype.IsConnected = function () {
            return this._state == SocketState.CONNECTED;
        };
        Network.prototype.RegisterProtocol = function (protocolId, handler) {
            this._protocolMap.AddProtocolHandler(protocolId, handler);
        };
        Network.prototype.UnRegisterProtocol = function (protocolId, handler) {
            this._protocolMap.DelProtocolHandler(protocolId, handler);
        };
        Network.prototype.Connect = function (host, port, endian) {
            this._host = host;
            this._port = port;
            this._endian = endian;
            this._sendBuffer.endian = this._endian;
            this._recvBuffer.endian = this._endian;
            if (this._socket) {
                this.OnDisconnected();
            }
            this._socket = new Laya.Socket();
            this._socket.on(Laya.Event.OPEN, this, this.OnConnected);
            this._socket.on(Laya.Event.ERROR, this, this.OnConnectFail);
            this._socket.on(Laya.Event.CLOSE, this, this.OnDisconnected);
            this._socket.on(Laya.Event.MESSAGE, this, this.OnReceive);
            if (host.indexOf("ws://") != -1 || host.indexOf("wss://") != -1) {
                this._socket.connectByUrl(host + ":" + port);
            }
            else {
                this._socket.connect(host, port);
            }
            this.SetSocketState(SocketState.CONNECTING);
            H52D_Framework.Debugger.Log("开始连接到服务器!");
        };
        Network.prototype.Send = function (i_strMsg) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var _a, _b;
            if (this._socket == null) {
                return;
            }
            //消息编码
            var bt;
            if (i_strMsg.indexOf("G_") == 0) {
                bt = (_a = this._codeService).Encode.apply(_a, ["K_Ts", i_strMsg].concat(args));
            }
            else {
                bt = (_b = this._codeService).Encode.apply(_b, [i_strMsg].concat(args));
            }
            bt.length = bt.pos;
            if (bt.length > this._codeService.GetMaxSendBufferSize()) {
                H52D_Framework.Debugger.LogError("消息长度超过" + this._codeService.GetMaxSendBufferSize());
                return;
            }
            //消息包
            this._sendBuffer.clear();
            this._sendBuffer.writeUint16(bt.length + 1);
            this._sendBuffer.writeUint8(this._sequence);
            this._sendBuffer.writeArrayBuffer(bt.buffer);
            if (++this._sequence >= 256) {
                this._sequence = 0;
            }
            //发送
            if (this.IsConnected()) {
                this._socket.send(this._sendBuffer.buffer);
            }
        };
        Network.prototype.OnReceive = function (data) {
            if (!(data instanceof ArrayBuffer)) {
                H52D_Framework.Debugger.LogError("接收网络消息类型错误! 消息类型应为ArrayBuffer.");
                return;
            }
            this._recvBuffer.writeArrayBuffer(data);
            this._recvBuffer.pos = 0;
            var args = null, packageDataLen = 0;
            packageDataLen = this._recvBuffer.getInt16();
            if (packageDataLen <= 0) {
                H52D_Framework.Debugger.LogError("数据包长度<=0.");
                return;
            }
            ;
            if (packageDataLen + MESSAGE_HEAD_LENGTH > this._recvBuffer.length) {
                this._recvBuffer.pos = this._recvBuffer.length;
                return;
            }
            var _pos;
            while (true) {
                //解析数据并回调
                args = this._codeService.Decode(this._recvBuffer, packageDataLen);
                //获取消息信息
                var processInfo = this._protocolMap.GetProcessInfo(args[0]);
                if (processInfo == null) {
                    //Debugger.LogError("协议没解析, processInfo is null:" + [args].shift());
                    //return;
                }
                else {
                    //解析数据
                    processInfo.protoBuf.GetData(args);
                    //向游戏内分发消息事件
                    processInfo.Dispatch();
                }
                //判断是否可继续读取
                if (this._recvBuffer.pos + MESSAGE_HEAD_LENGTH >= this._recvBuffer.length) {
                    break;
                }
                ;
                _pos = this._recvBuffer.pos;
                packageDataLen = this._recvBuffer.getInt16();
                if (packageDataLen > this._recvBuffer.length - this._recvBuffer.pos) {
                    this._recvBuffer.pos = _pos;
                    break;
                }
            }
            if (!this._socket) {
                return;
            }
            //数据解析完毕，清理客户端数据缓冲区
            this._socket.input.clear();
            //解决本次收到的数据内容多出的部分进行缓存
            var buf = this._recvBuffer.buffer.slice(this._recvBuffer.pos, this._recvBuffer.length);
            this._recvBuffer.clear();
            this._recvBuffer.writeArrayBuffer(buf);
        };
        Network.prototype.OnConnected = function () {
            //这里有几率返回成功、但实际并未连接成功！
            if (this._socket && this._socket.connected) {
                H52D_Framework.Debugger.Log("连接服务器成功！");
                this.SetSocketState(SocketState.CONNECTED);
                H52D_Framework.LoginLogic.Instance.OnConnected();
                H52D_Framework.RemoteCall.Instance.OnReConnecEnd(true);
            }
            else {
                this.SetSocketState(SocketState.CLOSE);
            }
        };
        Network.prototype.OnConnectFail = function () {
            this.SetSocketState(SocketState.CONNECT_FAIL);
            H52D_Framework.LoginLogic.Instance.OnConnectFail();
        };
        Network.prototype.OnDisconnected = function () {
            this.SetSocketState(SocketState.CLOSE);
            H52D_Framework.LoginLogic.Instance.OnDisConnect();
            H52D_Framework.TipsLogic.Instance.OnDisConnect();
        };
        Network.prototype.SetSocketState = function (socketState) {
            var oldState = this._state;
            this._state = socketState;
            if (oldState == SocketState.CONNECTED && socketState == SocketState.CLOSE) {
                this.Close();
            }
        };
        Network.prototype.SendDirect = function (i_SendBuffer) {
            this._socket.send(i_SendBuffer);
        };
        return Network;
    }());
    H52D_Framework.Network = Network;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Network.js.map
/*
* 网络消息编解码;
* @author WH
* @desc 编解码与服务器相对应。以剑侠情缘兵器谱服务器与客户端通讯的编解码为准。
* 特殊说明：
*   1. 不允许在本类中进行任何的修改及添加上层逻辑。
*/
var H52D_Framework;
(function (H52D_Framework) {
    var CodeService = /** @class */ (function () {
        function CodeService() {
            /**发送数据的参数数组*/
            this._args = new Array();
            this._nIndex = 0;
            this._enByte = new Laya.Byte();
            this._nUse = 0;
            this._oData = [];
            this._key = null;
            this._tables = [];
            this._nMaxSendBufferSize = 4094;
        }
        /**
         * 得客户端最大能够发送的数据尺寸
         */
        CodeService.prototype.GetMaxSendBufferSize = function () {
            return this._nMaxSendBufferSize;
        };
        /**
         * 编码
         * @param args
         */
        CodeService.prototype.Encode = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._enByte.clear();
            this._enByte.endian = Laya.Byte.getSystemEndian();
            this._enByte.length = this._nMaxSendBufferSize; // 服务器最大接收的尺寸
            do {
                this._args = args;
                this._nIndex = 0;
                while (this.ExcuteEncode(this._args[this._nIndex])) {
                    if (++this._nIndex == this._args.length) {
                        break;
                    }
                }
            } while (false);
            return this._enByte;
        };
        /**@private */
        CodeService.prototype.ExcuteEncode = function (d) {
            var data = d;
            // 特殊处理，如果传undefined、NaN服务器会把此玩家踢下线
            if (data == undefined || data !== data) {
                data = null;
            }
            // outp(data, typeof data);
            if (typeof data == "object") {
                if (data == null) {
                    //nil == null
                    this._enByte.writeByte(0);
                }
                else if (data instanceof Array) {
                    //table == Array
                    /*
                        这里需要特殊处理下Array。由于服务器是c++结合Lua开发，lua中Object和Array统称为table。
                        那么为了兼容服务器的代码书写和操作，需要在这边将js的Object和Array类型进行拆分，转化为lua的形式。
                        这样服务器逻辑代码不用做任何的更改.
                    */
                    this._enByte.writeByte(16);
                    this._enByte.writeByte(0);
                    for (var idx = 0; idx < data.length; idx++) {
                        if (!this.ExcuteEncode(idx + 1)) {
                            return false;
                        }
                        ; //key
                        if (!this.ExcuteEncode(data[idx])) {
                            return false;
                        }
                        ; //value
                    }
                    this._enByte.writeByte(0);
                }
                else {
                    //table == object
                    this._enByte.writeByte(16);
                    this._enByte.writeByte(0);
                    for (var prop in data) {
                        if (!this.ExcuteEncode(prop)) { //key
                            return false;
                        }
                        if (!this.ExcuteEncode(data[prop])) { //value
                            return false;
                        }
                    }
                    this._enByte.writeByte(0);
                }
            }
            else if (typeof data == "boolean") {
                //boolean
                this._enByte.writeByte((data) ? 1 : 2);
            }
            else if (typeof data == "number") {
                //number
                if (data % 1 == 0 && data == (data << 58 >> 58)) { // 小于一个字节的数
                    this._enByte.writeByte(64 | (data & 0x3F));
                }
                else if (data % 1 == 0 && data > -32768 && data < 32767) { // short
                    this._enByte.writeByte(5);
                    this._enByte.writeInt16(data);
                }
                else if (data % 1 == 0 && data > -2147483648 && data < 2417483647) { // int
                    this._enByte.writeByte(6);
                    this._enByte.writeInt32(data);
                }
                else { // double
                    this._enByte.writeByte(4);
                    this._enByte.writeFloat64(data);
                }
            }
            else if (typeof data == "string") {
                //string
                var strlen = H52D_Framework.BitService.GetBytesLengthForString(data);
                if (strlen < 64) {
                    this._enByte.writeUint8((-128 | strlen));
                }
                else {
                    this._enByte.writeByte(9);
                    this._enByte.writeInt16(strlen);
                }
                this._enByte.writeUTFBytes(data);
            }
            else {
                return false;
            }
            return true;
        };
        /**
        * 解码
        * @param data 数据
        * @param len 数据长度
        * @return 返回解析的数据数组
        */
        CodeService.prototype.Decode = function (data, len) {
            do {
                this._nUse = 0;
                this._oData.length = 0;
                this._key = null;
                this._tables = [];
                while (this.ExcuteDecode(this._oData, data, len)) {
                    if (this._nUse >= len) {
                        break;
                    }
                    ;
                }
            } while (false);
            this._nUse = 0;
            return this._oData;
        };
        /**@private 处理解析 */
        CodeService.prototype.ExcuteDecode = function (con, data, len) {
            if (!this.Query(1, len, false)) {
                return false;
            }
            ;
            var flag = data.getByte();
            this.Query(1, len, true);
            if (flag == 0) {
                //nil == null
                this._oData.push(null);
            }
            else if (flag == 1 || flag == 2) {
                //boolean -> 1:true; 2:false
                this._oData.push((flag == 1) ? true : false);
            }
            else {
                var flag1 = flag & 0xC0;
                var flag2 = flag & 0xFC;
                if (flag1 == 128 || flag2 == 8) {
                    //string
                    var strlen = 0;
                    if (flag1 == 128) {
                        strlen = flag & 0x3F;
                    }
                    else if (flag == 9) {
                        if (this.Query(2, len, false)) {
                            return false;
                        }
                        ;
                        strlen = data.getUint16();
                        this.Query(2, len, true);
                    }
                    else {
                        return false;
                    }
                    ;
                    if (!this.Query(strlen, len, false)) {
                        return false;
                    }
                    ;
                    this._oData.push(data.getUTFBytes(strlen));
                    this.Query(strlen, len, true);
                }
                else if (flag1 == 64 || flag2 == 4) {
                    //number
                    var _number = -1;
                    if (flag1 == 64) {
                        _number = flag << 26 >> 26;
                    }
                    else if (flag == 5) {
                        if (!this.Query(2, len, false)) {
                            return false;
                        }
                        ;
                        _number = data.getInt16();
                        this.Query(2, len, true);
                    }
                    else if (flag == 6) {
                        if (!this.Query(4, len, false)) {
                            return false;
                        }
                        ;
                        _number = data.getInt32();
                        this.Query(4, len, true);
                    }
                    else if (flag == 7 || flag == 4) {
                        if (!this.Query(8, len, false)) {
                            return false;
                        }
                        ;
                        _number = data.getFloat64();
                        this.Query(8, len, true);
                    }
                    else {
                        return false;
                    }
                    this._oData.push(_number);
                }
                else if (flag2 == 16) {
                    //table == object
                    if (flag == 16) {
                        if (!this.Query(1, len, false)) {
                            return false;
                        }
                        ;
                        data.getByte();
                        this.Query(1, len, true);
                        //创建对象
                        var obj = {};
                        this._tables.push(obj);
                        while (true) {
                            // key
                            if (!this.ExcuteDecodeTable(obj, data, len, true)) {
                                return false;
                            }
                            ;
                            // 如果解析LuaTable时，当KEY值为null时，说明这个Lua-table已经解析完毕。退出
                            if (this._key == null) {
                                this._tables.pop();
                                break;
                            }
                            // value 
                            if (!this.ExcuteDecodeTable(obj, data, len, false)) {
                                return false;
                            }
                            ;
                        }
                        this._oData.push(obj);
                    }
                    else {
                        return false;
                    }
                    ;
                }
                else {
                    return false;
                }
                ;
            }
            return true;
        };
        /**@private 处理Lua-Table */
        CodeService.prototype.ExcuteDecodeTable = function (o, data, len, iskey) {
            if (!this.Query(1, len, false)) {
                return false;
            }
            ;
            var flag = data.getByte();
            this.Query(1, len, true);
            if (flag == 0) {
                //nil == null
                if (iskey) {
                    this._key = null;
                }
                else {
                    o[this._key] = null;
                }
            }
            else if (flag == 1 || flag == 2) {
                //boolean -> 1:true; 2:false
                var b = (flag == 1) ? true : false;
                if (iskey) {
                    this._key = String(b);
                }
                else {
                    o[this._key] = b;
                }
                ;
            }
            else {
                var flag1 = flag & 0xC0;
                var flag2 = flag & 0xFC;
                if (flag1 == 128 || flag2 == 8) {
                    //string
                    var strlen = 0;
                    if (flag1 == 128) {
                        strlen = flag & 0x3F;
                    }
                    else if (flag == 9) {
                        if (!this.Query(2, len, false)) {
                            return false;
                        }
                        ;
                        strlen = data.getUint16();
                        this.Query(2, len, true);
                    }
                    else {
                        return false;
                    }
                    ;
                    if (!this.Query(strlen, len, false)) {
                        return false;
                    }
                    ;
                    var __str = data.getUTFBytes(strlen);
                    if (iskey) {
                        this._key = __str;
                    }
                    else {
                        o[this._key] = __str;
                    }
                    this.Query(strlen, len, true);
                }
                else if (flag1 == 64 || flag2 == 4) {
                    //number
                    var _number = -1;
                    if (flag1 == 64) {
                        _number = flag << 26 >> 26;
                    }
                    else if (flag == 5) {
                        if (!this.Query(2, len, false)) {
                            return false;
                        }
                        ;
                        _number = data.getInt16();
                        this.Query(2, len, true);
                    }
                    else if (flag == 6) {
                        if (!this.Query(4, len, false)) {
                            return false;
                        }
                        ;
                        _number = data.getInt32();
                        this.Query(4, len, true);
                    }
                    else if (flag == 7 || flag == 4) {
                        if (!this.Query(8, len, false)) {
                            return false;
                        }
                        ;
                        _number = data.getFloat64();
                        this.Query(8, len, true);
                    }
                    else {
                        return false;
                    }
                    if (iskey) {
                        this._key = _number;
                    }
                    else {
                        o[this._key] = _number;
                    }
                }
                else if (flag2 == 16) {
                    //table == object
                    if (flag == 16) {
                        if (!this.Query(1, len, false)) {
                            return false;
                        }
                        ;
                        data.getByte();
                        this.Query(1, len, true);
                        //创建对象
                        var obj = {};
                        this._tables[this._tables.length - 1][this._key] = obj;
                        this._tables.push(obj);
                        while (true) {
                            // key
                            if (!this.ExcuteDecodeTable(obj, data, len, true)) {
                                return false;
                            }
                            ;
                            // 如果解析LuaTable时，当KEY值为null时，说明这个Lua-table已经解析完毕。退出
                            if (this._key == null) {
                                this._tables.pop();
                                break;
                            }
                            ;
                            // value
                            if (!this.ExcuteDecodeTable(obj, data, len, false)) {
                                return false;
                            }
                            ;
                        }
                    }
                    else {
                        return false;
                    }
                    ;
                }
                else {
                    return false;
                }
                ;
            }
            return true;
        };
        /**@private 解析的字节长度累加函数（用于记录和越界判断）*/
        CodeService.prototype.Query = function (num, len, b) {
            if (!b) {
                if (this._nUse + num > len) {
                    return false;
                }
                ;
                return true;
            }
            else {
                this._nUse += num;
            }
            ;
            return true;
        };
        return CodeService;
    }());
    H52D_Framework.CodeService = CodeService;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CodeService.js.map
/*
* javascript 转化操作
* @author WH
* @desc 字节，编码转换相关操作
*/
var H52D_Framework;
(function (H52D_Framework) {
    var BitService = /** @class */ (function () {
        function BitService() {
        }
        /**
         * 将unicode值转为字符串
         * @param n unicode值
         * @return 字符串
         */
        BitService.GetFromCharCode = function (n) {
            return String.fromCharCode(n);
        };
        /**
         * 获取字符串的字节长度
         * @param str 字符串
         * @return 返回字符串的字节长度
         */
        BitService.GetBytesLengthForString = function (str) {
            if (str === void 0) {
                return -1;
            }
            ;
            var len = 0;
            for (var i = 0, sz = str.length; i < sz; i++) {
                var c = str.charCodeAt(i);
                if (c <= 0x7F) {
                    len = len + 1;
                }
                else if (c <= 0x7FF) {
                    len = len + 2;
                }
                else if (c <= 0xFFFF) {
                    len = len + 3;
                }
                else {
                    len = len + 4;
                }
            }
            return len;
        };
        /**
         * ascii转unicdoe
         * @param content 字符串
         * @return unicode值
         */
        BitService.Ascii2unicode = function (content) {
            var result = '';
            for (var i = 0; i < content.length; i++)
                result += '&#' + content.charCodeAt(i) + ';';
            return result;
        };
        /**
         * unicode转ascii
         * @param content 字符串
         * @return ascii值
         */
        BitService.Unicode2ascii = function (content) {
            var code = content.match(/&#(\d+);/g);
            var result = '';
            for (var i = 0; i < code.length; i++)
                result += this.GetFromCharCode(code[i].replace(/[&#;]/g, ''));
            return result;
        };
        /**
         * string转二进制字节数组
         * @param str 字符串
         * @return 字节数组
         */
        BitService.StringToBytes = function (str) {
            var ch, st, re = [];
            for (var i = 0; i < str.length; i++) {
                ch = str.charCodeAt(i);
                st = [];
                do {
                    st.push(ch & 0xFF);
                    ch = ch >> 8;
                } while (ch);
                re = re.concat(st.reverse());
            }
            return re;
        };
        /**
         * short转二进制字节数组
         * @param n short值
         * @return 字节数组
         */
        BitService.ShortToBytes = function (n) {
            var b = [0, 0];
            b[0] = n >> 0;
            b[1] = n >> 8;
            return b;
        };
        /**
         * 二进制字节数组转short
         * @param b 字节数组
         * @return short值
         */
        BitService.BytesToShort = function (b) {
            return (b[1] << 8) | b[0] & 0xff;
        };
        /**
         * long转二进制字节数组
         * @param long long值
         * @return 字节数组
         */
        BitService.LongToBytes = function (long) {
            var byteArray = [0, 0, 0, 0, 0, 0, 0, 0];
            for (var index = 0; index < byteArray.length; index++) {
                var byte = long & 0xff;
                byteArray[index] = byte;
                long = (long - byte) / 256;
            }
            return byteArray;
        };
        /**
         * 二进制字节数组转long
         * @param b 字节数组
         * @return long值
         */
        BitService.BytesToLong = function (b) {
            var value = 0;
            for (var i = b.length - 1; i >= 0; i--) {
                value = (value * 256) + b[i];
            }
            return value;
        };
        ;
        /**
         * int转二进制字节数组
         * @param num int值
         * @return 字节数组
         */
        BitService.IntToBytes = function (num) {
            var byte = [];
            byte[0] = (num >> 24) & 0xFF;
            byte[1] = (num >> 16) & 0xFF;
            byte[2] = (num >> 8) & 0xFF;
            byte[3] = num & 0xFF;
            return byte;
        };
        /**
         * 二进制字节数组转int
         * @param b 字节数组
         * @return int值
         */
        BitService.BytesToInt = function (b) {
            var inter = b[0] & 0xFF;
            inter |= ((b[1] << 8) & 0xFF00);
            inter |= ((b[2] << 16) & 0xFF0000);
            inter |= ((b[3] << 24) & 0xFF000000);
            return inter;
        };
        return BitService;
    }());
    H52D_Framework.BitService = BitService;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BitService.js.map
var DEFAULT_LAYER = 0;
var FLOOR_LAYER = 25;
//适用Utf-8格式 byte[] 转 string
function Uint8ArrayToString(array) {
    var i, len, c;
    var char2, char3;
    var out = "";
    len = array.length;
    i = 0;
    while (i < len) {
        c = array[i++];
        switch (c >> 4) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                // 0xxxxxxx
                out += String.fromCharCode(c);
                break;
            case 12:
            case 13:
                // 110x xxxx   10xx xxxx
                char2 = array[i++];
                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                break;
            case 14:
                // 1110 xxxx  10xx xxxx  10xx xxxx
                char2 = array[i++];
                char3 = array[i++];
                out += String.fromCharCode(((c & 0x0F) << 12) |
                    ((char2 & 0x3F) << 6) |
                    ((char3 & 0x3F) << 0));
                break;
        }
    }
    return out;
}
//生成函数名hash值
function GetBKDRHash(str) {
    var seed = 131;
    var hash = 0;
    var strlen = str.length;
    for (var i = 0; i < strlen; ++i) {
        hash = (hash * seed + str.charCodeAt(i)) & 0x7FFFFFFF;
    }
    return hash;
}
function CreateUUID() {
    var s = [];
    var hexDigits = "0123456789abcdef";
    for (var i = 0; i < 36; i++)
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    s[14] = "4";
    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
    s[8] = s[13] = s[18] = s[23] = "-";
    var uuid = s.join("");
    return uuid;
}
//根据向量计算角度（带正负）
function AngleSigned(from, to) {
    //计算角度
    var a = from.x * to.x + from.y * to.y + from.z * to.z;
    var b = Math.sqrt(from.x * from.x + from.y * from.y + from.z * from.z) * Math.sqrt(to.x * to.x + to.y * to.y + to.z * to.z);
    //计算方向
    var out = new Laya.Vector3();
    Laya.Vector3.cross(from, to, out);
    var dir = (Laya.Vector3.dot(Laya.Vector3.Up, out) < 0 ? -1 : 1);
    return Math.acos(a / b) * 180.0 / Math.PI * dir;
}
/**
* 求pOut在pLine以及pLine2所连直线上的投影点
* @param pLine
* @param pLine2
* @param pOut
*/
function GetProjectivePoint(pLine, pLine2, pOut) {
    var k = GetSlope(pLine.x, pLine.z, pLine2.x, pLine2.z);
    var pProject = GetProjectivePoint1(pLine, k, pOut);
    var coefficient = (pProject.x - pLine.x) / (pLine2.x - pLine.x);
    if (coefficient < 0)
        coefficient = 0;
    if (coefficient > 1)
        coefficient = 1;
    return coefficient;
}
/**
* 求直线外一点到直线上的投影点
* @param pLine 线上一点
* @param k 斜率
* @param pOut 线外一点
*/
function GetProjectivePoint1(pLine, k, pOut) {
    var x;
    var z;
    if (k == 0) { //垂线斜率不存在情况
        x = pOut.x;
        z = pLine.z;
    }
    else {
        x = (k * pLine.x + pOut.x / k + pOut.z - pLine.z) / (1 / k + k);
        z = -1 / k * (x - pOut.x) + pOut.z;
    }
    return new Laya.Vector3(x, 0, z);
}
/**
* 通过两个点坐标计算斜率
* 已知A(x1,y1),B(x2,y2)
* 1、若x1=x2,则斜率不存在
* 2、若x1≠x2,则斜率k=[y2－y1]/[x2－x1]
* @param x1
* @param y1
* @param x2
* @param y2
* @Error 如果x1==x2,则抛出该异常
*/
function GetSlope(x1, y1, x2, y2) {
    if (x1 == x2) {
        H52D_Framework.Debugger.LogError("Slope is not existence,and div by zero!");
        return 0;
    }
    else {
        return (y2 - y1) / (x2 - x1);
    }
}
//聊天信息加密
function GetSig(roleid, msg) {
    function GetStrSum(str) {
        var sum = 0;
        for (var i = 0; i < str.length; i++) {
            sum += Number(H52D_Framework.BitService.StringToBytes(str[i]));
        }
        return sum;
    }
    function GetLength(str) {
        var realLength = 0, len = str.length, charCode = -1;
        for (var i = 0; i < len; i++) {
            charCode = str.charCodeAt(i);
            if (charCode >= 0 && charCode <= 128)
                realLength += 1;
            else
                realLength += 3;
        }
        return realLength;
    }
    ;
    var data = H52D_Framework.GameLink.Instance.urlParams;
    var strID = '0000' + data['serverid'];
    var serverid = strID.substr(strID.length - 4);
    var openid = String(data['openid']).toLowerCase() + serverid;
    var a = Math.pow((GetStrSum(openid) * GetLength(msg)), 2);
    var b = Math.pow(GetStrSum(roleid) * GetStrSum(hex_md5(msg)), 2);
    var c = Math.floor(Math.sqrt(a + b)) % 10000;
    return Math.floor(Math.sqrt(a + b)) % 10000;
}
/**
    * @brief 返回运营活动格式化时间字符串 A天B小时C分钟D秒
    * @param secs 时间戳(s)
    */
function GetActivityLastTime(secs) {
    secs = Number(secs.toString().split(".")[0]);
    var day = Math.floor(secs / 86400);
    var hour = Math.floor((secs - day * 86400) / 3600);
    var min = Math.floor((secs - day * 86400 - hour * 3600) / 60);
    var sec = secs - day * 86400 - hour * 3600 - min * 60;
    var str = '';
    if (day > 0) {
        str = (day >= 10 ? day : '0' + day) + '天' + (hour >= 10 ? hour : '0' + hour) + '时';
    }
    else if (hour > 0) {
        str = (hour >= 10 ? hour : '0' + hour) + '时' + (min >= 10 ? min : '0' + min) + '分';
    }
    else {
        str = (min >= 10 ? min : '0' + min) + '分' + (sec >= 10 ? sec : '0' + sec) + '秒';
    }
    return str;
}
//# sourceMappingURL=Util.js.map
/**网络状态类型 */
var SocketState;
(function (SocketState) {
    SocketState[SocketState["NONE"] = 0] = "NONE";
    SocketState[SocketState["CONNECTING"] = 1] = "CONNECTING";
    SocketState[SocketState["CONNECTED"] = 2] = "CONNECTED";
    SocketState[SocketState["CLOSE"] = 3] = "CLOSE";
    SocketState[SocketState["CONNECT_FAIL"] = 4] = "CONNECT_FAIL";
})(SocketState || (SocketState = {}));
/**变量类型 */
var RemoteObjectType;
(function (RemoteObjectType) {
    RemoteObjectType[RemoteObjectType["Invalid"] = 0] = "Invalid";
    RemoteObjectType[RemoteObjectType["Bool"] = 1] = "Bool";
    RemoteObjectType[RemoteObjectType["Int8"] = 2] = "Int8";
    RemoteObjectType[RemoteObjectType["Int16"] = 3] = "Int16";
    RemoteObjectType[RemoteObjectType["Int32"] = 4] = "Int32";
    RemoteObjectType[RemoteObjectType["UInt8"] = 5] = "UInt8";
    RemoteObjectType[RemoteObjectType["UInt16"] = 6] = "UInt16";
    RemoteObjectType[RemoteObjectType["UInt32"] = 7] = "UInt32";
    RemoteObjectType[RemoteObjectType["Float"] = 8] = "Float";
    RemoteObjectType[RemoteObjectType["Double"] = 9] = "Double";
    RemoteObjectType[RemoteObjectType["String"] = 10] = "String";
    RemoteObjectType[RemoteObjectType["BigString"] = 11] = "BigString";
    RemoteObjectType[RemoteObjectType["UInt64"] = 12] = "UInt64";
    RemoteObjectType[RemoteObjectType["DataStream"] = 13] = "DataStream";
    RemoteObjectType[RemoteObjectType["Null"] = 14] = "Null";
})(RemoteObjectType || (RemoteObjectType = {}));
/**Log等级类型 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["eNone"] = 0] = "eNone";
    LogLevel[LogLevel["eError"] = 1] = "eError";
    LogLevel[LogLevel["eException"] = 2] = "eException";
    LogLevel[LogLevel["eWarning"] = 3] = "eWarning";
    LogLevel[LogLevel["eLog"] = 4] = "eLog";
})(LogLevel || (LogLevel = {}));
/**主角性别类型 */
var GenderEnum;
(function (GenderEnum) {
    GenderEnum[GenderEnum["None"] = 0] = "None";
    GenderEnum[GenderEnum["Male"] = 1] = "Male";
    GenderEnum[GenderEnum["Female"] = 2] = "Female";
})(GenderEnum || (GenderEnum = {}));
/**导航类型 */
var NavMeshType;
(function (NavMeshType) {
    NavMeshType[NavMeshType["NavMesh_None"] = 0] = "NavMesh_None";
    NavMeshType[NavMeshType["NavMesh_Empty"] = 1] = "NavMesh_Empty";
    NavMeshType[NavMeshType["NavMesh_Full"] = 2] = "NavMesh_Full";
    NavMeshType[NavMeshType["NavMesh_Part"] = 3] = "NavMesh_Part";
})(NavMeshType || (NavMeshType = {}));
/**UIManager命令类型 */
var CmdType;
(function (CmdType) {
    //创建ui
    CmdType[CmdType["Create"] = 0] = "Create";
    //显示ui
    CmdType[CmdType["Show"] = 1] = "Show";
    //隐藏ui
    CmdType[CmdType["Hide"] = 2] = "Hide";
    //删除ui
    CmdType[CmdType["Destroy"] = 3] = "Destroy";
    //实例多个
    CmdType[CmdType["InstanceCmd"] = 4] = "InstanceCmd";
})(CmdType || (CmdType = {}));
/**离线状态类型 */
var OffLineEnum;
(function (OffLineEnum) {
    OffLineEnum[OffLineEnum["eUnknow"] = 0] = "eUnknow";
    OffLineEnum[OffLineEnum["eBanPlay"] = 1] = "eBanPlay";
    OffLineEnum[OffLineEnum["eRepeatLogin"] = 2] = "eRepeatLogin";
    OffLineEnum[OffLineEnum["eGMKick"] = 3] = "eGMKick";
    OffLineEnum[OffLineEnum["eServerShutdown"] = 4] = "eServerShutdown";
    OffLineEnum[OffLineEnum["eLoginFailed"] = 5] = "eLoginFailed";
    OffLineEnum[OffLineEnum["eLoginServerError"] = 6] = "eLoginServerError";
    OffLineEnum[OffLineEnum["eLoginFull"] = 7] = "eLoginFull";
    OffLineEnum[OffLineEnum["eReName"] = 8] = "eReName";
    OffLineEnum[OffLineEnum["eShield"] = 9999] = "eShield";
})(OffLineEnum || (OffLineEnum = {}));
// 事件数据类型
var EventProEnum;
(function (EventProEnum) {
    EventProEnum[EventProEnum["AddGold"] = 1] = "AddGold";
    EventProEnum[EventProEnum["AddClick"] = 2] = "AddClick";
    EventProEnum[EventProEnum["Charm"] = 3] = "Charm";
    EventProEnum[EventProEnum["ChangeName"] = 4] = "ChangeName";
    EventProEnum[EventProEnum["HeroAttack"] = 5] = "HeroAttack";
    EventProEnum[EventProEnum["PetAttack"] = 6] = "PetAttack";
    EventProEnum[EventProEnum["AddEiamond"] = 7] = "AddEiamond";
    EventProEnum[EventProEnum["AddMinute"] = 8] = "AddMinute";
    EventProEnum[EventProEnum["KillBoss"] = 9] = "KillBoss";
    EventProEnum[EventProEnum["GetHeroNum"] = 10] = "GetHeroNum";
    EventProEnum[EventProEnum["HeroDPS"] = 11] = "HeroDPS";
    EventProEnum[EventProEnum["KillMonster"] = 12] = "KillMonster";
    EventProEnum[EventProEnum["GetClickCritNum"] = 13] = "GetClickCritNum";
    EventProEnum[EventProEnum["HeroAllLevel"] = 14] = "HeroAllLevel";
    EventProEnum[EventProEnum["LevelCrossing"] = 15] = "LevelCrossing";
    EventProEnum[EventProEnum["PetAllLevel"] = 16] = "PetAllLevel";
    EventProEnum[EventProEnum["UsePlayerSkill"] = 17] = "UsePlayerSkill";
    EventProEnum[EventProEnum["JoinTopicNum"] = 18] = "JoinTopicNum";
    EventProEnum[EventProEnum["UsePrivilege"] = 19] = "UsePrivilege";
    EventProEnum[EventProEnum["GangDonateTimes"] = 20] = "GangDonateTimes";
    EventProEnum[EventProEnum["CharmWeek"] = 21] = "CharmWeek";
    EventProEnum[EventProEnum["CharLastmWeek"] = 22] = "CharLastmWeek";
    EventProEnum[EventProEnum["WinCustoms"] = 23] = "WinCustoms";
    EventProEnum[EventProEnum["LotteryNum"] = 24] = "LotteryNum";
    EventProEnum[EventProEnum["NowBossRank"] = 25] = "NowBossRank";
    EventProEnum[EventProEnum["LastBossRank"] = 26] = "LastBossRank";
    EventProEnum[EventProEnum["ShareNum"] = 27] = "ShareNum";
    EventProEnum[EventProEnum["InvitationNum"] = 28] = "InvitationNum";
})(EventProEnum || (EventProEnum = {}));
/** 缓存类型 */
var CacheTypeEnum;
(function (CacheTypeEnum) {
    CacheTypeEnum[CacheTypeEnum["derail"] = 0] = "derail";
    CacheTypeEnum[CacheTypeEnum["newGuid"] = 1] = "newGuid";
    CacheTypeEnum[CacheTypeEnum["story"] = 2] = "story";
    CacheTypeEnum[CacheTypeEnum["common"] = 3] = "common";
})(CacheTypeEnum || (CacheTypeEnum = {}));
var CacheTypeCommon;
(function (CacheTypeCommon) {
    CacheTypeCommon[CacheTypeCommon["pvpSaveCombat"] = 0] = "pvpSaveCombat";
})(CacheTypeCommon || (CacheTypeCommon = {}));
/** 缓存开关数据 */
var CacheBooleanEnum;
(function (CacheBooleanEnum) {
    CacheBooleanEnum[CacheBooleanEnum["C_boolean"] = 0] = "C_boolean";
    CacheBooleanEnum[CacheBooleanEnum["sound"] = 1] = "sound";
    CacheBooleanEnum[CacheBooleanEnum["music"] = 2] = "music";
})(CacheBooleanEnum || (CacheBooleanEnum = {}));
/** 缓存引导数据 */
var GuidBooleanEnum;
(function (GuidBooleanEnum) {
    GuidBooleanEnum[GuidBooleanEnum["FirstGuidance"] = 0] = "FirstGuidance";
    GuidBooleanEnum[GuidBooleanEnum["SecondGuidance"] = 1] = "SecondGuidance";
    GuidBooleanEnum[GuidBooleanEnum["ThirdlyGuidance"] = 2] = "ThirdlyGuidance";
    GuidBooleanEnum[GuidBooleanEnum["FourthlyGuidance"] = 3] = "FourthlyGuidance";
    GuidBooleanEnum[GuidBooleanEnum["FifthGuidance"] = 4] = "FifthGuidance";
    GuidBooleanEnum[GuidBooleanEnum["SixthGuidance"] = 5] = "SixthGuidance";
    GuidBooleanEnum[GuidBooleanEnum["SeventhGuidance_1"] = 6] = "SeventhGuidance_1";
    GuidBooleanEnum[GuidBooleanEnum["SeventhGuidance_2"] = 7] = "SeventhGuidance_2";
    GuidBooleanEnum[GuidBooleanEnum["SeventhGuidance_3"] = 8] = "SeventhGuidance_3";
    GuidBooleanEnum[GuidBooleanEnum["EighthGuidance"] = 9] = "EighthGuidance";
    GuidBooleanEnum[GuidBooleanEnum["NinthGuidance"] = 10] = "NinthGuidance";
    GuidBooleanEnum[GuidBooleanEnum["camp"] = 11] = "camp";
})(GuidBooleanEnum || (GuidBooleanEnum = {}));
var StoryEnum;
(function (StoryEnum) {
    StoryEnum[StoryEnum["story_1"] = 6] = "story_1";
    StoryEnum[StoryEnum["story_2"] = 11] = "story_2";
    StoryEnum[StoryEnum["story_3"] = 16] = "story_3";
    StoryEnum[StoryEnum["story_4"] = 21] = "story_4";
    StoryEnum[StoryEnum["story_5"] = 26] = "story_5";
    StoryEnum[StoryEnum["story_6"] = 31] = "story_6";
})(StoryEnum || (StoryEnum = {}));
/**基础物品类型 */
var ItemEnum;
(function (ItemEnum) {
    /** 元宝 */
    ItemEnum[ItemEnum["GoldIngot"] = 2] = "GoldIngot";
    /** 金币 */
    ItemEnum[ItemEnum["Gold"] = 5] = "Gold";
    /** 装备背包 */
    ItemEnum[ItemEnum["EquipPack"] = 9] = "EquipPack";
    /** 道具背包 */
    ItemEnum[ItemEnum["PropPack"] = 10] = "PropPack";
    /** 宝石背包 */
    ItemEnum[ItemEnum["GemstonePack"] = 11] = "GemstonePack";
    /** 特殊背包 */
    ItemEnum[ItemEnum["SpecialPack"] = 12] = "SpecialPack";
})(ItemEnum || (ItemEnum = {}));
var AvatarDirection;
(function (AvatarDirection) {
    AvatarDirection[AvatarDirection["right"] = 1] = "right";
    AvatarDirection[AvatarDirection["left"] = -1] = "left";
})(AvatarDirection || (AvatarDirection = {}));
var NewItemEnum;
(function (NewItemEnum) {
    NewItemEnum[NewItemEnum["eEquip"] = 0] = "eEquip";
    NewItemEnum[NewItemEnum["eProp"] = 1] = "eProp";
    NewItemEnum[NewItemEnum["eSpecial"] = 2] = "eSpecial";
    NewItemEnum[NewItemEnum["eGemstone"] = 3] = "eGemstone";
})(NewItemEnum || (NewItemEnum = {}));
var ItemPosEnum;
(function (ItemPosEnum) {
    ItemPosEnum[ItemPosEnum["ePacket"] = 0] = "ePacket";
    ItemPosEnum[ItemPosEnum["ePutOn"] = 1] = "ePutOn";
})(ItemPosEnum || (ItemPosEnum = {}));
var NewPackEnum;
(function (NewPackEnum) {
    NewPackEnum[NewPackEnum["eEquipPack"] = 0] = "eEquipPack";
    NewPackEnum[NewPackEnum["ePropPack"] = 1] = "ePropPack";
    NewPackEnum[NewPackEnum["eGemstonePack"] = 2] = "eGemstonePack";
    NewPackEnum[NewPackEnum["eSpecialPack"] = 3] = "eSpecialPack";
})(NewPackEnum || (NewPackEnum = {}));
var ItemSysOperEnum;
(function (ItemSysOperEnum) {
    ItemSysOperEnum[ItemSysOperEnum["AddItemOper"] = 0] = "AddItemOper";
    ItemSysOperEnum[ItemSysOperEnum["UpdateItemOper"] = 1] = "UpdateItemOper";
    ItemSysOperEnum[ItemSysOperEnum["DeleteItemOper"] = 2] = "DeleteItemOper";
})(ItemSysOperEnum || (ItemSysOperEnum = {}));
var ItemUpdateOper;
(function (ItemUpdateOper) {
    ItemUpdateOper[ItemUpdateOper["eAdd"] = 0] = "eAdd";
    ItemUpdateOper[ItemUpdateOper["eDel"] = 1] = "eDel";
    ItemUpdateOper[ItemUpdateOper["ePosn"] = 2] = "ePosn";
    ItemUpdateOper[ItemUpdateOper["eEquipGemid"] = 3] = "eEquipGemid";
    ItemUpdateOper[ItemUpdateOper["eEquipShengJi"] = 4] = "eEquipShengJi";
})(ItemUpdateOper || (ItemUpdateOper = {}));
var QulityColorEnum;
(function (QulityColorEnum) {
    // 1: '#E6E6E6',	//白
    // 2: '#17FF48',	//绿
    // 3: '#3EEBFF',	//蓝
    // 4: '#E83CE2',	//紫
    // 5: '#FFFF00',	//金
    // 6: '#FF9900',	//橙
    // 7: '#E41D1D',	//红
})(QulityColorEnum || (QulityColorEnum = {}));
var AstarNodeState;
(function (AstarNodeState) {
    AstarNodeState[AstarNodeState["NONE"] = 0] = "NONE";
    AstarNodeState[AstarNodeState["OPEN"] = 1] = "OPEN";
    AstarNodeState[AstarNodeState["CLOSE"] = 2] = "CLOSE";
})(AstarNodeState || (AstarNodeState = {}));
var STATE_TYPE;
(function (STATE_TYPE) {
    STATE_TYPE[STATE_TYPE["NONE"] = 0] = "NONE";
    STATE_TYPE[STATE_TYPE["IDLE"] = 1] = "IDLE";
    STATE_TYPE[STATE_TYPE["ATTACK"] = 2] = "ATTACK";
    STATE_TYPE[STATE_TYPE["HIT"] = 3] = "HIT";
    STATE_TYPE[STATE_TYPE["DIE"] = 4] = "DIE";
})(STATE_TYPE || (STATE_TYPE = {}));
var AI_COMMAND;
(function (AI_COMMAND) {
    AI_COMMAND[AI_COMMAND["NONE"] = 0] = "NONE";
})(AI_COMMAND || (AI_COMMAND = {}));
// enum FORMATION_POSITION
// {
// 	ONE = 0,
// 	TWO = 1,
// 	THREE = 2,
// 	FOUR = 3,
// 	FIVE = 4,
// 	SIX = 5,
// 	SEVEN = 6,
// 	EIGHT = 7,
// 	NINE = 8
// }
/**飘字类型 */
var SkinEnum;
(function (SkinEnum) {
    SkinEnum[SkinEnum["SkinNone"] = -1] = "SkinNone";
    /**点击伤害 */
    SkinEnum[SkinEnum["SkinTap"] = 0] = "SkinTap";
    /**神兽伤害 */
    SkinEnum[SkinEnum["SkinPet"] = 1] = "SkinPet";
    /**英雄伤害 */
    SkinEnum[SkinEnum["SkinHero"] = 2] = "SkinHero";
    /**阵营伤害 */
    SkinEnum[SkinEnum["SkinCamp"] = 3] = "SkinCamp";
    /**受击伤害 */
    SkinEnum[SkinEnum["SkinHits"] = 4] = "SkinHits";
    /**金币奖励 */
    SkinEnum[SkinEnum["RewardCoin"] = 5] = "RewardCoin";
    /**回血 */
    SkinEnum[SkinEnum["SkinHP"] = 6] = "SkinHP";
})(SkinEnum || (SkinEnum = {}));
var SPECIAL_TYPE;
(function (SPECIAL_TYPE) {
    /**活动 */
    SPECIAL_TYPE[SPECIAL_TYPE["ACTION"] = 0] = "ACTION";
    /**持续性BUff */
    SPECIAL_TYPE[SPECIAL_TYPE["SUSRAINED"] = 1] = "SUSRAINED";
})(SPECIAL_TYPE || (SPECIAL_TYPE = {}));
var eCharacter_TYPE;
(function (eCharacter_TYPE) {
    /**攻击型英雄*/
    eCharacter_TYPE[eCharacter_TYPE["AHERO"] = 0] = "AHERO";
    /**防御型英雄*/
    eCharacter_TYPE[eCharacter_TYPE["DHERO"] = 1] = "DHERO";
    eCharacter_TYPE[eCharacter_TYPE["MONSTER"] = 2] = "MONSTER";
    eCharacter_TYPE[eCharacter_TYPE["PLAYER"] = 3] = "PLAYER";
    eCharacter_TYPE[eCharacter_TYPE["PET"] = 4] = "PET";
    eCharacter_TYPE[eCharacter_TYPE["CAMP"] = 5] = "CAMP";
})(eCharacter_TYPE || (eCharacter_TYPE = {}));
var ATTRIBUTE_TYPE;
(function (ATTRIBUTE_TYPE) {
    ATTRIBUTE_TYPE[ATTRIBUTE_TYPE["HP"] = 1] = "HP";
    ATTRIBUTE_TYPE[ATTRIBUTE_TYPE["Damage"] = 2] = "Damage";
    ATTRIBUTE_TYPE[ATTRIBUTE_TYPE["ToSpeed"] = 3] = "ToSpeed";
    ATTRIBUTE_TYPE[ATTRIBUTE_TYPE["Crit"] = 4] = "Crit";
    ATTRIBUTE_TYPE[ATTRIBUTE_TYPE["CritOdds"] = 5] = "CritOdds";
})(ATTRIBUTE_TYPE || (ATTRIBUTE_TYPE = {}));
var eSKill_SHOW_TYPE;
(function (eSKill_SHOW_TYPE) {
    eSKill_SHOW_TYPE[eSKill_SHOW_TYPE["NONE"] = 0] = "NONE";
    /**有飞行物的技能 */
    eSKill_SHOW_TYPE[eSKill_SHOW_TYPE["BALLISTIC"] = 1] = "BALLISTIC";
    /**没有飞行物的技能 */
    eSKill_SHOW_TYPE[eSKill_SHOW_TYPE["NOTBALL"] = 2] = "NOTBALL";
})(eSKill_SHOW_TYPE || (eSKill_SHOW_TYPE = {}));
/**技能所属类型*/
var eBELONGS_TO;
(function (eBELONGS_TO) {
    /**普攻 */
    eBELONGS_TO[eBELONGS_TO["ATTACK"] = 0] = "ATTACK";
    /**普攻 */
    eBELONGS_TO[eBELONGS_TO["ATTACK_S"] = 1] = "ATTACK_S";
    /**队长技能 */
    eBELONGS_TO[eBELONGS_TO["BIG"] = 2] = "BIG";
    /**角色技能 */
    eBELONGS_TO[eBELONGS_TO["PLAYER"] = 3] = "PLAYER";
    eBELONGS_TO[eBELONGS_TO["PET"] = 4] = "PET";
    eBELONGS_TO[eBELONGS_TO["CAMP"] = 5] = "CAMP";
})(eBELONGS_TO || (eBELONGS_TO = {}));
/**关卡模式*/
var Customs_Mode;
(function (Customs_Mode) {
    Customs_Mode[Customs_Mode["Auto"] = 0] = "Auto";
    Customs_Mode[Customs_Mode["Loop"] = 1] = "Loop";
})(Customs_Mode || (Customs_Mode = {}));
/** 副本类型 */
var Customs_Type;
(function (Customs_Type) {
    /** 主线关卡 */
    Customs_Type[Customs_Type["Customs"] = 1] = "Customs";
    /** 世界boss */
    Customs_Type[Customs_Type["Boss"] = 2] = "Boss";
})(Customs_Type || (Customs_Type = {}));
var E_ChatChannel;
(function (E_ChatChannel) {
    E_ChatChannel[E_ChatChannel["C_WORLD"] = 0] = "C_WORLD";
    E_ChatChannel[E_ChatChannel["C_CAMP"] = 1] = "C_CAMP";
    E_ChatChannel[E_ChatChannel["C_SYSTEM"] = 2] = "C_SYSTEM";
    E_ChatChannel[E_ChatChannel["C_CNUM"] = 3] = "C_CNUM";
})(E_ChatChannel || (E_ChatChannel = {}));
//聊天频道名称
var ChateNameColor = {
    0: ["【世界】", "#8e1493"],
    1: ["【阵营】", "#0e6c6d"],
    2: ["【系统】", "#76381d"],
};
/** 功能开放列表*/
var E_OpenGrade;
(function (E_OpenGrade) {
    E_OpenGrade[E_OpenGrade["EMPTY"] = 0] = "EMPTY";
    E_OpenGrade[E_OpenGrade["ROLE"] = 1] = "ROLE";
    E_OpenGrade[E_OpenGrade["HERO"] = 2] = "HERO";
    E_OpenGrade[E_OpenGrade["PET"] = 3] = "PET";
    E_OpenGrade[E_OpenGrade["EQUIP"] = 4] = "EQUIP";
    E_OpenGrade[E_OpenGrade["RANK"] = 5] = "RANK";
    E_OpenGrade[E_OpenGrade["SHOP"] = 6] = "SHOP";
    E_OpenGrade[E_OpenGrade["MAIL"] = 7] = "MAIL";
    E_OpenGrade[E_OpenGrade["CHAT"] = 8] = "CHAT";
    E_OpenGrade[E_OpenGrade["CAMP"] = 9] = "CAMP";
    E_OpenGrade[E_OpenGrade["ACTION"] = 10] = "ACTION";
    E_OpenGrade[E_OpenGrade["TOPIC"] = 11] = "TOPIC";
    E_OpenGrade[E_OpenGrade["SEVEN"] = 12] = "SEVEN";
    E_OpenGrade[E_OpenGrade["KICKING"] = 13] = "KICKING";
    E_OpenGrade[E_OpenGrade["BOSS"] = 14] = "BOSS";
    E_OpenGrade[E_OpenGrade["FIRST"] = 15] = "FIRST";
    E_OpenGrade[E_OpenGrade["SHARE"] = 16] = "SHARE";
    E_OpenGrade[E_OpenGrade["FUND"] = 17] = "FUND";
    E_OpenGrade[E_OpenGrade["HeroPeck"] = 18] = "HeroPeck";
    E_OpenGrade[E_OpenGrade["VIP"] = 20] = "VIP";
    E_OpenGrade[E_OpenGrade["DEPLOY"] = 21] = "DEPLOY";
})(E_OpenGrade || (E_OpenGrade = {}));
/** 冒泡对话类型*/
var E_BubbleType;
(function (E_BubbleType) {
    E_BubbleType[E_BubbleType["eNone"] = -1] = "eNone";
    E_BubbleType[E_BubbleType["ePet"] = 0] = "ePet";
    E_BubbleType[E_BubbleType["eHero"] = 1] = "eHero";
    E_BubbleType[E_BubbleType["eMonster"] = 2] = "eMonster";
    E_BubbleType[E_BubbleType["eSkill"] = 3] = "eSkill";
})(E_BubbleType || (E_BubbleType = {}));
/** 法器类型*/
var E_EquipType;
(function (E_EquipType) {
    E_EquipType[E_EquipType["eNone"] = 0] = "eNone";
    E_EquipType[E_EquipType["eGlove"] = 1] = "eGlove";
    E_EquipType[E_EquipType["eRing"] = 2] = "eRing";
    E_EquipType[E_EquipType["eScroll"] = 3] = "eScroll";
    E_EquipType[E_EquipType["eContainer"] = 4] = "eContainer";
    E_EquipType[E_EquipType["eSoul"] = 5] = "eSoul"; //灵
})(E_EquipType || (E_EquipType = {}));
/** 成就页面类型*/
var E_AchievenType;
(function (E_AchievenType) {
    E_AchievenType[E_AchievenType["eNone"] = 0] = "eNone";
    E_AchievenType[E_AchievenType["eDay"] = 1] = "eDay";
    E_AchievenType[E_AchievenType["eAchieven"] = 2] = "eAchieven";
})(E_AchievenType || (E_AchievenType = {}));
//# sourceMappingURL=GameDefine.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /** 自定义事件消息 */
    var EventDefine = /** @class */ (function () {
        function EventDefine() {
        }
        /** 更新加载 */
        EventDefine.UPDATE_LOADING_SLIDER_VALUE = "UPDATE_LOADING_SLIDER_VALUE";
        /** 游戏开始 */
        EventDefine.GAME_START = "GAME_START";
        /** 显示场景 */
        EventDefine.SHOW_SCENE = "SHOW_SCENE";
        /** 关闭场景 */
        EventDefine.CLOSE_SCENE = "CLOSE_SCENE";
        /** 开始战斗 */
        EventDefine.BEGIN_FIRE = "BEGIN_FIRE";
        /** 玩家名字更新 */
        EventDefine.PLAYER_NAME_UPDATE = "PLAYER_NAME_UPDATE";
        /** 玩家头像更新 */
        EventDefine.PLAYER_HEAD_UPDATE = "PLAYER_HEAD_UPDATE";
        /** 主界面点击事件 */
        EventDefine.MAIN_VIEW_CLICK = "MAIN_VIEW_CLICK";
        /** 血量更新事件 */
        EventDefine.BLOOD_SILDER_UPDATE = "BLOOD_SILDER_UPDATE";
        /** 关卡_当前关卡 */
        EventDefine.CUSTOMS_CURRENT = "CUSTOMS_CURRENT";
        /** 关卡_怪物信息 */
        EventDefine.CUSTOMS_BASEINFOR = "CUSTOMS_BASEINFOR";
        /** 关卡_掉血量 */
        EventDefine.CUSTOMS_DROP_BLOOD = "CUSTOMS_DROP_BLOOD";
        /** 修改英雄伤害*/
        EventDefine.MODIFY_HERO_DAMAGE = "MODIFY_HERO_DAMAGE";
        /** 释放技能 */
        EventDefine.SPELL_SKILL = "SPELL_SKILL";
        /** 技能解锁 */
        EventDefine.SKILL_UNLOKE = "SKILL_UNLOKE";
        /** UI面板，全开或半开 */
        EventDefine.BOTTOM_SET_PANEL = "BOTTOM_SET_PANEL";
        /** UI面板，全开或半开 */
        EventDefine.BOTTOM_GET_PANEL = "BOTTOM_GET_PANEL";
        /** 增加金币 */
        EventDefine.ADD_GOLD = "ADD_GOLD";
        /** 增加钻石 */
        EventDefine.ADD_DIAMONDS = "ADD_DIAMONDS";
        /**英雄伤害DPS显示 */
        EventDefine.HERO_DPS = "HERO_DPS";
        /**神宠伤害DPS显示 */
        EventDefine.PET_DPS = "PET_DPS";
        /**阵营伤害DPS显示 */
        EventDefine.CAMP_DPS = "CAMP_DPS";
        /**所有伤害DPS显示 */
        EventDefine.ALL_DPS = "ALL_DPS";
        /**将金币加入到主界面ClickBg下面 */
        EventDefine.DROP_ADD_CHILD = "COIN_Add_CHILD";
        /**怪物死亡 */
        EventDefine.MONSTER_DIE = "MONSTER_DIE";
        EventDefine.MONSTER_DIE_N = "MONSTER_DIE_N";
        /**点击次数 */
        EventDefine.TAP_NUMBER = "TAP_NUMBER";
        /**队长技能 */
        EventDefine.CAPATIAN_SKILL = "CAPATIAN_SKILL";
        /**升级或者进阶 修改战斗属性 */
        EventDefine.MODIFYATTR = "MODIFYATTR";
        /**特权系统 */
        EventDefine.PRIVILEGE = "PRIVILEGE";
        /**特权删除 */
        EventDefine.PRIVILEGE_DELETE = "PRIVILEGE_DELETE";
        /**刷新固定属性*/
        EventDefine.REFFIXEDATTR = "REFFIXEDATTR";
        /**切换闯关模式*/
        EventDefine.BOSSHANDER = "BOSSHANDER";
        return EventDefine;
    }());
    H52D_Framework.EventDefine = EventDefine;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=EventDefine.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /** 自定义事件消息 */
    var EffectDefine = /** @class */ (function () {
        function EffectDefine() {
        }
        /** 当前关卡小怪头像的特效 */
        EffectDefine.guanqia = "res/effect/effect_ui_guanqia/effect_ui_guanqia.sk";
        /** 当前关卡图标特效 */
        EffectDefine.anniu = "res/effect/effect_ui_anniu/effect_ui_anniu.sk";
        /** 当前关卡图标特效 */
        EffectDefine.tubiao = "res/effect/effect_ui_tubiao/effect_ui_tubiao.sk";
        /** boss头像的特效 */
        // public static readonly touxiang: string = "res/effect/effect_ui_touxiang/effect_ui_touxiang.sk";
        EffectDefine.touxiang = "res/player/img-xiaogui/xiaogui.sk";
        /** 拾取金币以后播放的金币特效 */
        EffectDefine.jinbi = "res/effect/effect_ui_jinbi/effect_ui_jinbi.sk";
        /** 角色技能CD完毕特效 */
        EffectDefine.jncd = "res/effect/effect_ui_cd02/effect_ui_cd02.sk";
        /** 队长技能CD完毕特效 */
        EffectDefine.jndz = "res/effect/effect_ui_cd/effect_ui_cd.sk";
        /** 新增英雄施放队长技时场景内队长英雄身上的特效 */
        EffectDefine.shifa = "res/effect/effect_state_shifa/effect_state_shifa.sk";
        return EffectDefine;
    }());
    H52D_Framework.EffectDefine = EffectDefine;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=EffectDefine.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var _a;
    /** 英雄战位 */
    H52D_Framework.HeroLocal = [
        [250, 670], [290, 730], [250, 790],
        [150, 670], [190, 730], [150, 790],
        [50, 670], [90, 730], [50, 790] //后排
    ];
    /** 怪物战位 */
    H52D_Framework.MonsterLocal = [
        [480, 670], [440, 730], [480, 790],
        [580, 670], [540, 730], [580, 790],
        [680, 670], [640, 730], [680, 790] //后排
    ];
    H52D_Framework.OSkillPoint = [
        [0, -80],
        [0, -40],
        [20, -50],
        [10, -10],
        [110, -40]
    ];
    H52D_Framework.POSkillPoint = [
        [0, -80],
        [0, -40],
        [-20, -50],
        [-10, -10],
        [-110, -40]
    ];
    H52D_Framework.NSkillPoint = [
        [50, -30],
        [45, -60],
        [50, -40],
        [0, -200],
    ];
    H52D_Framework.PSkillPoint = [
        [-50, -30],
        [-45, -60],
        [-50, -40],
        [0, -200],
    ];
    H52D_Framework.HeroSkillPoint = [
        [0, -120],
        [0, -50],
        [0, -35],
        [-35, -80],
        [0, -140],
        [-30, 0]
    ];
    H52D_Framework.MonsterSkillPoint = [
        [0, -300],
        [30, -200],
        [20, -50],
        [0, 0],
        [0, -140],
        [-270, -120]
    ];
    H52D_Framework.HeroBuffPoint = [
        [0, -120],
        [0, -50],
        [0, -35],
        [-35, -80] //头后
    ];
    H52D_Framework.PHeroBuffPoint = [
        [0, -140],
        [0, -50],
        [0, -35],
        [35, -80] //头后
    ];
    H52D_Framework.MonsterBuffPoint = [
        [0, -300],
        [0, -170],
        [0, 0],
        [-50, -50]
    ];
    H52D_Framework.BossBuffPoint = [
        [0, -400],
        [0, -170],
        [0, 0],
        [-50, -50]
    ];
    /**不同场景 神兽的挂点 */
    H52D_Framework.PetPoint = [
        [0, 0],
        [80, 568],
        [80, 530],
        [80, 562],
        [60, 476],
        [80, 548],
        [80, 430],
        [80, 540],
    ];
    /**不同场景 神兽的挂点 */
    H52D_Framework.EPetPoint = [
        [0, 0],
        [680, 568],
        [680, 480],
        [680, 562],
        [680, 476],
        [680, 548],
        [680, 430],
        [680, 540],
    ];
    //Temp
    H52D_Framework.EnemySkillPoint = [];
    H52D_Framework.SkillName = (_a = {},
        _a[1001] = "lyzd.png",
        _a[1002] = "pmz.png",
        _a[1003] = "cdzd.png",
        _a[1004] = "cgll.png",
        _a[1005] = "dhy.png",
        _a[1006] = "zz.png",
        _a[1007] = "lx.png",
        _a[1008] = "yb.png",
        _a[1009] = "lylj.png",
        _a[1010] = "lb.png",
        _a[1011] = "sp.png",
        _a[1012] = "bszd.png",
        _a[1013] = "zjss.png",
        _a[1014] = "hy.png",
        _a[1015] = "xl.png",
        _a[1016] = "bdz.png",
        _a[1017] = "bp.png",
        _a[1018] = "llsd.png",
        _a[1019] = "lc.png",
        _a[1020] = "dh.png",
        _a[1021] = "jgp.png",
        _a[1022] = "zdlj.png",
        _a[1023] = "cf.png",
        _a[1024] = "nld.png",
        _a[1025] = "yz.png",
        _a[1026] = "sw.png",
        _a[1027] = "fy.png",
        _a);
    //场景音乐
    H52D_Framework.soundScene = [
        "res/sound/background_sound2.mp3",
        "res/sound/background_sound3.mp3",
        "res/sound/background_sound4.mp3"
        //"res/sound/background_sound.mp3",
    ];
    /** 得地面高度 */
    function FloorHeight() {
        return (H52D_Framework.HeroLocal[7][1] + 50);
    }
    H52D_Framework.FloorHeight = FloorHeight;
    /** 金币飞回的位置 */
    H52D_Framework.CoinFlyBackPos = [];
    /**
     *  基础信息配置类
     * @author zhangyusong
     */
    var BaseDefine = /** @class */ (function () {
        function BaseDefine() {
        }
        /** 道具资源_金币 */
        BaseDefine.ItemIdGold = 1;
        /** 道具资源_钻石 */
        BaseDefine.ItemIdDiamonds = 2;
        /** 道具资源_经验 */
        BaseDefine.ItemIdExperience = 3;
        /** 道具资源_蓝钻 */
        BaseDefine.ItemIdBlueDrills = 4;
        /** 道具资源_装备晶石 */
        BaseDefine.ItemIdEquipDrills = 2201;
        /** 道具类型_资源 */
        BaseDefine.ItemTypeResource = 1;
        /** 道具类型_材料 */
        BaseDefine.ItemTypeMaterials = 2;
        /** 道具类型_可使用 */
        BaseDefine.ItemTypeCanUes = 3;
        /** 道具子类型_英雄卡牌 */
        BaseDefine.ItemSonTypeUesHero = 21;
        /** 道具子类型_使用后获得奖励 */
        BaseDefine.ItemSonTypeUesAward = 31;
        /** 道具子类型_使用后获得Buff */
        BaseDefine.ItemSonTypeUesBuff = 32;
        /** 商城出售内容_出售类型 */
        BaseDefine.ItemSellContentType = 1;
        /** 商城出售内容_id */
        BaseDefine.ItemSellContentId = 2;
        /** 商城出售内容_数量 */
        BaseDefine.ItemNumSellContent = 3;
        /** 商城售卖_货币Id */
        BaseDefine.ItemIdCurrency = 1;
        /** 商城售卖_价格 */
        BaseDefine.ItemIdPrice = 2;
        /** 商品类型_道具 */
        BaseDefine.ItemTypePro = 1;
        /** 商品类型_装备 */
        BaseDefine.ItemTypeEquip = 2;
        /** 商品类型_英雄 */
        BaseDefine.ItemTypeHero = 3;
        /** 商品类型_神兽 */
        BaseDefine.ItemTypePet = 4;
        /** 商城类型_道具 */
        BaseDefine.ItemShopTypePro = 1;
        /** 商城类型_宝箱 */
        BaseDefine.ItemShopTypeEquipment = 2;
        /** 奖励判断类型_直接发放奖励 */
        BaseDefine.RewardTypeDirect = 0;
        /** 奖励判断类型_按权重随机出其中一个 */
        BaseDefine.RewardTypeRandom = 1;
        /** 奖励判断类型_按概率全部判断是否掉落 */
        BaseDefine.RewardTypeProbability = 2;
        /** 奖励类型 */
        BaseDefine.ItemRewardType = 1;
        /** 奖励对应id */
        BaseDefine.ItemRewardId = 2;
        /** 奖励数量 */
        BaseDefine.ItemRewardNum = 3;
        /** 品质颜色列表  字体亮色*/
        BaseDefine.LabelColor = {
            1: "#ffffff",
            2: "#c5ffa5",
            3: "#a5d8ff",
            4: "#efa5ff",
            5: "#ffcfa5",
            6: "#ffa5a7",
        };
        /** 颜色列表 邮件  字体暗色*/
        BaseDefine.LabelColor1 = {
            1: "#ffffff",
            2: "#105709",
            3: "#0f2b79",
            4: "#6e0872",
            5: "#593c04",
            6: "#741310",
        };
        /** 品质背景列表  头像框*/
        BaseDefine.QualityList = {
            3: "ui_hero/img-lanpinzhikuang.png",
            4: "ui_hero/img-zipinzhikuang.png",
            5: "ui_hero/img-chengpinzhikuang.png",
            6: "ui_hero/img-hongpinzhikuang.png",
        };
        /**英雄详情 背景颜色 */
        BaseDefine.HeroAllinfo_bg = {
            3: "ui_hero/img-yingxiong-zhanshi-lan.png",
            4: "ui_hero/img-yingxiong-zhanshi-zi.png",
            5: "ui_hero/img-yingxiong-zhanshi-huang.png",
            6: "ui_hero/img-yingxiong-zhanshi-hong.png",
        };
        /**神兽名字的颜色 */
        BaseDefine.PetColor_label = {
            1: "#ffffff",
            2: "#c5ffa5",
            3: "#a9c3fe",
            4: "#e69bff",
            5: "#ffba7b",
            6: "#ff9595",
        };
        /**神兽背景颜色 */
        BaseDefine.PetColor_img = {
            2: "",
            3: "ui_hero/img-yingxiong-zhanshi-lan.png",
            4: "ui_hero/img-yingxiong-zhanshi-zi.png",
            5: "ui_hero/img-yingxiong-zhanshi-huang.png",
            6: "ui_hero/img-yingxiong-zhanshi-hong.png",
        };
        /** 品质背景列表*/
        BaseDefine.HeroQualityList = {
            3: "ui_hero/img-lanka.png",
            4: "ui_hero/img-zika.png",
            5: "ui_hero/img-chengka.png",
            6: "ui_hero/img-hongka.png",
        };
        BaseDefine.HeroQualityStr = {
            3: "蓝色",
            4: "紫色",
            5: "橙色",
            6: "红色",
        };
        /** 英雄类型图标列表*/
        BaseDefine.HeroTypeIcon = {
            1: "ui_hero/icon-renwu-leixing-gongji.png",
            2: "ui_hero/icon-renwu-leixing-fangyu.png",
        };
        /** 英雄类型*/
        BaseDefine.HeroTypeStr = {
            1: "攻击型",
            2: "防御型",
        };
        /**英雄头像上的字 */
        BaseDefine.HeroWar_pos = {
            1: "ui_hero/img-yingxiong-zhiwei-duizhang.png",
            2: "ui_hero/img-yingxiong-zhiwei-zhen.png",
        };
        /**英雄卡牌品质信息 */
        BaseDefine.Hero_Rare = {
            3: "普通",
            4: "稀有",
            5: "传奇",
            6: "神话",
        };
        BaseDefine.ButtonStr = {
            1: "角色",
            2: "英雄",
            3: "神兽",
            4: "装备",
            5: "排行",
            6: "商城",
            7: "邮件",
            8: "聊天",
            9: "阵营",
        };
        BaseDefine.StartGuidanceEvent = {
            1: "FirstGuidance",
            2: "SecondGuidance",
            3: "ThirdlyGuidance",
            4: "FourthlyGuidance",
            5: "FifthGuidance",
            6: "SixthGuidance",
            7: "SeventhGuidance",
            8: "EighthGuidance",
            9: "NinthGuidance",
            10: "AideGuidance",
        };
        BaseDefine.bStartGuidance = {
            1: "0",
            2: "0",
            3: "0",
            4: "0",
            5: "0",
            6: "0",
            7: "0",
            8: "0",
            9: "0",
        };
        /**阵营信息字体颜色 */
        BaseDefine.CampInfo_Color = {
            1: "#bfc6ff",
            2: "#ffa5a7",
            3: "#e1aaf3",
            4: "#ffcdb1",
            5: "#fefeff",
        };
        /**阵营信息内容 */
        BaseDefine.CampInfo_text = {
            1: 6020,
            2: 6022,
            3: 6021,
        };
        /**时空法器品质 */
        BaseDefine.EquipQualityStr = {
            1: "普通",
            3: "五福",
            4: "稀有",
            5: "传奇",
        };
        /**时空法器品质颜色 */
        BaseDefine.EquipQualityColor = {
            1: "#ffffff",
            3: "#a5d8ff",
            4: "#efa5ff",
            5: "#ffcfa5",
        };
        BaseDefine.EquipBgColor = {
            1: "",
            3: "ui_hero/img-lanpinzhikuang.png",
            4: "ui_hero/img-zipinzhikuang.png",
            5: "ui_hero/img-chengpinzhikuang.png",
        };
        /**道具底图颜色 */
        BaseDefine.ItemBgColor = {
            3: "#3d4597",
            4: "#52247e",
            5: "#834a24",
            6: "#892020",
            7: "#3b4461",
        };
        return BaseDefine;
    }());
    H52D_Framework.BaseDefine = BaseDefine;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BaseDefine.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var ConfigTab = /** @class */ (function () {
        function ConfigTab(filename, bytes) {
            this._keyNums = new Array();
            this._filename = filename;
            if (this.Parse(bytes))
                ConfigTab[filename] = this;
        }
        ConfigTab.prototype.GetValueToString = function (columnName, keys) {
            if (!(keys instanceof Array)) {
                keys = [keys];
            }
            var key = "";
            for (var i = 0; i < keys.length; i++) {
                if (i == 0) {
                    key += keys[i];
                }
                else {
                    key += ("_" + keys[i]);
                }
            }
            var row = this[key];
            if (row == null) {
                H52D_Framework.Debugger.LogError("key值错误");
                return "-1";
            }
            return row[columnName];
        };
        ConfigTab.prototype.GetValueToNumber = function (columnName, keys) {
            return Number(this.GetValueToString(columnName, keys));
        };
        ConfigTab.prototype.Parse = function (bytes) {
            var fileData;
            if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF)
                fileData = Uint8ArrayToString(bytes.subarray(3, bytes.length - 1));
            else
                fileData = Uint8ArrayToString(bytes);
            var lines = fileData.split('\n');
            if (lines == null || lines.length == 0) {
                //Debugger.LogError("配置表 " + this._filename + " 解析失败: 没有内容!");
                return false;
            }
            var splittedLine = lines[0].split('\t');
            if (splittedLine.length > 0) {
                var lastColumn = splittedLine[splittedLine.length - 1];
                if (lastColumn.charAt(lastColumn.length - 1) == '\r')
                    splittedLine[splittedLine.length - 1] = lastColumn.substring(0, lastColumn.length - 2);
            }
            this._columnNames = splittedLine;
            var columnSet = new Array();
            for (var j = 0; j < this._columnNames.length; ++j) {
                if (this._columnNames[j] == null || this._columnNames[j] == "") {
                    //Debugger.LogError("配置表 " + this._filename + " 解析失败: 第" + j + "列列名为空!");
                    //return;
                }
                if (columnSet[this._columnNames[j]]) {
                    //Debugger.LogError("配置表 " + this._filename + " 解析失败: 重复列名 " + this._columnNames[j]);
                    //return;
                }
                if (this._columnNames[j][0] == '@') {
                    this._columnNames[j] = this._columnNames[j].substring(1);
                    this._keyNums.push(j);
                }
                columnSet[this._columnNames[j]] = true;
            }
            if (this._keyNums.length == 0)
                this._keyNums.push(0);
            for (var i = 1; i < lines.length; ++i) {
                if (lines[i] == null || lines[i] == "" || lines[i][0] == '#')
                    continue;
                splittedLine = lines[i].split('\t');
                if (splittedLine.length > 0) {
                    var lastColumn = splittedLine[splittedLine.length - 1];
                    if (lastColumn.charAt(lastColumn.length - 1) == '\r')
                        splittedLine[splittedLine.length - 1] = lastColumn.substring(0, lastColumn.length - 2);
                }
                var key = "";
                for (var _i = 0, _a = this._keyNums; _i < _a.length; _i++) {
                    var keyNum = _a[_i];
                    key += splittedLine[keyNum] + "_";
                }
                key = key.substring(0, key.length - 1);
                if (this[key] != null) {
                    //Debugger.LogError("配置表 " + this._filename + " 解析失败: 表存在重复的key行,第" + i + "行!");
                    return false;
                }
                var row = {};
                this[key] = row;
                for (var j = 0; j < this._columnNames.length; j++) {
                    if (this._columnNames[j] == null || this._columnNames[j] == "")
                        continue;
                    row[this._columnNames[j]] = splittedLine[j];
                }
            }
            return true;
        };
        return ConfigTab;
    }());
    H52D_Framework.ConfigTab = ConfigTab;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ConfigTab.js.map
/**
 * json配置文件管理器
 */
var H52D_Framework;
(function (H52D_Framework) {
    var ConfigManager = /** @class */ (function () {
        function ConfigManager(callBack) {
            var _this = this;
            // 中文encode过的文件，解码后存到一个table里
            this._configDecode = {};
            // 加载到第几个压缩包
            this._configIndex = 0;
            // 加载文字
            this._configTxt = {
                "1": "正在下载游戏资源，请稍后",
                "2": "正在下载游戏资源，请稍后",
                "3": "正在下载游戏资源，请稍后",
                "4": "正在下载游戏资源，请稍后",
                "5": "正在下载游戏资源，请稍后",
                "6": "正在下载游戏资源，请稍后",
                "7": "正在下载游戏资源，请稍后",
                "8": "正在下载游戏资源，请稍后",
                "9": "正在下载游戏资源，请稍后",
                "10": "正在下载游戏资源，请稍后"
            };
            this.Initialize(Laya.Handler.create(this, function () {
                _this._gameConfig = new H52D_Framework.GameConfig(_this);
                callBack.run();
            }));
        }
        ConfigManager.prototype.do = function (includeData, callBack) {
            ++this._configIndex;
            var res = Laya.loader.getRes("res/config/config" + this._configIndex + ".zip");
            var inflate = new Zlib.Inflate(new Uint8Array(res));
            var inbuffer = inflate.decompress();
            var bufLen = inbuffer.byteLength;
            var layaBuf = new Laya.Byte(inbuffer.buffer);
            layaBuf.pos = 0;
            for (var k in includeData["filesize" + this._configIndex]) {
                // 截取文件名
                var fileName = k.replace("res/config/", "");
                var begin = includeData["filesize" + this._configIndex][k][0];
                var end = includeData["filesize" + this._configIndex][k][1];
                var cfg = layaBuf.getUTFBytes(end - begin + 1);
                this._configDecode[k] = JSON.parse(cfg);
                layaBuf.pos = end + 1;
            }
            // 每次解压进度前进6%
            var str = H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.UPDATE_LOADING_SLIDER_VALUE, [0.2 + this._configIndex / 10 * 0.3, this._configTxt[this._configIndex]]);
            if (this._configIndex < 10) {
                Laya.timer.frameOnce(1, this, this.do, [includeData, callBack]);
            }
            else {
                this.Loaded();
                if (callBack != null) {
                    callBack.runWith(this);
                }
            }
        };
        ConfigManager.prototype.Initialize = function (callBack) {
            var _this = this;
            // 检查数据表压缩包是否存在（打包情况下使用）
            if (Laya.ResourceVersion.manifest && Laya.ResourceVersion.manifest["res/config/config1.zip"]) {
                var oData = [
                    "res/config/include.json",
                    "res/config/config1.zip",
                    "res/config/config2.zip",
                    "res/config/config3.zip",
                    "res/config/config4.zip",
                    "res/config/config5.zip",
                    "res/config/config6.zip",
                    "res/config/config7.zip",
                    "res/config/config8.zip",
                    "res/config/config9.zip",
                    "res/config/config10.zip",
                ];
                H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.UPDATE_LOADING_SLIDER_VALUE, [0.1, this._configTxt[1]]);
                Laya.loader.load(oData, Laya.Handler.create(this, function () {
                    // 先读include.json
                    var includeRes = Laya.loader.getRes("res/config/include.json");
                    var includeBuf = new Laya.Byte(includeRes);
                    includeBuf.pos = 0;
                    var includeData = JSON.parse(includeBuf.getUTFBytes());
                    H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.UPDATE_LOADING_SLIDER_VALUE, [0.2]);
                    // 解压config.zip
                    _this.do(includeData, callBack);
                }), null, Laya.Loader.BUFFER);
            }
            else {
                Laya.loader.load("res/config/include.json", Laya.Handler.create(this, function () {
                    //解析配置
                    var res = Laya.loader.getRes("res/config/include.json");
                    if (!res || res.data.length == 0) {
                        return;
                    }
                    // 判断加载模式
                    Laya.loader.load(res.data, Laya.Handler.create(_this, function () {
                        _this.Loaded();
                        if (callBack != null) {
                            callBack.runWith(_this);
                        }
                    }));
                }));
            }
        };
        //加载其他配置表文件
        ConfigManager.prototype.Loaded = function () {
            this._configIndex = 0;
            // 解码json中的encode过的json文件（微信小游戏打包时试用）
            // if (includedata.EncodeFile) {
            //     for (let i = 0; i < includedata.EncodeFile.length; i++) {
            //         let res = Laya.loader.getRes(includedata.EncodeFile[i]);
            //         let strJson: string = decodeURIComponent(res);
            //         let strFileName: string = includedata.EncodeFile[i];
            //         strFileName = strFileName.replace(".txt", ".json");
            //         this._configDecode[strFileName] = JSON.parse(strJson);
            //     }
            // }
        };
        /**
         * 获取某一配置文件json格式对象
         * @param key 配置文件名
         * @return json对象
         */
        ConfigManager.prototype.Get = function (key, i_bNoc) {
            if (i_bNoc === void 0) { i_bNoc = false; }
            if (!key) {
                return null;
            }
            var cfgName = "res/config/" + key + "_C.json";
            if (i_bNoc) {
                cfgName = "res/config/" + key + ".json";
            }
            // 检查decode表里是否存在
            if (this._configDecode[cfgName]) {
                return this._configDecode[cfgName];
            }
            var res = Laya.loader.getRes(cfgName);
            return res;
        };
        /**
        * 获取某一配置文件json格式对象中的一个字段值
        * @param key 配置文件名
        * @param prop 字段名
        * @return 字段值
        */
        ConfigManager.prototype.GetValue = function (key, prop) {
            if (!key) {
                return null;
            }
            if (!prop) {
                return null;
            }
            var con = this.Get(key);
            if (!con) {
                return null;
            }
            return con[prop];
        };
        /**
         * 获取某一个配置文件（json格式对象）中多个字段值
         * @param key
         * @param ...args
         * @return 如果可变参数为1个，则返回字段对应的值；若为多个，则返回一个object对象。key为字段，value：字段值
         */
        ConfigManager.prototype.GetValues = function (key) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (!key) {
                return null;
            }
            ;
            var con = this.Get(key);
            if (!con) {
                return null;
            }
            ;
            if (!args) {
                return null;
            }
            ;
            var l = args.length;
            if (l == 1) {
                return con[args[0]];
            }
            var o = {};
            var prop;
            for (var i = 0; i < l; i++) {
                prop = args[i];
                o[prop] = con[prop];
            }
            return o;
        };
        return ConfigManager;
    }());
    H52D_Framework.ConfigManager = ConfigManager;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ConfigManager.js.map
var H52D_Framework;
(function (H52D_Framework) {
    var TweenList = /** @class */ (function () {
        function TweenList() {
        }
        /**
         * 缓动对象的props属性到目标值。
         * @param	clazz 目标类(即将更改属性值的对象)。
         * @param	target 目标对象(即将更改属性值的对象)。
         * @param	props 变化的属性列表，比如
         * @param	duration 花费的时间，单位毫秒。
         * @param	complete 结束回调函数。
         * @param	delay 延迟执行时间。
         * @param	ease Laya.Ease类型。
         */
        TweenList.to = function (clazz, target, props, duration, complete, delay, ease) {
            if (delay === void 0) { delay = 0; }
            if (ease === void 0) { ease = Laya.Ease.linearNone; }
            var comp = true;
            Laya.Tween.to(target, props, duration, ease, Laya.Handler.create(clazz, function () {
                comp = false;
                if (complete) {
                    complete.apply(clazz);
                }
            }), delay, false, true);
            H52D_Framework.Tick.Once(duration + delay, clazz, function () {
                if (comp && complete) {
                    complete.apply(clazz);
                }
            });
        };
        return TweenList;
    }());
    H52D_Framework.TweenList = TweenList;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TweenList.js.map
/**
* 对象池
*/
var H52D_Framework;
(function (H52D_Framework) {
    var ObjectPool = /** @class */ (function () {
        function ObjectPool(size, type) {
            /**可用的对象池 */
            this._noActivePool = [];
            /**取出来的对象 存放的池子 */
            this._ActicvePool = [];
            /**最大对象数 */
            this._maxIndex = 0;
            /**最小对象数 */
            this._minIndex = 0;
            this._poolType = type;
            this._maxIndex = size;
            this._minIndex = 1;
            this._noActivePool = [];
            this._ActicvePool = [];
        }
        Object.defineProperty(ObjectPool.prototype, "MaxIndex", {
            /**最大对象数 */
            get: function () { return this._maxIndex; },
            enumerable: true,
            configurable: true
        });
        /**加入到可用的池子 */
        ObjectPool.prototype.AddNoActivePool = function (entity) {
            if (this._noActivePool.length <= this._maxIndex) {
                this._noActivePool.push(entity);
            }
        };
        /**从可用池子里取东西 */
        ObjectPool.prototype.GetPoolElement = function () {
            if (this._noActivePool.length >= this._minIndex) {
                var tem = this._noActivePool.pop();
                if (this._ActicvePool.length <= this._maxIndex) {
                    this._ActicvePool.push(tem);
                }
                return tem;
            }
            return null;
        };
        Object.defineProperty(ObjectPool.prototype, "GetActivePool", {
            get: function () {
                return this._ActicvePool;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectPool.prototype, "GetNoActivePool", {
            get: function () {
                return this._noActivePool;
            },
            enumerable: true,
            configurable: true
        });
        ObjectPool.prototype.Destroy = function () {
            for (var i = 0; i < this.GetActivePool.length; i++) {
                if (this._ActicvePool[i]) {
                    this._ActicvePool[i].Destroy();
                    this._ActicvePool[i] = null;
                }
            }
            for (var i = 0; i < this.GetNoActivePool.length; i++) {
                if (this._noActivePool[i]) {
                    this._noActivePool[i].Destroy();
                    this._noActivePool[i] = null;
                }
            }
            this._noActivePool = [];
            this._ActicvePool = [];
        };
        return ObjectPool;
    }());
    H52D_Framework.ObjectPool = ObjectPool;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ObjectPool.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var AstarRoundNode = /** @class */ (function () {
        function AstarRoundNode() {
        }
        return AstarRoundNode;
    }());
    var KCell = /** @class */ (function () {
        function KCell() {
            this.nNavMeshType = NavMeshType.NavMesh_None; //byte
            this.nX = 0;
            this.nY = 0;
            this.nHeight = 0; //short
        }
        KCell.prototype.Clear = function () {
            this.nNavMeshType = NavMeshType.NavMesh_None;
            this.nX = 0;
            this.nY = 0;
            this.nHeight = 0;
        };
        return KCell;
    }());
    var AstarNode = /** @class */ (function (_super) {
        __extends(AstarNode, _super);
        function AstarNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.cell = new KCell();
            _this.roundNodes = new Array();
            _this.state = AstarNodeState.NONE;
            return _this;
        }
        Object.defineProperty(AstarNode.prototype, "isOpen", {
            get: function () { return this.state == AstarNodeState.OPEN; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AstarNode.prototype, "isClose", {
            get: function () { return this.state == AstarNodeState.CLOSE; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AstarNode.prototype, "isBlock", {
            get: function () { return this.cell.nNavMeshType <= NavMeshType.NavMesh_Empty; },
            enumerable: true,
            configurable: true
        });
        AstarNode.Distance = function (from, to) {
            var deltaX = from.cell.nX - to.cell.nX;
            var deltaY = from.cell.nY - to.cell.nY;
            return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        };
        AstarNode.prototype.Clear = function () {
            this.G = 0;
            //this.cell.Clear();
            this.parent = null;
            this.state = AstarNodeState.NONE;
        };
        return AstarNode;
    }(H52D_Framework.DoubleLinkNode));
    var MinHeap = /** @class */ (function () {
        function MinHeap(size) {
            this.size = 0;
            this._datas = new Array(size);
        }
        Object.defineProperty(MinHeap.prototype, "isEmpty", {
            get: function () { return this.size == 0; },
            enumerable: true,
            configurable: true
        });
        MinHeap.prototype.Push = function (kNode) {
            if (this.size < this._datas.length - 1) {
                ++this.size;
                this._datas[this.size] = kNode;
                var index = this.size;
                while (index > 1) {
                    var parentIndex = this._GetParent(index);
                    if (this._datas[parentIndex].F > this._datas[index].F) {
                        var temp = this._datas[index];
                        this._datas[index] = this._datas[parentIndex];
                        this._datas[parentIndex] = temp;
                        index = parentIndex;
                    }
                    else {
                        break;
                    }
                }
            }
        };
        MinHeap.prototype.Pop = function () {
            if (this.size > 0) {
                var temp = this._datas[1];
                this._datas[1] = this._datas[this.size];
                this._datas[this.size] = temp;
                --this.size;
                this._Siftdown(1);
                return this._datas[this.size + 1];
            }
            else {
                return null;
            }
        };
        MinHeap.prototype.Clear = function () {
            this.size = 0;
        };
        MinHeap.prototype._GetLeft = function (idx) { return idx << 1; }; //k*2
        MinHeap.prototype._GetRight = function (idx) { return (idx << 1) + 1; }; //k*2+1
        MinHeap.prototype._GetParent = function (idx) { return (idx >> 1); }; //k/2
        MinHeap.prototype._Siftdown = function (index) {
            var indexMod = index;
            var left = this._GetLeft(indexMod);
            while (left <= this.size) {
                var t = left; //int t= pos<<1; 
                var right = this._GetRight(indexMod);
                if (right <= this.size && this._datas[right].F < this._datas[t].F) {
                    t = right;
                }
                if (this._datas[t].F < this._datas[indexMod].F) {
                    var temp = this._datas[t];
                    this._datas[t] = this._datas[indexMod];
                    this._datas[indexMod] = temp;
                    indexMod = t;
                    left = this._GetLeft(indexMod);
                }
                else {
                    break;
                }
            }
        };
        return MinHeap;
    }());
    var DestChecker = /** @class */ (function () {
        function DestChecker() {
        }
        DestChecker.prototype.IsDest = function (step) {
            return (AstarNode.Distance(step, this.dest) < this.diff);
        };
        return DestChecker;
    }());
    var Astar = /** @class */ (function () {
        function Astar(heapSize) {
            this._maxNodeCnt = 10000;
            this._openList = new Array();
            this._closeList = new Array();
            this._openHeap = new MinHeap(heapSize);
        }
        Astar.prototype.Search = function (src, dest) {
            src.G = 0;
            src.H = AstarNode.Distance(src, dest);
            src.F = src.G + src.H;
            //
            this._startNode = src;
            this._bestNode = src;
            this._startNode.Clear();
            this._destNode = dest;
            //
            this._nodeCnt = 0;
            //
            this._AddToOpen(src);
            //
            while (this._openHeap.size > 0) {
                this._currentNode = this._openHeap.Pop();
                if (this.destChecker.IsDest(this._currentNode)) { //是否目标节点
                    this._bestNode = this._currentNode;
                    return true;
                }
                if (this._currentNode.H < this._bestNode.H) { //当前节点代价小
                    this._bestNode = this._currentNode;
                }
                ++this._nodeCnt;
                if (this._nodeCnt > this._maxNodeCnt) { //超过最大节点数量
                    return false;
                }
                this._ComputeNode(this._currentNode);
                this._currentNode.Detach(); //从开放列表中移除
                this._AddToClose(this._currentNode); //加入到关闭列表中
            }
            return false;
        };
        //生成路径
        Astar.prototype.MakeRoute = function (nodes) {
            var dir = 1 + (1 << 2);
            var next = this._bestNode;
            if (next == null) {
                return;
            }
            while (true) {
                var fromNode = next;
                next = next.parent;
                if (next != null) {
                    var toNode = next;
                    var deltaX = toNode.cell.nX - fromNode.cell.nX + 1;
                    var deltaY = (toNode.cell.nY - fromNode.cell.nY + 1) << 2;
                    var delta = deltaY + deltaX;
                    if (delta != dir) {
                        nodes.push(fromNode);
                        dir = delta;
                    }
                }
                else {
                    nodes.push(fromNode);
                    break;
                }
            }
            nodes.reverse();
        };
        Astar.prototype.Reset = function () {
            while (true) {
                var node = this._openList.pop();
                if (node == null)
                    break;
                node.Clear();
            }
            //
            while (true) {
                var node = this._closeList.pop();
                if (node == null)
                    break;
                node.Clear();
            }
            //
            this._openHeap.Clear();
        };
        //计算节点
        Astar.prototype._ComputeNode = function (node) {
            for (var idx = 0; idx < node.roundNodes.length; ++idx) {
                var roundNode = node.roundNodes[idx];
                var childNode = roundNode.node;
                if (childNode.isClose)
                    continue;
                var newG = roundNode.cost + node.G;
                if (childNode.isOpen) { //如果是开放节点,判断G值大小
                    if (childNode.G > newG) {
                        childNode.G = newG;
                        childNode.F = childNode.G + childNode.H;
                        childNode.parent = node;
                    }
                }
                else {
                    childNode.G = newG;
                    childNode.H = AstarNode.Distance(childNode, this._destNode);
                    childNode.F = childNode.G + childNode.H;
                    childNode.parent = node;
                    this._AddToOpen(childNode);
                }
            }
        };
        Astar.prototype._AddToOpen = function (node) {
            this._openList.push(node);
            node.state = AstarNodeState.OPEN;
            this._openHeap.Push(node);
        };
        Astar.prototype._AddToClose = function (node) {
            node.state = AstarNodeState.CLOSE;
            this._closeList.push(node);
        };
        return Astar;
    }());
    var Navigator = /** @class */ (function () {
        function Navigator(bytes) {
            this._astar = new Astar(1024);
            this._astar.destChecker = new DestChecker();
            this._astar.maxNodeCnt = 1024;
            var reader = new Laya.Byte(bytes);
            reader.pos = 0;
            this._sizeX = reader.getInt32();
            this._sizeY = reader.getInt32();
            this._InitNodes(this._sizeX + 1, this._sizeY + 1);
            for (var xIdx = 0; xIdx < this._sizeX; ++xIdx) {
                for (var yIdx = 0; yIdx < this._sizeY; ++yIdx) {
                    this._nodes[xIdx + yIdx * this._sizeX].cell.nNavMeshType = reader.getUint8();
                }
            }
            for (var xIdx = 1; xIdx < this._sizeX; ++xIdx) {
                for (var yIdx = 1; yIdx < this._sizeY; ++yIdx) {
                    this._Fresh(xIdx, yIdx);
                }
            }
        }
        Object.defineProperty(Navigator.prototype, "sizeX", {
            get: function () { return this._sizeX; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(Navigator.prototype, "sizeY", {
            get: function () { return this._sizeY; },
            enumerable: true,
            configurable: true
        });
        ;
        Navigator.prototype.Search = function (srcX, srcY, destX, destY, fDiff) {
            if (fDiff === void 0) { fDiff = 0; }
            if ((srcX < this._sizeX && srcY < this._sizeY) == false || (destX < this._sizeX && destY < this._sizeY) == false) {
                return null;
            }
            var route = new Array();
            var nodePool = new Array();
            var srcNode = this._GetRoundActiveAstarNode(srcX, srcY, 100);
            var destNode = this._nodes[destX + destY * this._sizeX];
            // 如果一条直线可以直接过去，就不做寻路了
            if (!this._Pick(srcNode.cell.nX, srcNode.cell.nY, destX, destY, true)) {
                // 添加两个寻路点
                route.push(new Laya.Vector3(-srcNode.cell.nX, srcNode.cell.nHeight, srcNode.cell.nY));
                route.push(new Laya.Vector3(-destX, destNode.cell.nHeight, destY));
                return route;
            }
            this._astar.destChecker.dest = destNode;
            this._astar.destChecker.diff = fDiff;
            this._astar.Search(srcNode, destNode);
            this._astar.MakeRoute(nodePool);
            this._astar.Reset();
            this._ClipRoute(nodePool, route);
            return route;
        };
        /**
         * @brief 获取是否是可掉落
         * @param i_nX x点
         * @param i_nY y点
         * @return boolean (是否可掉落)
         */
        Navigator.prototype.GetPointAble = function (i_nX, i_nY) {
            var destNode = this._nodes[i_nX + i_nY * this._sizeX];
            if (!destNode)
                return false;
            else
                return (destNode.cell.nNavMeshType == NavMeshType.NavMesh_Empty);
        };
        //-------------------------------------------------------------------------------------------------------------    
        Navigator.prototype._InitNodes = function (sizeX, sizeY) {
            var cnt = sizeX * sizeY;
            this._nodes = new Array(cnt);
            for (var xIdx = 0; xIdx < sizeX; ++xIdx) {
                for (var yIdx = 0; yIdx < sizeY; ++yIdx) {
                    var node = new AstarNode();
                    node.cell.nNavMeshType = NavMeshType.NavMesh_Empty;
                    node.cell.nX = xIdx;
                    node.cell.nY = yIdx;
                    node.cell.nHeight = 0;
                    this._nodes[xIdx + yIdx * this._sizeX] = node;
                }
            }
        };
        Navigator.prototype._Fresh = function (x, y) {
            var curNode = this._nodes[x + y * this._sizeX];
            if (curNode.isBlock)
                return;
            for (var xIdx = x - 1; xIdx <= x + 1; ++xIdx) {
                for (var yIdx = y - 1; yIdx <= y + 1; ++yIdx) {
                    if (xIdx == x && yIdx == y)
                        continue;
                    if (x == 9) {
                        var i = 0;
                        i++;
                    }
                    var nextNode = this._nodes[xIdx + yIdx * this._sizeX];
                    if (!nextNode.isBlock) {
                        var roundNode = new AstarRoundNode();
                        roundNode.node = nextNode;
                        //
                        var deltaX = x - xIdx;
                        var deltaY = y - yIdx;
                        roundNode.cost = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
                        curNode.roundNodes.push(roundNode);
                    }
                }
            }
        };
        Navigator.prototype._GetRoundActiveAstarNode = function (iRootX, iRootY, iRange) {
            var activeNode = this._nodes[iRootX + iRootY * this._sizeX];
            if (!activeNode.isBlock)
                return activeNode;
            for (var iRangeIdx = 1; iRangeIdx < iRange; ++iRangeIdx) {
                // iSrcX - iRangeIdx
                for (var iIdx = -iRangeIdx; iIdx <= iRangeIdx; ++iIdx) {
                    var iX = iRootX - iRangeIdx;
                    var iY = iRootY + iIdx;
                    if (iX >= 0 && iX < this._sizeX && iY >= 0 && iY < this._sizeY) {
                        activeNode = this._nodes[iX + iY * this._sizeX];
                        if (!activeNode.isBlock)
                            return activeNode;
                    }
                }
                // iSrcX + iRangeIdx
                for (var iIdx = -iRangeIdx; iIdx <= iRangeIdx; ++iIdx) {
                    var iX = iRootX + iRangeIdx;
                    var iY = iRootY + iIdx;
                    if (iX >= 0 && iX < this._sizeX && iY >= 0 && iY < this._sizeY) {
                        activeNode = this._nodes[iX + iY * this._sizeX];
                        if (!activeNode.isBlock)
                            return activeNode;
                    }
                }
                // iSrcY - iRangeIdx
                for (var iIdx = -iRangeIdx; iIdx <= iRangeIdx; ++iIdx) {
                    var iX = iRootX + iIdx;
                    var iY = iRootY - iRangeIdx;
                    if (iX >= 0 && iX < this._sizeX && iY >= 0 && iY < this._sizeY) {
                        activeNode = this._nodes[iX + iY * this._sizeX];
                        if (!activeNode.isBlock)
                            return activeNode;
                    }
                }
                // iSrcY + iRangeIdx
                for (var iIdx = -iRangeIdx; iIdx <= iRangeIdx; ++iIdx) {
                    var iX = iRootX + iIdx;
                    var iY = iRootY + iRangeIdx;
                    if (iX >= 0 && iX < this._sizeX && iY >= 0 && iY < this._sizeY) {
                        activeNode = this._nodes[iX + iY * this._sizeX];
                        if (!activeNode.isBlock)
                            return activeNode;
                    }
                }
            }
            return null;
        };
        Navigator.prototype._PickXNegative = function (fromX, fromY, destX, destY, block) {
            var deltaX = destX - fromX;
            var deltaY = destY - fromY;
            var fromCenterX = fromX + 0.5;
            var fromCenterY = fromY + 0.5;
            var fDeltaX = -1;
            var fDeltaY = deltaY / Math.abs(deltaX);
            var pickX = fromCenterX;
            var pickY = fromCenterY;
            for (var idx = fromX; idx > destX; --idx) {
                pickX += fDeltaX;
                pickY += fDeltaY;
                var newCellX = Math.floor(pickX);
                var newCellY = Math.floor(pickY);
                if (this._nodes[newCellX + newCellY * this._sizeX].isBlock == block)
                    return true;
            }
            if (this._nodes[destX + destY * this._sizeX].isBlock == block)
                return true;
            return false;
        };
        Navigator.prototype._PickXPositive = function (fromX, fromY, destX, destY, block) {
            var deltaX = destX - fromX;
            var deltaY = destY - fromY;
            var fromCenterX = fromX + 0.5;
            var fromCenterY = fromY + 0.5;
            var fDeltaX = 1;
            var fDeltaY = deltaY / Math.abs(deltaX);
            var pickX = fromCenterX;
            var pickY = fromCenterY;
            for (var idx = fromX; idx < destX; ++idx) {
                pickX += fDeltaX;
                pickY += fDeltaY;
                var newCellX = Math.floor(pickX);
                var newCellY = Math.floor(pickY);
                if (this._nodes[newCellX + newCellY * this._sizeX].isBlock == block)
                    return true;
            }
            if (this._nodes[destX + destY * this._sizeX].isBlock == block)
                return true;
            return false;
        };
        Navigator.prototype._PickYNegative = function (fromX, fromY, destX, destY, block) {
            var deltaX = destX - fromX;
            var deltaY = destY - fromY;
            var fromCenterX = fromX + 0.5;
            var fromCenterY = fromY + 0.5;
            var fDeltaX = deltaX / Math.abs(deltaY);
            var fDeltaY = -1;
            var pickX = fromCenterX;
            var pickY = fromCenterY;
            for (var idy = fromY; idy > destY; --idy) {
                pickX += fDeltaX;
                pickY += fDeltaY;
                var newCellX = Math.floor(pickX);
                var newCellY = Math.floor(pickY);
                if (this._nodes[newCellX + newCellY * this._sizeX].isBlock == block)
                    return true;
            }
            if (this._nodes[destX + destY * this._sizeX].isBlock == block)
                return true;
            return false;
        };
        Navigator.prototype._PickYPositive = function (fromX, fromY, destX, destY, block) {
            var deltaX = destX - fromX;
            var deltaY = destY - fromY;
            var fromCenterX = fromX + 0.5;
            var fromCenterY = fromY + 0.5;
            var fDeltaX = deltaX / Math.abs(deltaY);
            var fDeltaY = 1;
            var pickX = fromCenterX;
            var pickY = fromCenterY;
            for (var idy = fromY; idy < destY; ++idy) {
                pickX += fDeltaX;
                pickY += fDeltaY;
                var newCellX = Math.floor(pickX);
                var newCellY = Math.floor(pickY);
                if (this._nodes[newCellX + newCellY * this._sizeX].isBlock == block)
                    return true;
            }
            if (this._nodes[destX + destY * this._sizeX].isBlock == block)
                return true;
            return false;
        };
        Navigator.prototype._Pick = function (fromX, fromY, destX, destY, block) {
            var deltaX = destX - fromX;
            var deltaY = destY - fromY;
            if (deltaX == 0 && deltaY == 0)
                return false;
            var absDeltaX = Math.abs(deltaX);
            var absDeltaY = Math.abs(deltaY);
            if (absDeltaX >= absDeltaY) {
                if (deltaX < 0) {
                    return this._PickXNegative(fromX, fromY, destX, destY, block);
                }
                else {
                    return this._PickXPositive(fromX, fromY, destX, destY, block);
                }
            }
            else {
                if (deltaY < 0) {
                    return this._PickYNegative(fromX, fromY, destX, destY, block);
                }
                else {
                    return this._PickYPositive(fromX, fromY, destX, destY, block);
                }
            }
        };
        Navigator.prototype._ClipRoute = function (complex, simple) {
            if (complex.length <= 2) {
                for (var idx = 0; idx < complex.length; ++idx) {
                    var pre = complex[idx];
                    simple.push(new Laya.Vector3(-pre.cell.nX, pre.cell.nHeight, pre.cell.nY));
                }
                return;
            }
            var from = complex[0];
            simple.push(new Laya.Vector3(-from.cell.nX, from.cell.nHeight, from.cell.nY));
            for (var idx = 1; idx < complex.length; ++idx) {
                var pre = complex[idx - 1];
                var current = complex[idx];
                if (this._Pick(from.cell.nX, from.cell.nY, current.cell.nX, current.cell.nY, true)) {
                    simple.push(new Laya.Vector3(-pre.cell.nX, pre.cell.nHeight, pre.cell.nY));
                    from = pre;
                }
            }
            var back = complex[complex.length - 1];
            simple.push(new Laya.Vector3(-back.cell.nX, back.cell.nHeight, back.cell.nY));
            /*for (let idx : number = 0; idx < complex.length; ++idx)
            {
                let pre : AstarNode = complex[idx];
                simple.push(new Laya.Vector3(-pre.cell.nX, pre.cell.nHeight, pre.cell.nY));
            }*/
        };
        return Navigator;
    }());
    H52D_Framework.Navigator = Navigator;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Navigator.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var JXS2C_PROTOCOL_HEADER = /** @class */ (function () {
        function JXS2C_PROTOCOL_HEADER() {
        }
        JXS2C_PROTOCOL_HEADER.prototype.GetData = function (i_Args) {
            this.data = i_Args;
            this.protocolID = i_Args[0];
        };
        return JXS2C_PROTOCOL_HEADER;
    }());
    H52D_Framework.JXS2C_PROTOCOL_HEADER = JXS2C_PROTOCOL_HEADER;
    var JXS2CL_RESPONE = /** @class */ (function (_super) {
        __extends(JXS2CL_RESPONE, _super);
        function JXS2CL_RESPONE() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        JXS2CL_RESPONE.prototype.GetData = function (i_Args) {
            _super.prototype.GetData.call(this, i_Args);
        };
        return JXS2CL_RESPONE;
    }(JXS2C_PROTOCOL_HEADER));
    H52D_Framework.JXS2CL_RESPONE = JXS2CL_RESPONE;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Jxs2cProtocol.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* 临时特效模型类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    /**模型类 */
    var EffectModel = /** @class */ (function (_super) {
        __extends(EffectModel, _super);
        function EffectModel() {
            var _this = _super.call(this) || this;
            _this.graphics.drawRect(0, 0, 10, 3, "#ff0000");
            _this.visible = false;
            H52D_Framework.EffectRoot.addChild(_this);
            return _this;
        }
        EffectModel.prototype.Play = function (url, b) {
            this.visible = true;
        };
        EffectModel.prototype.Rotate = function (value) {
            this.rotation = value;
        };
        Object.defineProperty(EffectModel.prototype, "PosX", {
            get: function () {
                return this.x;
            },
            set: function (value) {
                this.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EffectModel.prototype, "PosY", {
            get: function () {
                return this.y;
            },
            set: function (value) {
                this.y = value;
            },
            enumerable: true,
            configurable: true
        });
        return EffectModel;
    }(Laya.Sprite));
    H52D_Framework.EffectModel = EffectModel;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=EffectModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var View = laya.ui.View;
var Dialog = laya.ui.Dialog;
var ui;
(function (ui) {
    var achievement;
    (function (achievement) {
        var AchievementViewUI = /** @class */ (function (_super) {
            __extends(AchievementViewUI, _super);
            function AchievementViewUI() {
                return _super.call(this) || this;
            }
            AchievementViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.achievement.AchievementViewUI.uiView);
            };
            AchievementViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000", "alpha": 0.6 } }, { "type": "Image", "props": { "top": 3, "right": 0, "left": 0, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 105, "x": 376, "width": 684, "var": "bj", "height": 1026, "centerX": 1, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 490, "x": 341, "width": 700, "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "10,10,10,10", "height": 980, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": -39, "x": 0, "width": 700, "height": 50, "bgColor": "#1b2838" }, "child": [{ "type": "Label", "props": { "x": 26, "width": 6, "height": 25, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Text", "props": { "y": 15, "x": 47, "width": 514, "var": "tipName", "text": "输入Tip名字", "strokeColor": "#50560c", "height": 28, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "bold": true, "align": "left" } }, { "type": "Button", "props": { "var": "close", "top": 0, "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "right": 30 } }] }] }, { "type": "Image", "props": { "y": 11, "x": -8, "width": 474, "skin": "ui_camp/img-huawen1.png", "height": 124 } }, { "type": "List", "props": { "y": 81, "width": 679, "var": "achieven_List", "spaceY": 6, "repeatX": 1, "height": 893, "centerX": -2 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 3, "width": 670, "renderType": "render", "height": 96 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 670, "skin": "ui_rank/img-ziji-paiming.png", "sizeGrid": "0,10,0,80", "name": "achieven_bj", "height": 94 } }, { "type": "Image", "props": { "y": 47, "x": 43, "width": 70, "skin": "ui_icon/lw_icon_19.png", "name": "achieven_icon", "height": 70, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 8, "x": 99, "width": 293, "text": "任务阶段:", "height": 30, "fontSize": 20, "font": "Microsoft YaHei", "color": "#ffffff", "bold": false } }, { "type": "Label", "props": { "y": 37, "x": 98, "width": 293, "text": "任务目标描述", "name": "achieven_content", "height": 30, "fontSize": 18, "font": "Microsoft YaHei", "color": "#d6d7dd", "bold": false } }, { "type": "Image", "props": { "y": 7, "x": 206, "width": 282, "name": "achieven_stage", "height": 30 } }, { "type": "Label", "props": { "y": 63, "x": 96, "width": 401, "name": "achieven_progress", "height": 20, "bgColor": "#292936" }, "child": [{ "type": "Image", "props": { "y": 3, "x": 2, "width": 396, "skin": "ui_hero/img-taitou-jinenghuifu-jindutiao.png", "height": 14 } }, { "type": "Label", "props": { "y": 2, "x": 399, "width": 75, "name": "achieven_bar", "height": 16, "borderColor": "#292936", "bgColor": "#292936", "anchorX": 1 } }, { "type": "Label", "props": { "y": 0, "x": 1, "width": 398, "valign": "top", "text": "2/6", "strokeColor": "#4b4b56", "stroke": 3, "name": "achieven_barValue", "height": 18, "fontSize": 14, "font": "Microsoft YaHei", "color": "#ffffff", "bold": false, "align": "center" } }] }, { "type": "Label", "props": { "y": 1, "x": 522, "width": 148, "height": 92, "bgColor": "#242243" } }, { "type": "Button", "props": { "y": 53, "x": 596, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "achievent_btn", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 5, "x": 5, "width": 112, "valign": "top", "text": " 领奖", "name": "achievent_btnText", "height": 39, "fontSize": 26, "font": "Microsoft YaHei", "color": "#ffffff", "bold": true, "align": "center" } }] }, { "type": "HTMLDivElement", "props": { "y": 8, "x": 534, "width": 124, "name": "achieven_awart", "height": 18 } }] }] }, { "type": "Image", "props": { "y": 16, "x": 5, "width": 311, "skin": "ui_rank/img-xiaobiaoqian-tuo.png", "sizeGrid": "2,44,2,2", "height": 58 } }, { "type": "Button", "props": { "y": 45, "x": 83, "width": 147, "var": "btn1", "stateNum": 1, "skin": "ui_rank/img-zi-weixuan.png", "sizeGrid": "0,36,0,33", "height": 50, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -4, "var": "bg3", "skin": "ui_rank/img-zi-xuan.png" } }, { "type": "Label", "props": { "y": 10, "x": 0, "width": 117, "var": "txt1", "valign": "top", "text": "每日目标", "height": 31, "fontSize": 22, "font": "Microsoft YaHei", "color": "#bebbf8", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 25, "x": 111, "var": "red1", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Button", "props": { "y": 45, "x": 218, "width": 182, "var": "btn2", "stateNum": 1, "skin": "ui_rank/img-zi-weixuan.png", "sizeGrid": "0,36,0,33", "height": 49, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 9, "x": 34, "width": 117, "var": "txt2", "valign": "top", "text": "常规成就", "height": 31, "fontSize": 22, "font": "Microsoft YaHei", "color": "#bebbf8", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 24, "x": 147, "var": "red2", "skin": "ui_common/img-tixing.png" } }] }] }] }] };
            return AchievementViewUI;
        }(View));
        achievement.AchievementViewUI = AchievementViewUI;
    })(achievement = ui.achievement || (ui.achievement = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var boss;
        (function (boss) {
            var WroldBossBuffViewUI = /** @class */ (function (_super) {
                __extends(WroldBossBuffViewUI, _super);
                function WroldBossBuffViewUI() {
                    return _super.call(this) || this;
                }
                WroldBossBuffViewUI.prototype.createChildren = function () {
                    View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.boss.WroldBossBuffViewUI.uiView);
                };
                WroldBossBuffViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 588, "skin": "ui_common/img-lanzituo-tongyong.png", "sizeGrid": "0,0,3,0", "height": 634, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 1, "x": 0, "width": 588, "height": 50, "bgColor": "#1b2838", "alpha": 1 }, "child": [{ "type": "Label", "props": { "x": 18, "width": 6, "height": 34, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "x": 40, "text": "BUFF详情", "fontSize": 24, "font": "SimHei", "color": "#dde2f2", "centerY": 0 } }, { "type": "Button", "props": { "x": 609, "var": "Btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "right": 12, "centerY": 0 } }] }, { "type": "List", "props": { "y": 61, "x": 16, "width": 550, "var": "Buff_list", "spaceY": 6, "height": 570 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 550, "renderType": "render", "height": 94 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#5b335d" } }, { "type": "Image", "props": { "y": 9, "x": 10, "width": 76, "skin": "ui_common/icon-jinbi.png", "name": "buff_icon", "height": 76 } }, { "type": "HTMLDivElement", "props": { "y": 31, "x": 107, "width": 293, "name": "buff_say", "height": 35 } }, { "type": "Button", "props": { "y": 47, "x": 475, "width": 124, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "btn_buy", "labelSize": 25, "labelFont": "SimHei", "labelBold": true, "height": 48, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 14, "x": 32, "width": 26, "skin": "ui_icon/icon_prop_013.png", "name": "buff_price_icon", "height": 20 } }, { "type": "Label", "props": { "y": 11, "x": 60, "width": 40, "text": "20", "name": "buff_price", "height": 27, "fontSize": 26, "font": "SimHei", "color": "#ffffff", "align": "center" } }] }, { "type": "Image", "props": { "y": 17, "x": 406, "skin": "ui_wroldboss/img-yigoumai-shijieboss.png", "name": "buff_buyed" } }] }] }] }] }] };
                return WroldBossBuffViewUI;
            }(View));
            boss.WroldBossBuffViewUI = WroldBossBuffViewUI;
        })(boss = action.boss || (action.boss = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var boss;
        (function (boss) {
            var WroldBossEndViewUI = /** @class */ (function (_super) {
                __extends(WroldBossEndViewUI, _super);
                function WroldBossEndViewUI() {
                    return _super.call(this) || this;
                }
                WroldBossEndViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.boss.WroldBossEndViewUI.uiView);
                };
                WroldBossEndViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "bg", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.3 } }, { "type": "Label", "props": { "y": 218, "var": "My_hurt", "strokeColor": "#3b2213", "stroke": 6, "fontSize": 26, "font": "SimHei", "color": "#fef8e9", "centerX": 0, "align": "center" } }, { "type": "Button", "props": { "x": 377, "var": "Btn_sure", "stateNum": 1, "skin": "ui_pet/btn-xuanzhong-shenshou.png", "labelSize": 40, "labelFont": "SimHei", "labelColors": "#491a22", "labelBold": true, "labelAlign": "center", "label": "点击退出", "bottom": 208, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 159, "x": 293, "text": "挑战完成", "strokeColor": "#3b2213", "stroke": 6, "fontSize": 40, "font": "SimHei", "color": "#fef8e9", "align": "left" } }, { "type": "Label", "props": { "y": 871, "x": 288, "var": "Quit_time", "text": "自动退出倒计时", "strokeColor": "#3b2213", "stroke": 6, "fontSize": 22, "font": "SimHei", "color": "#fef3ce" } }] }] };
                return WroldBossEndViewUI;
            }(View));
            boss.WroldBossEndViewUI = WroldBossEndViewUI;
        })(boss = action.boss || (action.boss = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var boss;
        (function (boss) {
            var WroldBossRewardViewUI = /** @class */ (function (_super) {
                __extends(WroldBossRewardViewUI, _super);
                function WroldBossRewardViewUI() {
                    return _super.call(this) || this;
                }
                WroldBossRewardViewUI.prototype.createChildren = function () {
                    View.regComponent("Text", laya.display.Text);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.boss.WroldBossRewardViewUI.uiView);
                };
                WroldBossRewardViewUI.uiView = { "type": "View", "props": { "width": 750, "renderType": "render", "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "y": 285, "x": 82, "width": 587, "skin": "ui_common/img-lanzituo-tongyong.png", "sizeGrid": "0,0,3,0", "height": 630, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 587, "height": 50, "bgColor": "#1b2838", "alpha": 1 }, "child": [{ "type": "Label", "props": { "x": 18, "width": 6, "height": 34, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "x": 40, "text": "奖励预览", "fontSize": 24, "font": "SimHei", "color": "#dde2f2", "centerY": 0 } }, { "type": "Button", "props": { "x": 532, "var": "Btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "centerY": 0 } }] }, { "type": "List", "props": { "y": 56, "x": 15, "width": 552, "var": "reward_list", "spaceY": 6, "height": 570 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 552, "renderType": "render", "height": 120 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 553, "skin": "ui_rank/img-zhihou-paiming.png", "sizeGrid": "0,6,0,78", "name": "reward_bg", "height": 120 } }, { "type": "Image", "props": { "y": 12, "x": 99, "width": 72, "name": "reward_icon_bg1", "height": 72 }, "child": [{ "type": "Image", "props": { "width": 54, "name": "reward_icon", "height": 54, "centerY": 0, "centerX": 0 } }, { "type": "Label", "props": { "y": 59, "x": 44, "name": "rew_num", "fontSize": 20, "font": "SimHei", "color": "#f4f4f4", "align": "center" } }, { "type": "Label", "props": { "y": 77, "x": -5, "width": 80, "name": "rew_name", "height": 25, "fontSize": 20, "font": "SimHei", "color": "#f4f4f4", "align": "center" } }] }, { "type": "Image", "props": { "y": 12, "x": 189, "width": 72, "name": "reward_icon_bg2", "height": 72 }, "child": [{ "type": "Image", "props": { "width": 54, "name": "reward_icon", "height": 54, "centerY": 0, "centerX": 0 } }, { "type": "Label", "props": { "y": 59, "x": 44, "name": "rew_num", "fontSize": 20, "font": "SimHei", "color": "#f4f4f4", "align": "center" } }, { "type": "Label", "props": { "y": 77, "x": -5, "width": 80, "name": "rew_name", "height": 25, "fontSize": 20, "font": "SimHei", "color": "#f4f4f4", "align": "center" } }] }, { "type": "Image", "props": { "y": 12, "x": 279, "width": 72, "name": "reward_icon_bg3", "height": 72 }, "child": [{ "type": "Image", "props": { "width": 54, "name": "reward_icon", "height": 54, "centerY": 0, "centerX": 0 } }, { "type": "Label", "props": { "y": 59, "x": 44, "name": "rew_num", "fontSize": 20, "font": "SimHei", "color": "#f4f4f4", "align": "center" } }, { "type": "Label", "props": { "y": 77, "x": -5, "width": 80, "name": "rew_name", "height": 25, "fontSize": 20, "font": "SimHei", "color": "#f4f4f4", "align": "center" } }] }, { "type": "Image", "props": { "y": 12, "x": 369, "width": 72, "name": "reward_icon_bg4", "height": 72 }, "child": [{ "type": "Image", "props": { "width": 54, "name": "reward_icon", "height": 54, "centerY": 0, "centerX": 0 } }, { "type": "Label", "props": { "y": 59, "x": 44, "name": "rew_num", "fontSize": 20, "font": "SimHei", "color": "#f4f4f4", "align": "center" } }, { "type": "Label", "props": { "y": 77, "x": -5, "width": 80, "name": "rew_name", "height": 25, "fontSize": 20, "font": "SimHei", "color": "#f4f4f4", "align": "center" } }] }, { "type": "Image", "props": { "y": 12, "x": 459, "width": 72, "name": "reward_icon_bg5", "height": 72 }, "child": [{ "type": "Image", "props": { "width": 54, "name": "reward_icon", "height": 54, "centerY": 0, "centerX": 0 } }, { "type": "Label", "props": { "y": 59, "x": 44, "name": "rew_num", "fontSize": 20, "font": "SimHei", "color": "#f4f4f4", "align": "center" } }, { "type": "Label", "props": { "y": 77, "x": 0, "width": 80, "name": "rew_name", "height": 25, "fontSize": 20, "font": "SimHei", "color": "#f4f4f4", "align": "center" } }] }, { "type": "Image", "props": { "y": 0, "x": 43, "width": 120, "skin": "ui_shop/img-jiagetiao.png", "sizeGrid": "0,50,0,0", "rotation": 90, "height": 42 } }, { "type": "Image", "props": { "y": 0, "x": 76, "width": 120, "skin": "ui_shop/img-jiagetiao.png", "sizeGrid": "0,56,0,0", "rotation": 90, "height": 42 } }, { "type": "Image", "props": { "y": 96, "x": 71, "width": 65, "skin": "ui_wroldboss/img-vs-bg-pkliansai.png", "rotation": 180, "height": 70 } }, { "type": "Text", "props": { "y": 10, "x": 0, "wordWrap": true, "width": 77, "valign": "middle", "text": "1", "name": "rankNum", "height": 93, "fontSize": 46, "font": "Helvetica", "color": "#e6e6eb", "bold": true, "align": "center" } }] }] }] }] }] };
                return WroldBossRewardViewUI;
            }(View));
            boss.WroldBossRewardViewUI = WroldBossRewardViewUI;
        })(boss = action.boss || (action.boss = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var boss;
        (function (boss) {
            var WroldBossViewUI = /** @class */ (function (_super) {
                __extends(WroldBossViewUI, _super);
                function WroldBossViewUI() {
                    return _super.call(this) || this;
                }
                WroldBossViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.boss.WroldBossViewUI.uiView);
                };
                WroldBossViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": -1, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "ui_scene01/01.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1178 } }, { "type": "Image", "props": { "x": 0, "skin": "ui_scene01/02.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1014, "bottom": -80 } }, { "type": "Image", "props": { "x": 0, "skin": "ui_scene01/03.png", "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 527 } }, { "type": "Image", "props": { "x": 583, "skin": "ui_scene01/04.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "bottom": 581 } }, { "type": "Image", "props": { "x": 0, "skin": "ui_scene01/05.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 12 } }] }, { "type": "Image", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "top": 0, "sizeGrid": "10,24,6,0", "right": 0, "left": 0, "height": 74 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908" } }, { "type": "Image", "props": { "y": 41, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,31,0,11", "right": 0, "left": 0, "height": 32 }, "child": [{ "type": "Image", "props": { "y": -6, "width": 167, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,8,0,33", "right": 0, "height": 38 }, "child": [{ "type": "Button", "props": { "y": -1, "var": "Btn_Close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "centerX": 0 } }] }] }, { "type": "Label", "props": { "y": 46, "x": 57, "width": 115, "valign": "middle", "text": "世界BOSS", "height": 29, "fontSize": 26, "font": "SimHei", "color": "#feb979", "bold": false, "align": "left" } }, { "type": "Label", "props": { "y": 47, "x": 32, "width": 6, "height": 22, "bgColor": "#4a408a" } }] }, { "type": "Button", "props": { "var": "Btn_Rank", "top": 118, "stateNum": 1, "skin": "ui_wroldboss/btn-paihang-shijieboss.png", "left": 30 }, "child": [{ "type": "Label", "props": { "y": 39, "x": -6, "text": "排行榜", "strokeColor": "#7c6d92", "stroke": 3, "fontSize": 22, "font": "SimHei", "color": "#f4f4f4" } }] }, { "type": "Button", "props": { "width": 294, "var": "Btn_Challenge", "stateNum": 1, "skin": "ui_pet/btn-xuanzhong-shenshou.png", "labelSize": 40, "labelFont": "SimHei", "labelColors": "#491a22", "labelBold": true, "label": "挑战", "height": 90, "centerY": 450, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "var": "Boss_say", "fontSize": 22, "font": "SimHei", "color": "#fef3ce", "centerY": 375, "centerX": 0, "align": "center" } }, { "type": "Label", "props": { "width": 180, "var": "Boss_Name", "text": "BOSS名称", "strokeColor": "#3b2213", "stroke": 3, "height": 30, "fontSize": 26, "font": "SimHei", "color": "#fef8e9", "centerY": -337, "centerX": 0, "bold": true, "align": "center" } }, { "type": "Image", "props": { "width": 400, "var": "Boss_Icon", "height": 540, "centerY": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }] }, { "type": "Image", "props": { "y": 127, "x": 456, "width": 242, "var": "hurt_bg", "skin": "ui_action/ui-daojishi-bg-huodong.png", "sizeGrid": "0,2,0,2", "height": 37 }, "child": [{ "type": "Label", "props": { "y": 4, "x": 0, "wordWrap": false, "width": 241, "var": "Hurt_max", "text": "最高伤害:", "name": "倒计时", "height": 33, "fontSize": 27, "font": "SimHei", "color": "#f4f4f4" } }] }] }] };
                return WroldBossViewUI;
            }(View));
            boss.WroldBossViewUI = WroldBossViewUI;
        })(boss = action.boss || (action.boss = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var kicking;
        (function (kicking) {
            var HeroBloodViewUI = /** @class */ (function (_super) {
                __extends(HeroBloodViewUI, _super);
                function HeroBloodViewUI() {
                    return _super.call(this) || this;
                }
                HeroBloodViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.kicking.HeroBloodViewUI.uiView);
                };
                HeroBloodViewUI.uiView = { "type": "View", "props": { "width": 50, "height": 4 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 60, "height": 5 }, "child": [{ "type": "Image", "props": { "y": -1, "x": -1, "width": 620, "skin": "ui_main/img-xietuo-boss.png", "sizeGrid": "1,10,10,3", "scaleY": 0.1, "scaleX": 0.1, "name": "bg", "height": 70 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 60, "height": 5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 60, "var": "img_blood", "skin": "ui_main/img-guai-xuetiao.png", "sizeGrid": "0,6,0,0", "height": 5 } }, { "type": "Sprite", "props": { "y": 0, "x": 0, "renderType": "mask" }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 60, "lineWidth": 1, "height": 5, "fillColor": "#ff0000" } }] }] }] }] };
                return HeroBloodViewUI;
            }(View));
            kicking.HeroBloodViewUI = HeroBloodViewUI;
        })(kicking = action.kicking || (action.kicking = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var kicking;
        (function (kicking) {
            var KickingChooseViewUI = /** @class */ (function (_super) {
                __extends(KickingChooseViewUI, _super);
                function KickingChooseViewUI() {
                    return _super.call(this) || this;
                }
                KickingChooseViewUI.prototype.createChildren = function () {
                    View.regComponent("Text", laya.display.Text);
                    View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.kicking.KickingChooseViewUI.uiView);
                };
                KickingChooseViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "x": 10, "width": 700, "height": 1058, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "width": 950, "height": 1400, "centerY": 0, "centerX": 0, "alpha": 0.8 }, "child": [{ "type": "Rect", "props": { "width": 950, "lineWidth": 1, "height": 1400, "fillColor": "#000000" } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 700, "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "10,10,10,10", "height": 1058 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 700, "height": 50, "bgColor": "#1b2838" }, "child": [{ "type": "Label", "props": { "x": 23, "width": 6, "height": 25, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "x": 49, "width": 268, "var": "tx_attack_name", "text": "选择房间", "height": 27, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "centerY": 0, "bold": false, "align": "left" } }, { "type": "Button", "props": { "x": 532, "var": "btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "right": 12, "centerY": 0 } }] }, { "type": "Label", "props": { "y": 59, "x": 0, "width": 700, "height": 60, "bgColor": "#2c2129" } }, { "type": "Image", "props": { "y": 924, "width": 662, "skin": "ui_camp/img-baibian-zhenying.png", "sizeGrid": "5,2,1,1", "height": 120, "centerX": 0 } }] }, { "type": "Image", "props": { "y": 71, "x": 15, "width": 290, "skin": "ui_rank/img-xiaobiaoqian-tuo.png", "sizeGrid": "2,40,2,2", "name": "分房按钮", "height": 48 }, "child": [{ "type": "Button", "props": { "y": 24, "x": 76, "width": 152, "var": "btn_gold", "stateNum": 1, "skin": "ui_rank/img-zi-xuan.png", "sizeGrid": "0,34,0,2", "labelStrokeColor": "#000000", "labelStroke": 1, "labelSize": 24, "labelPadding": "0,8,0,0", "labelFont": "SimHei", "labelColors": "#eff8bb", "labelBold": true, "label": "金币房间", "height": 43, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 24, "x": 202, "width": 160, "var": "btn_diamond", "stateNum": 1, "skin": "ui_rank/img-zi-weixuan.png", "sizeGrid": "0,34,0,34", "labelStrokeColor": "#000000", "labelStroke": 1, "labelSize": 24, "labelPadding": "0,0,0,0", "labelFont": "SimHei", "labelColors": "#bebbf8", "labelBold": true, "label": "钻石房间", "height": 43, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 21, "x": 502, "width": 112, "var": "btn_pvp", "stateNum": 1, "skin": "ui_kicking/btn-kafangjian-pvp.png", "sizeGrid": "6,6,6,6", "scaleY": 0.8, "scaleX": 0.8, "labelSize": 24, "labelFont": "SimHei", "labelColors": "#c8d2f7", "labelAlign": "center", "label": "PVP阵型", "height": 48, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 21, "x": 615, "width": 112, "var": "btn_pet", "stateNum": 1, "skin": "ui_kicking/btn-kafangjian-pvp.png", "sizeGrid": "6,6,6,6", "scaleY": 0.8, "scaleX": 0.8, "labelSize": 24, "labelFont": "SimHei", "labelColors": "#c8d2f7", "labelAlign": "center", "label": "上阵神兽", "height": 48, "anchorY": 0.5, "anchorX": 0.5 } }] }, { "type": "Text", "props": { "y": 946, "x": 408, "width": 71, "var": "txt_challenge", "text": "5/5", "height": 24, "fontSize": 22, "font": "SimHei", "color": "#fffbf1" } }, { "type": "Text", "props": { "y": 946, "x": 255, "width": 219, "text": "今日剩余次数：", "height": 24, "fontSize": 22, "font": "SimHei", "color": "#fffbf1" } }, { "type": "Button", "props": { "y": 974, "x": 269, "var": "btn_matching", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 28, "labelPadding": "-8", "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "匹配", "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 44, "x": 0, "width": 162, "skin": "ui_common/btn-huodong-wenzi-bg.png", "sizeGrid": "5,9,9,5", "height": 22 } }, { "type": "Text", "props": { "y": 44, "x": 3, "width": 155, "var": "tx_martch_time", "valign": "middle", "height": 24, "fontSize": 20, "font": "SimHei", "color": "#ffc58b", "bold": false, "align": "center" } }] }, { "type": "List", "props": { "y": 185, "x": 52, "width": 648, "var": "room_list", "vScrollBarSkin": "\"\"", "spaceY": 38, "spaceX": 50, "height": 780 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 275, "renderType": "render", "height": 369 }, "child": [{ "type": "Image", "props": { "y": 9, "x": 2, "skin": "ui_camp/btn-junaxuan-zhenying.png", "sizeGrid": "0,20,20,0", "name": "img_bg" } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 275, "skin": "ui_pet/img-liebiao-xuanzhong-shenshou.png", "sizeGrid": "4,22,16,4", "name": "box_select", "height": 369 } }, { "type": "Image", "props": { "y": 55, "skin": "ui_kicking/img-1-pvp.png", "name": "img_sign", "centerX": -1 } }, { "type": "Image", "props": { "y": 243, "x": 13, "width": 28, "skin": "ui_common/icon-jinbi.png", "name": "icon_money", "height": 28 } }, { "type": "Text", "props": { "y": 245, "x": 44, "width": 215, "text": "1000金币以上", "name": "money", "height": 26, "fontSize": 24, "font": "SimHei", "color": "#d6d7dd", "bold": true, "align": "center" } }, { "type": "Text", "props": { "y": 309, "x": 8, "width": 252, "text": "青铜", "name": "room_name", "height": 30, "fontSize": 26, "font": "SimHei", "color": "#5f2904", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 288, "x": 187, "skin": "ui_pet/img-liebiao-xuanzhongbiaozhi-shenshou.png", "name": "img_hook" } }] }] }, { "type": "Image", "props": { "y": 129, "x": 19, "skin": "ui_hero/img-tongyong-taitou-1.png" }, "child": [{ "type": "HTMLDivElement", "props": { "y": 0, "x": 37, "width": 221, "var": "My_money", "innerHTML": "htmlText", "height": 26 } }] }] }] };
                return KickingChooseViewUI;
            }(View));
            kicking.KickingChooseViewUI = KickingChooseViewUI;
        })(kicking = action.kicking || (action.kicking = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var kicking;
        (function (kicking) {
            var KickingPetViewUI = /** @class */ (function (_super) {
                __extends(KickingPetViewUI, _super);
                function KickingPetViewUI() {
                    return _super.call(this) || this;
                }
                KickingPetViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.kicking.KickingPetViewUI.uiView);
                };
                KickingPetViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "width": 750, "top": 0, "left": 0, "height": 1200 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 375, "width": 750, "top": 0, "mouseThrough": true, "centerX": 0, "bottom": 0, "anchorX": 0.5 }, "child": [{ "type": "Box", "props": { "y": 0, "width": 750, "height": 1200, "centerX": 0, "alpha": 1 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 750, "height": 1200, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "y": 38, "x": 0, "width": 750, "height": 1080, "bgColor": "#313737", "alpha": 1 } }, { "type": "Image", "props": { "y": 0, "x": 584, "width": 166, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,8,0,33", "height": 42 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -583, "width": 621, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,31,0,11", "height": 42 } }] }, { "type": "Button", "props": { "y": 2, "x": 643, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png" } }] }] }, { "type": "Label", "props": { "y": 48, "x": 23, "width": 125, "var": "petHit", "text": "72.83K  神兽伤害", "height": 22, "fontSize": 22, "font": "SimHei", "color": "#dde2f2" }, "child": [{ "type": "Image", "props": { "y": -8, "x": 0, "var": "info", "skin": "ui_action/btn-xiangqing-huodong.png" } }] }, { "type": "List", "props": { "y": 80, "x": 0, "width": 750, "var": "Pet_list", "spaceY": 10, "spaceX": 8, "repeatX": 2, "height": 1024, "alpha": 1 }, "child": [{ "type": "Box", "props": { "y": 6, "x": 8, "width": 363, "renderType": "render", "height": 96 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 6, "width": 360, "skin": "ui_pet/img-liebiao-shenshou.png", "sizeGrid": "10,215,10,35", "height": 86, "alpha": 1 } }, { "type": "Image", "props": { "y": 7, "x": 6, "width": 86, "skin": "ui_hero/img-lanpinzhikuang.png", "name": "pet_icon_bg", "height": 78 } }, { "type": "Label", "props": { "y": 12, "x": 106, "width": 33, "text": "LV:", "height": 23, "fontSize": 18, "font": "SimHei", "color": "#86e779", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 133, "width": 33, "text": "405", "name": "Pet_lv", "height": 23, "fontSize": 18, "font": "SimHei", "color": "#ffff79", "align": "left" } }, { "type": "Label", "props": { "y": 9, "x": 172, "width": 96, "text": "陆咬胶鲨", "name": "Pet_name", "height": 23, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 43, "x": 106, "width": 106, "text": "宠物伤害", "name": "pet_hurt", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#d6d7dd", "align": "left" } }, { "type": "Label", "props": { "y": 65, "x": 106, "width": 106, "text": "宠物伤害", "name": "hero_hurt", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#d6d7dd", "align": "left" } }, { "type": "Image", "props": { "y": 3, "x": 2, "width": 360, "skin": "ui_pet/img-liebiao-xuanzhong-shenshou.png", "sizeGrid": "4,25,15,8", "name": "choice", "height": 86, "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 17, "x": 279, "skin": "ui_pet/img-liebiao-xuanzhongbiaozhi-shenshou.png", "name": "pet_main" } }] }, { "type": "Button", "props": { "y": 7, "x": 4, "width": 354, "name": "click", "height": 79 } }, { "type": "Image", "props": { "y": 6, "x": 5, "width": 86, "skin": "ui_icon/icon_tou_atm.png", "name": "Pet_icon", "height": 80 }, "child": [{ "type": "Image", "props": { "y": 44, "x": 53, "skin": "ui_shop/img-tanhao.png", "name": "Pet_info" } }] }, { "type": "Image", "props": { "y": 0, "x": -1, "width": 26, "skin": "ui_hero/img-biaoqian-zhekou-bg.png", "name": "point", "height": 30 }, "child": [{ "type": "Label", "props": { "y": -1, "x": 1, "width": 14, "text": "new", "strokeColor": "#d10805", "stroke": 3, "skewY": 13, "skewX": -8, "height": 12, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }] }] }] }] };
                return KickingPetViewUI;
            }(View));
            kicking.KickingPetViewUI = KickingPetViewUI;
        })(kicking = action.kicking || (action.kicking = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var kicking;
        (function (kicking) {
            var KickingPromptViewUI = /** @class */ (function (_super) {
                __extends(KickingPromptViewUI, _super);
                function KickingPromptViewUI() {
                    return _super.call(this) || this;
                }
                KickingPromptViewUI.prototype.createChildren = function () {
                    View.regComponent("Text", laya.display.Text);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.kicking.KickingPromptViewUI.uiView);
                };
                KickingPromptViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 590, "height": 338, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_hero/img-tongyong-taitou-1.png" }, "child": [{ "type": "Text", "props": { "y": 2, "x": 87, "width": 90, "text": "提示", "height": 23, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Image", "props": { "y": -13, "x": 260, "width": 288, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,31,0,11", "height": 40 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 248, "width": 82, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,8,0,33", "height": 40 } }] }] }, { "type": "Label", "props": { "y": 28, "x": 590, "width": 40, "height": 40 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 310, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "skewY": 90, "skewX": -90, "height": 590 } }] }, { "type": "Image", "props": { "y": 111, "x": 80, "skin": "ui_common/img-huawen2.png", "scaleY": -1, "scaleX": -1, "alpha": 0.4 } }, { "type": "Image", "props": { "y": 256, "x": 510, "skin": "ui_common/img-huawen2.png", "alpha": 0.4 } }, { "type": "Image", "props": { "y": 230, "x": 12, "width": 566, "height": 1 } }, { "type": "Text", "props": { "y": 113, "x": 77, "width": 435, "text": "退出后本次战斗失败，是否退出！", "height": 32, "fontSize": 30, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Button", "props": { "y": -13, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "right": 2 } }, { "type": "Button", "props": { "y": 257, "x": 86, "width": 180, "var": "btn_back", "stateNum": 1, "height": 50 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 180, "text": "取消", "strokeColor": "#493215", "stroke": 3, "padding": "13", "height": 50, "fontSize": 26, "font": "SimHei", "color": "#fffdfd", "bold": true, "bgColor": "#8d6e1e", "align": "center" } }] }, { "type": "Button", "props": { "y": 257, "x": 324, "width": 180, "var": "btn_confirm", "stateNum": 1, "height": 50 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 180, "text": "确定", "strokeColor": "#1f4915", "stroke": 3, "padding": "13", "height": 50, "fontSize": 26, "font": "SimHei", "color": "#fffdfd", "bold": true, "bgColor": "#4e8d1e", "align": "center" } }] }] }] };
                return KickingPromptViewUI;
            }(View));
            kicking.KickingPromptViewUI = KickingPromptViewUI;
        })(kicking = action.kicking || (action.kicking = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var kicking;
        (function (kicking) {
            var KickingResultViewUI = /** @class */ (function (_super) {
                __extends(KickingResultViewUI, _super);
                function KickingResultViewUI() {
                    return _super.call(this) || this;
                }
                KickingResultViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.kicking.KickingResultViewUI.uiView);
                };
                KickingResultViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 534, "height": 680, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 0, "width": 534, "var": "fight_bg", "skin": "ui_kicking/img-shengli-bg-pvp.png", "sizeGrid": "0,3,0,3", "height": 680 } }, { "type": "Image", "props": { "y": 93, "x": 30, "var": "fight_bg_icon", "skin": "ui_kicking/img-shengli-zhuangshi-pvp.png" } }, { "type": "List", "props": { "y": 98, "x": 105, "width": 319, "var": "fight_war", "spaceY": 20, "spaceX": 30, "repeatX": 3, "height": 299 }, "child": [{ "type": "Box", "props": { "renderType": "render" }, "child": [{ "type": "Image", "props": { "width": 85, "skin": "ui_hero/img-lanpinzhikuang.png", "name": "hero_bg", "height": 85 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 85, "skin": "ui_icon/icon_tou_frk.png", "name": "hero_icon", "height": 85 } }] }] }, { "type": "Image", "props": { "x": 267, "var": "fight_logo", "skin": "ui_kicking/img-shibai-pvp.png", "bottom": 580, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 578, "width": 130, "var": "fight_quittime", "text": "5秒后自动退出", "pivotY": 0, "pivotX": 0, "height": 20, "fontSize": 20, "font": "SimHei", "color": "#49495b", "centerX": 0, "align": "center" } }, { "type": "Label", "props": { "y": 563, "width": 484, "height": 2, "centerX": 0 } }, { "type": "Image", "props": { "y": 417, "x": 16, "width": 300, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "sizeGrid": "1,1,1,1", "height": 28 }, "child": [{ "type": "Label", "props": { "width": 226, "var": "fight_result", "text": "本场平局", "height": 26, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "centerY": 0, "centerX": 0, "align": "center" } }, { "type": "Label", "props": { "x": 6, "width": 5, "height": 25, "centerY": 0, "bgColor": "#df8e2f" } }, { "type": "Label", "props": { "y": 49, "x": 120, "var": "item_name", "text": "金币", "strokeColor": "#000000", "stroke": 1, "fontSize": 20, "font": "SimHei", "color": "#e69bff" } }, { "type": "Label", "props": { "y": 72, "x": 120, "var": "item_num", "text": "+99999999", "fontSize": 20, "font": "SimHei", "color": "#49495b", "bold": true } }, { "type": "Label", "props": { "y": 96, "x": 120, "var": "item_result", "text": "平局不扣门票", "fontSize": 20, "font": "SimHei", "color": "#49495b" } }, { "type": "Image", "props": { "y": 47, "x": 24, "width": 76, "var": "item_pinzhi", "skin": "ui_hero/img-hongpinzhikuang.png", "height": 76 } }, { "type": "Image", "props": { "y": 47, "x": 24, "width": 76, "var": "item_icon", "skin": "ui_icon/icon_prop_004.png", "height": 76 } }] }, { "type": "Image", "props": { "y": -50, "x": 265, "visible": false, "var": "fight_win" }, "child": [{ "type": "Image", "props": { "y": -35, "x": -27, "var": "start_2", "skin": "ui_kicking/img-shengli-huixing-pvp.png" } }, { "type": "Image", "props": { "y": 1, "x": -58, "width": 64, "var": "start_1", "skin": "ui_kicking/img-shengli-huixing-pvp.png", "skewY": -10, "skewX": 10, "height": 64, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 1, "x": 68, "var": "start_3", "skin": "ui_kicking/img-shengli-huixing-pvp.png", "skewY": 10, "skewX": -10, "anchorY": 0.5, "anchorX": 0.5 } }] }, { "type": "Button", "props": { "var": "btn_receive", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 28, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "确定", "centerX": -2, "bottom": 8 } }] }] }] };
                return KickingResultViewUI;
            }(View));
            kicking.KickingResultViewUI = KickingResultViewUI;
        })(kicking = action.kicking || (action.kicking = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var kicking;
        (function (kicking) {
            var KickingSceneViewUI = /** @class */ (function (_super) {
                __extends(KickingSceneViewUI, _super);
                function KickingSceneViewUI() {
                    return _super.call(this) || this;
                }
                KickingSceneViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.kicking.KickingSceneViewUI.uiView);
                };
                KickingSceneViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "var": "bg", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "text": "label", "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000" } }, { "type": "Image", "props": { "top": 78, "right": 0, "name": "场景", "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "var": "img_bg", "top": 0, "skin": "ui_scene01/01.png", "right": 0, "left": 0, "bottom": 0 } }] }, { "type": "Image", "props": { "top": 0, "right": 0, "name": "背景", "mouseThrough": false, "left": 0, "bottom": 0, "alpha": 1 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "text": "label", "right": 0, "left": 0, "height": 78, "bgColor": "#000000" } }, { "type": "Image", "props": { "top": 1, "sizeGrid": "10,24,6,0", "right": 0, "left": 0, "height": 74 }, "child": [{ "type": "Image", "props": { "y": 41, "width": 750, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,31,0,11", "right": 0, "left": 0, "height": 32 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 167, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,8,0,33", "right": 0, "height": 32 }, "child": [{ "type": "Image", "props": { "y": -2, "x": 64, "var": "btn_close", "skin": "ui_main/btn-guanbi.png" } }] }] }] }, { "type": "Label", "props": { "y": 45, "x": 17, "width": 6, "height": 25, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "y": 44, "x": 46, "width": 115, "var": "attack_name", "valign": "middle", "text": "pvp房间", "height": 29, "fontSize": 26, "font": "SimHei", "color": "#feb979", "bold": false, "align": "left" } }] }, { "type": "Image", "props": { "y": 119, "x": 23, "width": 212, "name": "底图", "height": 45 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 211, "skin": "ui_action/ui-daojishi-bg-huodong.png", "sizeGrid": "0,2,0,2", "height": 45 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 211, "skin": "ui_action/ui-daojishi-jianbian-huodong.png", "sizeGrid": "0,1,0,1", "height": 45 } }, { "type": "Image", "props": { "y": 3, "x": 8, "skin": "ui_action/ui-daojishi-biao-huodong.png" } }, { "type": "Label", "props": { "y": 10, "x": 57, "wordWrap": true, "width": 152, "var": "txt_countdown", "text": "倒计时:60S", "height": 33, "fontSize": 27, "font": "SimHei", "color": "#f4f4f4" } }] }, { "type": "Image", "props": { "visible": false, "var": "play", "skin": "ui_kicking/img-kaishi-pvp.png", "centerY": 100, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }] }] };
                return KickingSceneViewUI;
            }(View));
            kicking.KickingSceneViewUI = KickingSceneViewUI;
        })(kicking = action.kicking || (action.kicking = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var kicking;
        (function (kicking) {
            var KickingWarUI = /** @class */ (function (_super) {
                __extends(KickingWarUI, _super);
                function KickingWarUI() {
                    return _super.call(this) || this;
                }
                KickingWarUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.kicking.KickingWarUI.uiView);
                };
                KickingWarUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "width": 750, "height": 1200, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 750, "top": 0, "right": 0, "left": 0, "height": 1200, "bottom": -50, "bgColor": "#303b3b", "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 617, "width": 133, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,8,0,33", "height": 48 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -616, "width": 654, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,31,0,11", "height": 48 } }] }, { "type": "Button", "props": { "y": 2, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "right": 22 } }] }, { "type": "Image", "props": { "y": -300, "x": 0, "width": 750, "var": "BackGround", "sizeGrid": "15,15,15,15", "renderType": "render", "height": 1200 }, "child": [{ "type": "Sprite", "props": { "y": 390, "x": -9, "width": 781, "renderType": "mask", "height": 531 }, "child": [{ "type": "Rect", "props": { "y": 19, "x": -197, "width": 1176, "lineWidth": 1, "height": 489, "fillColor": "#ff0000" } }] }] }, { "type": "Image", "props": { "y": 50, "x": 0, "width": 750, "visible": true, "height": 58 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 750, "visible": true, "height": 58, "bgColor": "#2c2129", "alpha": 0.7 } }, { "type": "Image", "props": { "y": 6, "x": 41, "width": 88, "skin": "ui_common/btn-biaoqianye-yinxiong.png", "sizeGrid": "12,11,4,16", "height": 44 }, "child": [{ "type": "Label", "props": { "y": 8, "x": 14, "width": 2, "valign": "middle", "height": 28, "fontSize": 18, "font": "SimHei", "bgColor": "#aa9fc5", "align": "center" } }, { "type": "Label", "props": { "y": 3, "x": 1, "width": 88, "text": "布阵", "padding": "8", "height": 40, "fontSize": 22, "font": "SimHei", "color": "#9a9fb2", "align": "center" } }] }, { "type": "Button", "props": { "y": 0, "x": 591, "width": 159, "var": "Btn_save", "top": 0, "stateNum": 1, "skin": "ui_hero/btn-buzhen-baocun.png", "right": 0, "labelStrokeColor": "be5f13", "labelStroke": 4, "labelSize": 28, "labelFont": "SimHei", "labelColors": "#ffffff", "label": "保存", "height": 58 } }] }, { "type": "Box", "props": { "y": 108, "x": 0, "width": 750, "var": "bgbox", "height": 1088 }, "child": [{ "type": "List", "props": { "y": 518, "x": 0, "width": 750, "var": "List_head", "spaceY": 14, "spaceX": 22, "repeatX": 4, "height": 503 }, "child": [{ "type": "Box", "props": { "y": 97, "x": 120, "width": 150, "renderType": "render", "height": 185, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 148, "skin": "ui_hero/img-buzhen-renwu-bg.png", "renderType": "render", "name": "background", "height": 188 } }, { "type": "Button", "props": { "y": 2, "x": 1, "width": 147, "stateNum": 1, "name": "Btn_skill", "height": 185 }, "child": [{ "type": "Image", "props": { "y": 1, "x": 1, "width": 143, "name": "background_k", "height": 182 } }, { "type": "Image", "props": { "y": 1, "x": 2, "width": 140, "name": "HeadIcon", "height": 140 } }, { "type": "Label", "props": { "y": 142, "x": 7, "width": 49, "text": "伤害", "name": "Hp_name", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#e5c64a", "align": "left" } }, { "type": "Label", "props": { "y": 162, "x": 7, "width": 49, "text": "生命", "renderType": "render", "name": "Hp_name", "height": 24, "fontSize": 18, "font": "SimHei", "color": "#e5c64a", "align": "left" } }, { "type": "Label", "props": { "y": 160, "x": 40, "width": 105, "renderType": "render", "name": "Hp", "height": 21, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "align": "center" } }, { "type": "Label", "props": { "y": 142, "x": 40, "width": 105, "renderType": "render", "name": "Hurt", "height": 21, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "align": "center" } }, { "type": "Image", "props": { "y": -1, "x": -10, "width": 41, "skin": "ui_hero/img-yingxiong-zhiwei-bg.png", "renderType": "render", "name": "IsGoWar", "height": 50 } }, { "type": "Image", "props": { "y": -1, "x": -10, "skin": "ui_hero/img-yingxiong-zhiwei-dui.png", "name": "hero_zhiwei" } }, { "type": "Image", "props": { "y": 10, "x": 110, "width": 25, "skin": "ui_hero/icon-renwu-leixing-bg.png", "renderType": "render", "name": "Hero_Type_bg", "height": 29 } }, { "type": "Image", "props": { "y": 12, "x": 117, "width": 11, "skin": "ui_hero/icon-renwu-leixing-gongji.png", "renderType": "render", "name": "Hero_Type", "height": 22 } }, { "type": "Button", "props": { "y": 138, "x": 1, "width": 147, "name": "Btn_Info", "height": 45 } }] }] }] }, { "type": "Image", "props": { "y": 324, "x": 79, "width": 100, "var": "dragpos8", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_8", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_9", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod8", "name": "mod" } }] }, { "type": "Image", "props": { "y": 241, "x": 178, "width": 100, "var": "dragpos7", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_7", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_8", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod7", "name": "mod" } }] }, { "type": "Image", "props": { "y": 175, "x": 79, "width": 100, "var": "dragpos6", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_6", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_7", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod6", "name": "mod" } }] }, { "type": "Image", "props": { "y": 324, "x": 277, "width": 100, "var": "dragpos5", "height": 150 }, "child": [{ "type": "Image", "props": { "y": -109, "x": 103, "skin": "ui_hero/img-yingxiong-duizhang-biaozhi.png" } }, { "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_5", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_6", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod5", "name": "mod" } }] }, { "type": "Image", "props": { "y": 243, "x": 374, "width": 100, "var": "dragpos4", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_4", "skin": "ui_hero/img-yingxiong-duizhang-bg.png", "name": "Pos_5", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod4", "name": "mod" } }] }, { "type": "Image", "props": { "y": 175, "x": 277, "width": 100, "var": "dragpos3", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_3", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_4", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod3", "name": "mod" } }] }, { "type": "Image", "props": { "y": 324, "x": 475, "width": 100, "var": "dragpos2", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_2", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_3", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod2", "name": "mod" } }] }, { "type": "Image", "props": { "y": 241, "x": 574, "width": 100, "var": "dragpos1", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_1", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_2", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod1", "name": "mod" } }] }, { "type": "Image", "props": { "y": 175, "x": 475, "width": 100, "var": "dragpos0", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_0", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_1", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod0", "name": "mod" } }] }, { "type": "Image", "props": { "y": 144, "x": 78, "width": 140, "var": "dragHeroIcon", "height": 140, "anchorY": 1, "anchorX": 0.5 }, "child": [{ "type": "View", "props": { "var": "dragHeroMod", "centerX": 0, "bottom": 0 } }] }, { "type": "Image", "props": { "y": 16, "width": 92, "skin": "ui_hero/img-duizhangjineng-bg-yingxiong.png", "height": 110, "centerX": -10 }, "child": [{ "type": "Label", "props": { "y": 85, "x": 8, "width": 2, "var": "L", "height": 20, "bgColor": "#ccd6c6" } }, { "type": "Label", "props": { "y": 86, "x": 13, "var": "main_skillName", "text": "队长技能", "strokeColor": "#7c6d92", "stroke": 3, "height": 20, "fontSize": 18, "font": "SimHei", "color": "#f4f4f4" } }, { "type": "Image", "props": { "y": 5, "x": 8, "width": 76, "var": "Skill_Icon", "height": 76 } }] }, { "type": "Label", "props": { "y": 16, "x": 236, "width": 459, "var": "tixing", "text": "奥法弄", "strokeColor": "#7c6d92", "stroke": 3, "height": 64, "fontSize": 18, "font": "SimHei", "color": "#fef8e9", "align": "right" } }] }] }] };
                return KickingWarUI;
            }(View));
            kicking.KickingWarUI = KickingWarUI;
        })(kicking = action.kicking || (action.kicking = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var topic;
        (function (topic) {
            var AcitonSettViewUI = /** @class */ (function (_super) {
                __extends(AcitonSettViewUI, _super);
                function AcitonSettViewUI() {
                    return _super.call(this) || this;
                }
                AcitonSettViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.topic.AcitonSettViewUI.uiView);
                };
                AcitonSettViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "name": "Other", "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "y": 159, "x": 293, "text": "挑战完成", "strokeColor": "#3b2213", "stroke": 6, "fontSize": 40, "font": "SimHei", "color": "#fef8e9", "align": "left" } }, { "type": "Label", "props": { "y": 218, "var": "my_hurt", "strokeColor": "#3b2213", "stroke": 6, "fontSize": 23, "font": "SimHei", "color": "#fef8e9", "centerX": 0, "align": "center" } }, { "type": "Label", "props": { "y": 871, "x": 288, "var": "quit_time", "text": "自动退出倒计时", "strokeColor": "#3b2213", "stroke": 6, "fontSize": 22, "font": "SimHei", "color": "#fef3ce" } }, { "type": "Button", "props": { "x": 377, "var": "Btn_quit", "stateNum": 1, "skin": "ui_pet/btn-xuanzhong-shenshou.png", "labelSize": 40, "labelFont": "SimHei", "labelColors": "#491a22", "labelBold": true, "labelAlign": "center", "label": "点击退出", "bottom": 208, "anchorY": 0.5, "anchorX": 0.5 } }] }] };
                return AcitonSettViewUI;
            }(View));
            topic.AcitonSettViewUI = AcitonSettViewUI;
        })(topic = action.topic || (action.topic = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var topic;
        (function (topic) {
            var CountdownViewUI = /** @class */ (function (_super) {
                __extends(CountdownViewUI, _super);
                function CountdownViewUI() {
                    return _super.call(this) || this;
                }
                CountdownViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.topic.CountdownViewUI.uiView);
                };
                CountdownViewUI.uiView = { "type": "View", "props": { "width": 147, "height": 189 }, "child": [{ "type": "Clip", "props": { "width": 42, "var": "model", "skin": "ui_common/img-dianji-shanghai.png", "mouseThrough": true, "index": 3, "height": 54, "clipY": 1, "clipX": 10, "centerY": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }] };
                return CountdownViewUI;
            }(View));
            topic.CountdownViewUI = CountdownViewUI;
        })(topic = action.topic || (action.topic = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var action;
    (function (action) {
        var topic;
        (function (topic) {
            var TopicViewUI = /** @class */ (function (_super) {
                __extends(TopicViewUI, _super);
                function TopicViewUI() {
                    return _super.call(this) || this;
                }
                TopicViewUI.prototype.createChildren = function () {
                    View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.action.topic.TopicViewUI.uiView);
                };
                TopicViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "var": "bg", "height": 1200 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "var": "imgbg", "mouseThrough": false, "height": 1200, "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "height": 1154, "alpha": 1 }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 750, "lineWidth": 1, "height": 1154, "fillColor": "#0c0908" } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "height": 1200, "alpha": 0.8 }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 750, "lineWidth": 1, "height": 1200, "fillColor": "#0c0908" } }] }, { "type": "Image", "props": { "y": 74, "x": 0, "width": 750, "var": "bgImg", "height": 959 } }, { "type": "Label", "props": { "y": 45, "x": 17, "width": 6, "height": 25, "bgColor": "#4a408a" } }, { "type": "Image", "props": { "y": 1, "x": 0, "width": 750, "sizeGrid": "10,24,6,0", "height": 74 }, "child": [{ "type": "Image", "props": { "y": 41, "x": 0, "width": 620, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,31,0,11", "height": 32 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 582, "width": 167, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,8,0,33", "height": 32 } }] }, { "type": "Image", "props": { "y": 39, "x": 647, "var": "btn_close", "skin": "ui_main/btn-guanbi.png" } }] }, { "type": "Label", "props": { "y": 44, "x": 46, "width": 115, "var": "attack_name", "valign": "middle", "text": "话题先锋", "height": 29, "fontSize": 26, "font": "SimHei", "color": "#feb979", "bold": false, "align": "left" } }] }, { "type": "Image", "props": { "y": 119, "x": 23, "width": 212, "name": "底图", "height": 120 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 211, "skin": "ui_action/ui-daojishi-bg-huodong.png", "sizeGrid": "0,2,0,2", "height": 45 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 211, "skin": "ui_action/ui-daojishi-jianbian-huodong.png", "sizeGrid": "0,1,0,1", "height": 45 } }, { "type": "Image", "props": { "y": 3, "x": 8, "skin": "ui_action/ui-daojishi-biao-huodong.png" } }, { "type": "Image", "props": { "y": 82, "x": 0, "width": 187, "skin": "ui_action/ui-daojishi-bg-huodong.png", "sizeGrid": "0,2,0,2", "height": 37 } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "name": "文字", "height": 1036 }, "child": [{ "type": "Label", "props": { "y": 885, "x": 86, "wordWrap": true, "width": 585, "var": "attack_point", "text": "话题点：", "leading": 8, "height": 57, "fontSize": 18, "font": "SimHei", "color": "#d6d7dd" } }, { "type": "HTMLDivElement", "props": { "y": 848, "x": 84, "width": 585, "var": "attack_instruction", "innerHTML": "玩法说明：", "height": 25 } }, { "type": "Label", "props": { "y": 758, "wordWrap": true, "width": 536, "var": "tx_reward", "text": "15点30分结算奖励", "leading": 8, "height": 33, "fontSize": 28, "font": "SimHei", "color": "#d6d7dd", "centerX": 0, "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 209, "x": 35, "wordWrap": true, "width": 188, "var": "attack_contribution", "text": "贡献值", "height": 24, "fontSize": 20, "font": "SimHei", "color": "#f4f4f4" } }, { "type": "Label", "props": { "y": 129, "x": 82, "wordWrap": true, "width": 141, "var": "txt_countdown", "text": "倒计时：60", "name": "倒计时", "height": 33, "fontSize": 27, "font": "SimHei", "color": "#f4f4f4" } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "var": "fighting", "sizeGrid": "20,20,20,20", "mouseThrough": true, "height": 1036 }, "child": [{ "type": "Box", "props": { "y": 240, "x": 0, "width": 750, "var": "target", "name": "目标层", "height": 600 } }, { "type": "Image", "props": { "y": 590, "x": 375, "width": 274, "mouseThrough": true, "height": 77, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 274, "var": "pic_end_click", "skin": "ui_action/img-jieshu-huatixianfeng.png", "height": 77 } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "pic_start_click", "skin": "ui_action/img-kaishi-huatixianfeng.png" } }, { "type": "Image", "props": { "y": 3, "x": -32, "var": "pic_point_click" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_action/img-dian-huatixianfeng.png", "scaleY": 1.5, "scaleX": 1.5 } }, { "type": "Image", "props": { "y": 0, "x": 130, "skin": "ui_action/img-dian-huatixianfeng.png", "scaleY": 1.5, "scaleX": 1.5 } }, { "type": "Image", "props": { "y": 0, "x": 260, "skin": "ui_action/img-dian-huatixianfeng.png", "scaleY": 1.5, "scaleX": 1.5 } }] }] }, { "type": "Button", "props": { "y": 990, "x": 243, "width": 316, "var": "btn_support", "stateNum": 1, "skin": "ui_action/btn-toupiao-zhichi-huodong.png", "name": "支持", "labelSize": 40, "labelFont": "SimHei", "labelColors": "#491a22", "labelBold": true, "label": "支持", "height": 85, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 990, "x": 514, "width": 316, "var": "btn_against", "stateNum": 1, "skin": "ui_action/btn-toupiao-fandui-huodong.png", "name": "反对", "labelSize": 40, "labelFont": "SimHei", "labelColors": "#491a22", "labelBold": true, "label": "反对", "height": 85, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 948, "x": 112, "width": 52, "var": "icon_win", "height": 64 }, "child": [{ "type": "Image", "props": { "skin": "ui_action/img-biaoqian-zhekou-bg.png" } }, { "type": "Image", "props": { "y": 0, "x": 52, "skin": "ui_action/img-biaoqian-zhekou-bg.png", "scaleX": -1 } }, { "type": "Label", "props": { "y": 27, "x": 28, "width": 57, "var": "win_txt", "text": "胜利", "strokeColor": "#e33b3b", "stroke": 2, "skewY": 18, "skewX": -18, "height": 38, "fontSize": 26, "font": "Microsoft YaHei", "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5 } }] }] }] }] };
                return TopicViewUI;
            }(View));
            topic.TopicViewUI = TopicViewUI;
        })(topic = action.topic || (action.topic = {}));
    })(action = ui.action || (ui.action = {}));
})(ui || (ui = {}));
(function (ui) {
    var camp;
    (function (camp) {
        var CampDonateViewUI = /** @class */ (function (_super) {
            __extends(CampDonateViewUI, _super);
            function CampDonateViewUI() {
                return _super.call(this) || this;
            }
            CampDonateViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.camp.CampDonateViewUI.uiView);
            };
            CampDonateViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "width": 586, "height": 488, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "0,0,19,0", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "y": -153, "x": -86, "top": 0, "skin": "ui_common/img-lanzituo-tongyong.png", "sizeGrid": "0,0,21,0", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": 440, "x": 68, "text": "阵营捐献获得阵营热度,阵营热度提升阵营等级", "height": 20, "fontSize": 22, "font": "SimHei", "color": "#d6d7dd", "centerX": 0, "align": "left" } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 586, "height": 50, "bgColor": "#1b2838" }, "child": [{ "type": "Button", "props": { "x": 479, "var": "Btn_Close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "centerY": 0 } }, { "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "x": 41, "text": "阵营捐献", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "centerY": 0, "align": "left" } }] }, { "type": "Image", "props": { "y": 435, "x": 25, "skin": "ui_shop/img-tanhao.png" } }, { "type": "Button", "props": { "y": 250, "x": 156, "width": 274, "var": "m_d", "stateNum": 1, "height": 364, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "money", "skin": "ui_camp/btn-junaxuan-zhenying.png" }, "child": [{ "type": "Label", "props": { "y": 166, "x": 182, "var": "num_m", "text": "20", "fontSize": 20, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 239, "x": 43, "var": "money_heat", "text": "阵营热度:  +100", "fontSize": 24, "font": "SimHei", "color": "#d6d7dd", "align": "left" } }, { "type": "Label", "props": { "y": 287, "x": 31, "width": 216, "var": "M_num", "text": "捐献10金币", "height": 26, "fontSize": 26, "font": "SimHei", "color": "#5f2904", "bold": true, "align": "center" }, "child": [{ "type": "Label", "props": { "y": 33, "x": 40, "var": "M_Times", "text": "剩余次数:  /10", "fontSize": 20, "font": "SimHei", "color": "#5f2904", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 33, "x": 134, "var": "m", "fontSize": 20, "font": "SimHei", "color": "#5f2904", "bold": true, "align": "left" } }] }, { "type": "Image", "props": { "y": 46, "x": 58, "width": 140, "skin": "ui_icon/icon_prop_015.png", "height": 140 } }] }] }, { "type": "Button", "props": { "y": 250, "x": 435, "width": 274, "var": "D_d", "stateNum": 1, "height": 364, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "Diamond", "skin": "ui_camp/btn-junaxuan-zhenying.png" }, "child": [{ "type": "Label", "props": { "y": 163, "x": 182, "var": "num_d", "text": "20", "fontSize": 20, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 236, "x": 44, "var": "D_heat", "text": "阵营热度:  +100", "fontSize": 24, "font": "SimHei", "color": "#d6d7dd", "align": "left" } }, { "type": "Label", "props": { "y": 300, "x": 63, "var": "D_num", "text": "捐献10钻石", "fontSize": 26, "font": "SimHei", "color": "#5f2904", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 65, "x": 76, "skin": "ui_icon/icon_prop_006.png" } }] }] }] }] }] };
            return CampDonateViewUI;
        }(View));
        camp.CampDonateViewUI = CampDonateViewUI;
    })(camp = ui.camp || (ui.camp = {}));
})(ui || (ui = {}));
(function (ui) {
    var camp;
    (function (camp) {
        var CampInfoViewUI = /** @class */ (function (_super) {
            __extends(CampInfoViewUI, _super);
            function CampInfoViewUI() {
                return _super.call(this) || this;
            }
            CampInfoViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.camp.CampInfoViewUI.uiView);
            };
            CampInfoViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "x": 82, "width": 587, "height": 400, "centerY": 0, "centerX": 0, "bgColor": "#c8c7c7" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 587, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 50 }, "child": [{ "type": "Button", "props": { "x": 532, "var": "Btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "centerY": 0 } }, { "type": "Label", "props": { "x": 45, "width": 105, "text": "阵营信息", "height": 31, "fontSize": 24, "font": "SimHei", "color": "#fefeff", "centerY": 0, "align": "left" } }, { "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#df8e2f" } }] }, { "type": "Button", "props": { "x": 203, "width": 180, "var": "camp_Btn_join", "stateNum": 1, "labelStrokeColor": "#095a28", "labelStroke": 3, "labelSize": 26, "labelFont": "SimHei", "labelColors": "#fefeff", "label": "加入阵营", "height": 50, "bottom": 31 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#4f7c23" } }] }, { "type": "Image", "props": { "y": 136, "x": 435, "var": "Look_member", "skin": "ui_camp/btn-changkanhengyuan-zhenying.png" } }, { "type": "Image", "props": { "y": 93, "x": 49, "width": 144, "var": "Camp_icon", "skin": "ui_main/btn-boos-ketiaozhan.png", "height": 144 } }, { "type": "Label", "props": { "y": 92, "x": 223, "width": 180, "var": "Camp_name", "height": 35, "fontSize": 30, "font": "SimHei", "color": "#225a88", "align": "left" } }, { "type": "Label", "props": { "y": 125, "x": 324, "width": 86, "var": "Camp_Level", "height": 21, "fontSize": 20, "font": "SimHei", "align": "left" } }, { "type": "Label", "props": { "y": 154, "x": 326, "width": 111, "var": "Camp_MemberNum", "height": 20, "fontSize": 20, "font": "SimHei" } }, { "type": "Label", "props": { "y": 154, "x": 223, "width": 62, "text": "阵营成员:", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#000000" } }, { "type": "Label", "props": { "y": 125, "x": 223, "width": 86, "text": "阵营等级:", "height": 21, "fontSize": 20, "font": "SimHei", "color": "#000000" } }, { "type": "Label", "props": { "x": 7, "width": 567, "height": 2, "bottom": 111, "bgColor": "#7c7a88" } }] }] }] };
            return CampInfoViewUI;
        }(View));
        camp.CampInfoViewUI = CampInfoViewUI;
    })(camp = ui.camp || (ui.camp = {}));
})(ui || (ui = {}));
(function (ui) {
    var camp;
    (function (camp) {
        var CampMainInfoUI = /** @class */ (function (_super) {
            __extends(CampMainInfoUI, _super);
            function CampMainInfoUI() {
                return _super.call(this) || this;
            }
            CampMainInfoUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.camp.CampMainInfoUI.uiView);
            };
            CampMainInfoUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 682, "skin": "ui_common/img-lanzituo-tongyong.png", "sizeGrid": "6,0,23,0", "height": 893, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 1, "x": 3, "width": 682, "height": 50, "bgColor": "#1b2838" }, "child": [{ "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#5d4565" } }, { "type": "Button", "props": { "x": 609, "var": "Btn_Close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "centerY": 0 } }, { "type": "Label", "props": { "x": 41, "text": "阵营", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "centerY": 0, "align": "left" } }, { "type": "Image", "props": { "x": 97, "var": "camp_help", "skin": "ui_action/btn-xiangqing-huodong.png", "centerY": 0 } }] }, { "type": "Label", "props": { "y": 0, "x": 0, "name": "toop" }, "child": [{ "type": "Image", "props": { "y": 62, "x": 34, "width": 144, "var": "camp_icon", "height": 144 } }, { "type": "Label", "props": { "y": 62, "x": 198, "var": "camp_name", "text": "大学生了没", "fontSize": 20, "font": "SimHei", "color": "#FEFEFF" } }, { "type": "HTMLDivElement", "props": { "y": 90, "x": 198, "var": "camp_lv", "height": 20 } }, { "type": "HTMLDivElement", "props": { "y": 118, "x": 198, "width": 200, "var": "camp_hurt", "height": 20 } }, { "type": "HTMLDivElement", "props": { "y": 146, "x": 198, "width": 180, "var": "camp_num", "height": 20 } }, { "type": "Label", "props": { "y": 71, "x": 402, "width": 1, "height": 123, "bgColor": "#7c7a88" } }, { "type": "Button", "props": { "y": 97, "x": 462, "var": "Btn_Change", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 28, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "label": "更换阵营" } }] }, { "type": "Label", "props": { "y": 225, "x": 13, "width": 662, "height": 420, "bgColor": "#34354b" }, "child": [{ "type": "Image", "props": { "y": 23, "x": 40, "skin": "ui_common/img-huawen2.png", "skewY": 180, "skewX": 180, "pivotY": 62, "pivotX": 40, "alpha": 0.2 } }, { "type": "Image", "props": { "y": 696, "x": 623, "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0, "alpha": 0.2 } }, { "type": "Image", "props": { "y": 45, "x": 11, "width": 642, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 4 }, "child": [{ "type": "Label", "props": { "y": -34, "x": 45, "width": 99, "text": "阵营信息", "height": 26, "fontSize": 22, "font": "SimHei", "color": "#e4eafe", "align": "left" } }, { "type": "Label", "props": { "y": -35, "x": 19, "width": 6, "height": 25, "bgColor": "#df8e2f" } }] }, { "type": "Panel", "props": { "y": 55, "x": 11, "width": 642, "var": "Camp_Panel", "height": 350 }, "child": [{ "type": "VBox", "props": { "y": 0, "var": "Camp_Info", "right": 0, "renderType": "render", "left": 0, "height": 330 } }] }] }, { "type": "Label", "props": { "y": 782, "width": 662, "height": 100, "fontSize": 18, "font": "SimHei", "color": "#d6d7dd", "centerX": 0 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "ui_camp/img-baibian-zhenying.png", "sizeGrid": "5,2,1,1", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "y": 9, "x": 486, "var": "Btn_CampDonate", "skin": "ui_camp/btn-juanxian-zhenying.png" }, "child": [{ "type": "Image", "props": { "y": -5, "x": -5, "var": "D_red", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Image", "props": { "y": 9, "x": 116, "var": "Btn_CampPlay", "skin": "ui_camp/btn-chengyuan-zhenying.png" } }, { "type": "Image", "props": { "y": 9, "x": 303, "var": "Btn_CampRank", "skin": "ui_camp/btn-paihangbang-zhenying.png" } }] }, { "type": "HTMLDivElement", "props": { "y": 662, "x": 45, "width": 589, "var": "camp_hot", "innerHTML": "htmlText", "height": 79 } }] }] }] };
            return CampMainInfoUI;
        }(View));
        camp.CampMainInfoUI = CampMainInfoUI;
    })(camp = ui.camp || (ui.camp = {}));
})(ui || (ui = {}));
(function (ui) {
    var camp;
    (function (camp) {
        var CampMemberViewUI = /** @class */ (function (_super) {
            __extends(CampMemberViewUI, _super);
            function CampMemberViewUI() {
                return _super.call(this) || this;
            }
            CampMemberViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.camp.CampMemberViewUI.uiView);
            };
            CampMemberViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "background_label", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "x": 25, "width": 701, "height": 994, "centerY": 0, "centerX": 0, "bgColor": "#a2b0c7", "alpha": 1 }, "child": [{ "type": "Label", "props": { "y": 1, "x": 0, "width": 701, "height": 50, "bgColor": "#1b2838", "alpha": 1 }, "child": [{ "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#5d4565", "alpha": 1 } }, { "type": "Label", "props": { "x": 42, "text": "成员列表", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "centerY": 0, "align": "left" } }, { "type": "Image", "props": { "x": 636, "var": "Btn_close", "skin": "ui_main/btn-guanbi.png", "centerY": 0 } }] }, { "type": "Label", "props": { "y": 60, "x": 0, "width": 701, "height": 46, "bgColor": "#5a456a", "alpha": 1 }, "child": [{ "type": "Label", "props": { "y": 12, "x": 49, "width": 50, "text": "排名", "name": "rank", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 172, "width": 50, "text": "名字", "name": "name", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 398, "width": 50, "text": "捐献", "name": "donate", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 563, "width": 50, "text": "关卡", "name": "su", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }, { "type": "Label", "props": { "y": 7, "x": 110, "width": 2, "height": 34, "bgColor": "#4e3c5d", "alpha": 1 } }, { "type": "Label", "props": { "y": 7, "x": 294, "width": 2, "height": 34, "bgColor": "#4e3c5d", "alpha": 1 } }, { "type": "Label", "props": { "y": 7, "x": 511, "width": 2, "height": 34, "bgColor": "#4e3c5d", "alpha": 1 } }] }, { "type": "List", "props": { "y": 115, "x": 35, "width": 627, "var": "Camp_playlist", "spaceY": 8, "height": 754, "alpha": 1 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 627, "renderType": "render", "height": 92, "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 629, "skin": "ui_rank/img-zhihou-paiming.png", "sizeGrid": "0,6,0,78", "name": "bg", "height": 92 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 629, "skin": "ui_rank/img-1-paiming.png", "sizeGrid": "0,6,0,78", "name": "Rank_Num", "height": 92 } }, { "type": "Text", "props": { "y": 2, "x": 0, "width": 77, "valign": "middle", "text": "1", "name": "rankNum", "height": 93, "fontSize": 46, "font": "Helvetica", "color": "#e6e6eb", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 12, "x": 259, "width": 2, "height": 70, "bgColor": "#36374f", "alpha": 1 } }, { "type": "Label", "props": { "y": 36, "x": 112, "width": 69, "text": "玩家id", "name": "play_Name", "height": 29, "fontSize": 22, "font": "SimHei", "color": "#fefeff", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 476, "width": 2, "height": 70, "bgColor": "#36374f", "alpha": 1 } }, { "type": "Label", "props": { "y": 36, "x": 332, "width": 69, "text": "1000", "name": "play_Donate", "height": 29, "fontSize": 22, "font": "SimHei", "color": "#fefeff", "align": "center" } }, { "type": "Label", "props": { "y": 36, "x": 522, "width": 69, "text": "1000", "name": "play_Customs", "height": 29, "fontSize": 22, "font": "SimHei", "color": "#fefeff", "align": "center" } }, { "type": "Label", "props": { "width": 627, "name": "background_label", "height": 92 } }] }] }, { "type": "Image", "props": { "y": 27, "var": "arrow_up", "skin": "ui_camp/btn-jiantou-tongyong.png", "centerX": 0, "alpha": 1 } }, { "type": "Label", "props": { "y": 894, "x": 35, "width": 626, "height": 94, "bgColor": "#5a456a", "alpha": 1 }, "child": [{ "type": "Label", "props": { "y": 13, "x": 10, "wordWrap": true, "width": 66, "var": "my_rank", "padding": "18", "height": 78, "fontSize": 28, "font": "SimHei", "color": "#fefeff", "align": "left" } }, { "type": "Label", "props": { "y": 30, "x": 80, "width": 172, "var": "camp_name", "height": 25, "fontSize": 22, "font": "Microsoft YaHei", "color": "#fefeff", "align": "center" } }, { "type": "Label", "props": { "y": 10, "x": 259, "width": 2, "height": 70, "bgColor": "#36374f" } }, { "type": "Label", "props": { "y": 11, "x": 476, "width": 2, "height": 70, "bgColor": "#36374f", "alpha": 1 } }, { "type": "Label", "props": { "y": 40, "x": 354, "width": 0, "var": "play_Donate", "height": 0, "fontSize": 22, "font": "SimHei", "color": "#fefeff" } }, { "type": "Label", "props": { "y": 43, "x": 548, "width": 0, "var": "play_su", "height": 0, "fontSize": 22, "font": "SimHei", "color": "#fefeff" } }] }, { "type": "Image", "props": { "y": 895, "x": 305, "var": "arrow_down", "skin": "ui_camp/btn-jiantou-tongyong.png", "skewX": 180, "centerX": 0, "alpha": 1 } }] }] }] };
            return CampMemberViewUI;
        }(View));
        camp.CampMemberViewUI = CampMemberViewUI;
    })(camp = ui.camp || (ui.camp = {}));
})(ui || (ui = {}));
(function (ui) {
    var camp;
    (function (camp) {
        var CampPlayInfoUI = /** @class */ (function (_super) {
            __extends(CampPlayInfoUI, _super);
            function CampPlayInfoUI() {
                return _super.call(this) || this;
            }
            CampPlayInfoUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.camp.CampPlayInfoUI.uiView);
            };
            CampPlayInfoUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "width": 587, "height": 614, "centerY": 0, "centerX": 0, "bgColor": "#c8c7c7" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 587, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 50 }, "child": [{ "type": "Image", "props": { "x": 479, "var": "Btn_Close", "skin": "ui_main/btn-guanbi.png", "centerY": 0 } }, { "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#df8e2f" } }, { "type": "Label", "props": { "x": 44, "text": "欢迎回来", "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "centerY": 0, "align": "left" } }] }, { "type": "Image", "props": { "y": 63, "x": 40, "skin": "ui_common/img-huawen2.png", "skewY": 180, "skewX": 180, "pivotY": 62, "pivotX": 40, "alpha": 0.2 } }, { "type": "Image", "props": { "y": 61, "x": 20, "width": 70, "var": "play_headIcon", "skin": "ui_head/icon-tou-lydd.png", "height": 70 } }, { "type": "Label", "props": { "y": 61, "x": 110, "width": 180, "var": "Play_Name", "height": 40, "fontSize": 30, "font": "SimHei" } }, { "type": "Image", "props": { "y": 165, "x": 20, "width": 546, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 40 }, "child": [{ "type": "Label", "props": { "y": 11, "x": 21, "var": "camp", "text": "所在阵营", "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "align": "left" } }, { "type": "Label", "props": { "y": 8, "x": 375, "var": "camp_name", "text": "大学生了没吧", "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "align": "right" } }] }, { "type": "Image", "props": { "y": 225, "x": 20, "width": 546, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 40 }, "child": [{ "type": "Label", "props": { "y": 11, "x": 21, "var": "guanka", "text": "最高通关", "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "align": "left" } }, { "type": "Label", "props": { "y": 8, "x": 375, "var": "guanka_num", "text": "大学生了没吧", "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "align": "right" } }] }, { "type": "Image", "props": { "y": 285, "x": 20, "width": 546, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 40 }, "child": [{ "type": "Label", "props": { "y": 11, "x": 21, "var": "pet", "text": "解锁宠物", "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "align": "left" } }, { "type": "Label", "props": { "y": 8, "x": 375, "var": "pet_num", "text": "大学生了没吧", "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "align": "right" } }] }, { "type": "Image", "props": { "y": 345, "x": 20, "width": 546, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 40 }, "child": [{ "type": "Label", "props": { "y": 11, "x": 21, "var": "hero", "text": "解锁英雄", "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "align": "left" } }, { "type": "Label", "props": { "y": 8, "x": 375, "var": "hero_num", "text": "大学生了没吧", "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "align": "right" } }] }, { "type": "Image", "props": { "y": 405, "x": 20, "width": 546, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 40 }, "child": [{ "type": "Label", "props": { "y": 11, "x": 21, "var": "time", "text": "上次在线时间", "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "align": "left" } }, { "type": "Label", "props": { "y": 8, "x": 375, "var": "time_num", "text": "大学生了没吧", "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "align": "right" } }] }, { "type": "Image", "props": { "y": 871, "x": 585, "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0, "alpha": 0.2 } }, { "type": "Label", "props": { "y": 503, "x": 7, "width": 568, "height": 2, "bgColor": "#7c7a88" } }, { "type": "Button", "props": { "y": 524, "x": 209, "var": "btn_sure", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 30, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "label": "确定" } }] }] }] };
            return CampPlayInfoUI;
        }(View));
        camp.CampPlayInfoUI = CampPlayInfoUI;
    })(camp = ui.camp || (ui.camp = {}));
})(ui || (ui = {}));
(function (ui) {
    var camp;
    (function (camp) {
        var CampRankViewUI = /** @class */ (function (_super) {
            __extends(CampRankViewUI, _super);
            function CampRankViewUI() {
                return _super.call(this) || this;
            }
            CampRankViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.camp.CampRankViewUI.uiView);
            };
            CampRankViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": 10, "x": 10, "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "x": 25, "width": 701, "height": 935, "centerY": 0, "centerX": 0, "bgColor": "#a2b0c7" }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 701, "height": 50, "bgColor": "#1b2838", "alpha": 1 }, "child": [{ "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#5d4565" } }, { "type": "Label", "props": { "x": 42, "text": "阵营排名", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "centerY": 0, "align": "left" } }, { "type": "Button", "props": { "x": 636, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "centerY": 0 } }] }, { "type": "Label", "props": { "y": 51, "x": 0, "width": 701, "height": 46, "bgColor": "#5a456a", "alpha": 1 }, "child": [{ "type": "Label", "props": { "y": 12, "x": 49, "width": 50, "text": "排名", "name": "rank", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 172, "width": 50, "text": "阵营", "name": "name", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 368, "width": 50, "text": "成员", "name": "PLAY", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }, { "type": "Label", "props": { "y": 7, "x": 110, "width": 2, "height": 34, "bgColor": "#4e3c5d", "alpha": 1 } }, { "type": "Label", "props": { "y": 7, "x": 294, "width": 2, "height": 34, "bgColor": "#4e3c5d", "alpha": 1 } }, { "type": "Label", "props": { "y": 7, "x": 556, "width": 2, "height": 34, "bgColor": "#4e3c5d", "alpha": 1 } }, { "type": "Label", "props": { "y": 12, "x": 558, "width": 50, "text": "等级", "name": "PLAY", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }] }, { "type": "List", "props": { "y": 108, "x": 34, "width": 627, "var": "camp_list", "spaceY": 6, "height": 732 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 627, "renderType": "render", "height": 92 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 629, "skin": "ui_rank/img-zhihou-paiming.png", "sizeGrid": "0,6,0,78", "name": "bg", "height": 92 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 629, "skin": "ui_rank/img-1-paiming.png", "sizeGrid": "0,6,0,78", "name": "Rank_Num", "height": 98 } }, { "type": "Label", "props": { "y": 35, "x": 90, "width": 150, "text": "大学生吧", "name": "Camp_Name", "height": 25, "fontSize": 22, "font": "SimHei", "color": "#fefeff", "align": "center" } }, { "type": "Label", "props": { "y": 12, "x": 257, "width": 2, "height": 70, "bgColor": "#36374f" } }, { "type": "Image", "props": { "y": 31, "x": 279, "skin": "ui_camp/icon-chengyuanshuliang-zhenying.png" } }, { "type": "HTMLDivElement", "props": { "y": 35, "x": 343, "width": 100, "name": "Camp_play_num", "height": 25 } }, { "type": "Text", "props": { "y": 2, "x": 0, "width": 77, "valign": "middle", "text": "1", "name": "rankNum", "height": 93, "fontSize": 46, "font": "Helvetica", "color": "#e6e6eb", "bold": true, "align": "center" } }, { "type": "Label", "props": { "width": 148, "right": 0, "height": 92, "bgColor": "#242243", "alpha": 0.6 } }, { "type": "Image", "props": { "skin": "ui_common/img-huawen2.png", "right": 0, "alpha": 0.6 } }, { "type": "Button", "props": { "y": 26, "x": 487, "visible": false, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "Btn_Change", "labelSize": 25, "labelFont": "SimHei", "labelColors": "#fefeff", "label": "更换", "alpha": 1 } }, { "type": "Label", "props": { "y": 35, "x": 503, "width": 100, "name": "camp_lv", "height": 25, "fontSize": 20, "font": "SimHei", "color": "#fefeff", "align": "center" } }] }] }, { "type": "Image", "props": { "y": 845, "x": 35, "width": 626, "skin": "ui_rank/img-zhihou-paiming.png", "sizeGrid": "0,6,0,78", "height": 94 }, "child": [{ "type": "Label", "props": { "y": 33, "x": 87, "var": "my_campname", "text": "大学生了没吧", "fontSize": 24, "font": "SimHei", "color": "#fefeff", "align": "center" } }, { "type": "Label", "props": { "y": 13, "x": 259, "width": 2, "height": 70, "bgColor": "#36374f" } }, { "type": "Image", "props": { "y": 30, "x": 287, "skin": "ui_camp/icon-chengyuanshuliang-zhenying.png" } }, { "type": "HTMLDivElement", "props": { "y": 36, "x": 353, "width": 100, "var": "camp_num", "innerHTML": "1000/1000", "height": 20 } }, { "type": "Text", "props": { "y": 0, "x": 0, "width": 77, "var": "camp_rank", "valign": "middle", "text": "1", "height": 93, "fontSize": 46, "font": "Helvetica", "color": "#e6e6eb", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 36, "x": 498, "width": 100, "var": "camp_lv", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#fefeff", "align": "center" } }] }] }] }] };
            return CampRankViewUI;
        }(View));
        camp.CampRankViewUI = CampRankViewUI;
    })(camp = ui.camp || (ui.camp = {}));
})(ui || (ui = {}));
(function (ui) {
    var camp;
    (function (camp) {
        var CampViewUI = /** @class */ (function (_super) {
            __extends(CampViewUI, _super);
            function CampViewUI() {
                return _super.call(this) || this;
            }
            CampViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.camp.CampViewUI.uiView);
            };
            CampViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1108 }, "child": [{ "type": "Label", "props": { "var": "bg", "top": 0, "right": 0, "left": 0, "bottom": 0, "alpha": 1 }, "child": [{ "type": "Label", "props": { "y": 34, "right": 0, "left": 0, "height": 50, "bgColor": "#1b2838", "alpha": 1 }, "child": [{ "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#5d4565", "alpha": 1 } }, { "type": "Label", "props": { "x": 40, "text": "加入阵营", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "centerY": 0, "bold": true, "align": "left" } }, { "type": "Button", "props": { "x": 655, "var": "Btn_Close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "centerY": 0 } }] }, { "type": "Label", "props": { "y": 83, "right": 0, "left": 0, "height": 1035, "bgColor": "#5a456a" }, "child": [{ "type": "Image", "props": { "y": 0, "x": -16, "skin": "ui_common/img-huawen1.png" } }, { "type": "Label", "props": { "y": 12, "x": 422, "text": "成员", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd" } }, { "type": "Label", "props": { "y": 12, "x": 142, "text": "阵营", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd" } }, { "type": "Label", "props": { "y": 7, "x": 319, "width": 2, "height": 34, "bgColor": "#4c3a5a", "alpha": 1 } }, { "type": "Label", "props": { "y": 7, "x": 581, "width": 2, "height": 34, "bgColor": "#4c3a5a", "alpha": 1 } }] }, { "type": "Label", "props": { "y": 128, "right": 10, "left": 10, "height": 981, "bgColor": "#a2b0c7", "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 84, "x": 80, "skin": "ui_common/img-huawen2.png", "scaleY": -1, "scaleX": -1 } }, { "type": "Image", "props": { "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0 } }] }, { "type": "List", "props": { "y": 138, "var": "Camp_List", "spaceY": 6, "right": 20, "repeatY": 30, "left": 20, "height": 964 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 711, "renderType": "render", "height": 86 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 711, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 86 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 86, "name": "Camp_Icon", "height": 86 } }, { "type": "Label", "props": { "x": 107, "width": 180, "name": "Camp_Name", "height": 30, "fontSize": 24, "font": "SimHei", "color": "#fefeff", "centerY": 0, "align": "center" } }, { "type": "Label", "props": { "x": 298, "width": 2, "height": 70, "centerY": 0, "bgColor": "# 6f394d" } }, { "type": "Image", "props": { "y": 30, "x": 344, "skin": "ui_camp/icon-chengyuanshuliang-zhenying.png" } }, { "type": "HTMLDivElement", "props": { "y": 30, "x": 398, "width": 133, "name": "Camp_PalyNum", "height": 30 } }, { "type": "Label", "props": { "width": 148, "right": 0, "height": 86, "bgColor": "#242243", "alpha": 0.6 } }, { "type": "Image", "props": { "width": 64, "skin": "ui_common/img-huawen2.png", "right": 0, "height": 67, "bottom": 0, "alpha": 0.6 } }, { "type": "Button", "props": { "y": 20, "x": 574, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "Btn_join", "labelSize": 26, "labelFont": "SimHei", "labelColors": "#fefeff", "label": "加入", "alpha": 1 } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 575, "name": "Camp_Info", "height": 86 } }] }] }, { "type": "Image", "props": { "y": 1100, "var": "arrow_down", "skin": "ui_camp/btn-jiantou-tongyong.png", "scaleY": -1, "centerX": 0 } }, { "type": "Image", "props": { "y": 98, "var": "arrow_up", "skin": "ui_camp/btn-jiantou-tongyong.png", "centerX": 0 } }] }] };
            return CampViewUI;
        }(View));
        camp.CampViewUI = CampViewUI;
    })(camp = ui.camp || (ui.camp = {}));
})(ui || (ui = {}));
(function (ui) {
    var camp;
    (function (camp) {
        var JoinCampTipUI = /** @class */ (function (_super) {
            __extends(JoinCampTipUI, _super);
            function JoinCampTipUI() {
                return _super.call(this) || this;
            }
            JoinCampTipUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.camp.JoinCampTipUI.uiView);
            };
            JoinCampTipUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": 10, "x": 10, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Label", "props": { "width": 587, "height": 598, "centerY": 0, "centerX": 0, "bgColor": "#c8c7c7" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 587, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "sizeGrid": "1,0,1,0", "height": 50 }, "child": [{ "type": "Label", "props": { "x": 45, "width": 105, "text": "加入阵营", "height": 31, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "centerY": 0, "align": "left" } }, { "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#df8e2f" } }, { "type": "Button", "props": { "x": 534, "var": "btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "centerY": 0 } }] }, { "type": "Image", "props": { "y": 72, "x": 40, "skin": "ui_common/img-huawen2.png", "skewY": 180, "skewX": 180, "pivotY": 62, "pivotX": 40, "alpha": 0.2 } }, { "type": "Image", "props": { "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0, "alpha": 0.2 } }, { "type": "Label", "props": { "y": 487, "x": 10, "width": 568, "height": 2, "color": "500", "bgColor": "#7c7a88" } }, { "type": "Label", "props": { "y": 281, "x": 42, "text": "加入一个阵营", "fontSize": 22, "font": "SimHei", "color": "#225a88", "bold": true } }, { "type": "Label", "props": { "y": 321, "x": 38, "wordWrap": true, "width": 522, "var": "camp_text", "height": 102, "fontSize": 20, "font": "SimHei", "color": "#49495b", "align": "left" } }, { "type": "Button", "props": { "y": 515, "x": 326, "width": 180, "var": "btn_jioncamp", "stateNum": 1, "labelStrokeColor": "#095a28", "labelStroke": 3, "labelSize": 26, "labelFont": "SimHei", "labelColors": "#fefeff", "label": "加入阵营", "height": 50 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#4f7c23" } }] }, { "type": "Button", "props": { "y": 515, "x": 88, "width": 180, "var": "btn_cancel", "stateNum": 1, "labelStrokeColor": "#6a3e14", "labelStroke": 3, "labelSize": 26, "labelFont": "SimHei", "labelColors": "#fefeff", "label": "不再提示", "height": 50 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#8a712e" } }] }, { "type": "Image", "props": { "y": 54, "x": 13, "skin": "ui_camp/img-jiaru-hua-zhenying.png" } }] }] };
            return JoinCampTipUI;
        }(View));
        camp.JoinCampTipUI = JoinCampTipUI;
    })(camp = ui.camp || (ui.camp = {}));
})(ui || (ui = {}));
(function (ui) {
    var camp;
    (function (camp) {
        var ReplaceCampViewUI = /** @class */ (function (_super) {
            __extends(ReplaceCampViewUI, _super);
            function ReplaceCampViewUI() {
                return _super.call(this) || this;
            }
            ReplaceCampViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.camp.ReplaceCampViewUI.uiView);
            };
            ReplaceCampViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "text": "label", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "x": 25, "width": 701, "height": 935, "centerY": 0, "centerX": 0, "bgColor": "#a2b0c7" }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 701, "height": 50, "bgColor": "#1b2838", "alpha": 1 }, "child": [{ "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#5d4565" } }, { "type": "Label", "props": { "x": 42, "text": "更换阵营", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "centerY": 0, "align": "left" } }, { "type": "Button", "props": { "x": 636, "var": "Btn_Close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "centerY": 0 } }] }, { "type": "Label", "props": { "y": 51, "x": 0, "width": 701, "height": 46, "bgColor": "#5a456a", "alpha": 1 }, "child": [{ "type": "Label", "props": { "y": 12, "x": 49, "width": 50, "text": "热度", "name": "rank", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 172, "width": 50, "text": "阵营", "name": "name", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 398, "width": 50, "text": "成员", "name": "donate", "height": 29, "fontSize": 24, "font": "SimHei", "color": "#bebbf8", "align": "left" } }, { "type": "Label", "props": { "y": 7, "x": 110, "width": 2, "height": 34, "bgColor": "#4e3c5d", "alpha": 1 } }, { "type": "Label", "props": { "y": 7, "x": 294, "width": 2, "height": 34, "bgColor": "#4e3c5d", "alpha": 1 } }, { "type": "Label", "props": { "y": 7, "x": 556, "width": 2, "height": 34, "bgColor": "#4e3c5d", "alpha": 1 } }] }, { "type": "List", "props": { "y": 108, "x": 34, "width": 627, "var": "Camp_List", "spaceY": 6, "height": 732 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 627, "renderType": "render", "height": 92 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 629, "skin": "ui_rank/img-zhihou-paiming.png", "sizeGrid": "0,6,0,78", "name": "bg", "height": 92 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 629, "skin": "ui_rank/img-1-paiming.png", "sizeGrid": "0,6,0,78", "name": "Rank_Num", "height": 98 } }, { "type": "Label", "props": { "y": 35, "x": 81, "width": 173, "text": "大学生吧", "name": "Camp_Name", "height": 25, "fontSize": 22, "font": "SimHei", "color": "#fefeff", "align": "center" } }, { "type": "Label", "props": { "y": 12, "x": 257, "width": 2, "height": 70, "bgColor": "#36374f" } }, { "type": "Image", "props": { "y": 31, "x": 279, "skin": "ui_camp/icon-chengyuanshuliang-zhenying.png" } }, { "type": "HTMLDivElement", "props": { "y": 35, "x": 327, "width": 145, "name": "Camp_play_num", "height": 25 } }, { "type": "Text", "props": { "y": 2, "x": 0, "width": 77, "valign": "middle", "text": "1", "name": "rankNum", "height": 93, "fontSize": 46, "font": "Helvetica", "color": "#e6e6eb", "bold": true, "align": "center" } }, { "type": "Label", "props": { "width": 148, "right": 0, "height": 92, "bgColor": "#242243", "alpha": 0.6 } }, { "type": "Image", "props": { "skin": "ui_common/img-huawen2.png", "right": 0, "alpha": 0.6 } }, { "type": "Button", "props": { "y": 26, "x": 487, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "Btn_Change", "labelSize": 26, "labelFont": "SimHei", "labelColors": "#fefeff", "label": "更换", "alpha": 1 } }] }] }, { "type": "Image", "props": { "y": 845, "x": 35, "width": 626, "skin": "ui_rank/img-zhihou-paiming.png", "sizeGrid": "0,6,0,78", "height": 94 }, "child": [{ "type": "Label", "props": { "y": 33, "x": 87, "var": "camp_Name", "text": "大学生了没吧", "fontSize": 24, "font": "SimHei", "color": "#fefeff", "align": "center" } }, { "type": "Label", "props": { "y": 13, "x": 259, "width": 2, "height": 70, "bgColor": "#36374f" } }, { "type": "Image", "props": { "y": 30, "x": 287, "skin": "ui_camp/icon-chengyuanshuliang-zhenying.png" } }, { "type": "HTMLDivElement", "props": { "y": 36, "x": 353, "width": 145, "var": "camp_num", "innerHTML": "1000/1000", "height": 20 } }, { "type": "Text", "props": { "y": 0, "x": 0, "width": 77, "var": "rankNum", "valign": "middle", "text": "1", "height": 93, "fontSize": 46, "font": "Helvetica", "color": "#e6e6eb", "bold": true, "align": "center" } }] }] }] }] };
            return ReplaceCampViewUI;
        }(View));
        camp.ReplaceCampViewUI = ReplaceCampViewUI;
    })(camp = ui.camp || (ui.camp = {}));
})(ui || (ui = {}));
(function (ui) {
    var camp;
    (function (camp) {
        var ReplaceTipViewUI = /** @class */ (function (_super) {
            __extends(ReplaceTipViewUI, _super);
            function ReplaceTipViewUI() {
                return _super.call(this) || this;
            }
            ReplaceTipViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.camp.ReplaceTipViewUI.uiView);
            };
            ReplaceTipViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "text": "label", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "width": 587, "height": 400, "centerY": 0, "centerX": 0, "bgColor": "#c8c7c7" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 587, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 50 }, "child": [{ "type": "Button", "props": { "x": 532, "var": "Btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "centerY": 0 } }, { "type": "Label", "props": { "x": 45, "width": 105, "text": "阵营信息", "height": 31, "fontSize": 24, "font": "SimHei", "color": "#fefeff", "centerY": 0, "align": "left" } }, { "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#df8e2f" } }] }, { "type": "Image", "props": { "y": 136, "x": 435, "var": "look_play", "skin": "ui_camp/btn-changkanhengyuan-zhenying.png" } }, { "type": "Image", "props": { "y": 93, "x": 49, "width": 144, "var": "camp_icon", "skin": "ui_main/btn-boos-ketiaozhan.png", "height": 144 } }, { "type": "Label", "props": { "y": 92, "x": 223, "width": 180, "var": "camp_name", "height": 35, "fontSize": 30, "font": "SimHei", "color": "#225a88", "align": "left" } }, { "type": "Label", "props": { "y": 154, "x": 223, "width": 62, "text": "阵营成员:", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#000000" }, "child": [{ "type": "Label", "props": { "y": 0, "x": 103, "width": 111, "var": "camp_playnum", "height": 20, "fontSize": 20, "font": "SimHei" } }] }, { "type": "Label", "props": { "y": 125, "x": 223, "width": 86, "text": "阵营等级:", "height": 21, "fontSize": 20, "font": "SimHei", "color": "#000000" }, "child": [{ "type": "Label", "props": { "y": 0, "x": 101, "width": 86, "var": "camp_lv", "height": 21, "fontSize": 20, "font": "SimHei", "align": "left" } }] }, { "type": "Label", "props": { "x": 7, "width": 567, "height": 2, "bottom": 111, "bgColor": "#7c7a88" } }, { "type": "Label", "props": { "y": 185, "x": 223, "width": 86, "text": "阵营热度:", "height": 21, "fontSize": 20, "font": "SimHei", "color": "#000000" }, "child": [{ "type": "Label", "props": { "y": 0, "x": 101, "width": 86, "var": "camp_hot", "height": 21, "fontSize": 20, "font": "SimHei", "align": "left" } }] }, { "type": "Button", "props": { "y": 815, "x": 203, "width": 180, "var": "btn_change", "stateNum": 1, "labelStrokeColor": "#095a28", "labelStroke": 3, "labelSize": 26, "labelFont": "SimHei", "labelColors": "#fefeff", "label": "更换阵营", "height": 50, "centerX": 0, "bottom": 31 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#4f7c23" } }] }, { "type": "HTMLDivElement", "props": { "y": 289, "x": 243, "width": 100, "var": "DiamondNUm", "height": 29 } }] }] }] };
            return ReplaceTipViewUI;
        }(View));
        camp.ReplaceTipViewUI = ReplaceTipViewUI;
    })(camp = ui.camp || (ui.camp = {}));
})(ui || (ui = {}));
(function (ui) {
    var Chat;
    (function (Chat) {
        var ChatFaceResViewUI = /** @class */ (function (_super) {
            __extends(ChatFaceResViewUI, _super);
            function ChatFaceResViewUI() {
                return _super.call(this) || this;
            }
            ChatFaceResViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.Chat.ChatFaceResViewUI.uiView);
            };
            ChatFaceResViewUI.uiView = { "type": "View", "props": { "width": 750, "mouseThrough": false, "mouseEnabled": true, "height": 246 }, "child": [{ "type": "Image", "props": { "x": 0, "width": 750, "skin": "ui_chat/img-biaoqingtuo-liaotian.png", "sizeGrid": "20,20,20,20", "mouseThrough": false, "mouseEnabled": true, "height": 246 }, "child": [{ "type": "Image", "props": { "y": 78, "var": "lefts", "skin": "ui_camp/btn-jiantou-tongyong.png", "scaleY": -1, "rotation": 90, "anchorY": 0, "anchorX": 0 } }, { "type": "Image", "props": { "y": 78, "x": 749, "var": "rights", "skin": "ui_camp/btn-jiantou-tongyong.png", "rotation": 90, "anchorY": 0, "anchorX": 0 } }, { "type": "List", "props": { "x": 54, "width": 644, "var": "list", "top": 0, "renderType": "render", "bottom": 0 }, "child": [{ "type": "Box", "props": { "x": 0, "width": 644, "top": 0, "renderType": "render", "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 32, "x": 26, "width": 45, "name": "item0", "height": 45 } }, { "type": "Image", "props": { "y": 32, "x": 86, "width": 45, "name": "item1", "height": 45 } }, { "type": "Image", "props": { "y": 32, "x": 146, "width": 45, "name": "item2", "height": 45 } }, { "type": "Image", "props": { "y": 32, "x": 206, "width": 45, "name": "item3", "height": 45 } }, { "type": "Image", "props": { "y": 32, "x": 266, "width": 45, "name": "item4", "height": 45 } }, { "type": "Image", "props": { "y": 32, "x": 327, "width": 45, "name": "item5", "height": 45 } }, { "type": "Image", "props": { "y": 32, "x": 387, "width": 45, "name": "item6", "height": 45 } }, { "type": "Image", "props": { "y": 32, "x": 447, "width": 45, "name": "item7", "height": 45 } }, { "type": "Image", "props": { "y": 32, "x": 507, "width": 45, "name": "item8", "height": 45 } }, { "type": "Image", "props": { "y": 32, "x": 567, "width": 45, "name": "item9", "height": 45 } }, { "type": "Image", "props": { "y": 102, "x": 26, "width": 45, "name": "item10", "height": 45 } }, { "type": "Image", "props": { "y": 102, "x": 86, "width": 45, "name": "item11", "height": 45 } }, { "type": "Image", "props": { "y": 102, "x": 146, "width": 45, "name": "item12", "height": 45 } }, { "type": "Image", "props": { "y": 102, "x": 206, "width": 45, "name": "item13", "height": 45 } }, { "type": "Image", "props": { "y": 102, "x": 266, "width": 45, "name": "item14", "height": 45 } }, { "type": "Image", "props": { "y": 102, "x": 327, "width": 45, "name": "item15", "height": 45 } }, { "type": "Image", "props": { "y": 102, "x": 387, "width": 45, "name": "item16", "height": 45 } }, { "type": "Image", "props": { "y": 102, "x": 447, "width": 45, "name": "item17", "height": 45 } }, { "type": "Image", "props": { "y": 102, "x": 507, "width": 45, "name": "item18", "height": 45 } }, { "type": "Image", "props": { "y": 102, "x": 567, "width": 45, "name": "item19", "height": 45 } }, { "type": "Image", "props": { "y": 172, "x": 26, "width": 45, "name": "item20", "height": 45 } }, { "type": "Image", "props": { "y": 172, "x": 86, "width": 45, "name": "item21", "height": 45 } }, { "type": "Image", "props": { "y": 172, "x": 146, "width": 45, "name": "item22", "height": 45 } }, { "type": "Image", "props": { "y": 172, "x": 206, "width": 45, "name": "item23", "height": 45 } }, { "type": "Image", "props": { "y": 172, "x": 266, "width": 45, "name": "item24", "height": 45 } }, { "type": "Image", "props": { "y": 172, "x": 327, "width": 45, "name": "item25", "height": 45 } }, { "type": "Image", "props": { "y": 172, "x": 387, "width": 45, "name": "item26", "height": 45 } }, { "type": "Image", "props": { "y": 172, "x": 447, "width": 45, "name": "item27", "height": 45 } }, { "type": "Image", "props": { "y": 172, "x": 507, "width": 45, "name": "item28", "height": 45 } }, { "type": "Image", "props": { "y": 172, "x": 567, "width": 45, "name": "item29", "height": 45 } }] }] }] }] };
            return ChatFaceResViewUI;
        }(View));
        Chat.ChatFaceResViewUI = ChatFaceResViewUI;
    })(Chat = ui.Chat || (ui.Chat = {}));
})(ui || (ui = {}));
(function (ui) {
    var Chat;
    (function (Chat) {
        var ChatLineViewUI = /** @class */ (function (_super) {
            __extends(ChatLineViewUI, _super);
            function ChatLineViewUI() {
                return _super.call(this) || this;
            }
            ChatLineViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.Chat.ChatLineViewUI.uiView);
            };
            ChatLineViewUI.uiView = { "type": "View", "props": { "width": 600, "height": 128 }, "child": [{ "type": "Box", "props": { "x": 25, "width": 600, "height": 128 }, "child": [{ "type": "Image", "props": { "y": 16, "x": 2, "width": 98, "skin": "ui_chat/img-touxiangtuo-liaotian.png", "sizeGrid": "0,39,0,1", "height": 98 }, "child": [{ "type": "Image", "props": { "y": 4, "x": 4, "width": 90, "var": "headBg", "skin": "ui_hero/img-lanpinzhikuang.png", "height": 90 } }, { "type": "Image", "props": { "y": 5, "x": 5, "width": 86, "var": "headImage", "skin": "ui_head/icon-tou-lydd.png", "height": 86 } }] }, { "type": "Image", "props": { "y": 35, "x": 108, "width": 480, "var": "downBg", "skin": "ui_chat/img-duihuakuang-liaotian.png", "sizeGrid": "9,10,18,10", "height": 86 }, "child": [{ "type": "Image", "props": { "y": 28, "x": -4, "skin": "ui_chat/img-sanjiao-liaotian.png" } }, { "type": "HTMLDivElement", "props": { "y": 11, "x": 17, "width": 440, "var": "textfieldDown", "innerHTML": "发生fdfd的范德萨范德萨发的发窘的设计开发的时空距离范德萨范德萨发生的发生的副驾驶的肌肤的设计考虑空间发了圣诞节覅觉得四架飞机的所发生的", "height": 58 } }] }, { "type": "Label", "props": { "y": 25, "x": 564, "var": "timeLabel", "text": "00:00:00", "fontSize": 20, "font": "SimHei", "color": "#5a456a", "anchorY": 0.5, "anchorX": 1, "align": "right" } }, { "type": "Label", "props": { "y": 25, "x": 115, "var": "channelLabel", "text": "【仙盟】", "fontSize": 20, "font": "SimHei", "color": "#ffec50", "anchorY": 0.5, "anchorX": 0, "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 14, "x": 194, "width": 303, "var": "textfieldUp", "innerHTML": "htmlText", "height": 24 } }, { "type": "Label", "props": { "y": -13, "width": 588, "visible": false, "height": 2, "fontSize": 22, "font": "SimHei", "bgColor": "#0c151c", "align": "left" }, "child": [{ "type": "Label", "props": { "y": 2, "x": 0, "width": 640, "height": 2, "fontSize": 22, "font": "SimHei", "bgColor": "#222c34", "align": "left" } }] }] }] };
            return ChatLineViewUI;
        }(View));
        Chat.ChatLineViewUI = ChatLineViewUI;
    })(Chat = ui.Chat || (ui.Chat = {}));
})(ui || (ui = {}));
(function (ui) {
    var Chat;
    (function (Chat) {
        var ChatViewUI = /** @class */ (function (_super) {
            __extends(ChatViewUI, _super);
            function ChatViewUI() {
                return _super.call(this) || this;
            }
            ChatViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.Chat.ChatViewUI.uiView);
            };
            ChatViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Box", "props": { "width": 750, "top": 0, "centerX": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#1b2838" } }, { "type": "Label", "props": { "top": 33, "right": 0, "left": 0, "bottom": 217, "bgColor": "#1b2838" } }, { "type": "Label", "props": { "y": 43, "x": 41, "text": "聊天", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 42, "x": 19, "width": 6, "height": 25, "bgColor": "#5d4565", "alpha": 1 } }, { "type": "Label", "props": { "top": 74, "right": 0, "left": 0, "bottom": 78, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "top": 116, "right": 5, "left": 5, "bottom": 105, "bgColor": "#a2b0c7" } }, { "type": "Image", "props": { "skin": "ui_chat/btn-liaotian (2).png", "right": 5, "bottom": 107 } }, { "type": "Image", "props": { "width": 124, "top": 237, "skin": "ui_chat/btn-liaotian (2).png", "scaleY": -1, "scaleX": -1, "left": 128, "height": 122 } }] }, { "type": "Image", "props": { "width": 730, "var": "panelBgImage0", "top": 116, "centerX": 0, "bottom": 130 }, "child": [{ "type": "Panel", "props": { "var": "chatPanel0", "top": 0, "right": 0, "left": 0, "bottom": 0 } }] }, { "type": "Image", "props": { "width": 730, "var": "panelBgImage1", "top": 116, "sizeGrid": "20,20,20,20", "centerX": 0, "bottom": 130 }, "child": [{ "type": "Panel", "props": { "var": "chatPanel1", "top": 0, "right": 0, "left": 0, "bottom": 0 } }] }, { "type": "Image", "props": { "width": 750, "var": "sendBgImage", "skin": "ui_chat/img-shuruqutuo-liaotian.png", "sizeGrid": "5,4,5,2", "height": 70, "centerX": 0, "bottom": 0 }, "child": [{ "type": "TextInput", "props": { "y": 11, "x": 10, "width": 526, "var": "chatInfo", "text": "请输入聊天内容", "skin": "ui_chat/img-shurukuang-liaotian.png", "sizeGrid": "7,3,6,4", "promptColor": "#ffffff", "padding": "0,0,0,12", "height": 50, "fontSize": 24, "color": "#ffffff" } }, { "type": "Clip", "props": { "y": 11, "x": 544, "var": "selectFaceClip", "skin": "ui_chat/btn-biaoqing-n.png", "clipY": 1, "clipX": 1 } }, { "type": "Button", "props": { "y": 12, "x": 611, "var": "sendMsgBtn", "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "labelStrokeColor": "#6f1e13", "labelStroke": 3, "labelSize": 24, "labelPadding": "0,0,0,0", "labelFont": "SimHei", "labelColors": "#ffe5e5,#ffe5e5,#ffe5e5,#ffe5e5", "labelBold": true, "label": "发送" } }] }, { "type": "Box", "props": { "bottom": 71 }, "child": [{ "type": "Image", "props": { "y": -2, "x": 0, "width": 298, "skin": "ui_rank/img-xiaobiaoqian-tuo.png", "sizeGrid": "0,41,0,3", "height": 48 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 150, "var": "btn0", "skin": "ui_rank/img-zi-xuan.png", "sizeGrid": "0,33,0,0", "height": 44 }, "child": [{ "type": "Label", "props": { "y": 9, "x": 34, "valign": "middle", "text": "世界", "name": "type", "fontSize": 26, "font": "SimHei", "color": "#eff8bb", "bold": true, "align": "center" } }] }, { "type": "Image", "props": { "x": 117, "width": 174, "var": "btn1", "skin": "ui_rank/img-zi-weixuan.png", "sizeGrid": "0,34,0,34", "height": 44 }, "child": [{ "type": "Label", "props": { "y": 9, "x": 60, "valign": "middle", "text": "阵营", "name": "type", "fontSize": 26, "font": "SimHei", "color": "#bebbf8", "bold": true, "align": "center" } }] }] }, { "type": "Button", "props": { "y": 33, "x": 655, "var": "closeBtn", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png" } }, { "type": "Image", "props": { "x": 238, "visible": false, "var": "camppoint", "skin": "ui_common/img-tixing.png", "bottom": 90 } }, { "type": "Image", "props": { "x": 94, "visible": false, "var": "worldpoint", "skin": "ui_common/img-tixing.png", "bottom": 90 } }] };
            return ChatViewUI;
        }(View));
        Chat.ChatViewUI = ChatViewUI;
    })(Chat = ui.Chat || (ui.Chat = {}));
})(ui || (ui = {}));
(function (ui) {
    var Chat;
    (function (Chat) {
        var InteractViewUI = /** @class */ (function (_super) {
            __extends(InteractViewUI, _super);
            function InteractViewUI() {
                return _super.call(this) || this;
            }
            InteractViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.Chat.InteractViewUI.uiView);
            };
            InteractViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": -43, "x": -1025, "width": 3000, "height": 1360, "bgColor": "#000000", "alpha": 0.6 } }, { "type": "Label", "props": { "y": 252, "x": 35, "width": 685, "height": 588, "bgColor": "#5a5b7c" } }, { "type": "Label", "props": { "y": 290, "x": 41, "width": 674, "height": 498, "bgColor": "#2c2d45" } }, { "type": "Image", "props": { "y": 213, "x": 33, "width": 686, "height": 41 }, "child": [{ "type": "Label", "props": { "y": 2, "x": 0, "width": 688, "height": 45, "bgColor": "#0f192d", "alpha": 1 } }, { "type": "Label", "props": { "y": 10, "x": 22, "width": 6, "height": 24, "bgColor": "#4a408a", "alpha": 1 } }, { "type": "Label", "props": { "y": 10, "x": 45, "text": "互动", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 2, "x": 82, "width": 26, "visible": false, "var": "redPoint", "skin": "ui_common/img-tixing.png", "height": 26 } }, { "type": "Image", "props": { "y": 94, "x": 22, "width": 643, "skin": "ui_sign/img-hongtuo-qiandao.png", "sizeGrid": "0,2,0,2", "height": 76 } }] }, { "type": "Label", "props": { "y": 344, "x": 81, "text": "你要赠送礼物给：", "fontSize": 20, "font": "SimHei", "color": "#b7aabc", "align": "left" } }, { "type": "Label", "props": { "y": 345, "x": 243, "width": 143, "var": "giveto", "text": "玩家名字", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ff5187", "align": "left" } }, { "type": "Button", "props": { "y": 357, "x": 618, "width": 100, "var": "giveBtn", "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "height": 42, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 10, "x": 2, "wordWrap": true, "width": 95, "var": "btnlabel", "valign": "middle", "text": "赠送", "strokeColor": "#d38343", "stroke": 3, "height": 22, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }] }, { "type": "List", "props": { "y": 395, "x": 52, "width": 658, "var": "list", "spaceY": 10, "spaceX": 15, "repeatX": 5, "renderType": "render", "height": 377 }, "child": [{ "type": "Box", "props": { "width": 658, "renderType": "render", "height": 377 }, "child": [{ "type": "Box", "props": { "y": -6, "x": -4 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 7, "width": 155, "skin": "ui_interact/img-kuang-baoxiang.png", "height": 178 } }, { "type": "Image", "props": { "y": 154, "x": 7, "width": 155, "skin": "ui_interact/img-jiagetiao.png", "sizeGrid": "0,47,0,4", "height": 29 } }, { "type": "Image", "props": { "y": 131, "x": 34, "skin": "ui_interact/img-tuo-shuliang.png" } }, { "type": "Label", "props": { "y": 25, "x": 14, "width": 138, "text": "紫色品质宝箱", "strokeColor": "#352f51", "stroke": 2, "name": "giftname", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#fbffd6", "align": "center" } }, { "type": "Image", "props": { "y": 53, "x": 30, "width": 103, "skin": "ui_common/icon_baoxiang.png", "name": "gifticon", "height": 88 } }, { "type": "Label", "props": { "y": 42, "x": 16, "width": 135, "text": "魅力 +3", "strokeColor": "#352f51", "stroke": 2, "name": "charm", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ff50bf", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 132, "x": 85, "wordWrap": true, "width": 69, "valign": "middle", "text": "3", "name": "giftnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#b4acd0", "align": "right" } }, { "type": "Image", "props": { "y": 152, "x": 17, "width": 30, "skin": "ui_main/icon-jinbi.png", "name": "gold", "height": 30 } }, { "type": "Label", "props": { "y": 159, "x": 51, "wordWrap": true, "width": 88, "valign": "middle", "text": "666", "strokeColor": "#4c446d", "stroke": 3, "name": "goldnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "width": 170, "skin": "ui_sign/img-guangquan.png", "sizeGrid": "53,36,40,30", "name": "selecticon", "height": 191 } }] }, { "type": "Box", "props": { "y": -6, "x": 159 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 7, "width": 155, "skin": "ui_interact/img-kuang-baoxiang.png", "height": 178 } }, { "type": "Image", "props": { "y": 154, "x": 7, "width": 155, "skin": "ui_interact/img-jiagetiao.png", "sizeGrid": "0,47,0,4", "height": 29 } }, { "type": "Image", "props": { "y": 131, "x": 34, "skin": "ui_interact/img-tuo-shuliang.png" } }, { "type": "Label", "props": { "y": 25, "x": 14, "width": 138, "text": "紫色品质宝箱", "strokeColor": "#352f51", "stroke": 2, "name": "giftname", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#fbffd6", "align": "center" } }, { "type": "Image", "props": { "y": 53, "x": 30, "width": 103, "skin": "ui_common/icon_baoxiang.png", "name": "gifticon", "height": 88 } }, { "type": "Label", "props": { "y": 42, "x": 16, "width": 135, "text": "魅力 +3", "strokeColor": "#352f51", "stroke": 2, "name": "charm", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ff50bf", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 132, "x": 85, "wordWrap": true, "width": 69, "valign": "middle", "text": "3", "name": "giftnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#b4acd0", "align": "right" } }, { "type": "Image", "props": { "y": 152, "x": 17, "width": 30, "skin": "ui_main/icon-jinbi.png", "name": "gold", "height": 30 } }, { "type": "Label", "props": { "y": 159, "x": 51, "wordWrap": true, "width": 88, "valign": "middle", "text": "666", "strokeColor": "#4c446d", "stroke": 3, "name": "goldnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "width": 170, "skin": "ui_sign/img-guangquan.png", "sizeGrid": "53,36,40,30", "name": "selecticon", "height": 191 } }] }, { "type": "Box", "props": { "y": -6, "x": 323 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 7, "width": 155, "skin": "ui_interact/img-kuang-baoxiang.png", "height": 178 } }, { "type": "Image", "props": { "y": 154, "x": 7, "width": 155, "skin": "ui_interact/img-jiagetiao.png", "sizeGrid": "0,47,0,4", "height": 29 } }, { "type": "Image", "props": { "y": 131, "x": 34, "skin": "ui_interact/img-tuo-shuliang.png" } }, { "type": "Label", "props": { "y": 25, "x": 14, "width": 138, "text": "紫色品质宝箱", "strokeColor": "#352f51", "stroke": 2, "name": "giftname", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#fbffd6", "align": "center" } }, { "type": "Image", "props": { "y": 53, "x": 30, "width": 103, "skin": "ui_common/icon_baoxiang.png", "name": "gifticon", "height": 88 } }, { "type": "Label", "props": { "y": 42, "x": 16, "width": 135, "text": "魅力 +3", "strokeColor": "#352f51", "stroke": 2, "name": "charm", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ff50bf", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 132, "x": 85, "wordWrap": true, "width": 69, "valign": "middle", "text": "3", "name": "giftnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#b4acd0", "align": "right" } }, { "type": "Image", "props": { "y": 152, "x": 17, "width": 30, "skin": "ui_main/icon-jinbi.png", "name": "gold", "height": 30 } }, { "type": "Label", "props": { "y": 159, "x": 51, "wordWrap": true, "width": 88, "valign": "middle", "text": "666", "strokeColor": "#4c446d", "stroke": 3, "name": "goldnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "width": 170, "skin": "ui_sign/img-guangquan.png", "sizeGrid": "53,36,40,30", "name": "selecticon", "height": 191 } }] }, { "type": "Box", "props": { "y": -6, "x": 486 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 7, "width": 155, "skin": "ui_interact/img-kuang-baoxiang.png", "height": 178 } }, { "type": "Image", "props": { "y": 154, "x": 7, "width": 155, "skin": "ui_interact/img-jiagetiao.png", "sizeGrid": "0,47,0,4", "height": 29 } }, { "type": "Image", "props": { "y": 131, "x": 34, "skin": "ui_interact/img-tuo-shuliang.png" } }, { "type": "Label", "props": { "y": 25, "x": 14, "width": 138, "text": "紫色品质宝箱", "strokeColor": "#352f51", "stroke": 2, "name": "giftname", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#fbffd6", "align": "center" } }, { "type": "Image", "props": { "y": 53, "x": 30, "width": 103, "skin": "ui_common/icon_baoxiang.png", "name": "gifticon", "height": 88 } }, { "type": "Label", "props": { "y": 42, "x": 16, "width": 135, "text": "魅力 +3", "strokeColor": "#352f51", "stroke": 2, "name": "charm", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ff50bf", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 132, "x": 85, "wordWrap": true, "width": 69, "valign": "middle", "text": "3", "name": "giftnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#b4acd0", "align": "right" } }, { "type": "Image", "props": { "y": 152, "x": 17, "width": 30, "skin": "ui_main/icon-jinbi.png", "name": "gold", "height": 30 } }, { "type": "Label", "props": { "y": 159, "x": 51, "wordWrap": true, "width": 88, "valign": "middle", "text": "666", "strokeColor": "#4c446d", "stroke": 3, "name": "goldnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "width": 170, "skin": "ui_sign/img-guangquan.png", "sizeGrid": "53,36,40,30", "name": "selecticon", "height": 191 } }] }, { "type": "Box", "props": { "y": 184, "x": -4 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 7, "width": 155, "skin": "ui_interact/img-kuang-baoxiang.png", "height": 178 } }, { "type": "Image", "props": { "y": 154, "x": 7, "width": 155, "skin": "ui_interact/img-jiagetiao.png", "sizeGrid": "0,47,0,4", "height": 29 } }, { "type": "Image", "props": { "y": 131, "x": 34, "skin": "ui_interact/img-tuo-shuliang.png" } }, { "type": "Label", "props": { "y": 25, "x": 14, "width": 138, "text": "紫色品质宝箱", "strokeColor": "#352f51", "stroke": 2, "name": "giftname", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#fbffd6", "align": "center" } }, { "type": "Image", "props": { "y": 53, "x": 30, "width": 103, "skin": "ui_common/icon_baoxiang.png", "name": "gifticon", "height": 88 } }, { "type": "Label", "props": { "y": 42, "x": 16, "width": 135, "text": "魅力 +3", "strokeColor": "#352f51", "stroke": 2, "name": "charm", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ff50bf", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 132, "x": 85, "wordWrap": true, "width": 69, "valign": "middle", "text": "3", "name": "giftnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#b4acd0", "align": "right" } }, { "type": "Image", "props": { "y": 152, "x": 17, "width": 30, "skin": "ui_main/icon-jinbi.png", "name": "gold", "height": 30 } }, { "type": "Label", "props": { "y": 159, "x": 51, "wordWrap": true, "width": 88, "valign": "middle", "text": "666", "strokeColor": "#4c446d", "stroke": 3, "name": "goldnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "width": 170, "skin": "ui_sign/img-guangquan.png", "sizeGrid": "53,36,40,30", "name": "selecticon", "height": 191 } }] }, { "type": "Box", "props": { "y": 184, "x": 159 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 7, "width": 155, "skin": "ui_interact/img-kuang-baoxiang.png", "height": 178 } }, { "type": "Image", "props": { "y": 154, "x": 7, "width": 155, "skin": "ui_interact/img-jiagetiao.png", "sizeGrid": "0,47,0,4", "height": 29 } }, { "type": "Image", "props": { "y": 131, "x": 34, "skin": "ui_interact/img-tuo-shuliang.png" } }, { "type": "Label", "props": { "y": 25, "x": 14, "width": 138, "text": "紫色品质宝箱", "strokeColor": "#352f51", "stroke": 2, "name": "giftname", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#fbffd6", "align": "center" } }, { "type": "Image", "props": { "y": 53, "x": 30, "width": 103, "skin": "ui_common/icon_baoxiang.png", "name": "gifticon", "height": 88 } }, { "type": "Label", "props": { "y": 42, "x": 16, "width": 135, "text": "魅力 +3", "strokeColor": "#352f51", "stroke": 2, "name": "charm", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ff50bf", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 132, "x": 85, "wordWrap": true, "width": 69, "valign": "middle", "text": "3", "name": "giftnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#b4acd0", "align": "right" } }, { "type": "Image", "props": { "y": 152, "x": 17, "width": 30, "skin": "ui_main/icon-jinbi.png", "name": "gold", "height": 30 } }, { "type": "Label", "props": { "y": 159, "x": 51, "wordWrap": true, "width": 88, "valign": "middle", "text": "666", "strokeColor": "#4c446d", "stroke": 3, "name": "goldnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "width": 170, "skin": "ui_sign/img-guangquan.png", "sizeGrid": "53,36,40,30", "name": "selecticon", "height": 191 } }] }, { "type": "Box", "props": { "y": 184, "x": 323 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 7, "width": 155, "skin": "ui_interact/img-kuang-baoxiang.png", "height": 178 } }, { "type": "Image", "props": { "y": 154, "x": 7, "width": 155, "skin": "ui_interact/img-jiagetiao.png", "sizeGrid": "0,47,0,4", "height": 29 } }, { "type": "Image", "props": { "y": 131, "x": 34, "skin": "ui_interact/img-tuo-shuliang.png" } }, { "type": "Label", "props": { "y": 25, "x": 14, "width": 138, "text": "紫色品质宝箱", "strokeColor": "#352f51", "stroke": 2, "name": "giftname", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#fbffd6", "align": "center" } }, { "type": "Image", "props": { "y": 53, "x": 30, "width": 103, "skin": "ui_common/icon_baoxiang.png", "name": "gifticon", "height": 88 } }, { "type": "Label", "props": { "y": 42, "x": 16, "width": 135, "text": "魅力 +3", "strokeColor": "#352f51", "stroke": 2, "name": "charm", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ff50bf", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 132, "x": 85, "wordWrap": true, "width": 69, "valign": "middle", "text": "3", "name": "giftnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#b4acd0", "align": "right" } }, { "type": "Image", "props": { "y": 152, "x": 17, "width": 30, "skin": "ui_main/icon-jinbi.png", "name": "gold", "height": 30 } }, { "type": "Label", "props": { "y": 159, "x": 51, "wordWrap": true, "width": 88, "valign": "middle", "text": "666", "strokeColor": "#4c446d", "stroke": 3, "name": "goldnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "width": 170, "skin": "ui_sign/img-guangquan.png", "sizeGrid": "53,36,40,30", "name": "selecticon", "height": 191 } }] }, { "type": "Box", "props": { "y": 184, "x": 486 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 7, "width": 155, "skin": "ui_interact/img-kuang-baoxiang.png", "height": 178 } }, { "type": "Image", "props": { "y": 154, "x": 7, "width": 155, "skin": "ui_interact/img-jiagetiao.png", "sizeGrid": "0,47,0,4", "height": 29 } }, { "type": "Image", "props": { "y": 131, "x": 34, "skin": "ui_interact/img-tuo-shuliang.png" } }, { "type": "Label", "props": { "y": 25, "x": 14, "width": 138, "text": "紫色品质宝箱", "strokeColor": "#352f51", "stroke": 2, "name": "giftname", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#fbffd6", "align": "center" } }, { "type": "Image", "props": { "y": 53, "x": 30, "width": 103, "skin": "ui_common/icon_baoxiang.png", "name": "gifticon", "height": 88 } }, { "type": "Label", "props": { "y": 42, "x": 16, "width": 135, "text": "魅力 +3", "strokeColor": "#352f51", "stroke": 2, "name": "charm", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ff50bf", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 132, "x": 85, "wordWrap": true, "width": 69, "valign": "middle", "text": "3", "name": "giftnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#b4acd0", "align": "right" } }, { "type": "Image", "props": { "y": 152, "x": 17, "width": 30, "skin": "ui_main/icon-jinbi.png", "name": "gold", "height": 30 } }, { "type": "Label", "props": { "y": 159, "x": 51, "wordWrap": true, "width": 88, "valign": "middle", "text": "666", "strokeColor": "#4c446d", "stroke": 3, "name": "goldnum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "width": 170, "skin": "ui_sign/img-guangquan.png", "sizeGrid": "53,36,40,30", "name": "selecticon", "height": 191 } }] }] }] }, { "type": "Image", "props": { "y": 217, "x": 633, "var": "close", "skin": "ui_main/btn-guanbi.png" } }, { "type": "Box", "props": { "y": 804, "x": 338 }, "child": [{ "type": "Image", "props": { "width": 18, "var": "image1", "skin": "ui_interact/img-huaye2.png", "height": 18 } }, { "type": "Image", "props": { "x": 32, "width": 18, "var": "image2", "skin": "ui_interact/img-huaye2.png", "height": 18 } }, { "type": "Image", "props": { "x": 65, "width": 18, "var": "image3", "skin": "ui_interact/img-huaye2.png", "height": 18 } }, { "type": "Image", "props": { "x": 97, "width": 18, "var": "image4", "skin": "ui_interact/img-huaye2.png", "height": 18 } }, { "type": "Image", "props": { "x": 129, "width": 18, "var": "image5", "skin": "ui_interact/img-huaye2.png", "height": 18 } }] }] };
            return InteractViewUI;
        }(View));
        Chat.InteractViewUI = InteractViewUI;
    })(Chat = ui.Chat || (ui.Chat = {}));
})(ui || (ui = {}));
(function (ui) {
    var Chat;
    (function (Chat) {
        var LinkViewUI = /** @class */ (function (_super) {
            __extends(LinkViewUI, _super);
            function LinkViewUI() {
                return _super.call(this) || this;
            }
            LinkViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.Chat.LinkViewUI.uiView);
            };
            LinkViewUI.uiView = { "type": "View", "props": { "width": 80, "height": 30 }, "child": [{ "type": "Box", "props": { "width": 80, "scaleY": 1, "scaleX": 1 }, "child": [{ "type": "Label", "props": { "var": "addfriend", "underline": true, "text": "加为好友", "fontSize": 20, "font": "SimHei", "color": "#60e247", "bold": true, "align": "left" } }] }] };
            return LinkViewUI;
        }(View));
        Chat.LinkViewUI = LinkViewUI;
    })(Chat = ui.Chat || (ui.Chat = {}));
})(ui || (ui = {}));
(function (ui) {
    var common;
    (function (common) {
        var FloatViewUI = /** @class */ (function (_super) {
            __extends(FloatViewUI, _super);
            function FloatViewUI() {
                return _super.call(this) || this;
            }
            FloatViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.common.FloatViewUI.uiView);
            };
            FloatViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Box", "props": { "right": 0, "left": 0, "height": 1200, "bottom": 0 }, "child": [{ "type": "HBox", "props": { "y": 0, "x": 0, "var": "hBox", "scaleY": 1, "scaleX": 1, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Clip", "props": { "y": -36, "x": -94, "width": 42, "visible": false, "var": "clip0", "skin": "ui_common/img-dianji-shanghai.png", "index": 0, "height": 54, "clipY": 1, "clipX": 10 } }, { "type": "Clip", "props": { "y": -36, "x": -52, "width": 42, "visible": false, "var": "clip1", "skin": "ui_common/img-dianji-shanghai.png", "index": 1, "height": 54, "clipY": 1, "clipX": 10 } }, { "type": "Clip", "props": { "y": -36, "x": -10, "width": 42, "visible": false, "var": "clip2", "skin": "ui_common/img-dianji-shanghai.png", "index": 2, "height": 54, "clipY": 1, "clipX": 10 } }, { "type": "Clip", "props": { "y": -36, "x": 32, "width": 42, "visible": false, "var": "clip3", "skin": "ui_common/img-dianji-shanghai.png", "index": 3, "height": 54, "clipY": 1, "clipX": 10 } }, { "type": "Clip", "props": { "y": -36, "x": 74, "width": 42, "visible": false, "var": "clip4", "skin": "ui_common/img-dianji-shanghai.png", "index": 4, "height": 54, "clipY": 1, "clipX": 10 } }, { "type": "Clip", "props": { "y": -36, "x": 116, "width": 42, "visible": false, "var": "clip5", "skin": "ui_common/img-dianji-shanghai.png", "index": 5, "height": 54, "clipY": 1, "clipX": 10 } }, { "type": "Clip", "props": { "y": -36, "x": 158, "width": 42, "visible": false, "var": "clip6", "skin": "ui_common/img-dianji-shanghai.png", "index": 6, "height": 54, "clipY": 1, "clipX": 10 } }, { "type": "Clip", "props": { "y": -36, "x": 200, "width": 42, "visible": false, "var": "clip7", "skin": "ui_common/img-dianji-shanghai.png", "index": 7, "height": 54, "clipY": 1, "clipX": 10 } }, { "type": "Clip", "props": { "y": -36, "x": 242, "width": 42, "visible": false, "var": "clip8", "skin": "ui_common/img-dianji-shanghai.png", "index": 8, "height": 54, "clipY": 1, "clipX": 10 } }, { "type": "Clip", "props": { "y": -36, "x": 284, "width": 42, "visible": false, "var": "clip9", "skin": "ui_common/img-dianji-shanghai.png", "index": 9, "height": 54, "clipY": 1, "clipX": 10 } }] }] };
            return FloatViewUI;
        }(View));
        common.FloatViewUI = FloatViewUI;
    })(common = ui.common || (ui.common = {}));
})(ui || (ui = {}));
(function (ui) {
    var common;
    (function (common) {
        var ReConnectViewUI = /** @class */ (function (_super) {
            __extends(ReConnectViewUI, _super);
            function ReConnectViewUI() {
                return _super.call(this) || this;
            }
            ReConnectViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.common.ReConnectViewUI.uiView);
            };
            ReConnectViewUI.uiView = { "type": "View", "props": { "width": 750, "mouseThrough": false, "mouseEnabled": true, "height": 1200 }, "child": [{ "type": "Image", "props": { "width": 750, "var": "backGround", "mouseThrough": false, "mouseEnabled": true, "height": 1200 }, "child": [{ "type": "Label", "props": { "width": 3000, "text": "label", "mouseThrough": false, "mouseEnabled": true, "height": 3000, "centerY": 0, "centerX": 0, "bgColor": "#000000", "alpha": 0.5 } }, { "type": "Label", "props": { "y": 650, "x": 258, "var": "desc", "valign": "middle", "text": "断线重连中...", "fontSize": 40, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "left" }, "child": [{ "type": "Animation", "props": { "y": -100, "x": 70, "wrapMode": "0", "source": "ui_reconnect/01.png,ui_reconnect/02.png,ui_reconnect/03.png,ui_reconnect/04.png,ui_reconnect/05.png,ui_reconnect/06.png,ui_reconnect/07.png,ui_reconnect/08.png,ui_reconnect/09.png,ui_reconnect/10.png,ui_reconnect/11.png,ui_reconnect/12.png,ui_reconnect/13.png,ui_reconnect/14.png,ui_reconnect/15.png,ui_reconnect/16.png,ui_reconnect/17.png,ui_reconnect/18.png,ui_reconnect/19.png,ui_reconnect/20.png,ui_reconnect/21.png,ui_reconnect/22.png,ui_reconnect/23.png,ui_reconnect/24.png", "scaleY": 1.5, "scaleX": 1.5, "autoPlay": true } }] }] }] };
            return ReConnectViewUI;
        }(View));
        common.ReConnectViewUI = ReConnectViewUI;
    })(common = ui.common || (ui.common = {}));
})(ui || (ui = {}));
(function (ui) {
    var common;
    (function (common) {
        var RewardViewUI = /** @class */ (function (_super) {
            __extends(RewardViewUI, _super);
            function RewardViewUI() {
                return _super.call(this) || this;
            }
            RewardViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.common.RewardViewUI.uiView);
            };
            RewardViewUI.uiView = { "type": "View", "props": { "width": 76, "height": 100 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 76, "var": "item", "skin": "ui_common/ui-daojukuang-lan-tongyong.png", "sizeGrid": "4,4,4,4", "height": 76 }, "child": [{ "type": "Label", "props": { "width": 72, "var": "img_quality", "height": 72, "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "y": 2, "x": 2, "width": 72, "var": "img_icon", "skin": "ui_icon/icon-lihe1.png", "height": 72 } }, { "type": "Label", "props": { "y": 60, "x": 3, "width": 70, "var": "tx_num", "text": "10", "height": 14, "fontSize": 14, "font": "SimHei", "color": "#f8e4dd", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 78, "x": 0, "width": 80, "var": "tx_name", "text": "生命增加", "left": 0, "height": 20, "fontSize": 20, "font": "SimHei", "color": "#f8e4dd", "bold": false, "align": "center" } }] }] };
            return RewardViewUI;
        }(View));
        common.RewardViewUI = RewardViewUI;
    })(common = ui.common || (ui.common = {}));
})(ui || (ui = {}));
(function (ui) {
    var common;
    (function (common) {
        var SkillNameUI = /** @class */ (function (_super) {
            __extends(SkillNameUI, _super);
            function SkillNameUI() {
                return _super.call(this) || this;
            }
            SkillNameUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.common.SkillNameUI.uiView);
            };
            SkillNameUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "y": 25, "x": 40, "width": 136, "var": "SName", "skin": "ui_skillname/lflj.png", "scaleY": 1, "scaleX": 1, "height": 48, "anchorY": 0.5, "anchorX": 0.5 } }] };
            return SkillNameUI;
        }(View));
        common.SkillNameUI = SkillNameUI;
    })(common = ui.common || (ui.common = {}));
})(ui || (ui = {}));
(function (ui) {
    var common;
    (function (common) {
        var TextDamageUI = /** @class */ (function (_super) {
            __extends(TextDamageUI, _super);
            function TextDamageUI() {
                return _super.call(this) || this;
            }
            TextDamageUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.common.TextDamageUI.uiView);
            };
            TextDamageUI.uiView = { "type": "View", "props": { "width": 750, "mouseThrough": true, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 750, "text": "label", "height": 1200, "bgColor": "#000000", "alpha": 0.6 } }, { "type": "List", "props": { "width": 750, "var": "sList", "spaceY": 5, "mouseThrough": true, "height": 1200 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "renderType": "render", "mouseThrough": true }, "child": [{ "type": "Text", "props": { "y": 0, "x": 0, "wordWrap": true, "width": 750, "text": "hfdsikhikASHOCIHSAIOFHDSIOHFOISDAHFIOHSDIOFHOSIAHDFAOISDHFOISDAHFDSIOHFIODSHAFDOIHF", "name": "tx_log", "height": 55, "fontSize": 25, "font": "SimHei", "color": "#ffffff", "align": "left" } }] }] }] };
            return TextDamageUI;
        }(View));
        common.TextDamageUI = TextDamageUI;
    })(common = ui.common || (ui.common = {}));
})(ui || (ui = {}));
(function (ui) {
    var consumer;
    (function (consumer) {
        var ActiveBgViewUI = /** @class */ (function (_super) {
            __extends(ActiveBgViewUI, _super);
            function ActiveBgViewUI() {
                return _super.call(this) || this;
            }
            ActiveBgViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.consumer.ActiveBgViewUI.uiView);
            };
            ActiveBgViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.5 } }, { "type": "Image", "props": { "y": 34, "x": 0, "width": 750, "skin": "ui_consumer/img-biaoqianye-bg-huodong.png", "sizeGrid": "0,3,0,3", "right": 0, "left": 0, "height": 1166 }, "child": [{ "type": "Image", "props": { "x": 0, "width": 750, "skin": "ui_consumer/img-jiemian-bg-zhuagnshi-huodong.png", "height": 978, "bottom": 0 } }, { "type": "Box", "props": { "y": 206, "x": 0, "var": "ChildBox" } }, { "type": "Image", "props": { "y": 39, "x": 0, "width": 750, "skin": "ui_consumer/img-biaoqianye-bg-huodong.png", "sizeGrid": "162,0,45,0" } }, { "type": "Image", "props": { "y": -1, "x": 0, "width": 750, "skin": "ui_consumer/img-tuanchuchuang-taitu-yunying.png" }, "child": [{ "type": "Image", "props": { "y": 2, "x": 646, "var": "btn_close", "skin": "ui_main/btn-guanbi.png" } }, { "type": "Image", "props": { "y": -27, "x": 14, "skin": "ui_consumer/img-taitou-zhuagnshi-yunying.png", "sizeGrid": "0,43,0,111" } }, { "type": "Label", "props": { "y": -7, "x": 87, "text": "活动", "fontSize": 35, "font": "SimHei", "color": "#7e1e1f", "align": "left" }, "child": [{ "type": "Label", "props": { "y": -3, "x": -1, "text": "活动", "strokeColor": "#feb0a7", "stroke": 1, "fontSize": 35, "font": "SimHei", "color": "#ff7869", "align": "left" } }] }] }, { "type": "List", "props": { "y": 44, "x": 0, "width": 750, "var": "top_list", "spaceX": 15, "repeatY": 1, "height": 147 }, "child": [{ "type": "Box", "props": { "y": 7, "x": 14, "width": 152, "renderType": "render", "height": 147 }, "child": [{ "type": "Image", "props": { "y": -7, "x": -3, "skin": "ui_consumer/btn-meirichognzi-huodong.png", "name": "icon" } }, { "type": "Label", "props": { "y": 112, "x": 19, "width": 102, "text": "充值反馈", "name": "name", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "align": "center" } }] }] }] }] };
            return ActiveBgViewUI;
        }(View));
        consumer.ActiveBgViewUI = ActiveBgViewUI;
    })(consumer = ui.consumer || (ui.consumer = {}));
})(ui || (ui = {}));
(function (ui) {
    var consumer;
    (function (consumer) {
        var DiamondViewUI = /** @class */ (function (_super) {
            __extends(DiamondViewUI, _super);
            function DiamondViewUI() {
                return _super.call(this) || this;
            }
            DiamondViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.consumer.DiamondViewUI.uiView);
            };
            DiamondViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "List", "props": { "y": 0, "x": 52.5, "width": 645, "var": "D_list", "spaceY": 20, "height": 733 }, "child": [{ "type": "Box", "props": { "y": 30, "x": 0, "width": 644, "renderType": "render", "height": 171 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_consumer/img-liebiaotiao-yunying.png" } }, { "type": "HTMLDivElement", "props": { "y": 5, "x": 7, "width": 612, "name": "D_say", "innerHTML": "htmlText", "height": 30 } }, { "type": "Button", "props": { "y": 94, "x": 550, "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "name": "btn_receive", "labelSize": 30, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "label": "领取", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 55, "x": 25, "width": 76, "name": "item_icon1", "height": 76 }, "child": [{ "type": "Image", "props": { "top": 0, "right": 0, "name": "item_icon", "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": 85, "x": 10, "name": "item_name", "fontSize": 20, "font": "SimHei" } }, { "type": "Label", "props": { "right": 0, "name": "item_num", "fontSize": 18, "font": "SimHei", "color": "#d7e0ea", "bottom": 0, "align": "right" } }] }, { "type": "Image", "props": { "y": 55, "x": 121, "width": 76, "name": "item_icon2", "height": 76 }, "child": [{ "type": "Image", "props": { "top": 0, "right": 0, "name": "item_icon", "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": 85, "x": 10, "name": "item_name", "fontSize": 20, "font": "SimHei" } }, { "type": "Label", "props": { "y": 10, "x": 10, "right": 0, "name": "item_num", "fontSize": 18, "font": "SimHei", "color": "#d7e0ea", "bottom": 0, "align": "right" } }] }, { "type": "Image", "props": { "y": 55, "x": 217, "width": 76, "name": "item_icon3", "height": 76 }, "child": [{ "type": "Image", "props": { "top": 0, "right": 0, "name": "item_icon", "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": 85, "x": 10, "name": "item_name", "fontSize": 20, "font": "SimHei" } }, { "type": "Label", "props": { "y": 20, "x": 20, "right": 0, "name": "item_num", "fontSize": 18, "font": "SimHei", "color": "#d7e0ea", "bottom": 0, "align": "right" } }] }, { "type": "Image", "props": { "y": 55, "x": 313, "width": 76, "name": "item_icon4", "height": 76 }, "child": [{ "type": "Image", "props": { "top": 0, "right": 0, "name": "item_icon", "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": 85, "x": 10, "name": "item_name" } }] }, { "type": "Image", "props": { "y": 63, "x": 481, "visible": false, "skin": "ui_consumer/img-yilingqu-yunying.png", "name": "reced" } }] }] }] }] };
            return DiamondViewUI;
        }(View));
        consumer.DiamondViewUI = DiamondViewUI;
    })(consumer = ui.consumer || (ui.consumer = {}));
})(ui || (ui = {}));
(function (ui) {
    var consumer;
    (function (consumer) {
        var EverydayMoneyViewUI = /** @class */ (function (_super) {
            __extends(EverydayMoneyViewUI, _super);
            function EverydayMoneyViewUI() {
                return _super.call(this) || this;
            }
            EverydayMoneyViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.consumer.EverydayMoneyViewUI.uiView);
            };
            EverydayMoneyViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 20, "x": 19, "var": "say", "fontSize": 20, "font": "SimHei", "color": "#9e8eac", "align": "left" } }, { "type": "Label", "props": { "y": 20, "x": 408, "width": 326, "var": "showmoney", "text": "今日已充值:0/60", "height": 26, "fontSize": 26, "font": "SimHei", "color": "#9e8eac", "align": "right" } }, { "type": "List", "props": { "y": 76, "x": 18, "width": 714, "var": "lay_outlist", "spaceY": 30, "spaceX": 30, "repeatX": 2, "height": 855 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 342, "renderType": "render", "height": 519 }, "child": [{ "type": "Image", "props": { "skin": "ui_consumer/img-kaung-meirichognzi-huodong.png" } }, { "type": "Label", "props": { "y": 8, "x": 14, "text": "再充值6元可领取奖励", "name": "lock", "fontSize": 23, "font": "SimHei", "color": "#ff7f77", "align": "left" } }, { "type": "Label", "props": { "y": 50, "x": 13, "text": "英雄是个大帅哥", "name": "item_name", "fontSize": 22, "font": "SimHei" } }, { "type": "Image", "props": { "y": 84, "x": 25, "width": 292, "name": "item_bg", "height": 374 } }, { "type": "Button", "props": { "y": 495, "x": 172, "width": 140, "name": "btn_isgo", "height": 35, "bottom": 6, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "x": 9, "text": "前往充值", "strokeColor": "#634c6c", "stroke": 3, "name": "btn_label", "fontSize": 29, "font": "SimHei", "color": "#fdcbad", "centerY": 0, "align": "left" } }, { "type": "Label", "props": { "visible": false, "text": "领取", "strokeColor": "#634c6c", "stroke": 3, "name": "lab_lingqu", "fontSize": 29, "font": "SimHei", "color": "#fdcbad", "centerY": 0, "centerX": 0, "align": "left" } }] }, { "type": "Button", "props": { "y": 270, "x": 171, "width": 292, "name": "iteminfo", "height": 374, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 1, "x": 0, "width": 292, "name": "item_icon", "height": 374 } }, { "type": "Label", "props": { "right": 25, "name": "item_num", "fontSize": 18, "font": "SimHei", "color": "#000000", "bottom": 21, "align": "right" } }] }] }] }] }] };
            return EverydayMoneyViewUI;
        }(View));
        consumer.EverydayMoneyViewUI = EverydayMoneyViewUI;
    })(consumer = ui.consumer || (ui.consumer = {}));
})(ui || (ui = {}));
(function (ui) {
    var consumer;
    (function (consumer) {
        var HeroStarPeckViewUI = /** @class */ (function (_super) {
            __extends(HeroStarPeckViewUI, _super);
            function HeroStarPeckViewUI() {
                return _super.call(this) || this;
            }
            HeroStarPeckViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.consumer.HeroStarPeckViewUI.uiView);
            };
            HeroStarPeckViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200, "centerX": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "x": 0, "width": 750, "skin": "ui_consumer/img-biaoqianye-bg-huodong.png", "sizeGrid": "0,0,23,0", "height": 1133, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": -34, "x": 13, "width": 180, "skin": "ui_consumer/img-taitou-zhuagnshi-yunying.png", "sizeGrid": "0,43,0,111", "height": 96 }, "child": [{ "type": "Label", "props": { "y": 29, "x": 76, "text": "英雄进阶礼包", "fontSize": 35, "font": "SimHei", "color": "#7e1e1f", "align": "left" }, "child": [{ "type": "Label", "props": { "y": -3, "x": -1, "text": "英雄进阶礼包", "strokeColor": "#feb0a7", "stroke": 1, "fontSize": 35, "font": "SimHei", "color": "#ff7869", "align": "left" } }] }] }, { "type": "List", "props": { "y": 50, "x": 21, "width": 707, "var": "List_peck", "spaceY": 10, "height": 1015 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 718, "renderType": "render", "height": 580 }, "child": [{ "type": "Label", "props": { "y": 10, "x": 5, "width": 376, "name": "Shop_time", "height": 32, "fontSize": 26, "font": "SimHei", "color": "#9e8eac", "align": "left" } }, { "type": "Image", "props": { "y": 50, "x": 0, "width": 343, "skin": "ui_consumer/img-kaung-meirichognzi-huodong.png", "name": "hero_d", "height": 519 }, "child": [{ "type": "Image", "props": { "y": 71, "x": 26, "width": 290, "name": "hero_pinzhi", "height": 374 } }, { "type": "Image", "props": { "y": 71, "x": 26, "width": 290, "name": "hero_icon_d", "height": 374 } }, { "type": "Button", "props": { "y": 497, "x": 173, "width": 290, "name": "Btn_buy", "height": 43, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 0, "x": 0, "width": 290, "name": "new_price", "height": 35 } }, { "type": "Label", "props": { "y": 5, "x": 45, "width": 100, "rotation": 10, "height": 4, "bgColor": "#ff0400" } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_shop/img-zhekou-bg-shangcheng.png" } }, { "type": "Label", "props": { "y": 17, "x": 17, "width": 46, "valign": "middle", "text": "3折", "rotation": -45, "name": "discount", "height": 17, "fontSize": 22, "font": "Microsoft YaHei", "color": "#ffd28d", "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Label", "props": { "y": 2, "x": 104, "width": 155, "name": "hero_name", "height": 40, "fontSize": 23, "font": "SimHei", "color": "#ff7f77", "align": "left" } }, { "type": "Label", "props": { "y": 410, "x": 275, "text": "ASD", "name": "hero_num_D", "fontSize": 18, "font": "SimHei", "color": "#C0C7DE", "align": "left" } }] }, { "type": "Image", "props": { "y": 50, "x": 365, "width": 343, "skin": "ui_consumer/img-kaung-meirichognzi-huodong.png", "name": "hero_m", "height": 519 }, "child": [{ "type": "Image", "props": { "y": 71, "x": 26, "width": 290, "name": "hero_pinzhi", "height": 374 } }, { "type": "Image", "props": { "y": 71, "x": 26, "width": 290, "name": "hero_icon_d", "height": 374 } }, { "type": "Button", "props": { "y": 497, "x": 173, "width": 290, "name": "Btn_buy", "height": 43, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 0, "x": 0, "width": 290, "name": "new_price", "height": 35 } }, { "type": "Label", "props": { "y": 5, "x": 45, "width": 100, "rotation": 10, "height": 4, "bgColor": "#ff0400" } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_shop/img-zhekou-bg-shangcheng.png" } }, { "type": "Label", "props": { "y": 17, "x": 17, "width": 46, "valign": "middle", "text": "3折", "rotation": -45, "name": "discount", "height": 17, "fontSize": 22, "font": "Microsoft YaHei", "color": "#ffd28d", "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Label", "props": { "y": 2, "x": 104, "width": 155, "name": "hero_name", "height": 40, "fontSize": 25, "font": "SimHei", "color": "#ff7f77", "align": "left" } }, { "type": "Label", "props": { "y": 410, "x": 275, "name": "hero_num_M", "fontSize": 18, "font": "SimHei", "color": "#C0C7DE", "align": "left" } }] }] }] }, { "type": "Button", "props": { "y": 1, "x": 643, "var": "Btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png" } }] }] }] };
            return HeroStarPeckViewUI;
        }(View));
        consumer.HeroStarPeckViewUI = HeroStarPeckViewUI;
    })(consumer = ui.consumer || (ui.consumer = {}));
})(ui || (ui = {}));
(function (ui) {
    var consumer;
    (function (consumer) {
        var MoneybackViewUI = /** @class */ (function (_super) {
            __extends(MoneybackViewUI, _super);
            function MoneybackViewUI() {
                return _super.call(this) || this;
            }
            MoneybackViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.consumer.MoneybackViewUI.uiView);
            };
            MoneybackViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 662, "skin": "ui_consumer/img-biaoqianye-bg-huodong.png", "sizeGrid": "0,3,0,3", "height": 820, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 662, "skin": "ui_consumer/img-jiemian-bg-zhuagnshi-huodong.png", "height": 820 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 662, "skin": "ui_consumer/img-tuanchuchuang-taitu-yunying.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": -35, "x": 5, "width": 180, "skin": "ui_consumer/img-taitou-zhuagnshi-yunying.png", "sizeGrid": "0,43,0,111", "height": 96 }, "child": [{ "type": "Label", "props": { "y": 29, "x": 76, "text": "充值反馈", "fontSize": 35, "font": "SimHei", "color": "#7e1e1f", "align": "left" }, "child": [{ "type": "Label", "props": { "y": -3, "x": -1, "text": "充值反馈", "strokeColor": "#feb0a7", "stroke": 1, "fontSize": 35, "font": "SimHei", "color": "#ff7869", "align": "left" } }] }] }, { "type": "Image", "props": { "y": 1, "x": 594, "var": "btn_close", "skin": "ui_main/btn-guanbi.png" } }] }, { "type": "List", "props": { "y": 61, "x": 14, "width": 635, "var": "m_backlist", "spaceY": 20, "height": 620 }, "child": [{ "type": "Box", "props": { "width": 635, "renderType": "render", "height": 161 }, "child": [{ "type": "Image", "props": { "y": -4, "x": -6, "skin": "ui_consumer/img-liebiaotiao-yunying.png" } }, { "type": "Button", "props": { "y": 91, "x": 544, "width": 162, "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "name": "btn_isgo", "labelSize": 30, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "label": "前往", "height": 70, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "HTMLDivElement", "props": { "y": 7, "x": 8, "width": 477, "name": "M_say", "innerHTML": "htmlText", "height": 20 } }, { "type": "Image", "props": { "y": 44, "x": 18, "width": 84, "skin": "ui_common/ui-daojukuang-lan-tongyong.png", "sizeGrid": "4,4,4,4", "name": "item_bg1", "height": 84 }, "child": [{ "type": "Label", "props": { "y": 88, "x": 6, "width": 76, "name": "item_name", "height": 21, "fontSize": 20, "font": "SimHei", "align": "center" } }, { "type": "Label", "props": { "top": 3, "right": 3, "name": "bg", "left": 3, "bottom": 3 } }, { "type": "Image", "props": { "x": 4, "width": 76, "skin": "ui_icon/icon_prop_007.png", "pivotX": 0, "name": "item_icon1", "height": 76, "centerY": 0, "centerX": 0 } }] }, { "type": "Label", "props": { "y": 91, "x": 544, "width": 162, "visible": true, "padding": "20", "name": "lab_text", "height": 70, "fontSize": 30, "font": "SimHei", "color": "#5f2904", "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }] }] }] }] }] };
            return MoneybackViewUI;
        }(View));
        consumer.MoneybackViewUI = MoneybackViewUI;
    })(consumer = ui.consumer || (ui.consumer = {}));
})(ui || (ui = {}));
(function (ui) {
    var Equep;
    (function (Equep) {
        var EquipTipsUI = /** @class */ (function (_super) {
            __extends(EquipTipsUI, _super);
            function EquipTipsUI() {
                return _super.call(this) || this;
            }
            EquipTipsUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.Equep.EquipTipsUI.uiView);
            };
            EquipTipsUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 586, "skin": "ui_common/img-lanzituo-tongyong.png", "sizeGrid": "0,15,15,0", "height": 417, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": -1, "x": 0, "width": 587, "height": 50, "bgColor": "#1b2838" }, "child": [{ "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "x": 43, "text": "法器详情", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "centerY": 0, "align": "left" } }, { "type": "Button", "props": { "x": 480, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "centerY": 0 } }] }, { "type": "Image", "props": { "y": 59, "x": 20, "width": 84, "var": "E_pinzhi", "skin": "ui_hero/img-lanpinzhikuang.png", "height": 84 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 84, "var": "E_icon", "height": 84 } }] }, { "type": "Label", "props": { "y": 59, "x": 126, "width": 115, "var": "E_name", "height": 24, "fontSize": 20, "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 86, "x": 126, "width": 115, "var": "E_lv", "innerHTML": "htmlText", "height": 24 } }, { "type": "Button", "props": { "y": 317, "x": 82, "var": "btn_use", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 28, "labelFont": "SimHei", "labelColors": "#5f2904", "label": "佩戴" } }, { "type": "Button", "props": { "y": 317, "x": 330, "var": "btn_price", "stateNum": 1, "skin": "ui_action/btn-huodong-p.png", "labelSize": 28, "labelPadding": "-10", "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "label": "出售" }, "child": [{ "type": "HTMLDivElement", "props": { "y": 43, "x": 3, "width": 158, "var": "price_num", "innerHTML": "htmlText", "height": 22 } }] }, { "type": "Label", "props": { "y": 165, "x": 10, "width": 567, "height": 120, "bgColor": "#2c2d45" }, "child": [{ "type": "Image", "props": { "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0, "alpha": 0.2 } }, { "type": "Image", "props": { "y": 0, "x": 40, "skin": "ui_common/img-huawen2.png", "skewY": 180, "skewX": 180, "pivotY": 84, "pivotX": 40, "alpha": 0.2 } }, { "type": "HTMLDivElement", "props": { "y": 47, "x": 19, "width": 200, "var": "E_base2", "height": 37 } }, { "type": "HTMLDivElement", "props": { "y": 15, "x": 19, "width": 392, "var": "E_base1", "innerHTML": "htmlText", "height": 37 } }] }, { "type": "Image", "props": { "y": 40, "skin": "ui_common/img-huawen1.png", "skewY": 180, "right": -322 } }, { "type": "Button", "props": { "y": 105, "x": 521, "width": 70, "var": "btn_lock", "height": 82, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "E_lock", "skin": "ui_equip/btn-suoding-faqi.png" } }] }, { "type": "Label", "props": { "y": 336, "x": 109, "visible": false, "var": "used", "text": "已装备", "fontSize": 28, "font": "SimHei", "color": "#d38343", "bold": true, "align": "left" } }] }] }] };
            return EquipTipsUI;
        }(View));
        Equep.EquipTipsUI = EquipTipsUI;
    })(Equep = ui.Equep || (ui.Equep = {}));
})(ui || (ui = {}));
(function (ui) {
    var Equep;
    (function (Equep) {
        var MakeEquipViewUI = /** @class */ (function (_super) {
            __extends(MakeEquipViewUI, _super);
            function MakeEquipViewUI() {
                return _super.call(this) || this;
            }
            MakeEquipViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.Equep.MakeEquipViewUI.uiView);
            };
            MakeEquipViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "Other", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "y": 64, "x": 25, "width": 700, "height": 948 } }, { "type": "Image", "props": { "width": 700, "skin": "ui_common/img-lanzituo-tongyong.png", "sizeGrid": "10,15,15,0", "height": 948, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 700, "height": 50, "bgColor": "#1b2838" }, "child": [{ "type": "Label", "props": { "x": 20, "width": 6, "height": 25, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "x": 43, "text": "工艺", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "centerY": 0, "align": "left" } }, { "type": "Image", "props": { "x": 97, "var": "M_help", "skin": "ui_action/btn-xiangqing-huodong.png", "centerY": 0 } }, { "type": "Button", "props": { "x": 637, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "centerY": 0 } }] }, { "type": "Label", "props": { "y": 57, "x": 0, "width": 700, "height": 60, "bgColor": "#2c2129", "alpha": 0.7 }, "child": [{ "type": "Button", "props": { "y": 35, "x": 70, "width": 120, "var": "btn_1", "height": 45, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 24, "x": 14, "width": 38, "var": "left1", "skin": "ui_rank/img-zi-xuan.png", "sizeGrid": "-3,-4,0,3", "height": 45, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 24, "x": 72, "width": 148, "var": "img1", "skin": "ui_rank/img-zi-weixuan.png", "sizeGrid": "0,35,0,35", "rotation": 0, "height": 45, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "var": "btn_name1", "text": "五福", "fontSize": 26, "font": "SimHei", "color": "#eff8bb", "centerY": 0, "centerX": 0, "bold": true } }] }, { "type": "Button", "props": { "y": 35, "x": 211, "width": 95, "var": "btn_2", "height": 45, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -34, "width": 163, "var": "img2", "skin": "ui_rank/img-lan-weixuan.png", "sizeGrid": "0,33,0,33", "height": 45 } }, { "type": "Label", "props": { "var": "btn_name2", "text": "稀有", "fontSize": 26, "font": "SimHei", "color": "#bebbf8", "centerY": 0, "centerX": 0, "bold": true } }] }, { "type": "Button", "props": { "y": 36, "x": 351, "width": 92, "var": "btn_3", "height": 45, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -1, "x": -38, "width": 163, "var": "img3", "skin": "ui_rank/img-lan-weixuan.png", "sizeGrid": "0,33,0,33", "height": 45 } }, { "type": "Label", "props": { "var": "btn_name3", "text": "传奇", "fontSize": 26, "font": "SimHei", "color": "#bebbf8", "centerY": 0, "centerX": 0, "bold": true } }] }, { "type": "HTMLDivElement", "props": { "y": 15, "x": 450, "var": "my_num", "innerHTML": "htmlText", "height": 35 } }] }, { "type": "Label", "props": { "y": 117, "x": 0, "width": 700, "height": 2, "bgColor": "#7c7a88" } }, { "type": "List", "props": { "y": 120, "x": 10, "width": 680, "var": "E_suitList", "spaceY": 5, "repeatY": 5, "height": 824 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 680, "renderType": "render", "height": 646 }, "child": [{ "type": "Label", "props": { "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 5, "bgColor": "#262449" } }, { "type": "Label", "props": { "y": 42, "x": 0, "width": 668, "name": "1", "height": 96, "bgColor": "#5a456a" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 94, "name": "E_pinzhi1", "height": 94 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 94, "name": "E_icon1", "height": 94 } }, { "type": "Label", "props": { "y": 14, "x": 114, "width": 70, "name": "E_name1", "height": 22, "fontSize": 20, "font": "SimHei" } }, { "type": "Label", "props": { "y": 0, "width": 147, "right": 0, "height": 96, "bgColor": "#242243" } }, { "type": "Image", "props": { "y": 809, "x": 635, "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0, "alpha": 0.2 } }, { "type": "Button", "props": { "y": 55, "x": 598, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "E_make1", "labelSize": 26, "labelFont": "SimHei", "labelColors": "#ffffff", "labelBold": true, "labelAlign": "center", "label": "制作", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "HTMLDivElement", "props": { "y": 1, "x": 545, "width": 100, "name": "E_makenum1", "innerHTML": "htmlText", "height": 28 } }, { "type": "Label", "props": { "y": 43, "x": 114, "width": 70, "name": "E_base1", "height": 22, "fontSize": 20, "font": "SimHei" } }, { "type": "HTMLDivElement", "props": { "y": 14, "x": 202, "width": 166, "name": "E_lv1", "innerHTML": "htmlText", "height": 22 } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 94, "name": "E_lock", "height": 94, "fontSize": 20, "font": "SimHei", "bgColor": "#0c0908", "alpha": 0.5 } }] }, { "type": "Label", "props": { "y": 142, "x": 0, "width": 668, "name": "2", "height": 96, "bgColor": "#5a456a" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 94, "name": "E_pinzhi2", "height": 94 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 94, "name": "E_icon2", "height": 94 } }, { "type": "Label", "props": { "y": 14, "x": 114, "width": 70, "name": "E_name2", "height": 22, "fontSize": 20, "font": "SimHei" } }, { "type": "Label", "props": { "y": 0, "width": 147, "right": 0, "height": 96, "bgColor": "#242243" } }, { "type": "Image", "props": { "y": 809, "x": 635, "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0, "alpha": 0.2 } }, { "type": "Button", "props": { "y": 55, "x": 598, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "E_make2", "labelSize": 26, "labelFont": "SimHei", "labelColors": "#ffffff", "labelBold": true, "labelAlign": "center", "label": "制作", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "HTMLDivElement", "props": { "y": 1, "x": 548, "width": 100, "name": "E_makenum2", "innerHTML": "htmlText", "height": 28 } }, { "type": "Label", "props": { "y": 43, "x": 114, "width": 70, "name": "E_base2", "height": 22, "fontSize": 20, "font": "SimHei" } }, { "type": "HTMLDivElement", "props": { "y": 14, "x": 202, "width": 166, "name": "E_lv2", "innerHTML": "htmlText", "height": 22 } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 94, "name": "E_lock", "height": 94, "fontSize": 20, "font": "SimHei", "bgColor": "#0c0908", "alpha": 0.5 } }] }, { "type": "Label", "props": { "y": 242, "x": 0, "width": 668, "name": "3", "height": 96, "bgColor": "#5a456a" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 94, "name": "E_pinzhi3", "height": 94 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 94, "name": "E_icon3", "height": 94 } }, { "type": "Label", "props": { "y": 14, "x": 114, "width": 70, "name": "E_name3", "height": 22, "fontSize": 20, "font": "SimHei" } }, { "type": "Label", "props": { "y": 0, "width": 147, "right": 0, "height": 96, "bgColor": "#242243" } }, { "type": "Image", "props": { "y": 809, "x": 635, "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0, "alpha": 0.2 } }, { "type": "Button", "props": { "y": 55, "x": 598, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "E_make3", "labelSize": 26, "labelFont": "SimHei", "labelColors": "#ffffff", "labelBold": true, "labelAlign": "center", "label": "制作", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "HTMLDivElement", "props": { "y": 1, "x": 548, "width": 100, "name": "E_makenum3", "innerHTML": "htmlText", "height": 28 } }, { "type": "Label", "props": { "y": 43, "x": 114, "width": 70, "name": "E_base3", "height": 22, "fontSize": 20, "font": "SimHei" } }, { "type": "HTMLDivElement", "props": { "y": 14, "x": 202, "width": 166, "name": "E_lv3", "innerHTML": "htmlText", "height": 22 } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 94, "name": "E_lock", "height": 94, "fontSize": 20, "font": "SimHei", "bgColor": "#0c0908", "alpha": 0.5 } }] }, { "type": "Label", "props": { "y": 342, "x": 0, "width": 668, "name": "4", "height": 96, "bgColor": "#5a456a" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 94, "name": "E_pinzhi4", "height": 94 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 94, "name": "E_icon4", "height": 94 } }, { "type": "Label", "props": { "y": 14, "x": 114, "width": 70, "name": "E_name4", "height": 22, "fontSize": 20, "font": "SimHei" } }, { "type": "Label", "props": { "y": 0, "width": 147, "right": 0, "height": 96, "bgColor": "#242243" } }, { "type": "Image", "props": { "y": 809, "x": 635, "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0, "alpha": 0.2 } }, { "type": "Button", "props": { "y": 55, "x": 598, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "E_make4", "labelSize": 26, "labelFont": "SimHei", "labelColors": "#ffffff", "labelBold": true, "labelAlign": "center", "label": "制作", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "HTMLDivElement", "props": { "y": 1, "x": 548, "width": 100, "name": "E_makenum4", "innerHTML": "htmlText", "height": 28 } }, { "type": "Label", "props": { "y": 43, "x": 114, "width": 70, "name": "E_base4", "height": 22, "fontSize": 20, "font": "SimHei" } }, { "type": "HTMLDivElement", "props": { "y": 14, "x": 202, "width": 166, "name": "E_lv4", "innerHTML": "htmlText", "height": 22 } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 94, "name": "E_lock", "height": 94, "fontSize": 20, "font": "SimHei", "bgColor": "#0c0908", "alpha": 0.5 } }] }, { "type": "Label", "props": { "y": 442, "x": 0, "width": 668, "name": "5", "height": 96, "bgColor": "#5a456a" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 94, "name": "E_pinzhi5", "height": 94 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 94, "name": "E_icon5", "height": 94 } }, { "type": "Label", "props": { "y": 14, "x": 114, "width": 70, "name": "E_name5", "height": 22, "fontSize": 20, "font": "SimHei" } }, { "type": "Label", "props": { "y": 0, "width": 147, "right": 0, "height": 96, "bgColor": "#242243" } }, { "type": "Image", "props": { "y": 809, "x": 635, "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0, "alpha": 0.2 } }, { "type": "Button", "props": { "y": 55, "x": 598, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "E_make5", "labelSize": 26, "labelFont": "SimHei", "labelColors": "#ffffff", "labelBold": true, "labelAlign": "center", "label": "制作", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "HTMLDivElement", "props": { "y": 1, "x": 548, "width": 100, "name": "E_makenum5", "innerHTML": "htmlText", "height": 28 } }, { "type": "Label", "props": { "y": 43, "x": 114, "width": 70, "name": "E_base5", "height": 22, "fontSize": 20, "font": "SimHei" } }, { "type": "HTMLDivElement", "props": { "y": 14, "x": 202, "width": 166, "name": "E_lv5", "innerHTML": "htmlText", "height": 22 } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 94, "name": "E_lock", "height": 94, "fontSize": 20, "font": "SimHei", "bgColor": "#0c0908", "alpha": 0.5 } }] }, { "type": "HTMLDivElement", "props": { "y": 550, "x": 23, "width": 382, "name": "suit_base1", "height": 28 } }, { "type": "Label", "props": { "y": 13, "x": 16, "width": 7, "height": 25, "bgColor": "#4a408a", "alpha": 1 } }, { "type": "Image", "props": { "y": 12, "x": 15, "width": 297, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 27, "alpha": 0.4 } }, { "type": "HTMLDivElement", "props": { "y": 10, "x": 55, "name": "Equip_name", "innerHTML": "htmlText", "height": 30 } }, { "type": "HTMLDivElement", "props": { "y": 577, "x": 23, "width": 382, "name": "suit_base2", "height": 28 } }, { "type": "HTMLDivElement", "props": { "y": 604, "x": 23, "width": 382, "name": "suit_base3", "height": 28 } }] }] }] }] }] };
            return MakeEquipViewUI;
        }(View));
        Equep.MakeEquipViewUI = MakeEquipViewUI;
    })(Equep = ui.Equep || (ui.Equep = {}));
})(ui || (ui = {}));
(function (ui) {
    var fund;
    (function (fund) {
        var FundViewUI = /** @class */ (function (_super) {
            __extends(FundViewUI, _super);
            function FundViewUI() {
                return _super.call(this) || this;
            }
            FundViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.fund.FundViewUI.uiView);
            };
            FundViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 750, "height": 1200, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 32, "x": 0, "width": 750, "skin": "ui_consumer/img-biaoqianye-bg-huodong.png", "sizeGrid": "0,3,0,3", "height": 1166 }, "child": [{ "type": "Image", "props": { "x": 0, "width": 750, "skin": "ui_consumer/img-jiemian-bg-zhuagnshi-huodong.png", "height": 978, "bottom": 0 } }, { "type": "Image", "props": { "y": 42, "x": 0, "skin": "ui_fund/img-guanggao-jijin.jpg" } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "skin": "ui_consumer/img-tuanchuchuang-taitu-yunying.png" }, "child": [{ "type": "Button", "props": { "y": 2, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "right": 12 } }, { "type": "Image", "props": { "y": -27, "x": 14, "skin": "ui_consumer/img-taitou-zhuagnshi-yunying.png", "sizeGrid": "0,43,0,111" } }, { "type": "Label", "props": { "y": -7, "x": 87, "var": "tx_name_bg", "text": "基金", "fontSize": 35, "font": "SimHei", "color": "#7e1e1f", "align": "left" }, "child": [{ "type": "Label", "props": { "y": -3, "x": -1, "var": "tx_name", "text": "基金", "strokeColor": "#feb0a7", "stroke": 1, "fontSize": 35, "font": "SimHei", "color": "#ff7869", "align": "left" } }] }] }] }, { "type": "Button", "props": { "y": 263, "x": 505, "width": 162, "var": "btn_investment", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 28, "labelPadding": "-8", "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "投资", "height": 69, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 45, "x": 0, "width": 162, "skin": "ui_common/btn-huodong-wenzi-bg.png", "sizeGrid": "5,10,10,2", "height": 22 } }, { "type": "Image", "props": { "y": 46, "x": 37, "width": 28, "skin": "ui_icon/icon_prop_013.png", "height": 21 } }, { "type": "Text", "props": { "y": 46, "x": 77, "width": 76, "var": "tx_money", "text": "000", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffc58b", "bold": true } }] }, { "type": "List", "props": { "y": 332, "x": 53, "width": 649, "var": "list_fund", "vScrollBarSkin": "\"\"", "repeatX": 1, "height": 858 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 646, "renderType": "render", "height": 171 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_consumer/img-liebiaotiao-yunying.png", "name": "bgImg" } }, { "type": "Image", "props": { "y": 67, "x": 477, "skin": "ui_consumer/img-yilingqu-yunying.png", "name": "img_complete" } }, { "type": "Button", "props": { "y": 95, "x": 546, "width": 162, "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "name": "btn_reward", "labelSize": 28, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "领取", "height": 70, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "HTMLDivElement", "props": { "y": 9, "x": 13, "width": 624, "name": "tx_show", "innerHTML": "htmlText", "height": 24 } }] }] }] }] };
            return FundViewUI;
        }(View));
        fund.FundViewUI = FundViewUI;
    })(fund = ui.fund || (ui.fund = {}));
})(ui || (ui = {}));
(function (ui) {
    var GameOver;
    (function (GameOver) {
        var ProfitViewUI = /** @class */ (function (_super) {
            __extends(ProfitViewUI, _super);
            function ProfitViewUI() {
                return _super.call(this) || this;
            }
            ProfitViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.GameOver.ProfitViewUI.uiView);
            };
            ProfitViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1108 }, "child": [{ "type": "Label", "props": { "y": 156, "width": 588, "height": 678, "centerX": 0, "bgColor": "#c8c7c7", "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 62, "x": 40, "skin": "ui_common/img-huawen2.png", "skewY": 180, "skewX": 180, "pivotY": 62, "pivotX": 40, "alpha": 0.2 } }, { "type": "Image", "props": { "skin": "ui_common/img-huawen2.png", "right": 0, "bottom": 0, "alpha": 0.2 } }, { "type": "Image", "props": { "y": 54, "x": 7, "width": 571, "skin": "ui_over/img-hua-lixianshouyi.png", "height": 212 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "sizeGrid": "1,1,1,1", "height": 50 }, "child": [{ "type": "Label", "props": { "x": 35, "width": 99, "text": "欢迎回来", "height": 26, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "centerY": 0, "align": "left" } }, { "type": "Label", "props": { "x": 20, "width": 5, "height": 25, "centerY": 0, "bgColor": "#df8e2f" } }, { "type": "Image", "props": { "x": 524, "var": "Btn_close", "skin": "ui_common/btn-X-tongyong.png", "right": 20, "centerY": 0 } }] }, { "type": "Button", "props": { "x": 210, "width": 161, "var": "Btn_sure", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 30, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "label": "确定", "height": 67, "bottom": 20 } }, { "type": "Label", "props": { "y": 286, "x": 42, "width": 200, "var": "Off_time", "text": "123", "height": 30, "fontSize": 22, "font": "SimHei", "color": "#225a88", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 336, "width": 532, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "sizeGrid": "1,1,1,1", "height": 40, "centerX": 0, "alpha": 0.9 }, "child": [{ "type": "Label", "props": { "width": 131, "var": "Money_Num", "text": "666", "right": 8, "height": 28, "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "centerY": 0, "align": "right" } }, { "type": "Image", "props": { "y": 0, "x": 10, "width": 40, "var": "icon_jinbi", "skin": "ui_common/icon_prop_012.png", "height": 40 } }, { "type": "Label", "props": { "x": 60, "width": 82, "var": "ward_name1", "text": "金币", "height": 28, "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "centerY": 0, "align": "center" } }] }, { "type": "Image", "props": { "y": 386, "width": 532, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "sizeGrid": "1,1,1,1", "height": 40, "centerX": 0, "alpha": 0.9 }, "child": [{ "type": "Label", "props": { "width": 138, "var": "exp_num", "text": "666", "right": 8, "height": 28, "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "centerY": 0, "align": "right" } }, { "type": "Image", "props": { "y": 0, "x": 10, "width": 40, "var": "icon_zuanshi", "skin": "ui_icon/icon-tequan-jyjc.png", "height": 40 } }, { "type": "Label", "props": { "x": 60, "width": 82, "var": "ward_name", "text": "经验", "height": 28, "fontSize": 24, "font": "SimHei", "color": "#fef8e9", "centerY": 0, "align": "center" } }] }, { "type": "Label", "props": { "y": 560, "x": 7, "width": 568, "height": 2, "color": "500", "bgColor": "#7c7a88" } }, { "type": "HTMLDivElement", "props": { "y": 514, "x": 10, "width": 568, "var": "sys_Info", "renderType": "render", "innerHTML": "sd", "height": 24 } }] }] };
            return ProfitViewUI;
        }(View));
        GameOver.ProfitViewUI = ProfitViewUI;
    })(GameOver = ui.GameOver || (ui.GameOver = {}));
})(ui || (ui = {}));
(function (ui) {
    var guidance;
    (function (guidance) {
        var GuidanceViewUI = /** @class */ (function (_super) {
            __extends(GuidanceViewUI, _super);
            function GuidanceViewUI() {
                return _super.call(this) || this;
            }
            GuidanceViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.guidance.GuidanceViewUI.uiView);
            };
            GuidanceViewUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 750, "mouseThrough": true, "height": 1200 }, "child": [{ "type": "Image", "props": { "var": "guidBj", "top": 0, "right": 0, "mouseThrough": true, "left": 0, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Sprite", "props": { "y": 2, "x": 0, "width": 750, "var": "spr_1", "mouseEnabled": true, "height": 1200, "cacheAs": "bitmap" }, "child": [{ "type": "Sprite", "props": { "var": "spr_2", "mouseEnabled": true, "cacheAs": "bitmap" }, "child": [{ "type": "Label", "props": { "width": 750, "var": "shade", "top": 0, "mouseThrough": false, "left": 0, "height": 1200, "color": "#000000", "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Sprite", "props": { "y": -2, "x": 0, "width": 100, "var": "click", "pivotY": 50, "pivotX": 50, "height": 100 }, "child": [{ "type": "Circle", "props": { "y": 50, "x": 50, "radius": 15, "lineWidth": 1, "fillColor": "#ff0000" } }] }] }, { "type": "Box", "props": { "y": 348, "x": 397, "width": 138, "visible": true, "var": "clickImg", "pivotY": -261, "pivotX": -81, "height": 64 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -33, "skin": "ui_action/img-dian-huatixianfeng.png" } }, { "type": "Image", "props": { "y": 0, "x": 46, "skin": "ui_action/img-dian-huatixianfeng.png" } }, { "type": "Image", "props": { "y": 0, "x": 119, "skin": "ui_action/img-dian-huatixianfeng.png" } }] }, { "type": "Image", "props": { "width": 100, "var": "aperture", "height": 100, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "var": "arrows", "skin": "ui_guid/ui_shouzhi.png" } }, { "type": "Label", "props": { "y": 213, "x": 373, "width": 750, "visible": true, "var": "time", "text": "读表", "height": 70, "fontSize": 26, "font": "Microsoft YaHei", "color": "#e0ff03", "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Image", "props": { "width": 414, "var": "infoBg", "top": 676, "skin": "ui_guid/img-bg-yindao.png", "sizeGrid": "1,1,1,1", "left": 189, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": -1, "x": 111, "wordWrap": true, "width": 271, "visible": true, "var": "introduce", "text": "教程教程教程教程教程教程教程教程教程", "padding": "12,14,12,14", "leading": 12, "height": 86, "fontSize": 22, "font": "SimHei", "color": "#1e5480", "bold": false } }, { "type": "Image", "props": { "y": -49, "x": -70, "width": 195, "skin": "ui_icon/icon_equip_46.png", "height": 197 } }] }] }, { "type": "Image", "props": { "var": "storyBj", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "var": "blackBj", "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000" } }, { "type": "View", "props": { "var": "storyImg", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "y": 1090, "x": 310, "var": "over", "skin": "ui_guid/btn-tiaoguojuqing.png", "right": 49, "bottom": 46 } }] }] };
            return GuidanceViewUI;
        }(View));
        guidance.GuidanceViewUI = GuidanceViewUI;
    })(guidance = ui.guidance || (ui.guidance = {}));
})(ui || (ui = {}));
(function (ui) {
    var guidance;
    (function (guidance) {
        var StoryViewUI = /** @class */ (function (_super) {
            __extends(StoryViewUI, _super);
            function StoryViewUI() {
                return _super.call(this) || this;
            }
            StoryViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.guidance.StoryViewUI.uiView);
            };
            StoryViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000" } }, { "type": "Box", "props": { "var": "aim", "centerY": 0, "centerX": 0 } }] }, { "type": "Button", "props": { "var": "overBtn", "stateNum": 1, "skin": "ui_guid/btn-tiaoguojuqing.png", "right": 49, "bottom": 46 } }] };
            return StoryViewUI;
        }(View));
        guidance.StoryViewUI = StoryViewUI;
    })(guidance = ui.guidance || (ui.guidance = {}));
})(ui || (ui = {}));
(function (ui) {
    var heroList;
    (function (heroList) {
        var HeroLvUpUI = /** @class */ (function (_super) {
            __extends(HeroLvUpUI, _super);
            function HeroLvUpUI() {
                return _super.call(this) || this;
            }
            HeroLvUpUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.heroList.HeroLvUpUI.uiView);
            };
            HeroLvUpUI.uiView = { "type": "View", "props": { "y": 0, "width": 750, "height": 1108 }, "child": [{ "type": "ComboBox", "props": { "y": -102, "x": 376, "width": 102, "visible": false, "var": "BtnShop", "selectedIndex": 0, "labels": "升级X1,升级X10,升级最大", "labelSize": 20, "labelPadding": "0,0,0,20", "labelFont": "SimHei", "labelColors": "#9a9fb2,#9a9fb2,#9a9fb2,#9a9fb2", "labelBold": true, "itemSize": 22, "itemColors": "#474557,#9a9fb2,#9a9fb2,#ffffff,#30303a", "height": 50 } }, { "type": "Label", "props": { "var": "bg", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "List", "props": { "y": 60, "x": 0, "width": 750, "var": "List_hero", "spaceY": 10, "repeatX": 1, "renderType": "render", "height": 1039 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 10, "width": 730, "renderType": "render", "height": 93 }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 730, "lineWidth": 1, "height": 85, "fillColor": "#5d4565" } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 730, "skin": "ui_common/img-lanzituo-tongyong.png", "sizeGrid": "0,0,4,0", "height": 93 } }, { "type": "Image", "props": { "y": 0, "x": 90, "skin": "ui_common/img-huawen1.png" } }, { "type": "Image", "props": { "y": 0, "skin": "ui_common/img-huawen2.png", "right": 0 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 93, "name": "pinzhi_bg", "height": 93 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 93, "name": "HeadIcon", "height": 93, "anchorY": 0, "anchorX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -4, "width": 36, "visible": true, "skin": "ui_hero/img-yingxiong-zhiwei-bg.png", "name": "War_bg", "height": 33 } }, { "type": "Image", "props": { "y": 0, "x": -4, "width": 36, "name": "War_img", "height": 33 } }] }, { "type": "Image", "props": { "y": 2, "x": 106, "width": 16, "skin": "ui_hero/icon-renwu-leixing-gongji.png", "name": "HeroType", "height": 18 } }, { "type": "Label", "props": { "y": 2, "x": 132, "text": "英雄名字", "name": "HeroName", "fontSize": 22, "font": "SimHei", "color": "#fbffd6", "align": "left" } }, { "type": "Label", "props": { "y": 26, "x": 105, "text": "LV:", "fontSize": 20, "font": "SimHei", "color": "#9be589", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 26, "x": 138, "text": "1", "name": "HeroLevel", "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 32, "x": 300, "width": 80, "text": "生命：", "name": "HeroHp", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#bfc7e4", "align": "left" } }, { "type": "Label", "props": { "y": 5, "x": 300, "width": 80, "text": "伤害：", "name": "HeroHurt", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#bfc7e4", "align": "left" } }, { "type": "Button", "props": { "y": -1, "x": 0, "width": 556, "name": "Btn_2", "height": 85 } }, { "type": "Label", "props": { "y": 5, "x": 287, "width": 2, "height": 44, "fontSize": 20, "font": "SimHei", "bold": true, "bgColor": "#4e5943", "align": "left" } }, { "type": "Label", "props": { "y": 32, "x": 438, "width": 106, "visible": true, "text": "(↑32.2289)", "name": "Add_hp", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#75d888", "align": "left" } }, { "type": "Label", "props": { "y": 5, "x": 438, "width": 106, "visible": true, "text": "(↑32.2289)", "name": "Add_Hurt", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#75d888", "align": "left" } }, { "type": "Image", "props": { "y": 58, "x": 396, "width": 28, "visible": false, "skin": "ui_icon/0.png", "name": "skill_icon10", "height": 28 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 28, "name": "skill_lock", "height": 28, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 58, "x": 364, "width": 28, "visible": false, "skin": "ui_icon/0.png", "name": "skill_icon9", "height": 28 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 28, "name": "skill_lock", "height": 28, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 58, "x": 331, "width": 28, "visible": false, "skin": "ui_icon/0.png", "name": "skill_icon8", "height": 28 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 28, "name": "skill_lock", "height": 28, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 58, "x": 298, "width": 28, "visible": false, "skin": "ui_icon/0.png", "name": "skill_icon7", "height": 28 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 28, "name": "skill_lock", "height": 28, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 58, "x": 265, "width": 28, "visible": false, "skin": "ui_icon/0.png", "name": "skill_icon6", "height": 28 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 28, "name": "skill_lock", "height": 28, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 58, "x": 232, "width": 28, "visible": false, "skin": "ui_icon/0.png", "name": "skill_icon5", "height": 28 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 28, "name": "skill_lock", "height": 28, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 58, "x": 197, "width": 28, "visible": false, "skin": "ui_icon/0.png", "name": "skill_icon4", "height": 28 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 28, "name": "skill_lock", "height": 28, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 58, "x": 164, "width": 28, "visible": false, "skin": "ui_icon/0.png", "name": "skill_icon3", "height": 28 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 28, "name": "skill_lock", "height": 28, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 58, "x": 131, "width": 28, "visible": false, "skin": "ui_icon/0.png", "name": "skill_icon2", "height": 28 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 28, "name": "skill_lock", "height": 28, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 58, "x": 98, "width": 28, "visible": false, "skin": "ui_icon/0.png", "name": "skill_icon1", "height": 28 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 28, "name": "skill_lock", "height": 28, "bgColor": "#0c0908", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 40, "x": 565, "skin": "ui_hero/img-zhuangshi-tangchuchuang.png" } }, { "type": "Image", "props": { "y": 0, "x": 536, "skin": "ui_hero/img-yiman-bg-tongyong.png", "name": "lv_max" } }, { "type": "Button", "props": { "y": 42, "x": 641, "width": 165, "stateNum": 1, "name": "Btn_1", "height": 75, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 165, "skin": "ui_hero/btn-huang.png", "name": "btn_img" } }, { "type": "Label", "props": { "y": 24, "x": 0, "wordWrap": false, "width": 165, "visible": true, "valign": "middle", "text": "激活", "strokeColor": "#d38343", "stroke": 3, "name": "Btn_label", "mouseThrough": true, "height": 51, "fontSize": 26, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 54, "x": 0, "width": 165, "name": "lvup_lock", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ffffff", "align": "center" } }, { "type": "HTMLDivElement", "props": { "y": 2, "width": 165, "name": "money", "height": 18 } }, { "type": "Image", "props": { "y": 0, "visible": false, "skin": "ui_hero/img-biaoqian-zhekou-bg.png", "right": 0, "name": "new_logo" }, "child": [{ "type": "Label", "props": { "y": 1, "x": 6, "width": 14, "text": "新", "strokeColor": "#d10805", "stroke": 3, "skewY": 13, "skewX": -8, "height": 12, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }] }, { "type": "Label", "props": { "y": 28, "x": 586, "wordWrap": true, "width": 97, "visible": false, "valign": "middle", "strokeColor": "#d38343", "stroke": 3, "name": "Btn_skill", "height": 51, "fontSize": 26, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 76, "name": "heroicon1", "height": 76, "anchorY": 0, "anchorX": 0 } }, { "type": "Label", "props": { "y": 27, "x": 588, "wordWrap": false, "width": 97, "visible": false, "valign": "middle", "text": "已满级", "strokeColor": "#d38343", "stroke": 3, "name": "Btn_labels", "mouseThrough": true, "height": 51, "fontSize": 26, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 60, "x": 98, "width": 80, "visible": false, "text": "获取途径:", "name": "get_LandName", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#75d888", "align": "left" } }, { "type": "Label", "props": { "y": 60, "x": 200, "width": 45, "visible": false, "underlineColor": "#75d888", "underline": true, "name": "get_Land1", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#75d888", "align": "left" } }, { "type": "Label", "props": { "y": 60, "x": 280, "width": 45, "visible": false, "name": "get_Land2", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#75d888", "align": "left" } }, { "type": "Label", "props": { "y": 60, "x": 340, "width": 45, "visible": false, "name": "get_Land3", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#75d888", "align": "left" } }] }] }, { "type": "Label", "props": { "y": 8, "x": 386, "width": 100, "visible": true, "var": "Btn_shop", "text": "升级", "padding": "8", "height": 40, "fontSize": 22, "font": "SimHei", "color": "#9a9fb2", "bgColor": "#30303a", "align": "center" } }, { "type": "Label", "props": { "y": 8, "x": 566, "width": 80, "visible": false, "var": "Btn_shop10", "text": "X10", "padding": "8", "height": 40, "fontSize": 22, "font": "SimHei", "color": "#9a9fb2", "bgColor": "#30303a", "align": "center" }, "child": [{ "type": "Label", "props": { "y": 0, "x": 193, "width": 1, "right": 0, "height": 40, "bgColor": "#595969" } }] }, { "type": "Label", "props": { "y": 8, "x": 486, "width": 80, "visible": false, "var": "Btn_shop1", "text": "X1", "padding": "8", "height": 40, "fontSize": 22, "font": "SimHei", "color": "#9a9fb2", "bgColor": "#30303a", "align": "center" }, "child": [{ "type": "Label", "props": { "y": 0, "width": 1, "right": 0, "height": 40, "bgColor": "#595969" } }] }, { "type": "Label", "props": { "y": 8, "x": 646, "width": 88, "visible": false, "var": "Btn_shopMax", "text": "最大", "padding": "8", "height": 40, "fontSize": 22, "font": "SimHei", "color": "#9a9fb2", "bgColor": "#30303a", "align": "center" } }] }] };
            return HeroLvUpUI;
        }(View));
        heroList.HeroLvUpUI = HeroLvUpUI;
    })(heroList = ui.heroList || (ui.heroList = {}));
})(ui || (ui = {}));
(function (ui) {
    var heroList;
    (function (heroList) {
        var HeroStarUI = /** @class */ (function (_super) {
            __extends(HeroStarUI, _super);
            function HeroStarUI() {
                return _super.call(this) || this;
            }
            HeroStarUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.heroList.HeroStarUI.uiView);
            };
            HeroStarUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 750, "height": 1108 }, "child": [{ "type": "Label", "props": { "width": 750, "var": "background", "height": 1108, "bgColor": "#34354b", "alpha": 0.8 }, "child": [{ "type": "Label", "props": { "y": 5, "width": 750, "height": 48, "bgColor": "#2c2129", "alpha": 0.7 } }] }, { "type": "List", "props": { "y": 60, "x": 0, "width": 750, "var": "heroStar_List", "spaceY": 10, "repeatY": 100, "height": 1039 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 10, "width": 730, "renderType": "render", "height": 93 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 730, "skin": "ui_common/img-lanzituo-tongyong.png", "sizeGrid": "0,0,6,0", "height": 93 } }, { "type": "Image", "props": { "y": 0, "x": 90, "width": 324, "visible": true, "skin": "ui_common/img-huawen1.png", "name": "Di_Wen", "height": 86 } }, { "type": "Image", "props": { "y": 0, "x": 650, "skin": "ui_common/img-huawen2.png", "right": 0 } }, { "type": "Image", "props": { "y": 55, "x": 110, "width": 28, "visible": false, "skin": "ui_hero/icon-weijihuo-jinjie-yingxiong.png", "renderType": "render", "name": "Star_Icon1", "height": 26 } }, { "type": "Image", "props": { "y": 55, "x": 425, "width": 28, "visible": false, "skin": "ui_hero/icon-weijihuo-jinjie-yingxiong.png", "renderType": "render", "name": "Star_Icon10", "height": 26 } }, { "type": "Image", "props": { "y": 55, "x": 390, "width": 28, "visible": false, "skin": "ui_hero/icon-weijihuo-jinjie-yingxiong.png", "renderType": "render", "name": "Star_Icon9", "height": 26 } }, { "type": "Image", "props": { "y": 55, "x": 355, "width": 28, "visible": false, "skin": "ui_hero/icon-weijihuo-jinjie-yingxiong.png", "renderType": "render", "name": "Star_Icon8", "height": 26 } }, { "type": "Image", "props": { "y": 55, "x": 320, "width": 28, "visible": false, "skin": "ui_hero/icon-weijihuo-jinjie-yingxiong.png", "renderType": "render", "name": "Star_Icon7", "height": 26 } }, { "type": "Image", "props": { "y": 55, "x": 285, "width": 28, "visible": false, "skin": "ui_hero/icon-weijihuo-jinjie-yingxiong.png", "renderType": "render", "name": "Star_Icon6", "height": 26 } }, { "type": "Image", "props": { "y": 55, "x": 250, "width": 28, "visible": false, "skin": "ui_hero/icon-weijihuo-jinjie-yingxiong.png", "renderType": "render", "name": "Star_Icon5", "height": 26 } }, { "type": "Image", "props": { "y": 55, "x": 215, "width": 28, "visible": false, "skin": "ui_hero/icon-weijihuo-jinjie-yingxiong.png", "renderType": "render", "name": "Star_Icon4", "height": 26 } }, { "type": "Image", "props": { "y": 55, "x": 180, "width": 28, "visible": false, "skin": "ui_hero/icon-weijihuo-jinjie-yingxiong.png", "renderType": "render", "name": "Star_Icon3", "height": 26 } }, { "type": "Image", "props": { "y": 55, "x": 145, "width": 28, "visible": false, "skin": "ui_hero/icon-weijihuo-jinjie-yingxiong.png", "renderType": "render", "name": "Star_Icon2", "height": 26 } }, { "type": "Image", "props": { "y": 0, "x": 539, "skin": "ui_hero/img-yiman-bg-tongyong.png", "name": "star_max" } }, { "type": "Button", "props": { "y": 42, "x": 641, "width": 165, "stateNum": 1, "skin": "ui_hero/btn-huang.png", "renderType": "render", "name": "Btn_StarUp", "mouseEnabled": false, "labelStrokeColor": "#d38343", "labelStroke": 3, "labelSize": 26, "labelColors": "#ffffff", "height": 75, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 50, "x": 0, "width": 165, "strokeColor": "#d38343", "stroke": 3, "name": "BaseChange", "height": 25, "fontSize": 15, "font": "SimHei", "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "width": 165, "text": "进阶", "strokeColor": "#d38343", "stroke": 3, "right": 0, "name": "UP_Start", "left": 0, "height": 49, "fontSize": 20, "font": "Microsoft YaHei", "color": "#ffffff", "bottom": 0, "align": "center" } }, { "type": "HTMLDivElement", "props": { "y": 3, "width": 165, "name": "ItemNum", "height": 20 } }] }, { "type": "Image", "props": { "y": 5, "x": 106, "width": 16, "renderType": "render", "name": "hero_TypeIcon", "height": 18 } }, { "type": "Label", "props": { "y": 30, "x": 330, "width": 100, "renderType": "render", "name": "hero_Hp", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff" } }, { "type": "Label", "props": { "y": 5, "x": 330, "width": 100, "renderType": "render", "name": "hero_Hurt", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffffff" } }, { "type": "Label", "props": { "y": 33, "x": 138, "width": 30, "text": "0阶", "renderType": "render", "name": "hero_StarNum", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#ffff79", "align": "left" } }, { "type": "Label", "props": { "y": 5, "x": 132, "text": "label", "renderType": "render", "name": "hero_Name", "fontSize": 22, "font": "SimHei", "color": "#fbffd6", "align": "left" } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 93, "renderType": "render", "name": "pinzhi_bg", "height": 93 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 93, "skin": "ui_head/icon-tou-lydd.png", "renderType": "render", "name": "hero_Icon", "height": 93 } }, { "type": "Label", "props": { "y": 35, "x": 610, "width": 78, "visible": false, "text": "已满阶", "strokeColor": "#d38343", "stroke": 3, "renderType": "render", "name": "Star_Max", "height": 31, "fontSize": 22, "font": "Microsoft YaHei", "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 8, "x": 317, "width": 1, "height": 38, "bgColor": "#290836" } }] }] }] };
            return HeroStarUI;
        }(View));
        heroList.HeroStarUI = HeroStarUI;
    })(heroList = ui.heroList || (ui.heroList = {}));
})(ui || (ui = {}));
(function (ui) {
    var heroList;
    (function (heroList) {
        var HeroWarUI = /** @class */ (function (_super) {
            __extends(HeroWarUI, _super);
            function HeroWarUI() {
                return _super.call(this) || this;
            }
            HeroWarUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.heroList.HeroWarUI.uiView);
            };
            HeroWarUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 750, "height": 1078 }, "child": [{ "type": "Label", "props": { "y": -73, "x": 0, "width": 750, "top": 0, "right": 0, "left": 0, "height": 1200, "bottom": -50, "bgColor": "#303b3b", "alpha": 0.9 } }, { "type": "Image", "props": { "y": -350, "x": 1, "width": 750, "var": "BackGround", "sizeGrid": "15,15,15,15", "renderType": "render", "height": 1200 }, "child": [{ "type": "Sprite", "props": { "y": 390, "x": -9, "width": 781, "renderType": "mask", "height": 531 }, "child": [{ "type": "Rect", "props": { "y": 19, "x": -197, "width": 1176, "lineWidth": 1, "height": 489, "fillColor": "#ff0000" } }] }] }, { "type": "Label", "props": { "y": 573, "x": 1, "width": 750, "height": 555, "bgColor": "#303b3b", "alpha": 0.9 } }, { "type": "Box", "props": { "y": 0, "x": 1, "var": "bgbox" }, "child": [{ "type": "Image", "props": { "y": 382, "x": 79, "width": 100, "var": "dragpos8", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_8", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_9", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod8", "name": "mod" } }] }, { "type": "Image", "props": { "y": 299, "x": 178, "width": 100, "var": "dragpos7", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_7", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_8", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod7", "name": "mod" } }] }, { "type": "Image", "props": { "y": 233, "x": 79, "width": 100, "var": "dragpos6", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_6", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_7", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod6", "name": "mod" } }] }, { "type": "Image", "props": { "y": 382, "x": 277, "width": 100, "var": "dragpos5", "height": 150 }, "child": [{ "type": "Image", "props": { "y": -109, "x": 103, "skin": "ui_hero/img-yingxiong-duizhang-biaozhi.png" } }, { "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_5", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_6", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod5", "name": "mod" } }] }, { "type": "Image", "props": { "y": 301, "x": 374, "width": 100, "var": "dragpos4", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_4", "skin": "ui_hero/img-yingxiong-duizhang-bg.png", "name": "Pos_5", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod4", "name": "mod" } }] }, { "type": "Image", "props": { "y": 233, "x": 277, "width": 100, "var": "dragpos3", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_3", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_4", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod3", "name": "mod" } }] }, { "type": "Image", "props": { "y": 382, "x": 475, "width": 100, "var": "dragpos2", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_2", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_3", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod2", "name": "mod" } }] }, { "type": "Image", "props": { "y": 299, "x": 574, "width": 100, "var": "dragpos1", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_1", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_2", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod1", "name": "mod" } }] }, { "type": "Image", "props": { "y": 233, "x": 475, "width": 100, "var": "dragpos0", "height": 150 }, "child": [{ "type": "Image", "props": { "y": 130, "x": 50, "width": 100, "var": "Pos_0", "skin": "ui_hero/img-yingxiong-renwuyuan-bg.png", "name": "Pos_1", "mouseThrough": true, "height": 40, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "View", "props": { "y": 135, "x": 50, "var": "mod0", "name": "mod" } }] }, { "type": "List", "props": { "y": 576, "x": 0, "width": 754, "var": "List_head", "spaceY": 14, "spaceX": 22, "repeatX": 4, "height": 503 }, "child": [{ "type": "Box", "props": { "y": 97, "x": 120, "width": 150, "renderType": "render", "height": 185, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 148, "skin": "ui_hero/img-buzhen-renwu-bg.png", "renderType": "render", "name": "background", "height": 188 } }, { "type": "Button", "props": { "y": 2, "x": 1, "width": 147, "stateNum": 1, "name": "Btn_skill", "height": 185 }, "child": [{ "type": "Image", "props": { "y": 1, "x": 1, "width": 143, "name": "background_k", "height": 182 } }, { "type": "Image", "props": { "y": 1, "x": 2, "width": 140, "name": "HeadIcon", "height": 140 } }, { "type": "Label", "props": { "y": 142, "x": 7, "width": 49, "text": "伤害", "name": "Hp_name", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#e5c64a", "align": "left" } }, { "type": "Label", "props": { "y": 162, "x": 7, "width": 49, "text": "生命", "renderType": "render", "name": "Hp_name", "height": 24, "fontSize": 18, "font": "SimHei", "color": "#e5c64a", "align": "left" } }, { "type": "Label", "props": { "y": 160, "x": 40, "width": 105, "renderType": "render", "name": "Hp", "height": 21, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "align": "center" } }, { "type": "Label", "props": { "y": 142, "x": 40, "width": 105, "renderType": "render", "name": "Hurt", "height": 21, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "align": "center" } }, { "type": "Image", "props": { "y": -1, "x": -10, "width": 41, "skin": "ui_hero/img-yingxiong-zhiwei-bg.png", "renderType": "render", "name": "IsGoWar", "height": 50 } }, { "type": "Image", "props": { "y": -1, "x": -10, "skin": "ui_hero/img-yingxiong-zhiwei-dui.png", "name": "hero_zhiwei" } }, { "type": "Image", "props": { "y": 10, "x": 110, "width": 25, "skin": "ui_hero/icon-renwu-leixing-bg.png", "renderType": "render", "name": "Hero_Type_bg", "height": 29 } }, { "type": "Image", "props": { "y": 12, "x": 117, "width": 11, "skin": "ui_hero/icon-renwu-leixing-gongji.png", "renderType": "render", "name": "Hero_Type", "height": 22 } }, { "type": "Button", "props": { "y": 138, "x": 1, "width": 147, "name": "Btn_Info", "height": 45 } }] }] }] }, { "type": "Image", "props": { "y": 202, "x": 78, "width": 140, "var": "dragHeroIcon", "height": 140, "anchorY": 1, "anchorX": 0.5 }, "child": [{ "type": "View", "props": { "var": "dragHeroMod", "centerX": 0, "bottom": 0 } }] }, { "type": "Image", "props": { "y": 74, "width": 92, "skin": "ui_hero/img-duizhangjineng-bg-yingxiong.png", "height": 110, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 85, "x": 8, "width": 2, "var": "L", "height": 20, "bgColor": "#ccd6c6" } }, { "type": "Label", "props": { "y": 86, "x": 13, "var": "main_skillName", "text": "队长技能", "strokeColor": "#7c6d92", "stroke": 3, "height": 20, "fontSize": 18, "font": "SimHei", "color": "#f4f4f4" } }, { "type": "Image", "props": { "y": 5, "x": 8, "width": 76, "var": "Skill_Icon", "height": 76 } }] }] }, { "type": "Image", "props": { "y": 0, "width": 750, "visible": true, "height": 58, "centerX": 1 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 750, "visible": true, "height": 58, "bgColor": "#2c2129", "alpha": 0.7 } }, { "type": "Button", "props": { "y": 0, "x": 591, "width": 159, "var": "Btn_save", "top": 0, "stateNum": 1, "skin": "ui_hero/btn-buzhen-baocun.png", "right": 0, "labelStrokeColor": "be5f13", "labelStroke": 4, "labelSize": 28, "labelFont": "SimHei", "labelColors": "#ffffff", "label": "保存", "height": 58 } }] }, { "type": "Label", "props": { "y": 74, "width": 459, "var": "tixing", "text": "奥法弄", "strokeColor": "#7c6d92", "stroke": 3, "right": 45, "height": 64, "fontSize": 18, "font": "SimHei", "color": "#fef8e9", "align": "right" } }] };
            return HeroWarUI;
        }(View));
        heroList.HeroWarUI = HeroWarUI;
    })(heroList = ui.heroList || (ui.heroList = {}));
})(ui || (ui = {}));
(function (ui) {
    var heroList;
    (function (heroList) {
        var Hero_AlInfoUI = /** @class */ (function (_super) {
            __extends(Hero_AlInfoUI, _super);
            function Hero_AlInfoUI() {
                return _super.call(this) || this;
            }
            Hero_AlInfoUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.heroList.Hero_AlInfoUI.uiView);
            };
            Hero_AlInfoUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "text": "label", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 624, "var": "Background", "skin": "ui_common/img-lanzituo-tongyong.png", "sizeGrid": "10,20,20,20", "height": 846, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 624, "height": 50, "bgColor": "#1b2838", "alpha": 1 }, "child": [{ "type": "Label", "props": { "x": 18, "width": 6, "height": 25, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "x": 40, "text": "英雄详情", "fontSize": 24, "font": "SimHei", "color": "#dde2f2", "centerY": 0 } }, { "type": "Button", "props": { "x": 573, "width": 44, "var": "close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "height": 42, "centerY": 0 } }] }, { "type": "Image", "props": { "y": 66, "x": 361, "width": 15, "var": "hero_type", "height": 17 } }, { "type": "Image", "props": { "y": 60, "x": 18, "width": 306, "var": "heroIcon_bg", "skin": "ui_hero/img-yingxiong-zhanshi-lan.png", "height": 390 } }, { "type": "Image", "props": { "y": 60, "x": 18, "width": 306, "var": "heroIcon", "pivotX": 0, "height": 390 } }, { "type": "Label", "props": { "y": 65, "x": 384, "width": 150, "var": "heroName", "text": "时光沙", "height": 30, "fontSize": 22, "font": "SimHei", "color": "#fbffd6", "align": "left" } }, { "type": "Label", "props": { "y": 95, "x": 354, "width": 91, "var": "level", "text": "等级：", "padding": "5", "height": 30, "fontSize": 18, "font": "SimHei", "color": "#9be589", "alpha": 1, "align": "left" } }, { "type": "Label", "props": { "y": 95, "width": 152, "var": "herolevel", "text": "10阶111级", "right": 20, "padding": "5,15", "height": 30, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "alpha": 1, "align": "right" } }, { "type": "Label", "props": { "y": 125, "x": 354, "width": 97, "var": "heroattl1", "text": "生命：", "padding": "5", "height": 30, "fontSize": 18, "font": "SimHei", "color": "#9be589", "alpha": 1, "align": "left" } }, { "type": "Label", "props": { "y": 125, "width": 120, "var": "val1", "text": "120", "right": 20, "padding": "5,15", "height": 30, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "alpha": 1, "align": "right" } }, { "type": "Label", "props": { "y": 155, "x": 354, "width": 80, "var": "heroattl2", "text": "伤害：", "padding": "5", "height": 30, "fontSize": 18, "font": "SimHei", "color": "#9be589", "alpha": 1, "align": "left" } }, { "type": "Label", "props": { "y": 155, "width": 130, "var": "val2", "text": "145.47ac", "right": 20, "padding": "5,15", "height": 30, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "alpha": 1, "align": "right" } }, { "type": "Label", "props": { "y": 185, "x": 354, "width": 84, "var": "heroattl3", "text": "先手：", "padding": "5", "height": 30, "fontSize": 18, "font": "SimHei", "color": "#9be589", "alpha": 1, "align": "left" } }, { "type": "Label", "props": { "y": 185, "width": 144, "var": "val3", "text": "326.22aa", "right": 20, "padding": "5,15", "height": 30, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "alpha": 1, "align": "right" } }, { "type": "Label", "props": { "y": 215, "x": 354, "width": 81, "var": "heroattl4", "text": "暴击：", "padding": "5", "height": 30, "fontSize": 18, "font": "SimHei", "color": "#9be589", "alpha": 1, "align": "left" } }, { "type": "Label", "props": { "y": 215, "width": 106, "var": "val4", "text": "22%", "right": 20, "padding": "5,15", "height": 30, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "alpha": 1, "align": "right" } }, { "type": "Label", "props": { "y": 245, "x": 354, "width": 102, "var": "heroattl5", "text": "暴伤：", "padding": "5", "height": 30, "fontSize": 18, "font": "SimHei", "color": "#9be589", "alpha": 1, "align": "left" } }, { "type": "Label", "props": { "y": 245, "width": 86, "var": "val5", "text": "220%", "right": 20, "padding": "5,15", "height": 30, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "alpha": 1, "align": "right" } }, { "type": "Label", "props": { "y": 310, "x": 350, "wordWrap": true, "width": 250, "var": "heroOrigin", "text": "暗示法法师打发大发送到发送阿斯达发送到发送到按时按时发送到", "padding": "5,0,0,5", "height": 85, "fontSize": 18, "font": "SimHei", "color": "#d7e6ff", "align": "left" } }, { "type": "Panel", "props": { "y": 464, "x": 18, "width": 562, "var": "skill_panel", "height": 367 }, "child": [{ "type": "Image", "props": { "y": 6, "x": -7, "width": 298, "skin": "ui_hero/img-tongyong-taitou-1.png", "sizeGrid": "15,20,20,15", "height": 26 }, "child": [{ "type": "Label", "props": { "y": 2, "x": 92, "text": "队长技能", "fontSize": 20, "color": "#dde2f2", "align": "center" } }] }, { "type": "Label", "props": { "y": 44, "x": 0, "width": 550, "height": 115, "bgColor": "#262449", "alpha": 1 }, "child": [{ "type": "Image", "props": { "x": 10, "width": 70, "var": "Teamskill_Icon", "height": 70, "centerY": 0 } }, { "type": "Label", "props": { "y": 18, "x": 93, "width": 264, "var": "skill_Name", "text": "sword master", "height": 22, "fontSize": 20, "font": "SimHei", "color": "#fbffd6" } }, { "type": "HTMLDivElement", "props": { "y": 42, "x": 89, "width": 454, "var": "skill_Origin", "height": 69 } }] }, { "type": "Image", "props": { "y": 170, "x": 0, "width": 298, "skin": "ui_hero/img-tongyong-taitou-1.png", "sizeGrid": "15,20,20,15", "height": 26 }, "child": [{ "type": "Label", "props": { "y": 2, "x": 92, "text": "被动技能", "fontSize": 20, "color": "#dde2f2", "align": "center" } }] }, { "type": "List", "props": { "y": 204, "x": 0, "width": 550, "var": "skill_List", "spaceY": 10, "renderType": "render", "height": 640 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 550, "renderType": "render", "height": 94 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 550, "height": 94, "bgColor": "#5b335d", "alpha": 1 } }, { "type": "Image", "props": { "y": 12, "x": 6, "width": 76, "skin": "ui_main/btn-zhu-shangcheng.png", "sizeGrid": "15,15,15,15", "renderType": "render", "name": "skill_Icon", "height": 76 } }, { "type": "Label", "props": { "y": 12, "x": 89, "width": 400, "renderType": "render", "name": "skill_Name", "height": 23, "fontSize": 20, "color": "#fbffd6" } }, { "type": "HTMLDivElement", "props": { "y": 40, "x": 89, "width": 434, "name": "skill_Base", "height": 26 } }, { "type": "Label", "props": { "y": 12, "x": 6, "width": 76, "visible": true, "name": "SkillLock", "height": 76, "bgColor": "#20263e", "alpha": 0.9 } }, { "type": "Label", "props": { "y": 24, "x": 21, "text": "解锁", "strokeColor": "#000000", "stroke": 2, "name": "openlock", "fontSize": 22, "font": "SimHei", "color": "#e03535", "align": "left" } }, { "type": "Label", "props": { "y": 47, "x": 8, "text": "lv.100", "strokeColor": "#000000", "stroke": 2, "name": "SkillLv", "fontSize": 20, "font": "SimHei", "color": "#e03535", "align": "left" } }] }] }] }, { "type": "Button", "props": { "y": 111, "x": 257, "width": 72, "var": "hero_peck", "stateNum": 1, "skin": "ui_main/btn-zhujiemian-yingxiongjinjie.png", "labelSize": 20, "labelFont": "SimHei", "labelColors": "#fefeff", "label": "礼包", "height": 72, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 69, "x": -5, "width": 68, "var": "peck_time", "strokeColor": "#506084", "stroke": 2, "height": 22, "fontSize": 16, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Image", "props": { "y": -3, "x": 38, "visible": false, "var": "heropeck_red", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Label", "props": { "y": 286, "x": 354, "width": 174, "text": "英雄简介:", "height": 29, "fontSize": 20, "font": "SimHei", "color": "#fefeff", "align": "left" } }, { "type": "Label", "props": { "y": 459, "x": 18, "width": 550, "height": 2, "bgColor": "#262449" } }] }] }] };
            return Hero_AlInfoUI;
        }(View));
        heroList.Hero_AlInfoUI = Hero_AlInfoUI;
    })(heroList = ui.heroList || (ui.heroList = {}));
})(ui || (ui = {}));
(function (ui) {
    var loading;
    (function (loading) {
        var ChangeSceneViewUI = /** @class */ (function (_super) {
            __extends(ChangeSceneViewUI, _super);
            function ChangeSceneViewUI() {
                return _super.call(this) || this;
            }
            ChangeSceneViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.loading.ChangeSceneViewUI.uiView);
            };
            ChangeSceneViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "var": "backGround", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "var": "img_bg", "height": 1200 } }, { "type": "Label", "props": { "top": -100, "right": -100, "mouseThrough": false, "mouseEnabled": false, "left": -100, "bottom": -100, "bgColor": "#000000", "alpha": 0.6 } }, { "type": "Image", "props": { "y": 188, "skin": "ui_login/img-qihuan-guanka.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 16, "x": 32, "width": 136, "height": 148 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_login/icon-haiditieshi--guanka.png", "renderType": "mask" } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "img_sign", "skin": "ui_login/icon-haiditieshi--guanka.png" } }] }, { "type": "Label", "props": { "y": 87, "x": 349, "var": "scene_name", "text": "东方古街", "fontSize": 60, "font": "SimHei", "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5, "align": "left" } }] }] }] };
            return ChangeSceneViewUI;
        }(View));
        loading.ChangeSceneViewUI = ChangeSceneViewUI;
    })(loading = ui.loading || (ui.loading = {}));
})(ui || (ui = {}));
(function (ui) {
    var loading;
    (function (loading) {
        var LoadingViewUI = /** @class */ (function (_super) {
            __extends(LoadingViewUI, _super);
            function LoadingViewUI() {
                return _super.call(this) || this;
            }
            LoadingViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.loading.LoadingViewUI.uiView);
            };
            LoadingViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "var": "backGround", "top": 0, "skin": "ui_noPack/login.png", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "width": 469, "var": "loadingtxt", "text": "加载中...", "strokeColor": "#3a3245", "stroke": 4, "height": 33, "fontSize": 33, "font": "SimHei", "color": "#fffaec", "centerX": 6, "bottom": 342, "bold": true, "align": "center" } }, { "type": "Label", "props": { "width": 592, "height": 26, "centerX": 2, "bottom": 309, "bgColor": "#1a1225", "alpha": 0.8 } }, { "type": "Image", "props": { "y": 867, "x": 82, "width": 1, "visible": true, "var": "sliderValue", "skin": "ui_login/img-jindutiao-tongyong.png", "height": 23, "bottom": 310, "anchorY": 0, "anchorX": 0 } }, { "type": "Label", "props": { "text": "Powered by LayaAir Engine", "left": 40, "fontSize": 18, "font": "SimHei", "color": "#bfc0b2", "bottom": 30 } }] }] };
            return LoadingViewUI;
        }(View));
        loading.LoadingViewUI = LoadingViewUI;
    })(loading = ui.loading || (ui.loading = {}));
})(ui || (ui = {}));
(function (ui) {
    var login;
    (function (login) {
        var CreateViewUI = /** @class */ (function (_super) {
            __extends(CreateViewUI, _super);
            function CreateViewUI() {
                return _super.call(this) || this;
            }
            CreateViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.login.CreateViewUI.uiView);
            };
            CreateViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "var": "backGround", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "var": "bgImg", "top": 0, "skin": "ui_noPack/login_background.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "View", "props": { "y": 940, "x": 410, "var": "suipianeffect" } }, { "type": "View", "props": { "y": 1018, "x": 535, "var": "xingxingmod" } }, { "type": "Image", "props": { "y": 752, "x": 0, "width": 750, "skin": "ui_login/login_foreground.png", "height": 448, "bottom": 0 } }, { "type": "View", "props": { "x": 182, "var": "heromod", "bottom": 67 } }, { "type": "View", "props": { "x": 182, "var": "stareffect", "bottom": 67 } }, { "type": "Image", "props": { "x": 193, "skin": "ui_common/img-gaiming-bg-chuangjue.png", "centerX": 3, "bottom": 301 } }, { "type": "TextInput", "props": { "width": 285, "var": "input", "valign": "middle", "type": "text", "promptColor": "#bfc0b2", "prompt": "请输入角色名", "maxChars": 12, "height": 54, "fontSize": 29, "font": "SimHei", "color": "#bfc0b2", "centerX": -35, "bottom": 324, "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Button", "props": { "var": "rBtn", "stateNum": 1, "skin": "ui_common/btn-suijin-mingzi.png", "mouseEnabled": true, "centerX": 150, "bottom": 308 } }, { "type": "Button", "props": { "var": "loginBtn", "stateNum": 1, "skin": "ui_common/btn-kaishi-chuangjue.png", "sizeGrid": "20,20,20,20", "mouseEnabled": true, "labelStrokeColor": "#d3383a", "labelStroke": 4, "labelSize": 37, "labelPadding": "-1", "labelFont": "SimHei", "labelColors": "#ffffff,#ffffff,#ffffff,#ffffff", "label": "开始游戏", "centerX": 7, "bottom": 203, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "x": 209, "width": 346, "var": "countlabel", "strokeColor": "#14151b", "stroke": 4, "height": 36, "fontSize": 36, "font": "SimHei", "color": "#fffaec", "bottom": 135, "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 157, "skin": "ui_login/login_name.png", "scaleY": 2, "scaleX": 2, "centerX": 5, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 1138, "x": 58, "text": "Powered by LayaAir Engine", "fontSize": 20, "font": "SimHei", "color": "#bfc0b2" } }] }] };
            return CreateViewUI;
        }(View));
        login.CreateViewUI = CreateViewUI;
    })(login = ui.login || (ui.login = {}));
})(ui || (ui = {}));
(function (ui) {
    var login;
    (function (login) {
        var LoginViewUI = /** @class */ (function (_super) {
            __extends(LoginViewUI, _super);
            function LoginViewUI() {
                return _super.call(this) || this;
            }
            LoginViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.login.LoginViewUI.uiView);
            };
            LoginViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "var": "backGround", "top": 0, "skin": "ui_noPack/login.png", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 808, "x": 193, "var": "accountInputBg", "skin": "ui_common/img-gaiming-bg-chuangjue.png", "centerX": 3 } }, { "type": "TextInput", "props": { "y": 849, "width": 285, "var": "accountInput", "valign": "middle", "type": "text", "text": "请输入角色名", "promptColor": "#bfc0b2", "maxChars": 12, "height": 54, "fontSize": 29, "font": "SimHei", "color": "#bfc0b2", "centerX": -35, "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Button", "props": { "y": 805, "x": 480, "var": "rBtn", "stateNum": 1, "skin": "ui_common/btn-suijin-mingzi.png", "mouseEnabled": true, "centerX": 150 } }, { "type": "Button", "props": { "y": 957, "var": "loginBtn", "stateNum": 1, "skin": "ui_common/btn-kaishi-chuangjue.png", "sizeGrid": "20,20,20,20", "mouseEnabled": true, "labelStrokeColor": "#d3383a", "labelStroke": 4, "labelSize": 37, "labelPadding": "-1", "labelFont": "SimHei", "labelColors": "#ffffff,#ffffff,#ffffff,#ffffff", "label": "开始游戏", "centerX": 7, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "text": "Powered by LayaAir Engine", "left": 40, "fontSize": 18, "font": "SimHei", "color": "#bfc0b2", "bottom": 30 } }] }] };
            return LoginViewUI;
        }(View));
        login.LoginViewUI = LoginViewUI;
    })(login = ui.login || (ui.login = {}));
})(ui || (ui = {}));
(function (ui) {
    var Mail;
    (function (Mail) {
        var MailLineViewUI = /** @class */ (function (_super) {
            __extends(MailLineViewUI, _super);
            function MailLineViewUI() {
                return _super.call(this) || this;
            }
            MailLineViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.Mail.MailLineViewUI.uiView);
            };
            MailLineViewUI.uiView = { "type": "View", "props": { "width": 622, "height": 122 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "renderType": "render" }, "child": [{ "type": "Image", "props": { "width": 626, "var": "btn", "skin": "ui_mail/ui-liebiao-bg-youjian.png", "sizeGrid": "4,11,10,3", "height": 102 } }, { "type": "Label", "props": { "y": 11, "x": 111, "var": "mailTitle", "text": "PVP联赛活动奖励", "fontSize": 23, "font": "SimHei", "color": "#46506b", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 42, "x": 108, "var": "notRead", "text": "未读", "fontSize": 22, "font": "SimHei", "color": "#377b51", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 490, "var": "lastTime", "text": "有效期:30天", "fontSize": 18, "font": "SimHei", "color": "#596072", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 66, "x": 105, "wordWrap": true, "width": 406, "var": "mailContent", "leading": 4, "height": 18, "fontSize": 18, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Image", "props": { "y": 14, "x": 542, "skin": "ui_camp/img-huawen2.png", "alpha": 0.6 } }, { "type": "Image", "props": { "y": 10, "x": 21, "width": 76, "skin": "ui_mail/img-youjian-youjian.png", "height": 76 } }, { "type": "Image", "props": { "y": 43, "x": 563, "width": 38, "var": "itemImg", "skin": "ui_mail/img-liwu-youjian.png", "height": 42 } }, { "type": "Label", "props": { "y": 11, "x": 384, "var": "mailReciveTime", "text": "2018.09.27", "fontSize": 20, "font": "SimHei", "color": "#596072", "align": "left" } }] }] };
            return MailLineViewUI;
        }(View));
        Mail.MailLineViewUI = MailLineViewUI;
    })(Mail = ui.Mail || (ui.Mail = {}));
})(ui || (ui = {}));
(function (ui) {
    var Mail;
    (function (Mail) {
        var MailTipViewUI = /** @class */ (function (_super) {
            __extends(MailTipViewUI, _super);
            function MailTipViewUI() {
                return _super.call(this) || this;
            }
            MailTipViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.Mail.MailTipViewUI.uiView);
            };
            MailTipViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": -900, "x": -1125, "width": 3000, "var": "returnImg", "height": 3000, "centerY": 0, "centerX": 0, "bgColor": "#000000", "alpha": 0.6 } }, { "type": "Button", "props": { "y": 153, "x": 84, "width": 590, "label": "label", "height": 679 } }, { "type": "Label", "props": { "y": 191, "x": 84, "width": 590, "mouseThrough": false, "height": 640, "bgColor": "#c2c1ca", "alpha": 1 } }, { "type": "Image", "props": { "y": 152, "x": 84, "width": 590, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "sizeGrid": "2,0,1,0", "mouseThrough": false, "height": 44 }, "child": [{ "type": "Label", "props": { "x": 45, "text": "邮件", "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "centerY": 0, "align": "left" } }, { "type": "Label", "props": { "x": 21, "width": 6, "height": 27, "centerY": 0, "bgColor": "#df8e2f", "alpha": 1 } }] }, { "type": "Box", "props": { "y": 601, "x": 124, "var": "aFFixBox" }, "child": [{ "type": "Image", "props": { "width": 512, "skin": "ui_common/img-jichushuxing-bg.png", "sizeGrid": "10,10,10,10", "height": 106 }, "child": [{ "type": "List", "props": { "y": 11, "x": 23, "width": 479, "var": "list", "spaceX": 16, "height": 83 }, "child": [{ "type": "Box", "props": { "renderType": "render", "name": "render" }, "child": [{ "type": "Button", "props": { "width": 80, "name": "btn", "height": 80 } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 84, "height": 84, "color": "#20263e" } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 84, "name": "bgImg", "height": 84, "color": "#20263e" } }, { "type": "Image", "props": { "y": 1, "x": 2, "width": 80, "visible": true, "skin": "ui_icon/icon_shili.png", "name": "quaImg", "height": 80 } }, { "type": "Image", "props": { "y": 1, "x": 2, "width": 80, "visible": true, "skin": "ui_icon/icon_shili.png", "name": "img", "height": 80 } }, { "type": "Label", "props": { "y": 62, "x": 6, "width": 74, "text": "12", "strokeColor": "#000000", "stroke": 2, "name": "num", "height": 16, "fontSize": 18, "font": "SimHei", "color": "#ffffff", "align": "right" } }, { "type": "Label", "props": { "y": 86, "x": 3, "width": 78, "text": "12", "name": "name", "height": 16, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "align": "center" } }] }] }] }] }, { "type": "Box", "props": { "y": 558, "x": 92, "width": 577, "height": 173 }, "child": [{ "type": "Image", "props": { "y": -1, "x": 14, "width": 297, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 27 } }, { "type": "Label", "props": { "y": 2, "x": 36.99999999999977, "text": "附件", "fontSize": 22, "font": "SimHei", "color": "#e4eafe", "align": "left" } }, { "type": "Label", "props": { "x": 15.999999999999773, "width": 7, "height": 25, "bgColor": "#df8e2f", "alpha": 1 } }, { "type": "Image", "props": { "y": 188, "x": 496.9999999999998, "skin": "ui_camp/img-huawen2.png", "alpha": 0.3 } }, { "type": "Image", "props": { "y": 164, "x": 567.9999999999998, "width": 2, "skin": "ui_shop/img-jianbian-choujiang.png", "skewY": -90, "skewX": -90, "height": 568 } }, { "type": "Image", "props": { "y": -281, "x": 77, "skin": "ui_camp/img-huawen2.png", "skewY": -90, "skewX": -90, "alpha": 0.3 } }] }, { "type": "Box", "props": { "y": 236, "x": 86 }, "child": [{ "type": "Label", "props": { "y": 1, "x": 47, "var": "mailTitle", "text": "PVP联赛活动奖励", "fontSize": 20, "font": "SimHei", "color": "#225a88", "align": "left" } }, { "type": "Label", "props": { "y": 274, "x": 446, "var": "mailReciveTime", "text": "2018.09.27", "fontSize": 20, "font": "SimHei", "color": "#20201f", "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 38, "x": 51, "width": 478, "var": "mailContent", "height": 175 } }] }, { "type": "Box", "props": { "y": 752, "x": 302, "width": 185, "var": "operationBtn" }, "child": [{ "type": "Button", "props": { "width": 186, "var": "operationBtn0", "stateNum": 1, "skin": "ui_main/btn-zhu-zhuangbei.png", "sizeGrid": "0,1,0,1", "labelSize": 28, "labelFont": "SimHei", "labelBold": true, "labelAlign": "center", "height": 50 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#4f7c23" } }] }, { "type": "Label", "props": { "y": 13, "x": 0, "width": 186, "var": "btnLab", "text": "领取", "strokeColor": "#095a28", "stroke": 2, "mouseThrough": true, "height": 26, "fontSize": 26, "font": "SimHei", "color": "#fefeff", "bold": true, "align": "center" } }] }, { "type": "Button", "props": { "width": 47, "var": "closeBtn", "top": 154, "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "left": 610, "height": 44 } }] };
            return MailTipViewUI;
        }(View));
        Mail.MailTipViewUI = MailTipViewUI;
    })(Mail = ui.Mail || (ui.Mail = {}));
})(ui || (ui = {}));
(function (ui) {
    var Mail;
    (function (Mail) {
        var MailViewUI = /** @class */ (function (_super) {
            __extends(MailViewUI, _super);
            function MailViewUI() {
                return _super.call(this) || this;
            }
            MailViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.Mail.MailViewUI.uiView);
            };
            MailViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Box", "props": { "width": 689, "height": 999, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Box", "props": { "y": 14, "name": "t", "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": -4, "x": 0, "width": 660, "height": 50, "bgColor": "#1b2838", "alpha": 1 }, "child": [{ "type": "Label", "props": { "x": 18, "width": 6, "height": 24, "centerY": 0, "bgColor": "#5d4565", "alpha": 1 } }, { "type": "Label", "props": { "x": 40, "text": "邮件", "fontSize": 25, "font": "SimHei", "color": "#d6d7dd", "centerY": 0, "bold": true, "align": "left" } }] }, { "type": "HTMLDivElement", "props": { "y": 2, "x": 148, "width": 100, "var": "capacityLab", "height": 21 } }, { "type": "Label", "props": { "y": 45, "x": 0, "width": 660, "mouseThrough": false, "height": 900, "bgColor": "#616985" } }, { "type": "Image", "props": { "y": 846, "x": 24, "skin": "ui_camp/img-huawen1.png", "skewX": 180, "alpha": 0.5 } }] }, { "type": "Box", "props": { "y": 54, "width": 660, "height": 900, "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 660, "var": "leftBg", "skin": "", "height": 900 } }] }, { "type": "Box", "props": { "y": 66, "x": 41, "var": "mailBox" }, "child": [{ "type": "List", "props": { "y": 0, "x": 0, "width": 626, "visible": false, "var": "mailList", "spaceY": 20, "height": 791 }, "child": [{ "type": "Box", "props": { "renderType": "render" }, "child": [{ "type": "Image", "props": { "width": 626, "skin": "ui_mail/ui-liebiao-bg-youjian.png", "sizeGrid": "4,11,10,3", "name": "btn", "height": 102 } }, { "type": "Label", "props": { "y": 11, "x": 111, "text": "PVP联赛活动奖励", "name": "mailTitle", "fontSize": 23, "font": "SimHei", "color": "#46506b", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 42, "x": 108, "text": "未读", "name": "notRead", "fontSize": 22, "font": "SimHei", "color": "#377b51", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 490, "text": "有效期:30天", "name": "lastTime", "fontSize": 18, "font": "SimHei", "color": "#596072", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 66, "x": 105, "wordWrap": true, "width": 406, "name": "mailContent", "leading": 4, "height": 18, "fontSize": 18, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Image", "props": { "y": 10, "x": 21, "width": 76, "skin": "ui_mail/img-youjian-youjian.png", "height": 76 } }, { "type": "Image", "props": { "y": 43, "x": 563, "width": 38, "skin": "ui_mail/img-liwu-youjian.png", "name": "itemImg", "height": 42 } }, { "type": "Label", "props": { "y": 11, "x": 384, "text": "2018.09.27", "name": "mailReciveTime", "fontSize": 20, "font": "SimHei", "color": "#596072", "align": "left" } }] }] }, { "type": "Panel", "props": { "width": 626, "var": "mailPanel", "height": 791 } }] }, { "type": "Image", "props": { "y": 366, "x": 204, "width": 304, "var": "noMailLab", "height": 172 }, "child": [{ "type": "Label", "props": { "y": 73, "x": -2, "width": 303, "var": "MailLab", "text": "当前无邮件", "height": 55, "fontSize": 50, "font": "SimHei", "color": "#373851", "bold": true, "align": "center" } }] }, { "type": "Button", "props": { "y": 905, "x": 199, "width": 356, "var": "delAll", "stateNum": 1, "skin": "ui_action/btn-toupiao-zhichi-huodong.png", "sizeGrid": "0,55,0,63", "labelSize": 28, "labelFont": "SimHei", "labelBold": true, "labelAlign": "center", "height": 86, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 22, "x": 74, "text": "一键删除", "mouseThrough": true, "fontSize": 40, "font": "SimHei", "color": "#491a22", "bold": true, "align": "left" } }] }, { "type": "Button", "props": { "y": 905, "x": 507, "width": 352, "var": "getAll", "stateNum": 1, "skin": "ui_action/btn-toupiao-fandui-huodong.png", "sizeGrid": "0,55,0,63", "height": 86, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 22, "x": 115, "text": "一键领取", "mouseThrough": true, "fontSize": 40, "font": "SimHei", "color": "#491a22", "bold": true, "align": "left" } }] }, { "type": "Button", "props": { "y": 30, "x": 642, "var": "closeBtn", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "anchorY": 0.5, "anchorX": 0.5 } }] }] }] };
            return MailViewUI;
        }(View));
        Mail.MailViewUI = MailViewUI;
    })(Mail = ui.Mail || (ui.Mail = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var ItemToolViewUI = /** @class */ (function (_super) {
            __extends(ItemToolViewUI, _super);
            function ItemToolViewUI() {
                return _super.call(this) || this;
            }
            ItemToolViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.main.ItemToolViewUI.uiView);
            };
            ItemToolViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "var": "backGround", "height": 1200 }, "child": [{ "type": "Label", "props": { "y": 58, "x": 38, "width": 548, "visible": true, "var": "tipstext", "text": "啦啦啦德玛西亚", "strokeColor": "#000000", "stroke": 3, "height": 691, "fontSize": 29, "font": "SimHei", "color": "#f3f3f3", "bold": true, "align": "left" } }] }] };
            return ItemToolViewUI;
        }(View));
        main.ItemToolViewUI = ItemToolViewUI;
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var list;
        (function (list) {
            var ListActionViewUI = /** @class */ (function (_super) {
                __extends(ListActionViewUI, _super);
                function ListActionViewUI() {
                    return _super.call(this) || this;
                }
                ListActionViewUI.prototype.createChildren = function () {
                    View.regComponent("Text", laya.display.Text);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.list.ListActionViewUI.uiView);
                };
                ListActionViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1108 }, "child": [{ "type": "Image", "props": { "width": 750, "height": 1108 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "wordWrap": false, "width": 750, "height": 1108, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "List", "props": { "y": 10, "x": 10, "width": 735, "var": "actionList", "spaceY": 8, "height": 1098 }, "child": [{ "type": "Box", "props": { "y": 80, "x": 365, "width": 730, "renderType": "render", "height": 162, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 730, "skin": "ui_action/ui-liebiaotiao-bg-huodong.png", "sizeGrid": "6,20,20,6", "name": "bgImg", "height": 162 }, "child": [{ "type": "Image", "props": { "y": 1, "x": 1, "width": 727, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "sizeGrid": "1,1,1,1", "height": 38 } }, { "type": "Image", "props": { "y": 6, "x": 11, "width": 4, "skin": "ui_action/ui-daojishi-bg-huodong.png", "height": 28 } }] }, { "type": "Text", "props": { "y": 3, "x": 29, "width": 110, "valign": "middle", "text": "话题先锋", "name": "txt_action_name", "height": 32, "fontSize": 26, "font": "SimHei", "color": "#f6d6af", "bold": true, "align": "left" } }, { "type": "Text", "props": { "y": 3, "x": 315, "width": 370, "valign": "middle", "text": "活动时间：12:00-13:00,15:00-16:00", "name": "txt_action_content", "height": 31, "fontSize": 22, "font": "SimHei", "color": "#fbd4a4", "bold": false, "align": "right" } }, { "type": "Button", "props": { "y": 3, "x": 143, "stateNum": 1, "skin": "ui_action/btn-xiangqing-huodong.png", "name": "btn_tips" } }, { "type": "Button", "props": { "y": 20, "x": 708, "visible": false, "stateNum": 1, "skin": "ui_action/btn-fenxiang.png", "name": "btn_share", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 100, "x": 631, "width": 162, "stateNum": 1, "skin": "ui_action/btn-huodong-p.png", "name": "btn_attend", "labelSize": 26, "labelPadding": "-10", "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "参加", "height": 70, "gray": false, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 39, "x": 11, "skin": "ui_action/img-anniudaojishi-huodong.png", "name": "attend_time" }, "child": [{ "type": "Text", "props": { "y": 3, "x": 63, "width": 86, "valign": "middle", "text": "12:00:00", "name": "txt_remaning", "height": 24, "fontSize": 20, "font": "SimHei", "color": "#ffc58b", "bold": false, "align": "left" } }] }, { "type": "Text", "props": { "y": 42, "x": 6, "width": 151, "valign": "middle", "text": "100级开启", "name": "txt_condition", "height": 24, "fontSize": 20, "font": "SimHei", "color": "#ffc58b", "bold": false, "align": "center" } }] }] }] }] }] };
                return ListActionViewUI;
            }(View));
            list.ListActionViewUI = ListActionViewUI;
        })(list = main.list || (main.list = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var list;
        (function (list) {
            var ListEquipViewUI = /** @class */ (function (_super) {
                __extends(ListEquipViewUI, _super);
                function ListEquipViewUI() {
                    return _super.call(this) || this;
                }
                ListEquipViewUI.prototype.createChildren = function () {
                    View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.list.ListEquipViewUI.uiView);
                };
                ListEquipViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1108 }, "child": [{ "type": "List", "props": { "y": 120, "var": "E_list", "spaceY": 5, "right": 0, "renderType": "render", "left": 0, "height": 991 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 10, "width": 730, "renderType": "render", "height": 90 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "ui_common/img-lanzituo-tongyong.png", "sizeGrid": "0,0,15,0", "right": 0, "name": "bg", "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "y": 30, "x": 566, "skin": "ui_hero/img-zhuangshi-tangchuchuang.png" } }, { "type": "Image", "props": { "y": 0, "x": 660, "skin": "ui_common/img-huawen2.png", "right": 0 } }, { "type": "Image", "props": { "y": 0, "x": 87, "skin": "ui_common/img-huawen1.png" } }, { "type": "Image", "props": { "y": 2, "x": 0, "width": 84, "skin": "ui_hero/img-lanpinzhikuang.png", "name": "E_pinzhi", "height": 84 } }, { "type": "Image", "props": { "y": 2, "x": 0, "width": 84, "skin": "ui_icon/2.png", "name": "e_icon", "height": 84 } }, { "type": "Label", "props": { "y": 5, "x": 130, "text": "手套", "name": "e_name", "fontSize": 20, "font": "SimHei", "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 35, "x": 130, "width": 130, "name": "e_lv", "innerHTML": "htmlText", "height": 23 } }, { "type": "Label", "props": { "y": 65, "x": 130, "name": "e_base", "fontSize": 18, "font": "SimHei", "color": "#d6d7dd", "align": "left" } }, { "type": "Label", "props": { "y": 28, "x": 501, "width": 44, "visible": false, "text": "活动", "name": "Equep_Quality", "height": 25, "fontSize": 20, "font": "SimHei" } }, { "type": "Button", "props": { "y": 45, "x": 640, "width": 162, "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "sizeGrid": "15,0,3,0", "name": "btn_use", "labelSize": 28, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "label": "佩戴", "height": 68, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 0, "x": 2, "skin": "ui_hero/img-biaoqian-zhekou-bg.png", "name": "red" }, "child": [{ "type": "Label", "props": { "y": 1, "x": 5, "width": 14, "text": "新", "strokeColor": "#d10805", "stroke": 3, "skewY": 13, "skewX": -8, "height": 12, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }, { "type": "Label", "props": { "y": 33, "x": 598, "visible": false, "text": "已佩戴", "name": "used", "fontSize": 28, "font": "SimHei", "color": "#d38343", "bold": true, "align": "left" } }] }] }, { "type": "Box", "props": { "y": 34, "x": 0, "width": 750, "height": 80 }, "child": [{ "type": "Label", "props": { "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 3, "bgColor": "#2c2129", "alpha": 0.7 } }, { "type": "Label", "props": { "y": -28, "x": 108, "text": "时空法器", "fontSize": 22, "font": "SimHei", "color": "#fefeff", "align": "left" } }, { "type": "Label", "props": { "y": -28, "x": 10, "var": "E_mynum", "fontSize": 22, "font": "SimHei", "color": "#fefeff", "align": "left" } }, { "type": "Button", "props": { "y": 38, "x": 419, "width": 118, "var": "btn_4", "height": 76, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 4, "x": 0, "width": 118, "var": "o4", "skin": "ui_common/btn-biaoqianye-yinxiong.png", "sizeGrid": "12,11,4,16", "height": 72 } }, { "type": "Image", "props": { "y": 5, "x": 15, "var": "icon4", "skin": "ui_equip/img-rongqi-weizhuangbei-faqi.png", "pivotY": -8, "pivotX": -27 } }, { "type": "Label", "props": { "y": 3, "x": 118, "width": 2, "height": 77, "bgColor": "#232522" } }, { "type": "Label", "props": { "y": 55, "x": 42, "var": "name4", "text": "容器", "fontSize": 24, "font": "SimHei", "color": "#89848a", "align": "left" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "red_4", "skin": "ui_hero/img-biaoqian-zhekou-bg.png" }, "child": [{ "type": "Label", "props": { "y": 1, "x": 6, "width": 14, "text": "新", "strokeColor": "#d10805", "stroke": 3, "skewY": 13, "skewX": -8, "height": 12, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }, { "type": "Image", "props": { "y": 5, "x": 40, "width": 50, "var": "E_4", "height": 50 } }] }, { "type": "Button", "props": { "y": 38, "x": 539, "width": 118, "var": "btn_5", "height": 76, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 4, "x": 0, "width": 118, "var": "o5", "skin": "ui_common/btn-biaoqianye-yinxiong.png", "sizeGrid": "12,11,4,16", "height": 72 } }, { "type": "Image", "props": { "y": 5, "x": 15, "width": 36, "var": "icon5", "skin": "ui_equip/img-ling-weizhuangbei-faqi.png", "pivotY": -8, "pivotX": -27, "height": 36 } }, { "type": "Label", "props": { "y": 3, "x": 118, "width": 2, "height": 77, "bgColor": "#232522" } }, { "type": "Label", "props": { "y": 55, "x": 42, "width": 40, "var": "name5", "text": "灵", "height": 20, "fontSize": 24, "font": "SimHei", "color": "#89848a", "align": "center" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "red_5", "skin": "ui_hero/img-biaoqian-zhekou-bg.png" }, "child": [{ "type": "Label", "props": { "y": 1, "x": 6, "width": 14, "text": "新", "strokeColor": "#d10805", "stroke": 3, "skewY": 13, "skewX": -8, "height": 12, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }, { "type": "Image", "props": { "y": 5, "x": 40, "width": 50, "var": "E_5", "height": 50 } }] }, { "type": "Button", "props": { "y": 38, "x": 298, "width": 118, "var": "btn_3", "height": 76, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 4, "x": 0, "width": 118, "var": "o3", "skin": "ui_common/btn-biaoqianye-yinxiong.png", "sizeGrid": "12,11,4,16", "height": 72 } }, { "type": "Image", "props": { "y": 5, "x": 15, "var": "icon3", "skin": "ui_equip/img-juanzhou-weizhuangbei-faqi.png", "pivotY": -8, "pivotX": -27 } }, { "type": "Label", "props": { "y": 3, "x": 119, "width": 2, "height": 77, "bgColor": "#232522" } }, { "type": "Label", "props": { "y": 55, "x": 42, "var": "name3", "text": "卷轴", "fontSize": 24, "font": "SimHei", "color": "#89848a" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "red_3", "skin": "ui_hero/img-biaoqian-zhekou-bg.png" }, "child": [{ "type": "Label", "props": { "y": 1, "x": 6, "width": 14, "text": "新", "strokeColor": "#d10805", "stroke": 3, "skewY": 13, "skewX": -8, "height": 12, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }, { "type": "Image", "props": { "y": 5, "x": 40, "width": 50, "var": "E_3", "height": 50 } }] }, { "type": "Button", "props": { "y": 38, "x": 59, "width": 118, "var": "btn_1", "height": 76, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 4, "x": 0, "width": 118, "var": "o1", "skin": "ui_common/btn-biaoqianye-yinxiong.png", "sizeGrid": "12,11,4,16", "height": 72 } }, { "type": "Image", "props": { "y": 5, "x": 16, "var": "icon1", "skin": "ui_equip/img-shoutou-weizhuangbei-faqi.png", "pivotY": -8, "pivotX": -27 } }, { "type": "Label", "props": { "y": 3, "x": 118, "width": 2, "height": 77, "bgColor": "#232522" } }, { "type": "Label", "props": { "y": 55, "x": 35, "var": "name1", "text": "手套", "fontSize": 24, "font": "SimHei", "color": "#89848a", "align": "left" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "red_1", "skin": "ui_hero/img-biaoqian-zhekou-bg.png" }, "child": [{ "type": "Label", "props": { "y": 1, "x": 6, "width": 14, "text": "新", "strokeColor": "#d10805", "stroke": 3, "skewY": 13, "skewX": -8, "height": 12, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }, { "type": "Image", "props": { "y": 5, "x": 40, "width": 50, "var": "E_1", "height": 50 } }] }, { "type": "Button", "props": { "y": 38, "x": 179, "width": 118, "var": "btn_2", "height": 76, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 4, "x": 0, "width": 118, "var": "o2", "skin": "ui_common/btn-biaoqianye-yinxiong.png", "sizeGrid": "12,11,4,16", "height": 72 } }, { "type": "Image", "props": { "y": 5, "x": 15, "var": "icon2", "skin": "ui_equip/img-xingjie-weizhuangbei-faqi.png", "pivotY": -8, "pivotX": -27 } }, { "type": "Label", "props": { "y": 3, "x": 118, "width": 2, "height": 77, "bgColor": "#232522" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "red_2", "skin": "ui_hero/img-biaoqian-zhekou-bg.png" }, "child": [{ "type": "Label", "props": { "y": 1, "x": 6, "width": 14, "text": "新", "strokeColor": "#d10805", "stroke": 3, "skewY": 13, "skewX": -8, "height": 12, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }, { "type": "Label", "props": { "y": 55, "x": 42, "var": "name2", "text": "星戒", "fontSize": 24, "font": "SimHei", "color": "#89848a" } }, { "type": "Image", "props": { "y": 5, "x": 40, "width": 50, "var": "E_2", "height": 50 } }] }, { "type": "Button", "props": { "y": 42, "x": 672, "width": 125, "var": "E_make", "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "labelSize": 26, "labelFont": "SimHei", "labelColors": "#ffffff", "label": "工艺", "height": 48, "anchorY": 0.5, "anchorX": 0.5 } }] }] };
                return ListEquipViewUI;
            }(View));
            list.ListEquipViewUI = ListEquipViewUI;
        })(list = main.list || (main.list = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var list;
        (function (list) {
            var ListHeroViewUI = /** @class */ (function (_super) {
                __extends(ListHeroViewUI, _super);
                function ListHeroViewUI() {
                    return _super.call(this) || this;
                }
                ListHeroViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.list.ListHeroViewUI.uiView);
                };
                ListHeroViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1108 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 0, "width": 750, "height": 58 }, "child": [{ "type": "Label", "props": { "y": 5, "x": 0, "width": 750, "height": 48, "bgColor": "#2c2129", "alpha": 0.7 } }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 0, "var": "ChildBox" } }, { "type": "Label", "props": { "y": 0, "x": 0 }, "child": [{ "type": "Image", "props": { "y": 5, "x": 17, "width": 108, "visible": false, "var": "lv", "skin": "ui_common/btn-biaoqianye-yinxiong.png", "sizeGrid": "12,11,4,16", "height": 52 } }, { "type": "Label", "props": { "y": 5, "x": 17, "width": 108, "visible": true, "var": "Btn_Lv", "padding": "8", "height": 48 } }, { "type": "Label", "props": { "y": 5, "x": 17, "width": 108, "text": "升级", "padding": "8", "height": 48, "fontSize": 26, "font": "SimHei", "color": "#d5bdd9", "align": "center" } }, { "type": "Image", "props": { "y": 0, "x": 10, "width": 26, "visible": false, "var": "red_lv", "skin": "ui_common/img-tixing.png", "height": 26 } }, { "type": "Image", "props": { "y": 5, "x": 152, "width": 108, "visible": false, "var": "star", "skin": "ui_common/btn-biaoqianye-yinxiong.png", "sizeGrid": "12,11,4,16", "height": 52 } }, { "type": "Label", "props": { "y": 5, "x": 152, "width": 108, "visible": true, "var": "Btn_Star", "padding": "8", "height": 48 } }, { "type": "Label", "props": { "y": 5, "x": 152, "width": 108, "text": "进阶", "padding": "8", "height": 48, "fontSize": 26, "font": "SimHei", "color": "#9a9fb2", "align": "center" } }, { "type": "Image", "props": { "y": 0, "x": 145, "width": 26, "visible": false, "var": "red_star", "skin": "ui_common/img-tixing.png", "height": 26 } }, { "type": "Image", "props": { "y": 5, "x": 287, "width": 108, "visible": false, "var": "war", "skin": "ui_common/btn-biaoqianye-yinxiong.png", "sizeGrid": "12,11,4,16", "height": 52 } }, { "type": "Label", "props": { "y": 5, "x": 287, "width": 108, "visible": true, "var": "Btn_War", "padding": "8", "height": 48 } }, { "type": "Label", "props": { "y": 5, "x": 287, "width": 108, "text": "布阵", "padding": "8", "height": 48, "fontSize": 26, "font": "SimHei", "color": "#9a9fb2", "align": "center" } }, { "type": "Label", "props": { "y": 14, "x": 34, "width": 2, "visible": false, "var": "lv_gang", "valign": "middle", "height": 25, "fontSize": 18, "font": "SimHei", "bgColor": "#d3c1aa", "align": "center" } }, { "type": "Label", "props": { "y": 14, "x": 170, "width": 2, "visible": false, "var": "star_gang", "valign": "middle", "height": 25, "fontSize": 18, "font": "SimHei", "bgColor": "#d3c1aa", "align": "center" } }, { "type": "Label", "props": { "y": 14, "x": 308, "width": 2, "visible": false, "var": "war_gang", "valign": "middle", "height": 25, "fontSize": 18, "font": "SimHei", "bgColor": "#d3c1aa", "align": "center" } }] }] }] };
                return ListHeroViewUI;
            }(View));
            list.ListHeroViewUI = ListHeroViewUI;
        })(list = main.list || (main.list = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var list;
        (function (list) {
            var ListPetViewUI = /** @class */ (function (_super) {
                __extends(ListPetViewUI, _super);
                function ListPetViewUI() {
                    return _super.call(this) || this;
                }
                ListPetViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.list.ListPetViewUI.uiView);
                };
                ListPetViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1108 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "alpha": 1 }, "child": [{ "type": "Label", "props": { "y": 10, "x": 23, "width": 125, "var": "petHit", "text": "72.83K  神兽伤害", "height": 22, "fontSize": 22, "font": "SimHei", "color": "#dde2f2" }, "child": [{ "type": "Image", "props": { "y": -8, "x": 0, "var": "info", "skin": "ui_action/btn-xiangqing-huodong.png" } }] }, { "type": "Label", "props": { "y": 40, "x": 0, "width": 750, "height": 98, "bgColor": "#2b2b2d", "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": -1, "x": 0, "width": 171, "height": 98 }, "child": [{ "type": "Label", "props": { "x": 11, "width": 150, "var": "UpdateTime", "text": "孵化时间：00:00:00", "height": 22, "fontSize": 16, "font": "SimHei", "color": "#d6d7dd", "bottom": 1, "align": "left" } }, { "type": "Label", "props": { "y": 24, "x": 100, "width": 47, "var": "Has_num", "text": "X0", "height": 31, "fontSize": 30, "color": "#fffef4" } }, { "type": "Image", "props": { "y": 3, "x": 12, "skin": "ui_icon/pet_egg.png" } }] }, { "type": "Image", "props": { "y": 5, "x": 181, "width": 85, "var": "Pet_iconbg", "skin": "ui_hero/img-lanpinzhikuang.png", "height": 85 }, "child": [{ "type": "Image", "props": { "var": "Pet_icon", "top": 0, "skin": "ui_icon/icon_tou_cjyzm.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": 5, "x": 98, "width": 32, "text": "LV:", "height": 23, "fontSize": 20, "font": "SimHei", "color": "#99ff79", "align": "left" } }, { "type": "Image", "props": { "y": 43, "x": 311, "skin": "ui_pet/img-xingzhuang-lan.png" } }, { "type": "Label", "props": { "y": 5, "x": 128, "width": 66, "var": "Pet_lv", "text": "405", "height": 23, "fontSize": 20, "font": "SimHei", "color": "#ffff79", "align": "left" } }, { "type": "Label", "props": { "y": 3, "x": 170, "width": 86, "var": "Pet_name", "text": "陆咬", "height": 24, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 37, "x": 97, "width": 150, "var": "add_pethurt", "text": "x100%近战英雄伤害啊啊啊", "height": 24, "fontSize": 18, "font": "SimHei", "color": "#d6d7dd", "align": "left" } }, { "type": "Label", "props": { "y": 61, "x": 97, "width": 150, "var": "add_herohurt", "text": "x100%近战英雄伤害啊啊啊", "height": 24, "fontSize": 18, "font": "SimHei", "color": "#d6d7dd", "align": "left" } }, { "type": "Label", "props": { "y": 37, "x": 348, "width": 102, "var": "add_nexthurt_pet", "text": "x100%近战英雄伤害啊啊啊", "height": 19, "fontSize": 18, "font": "SimHei", "color": "#d6d7dd", "align": "left" } }, { "type": "Label", "props": { "y": 61, "x": 348, "width": 102, "var": "add_nexthurt_hero", "text": "x100%近战英雄伤害啊啊啊", "height": 19, "fontSize": 18, "font": "SimHei", "color": "#d6d7dd", "align": "left" } }] }, { "type": "Label", "props": { "y": 13, "x": 169, "width": 1, "height": 76, "bgColor": "#689a6a" } }] }, { "type": "List", "props": { "y": 138, "x": 0, "width": 750, "var": "Pet_list", "spaceY": 10, "spaceX": 8, "repeatX": 2, "height": 932, "alpha": 1 }, "child": [{ "type": "Box", "props": { "y": 6, "x": 8, "width": 363, "renderType": "render", "height": 96 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 6, "width": 360, "skin": "ui_pet/img-liebiao-shenshou.png", "sizeGrid": "10,215,10,35", "height": 86, "alpha": 1 } }, { "type": "Image", "props": { "y": 7, "x": 6, "width": 86, "skin": "ui_hero/img-lanpinzhikuang.png", "name": "pet_icon_bg", "height": 78 } }, { "type": "Label", "props": { "y": 14, "x": 107, "width": 33, "text": "LV:", "height": 23, "fontSize": 20, "font": "SimHei", "color": "#86e779", "align": "left" } }, { "type": "Label", "props": { "y": 14, "x": 137, "width": 33, "text": "405", "name": "Pet_lv", "height": 23, "fontSize": 20, "font": "SimHei", "color": "#ffff79", "align": "left" } }, { "type": "Label", "props": { "y": 12, "x": 175, "width": 96, "text": "陆咬胶鲨", "name": "Pet_name", "height": 23, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 43, "x": 106, "width": 106, "text": "宠物伤害", "name": "pet_hurt", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#bfc7e4", "align": "left" } }, { "type": "Label", "props": { "y": 66, "x": 106, "width": 106, "text": "宠物伤害", "name": "hero_hurt", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#bfc7e4", "align": "left" } }, { "type": "Image", "props": { "y": 3, "x": 2, "width": 360, "skin": "ui_pet/img-liebiao-xuanzhong-shenshou.png", "sizeGrid": "4,25,15,8", "name": "choice", "height": 86, "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 17, "x": 279, "skin": "ui_pet/img-liebiao-xuanzhongbiaozhi-shenshou.png", "name": "pet_main" } }] }, { "type": "Button", "props": { "y": 7, "x": 4, "width": 354, "name": "click", "height": 79 } }, { "type": "Image", "props": { "y": 6, "x": 5, "width": 86, "skin": "ui_icon/icon_tou_atm.png", "name": "Pet_icon", "height": 80 }, "child": [{ "type": "Image", "props": { "y": 44, "x": 53, "skin": "ui_shop/img-tanhao.png", "name": "Pet_info" } }] }, { "type": "Image", "props": { "y": 0, "x": -1, "width": 26, "skin": "ui_hero/img-biaoqian-zhekou-bg.png", "name": "point", "height": 30 }, "child": [{ "type": "Label", "props": { "y": 1, "x": 6, "width": 14, "text": "新", "strokeColor": "#d10805", "stroke": 3, "skewY": 13, "skewX": -8, "height": 12, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }] }] }] }] };
                return ListPetViewUI;
            }(View));
            list.ListPetViewUI = ListPetViewUI;
        })(list = main.list || (main.list = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var list;
        (function (list) {
            var ListRoleViewUI = /** @class */ (function (_super) {
                __extends(ListRoleViewUI, _super);
                function ListRoleViewUI() {
                    return _super.call(this) || this;
                }
                ListRoleViewUI.prototype.createChildren = function () {
                    View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.list.ListRoleViewUI.uiView);
                };
                ListRoleViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1102 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 0, "width": 750, "height": 58 }, "child": [{ "type": "Label", "props": { "y": 5, "x": 28, "width": 104, "var": "achieven", "valign": "middle", "text": "成就", "padding": "0,-13", "height": 48, "fontSize": 20, "font": "SimHei", "color": "#d5bdd9", "bgColor": "#4d3a6b", "align": "center" }, "child": [{ "type": "Label", "props": { "y": 4, "x": 112, "width": 2, "valign": "middle", "height": 40, "fontSize": 18, "font": "SimHei", "bgColor": "#a395c5", "align": "center" } }, { "type": "Image", "props": { "y": 8, "x": 7, "skin": "ui_main/icon-chengjiu-renwu.png" } }, { "type": "Image", "props": { "y": -5, "x": 84, "width": 26, "visible": false, "var": "achPoint", "skin": "ui_common/img-tixing.png", "height": 26 } }] }, { "type": "Label", "props": { "y": 5, "x": 274, "width": 104, "var": "onMail", "valign": "middle", "text": "邮件", "padding": "0,-13", "height": 48, "fontSize": 20, "font": "SimHei", "color": "#9a9fb2", "bgColor": "#30485c", "alpha": 1, "align": "center" }, "child": [{ "type": "Label", "props": { "y": 5, "x": 113, "width": 2, "visible": true, "valign": "middle", "height": 38, "fontSize": 18, "font": "SimHei", "bgColor": "#a395c5", "align": "center" } }, { "type": "Image", "props": { "y": 8, "x": 4, "skin": "ui_main/icon-youjian-renwu.png" } }, { "type": "Image", "props": { "y": -5, "x": 85, "width": 26, "var": "redPoint", "skin": "ui_common/img-tixing.png", "height": 26 } }] }, { "type": "Label", "props": { "y": 5, "x": 398, "width": 104, "var": "setting", "valign": "middle", "text": "设置", "padding": "0,-13", "height": 48, "fontSize": 20, "font": "SimHei", "color": "#9a9fb2", "bgColor": "#2b5451", "alpha": 1, "align": "center" }, "child": [{ "type": "Image", "props": { "y": 8, "x": 5, "skin": "ui_main/icon-shezhi-renwu.png" } }] }, { "type": "Label", "props": { "y": 5, "x": 152, "width": 104, "var": "sign", "valign": "middle", "text": "签到", "padding": "0,-13", "height": 48, "fontSize": 20, "font": "SimHei", "color": "#9a9fb2", "bgColor": "#30485c", "alpha": 1, "align": "center" }, "child": [{ "type": "Label", "props": { "y": 5, "x": 113, "width": 2, "visible": true, "valign": "middle", "height": 38, "fontSize": 18, "font": "SimHei", "bgColor": "#a395c5", "align": "center" } }, { "type": "Image", "props": { "y": 8, "x": 4, "skin": "ui_main/icon-youjian-renwu.png" } }, { "type": "Image", "props": { "y": -5, "x": 85, "width": 26, "var": "btnHong_3", "skin": "ui_common/img-tixing.png", "height": 26 } }] }] }, { "type": "Box", "props": { "y": 68, "x": 10, "width": 730, "height": 96 }, "child": [{ "type": "Image", "props": { "x": 0, "width": 730, "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "14,12,16,15", "height": 96 } }, { "type": "Label", "props": { "y": 7, "x": 320, "width": 188, "var": "Camp_name", "text": "[阵营：巴拉巴拉巴拉]", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#d6d7dd" } }, { "type": "Image", "props": { "y": -1, "skin": "ui_hero/img-zhuangshi-tongyong-liebina.png", "right": 0, "alpha": 0.5 } }, { "type": "Image", "props": { "y": 0, "x": 9, "width": 93, "skin": "ui_hero/img-lanpinzhikuang.png", "height": 93 } }, { "type": "Image", "props": { "y": 0, "x": 9, "width": 93, "var": "HeadIcon", "skin": "ui_head/icon_ui_01.png", "height": 93 } }, { "type": "Image", "props": { "y": 8, "x": 112, "var": "vip", "skin": "ui_camp/icn-vip-jiemian-tongyong.png" } }, { "type": "Label", "props": { "y": 6, "x": 167, "width": 145, "var": "HeroName", "text": "英雄名字英雄名字", "height": 22, "fontSize": 22, "font": "SimHei", "color": "#fefeff", "align": "left" } }, { "type": "Label", "props": { "y": 37, "x": 113, "width": 31.171875, "text": "LV:", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#9be589", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 37, "x": 144, "width": 80, "var": "HeroLevel", "text": "999", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 8, "x": 536, "text": "点击伤害：", "fontSize": 18, "font": "SimHei", "color": "#9be589", "align": "left" } }, { "type": "Label", "props": { "y": 6, "x": 625, "width": 105, "var": "damage", "text": "235461469", "height": 22, "fontSize": 22, "font": "SimHei", "color": "#ffff79", "align": "left" } }] }, { "type": "Box", "props": { "y": 107, "x": 188, "width": 537, "height": 16 }, "child": [{ "type": "Image", "props": { "y": 1, "x": 0, "width": 537, "var": "progressbg", "skin": "ui_main/img-guai-xuetiao-bg.png", "sizeGrid": "0,5,0,6", "scaleY": 0.2, "height": 75 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 537, "var": "progressbar", "skin": "ui_common/img-jindutiao-tongyong.png", "sizeGrid": "0,5,0,5", "height": 75 } }] }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 537, "var": "progresslabel", "text": "999/100000", "strokeColor": "#4b4b56", "stroke": 3, "height": 13, "fontSize": 16, "font": "SimHei", "color": "#fefeff", "bold": true, "align": "center" } }] }, { "type": "Panel", "props": { "y": 168, "x": 10, "width": 730, "var": "ListPanel", "height": 940 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "var": "skillBox" }, "child": [{ "type": "Image", "props": { "x": 233, "skin": "ui_hero/img-tongyong-taitou-1.png" } }, { "type": "Label", "props": { "y": 3, "x": 320, "text": "主动技能", "fontSize": 22, "font": "SimHei", "color": "#dde2f2", "align": "left" } }, { "type": "List", "props": { "y": 29, "width": 730, "var": "list", "spaceY": 10, "renderType": "render", "height": 380 }, "child": [{ "type": "Box", "props": { "width": 730, "renderType": "render", "height": 87 }, "child": [{ "type": "Image", "props": { "width": 730, "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "14,12,16,15", "height": 90 } }, { "type": "Image", "props": { "y": 0, "skin": "ui_hero/img-zhuangshi-tongyong-liebina.png", "skewY": 180, "right": -90, "alpha": 0.5 } }, { "type": "Image", "props": { "y": 5, "x": 9, "width": 76, "name": "skillicon", "height": 76 } }, { "type": "Label", "props": { "y": 6, "x": 161, "text": "英雄名字", "name": "skillname", "fontSize": 22, "font": "SimHei", "color": "#fffbf1", "align": "left" } }, { "type": "Label", "props": { "y": 7, "x": 97, "text": "LV:", "name": "level", "fontSize": 20, "font": "SimHei", "color": "#9be589", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 8, "x": 129, "width": 69, "text": "4", "name": "skilllvlabel", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 36, "x": 96, "width": 436, "name": "desc", "innerHTML": "fdsfdsfd", "height": 16 } }, { "type": "Label", "props": { "y": 0, "x": 1, "width": 731, "visible": false, "name": "background", "height": 85, "bgColor": "#000000", "alpha": 0.45 } }, { "type": "Label", "props": { "y": 32, "x": 570, "width": 159, "valign": "middle", "text": "已达最高级", "strokeColor": "#d38343", "stroke": 3, "name": "maxLv", "height": 22, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 549, "name": "skillBgBtn", "height": 87 } }, { "type": "Button", "props": { "y": 42, "x": 632, "width": 165, "stateNum": 1, "skin": "ui_hero/btn-huang.png", "name": "unlock", "mouseThrough": false, "height": 75, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 34, "x": 3, "wordWrap": true, "width": 159, "valign": "middle", "text": "解锁技能", "strokeColor": "#d38343", "stroke": 3, "name": "btnlabel", "height": 22, "fontSize": 26, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": -2, "x": 146, "width": 26, "skin": "ui_hero/img-biaoqian-zhekou-bg.png", "name": "newskill", "height": 30 }, "child": [{ "type": "Label", "props": { "y": 1, "x": 6, "width": 23, "text": "新", "strokeColor": "#d10805", "stroke": 3, "rotation": 10, "height": 16, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }, { "type": "HTMLDivElement", "props": { "y": 5, "x": 1, "width": 164, "name": "money", "height": 19 } }] }] }] }] }, { "type": "Box", "props": { "y": 406, "x": 0, "visible": false, "var": "privilegeBox" }, "child": [{ "type": "Image", "props": { "x": 233, "skin": "ui_hero/img-tongyong-taitou-1.png" } }, { "type": "Label", "props": { "y": 3, "x": 320, "width": 83, "text": "特权", "height": 22, "fontSize": 22, "font": "SimHei", "color": "#dde2f2", "align": "center" } }, { "type": "List", "props": { "y": 29, "width": 730, "var": "privList", "spaceY": 10, "renderType": "render" }, "child": [{ "type": "Box", "props": { "width": 730, "renderType": "render", "height": 85 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 730, "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "14,12,16,15", "height": 87 } }, { "type": "Image", "props": { "skin": "ui_hero/img-zhuangshi-tongyong-liebina.png", "skewY": 180, "right": -90, "alpha": 0.5 } }, { "type": "Image", "props": { "y": 5, "x": 8, "width": 76, "name": "privIcon", "height": 76 } }, { "type": "Label", "props": { "y": 6, "x": 97, "text": "英雄名字", "name": "privName", "fontSize": 22, "font": "SimHei", "color": "#fbffd6", "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 36, "x": 96, "width": 436, "name": "desc", "innerHTML": "fdsfdsfd", "height": 16 } }, { "type": "Label", "props": { "y": 0, "x": 1, "width": 731, "visible": false, "name": "background", "height": 85, "bgColor": "#000000", "alpha": 0.45 } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 549, "name": "skillBgBtn", "height": 87 } }, { "type": "Button", "props": { "y": 42, "x": 631, "width": 165, "visible": true, "stateNum": 1, "skin": "ui_hero/btn-huang.png", "name": "useBtn", "labelStrokeColor": "#d38343", "labelStroke": 3, "labelSize": 26, "labelPadding": "10", "labelFont": "SimSun", "labelColors": "#ffffff", "labelBold": true, "label": "使用", "height": 75, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 4, "x": 0, "width": 164, "name": "useNumHtml", "height": 19 } }, { "type": "Label", "props": { "y": 57, "x": 4, "width": 161, "visible": false, "text": "00:00:00", "strokeColor": "#d38343", "stroke": 2, "name": "time", "height": 16, "fontSize": 18, "font": "SimHei", "color": "#ffffff", "align": "center" } }, { "type": "Image", "props": { "y": -2, "x": 145, "width": 26, "skin": "ui_hero/img-biaoqian-zhekou-bg.png", "name": "discountBg", "height": 30 }, "child": [{ "type": "Label", "props": { "y": 1, "x": 0, "width": 29, "text": "3折", "strokeColor": "#e33735", "stroke": 3, "rotation": 10, "name": "discount", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ffffff", "align": "center" } }] }] }, { "type": "Label", "props": { "y": 10, "x": 237, "visible": false, "text": "主动", "strokeColor": "#d38343", "stroke": 2, "name": "bewrite", "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }, { "type": "Label", "props": { "y": 10, "x": 636, "width": 69, "visible": false, "name": "useNum", "height": 18, "fontSize": 18, "font": "SimHei", "color": "#fafa85" } }] }] }] }] }] };
                return ListRoleViewUI;
            }(View));
            list.ListRoleViewUI = ListRoleViewUI;
        })(list = main.list || (main.list = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var list;
        (function (list) {
            var ListShopViewUI = /** @class */ (function (_super) {
                __extends(ListShopViewUI, _super);
                function ListShopViewUI() {
                    return _super.call(this) || this;
                }
                ListShopViewUI.prototype.createChildren = function () {
                    View.regComponent("Text", laya.display.Text);
                    View.regComponent("ui.shop.TreasureBoxShopViewUI", ui.shop.TreasureBoxShopViewUI);
                    View.regComponent("ui.shop.LotteryShopViewUI", ui.shop.LotteryShopViewUI);
                    View.regComponent("ui.shop.GemShopViewUI", ui.shop.GemShopViewUI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.list.ListShopViewUI.uiView);
                };
                ListShopViewUI.uiView = { "type": "View", "props": { "width": 750, "top": 0, "height": 1108 }, "child": [{ "type": "Image", "props": { "var": "backGround", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "var": "money", "right": 0, "left": 0, "height": 56 }, "child": [{ "type": "Image", "props": { "y": 13, "x": 348, "width": 40, "skin": "ui_icon/icon_prop_012.png", "height": 40 } }, { "type": "Text", "props": { "y": 20, "x": 80, "width": 111, "var": "gemTxtNum", "text": "X10000", "name": "gemTxtNum", "height": 31, "fontSize": 25, "font": "Microsoft YaHei", "color": "#eaff00", "bold": true } }, { "type": "Text", "props": { "y": 19, "x": 394, "width": 111, "var": "TxtNum", "text": "X10000", "name": "TxtNum", "height": 31, "fontSize": 25, "font": "Microsoft YaHei", "color": "#eaff00", "bold": true } }, { "type": "Image", "props": { "y": 15, "x": 34, "width": 43, "skin": "ui_icon/icon_prop_013.png", "height": 35 } }] }, { "type": "Panel", "props": { "var": "shopPanel", "top": 56, "right": 0, "name": "shopPanel", "left": 0, "height": 1140 }, "child": [{ "type": "VBox", "props": {}, "child": [{ "type": "TreasureBoxShopView", "props": { "var": "boxShop", "runtime": "ui.shop.TreasureBoxShopViewUI" } }, { "type": "LotteryShopView", "props": { "var": "lotteryShop", "runtime": "ui.shop.LotteryShopViewUI" } }, { "type": "GemShopView", "props": { "var": "gemShop", "runtime": "ui.shop.GemShopViewUI" } }] }] }] }] };
                return ListShopViewUI;
            }(View));
            list.ListShopViewUI = ListShopViewUI;
        })(list = main.list || (main.list = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var MainViewUI = /** @class */ (function (_super) {
            __extends(MainViewUI, _super);
            function MainViewUI() {
                return _super.call(this) || this;
            }
            MainViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.main.MainViewUI.uiView);
            };
            MainViewUI.uiView = { "type": "View", "props": { "width": 750, "top": 0, "right": 0, "left": 0, "height": 1200, "bottom": 0 } };
            return MainViewUI;
        }(View));
        main.MainViewUI = MainViewUI;
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var subinterface;
        (function (subinterface) {
            var MainBossViewUI = /** @class */ (function (_super) {
                __extends(MainBossViewUI, _super);
                function MainBossViewUI() {
                    return _super.call(this) || this;
                }
                MainBossViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.subinterface.MainBossViewUI.uiView);
                };
                MainBossViewUI.uiView = { "type": "View", "props": { "width": 750, "mouseThrough": true, "height": 108 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "var": "tips_boss", "mouseThrough": true, "height": 108, "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 0, "var": "challenge_boss", "skin": "ui_main/img-bosslaixi-bg.png", "sizeGrid": "5,5,5,5", "right": 0, "left": 0, "height": 108, "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 4, "skin": "ui_main/img-bosslaixi-meishuzi.png", "centerX": 0 } }] }, { "type": "Image", "props": { "y": 0, "var": "fail_boss", "skin": "ui_main/img-tiaozhanshibai-bg.png", "sizeGrid": "5,5,5,5", "right": 0, "left": 0, "height": 108, "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 5, "skin": "ui_main/img-boss-shibai.png", "centerX": 0 } }] }] }] };
                return MainBossViewUI;
            }(View));
            subinterface.MainBossViewUI = MainBossViewUI;
        })(subinterface = main.subinterface || (main.subinterface = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var subinterface;
        (function (subinterface) {
            var MainBubbleViewUI = /** @class */ (function (_super) {
                __extends(MainBubbleViewUI, _super);
                function MainBubbleViewUI() {
                    return _super.call(this) || this;
                }
                MainBubbleViewUI.prototype.createChildren = function () {
                    View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.subinterface.MainBubbleViewUI.uiView);
                };
                MainBubbleViewUI.uiView = { "type": "View", "props": { "width": 750, "mouseThrough": true, "height": 1200 }, "child": [{ "type": "Image", "props": { "var": "bubble", "right": 0, "mouseThrough": true, "left": 0, "height": 1200, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 660, "x": 236, "width": 180, "visible": false, "var": "bubble_hreo", "skin": "ui_main/img-yingxiong-qiaopao.png", "sizeGrid": "13,15,37,77", "pivotX": 26, "height": 62, "anchorY": 1 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 10, "x": 8, "width": 88, "name": "text", "innerHTML": "htmlText", "height": 15 } }] }, { "type": "Image", "props": { "y": 438, "x": 529, "width": 180, "visible": false, "var": "bubble_monster", "skin": "ui_main/img-guaiwu-qiaopao.png", "sizeGrid": "12,75,35,9", "pivotX": 154, "height": 64, "anchorY": 1 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 8, "x": 6, "width": 89, "name": "text", "innerHTML": "htmlText", "height": 16 } }] }, { "type": "Image", "props": { "y": 472, "x": 76, "width": 180, "visible": false, "var": "bubble_pet", "skin": "ui_main/img-chongwu-qipao.png", "sizeGrid": "11,14,36,76", "pivotX": 25, "height": 64, "anchorY": 1 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 6, "x": 6, "width": 91, "name": "text", "innerHTML": "htmlText", "height": 15 } }] }, { "type": "Image", "props": { "y": 791, "x": 304, "width": 180, "visible": false, "var": "bubble_skill", "skin": "ui_main/img-chongwu-qipao.png", "sizeGrid": "11,14,36,76", "pivotX": 25, "height": 64, "anchorY": 1 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 6, "x": 6, "width": 91, "name": "text", "innerHTML": "htmlText", "height": 15 } }] }] }, { "type": "Image", "props": { "y": 572, "x": 99, "width": 100, "var": "clickPet", "height": 100, "anchorY": 1, "anchorX": 0.5 } }] };
                return MainBubbleViewUI;
            }(View));
            subinterface.MainBubbleViewUI = MainBubbleViewUI;
        })(subinterface = main.subinterface || (main.subinterface = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var subinterface;
        (function (subinterface) {
            var MainClickViewUI = /** @class */ (function (_super) {
                __extends(MainClickViewUI, _super);
                function MainClickViewUI() {
                    return _super.call(this) || this;
                }
                MainClickViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.subinterface.MainClickViewUI.uiView);
                };
                MainClickViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "clickBg", "right": 0, "left": 0, "height": 1200, "bottom": 0 } }, { "type": "Image", "props": { "y": 280, "x": 418, "width": 238, "var": "control_box", "sizeGrid": "8,30,8,30", "height": 56 }, "child": [{ "type": "Label", "props": { "y": 15, "x": 77, "width": 165, "var": "gold_num", "text": "66.1234aa", "strokeColor": "#3b2213", "stroke": 6, "height": 33, "fontSize": 33, "font": "SimHei", "color": "#fef8e9", "bold": true } }, { "type": "Image", "props": { "y": 27, "x": 30, "width": 58, "var": "gold_icon", "skin": "ui_common/icon_prop_012.png", "height": 58, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Box", "props": { "y": 0, "x": 0, "var": "effect_bg" } }] }, { "type": "Image", "props": { "y": 280, "x": 132, "width": 238, "var": "control_diond", "sizeGrid": "8,30,8,30", "height": 56 }, "child": [{ "type": "Label", "props": { "y": 15, "x": 77, "width": 165, "var": "diond_num", "text": "66.1234aa", "strokeColor": "#3b2213", "stroke": 6, "height": 33, "fontSize": 33, "font": "SimHei", "color": "#fef8e9", "bold": true } }, { "type": "Image", "props": { "y": 27, "x": 30, "width": 55, "var": "diond_icon", "skin": "ui_icon/icon_prop_013.png", "height": 44, "anchorY": 0.5, "anchorX": 0.5 } }] }] };
                return MainClickViewUI;
            }(View));
            subinterface.MainClickViewUI = MainClickViewUI;
        })(subinterface = main.subinterface || (main.subinterface = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var subinterface;
        (function (subinterface) {
            var MainControlViewUI = /** @class */ (function (_super) {
                __extends(MainControlViewUI, _super);
                function MainControlViewUI() {
                    return _super.call(this) || this;
                }
                MainControlViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.subinterface.MainControlViewUI.uiView);
                };
                MainControlViewUI.uiView = { "type": "View", "props": { "width": 750, "mouseThrough": true, "height": 1200 }, "child": [{ "type": "Image", "props": { "width": 750, "top": 0, "mouseThrough": true, "centerX": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "x": 53, "var": "chatbtn", "skin": "ui_main/btn-liaotian.png", "bottom": 380, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 1, "x": 36, "visible": false, "var": "chatbtnpoint", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Button", "props": { "y": 61, "x": 53, "var": "btn_rank", "stateNum": 1, "skin": "ui_main/btn-paihang-shijieboss.png", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 38, "x": 9, "text": "排行", "strokeColor": "#7c6d92", "stroke": 3, "fontSize": 19, "font": "SimHei", "color": "#f4f4f4" } }] }, { "type": "Button", "props": { "y": 61, "x": 119, "var": "btn_camp", "stateNum": 1, "skin": "ui_main/btn-zhenyin.png", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 38, "x": 9, "text": "阵营", "strokeColor": "#7c6d92", "stroke": 3, "fontSize": 19, "font": "SimHei", "color": "#f4f4f4" } }, { "type": "Image", "props": { "y": -5, "x": 33, "var": "Camp_red", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Button", "props": { "y": 145, "x": 600, "width": 55, "var": "btn_share", "stateNum": 1, "skin": "ui_main/btn-zhujiemian-fenxiang.png", "height": 64, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 220, "x": 50, "var": "btn_1" }, "child": [{ "type": "Button", "props": { "y": 0, "x": 0, "visible": false, "var": "return_money", "stateNum": 1, "skin": "ui_main/btn-zhujiemian-danbichongzhi.png", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -5, "x": 33, "var": "money_red", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Box", "props": { "y": 0, "x": -1, "var": "m_showred" } }] }, { "type": "Image", "props": { "y": 145, "x": 119, "var": "btn_2" }, "child": [{ "type": "Button", "props": { "visible": false, "var": "btn_active1", "stateNum": 1, "skin": "ui_main/btn-zhujiemian-huodong.png", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -5, "x": 33, "var": "action_print", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Box", "props": { "y": 0, "x": -1, "var": "action_eff" } }] }, { "type": "Image", "props": { "y": 220, "x": 50, "var": "btn_3" }, "child": [{ "type": "Button", "props": { "y": 0, "x": -1, "visible": false, "var": "btn_frist", "stateNum": 1, "skin": "ui_main/btn-zhujiemian-shouchong.png", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 38, "x": 9, "visible": false, "text": "设置", "strokeColor": "#7c6d92", "stroke": 3, "fontSize": 19, "font": "SimHei", "color": "#f4f4f4" } }] }, { "type": "Box", "props": { "y": 0, "x": -1, "var": "f_showred" } }] }, { "type": "Image", "props": { "y": 145, "x": 50, "var": "btn_4" }, "child": [{ "type": "Button", "props": { "width": 55, "var": "btn_vIp", "stateNum": 1, "skin": "ui_main/btn-zhujiemian-vip.png", "height": 63, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 38, "x": 9, "visible": false, "text": "签到", "strokeColor": "#7c6d92", "stroke": 3, "fontSize": 19, "font": "SimHei", "color": "#f4f4f4" } }, { "type": "Image", "props": { "y": -6, "x": 33, "var": "btnHong_3", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Box", "props": { "y": 0, "x": -1, "var": "e_vip" } }] }, { "type": "Image", "props": { "y": 783, "x": 160, "width": 1e-7, "visible": false, "var": "showPet", "height": 1e-7, "bottom": 417 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "var": "showPetBg" } }, { "type": "Button", "props": { "y": 0, "x": 0, "width": 70, "stateNum": 1, "skin": "ui_icon/pet_egg.png", "height": 70, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 49, "x": 15, "text": "神兽", "strokeColor": "#7c6d92", "stroke": 3, "fontSize": 19, "font": "SimHei", "color": "#f4f4f4" } }] }] }, { "type": "Button", "props": { "y": 145, "x": 700, "width": 55, "var": "btn_deploy", "stateNum": 1, "skin": "ui_main/btn-zhujiemian-zhankai.png", "height": 64, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 28, "var": "deploy_red", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Box", "props": { "y": 0, "x": 0, "var": "toprightbox", "mouseThrough": true }, "child": [{ "type": "Button", "props": { "y": 220, "x": 698, "var": "btn_week", "stateNum": 1, "skin": "ui_main/btn-zhujiemian-qiridenglu.png", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -3, "x": 39, "var": "btnweekred", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Button", "props": { "y": 293, "x": 698, "var": "btn_fund", "stateNum": 1, "skin": "ui_main/btn-zhujiemian-jijin.png", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -3, "x": 39, "var": "fund_red", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Button", "props": { "y": 365, "x": 698, "visible": false, "var": "btn_heropeck", "stateNum": 1, "skin": "ui_main/btn-zhujiemian-yingxiongjinjie.png", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -3, "x": 39, "visible": false, "var": "heropeck_red", "skin": "ui_common/img-tixing.png" } }] }] }] }, { "type": "Label", "props": { "y": 0, "visible": false, "var": "boss", "right": 0, "pivotY": 0, "pivotX": 750, "left": 0, "height": 100 }, "child": [{ "type": "Image", "props": { "y": 0, "sizeGrid": "10,24,6,0", "right": 0, "left": 0, "height": 74 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908" } }, { "type": "Image", "props": { "y": 41, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,31,0,11", "right": 0, "left": 0, "height": 32 }, "child": [{ "type": "Image", "props": { "y": -6, "width": 167, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,8,0,33", "right": 0, "height": 38 }, "child": [{ "type": "Button", "props": { "y": -1, "var": "Btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "centerX": 0 } }] }] }, { "type": "Label", "props": { "y": 46, "x": 57, "width": 115, "valign": "middle", "text": "世界BOSS", "height": 29, "fontSize": 26, "font": "SimHei", "color": "#feb979", "bold": false, "align": "left" } }, { "type": "Label", "props": { "y": 47, "x": 32, "width": 6, "height": 22, "bgColor": "#4a408a" } }] }, { "type": "Button", "props": { "y": 118, "x": 650, "visible": true, "var": "Btn_buff", "stateNum": 1, "skin": "ui_wroldboss/buff.png" }, "child": [{ "type": "Label", "props": { "y": 59, "x": 15, "text": "BUFF", "strokeColor": "#7c6d92", "stroke": 3, "fontSize": 22, "font": "SimHei", "color": "#f4f4f4" } }] }] }] };
                return MainControlViewUI;
            }(View));
            subinterface.MainControlViewUI = MainControlViewUI;
        })(subinterface = main.subinterface || (main.subinterface = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var subinterface;
        (function (subinterface) {
            var MainCustomsViewUI = /** @class */ (function (_super) {
                __extends(MainCustomsViewUI, _super);
                function MainCustomsViewUI() {
                    return _super.call(this) || this;
                }
                MainCustomsViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.subinterface.MainCustomsViewUI.uiView);
                };
                MainCustomsViewUI.uiView = { "type": "View", "props": { "width": 750, "mouseThrough": true, "height": 270 }, "child": [{ "type": "Image", "props": { "width": 750, "var": "bg", "top": 0, "mouseThrough": true, "height": 270, "centerX": 0 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 750, "var": "icon", "height": 127 }, "child": [{ "type": "Image", "props": { "y": 52, "x": 272, "width": 59, "var": "img_link_left", "height": 30, "alpha": 0.8 }, "child": [{ "type": "Image", "props": { "y": 6, "x": 0, "skin": "ui_main/img-zhujiemian-guanka-dian.png", "scaleY": 0.6, "scaleX": 0.6 } }, { "type": "Image", "props": { "y": 3, "x": 13, "skin": "ui_main/img-zhujiemian-guanka-dian.png", "scaleY": 0.8, "scaleX": 0.8 } }, { "type": "Image", "props": { "y": 0, "x": 31, "skin": "ui_main/img-zhujiemian-guanka-dian.png" } }] }, { "type": "Image", "props": { "y": 52, "x": 430, "width": 61, "var": "img_link_right", "height": 31, "alpha": 0.8 }, "child": [{ "type": "Image", "props": { "y": 6, "x": 43, "skin": "ui_main/img-zhujiemian-guanka-dian.png", "scaleY": 0.6, "scaleX": 0.6 } }, { "type": "Image", "props": { "y": 3, "x": 23, "skin": "ui_main/img-zhujiemian-guanka-dian.png", "scaleY": 0.8, "scaleX": 0.8 } }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-zhujiemian-guanka-dian.png" } }] }, { "type": "Image", "props": { "y": 64, "x": 239, "var": "prev_customs_panel", "skin": "ui_main/img-qianhouguanka-tuo.png", "centerX": -136, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-qianhouguanka-tuo.png" } }, { "type": "Image", "props": { "y": 10, "x": 8, "width": 43, "var": "prev_customs", "skin": "ui_main/img-hai-xiaotu.png", "height": 44 } }, { "type": "Label", "props": { "y": 42, "x": 0, "width": 60, "var": "prev_num", "text": "1", "strokeColor": "#4f5271", "stroke": 3, "height": 22, "fontSize": 22, "font": "SimHei", "color": "#fdfbfb", "bold": true, "align": "center" } }] }, { "type": "Image", "props": { "y": 64, "x": 375, "var": "curr_customs_panel", "stroke": -106, "skin": "ui_main/img-danqianguanka-tuo.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-danqianguanka-tuo.png" } }, { "type": "Image", "props": { "y": 21, "x": 18, "var": "curr_customs", "skin": "ui_main/img-tudi-xiaotu.png" } }, { "type": "Label", "props": { "y": 70, "x": 6, "width": 80, "var": "curr_num", "text": "2", "strokeColor": "#4f5271", "stroke": 3, "height": 26, "fontSize": 24, "font": "SimHei", "color": "#fdfbfb", "bold": true, "align": "center" } }] }, { "type": "Image", "props": { "y": 64, "x": 517, "var": "next_customs_panel", "skin": "ui_main/img-qianhouguanka-tuo.png", "centerX": 142, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-qianhouguanka-tuo.png" } }, { "type": "Image", "props": { "y": 10, "x": 8, "width": 43, "var": "next_customs", "skin": "ui_main/img-caopin-xiaotu.png", "height": 44 } }, { "type": "Label", "props": { "y": 43, "x": 0, "width": 60, "var": "next_num", "text": "3", "strokeColor": "#4f5271", "stroke": 3, "fontSize": 22, "font": "SimHei", "color": "#fdfbfb", "bold": true, "align": "center" } }] }, { "type": "Image", "props": { "y": 64, "x": 375, "visible": false, "var": "middle_customs_panel", "stroke": -106, "skin": "ui_main/img-danqianguanka-tuo.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-danqianguanka-tuo.png" } }, { "type": "Image", "props": { "y": 21, "x": 18, "var": "middle_customs", "skin": "ui_main/img-tudi-xiaotu.png" } }, { "type": "Label", "props": { "y": 70, "x": 6, "width": 80, "var": "middle_num", "text": "2", "strokeColor": "#4f5271", "stroke": 3, "height": 26, "fontSize": 24, "font": "SimHei", "color": "#fdfbfb", "bold": true, "align": "center" } }] }, { "type": "Image", "props": { "y": 64, "x": 517, "visible": false, "var": "behind_customs_panel", "stroke": -106, "skin": "ui_main/img-danqianguanka-tuo.png", "centerX": 142, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-danqianguanka-tuo.png" } }, { "type": "Image", "props": { "y": 21, "x": 18, "var": "behind_customs", "skin": "ui_main/img-tudi-xiaotu.png" } }, { "type": "Label", "props": { "y": 70, "x": 6, "width": 80, "var": "behind_num", "text": "2", "strokeColor": "#4f5271", "stroke": 3, "height": 26, "fontSize": 24, "font": "SimHei", "color": "#fdfbfb", "bold": true, "align": "center" } }] }, { "type": "Box", "props": { "y": 26, "x": 340, "width": 70, "var": "effect_customs", "mouseThrough": true, "height": 75, "anchorY": 0, "anchorX": 0 } }] }, { "type": "Box", "props": { "y": 125, "width": 268, "visible": false, "var": "custom_wave_loop", "height": 60, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 20, "x": 30, "width": 210, "var": "progress_bg", "skin": "ui_main/img-jindutiao-guanka.png", "height": 6 } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 44, "var": "sign_0", "height": 60 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 6, "skin": "ui_main/img-weikaiqi.png", "name": "weikaiqi" } }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-gongjizhong.png", "name": "gongjizhong" } }, { "type": "Image", "props": { "y": 7, "skin": "ui_main/img-yidawan.png", "name": "yidawan", "centerX": 0 } }, { "type": "Image", "props": { "y": 5, "skin": "ui_main/img-boss-guanka.png", "name": "boss_weida", "centerX": 0 } }, { "type": "Image", "props": { "skin": "ui_main/img-gongjizhong.png", "name": "boss_kaida" }, "child": [{ "type": "Image", "props": { "y": 24, "x": 22, "skin": "ui_main/img-boss-guanka.png", "scaleY": 1.2, "scaleX": 1.2, "anchorY": 0.5, "anchorX": 0.5 } }] }] }, { "type": "Label", "props": { "y": 0, "x": 56, "width": 44, "var": "sign_1", "height": 60 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 6, "skin": "ui_main/img-weikaiqi.png", "name": "weikaiqi" } }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-gongjizhong.png", "name": "gongjizhong" } }, { "type": "Image", "props": { "y": 7, "skin": "ui_main/img-yidawan.png", "name": "yidawan", "centerX": 0 } }, { "type": "Image", "props": { "y": 5, "skin": "ui_main/img-boss-guanka.png", "name": "boss_weida", "centerX": 0 } }, { "type": "Image", "props": { "skin": "ui_main/img-gongjizhong.png", "name": "boss_kaida" }, "child": [{ "type": "Image", "props": { "y": 24, "x": 22, "skin": "ui_main/img-boss-guanka.png", "scaleY": 1.2, "scaleX": 1.2, "anchorY": 0.5, "anchorX": 0.5 } }] }] }, { "type": "Label", "props": { "y": 0, "x": 112, "width": 44, "var": "sign_2", "height": 60 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 6, "skin": "ui_main/img-weikaiqi.png", "name": "weikaiqi" } }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-gongjizhong.png", "name": "gongjizhong" } }, { "type": "Image", "props": { "y": 7, "skin": "ui_main/img-yidawan.png", "name": "yidawan", "centerX": 0 } }, { "type": "Image", "props": { "y": 5, "skin": "ui_main/img-boss-guanka.png", "name": "boss_weida", "centerX": 0 } }, { "type": "Image", "props": { "skin": "ui_main/img-gongjizhong.png", "name": "boss_kaida" }, "child": [{ "type": "Image", "props": { "y": 24, "x": 22, "skin": "ui_main/img-boss-guanka.png", "scaleY": 1.2, "scaleX": 1.2, "anchorY": 0.5, "anchorX": 0.5 } }] }] }, { "type": "Label", "props": { "y": 0, "x": 168, "width": 44, "var": "sign_3", "height": 60 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 6, "skin": "ui_main/img-weikaiqi.png", "name": "weikaiqi" } }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-gongjizhong.png", "name": "gongjizhong" } }, { "type": "Image", "props": { "y": 7, "skin": "ui_main/img-yidawan.png", "name": "yidawan", "centerX": 0 } }, { "type": "Image", "props": { "y": 5, "skin": "ui_main/img-boss-guanka.png", "name": "boss_weida", "centerX": 0 } }, { "type": "Image", "props": { "skin": "ui_main/img-gongjizhong.png", "name": "boss_kaida" }, "child": [{ "type": "Image", "props": { "y": 24, "x": 22, "skin": "ui_main/img-boss-guanka.png", "scaleY": 1.2, "scaleX": 1.2, "anchorY": 0.5, "anchorX": 0.5 } }] }] }, { "type": "Label", "props": { "y": 0, "x": 224, "width": 44, "var": "sign_4", "height": 60 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 6, "skin": "ui_main/img-weikaiqi.png", "name": "weikaiqi" } }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-gongjizhong.png", "name": "gongjizhong" } }, { "type": "Image", "props": { "y": 7, "skin": "ui_main/img-yidawan.png", "name": "yidawan", "centerX": 0 } }, { "type": "Image", "props": { "y": 5, "skin": "ui_main/img-boss-guanka.png", "name": "boss_weida", "centerX": 0 } }, { "type": "Image", "props": { "skin": "ui_main/img-gongjizhong.png", "name": "boss_kaida" }, "child": [{ "type": "Image", "props": { "y": 24, "x": 22, "skin": "ui_main/img-boss-guanka.png", "scaleY": 1.2, "scaleX": 1.2, "anchorY": 0.5, "anchorX": 0.5 } }] }] }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 44, "var": "effect_fight", "mouseThrough": true, "height": 60, "anchorY": 0, "anchorX": 0 } }] }, { "type": "Box", "props": { "y": 198, "width": 430, "var": "blood", "height": 71, "centerX": 41 }, "child": [{ "type": "Image", "props": { "y": -3, "x": 0, "width": 427, "skin": "ui_main/img-xietuo-boss.png", "sizeGrid": "1,15,2,3", "name": "bg", "height": 30 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 423, "name": "follow", "height": 24 }, "child": [{ "type": "Image", "props": { "y": 1, "x": 2, "width": 423, "var": "blood_follow", "height": 24, "alpha": 0.8 }, "child": [{ "type": "Poly", "props": { "points": "0,0,423,0,423,16,415,24,0,24", "lineColor": "#fcff00", "fillColor": "#fcff00" } }] }, { "type": "Sprite", "props": { "y": 1, "x": 2, "width": 423, "renderType": "mask", "name": "mask", "height": 24, "cacheAs": "bitmap" }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 423, "lineWidth": 1, "height": 24, "fillColor": "#8e0e09" } }] }] }, { "type": "Image", "props": { "y": 1, "x": 2, "width": 423, "var": "blood_list", "skin": "ui_main/img-guai-xuetiao.png", "sizeGrid": "0,5,0,5", "height": 24 } }, { "type": "Label", "props": { "y": 0, "x": 234, "width": 180, "var": "blood_num", "height": 24, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "right" } }, { "type": "Label", "props": { "y": 0, "x": 27, "width": 178, "var": "monster_name", "height": 24, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "bold": true } }, { "type": "Image", "props": { "y": -5, "x": -82, "width": 512, "var": "bg_bossicon", "height": 76 }, "child": [{ "type": "Image", "props": { "y": 31, "x": 82, "width": 418, "var": "boss_time", "skin": "ui_main/img-shijiantuo-boss.png", "sizeGrid": "1,15,2,3", "height": 8 } }, { "type": "Label", "props": { "y": 33, "x": 84, "width": 408, "visible": true, "var": "blood_time", "height": 4, "bgColor": "#fbf9f9" } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 110, "skin": "ui_main/btn-zhu-boss-bg.png", "sizeGrid": "0,45,0,5", "height": 62 } }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 64, "var": "effect_head", "mouseThrough": true, "height": 60, "anchorY": 0, "anchorX": 0 } }, { "type": "Label", "props": { "y": 46, "x": 140, "width": 158, "text": "打怪倒计时：", "strokeColor": "#3b281d", "stroke": 5, "height": 31, "fontSize": 28, "font": "SimHei", "color": "#fef8e9", "bold": false } }, { "type": "Label", "props": { "y": 45, "x": 302, "width": 90, "var": "time_boss", "text": "12.20S", "strokeColor": "#1d082d", "stroke": 4, "height": 28, "fontSize": 30, "font": "SimHei", "color": "#fd2323", "bold": true } }] }] }, { "type": "Button", "props": { "y": 69, "x": 672, "var": "custom_wave_boss", "stateNum": 1, "skin": "ui_main/btn-bosstiaozhan.png", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 7, "x": 59, "wordWrap": true, "width": 52, "var": "tx_num_boss", "height": 41, "fontSize": 20, "font": "SimHei", "color": "#fff5dc", "bold": true, "align": "center" } }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 130, "var": "effect_boss", "mouseThrough": true, "height": 56, "anchorY": 0, "anchorX": 0 } }] }] }, { "type": "Image", "props": { "width": 212, "var": "bg_num", "top": 118, "name": "底图", "left": 30, "height": 120 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 211, "skin": "ui_action/ui-daojishi-bg-huodong.png", "sizeGrid": "0,2,0,2", "height": 45 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 211, "skin": "ui_action/ui-daojishi-jianbian-huodong.png", "sizeGrid": "0,1,0,1", "height": 45 } }, { "type": "Image", "props": { "y": 3, "x": 8, "skin": "ui_action/ui-daojishi-biao-huodong.png" } }, { "type": "Image", "props": { "y": 60, "x": 0, "width": 242, "var": "bg_hurt", "skin": "ui_action/ui-daojishi-bg-huodong.png", "sizeGrid": "0,2,0,2", "height": 37 }, "child": [{ "type": "Label", "props": { "y": 4, "x": 3, "wordWrap": false, "width": 241, "var": "Boss_hurt", "text": "伤害:", "name": "倒计时", "height": 33, "fontSize": 27, "font": "SimHei", "color": "#f4f4f4" } }] }, { "type": "Label", "props": { "y": 10, "x": 57, "wordWrap": true, "width": 156, "var": "Boss_time", "text": "倒计时：30", "name": "倒计时", "height": 33, "fontSize": 27, "font": "SimHei", "color": "#f4f4f4" } }] }] };
                return MainCustomsViewUI;
            }(View));
            subinterface.MainCustomsViewUI = MainCustomsViewUI;
        })(subinterface = main.subinterface || (main.subinterface = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var subinterface;
        (function (subinterface) {
            var MainDpsViewUI = /** @class */ (function (_super) {
                __extends(MainDpsViewUI, _super);
                function MainDpsViewUI() {
                    return _super.call(this) || this;
                }
                MainDpsViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.subinterface.MainDpsViewUI.uiView);
                };
                MainDpsViewUI.uiView = { "type": "View", "props": { "width": 750, "mouseThrough": true, "height": 92 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 750, "var": "bg", "mouseThrough": true, "height": 92, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 312, "skin": "ui_main/img-zong-shuxing.png", "sizeGrid": "0,25,0,120", "height": 40 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 94, "width": 75, "valign": "middle", "text": "总DPS", "strokeColor": "#311f1b", "height": 40, "fontSize": 22, "font": "SimHei", "color": "#a7f469" } }, { "type": "Label", "props": { "y": 0, "x": 187, "width": 89, "var": "dsp_totles", "valign": "middle", "text": "0", "height": 40, "fontSize": 20, "font": "SimHei", "color": "#c5c5c5", "align": "center" } }] }, { "type": "Image", "props": { "y": 0, "x": 466, "width": 284, "skin": "ui_main/img-yingxiong-shuxing.png", "sizeGrid": "0,10,0,130", "height": 40 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 115, "width": 75, "valign": "middle", "text": "英雄DPS", "height": 40, "fontSize": 20, "font": "SimHei", "color": "#dcdc65" } }, { "type": "Label", "props": { "y": 0, "x": 209, "width": 89, "var": "dsp_hero", "valign": "middle", "text": "0", "height": 40, "fontSize": 22, "font": "SimHei", "color": "#c5c5c5", "align": "center" } }] }, { "type": "Image", "props": { "y": 48, "x": 0, "width": 286, "skin": "ui_main/img-shenshou-shuxing.png", "sizeGrid": "0,25,0,120", "height": 40 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 75, "valign": "middle", "text": "神兽DPS", "height": 40, "fontSize": 20, "font": "SimHei", "color": "#dcdc65" } }, { "type": "Label", "props": { "y": 0, "x": 168, "width": 89, "var": "dsp_pet", "valign": "middle", "text": "0", "height": 40, "fontSize": 20, "font": "SimHei", "color": "#c5c5c5", "align": "center" } }] }, { "type": "Image", "props": { "y": 48, "x": 440, "width": 310, "skin": "ui_main/img-zhenying-shuxing.png", "sizeGrid": "0,10,0,138", "height": 40 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 106, "width": 75, "valign": "middle", "text": "阵营DPS", "height": 40, "fontSize": 20, "font": "SimHei", "color": "#dcdc65" } }, { "type": "Label", "props": { "y": 0, "x": 199, "width": 89, "var": "dsp_camp", "valign": "middle", "text": "0", "height": 40, "fontSize": 20, "font": "SimHei", "color": "#c5c5c5", "align": "center" } }] }] }] };
                return MainDpsViewUI;
            }(View));
            subinterface.MainDpsViewUI = MainDpsViewUI;
        })(subinterface = main.subinterface || (main.subinterface = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var subinterface;
        (function (subinterface) {
            var MainListViewUI = /** @class */ (function (_super) {
                __extends(MainListViewUI, _super);
                function MainListViewUI() {
                    return _super.call(this) || this;
                }
                MainListViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.subinterface.MainListViewUI.uiView);
                };
                MainListViewUI.uiView = { "type": "View", "props": { "width": 750, "mouseThrough": true, "height": 1200 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 375, "width": 750, "var": "top_bg", "top": 0, "mouseThrough": true, "centerX": 0, "bottom": 0, "anchorX": 0.5 }, "child": [{ "type": "Box", "props": { "y": 0, "width": 750, "var": "ui_box", "centerX": 0, "alpha": 1 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 750, "var": "bombg", "height": 2000, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "y": 50, "x": 0, "width": 750, "height": 2000, "bgColor": "#313737", "alpha": 1 } }, { "type": "Image", "props": { "y": 0, "x": 424, "width": 326, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,8,0,33", "height": 50 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -424, "width": 462, "skin": "ui_common/img-tongyong-taitou.png", "sizeGrid": "0,31,0,11", "height": 50 } }] }, { "type": "Image", "props": { "y": 4, "x": 606, "width": 138, "var": "btn_ui_close", "mouseEnabled": true, "height": 50 }, "child": [{ "type": "Image", "props": { "skin": "ui_main/ui_mainbtn-guanbi.png", "centerY": 0, "centerX": 0 } }] }, { "type": "Image", "props": { "y": 6, "x": 450, "width": 138, "var": "btn_ui_max", "mouseEnabled": true, "height": 50 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 44, "width": 61, "height": 50 }, "child": [{ "type": "Image", "props": { "width": 61, "var": "btn_ui_up", "skin": "ui_main/ui_mainbtn-xialai.png", "scaleY": -1, "height": 41, "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "width": 61, "var": "btn_ui_down", "skin": "ui_main/ui_mainbtn-xialai.png", "height": 41, "centerY": 0, "centerX": 0 } }] }] }, { "type": "Label", "props": { "y": 20, "x": 597, "width": 2, "height": 24, "bgColor": "#343a3d" } }, { "type": "Panel", "props": { "y": 50, "width": 750, "var": "ui_panel", "height": 1940 } }] }] }, { "type": "Image", "props": { "width": 750, "var": "bg", "mouseThrough": true, "height": 52, "centerX": 0, "bottom": -1 }, "child": [{ "type": "Box", "props": { "y": 56, "x": 0, "var": "btn_role", "top": 0, "anchorY": 1 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 125, "height": 52, "bgColor": "#c74436" } }, { "type": "Image", "props": { "y": -2, "width": 125, "visible": false, "var": "getIn1", "skin": "ui_main/btn-zhu-juese.png", "sizeGrid": "5,0,0,0", "name": "getIn", "height": 54 } }, { "type": "Label", "props": { "y": 15, "x": 61, "text": "角色", "fontSize": 26, "font": "SimHei", "color": "#141930", "bold": true } }, { "type": "Label", "props": { "y": 13, "x": 60, "text": "角色", "fontSize": 26, "font": "SimHei", "color": "#fcfcfb", "bold": true } }, { "type": "Image", "props": { "y": 8, "x": 20, "skin": "ui_main/img-zhu-juese.png" } }, { "type": "Image", "props": { "var": "role_point", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Box", "props": { "y": 389, "x": 250, "var": "btn_pet", "top": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "width": 125, "height": 52, "bgColor": "#dbba20" } }, { "type": "Image", "props": { "y": -2, "width": 125, "visible": false, "var": "getIn3", "skin": "ui_main/btn-zhu-shenshou.png", "sizeGrid": "5,0,0,0", "name": "getIn", "height": 54 } }, { "type": "Label", "props": { "y": 15, "x": 60, "text": "神兽", "fontSize": 26, "font": "SimHei", "color": "#141930", "bold": true } }, { "type": "Label", "props": { "y": 13, "x": 59, "text": "神兽", "fontSize": 26, "font": "SimHei", "color": "#fcfcfb", "bold": true } }, { "type": "Image", "props": { "y": 8, "x": 20, "skin": "ui_main/img-zhu-shenshou.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "pet_point", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Box", "props": { "y": 0, "x": 125, "var": "btn_hero", "top": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "width": 125, "height": 52, "bgColor": "#21b6d5" } }, { "type": "Image", "props": { "y": -2, "width": 125, "visible": false, "var": "getIn2", "skin": "ui_main/btn-zhu-shangcheng.png", "sizeGrid": "5,0,0,0", "name": "getIn", "height": 54 } }, { "type": "Label", "props": { "y": 15, "x": 59, "text": "英雄", "fontSize": 26, "font": "SimHei", "color": "#141930", "bold": true } }, { "type": "Label", "props": { "y": 13, "x": 58, "text": "英雄", "fontSize": 26, "font": "SimHei", "color": "#fcfcfb", "bold": true } }, { "type": "Image", "props": { "y": 8, "x": 20, "skin": "ui_main/img-zhu-yingxiong.png" } }, { "type": "Image", "props": { "visible": false, "var": "hero_point", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Box", "props": { "y": 389, "x": 375, "visible": true, "var": "btn_equip", "top": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "width": 125, "height": 52, "bgColor": "#75c727" } }, { "type": "Image", "props": { "y": -2, "width": 125, "visible": false, "var": "getIn4", "skin": "ui_main/btn-zhu-zhuangbei.png", "sizeGrid": "5,0,0,0", "name": "getIn", "height": 54 } }, { "type": "Label", "props": { "y": 15, "x": 59, "text": "法器", "fontSize": 26, "font": "SimHei", "color": "#141930", "bold": true } }, { "type": "Label", "props": { "y": 13, "x": 58, "text": "法器", "fontSize": 26, "font": "SimHei", "color": "#fcfcfb", "bold": true } }, { "type": "Image", "props": { "y": 8, "x": 15, "skin": "ui_main/img-zhu-zhuangbei.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "equip_point", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Box", "props": { "y": 389, "x": 500, "var": "btn_active", "top": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "width": 125, "height": 52, "bgColor": "#8339c9" } }, { "type": "Image", "props": { "y": -2, "width": 125, "visible": false, "var": "getIn5", "skin": "ui_main/btn-zhu-huodong.png", "sizeGrid": "5,0,0,0", "name": "getIn", "height": 54 } }, { "type": "Label", "props": { "y": 15, "x": 65, "text": "活动", "fontSize": 26, "font": "SimHei", "color": "#141930", "bold": true } }, { "type": "Label", "props": { "y": 13, "x": 63, "text": "活动", "fontSize": 26, "font": "SimHei", "color": "#fcfcfb", "bold": true } }, { "type": "Image", "props": { "y": 8, "x": 20, "skin": "ui_main/zhu-huodongzhu-huodong.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "active_point", "skin": "ui_common/img-tixing.png" } }] }, { "type": "Box", "props": { "y": 389, "x": 625, "var": "btn_shop", "top": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 125, "height": 52, "bgColor": "#4541c8" } }, { "type": "Image", "props": { "y": -2, "x": 0, "width": 125, "visible": false, "var": "getIn6", "skin": "ui_main/btn-zhu-yingxiong.png", "sizeGrid": "5,0,0,0", "name": "getIn", "height": 54 } }, { "type": "Label", "props": { "y": 15, "x": 65, "text": "商城", "fontSize": 26, "font": "SimHei", "color": "#141930", "bold": true } }, { "type": "Label", "props": { "y": 13, "x": 63, "text": "商城", "fontSize": 26, "font": "SimHei", "color": "#fcfcfb", "bold": true } }, { "type": "Image", "props": { "y": 8, "x": 20, "skin": "ui_main/img-zhu-shangcheng.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "shop_point", "skin": "ui_common/img-tixing.png" } }] }] }] };
                return MainListViewUI;
            }(View));
            subinterface.MainListViewUI = MainListViewUI;
        })(subinterface = main.subinterface || (main.subinterface = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var subinterface;
        (function (subinterface) {
            var MainSkillViewUI = /** @class */ (function (_super) {
                __extends(MainSkillViewUI, _super);
                function MainSkillViewUI() {
                    return _super.call(this) || this;
                }
                MainSkillViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.subinterface.MainSkillViewUI.uiView);
                };
                MainSkillViewUI.uiView = { "type": "View", "props": { "width": 750, "mouseThrough": true, "height": 315 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 750, "var": "bg", "mouseThrough": true, "height": 315, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 124, "x": 18, "width": 711, "skin": "ui_main/img-lantuo.png", "sizeGrid": "20,115,20,90", "height": 62 }, "child": [{ "type": "Box", "props": { "y": 35, "x": 77, "name": "list" }, "child": [{ "type": "Image", "props": { "width": 617, "skin": "ui_main/img-taitou-jinenghuifutuo-jindutiao.png", "sizeGrid": "0,5,0,5" } }, { "type": "Panel", "props": { "y": 2, "x": 2, "width": 613, "height": 14 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 613, "var": "mp_list", "skin": "ui_main/img-taitou-jinenghuifu-jindutiao.png", "sizeGrid": "5,8,5,16", "height": 14 } }] }] }, { "type": "Label", "props": { "y": 7, "x": 85, "width": 100, "var": "tx_skill_num", "text": "20/20", "strokeColor": "#3f506c", "height": 28, "fontSize": 24, "font": "SimHei", "color": "#ffff79", "bold": true } }, { "type": "Label", "props": { "y": 10, "x": 569, "width": 126, "var": "tx_skill_time", "text": "(恢复2/分钟)", "strokeColor": "#3f506c", "height": 25, "fontSize": 20, "font": "SimHei", "color": "#fbfdfc", "align": "right" } }] }, { "type": "Box", "props": { "y": 55, "x": 369, "var": "Captain", "centerX": -7, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 32, "var": "captain_skill", "skin": "ui_main/img-jinengkuang-duizhang.png" }, "child": [{ "type": "Image", "props": { "y": 45, "x": 44, "width": 70, "skin": "ui_main/img-jinengkuang-duizhang.png", "height": 70, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -6, "x": -6, "width": 80, "var": "captainSkillIcon", "skin": "ui_icon/2.png", "height": 80 } }, { "type": "Sprite", "props": { "y": 0, "x": 0, "width": 70, "renderType": "mask", "height": 70 }, "child": [{ "type": "Circle", "props": { "y": 35, "x": 35, "radius": 35, "lineWidth": 1, "fillColor": "#ff0000" } }] }] }, { "type": "Label", "props": { "y": 43, "x": 42, "width": 74, "var": "captainSkillCD", "pivotY": 35, "pivotX": 35, "height": 74, "bgColor": "#060606", "alpha": 0.5 }, "child": [{ "type": "Sprite", "props": { "y": 0, "x": 0, "width": 74, "var": "captainSkillCDSprite", "renderType": "mask", "pivotY": 0, "height": 74 }, "child": [{ "type": "Circle", "props": { "y": 37, "x": 37, "radius": 37, "lineWidth": 0, "fillColor": "#ff0000" } }] }] }, { "type": "Label", "props": { "y": 32, "x": 4, "width": 80, "var": "captainSkillCDLabel", "strokeColor": "#000000", "stroke": 4.5, "height": 27, "fontSize": 30, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Box", "props": { "y": 0, "x": 4, "width": 82, "var": "effect_bg", "height": 82 } }] }, { "type": "Image", "props": { "y": 82, "x": -8, "var": "autoBtn", "skin": "ui_main/img-shifangtuo-zhujineng.png" } }, { "type": "Image", "props": { "y": 86, "x": 0, "var": "autoIcon", "skin": "ui_main/img-shifang-zhujineng.png" } }, { "type": "Label", "props": { "y": 85, "x": 41, "text": "自动释放", "fontSize": 22, "font": "SimHei", "color": "#f9f9d0", "bold": true } }] }, { "type": "List", "props": { "y": 206, "x": 17, "width": 704, "var": "Skill", "spaceX": 17, "repeatY": 1, "repeatX": 6, "height": 111 }, "child": [{ "type": "Box", "props": { "width": 104, "renderType": "render", "height": 104 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_main/img-jinengkuang-tongyong.png" } }, { "type": "Image", "props": { "y": 2, "x": 2, "skin": "ui_main/img-huang-jindu.png", "name": "cd_circle" } }, { "type": "Image", "props": { "y": 9, "x": 9, "width": 86, "skin": "ui_icon/1.png", "name": "cd_pic", "height": 86 } }, { "type": "Image", "props": { "y": 26, "x": 31, "skin": "ui_main/img-suo.png", "name": "cd_lock" } }, { "type": "Label", "props": { "y": 95, "x": 52, "width": 86, "name": "cd_mask", "height": 86, "bgColor": "#000000", "anchorY": 1, "anchorX": 0.5, "alpha": 0.8 } }, { "type": "Label", "props": { "y": 40, "x": 2, "width": 100, "strokeColor": "#000000", "stroke": 4.5, "name": "cd_time", "height": 27, "fontSize": 30, "font": "SimHei", "color": "#7ef395", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 68, "x": 10, "width": 84, "valign": "bottom", "strokeColor": "#000000", "stroke": 4.5, "name": "conMp", "height": 27, "fontSize": 24, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "right" } }, { "type": "Box", "props": { "y": 7, "x": 7, "width": 90, "name": "effect_bg", "height": 90 } }] }] }] }] };
                return MainSkillViewUI;
            }(View));
            subinterface.MainSkillViewUI = MainSkillViewUI;
        })(subinterface = main.subinterface || (main.subinterface = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var main;
    (function (main) {
        var subinterface;
        (function (subinterface) {
            var NoticeViewUI = /** @class */ (function (_super) {
                __extends(NoticeViewUI, _super);
                function NoticeViewUI() {
                    return _super.call(this) || this;
                }
                NoticeViewUI.prototype.createChildren = function () {
                    View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.main.subinterface.NoticeViewUI.uiView);
                };
                NoticeViewUI.uiView = { "type": "View", "props": { "y": 0, "width": 750, "mouseThrough": true, "mouseEnabled": true, "height": 1200 }, "child": [{ "type": "Image", "props": { "width": 750, "var": "backGround", "height": 1200 }, "child": [{ "type": "Image", "props": { "y": 171, "x": 0, "width": 700, "visible": false, "var": "htmlBg", "sizeGrid": "21,95,25,92", "height": 70, "centerX": 0 } }, { "type": "HTMLDivElement", "props": { "y": 186, "x": 750, "var": "noticeLabel" } }] }] };
                return NoticeViewUI;
            }(View));
            subinterface.NoticeViewUI = NoticeViewUI;
        })(subinterface = main.subinterface || (main.subinterface = {}));
    })(main = ui.main || (ui.main = {}));
})(ui || (ui = {}));
(function (ui) {
    var rank;
    (function (rank) {
        var RankViewUI = /** @class */ (function (_super) {
            __extends(RankViewUI, _super);
            function RankViewUI() {
                return _super.call(this) || this;
            }
            RankViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.rank.RankViewUI.uiView);
            };
            RankViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "width": 750, "height": 1200, "centerY": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 197, "x": 25, "width": 700, "height": 906, "bgColor": "#616985" } }, { "type": "Label", "props": { "y": 25, "x": 33, "width": 229, "valign": "middle", "text": "排行榜", "italic": true, "height": 59, "fontSize": 42, "font": "SimHei", "color": "#d8f0f5", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 81, "x": 0, "width": 750, "height": 38, "fontSize": 40, "font": "Microsoft YaHei", "color": "#1b1616", "bold": true, "bgColor": "#27212c" } }, { "type": "List", "props": { "y": 82, "x": 25, "width": 750, "var": "typeList_d", "spaceX": 3, "repeatY": 1, "repeatX": 4, "height": 38 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 140, "renderType": "render", "height": 38 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 5, "width": 158, "skin": "ui_rank/img-zi-daxuanze.png", "sizeGrid": "0,25,0,29", "name": "cur", "height": 37 } }, { "type": "Image", "props": { "skin": "ui_rank/img-xiebian.png", "name": "line" } }, { "type": "Label", "props": { "y": 0, "x": 24, "width": 112, "valign": "middle", "text": "type", "name": "type", "height": 38, "fontSize": 26, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 0, "x": 27, "width": 118, "name": "btn", "height": 38 } }] }] }, { "type": "Image", "props": { "y": 140, "x": 25, "width": 674, "skin": "ui_rank/img-xiaobiaoqian-tuo.png", "sizeGrid": "3,41,1,3", "height": 58 } }, { "type": "Image", "props": { "y": 145, "x": 29, "width": 38, "var": "tp", "skin": "ui_rank/img-lan-xuan.png", "height": 49 } }, { "type": "List", "props": { "y": 144, "x": 28, "width": 667, "var": "typeList_s", "spaceX": -30, "repeatY": 1, "height": 50 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 174, "renderType": "render", "height": 50 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 174, "skin": "ui_rank/img-lan-weixuan.png", "sizeGrid": "0,34,0,34", "name": "btn", "height": 50 } }, { "type": "Label", "props": { "y": 0, "x": 33, "width": 107, "valign": "middle", "text": "type", "name": "type", "height": 50, "fontSize": 26, "font": "SimHei", "color": "#bebbf8", "bold": true, "align": "center" } }] }, { "type": "Sprite", "props": { "y": 0, "x": 0, "width": 33, "renderType": "mask", "height": 31 }, "child": [{ "type": "Poly", "props": { "y": 0, "x": 0, "points": "0,0,0,50,660,50,627,0", "lineWidth": 1, "lineColor": "#ff0000", "fillColor": "#00ffff" } }] }] }, { "type": "List", "props": { "y": 218, "x": 62, "width": 626, "var": "rankList", "spaceY": 5, "name": "rankList", "height": 754 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 626, "renderType": "render", "height": 94 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 626, "skin": "ui_rank/img-zhihou-paiming.png", "sizeGrid": "0,3,0,82", "name": "bgImg", "height": 94 } }, { "type": "Image", "props": { "y": 12, "x": 100, "width": 70, "skin": "ui_hero/img-lanpinzhikuang.png", "height": 70 } }, { "type": "Image", "props": { "y": 12, "x": 100, "width": 70, "skin": "ui_head/icon_ui_01.png", "sizeGrid": "10,10,10,10", "name": "rankIcon", "height": 70 } }, { "type": "Text", "props": { "y": 49, "x": 185, "width": 131, "valign": "middle", "text": "content", "name": "rankContent", "height": 30, "fontSize": 18, "font": "Microsoft YaHei", "color": "#fafa85", "bold": false, "align": "left" } }, { "type": "Text", "props": { "y": 15, "x": 185, "width": 153, "valign": "middle", "text": "name", "name": "rankName", "height": 32, "fontSize": 22, "font": "Microsoft YaHei", "color": "#fffaec", "bold": true, "align": "left" } }, { "type": "Text", "props": { "y": 0, "x": 0, "width": 77, "valign": "middle", "text": "1", "name": "rankNum", "height": 94, "fontSize": 46, "font": "Helvetica", "color": "#e6e6eb", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 23, "x": 175, "skin": "ui_camp/icn-vip-jiemian-tongyong.png", "name": "vip" } }, { "type": "Label", "props": { "y": 23, "x": 380, "text": "阵营：", "name": "camp_name", "fontSize": 18, "font": "SimHei", "color": "#fafa85" } }] }] }, { "type": "Box", "props": { "y": 979, "x": 62, "width": 626, "var": "myInfo", "renderType": "render", "height": 94 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 626, "skin": "ui_rank/img-ziji-paiming.png", "sizeGrid": "0,11,0,82", "height": 94 } }, { "type": "Image", "props": { "y": 12, "x": 100, "width": 70, "skin": "ui_hero/img-lanpinzhikuang.png", "height": 70 } }, { "type": "Image", "props": { "y": 12, "x": 100, "width": 70, "var": "myRankIcon", "skin": "ui_head/icon_ui_01.png", "sizeGrid": "10,10,10,10", "height": 70 } }, { "type": "Text", "props": { "y": 49, "x": 185, "width": 131, "var": "myRankContent", "valign": "middle", "text": "content", "height": 30, "fontSize": 18, "font": "Microsoft YaHei", "color": "#fafa85", "bold": false, "align": "left" } }, { "type": "Text", "props": { "y": 15, "x": 185, "width": 153, "var": "myRankName", "valign": "middle", "text": "name", "height": 32, "fontSize": 22, "font": "Microsoft YaHei", "color": "#fffaec", "bold": true, "align": "left" } }, { "type": "Text", "props": { "y": 7, "x": 10, "width": 67, "var": "myRankNum", "valign": "middle", "text": "4", "height": 66, "fontSize": 46, "font": "Helvetica", "color": "#e6e6eb", "bold": true, "align": "center" } }, { "type": "Text", "props": { "y": 12, "x": 10, "wordWrap": true, "width": 67, "var": "notNum", "valign": "middle", "text": "暂未上榜", "height": 66, "fontSize": 24, "font": "SimHei", "color": "#e6e6eb", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 33, "x": 380, "var": "myCampName", "text": "阵营：", "fontSize": 18, "font": "SimHei", "color": "#fafa85" } }] }, { "type": "Image", "props": { "y": 79, "x": 676, "var": "close", "skin": "ui_common/btn-X-tongyong.png", "right": 30 } }, { "type": "Image", "props": { "y": 1004, "x": 247, "visible": false, "var": "myVip", "skin": "ui_camp/icn-vip-jiemian-tongyong.png" } }, { "type": "Button", "props": { "y": 166, "x": 683, "visible": false, "var": "Btn_reward", "stateNum": 1, "skin": "ui_wroldboss/btn-jaingliyulan-shijieboss.png", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 43, "x": -10, "text": "奖励预览", "strokeColor": "#7c6d92", "stroke": 3, "fontSize": 19, "font": "SimHei", "color": "#f4f4f4" } }] }] }] }] };
            return RankViewUI;
        }(View));
        rank.RankViewUI = RankViewUI;
    })(rank = ui.rank || (ui.rank = {}));
})(ui || (ui = {}));
(function (ui) {
    var scene;
    (function (scene) {
        var Scene01UI = /** @class */ (function (_super) {
            __extends(Scene01UI, _super);
            function Scene01UI() {
                return _super.call(this) || this;
            }
            Scene01UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.scene.Scene01UI.uiView);
            };
            Scene01UI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "ui_scene01/01.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1178 } }, { "type": "Image", "props": { "skin": "ui_scene01/02.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1014, "bottom": 0 } }, { "type": "Image", "props": { "skin": "ui_scene01/03.png", "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 607 } }, { "type": "Image", "props": { "skin": "ui_scene01/04.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "bottom": 661 } }, { "type": "View", "props": { "right": 0, "name": "avatarRoot", "left": 0, "height": 1200, "bottom": 0 } }, { "type": "Image", "props": { "skin": "ui_scene01/05.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 92 } }, { "type": "View", "props": { "right": 0, "name": "effectRoot", "left": 0, "height": 1200, "bottom": 0 } }] };
            return Scene01UI;
        }(View));
        scene.Scene01UI = Scene01UI;
    })(scene = ui.scene || (ui.scene = {}));
})(ui || (ui = {}));
(function (ui) {
    var scene;
    (function (scene) {
        var Scene02UI = /** @class */ (function (_super) {
            __extends(Scene02UI, _super);
            function Scene02UI() {
                return _super.call(this) || this;
            }
            Scene02UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.scene.Scene02UI.uiView);
            };
            Scene02UI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "top": -91, "skin": "ui_scene02/01.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0 } }, { "type": "Image", "props": { "skin": "ui_scene02/02.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1140, "bottom": -16 } }, { "type": "Image", "props": { "skin": "ui_scene02/03.png", "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 548 } }, { "type": "Image", "props": { "skin": "ui_scene02/04.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "bottom": 548 } }, { "type": "View", "props": { "right": 0, "name": "avatarRoot", "left": 0, "height": 1200, "bottom": 0 } }, { "type": "View", "props": { "right": 0, "name": "effectRoot", "left": 0, "height": 1200, "bottom": 0 } }] };
            return Scene02UI;
        }(View));
        scene.Scene02UI = Scene02UI;
    })(scene = ui.scene || (ui.scene = {}));
})(ui || (ui = {}));
(function (ui) {
    var scene;
    (function (scene) {
        var Scene03UI = /** @class */ (function (_super) {
            __extends(Scene03UI, _super);
            function Scene03UI() {
                return _super.call(this) || this;
            }
            Scene03UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.scene.Scene03UI.uiView);
            };
            Scene03UI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "ui_scene03/01.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 891 } }, { "type": "Image", "props": { "skin": "ui_scene03/02.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1114, "bottom": -21 } }, { "type": "Image", "props": { "skin": "ui_scene03/03.png", "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 550 } }, { "type": "Image", "props": { "skin": "ui_scene03/04.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "bottom": 550 } }, { "type": "View", "props": { "right": 0, "name": "avatarRoot", "left": 0, "height": 1200, "bottom": 0 } }, { "type": "Image", "props": { "width": 141, "skin": "ui_scene03/05.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "height": 76, "bottom": 359 } }, { "type": "View", "props": { "right": 0, "name": "effectRoot", "left": 0, "height": 1200, "bottom": 0 } }] };
            return Scene03UI;
        }(View));
        scene.Scene03UI = Scene03UI;
    })(scene = ui.scene || (ui.scene = {}));
})(ui || (ui = {}));
(function (ui) {
    var scene;
    (function (scene) {
        var Scene04UI = /** @class */ (function (_super) {
            __extends(Scene04UI, _super);
            function Scene04UI() {
                return _super.call(this) || this;
            }
            Scene04UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.scene.Scene04UI.uiView);
            };
            Scene04UI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "ui_scene04/01.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1089 } }, { "type": "Image", "props": { "skin": "ui_scene04/02.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 635, "bottom": 545 } }, { "type": "Image", "props": { "width": 750, "skin": "ui_scene04/03.png", "height": 177, "bottom": 553 } }, { "type": "Image", "props": { "skin": "ui_scene04/04.png", "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 546 } }, { "type": "Image", "props": { "skin": "ui_scene04/05.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "bottom": 546 } }, { "type": "Image", "props": { "skin": "ui_scene04/06.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 618, "bottom": -20 } }, { "type": "View", "props": { "right": 0, "name": "avatarRoot", "left": 0, "height": 1200, "bottom": 0 } }, { "type": "Image", "props": { "skin": "ui_scene04/07.png", "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 341 } }, { "type": "View", "props": { "right": 0, "name": "effectRoot", "left": 0, "height": 1200, "bottom": 0 } }] };
            return Scene04UI;
        }(View));
        scene.Scene04UI = Scene04UI;
    })(scene = ui.scene || (ui.scene = {}));
})(ui || (ui = {}));
(function (ui) {
    var scene;
    (function (scene) {
        var Scene05UI = /** @class */ (function (_super) {
            __extends(Scene05UI, _super);
            function Scene05UI() {
                return _super.call(this) || this;
            }
            Scene05UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.scene.Scene05UI.uiView);
            };
            Scene05UI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "skin": "ui_scene05/01.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 578 } }, { "type": "Image", "props": { "skin": "ui_scene05/02.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1190, "bottom": 0 } }, { "type": "Image", "props": { "skin": "ui_scene05/04.png", "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 636 } }, { "type": "Image", "props": { "skin": "ui_scene05/05.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "bottom": 636 } }, { "type": "View", "props": { "right": 0, "name": "avatarRoot", "left": 0, "height": 1200, "bottom": 0 } }, { "type": "View", "props": { "right": 0, "name": "effectRoot", "left": 0, "height": 1200, "bottom": 0 } }] };
            return Scene05UI;
        }(View));
        scene.Scene05UI = Scene05UI;
    })(scene = ui.scene || (ui.scene = {}));
})(ui || (ui = {}));
(function (ui) {
    var scene;
    (function (scene) {
        var Scene06UI = /** @class */ (function (_super) {
            __extends(Scene06UI, _super);
            function Scene06UI() {
                return _super.call(this) || this;
            }
            Scene06UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.scene.Scene06UI.uiView);
            };
            Scene06UI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "skin": "ui_scene06/01.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1153, "bottom": 447 } }, { "type": "Image", "props": { "skin": "ui_scene06/02.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1038, "bottom": 0 } }, { "type": "View", "props": { "right": 0, "name": "avatarRoot", "left": 0, "height": 1200, "bottom": 0 } }, { "type": "Image", "props": { "skin": "ui_scene06/04.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 139, "bottom": 299 } }, { "type": "View", "props": { "right": 0, "name": "effectRoot", "left": 0, "height": 1200, "bottom": 0 } }] };
            return Scene06UI;
        }(View));
        scene.Scene06UI = Scene06UI;
    })(scene = ui.scene || (ui.scene = {}));
})(ui || (ui = {}));
(function (ui) {
    var scene;
    (function (scene) {
        var Scene07UI = /** @class */ (function (_super) {
            __extends(Scene07UI, _super);
            function Scene07UI() {
                return _super.call(this) || this;
            }
            Scene07UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.scene.Scene07UI.uiView);
            };
            Scene07UI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "skin": "ui_scene07/01.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 913, "bottom": 684 } }, { "type": "Image", "props": { "skin": "ui_scene07/02.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 1127, "bottom": 0 } }, { "type": "Image", "props": { "skin": "ui_scene07/03.png", "mouseThrough": true, "mouseEnabled": false, "left": 0, "bottom": 578 } }, { "type": "Image", "props": { "skin": "ui_scene07/04.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "bottom": 578 } }, { "type": "View", "props": { "y": 0, "x": 0, "right": 0, "name": "avatarRoot", "left": 0, "height": 1200, "bottom": 0 } }, { "type": "Image", "props": { "skin": "ui_scene07/05.png", "right": 0, "mouseThrough": true, "mouseEnabled": false, "left": 0, "height": 121, "bottom": 337 } }, { "type": "View", "props": { "right": 0, "name": "effectRoot", "left": 0, "height": 1200, "bottom": 0 } }] };
            return Scene07UI;
        }(View));
        scene.Scene07UI = Scene07UI;
    })(scene = ui.scene || (ui.scene = {}));
})(ui || (ui = {}));
(function (ui) {
    var setting;
    (function (setting) {
        var SettingHeadViewUI = /** @class */ (function (_super) {
            __extends(SettingHeadViewUI, _super);
            function SettingHeadViewUI() {
                return _super.call(this) || this;
            }
            SettingHeadViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.setting.SettingHeadViewUI.uiView);
            };
            SettingHeadViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "x": 79, "width": 592, "height": 474, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -2, "width": 592, "var": "panel_base", "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "10,10,10,10", "height": 474 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 592, "height": 40, "bgColor": "#1b2838" } }, { "type": "Label", "props": { "y": 8, "x": 23, "width": 6, "height": 25, "bgColor": "#4a408a" } }, { "type": "Image", "props": { "y": 61, "x": 12, "width": 562, "height": 300 }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 562, "lineWidth": 1, "height": 300, "fillColor": "#32324d" } }] }, { "type": "Image", "props": { "y": 145, "x": 92, "skin": "ui_common/img-huawen2.png", "scaleY": -1, "scaleX": -1, "alpha": 0.2 } }, { "type": "Image", "props": { "y": 276, "x": 494, "skin": "ui_common/img-huawen2.png", "alpha": 0.2 } }] }, { "type": "Label", "props": { "y": 8, "x": 49, "width": 268, "var": "type", "text": "选择头像", "height": 27, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "bold": false, "align": "left" } }, { "type": "Button", "props": { "y": 0, "var": "btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "right": 12 } }, { "type": "Button", "props": { "y": 381, "x": 215, "var": "btn_ok", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 36, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 161, "valign": "middle", "text": "确定", "strokeColor": "#a66336", "stroke": 1, "height": 67, "fontSize": 28, "font": "SimHei", "color": "#280605", "align": "center" } }] }, { "type": "List", "props": { "y": 73, "x": 37, "width": 529, "var": "warehouse", "spaceY": 10, "spaceX": 16, "repeatX": 5, "height": 286 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "renderType": "render" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 82, "skin": "ui_setting/img-xuanzhong-shezhi.png", "sizeGrid": "5,18,12,5", "name": "img_select", "height": 82 } }, { "type": "Label", "props": { "y": 3, "x": 3, "width": 76, "height": 76, "bgColor": "#0a0a12", "alpha": 0.8 }, "child": [{ "type": "Image", "props": { "y": 3, "x": 3, "width": 70, "height": 70 }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 70, "lineWidth": 1, "height": 70, "fillColor": "#3b4461" } }] }] }, { "type": "Image", "props": { "y": 6, "x": 6, "width": 70, "name": "img_head", "height": 70 } }, { "type": "Image", "props": { "y": 54, "x": 62, "width": 30, "skin": "ui_setting/btn-weixuanzhong.png", "name": "img_use", "height": 33 } }] }] }] }] }] };
            return SettingHeadViewUI;
        }(View));
        setting.SettingHeadViewUI = SettingHeadViewUI;
    })(setting = ui.setting || (ui.setting = {}));
})(ui || (ui = {}));
(function (ui) {
    var setting;
    (function (setting) {
        var SettingNameViewUI = /** @class */ (function (_super) {
            __extends(SettingNameViewUI, _super);
            function SettingNameViewUI() {
                return _super.call(this) || this;
            }
            SettingNameViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.setting.SettingNameViewUI.uiView);
            };
            SettingNameViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "width": 682, "height": 474, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 682, "var": "panel_base", "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "10,10,10,10", "height": 474 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 682, "height": 40, "bgColor": "#1b2838" } }, { "type": "Label", "props": { "y": 8, "x": 23, "width": 6, "height": 25, "bgColor": "#4a408a" } }, { "type": "Rect", "props": { "y": 61, "x": 12, "width": 660, "lineWidth": 1, "height": 300, "fillColor": "#32324d" } }, { "type": "Image", "props": { "y": 145, "x": 92, "skin": "ui_common/img-huawen2.png", "scaleY": -1, "scaleX": -1, "alpha": 0.2 } }, { "type": "Image", "props": { "y": 276, "x": 591, "skin": "ui_common/img-huawen2.png", "alpha": 0.2 } }, { "type": "Image", "props": { "y": 165, "width": 225, "skin": "ui_common/img-gaiming-bg-chuangjue.png", "scaleY": 2, "scaleX": 2, "height": 55, "centerX": 19 } }] }, { "type": "Label", "props": { "y": 8, "x": 49, "width": 268, "var": "type", "text": "更改姓名", "height": 27, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "bold": false, "align": "left" } }, { "type": "Button", "props": { "y": 0, "var": "btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "right": 12 } }, { "type": "TextInput", "props": { "y": 213, "x": 325, "width": 350, "var": "input", "valign": "middle", "type": "text", "promptColor": "#b9b9b9", "maxChars": 12, "height": 54, "fontSize": 36, "font": "SimHei", "color": "#ffffff", "centerX": -6, "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Button", "props": { "y": 166, "width": 94, "var": "btn_random", "stateNum": 1, "skin": "ui_common/btn-suijin-mingzi.png", "mouseEnabled": true, "height": 94, "centerX": 197 } }, { "type": "Button", "props": { "y": 418, "x": 331, "width": 162, "var": "btn_ok", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 26, "labelPadding": "-10", "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "确定", "height": 70, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "x": 0, "width": 162, "skin": "ui_common/btn-huodong-wenzi-bg.png", "sizeGrid": "5,9,9,5", "height": 22, "bottom": 0 } }, { "type": "Text", "props": { "y": 47, "x": 42, "width": 86, "var": "txt_freed", "valign": "middle", "text": "本次免费", "height": 24, "fontSize": 20, "font": "SimHei", "color": "#ffc58b", "bold": false, "align": "left" } }, { "type": "Image", "props": { "y": 50, "x": 51, "width": 20, "visible": false, "var": "img_diamonds", "skin": "ui_icon/icon_prop_013.png", "height": 18 } }, { "type": "Text", "props": { "y": 47, "x": 74, "width": 61, "var": "txt_cost", "valign": "middle", "text": "200", "height": 24, "fontSize": 20, "font": "SimHei", "color": "#ffc58b", "bold": false, "align": "left" } }] }] }] }] };
            return SettingNameViewUI;
        }(View));
        setting.SettingNameViewUI = SettingNameViewUI;
    })(setting = ui.setting || (ui.setting = {}));
})(ui || (ui = {}));
(function (ui) {
    var setting;
    (function (setting) {
        var SettingViewUI = /** @class */ (function (_super) {
            __extends(SettingViewUI, _super);
            function SettingViewUI() {
                return _super.call(this) || this;
            }
            SettingViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.setting.SettingViewUI.uiView);
            };
            SettingViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "x": 81, "width": 588, "height": 422, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "var": "panel_base", "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "10,10,10,10", "height": 422 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 588, "height": 40, "bgColor": "#1b2838" } }, { "type": "Label", "props": { "y": 8, "x": 23, "width": 6, "height": 25, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "y": 8, "x": 49, "width": 268, "var": "type", "text": "设置", "height": 27, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "bold": false, "align": "left" } }, { "type": "Image", "props": { "y": 91, "x": 100, "width": 338, "height": 42 }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 338, "lineWidth": 1, "height": 40, "fillColor": "#32324d" } }] }, { "type": "Label", "props": { "y": 60, "x": 25, "width": 76, "height": 76, "bgColor": "#0a0a12", "alpha": 0.8 }, "child": [{ "type": "Image", "props": { "y": 3, "x": 3, "width": 70, "height": 70 }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 70, "lineWidth": 1, "height": 70, "fillColor": "#3b4461" } }] }] }, { "type": "Image", "props": { "y": 298, "x": 12, "width": 566, "height": 2 }, "child": [{ "type": "Line", "props": { "y": 0, "x": 0, "toY": 0, "toX": 566, "lineWidth": 2, "lineColor": "#7c7a88" } }] }, { "type": "Image", "props": { "y": 207, "x": 94, "skin": "ui_setting/icon-shengying-shezhi.png" } }, { "type": "Label", "props": { "y": 208, "x": 270, "width": 54, "text": "音效", "height": 28, "fontSize": 26, "font": "SimHei", "color": "#fdfdfd" } }, { "type": "Label", "props": { "y": 208, "x": 447, "width": 54, "text": "音乐", "height": 28, "fontSize": 26, "font": "SimHei", "color": "#fdfdfd" } }] }, { "type": "Button", "props": { "y": 0, "var": "btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "right": 12 } }, { "type": "Label", "props": { "y": 98, "x": 129, "width": 297, "var": "txt_username", "text": "玩家名字七个字", "height": 28, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "align": "right" } }, { "type": "Image", "props": { "y": 63, "x": 28, "width": 70, "var": "img_head", "skin": "ui_head/icon_ui_01.png", "height": 70 } }, { "type": "Button", "props": { "y": 110, "x": 81, "var": "btn_head", "stateNum": 1, "skin": "ui_setting/btn-huantouxiang-shezhi.png" } }, { "type": "Button", "props": { "y": 88, "x": 450, "var": "btn_name", "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "labelSize": 36 }, "child": [{ "type": "Label", "props": { "y": 4, "x": 36, "width": 76, "valign": "middle", "text": "改名", "strokeColor": "#a66336", "stroke": 2, "height": 40, "fontSize": 20, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 11, "x": 26, "skin": "ui_setting/img-gaiming-shezhi.png" } }] }, { "type": "Button", "props": { "y": 318, "x": 215, "var": "btn_ok", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 36, "labelFont": "SimHei", "labelColors": "#954104", "labelBold": true, "labelAlign": "center", "label": "确定" } }, { "type": "Button", "props": { "y": 196, "x": 206, "var": "btn_effect", "stateNum": 1, "skin": "ui_setting/btn-weixuanzhong-bg.png" }, "child": [{ "type": "Image", "props": { "y": 3, "x": 2, "var": "effect_select", "skin": "ui_setting/btn-weixuanzhong.png" } }] }, { "type": "Button", "props": { "y": 196, "x": 383, "var": "btn_music", "stateNum": 1, "skin": "ui_setting/btn-weixuanzhong-bg.png" }, "child": [{ "type": "Image", "props": { "y": 3, "x": 2, "var": "music_select", "skin": "ui_setting/btn-weixuanzhong.png" } }] }] }] }] };
            return SettingViewUI;
        }(View));
        setting.SettingViewUI = SettingViewUI;
    })(setting = ui.setting || (ui.setting = {}));
})(ui || (ui = {}));
(function (ui) {
    var share;
    (function (share) {
        var InvitationCustemsViewUI = /** @class */ (function (_super) {
            __extends(InvitationCustemsViewUI, _super);
            function InvitationCustemsViewUI() {
                return _super.call(this) || this;
            }
            InvitationCustemsViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.share.InvitationCustemsViewUI.uiView);
            };
            InvitationCustemsViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "y": -1, "x": 0, "skin": "ui_share/2邀请助力 - 未达成.JPG" } }, { "type": "Image", "props": { "width": 588, "top": 320, "height": 392, "centerX": 0 }, "child": [{ "type": "Label", "props": { "width": 850, "height": 1300, "centerY": 100, "centerX": 0, "alpha": 0.8 }, "child": [{ "type": "Rect", "props": { "width": 850, "lineWidth": 1, "height": 1300, "fillColor": "#000000" } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "height": 392 }, "child": [{ "type": "Label", "props": { "x": 0, "width": 588, "height": 392, "bgColor": "#dadbdd" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 50 } }, { "type": "Label", "props": { "y": 13, "x": 18, "width": 6, "height": 25, "bgColor": "#c6832e" } }, { "type": "Image", "props": { "y": 133, "x": 80, "skin": "ui_common/img-huawen2.png", "scaleY": -1, "scaleX": -1, "alpha": 0.4 } }, { "type": "Image", "props": { "y": 309, "x": 508, "skin": "ui_common/img-huawen2.png", "alpha": 0.4 } }, { "type": "Image", "props": { "y": 280, "x": 11, "width": 568, "height": 2 }, "child": [{ "type": "Line", "props": { "toY": 0, "toX": 568, "lineWidth": 1, "lineColor": "#746e97" } }] }] }, { "type": "Text", "props": { "y": 13, "x": 43, "width": 109, "var": "tx_title", "text": "助力通关", "height": 26, "fontSize": 25, "font": "SimHei", "color": "#ffffff", "bold": true } }, { "type": "Button", "props": { "y": 2, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "right": 12 } }] }, { "type": "Image", "props": { "y": 50, "x": 0, "width": 588, "height": 342 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 12, "x": 249, "width": 331, "var": "tx_num", "innerHTML": "今日成功邀请人数：4/3人", "height": 22 } }, { "type": "Image", "props": { "y": 43, "x": 52, "width": 120, "var": "hero_icon", "height": 160 } }, { "type": "Image", "props": { "y": 57, "x": 200, "width": 341, "skin": "ui_chat/img-duihuakuang-liaotian.png", "sizeGrid": "9,10,18,10", "height": 119 }, "child": [{ "type": "Image", "props": { "y": 28, "x": -4, "skin": "ui_chat/img-sanjiao-liaotian.png" } }, { "type": "HTMLDivElement", "props": { "y": 16, "x": 21, "width": 304, "var": "tx_content", "innerHTML": "稍微遇到点小困难呢，成功邀请没关系，点击一下直接通过本关哦~", "height": 74 } }] }, { "type": "Image", "props": { "y": 191, "x": 242, "skin": "ui_shop/img-tanhao.png" }, "child": [{ "type": "Text", "props": { "y": 8, "x": 36, "width": 307, "text": "邀请到新用户还可以获得邀请豪礼哦！", "height": 19, "fontSize": 18, "font": "SimHei", "color": "#211f1f", "bold": false, "align": "left" } }] }, { "type": "Button", "props": { "y": 287, "var": "btn_customs", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelStrokeColor": "#5f2904", "labelStroke": 1, "labelSize": 28, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "即刻通关", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }] }] }] };
            return InvitationCustemsViewUI;
        }(View));
        share.InvitationCustemsViewUI = InvitationCustemsViewUI;
    })(share = ui.share || (ui.share = {}));
})(ui || (ui = {}));
(function (ui) {
    var share;
    (function (share) {
        var ShareAchievenViewUI = /** @class */ (function (_super) {
            __extends(ShareAchievenViewUI, _super);
            function ShareAchievenViewUI() {
                return _super.call(this) || this;
            }
            ShareAchievenViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.share.ShareAchievenViewUI.uiView);
            };
            ShareAchievenViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "width": 588, "top": 320, "height": 354, "centerX": 0 }, "child": [{ "type": "Label", "props": { "width": 850, "height": 1300, "centerY": 100, "centerX": 0, "alpha": 0.8 }, "child": [{ "type": "Rect", "props": { "width": 850, "lineWidth": 1, "height": 1300, "fillColor": "#000000" } }] }, { "type": "Image", "props": { "y": -1, "x": 0, "width": 588, "height": 354 }, "child": [{ "type": "Label", "props": { "y": -1, "x": 0, "width": 588, "height": 354, "bgColor": "#dadbdd" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 40 } }, { "type": "Label", "props": { "y": 7, "x": 18, "width": 6, "height": 25, "bgColor": "#c6832e" } }, { "type": "Image", "props": { "y": 123, "x": 80, "skin": "ui_common/img-huawen2.png", "scaleY": -1, "scaleX": -1, "alpha": 0.4 } }, { "type": "Image", "props": { "y": 271, "x": 508, "skin": "ui_common/img-huawen2.png", "alpha": 0.4 } }, { "type": "Image", "props": { "y": 248, "x": 10, "width": 568, "height": 1 } }] }, { "type": "Text", "props": { "y": 7, "x": 43, "text": "成就分享", "fontSize": 25, "font": "SimHei", "color": "#ffffff", "bold": true } }] }, { "type": "Image", "props": { "y": -1, "x": 0, "width": 588, "height": 354 }, "child": [{ "type": "Text", "props": { "y": 134, "x": 88, "width": 436, "var": "tx_content", "text": "分享给好友可获得双倍奖励哦！", "height": 30, "fontSize": 30, "font": "SimHei", "color": "#211f1f", "bold": true, "align": "center" } }] }] }, { "type": "Button", "props": { "y": 619, "x": 480, "var": "btn_share", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelStrokeColor": "#5f2904", "labelStroke": 1, "labelSize": 28, "labelPadding": "-10", "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "分享", "centerX": 105, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 44, "x": 1, "width": 160, "skin": "ui_common/btn-huodong-wenzi-bg.png", "sizeGrid": "0,10,10,0", "height": 22 }, "child": [{ "type": "Text", "props": { "y": 1, "x": 80, "width": 53, "var": "tx_sharenum", "text": "20", "height": 22, "fontSize": 20, "font": "SimHei", "color": "#ffc58b", "align": "left" } }, { "type": "Image", "props": { "y": 1, "x": 52, "width": 24, "skin": "ui_icon/icon_prop_013.png", "height": 20 } }] }] }, { "type": "Button", "props": { "y": 619, "x": 263, "var": "btn_receive", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelStrokeColor": "#5f2904", "labelStroke": 1, "labelSize": 28, "labelPadding": "-10", "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "直接领取", "centerX": -112, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 44, "x": 1, "width": 160, "skin": "ui_common/btn-huodong-wenzi-bg.png", "sizeGrid": "0,10,10,0", "height": 22 }, "child": [{ "type": "Text", "props": { "y": 1, "x": 80, "width": 34, "var": "tx_nosharenum", "text": "0", "height": 22, "fontSize": 20, "font": "SimHei", "color": "#ffc58b", "align": "left" } }, { "type": "Image", "props": { "y": 1, "x": 52, "width": 24, "skin": "ui_icon/icon_prop_013.png", "height": 20 } }] }] }, { "type": "Button", "props": { "y": 318, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "right": 81 } }] };
            return ShareAchievenViewUI;
        }(View));
        share.ShareAchievenViewUI = ShareAchievenViewUI;
    })(share = ui.share || (ui.share = {}));
})(ui || (ui = {}));
(function (ui) {
    var share;
    (function (share) {
        var ShareBaseViewUI = /** @class */ (function (_super) {
            __extends(ShareBaseViewUI, _super);
            function ShareBaseViewUI() {
                return _super.call(this) || this;
            }
            ShareBaseViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.share.ShareBaseViewUI.uiView);
            };
            ShareBaseViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 588, "height": 768, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "height": 768 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 588, "text": "label", "height": 768, "bgColor": "#5a4862" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 40 } }, { "type": "Image", "props": { "y": 40, "x": 266, "skin": "ui_common/img-huawen1.png" } }, { "type": "Image", "props": { "y": 768, "x": 265, "skin": "ui_common/img-huawen1.png", "scaleY": -1 } }, { "type": "Image", "props": { "y": 768, "x": 0, "skin": "ui_common/img-huawen1.png", "scaleY": -1 } }, { "type": "Image", "props": { "y": 40, "x": 0, "skin": "ui_common/img-huawen1.png" } }] }, { "type": "Button", "props": { "y": 0, "x": 612, "var": "btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "right": 12 } }, { "type": "Image", "props": { "y": -9, "x": 0, "width": 290, "skin": "ui_rank/img-xiaobiaoqian-tuo.png", "sizeGrid": "2,40,2,2", "height": 48 }, "child": [{ "type": "Button", "props": { "y": 24, "x": 76, "width": 152, "var": "btnlist_share", "stateNum": 1, "skin": "ui_rank/img-zi-xuan.png", "sizeGrid": "0,34,0,2", "labelStrokeColor": "#000000", "labelStroke": 1, "labelSize": 24, "labelFont": "SimHei", "labelColors": "#eff8bb", "labelBold": true, "label": "分享", "height": 43, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 24, "x": 202, "width": 160, "var": "btnlist_invitation", "stateNum": 1, "skin": "ui_rank/img-zi-weixuan.png", "sizeGrid": "0,34,0,34", "labelStrokeColor": "#000000", "labelStroke": 1, "labelSize": 24, "labelFont": "SimHei", "labelColors": "#bebbf8", "labelBold": true, "label": "邀请", "height": 43, "anchorY": 0.5, "anchorX": 0.5 } }] }] }, { "type": "Image", "props": { "y": 40, "x": 0, "width": 588, "var": "panel_share", "height": 728 }, "child": [{ "type": "Image", "props": { "y": 12, "x": 0, "skin": "ui_share/img-bg-fenxiang.png" } }, { "type": "Button", "props": { "y": 671, "x": 294, "var": "btn_share", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelStrokeColor": "#5f2904", "labelStroke": 1, "labelSize": 28, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "分享", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Text", "props": { "y": 83, "x": 49, "width": 99, "text": "免费特权", "height": 26, "fontSize": 24, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 85, "x": 176, "width": 376, "var": "tx_tequan", "innerHTML": "今日已获得特权次数：x/y次", "height": 20 } }, { "type": "HTMLDivElement", "props": { "y": 242, "x": 43, "width": 510, "var": "tx_content", "height": 48 } }, { "type": "List", "props": { "y": 135, "x": 65, "width": 465, "var": "list_tequan", "spaceX": 20, "repeatY": 1, "repeatX": 5, "height": 100 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 76, "skin": "ui_common/ui-daojukuang-lan-tongyong.png", "sizeGrid": "4,4,4,4", "renderType": "render", "name": "item", "height": 76 }, "child": [{ "type": "Image", "props": { "y": 3, "x": 3, "skin": "ui_icon/icon-tequan-hjzl.png", "name": "pic" } }, { "type": "Label", "props": { "y": 54, "x": 2, "width": 70, "text": "1", "stroke": 2, "name": "num", "height": 20, "fontSize": 20, "font": "SimHei", "color": "#f8f2ef", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 80, "width": 108, "stroke": 1, "name": "name", "height": 23, "fontSize": 20, "font": "SimHei", "color": "#f8e4dd", "centerX": 0, "bold": false, "align": "center" } }] }] }, { "type": "HTMLDivElement", "props": { "y": 535, "x": 40, "width": 513, "var": "tx_author", "height": 58 } }] }, { "type": "Image", "props": { "y": 40, "x": 0, "width": 588, "var": "panel_invitation", "height": 728 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "height": 728 }, "child": [{ "type": "Label", "props": { "y": 38, "x": 9, "width": 568, "height": 114, "bgColor": "#262449" } }, { "type": "Image", "props": { "y": 12, "x": 9, "skin": "ui_hero/img-tongyong-taitou-1.png" }, "child": [{ "type": "Text", "props": { "y": 2, "x": 87, "width": 90, "text": "惊喜大礼", "height": 23, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "align": "left" } }] }, { "type": "Image", "props": { "y": 37, "x": 54, "skin": "ui_share/icon-vip-yaoqing.png" } }, { "type": "Image", "props": { "y": 227, "x": 20, "skin": "ui_hero/img-tongyong-taitou-1.png" }, "child": [{ "type": "Text", "props": { "y": 3, "x": 87, "width": 90, "text": "邀请豪礼", "height": 23, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "align": "left" } }] }] }, { "type": "Text", "props": { "y": 122, "x": 144, "width": 90, "var": "tx_time", "text": "11:59:59", "height": 22, "fontSize": 20, "font": "SimHei", "color": "#fffaec", "align": "left" }, "child": [{ "type": "Text", "props": { "y": 0, "x": -121, "width": 120, "text": "VIP剩余时间：", "height": 22, "fontSize": 20, "font": "SimHei", "color": "#fffaec", "align": "left" } }] }, { "type": "Text", "props": { "y": 85, "x": 408, "width": 128, "var": "tx_receive", "text": "VIP已激活", "height": 28, "fontSize": 28, "font": "SimHei", "color": "#fffaec", "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 13, "x": 330, "width": 243, "var": "tx_invitation_today", "innerHTML": "当日邀请人数：4人", "height": 21 } }, { "type": "Text", "props": { "y": 162, "x": 25, "wordWrap": true, "width": 543, "var": "tx_everyday", "text": "每日邀请一名新用户登录游戏即可免费领取一天VIP特权，尊享贵族优惠，多日邀请时间可累计哦！", "leading": 5, "height": 42, "fontSize": 18, "font": "SimHei", "color": "#d6d7ee", "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 231, "x": 373, "width": 212, "var": "tx_invitation_totle", "innerHTML": "当日邀请人数：4人", "height": 21 } }, { "type": "Text", "props": { "y": 620, "x": 127, "width": 397, "var": "tx_immediately", "text": "成功邀请一定数量的新用户即可领取众多奖励！", "height": 22, "fontSize": 18, "font": "SimHei", "color": "#d8d9e2", "align": "left" } }, { "type": "Button", "props": { "y": 98, "x": 481, "width": 162, "var": "btn_receive", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "mouseThrough": false, "labelSize": 28, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "label": "领取", "height": 69, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 676, "x": 293, "width": 162, "var": "btn_immediate", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "mouseThrough": false, "labelSize": 28, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "label": "即刻邀请", "height": 67, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "List", "props": { "y": 258, "x": 11, "width": 572, "var": "list_invitation", "vScrollBarSkin": "\"\"", "repeatX": 1, "height": 354 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 568, "renderType": "render", "height": 118 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 568, "skin": "ui_rank/img-zhihou-paiming.png", "sizeGrid": "0,3,0,82", "name": "bgImg", "height": 118 } }, { "type": "Text", "props": { "y": 12, "x": 8, "width": 62, "valign": "middle", "text": "1", "name": "rankNum", "height": 98, "fontSize": 46, "font": "Helvetica", "color": "#e6e6eb", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 13, "x": 95, "width": 70, "visible": false, "skin": "ui_common/ui-daojukuang-lan-tongyong.png", "sizeGrid": "4,4,4,4", "name": "item_0", "height": 70 }, "child": [{ "type": "Label", "props": { "top": 2, "right": 2, "name": "item_quaity", "left": 2, "bottom": 2 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 70, "skin": "ui_icon/icon_equip_38.png", "sizeGrid": "10,10,10,10", "name": "itemIcon", "height": 70 } }, { "type": "Text", "props": { "y": 49, "x": 0, "width": 68, "text": "10", "name": "itemNum", "height": 20, "fontSize": 16, "font": "Microsoft YaHei", "color": "#fffaec", "bold": false, "align": "right" } }, { "type": "Text", "props": { "y": 70, "x": -10, "width": 91, "text": "name", "name": "itemName", "height": 27, "fontSize": 22, "font": "Microsoft YaHei", "color": "#fffaec", "bold": false, "align": "center" } }] }, { "type": "Image", "props": { "y": 13, "x": 190, "width": 70, "visible": false, "skin": "ui_common/ui-daojukuang-lan-tongyong.png", "sizeGrid": "4,4,4,4", "name": "item_1", "height": 70 }, "child": [{ "type": "Label", "props": { "top": 2, "right": 2, "name": "item_quaity", "left": 2, "bottom": 2 } }, { "type": "Image", "props": { "y": 0, "x": 1, "width": 70, "skin": "ui_icon/icon_equip_44.png", "sizeGrid": "10,10,10,10", "name": "itemIcon", "height": 70 } }, { "type": "Text", "props": { "y": 49, "x": 0, "width": 68, "text": "10", "name": "itemNum", "height": 20, "fontSize": 16, "font": "Microsoft YaHei", "color": "#fffaec", "bold": false, "align": "right" } }, { "type": "Text", "props": { "y": 70, "x": -9, "width": 91, "text": "name", "name": "itemName", "height": 27, "fontSize": 22, "font": "Microsoft YaHei", "color": "#fffaec", "bold": false, "align": "center" } }] }, { "type": "Image", "props": { "y": 12, "x": 285, "width": 70, "visible": false, "skin": "ui_common/ui-daojukuang-lan-tongyong.png", "sizeGrid": "4,4,4,4", "name": "item_2", "height": 70 }, "child": [{ "type": "Label", "props": { "top": 2, "right": 2, "name": "item_quaity", "left": 2, "bottom": 2 } }, { "type": "Image", "props": { "y": 0, "x": 1, "width": 70, "skin": "ui_icon/icon_equip_42.png", "sizeGrid": "10,10,10,10", "name": "itemIcon", "height": 70 } }, { "type": "Text", "props": { "y": 49, "x": 0, "width": 68, "text": "10", "name": "itemNum", "height": 20, "fontSize": 16, "font": "Microsoft YaHei", "color": "#fffaec", "bold": false, "align": "right" } }, { "type": "Text", "props": { "y": 70, "x": -9, "width": 91, "text": "name", "name": "itemName", "height": 27, "fontSize": 22, "font": "Microsoft YaHei", "color": "#fffaec", "bold": false, "align": "center" } }] }, { "type": "Button", "props": { "y": 62, "x": 489, "stateNum": 1, "skin": "ui_camp/btn-jiaru-tongyong-n.png", "name": "btn_reward", "labelSize": 18, "labelFont": "SimHei", "labelColors": "#ffffff", "labelBold": false, "labelAlign": "center", "label": " 领奖", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Text", "props": { "y": 42, "x": 394, "text": "邀请满5人可领取", "name": "tx_invitation_content", "fontSize": 20, "font": "SimHei", "color": "#ffffff" } }] }] }] }] }] };
            return ShareBaseViewUI;
        }(View));
        share.ShareBaseViewUI = ShareBaseViewUI;
    })(share = ui.share || (ui.share = {}));
})(ui || (ui = {}));
(function (ui) {
    var share;
    (function (share) {
        var ShareCustomsViewUI = /** @class */ (function (_super) {
            __extends(ShareCustomsViewUI, _super);
            function ShareCustomsViewUI() {
                return _super.call(this) || this;
            }
            ShareCustomsViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.share.ShareCustomsViewUI.uiView);
            };
            ShareCustomsViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "width": 588, "top": 250, "height": 453, "centerX": 0 }, "child": [{ "type": "Label", "props": { "width": 850, "height": 1300, "centerY": 120, "centerX": 0, "alpha": 0.8 }, "child": [{ "type": "Rect", "props": { "width": 850, "lineWidth": 1, "height": 1300, "fillColor": "#000000" } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "height": 454 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 588, "height": 454, "bgColor": "#dadbdd" } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "sizeGrid": "2,0,2,0", "height": 40 } }, { "type": "Label", "props": { "y": 7, "x": 18, "width": 6, "height": 25, "bgColor": "#c6832e" } }, { "type": "Image", "props": { "y": 123, "x": 81, "skin": "ui_common/img-huawen2.png", "scaleY": -1, "scaleX": -1, "alpha": 0.4 } }, { "type": "Image", "props": { "y": 370, "x": 508, "skin": "ui_common/img-huawen2.png", "alpha": 0.4 } }, { "type": "Text", "props": { "y": 8, "x": 43, "var": "tx_title", "text": "恭喜突破50关", "fontSize": 25, "font": "SimHei", "color": "#ffffff", "bold": true } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "height": 454 }, "child": [{ "type": "Image", "props": { "y": 49, "x": 10, "skin": "ui_share/img-hua-fengxiang.png" } }, { "type": "Text", "props": { "y": 321, "x": 83, "width": 451, "var": "strTex", "text": "危机尚未平息，往后还需要更多支持，继续加油吧！！！", "height": 25, "fontSize": 18, "font": "SimHei", "color": "#404040", "bold": true, "align": "center" } }] }] }, { "type": "Button", "props": { "y": 645, "x": 375, "var": "btn_share", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelStrokeColor": "#5f2904", "labelStroke": 1, "labelSize": 28, "labelPadding": "-10", "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "分享", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 44, "x": 1, "width": 160, "skin": "ui_common/btn-huodong-wenzi-bg.png", "sizeGrid": "0,10,10,0", "height": 22 }, "child": [{ "type": "Text", "props": { "y": 1, "x": 13, "width": 83, "text": "即可获得", "height": 22, "fontSize": 20, "font": "SimHei", "color": "#ffc58b" } }, { "type": "Text", "props": { "y": 1, "x": 121, "width": 34, "var": "tx_reward", "text": "200", "height": 22, "fontSize": 20, "font": "SimHei", "color": "#ffc58b" } }, { "type": "Image", "props": { "y": 1, "x": 95, "width": 24, "skin": "ui_icon/icon_prop_013.png", "height": 20 } }] }] }, { "type": "Button", "props": { "y": 270, "x": 634, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "right": 85, "anchorY": 0.5, "anchorX": 0.5 } }] };
            return ShareCustomsViewUI;
        }(View));
        share.ShareCustomsViewUI = ShareCustomsViewUI;
    })(share = ui.share || (ui.share = {}));
})(ui || (ui = {}));
(function (ui) {
    var share;
    (function (share) {
        var ShareHeroViewUI = /** @class */ (function (_super) {
            __extends(ShareHeroViewUI, _super);
            function ShareHeroViewUI() {
                return _super.call(this) || this;
            }
            ShareHeroViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.share.ShareHeroViewUI.uiView);
            };
            ShareHeroViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "y": -49, "x": -50, "width": 850, "height": 1300, "centerY": 50, "centerX": 0, "alpha": 0.8 }, "child": [{ "type": "Rect", "props": { "width": 850, "lineWidth": 1, "height": 1300, "fillColor": "#000000" } }] }, { "type": "Image", "props": { "y": 230, "x": 81, "width": 588, "height": 642 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 588, "height": 642, "bgColor": "#dadbdd" } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 588, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "height": 40 } }, { "type": "Label", "props": { "y": 7, "x": 18, "width": 6, "height": 25, "bgColor": "#c6832e" } }, { "type": "Image", "props": { "y": -1, "x": 41, "skin": "ui_share/icon-new.png" } }, { "type": "Image", "props": { "y": 127, "x": 81, "skin": "ui_common/img-huawen2.png", "scaleY": -1, "scaleX": -1, "alpha": 0.4 } }, { "type": "Image", "props": { "y": 558, "x": 508, "skin": "ui_common/img-huawen2.png", "alpha": 0.4 } }, { "type": "Image", "props": { "y": 498, "x": 10, "width": 568, "height": 2 }, "child": [{ "type": "Line", "props": { "toY": 0, "toX": 568, "lineWidth": 1, "lineColor": "#746e97" } }] }] }, { "type": "Image", "props": { "y": 230, "x": 81, "width": 588, "height": 642 }, "child": [{ "type": "Image", "props": { "y": 93, "width": 306, "skin": "ui_hero/img-yingxiong-zhanshi-lan.png", "height": 390, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "width": 280, "var": "exhero", "height": 363 } }] }, { "type": "Text", "props": { "y": 64, "x": 232, "width": 125, "var": "nameTex", "text": "赵日天", "height": 25, "fontSize": 22, "font": "SimHei", "color": "#663912", "bold": true, "align": "center" } }, { "type": "Text", "props": { "y": 518, "x": 120, "width": 361, "var": "tx_levelup", "text": "当前英雄可直升25级哦！", "height": 25, "fontSize": 24, "font": "SimHei", "color": "#404040", "bold": true, "align": "center" } }] }, { "type": "Button", "props": { "y": 230, "var": "btn_close", "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "right": 81 } }, { "type": "Button", "props": { "y": 817, "x": 375, "var": "btn_share", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelStrokeColor": "#5f2904", "labelStroke": 1, "labelSize": 28, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "labelAlign": "center", "label": "分享", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }] };
            return ShareHeroViewUI;
        }(View));
        share.ShareHeroViewUI = ShareHeroViewUI;
    })(share = ui.share || (ui.share = {}));
})(ui || (ui = {}));
(function (ui) {
    var shop;
    (function (shop) {
        var FirstRechargeShopViewUI = /** @class */ (function (_super) {
            __extends(FirstRechargeShopViewUI, _super);
            function FirstRechargeShopViewUI() {
                return _super.call(this) || this;
            }
            FirstRechargeShopViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.shop.FirstRechargeShopViewUI.uiView);
            };
            FirstRechargeShopViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 530 }, "child": [{ "type": "Image", "props": { "y": 66, "x": 20, "skin": "ui_shop/img-tuo-shouchong.png" } }, { "type": "List", "props": { "y": 191, "x": 45, "width": 673, "var": "firstList", "spaceX": 60, "repeatY": 1, "repeatX": 3, "height": 185 }, "child": [{ "type": "Box", "props": { "width": 180, "renderType": "render", "height": 180 }, "child": [{ "type": "Image", "props": { "width": 180, "name": "icon", "height": 180 } }] }] }, { "type": "Image", "props": { "y": 10, "x": 14, "skin": "ui_shop/img-title-shouchong.png" } }, { "type": "Text", "props": { "y": 16, "x": 16, "width": 707, "valign": "middle", "text": "传奇首充", "strokeColor": "#87574d", "stroke": 3, "height": 34, "fontSize": 30, "font": "SimHei", "color": "#fffcaa", "bold": true, "align": "center" } }, { "type": "Text", "props": { "y": 402, "x": 33, "width": 694, "var": "firstPrice_s", "text": "￥30.00", "strokeColor": "#55433f", "stroke": 1, "height": 109, "fontSize": 95, "font": "Arial", "color": "#3c2626", "bold": true, "alpha": 0.6, "align": "center" } }, { "type": "Text", "props": { "y": 397, "x": 29, "width": 691, "var": "firstPrice", "text": "￥30.00", "strokeColor": "#55433f", "stroke": 1, "height": 109, "fontSize": 95, "font": "Arial", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 517, "x": 29, "width": 696, "visible": false, "pivotY": 0, "pivotX": 0, "height": 40, "alpha": 0.9 }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 696, "lineWidth": 1, "height": 40, "fillColor": "#3f4968" } }, { "type": "Poly", "props": { "y": 0, "x": 180, "points": "-20,40,0,0,348,0,328,40", "lineWidth": 1, "fillColor": "#374981" } }, { "type": "Image", "props": { "y": 3, "x": 654, "visible": false, "var": "proInfo", "skin": "ui_shop/img-tanhao.png" } }, { "type": "Text", "props": { "y": 6, "x": 273, "width": 192, "text": "道具具体信息", "strokeColor": "#2d3652", "stroke": 2, "height": 34, "fontSize": 24, "font": "Helvetica", "color": "#6298ae", "bold": true } }] }, { "type": "Button", "props": { "width": 710, "var": "BuyBtn", "name": "BuyBtn", "height": 435, "centerY": 19, "centerX": -5, "anchorY": 0.5, "anchorX": 0.5 } }] };
            return FirstRechargeShopViewUI;
        }(View));
        shop.FirstRechargeShopViewUI = FirstRechargeShopViewUI;
    })(shop = ui.shop || (ui.shop = {}));
})(ui || (ui = {}));
(function (ui) {
    var shop;
    (function (shop) {
        var GemShopViewUI = /** @class */ (function (_super) {
            __extends(GemShopViewUI, _super);
            function GemShopViewUI() {
                return _super.call(this) || this;
            }
            GemShopViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.shop.GemShopViewUI.uiView);
            };
            GemShopViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 620 }, "child": [{ "type": "List", "props": { "y": 65, "x": 30, "width": 702, "var": "gemList", "spaceY": 20, "spaceX": 16, "repeatY": 2, "repeatX": 3, "name": "gemList", "height": 537 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 220, "var": "gemBox", "renderType": "render", "name": "gemBox", "height": 252 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_shop/img-kuang-baoxiang.png" } }, { "type": "Image", "props": { "y": 210, "x": 0, "width": 220, "skin": "ui_shop/img-jiagetiao.png", "sizeGrid": "0,48,0,0", "height": 42 } }, { "type": "Text", "props": { "y": 217, "x": 43, "width": 55, "text": "￥", "strokeColor": "#4c446d", "stroke": 4, "height": 28, "fontSize": 30, "font": "Helvetica", "color": "#ffffff", "bold": true, "align": "right" } }, { "type": "Text", "props": { "y": 217, "x": 97, "width": 55, "text": "160", "strokeColor": "#4c446d", "stroke": 4, "name": "gemPrice", "height": 28, "fontSize": 30, "font": "Helvetica", "color": "#ffffff", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 128, "x": 114, "skin": "ui_icon/icon_prop_006.png", "scaleY": 1, "scaleX": 1, "name": "gemIcon", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Button", "props": { "y": 58, "x": 68, "width": 220, "name": "buyBtn", "height": 252, "anchorY": 0.5, "anchorX": 0.5 } }] }, { "type": "Text", "props": { "y": 19, "x": 13, "width": 192, "text": "一把宝石", "strokeColor": "#000000", "stroke": 2, "renderType": "render", "name": "gemName", "height": 29, "fontSize": 24, "font": "Microsoft YaHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Text", "props": { "y": 167, "x": 60, "width": 118, "text": "60", "strokeColor": "#000000", "stroke": 2, "renderType": "render", "name": "gemNum", "height": 29, "fontSize": 25, "font": "Microsoft YaHei", "color": "#ffe000", "bold": true, "align": "right" } }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_shop/img-zhekou-bg-shangcheng.png", "name": "discountBg" }, "child": [{ "type": "Label", "props": { "y": 17, "x": 17, "width": 46, "valign": "middle", "text": "3折", "rotation": -45, "name": "discount", "height": 17, "fontSize": 22, "font": "Microsoft YaHei", "color": "#ffd28d", "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }] }] }] }, { "type": "Image", "props": { "y": 10, "x": 14, "skin": "ui_shop/img-tuo-baoxiang.png" } }, { "type": "Text", "props": { "y": 18, "x": 344, "width": 66, "text": "钻石", "strokeColor": "#497d98", "stroke": 3, "height": 35, "fontSize": 30, "font": "SimHei", "color": "#a7d6ec", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 14, "x": 684, "visible": false, "var": "proInfo", "skin": "ui_shop/img-tanhao.png" } }] };
            return GemShopViewUI;
        }(View));
        shop.GemShopViewUI = GemShopViewUI;
    })(shop = ui.shop || (ui.shop = {}));
})(ui || (ui = {}));
(function (ui) {
    var shop;
    (function (shop) {
        var GiftBag2YuanViewUI = /** @class */ (function (_super) {
            __extends(GiftBag2YuanViewUI, _super);
            function GiftBag2YuanViewUI() {
                return _super.call(this) || this;
            }
            GiftBag2YuanViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.shop.GiftBag2YuanViewUI.uiView);
            };
            GiftBag2YuanViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "var": "bg", "top": 0, "right": 0, "left": 1, "bottom": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "y": 600, "x": 374, "width": 554, "var": "bgImg", "height": 784, "centerY": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Button", "props": { "y": 32, "x": 503, "var": "btn_close", "top": 12, "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "right": 20, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "var": "hero_bg", "top": 150, "skin": "ui_hero/img-yingxiong-zhanshi-lan.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "var": "hero_icon", "top": 150, "skin": "ui_hero/img-yingxiong-zhanshi-lan.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 717, "x": 277, "var": "btn_buy", "stateNum": 1, "skin": "ui_common/btn-huodong-p.png", "labelSize": 30, "labelFont": "SimHei", "labelColors": "#5f2904", "labelBold": true, "centerX": 0, "bottom": 32, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "HTMLDivElement", "props": { "y": 600, "x": 45, "width": 462, "var": "hero_bigskill", "innerHTML": "htmlText", "height": 100 } }] }] }] };
            return GiftBag2YuanViewUI;
        }(View));
        shop.GiftBag2YuanViewUI = GiftBag2YuanViewUI;
    })(shop = ui.shop || (ui.shop = {}));
})(ui || (ui = {}));
(function (ui) {
    var shop;
    (function (shop) {
        var LotteryShopViewUI = /** @class */ (function (_super) {
            __extends(LotteryShopViewUI, _super);
            function LotteryShopViewUI() {
                return _super.call(this) || this;
            }
            LotteryShopViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.shop.LotteryShopViewUI.uiView);
            };
            LotteryShopViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 500 }, "child": [{ "type": "Image", "props": { "y": 20, "x": 24, "skin": "ui_shop/img-tuo-baoxiang.png" } }, { "type": "Image", "props": { "y": 44, "x": 708, "var": "proInfo", "skin": "ui_shop/img-tanhao.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 23, "x": 72, "skin": "ui_shop/icon-kapai.png" } }, { "type": "Text", "props": { "y": 33, "x": 113, "width": 62, "var": "ticketNum", "text": "x16", "strokeColor": "#497d98", "stroke": 3, "height": 27, "fontSize": 24, "font": "SimHei", "color": "#a7d6ec", "bold": true, "align": "left" } }, { "type": "Text", "props": { "y": 26, "x": 354, "width": 66, "text": "抽奖", "strokeColor": "#497d98", "stroke": 3, "height": 35, "fontSize": 30, "font": "SimHei", "color": "#a7d6ec", "bold": true, "align": "left" } }, { "type": "Box", "props": { "y": 83, "x": 40, "width": 338, "height": 375 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 338, "skin": "ui_shop/img-jianbian-choujiang.png", "height": 333 } }, { "type": "Image", "props": { "y": 333, "x": 0, "width": 338, "skin": "ui_shop/img-jiagetiao.png", "sizeGrid": "0,45,0,0", "height": 42 } }, { "type": "Image", "props": { "y": 176, "x": 171, "var": "oneBtn", "skin": "ui_icon/icon-danchou.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 338, "x": 31, "width": 37, "skin": "ui_icon/icon_prop_013.png", "height": 33 } }, { "type": "Image", "props": { "y": 334, "x": 206, "skin": "ui_shop/icon-kapai.png" } }, { "type": "Text", "props": { "y": 339, "x": 157, "width": 31, "text": "或", "height": 35, "fontSize": 24, "font": "Microsoft YaHei", "color": "#654a77", "bold": true, "align": "left" } }, { "type": "Text", "props": { "y": 339, "x": 79, "width": 74, "var": "onePrict", "text": "750", "strokeColor": "#4c446d", "stroke": 4, "height": 31, "fontSize": 30, "font": "Helvetica", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Text", "props": { "y": 339, "x": 245, "width": 43, "var": "oneNum", "text": "x1", "strokeColor": "#4c446d", "stroke": 4, "height": 36, "fontSize": 30, "font": "Helvetica", "color": "#ffffff", "bold": true, "align": "left" } }] }, { "type": "Box", "props": { "y": 83, "x": 393, "width": 338, "height": 375 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 338, "skin": "ui_shop/img-jianbian-choujiang.png", "height": 333 } }, { "type": "Image", "props": { "y": 333, "x": 0, "width": 338, "skin": "ui_shop/img-jiagetiao.png", "sizeGrid": "0,45,0,0", "height": 42 } }, { "type": "Image", "props": { "y": 176, "x": 171, "var": "tenBtn", "skin": "ui_icon/icon-shilianchou.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 338, "x": 113, "width": 37, "var": "img_1", "skin": "ui_icon/icon_prop_013.png", "height": 33 } }, { "type": "Text", "props": { "y": 339, "x": 154, "width": 74, "var": "tenPrict", "text": "750", "strokeColor": "#4c446d", "stroke": 4, "height": 31, "fontSize": 30, "font": "Helvetica", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Image", "props": { "y": 330, "x": 6, "width": 26, "var": "new", "skin": "ui_hero/img-biaoqian-zhekou-bg.png", "height": 30 }, "child": [{ "type": "Label", "props": { "y": 0, "x": -6, "width": 42, "var": "discountNum", "text": "半价", "strokeColor": "#d10805", "stroke": 3, "rotation": 10, "height": 19, "fontSize": 18, "font": "SimHei", "color": "#ffffff", "align": "center" } }] }, { "type": "Image", "props": { "y": 338, "x": 61, "width": 221, "var": "discount", "height": 34 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 33, "skin": "ui_icon/icon_prop_013.png", "height": 29 } }, { "type": "Text", "props": { "y": 0, "x": 36, "width": 74, "var": "discount_1", "text": "750", "strokeColor": "#4c446d", "stroke": 4, "height": 31, "fontSize": 30, "font": "Helvetica", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 5, "x": -8, "width": 125, "rotation": 10, "height": 4, "bgColor": "#ff0400" } }, { "type": "Image", "props": { "y": 1, "x": 119, "width": 33, "skin": "ui_icon/icon_prop_013.png", "height": 29 } }, { "type": "Text", "props": { "y": 1, "x": 155, "width": 74, "var": "discount_2", "text": "750", "strokeColor": "#4c446d", "stroke": 4, "height": 31, "fontSize": 30, "font": "Helvetica", "color": "#ffffff", "bold": true, "align": "center" } }] }, { "type": "Label", "props": { "y": 307, "x": 61, "width": 231, "var": "residueNum", "text": "今日剩余优惠次数：0/1", "height": 18, "fontSize": 16, "font": "SimHei", "color": "#84ff00", "bold": true } }] }] };
            return LotteryShopViewUI;
        }(View));
        shop.LotteryShopViewUI = LotteryShopViewUI;
    })(shop = ui.shop || (ui.shop = {}));
})(ui || (ui = {}));
(function (ui) {
    var shop;
    (function (shop) {
        var PromotionShopViewUI = /** @class */ (function (_super) {
            __extends(PromotionShopViewUI, _super);
            function PromotionShopViewUI() {
                return _super.call(this) || this;
            }
            PromotionShopViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.shop.PromotionShopViewUI.uiView);
            };
            PromotionShopViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 300 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 750, "skin": "ui_main/btn-zhu-zhuangbei.png", "sizeGrid": "10,10,10,10", "height": 850 } }, { "type": "Text", "props": { "y": 20, "x": 350, "width": 63, "text": "促销", "height": 34, "fontSize": 30, "font": "SimHei", "color": "#ffffff", "bold": true } }] };
            return PromotionShopViewUI;
        }(View));
        shop.PromotionShopViewUI = PromotionShopViewUI;
    })(shop = ui.shop || (ui.shop = {}));
})(ui || (ui = {}));
(function (ui) {
    var shop;
    (function (shop) {
        var ProShopViewUI = /** @class */ (function (_super) {
            __extends(ProShopViewUI, _super);
            function ProShopViewUI() {
                return _super.call(this) || this;
            }
            ProShopViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.shop.ProShopViewUI.uiView);
            };
            ProShopViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 2000 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 14, "skin": "ui_shop/img-tuo-baoxiang.png" } }, { "type": "Text", "props": { "y": 16, "x": 344, "width": 66, "text": "道具", "strokeColor": "#497d98", "stroke": 3, "height": 35, "fontSize": 30, "font": "SimHei", "color": "#a7d6ec", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 34, "x": 698, "visible": false, "var": "proInfo", "skin": "ui_shop/img-tanhao.png", "name": "proInfo", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "List", "props": { "y": 65, "x": 30, "width": 700, "var": "proList", "spaceY": 20, "spaceX": 16, "repeatX": 3, "name": "proList", "height": 1904 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 220, "var": "box", "renderType": "render", "height": 252 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_shop/img-kuang-baoxiang.png" } }, { "type": "Image", "props": { "y": 210, "x": 0, "width": 220, "skin": "ui_shop/img-jiagetiao.png", "sizeGrid": "0,48,0,0", "height": 42 } }, { "type": "Image", "props": { "y": 122, "x": 112, "skin": "ui_hero/img-zipinzhikuang.png", "sizeGrid": "10,10,10,10", "name": "proBj", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 122, "x": 112, "width": 140, "var": "proIcon", "skin": "ui_icon/icon_tou_lzx.png", "name": "proIcon", "height": 140, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Button", "props": { "y": -59, "x": -40, "width": 220, "name": "buyBtn", "height": 252 } }] }, { "type": "Text", "props": { "y": 217, "x": 105, "width": 55, "var": "proPrice", "text": "160", "strokeColor": "#4c446d", "stroke": 4, "name": "proPrice", "height": 28, "fontSize": 30, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 211, "x": 41, "width": 40, "var": "proPriceType", "skin": "ui_icon/icon_prop_013.png", "name": "proPriceType", "height": 40 } }, { "type": "Text", "props": { "y": 21, "x": 15, "width": 193, "var": "proName", "text": "道具", "strokeColor": "#2f2b1f", "stroke": 3, "name": "proName", "height": 28, "fontSize": 24, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Text", "props": { "y": 168, "x": 68, "width": 107, "var": "proNum", "text": "999", "strokeColor": "#23211e", "stroke": 3, "name": "proNum", "height": 21, "fontSize": 24, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "right" } }] }] }] };
            return ProShopViewUI;
        }(View));
        shop.ProShopViewUI = ProShopViewUI;
    })(shop = ui.shop || (ui.shop = {}));
})(ui || (ui = {}));
(function (ui) {
    var shop;
    (function (shop) {
        var TreasureBoxShopViewUI = /** @class */ (function (_super) {
            __extends(TreasureBoxShopViewUI, _super);
            function TreasureBoxShopViewUI() {
                return _super.call(this) || this;
            }
            TreasureBoxShopViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.shop.TreasureBoxShopViewUI.uiView);
            };
            TreasureBoxShopViewUI.uiView = { "type": "View", "props": { "width": 750, "renderType": "render", "height": 350 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 14, "skin": "ui_shop/img-tuo-baoxiang.png" } }, { "type": "Text", "props": { "y": 16, "x": 344, "width": 66, "text": "宝箱", "strokeColor": "#497d98", "stroke": 3, "height": 35, "fontSize": 30, "font": "SimHei", "color": "#a7d6ec", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 17, "x": 683, "visible": false, "var": "proInfo", "skin": "ui_shop/img-tanhao.png" } }, { "type": "List", "props": { "y": 65, "x": 30, "width": 700, "var": "treList", "spaceY": 20, "spaceX": 16, "repeatY": 1, "repeatX": 3, "name": "treList", "height": 266 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 220, "renderType": "render", "height": 252 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ui_shop/img-kuang-baoxiang.png" } }, { "type": "Image", "props": { "y": 210, "x": 0, "width": 220, "skin": "ui_shop/img-jiagetiao.png", "sizeGrid": "0,48,0,0", "height": 42 } }, { "type": "Image", "props": { "y": 129, "x": 109, "width": 168, "var": "resIcon", "skin": "ui_icon/icon-lihe1.png", "name": "resIcon", "height": 162, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Button", "props": { "y": -48, "x": -25, "width": 220, "name": "buyBtn", "height": 252 } }] }, { "type": "Image", "props": { "y": 211, "x": 41, "width": 40, "var": "priceType", "skin": "ui_shop/icon-jinbi.png", "name": "priceType", "height": 40 } }, { "type": "Label", "props": { "y": 183, "x": 14, "width": 195, "text": "2:22:22", "strokeColor": "#4d4670", "stroke": 2, "name": "activityTime", "height": 27, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }, { "type": "Text", "props": { "y": 217, "x": 105, "width": 55, "var": "resPrice", "text": "160", "strokeColor": "#4c446d", "stroke": 4, "name": "resPrice", "height": 28, "fontSize": 30, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 20, "x": 13, "width": 194, "name": "resName", "innerHTML": "htmlText", "height": 26 } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "skin": "ui_shop/img-zhekou-bg-shangcheng.png", "name": "discountBg" }, "child": [{ "type": "Label", "props": { "y": 22, "x": 16, "width": 86, "valign": "middle", "text": "3折", "rotation": -45, "name": "discount", "height": 30, "fontSize": 22, "font": "Microsoft YaHei", "color": "#ffd28d", "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }] }] }] }] };
            return TreasureBoxShopViewUI;
        }(View));
        shop.TreasureBoxShopViewUI = TreasureBoxShopViewUI;
    })(shop = ui.shop || (ui.shop = {}));
})(ui || (ui = {}));
(function (ui) {
    var signIn;
    (function (signIn) {
        var SevenSigninViewUI = /** @class */ (function (_super) {
            __extends(SevenSigninViewUI, _super);
            function SevenSigninViewUI() {
                return _super.call(this) || this;
            }
            SevenSigninViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.signIn.SevenSigninViewUI.uiView);
            };
            SevenSigninViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "y": 229, "width": 626, "skin": "ui_sign/img-bg-qiriqiandao.png", "sizeGrid": "10,10,10,10", "height": 742, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 302, "skin": "ui_camp/img-huawen1.png", "alpha": 0.6 } }, { "type": "Image", "props": { "y": -44, "width": 626, "skin": "ui_sign/img-taitou-qinriqiandao.png", "sizeGrid": "0,0,0,153", "centerX": 1 }, "child": [{ "type": "Label", "props": { "y": 10, "x": 0, "width": 158, "var": "type", "text": "标题读表", "height": 27, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "bold": false, "align": "center" } }, { "type": "Image", "props": { "y": 41, "x": 0, "width": 626, "skin": "ui_sign/img-zhuangshi-taitou-qiriqiandao.png", "height": 3 } }, { "type": "Image", "props": { "y": 1, "x": 557, "var": "close", "skin": "ui_main/btn-guanbi.png", "alpha": 0.6 } }, { "type": "Image", "props": { "y": -7, "x": 154, "skin": "ui_sign/img-taitou-zhuangshi-qinriqiandao.png" } }, { "type": "Image", "props": { "y": -7, "x": 244, "skin": "ui_sign/img-taitou-zhuangshi-qinriqiandao.png" } }, { "type": "Image", "props": { "y": -7, "x": 334, "skin": "ui_sign/img-taitou-zhuangshi-qinriqiandao.png" } }, { "type": "Image", "props": { "y": -7, "x": 424, "skin": "ui_sign/img-taitou-zhuangshi-qinriqiandao.png" } }, { "type": "Image", "props": { "y": -7, "x": 514, "skin": "ui_sign/img-taitou-zhuangshi-qinriqiandao.png" } }] }, { "type": "List", "props": { "y": 47, "x": 22, "width": 578, "var": "sevenSignInList", "spaceY": 20, "spaceX": 36, "repeatY": 3, "repeatX": 3, "height": 452 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 170, "visible": true, "renderType": "render", "height": 209 }, "child": [{ "type": "Image", "props": { "skin": "ui_sign/btn-wupin-bg-qinriqiandao.png", "name": "bj" } }, { "type": "Image", "props": { "y": 111, "x": 82, "width": 100, "skin": "ui_hero/img-lanpinzhikuang.png", "name": "itemBg", "height": 100, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 111, "x": 82, "width": 97, "skin": "ui_icon/icon-lihe3.png", "name": "itemIcon", "height": 98, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 17, "x": 10, "width": 149, "visible": true, "valign": "middle", "text": "第1天", "name": "dayNum", "height": 25, "fontSize": 22, "font": "SimHei", "color": "#ff7a6d", "align": "center" } }, { "type": "Label", "props": { "y": 170, "x": 9, "width": 148, "valign": "middle", "text": "物品", "name": "name", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ffffff", "bold": false, "align": "center" } }, { "type": "Image", "props": { "y": 130, "x": 106, "visible": false, "skin": "ui_sign/img-yiling-duigou.png", "name": "already" } }, { "type": "Button", "props": { "y": 8, "x": 8, "width": 157, "name": "clickBtn", "height": 195 } }, { "type": "Label", "props": { "y": 138, "x": 34, "width": 97, "height": 22, "bgColor": "#494054", "alpha": 0.8 } }, { "type": "Label", "props": { "y": 141, "x": 33, "width": 96, "text": "x11", "name": "num", "height": 15, "fontSize": 18, "font": "SimHei", "color": "#d7e0ea", "bold": true, "align": "right" } }] }] }, { "type": "Image", "props": { "y": 489, "x": 24, "var": "sevenday", "skin": "ui_sign/btn-wupin-bg-7tian-qinriqiandao.png" }, "child": [{ "type": "Label", "props": { "y": 15, "x": 219, "width": 149, "visible": true, "valign": "middle", "text": "第7天", "height": 25, "fontSize": 26, "font": "SimHei", "color": "#dd5c6c", "alpha": 0.5, "align": "center" } }, { "type": "Label", "props": { "y": 9, "x": 219, "width": 149, "visible": true, "valign": "middle", "text": "第7天", "height": 25, "fontSize": 26, "font": "SimHei", "color": "#fbd5cc", "align": "center" } }, { "type": "Image", "props": { "y": 56, "x": 222, "var": "sevenBg", "skin": "ui_hero/img-chengpinzhikuang.png" } }, { "type": "Image", "props": { "y": 57, "x": 223, "var": "sevenIcon", "skin": "ui_icon/icon_tou_frk.png" } }, { "type": "Button", "props": { "y": 59, "x": 225, "width": 138, "var": "clickSevenBtn", "height": 138 } }, { "type": "Label", "props": { "y": 210, "x": 216, "width": 149, "visible": true, "var": "sevenName", "valign": "middle", "text": "第7天", "height": 25, "fontSize": 22, "font": "SimHei", "color": "#ef97a2", "align": "center" } }, { "type": "Label", "props": { "y": 175, "x": 225, "width": 139, "height": 22, "bgColor": "#494054", "alpha": 0.8 }, "child": [{ "type": "Label", "props": { "y": 3, "x": 106, "width": 27, "var": "sevenNum", "text": "x11", "height": 15, "fontSize": 18, "font": "SimHei", "color": "#d7e0ea", "bold": true, "align": "right" } }] }] }, { "type": "Image", "props": { "y": 655, "x": 1, "skin": "ui_camp/img-huawen1.png", "alpha": 0.6 } }, { "type": "Image", "props": { "y": 646, "x": 534, "width": 89, "skin": "ui_camp/img-huawen2.png", "height": 94, "alpha": 0.2 } }, { "type": "Image", "props": { "y": 94, "x": 90, "width": 89, "skin": "ui_camp/img-huawen2.png", "rotation": 180, "height": 94, "alpha": 0.2 } }] }] }] };
            return SevenSigninViewUI;
        }(View));
        signIn.SevenSigninViewUI = SevenSigninViewUI;
    })(signIn = ui.signIn || (ui.signIn = {}));
})(ui || (ui = {}));
(function (ui) {
    var signIn;
    (function (signIn) {
        var SignInViewUI = /** @class */ (function (_super) {
            __extends(SignInViewUI, _super);
            function SignInViewUI() {
                return _super.call(this) || this;
            }
            SignInViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.signIn.SignInViewUI.uiView);
            };
            SignInViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 588, "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "10,10,10,10", "height": 731, "centerY": 0.5, "centerX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 43, "x": 10, "width": 568, "height": 562, "bgColor": "#000000", "alpha": 0.4 } }, { "type": "Label", "props": { "y": -39, "x": 0, "width": 588, "height": 50, "bgColor": "#1b2838" } }, { "type": "Label", "props": { "y": -26, "x": 20, "width": 6, "height": 25, "bgColor": "#4a408a" } }, { "type": "Image", "props": { "y": 56, "x": 33, "width": 522, "skin": "ui_sign/img-hongtuo-qiandao.png", "sizeGrid": "0,2,0,2", "height": 76 } }, { "type": "Label", "props": { "y": -31, "x": 40, "width": 268, "var": "type", "text": "标题读表", "height": 27, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "bold": false, "align": "left" } }, { "type": "Label", "props": { "y": 94, "x": 109, "wordWrap": true, "width": 418, "var": "explain", "text": "说明读表", "height": 31, "fontSize": 18, "font": "Microsoft YaHei", "color": "#b7aabc", "bold": false, "align": "left" } }, { "type": "Image", "props": { "y": 96, "x": 74, "skin": "ui_sign/img-tanhao-tongyong.png" } }, { "type": "List", "props": { "y": 144, "x": 35, "width": 522, "var": "signInList", "spaceY": 20, "spaceX": 22, "repeatY": 3, "repeatX": 5, "height": 417 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 86, "visible": true, "renderType": "render", "height": 130 }, "child": [{ "type": "Image", "props": { "skin": "ui_sign/btn-yeqian-weiling.png", "name": "bj" } }, { "type": "Image", "props": { "y": 71, "x": 44, "width": 60, "skin": "ui_icon/icon-lihe3.png", "name": "itemIcon", "height": 60, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 107, "x": 4, "width": 80, "height": 22, "bgColor": "494054", "alpha": 0.8 } }, { "type": "Label", "props": { "y": 2, "x": 8, "width": 46, "visible": true, "valign": "middle", "text": "1", "name": "dayNum", "height": 25, "fontSize": 28, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "Label", "props": { "y": 109, "x": 6, "width": 75, "valign": "middle", "text": "物品", "name": "name", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#ffffff", "bold": false, "align": "center" } }, { "type": "Label", "props": { "y": 3, "x": 1, "width": 86, "visible": false, "name": "hui", "height": 127, "bgColor": "#000000", "alpha": 0.4 } }, { "type": "Image", "props": { "y": 62, "x": 32, "visible": false, "skin": "ui_sign/img-yiling-duigou.png", "name": "already" } }, { "type": "Image", "props": { "y": -6, "x": -6, "visible": false, "skin": "ui_sign/img-guangquan.png", "name": "opt" } }, { "type": "Button", "props": { "y": 0, "x": 0, "width": 86, "name": "clickBtn", "height": 130 } }, { "type": "Image", "props": { "y": 0, "x": 54, "skin": "ui_sign/icon-shaungbei-qiandao.png", "scaleY": 0.8, "scaleX": 0.8, "name": "vip" } }] }] }, { "type": "Image", "props": { "y": 636, "x": 228, "width": 150, "var": "okBtn", "skin": "ui_common/btn-huodong-p.png", "sizeGrid": "10,10,10,10", "height": 63 }, "child": [{ "type": "Label", "props": { "y": 10, "x": 0, "width": 150, "var": "txt", "valign": "middle", "text": "领取", "strokeColor": "#a66336", "stroke": 2, "height": 45, "fontSize": 26, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }] }, { "type": "Image", "props": { "y": -38, "var": "close", "skin": "ui_main/btn-guanbi.png", "right": 12, "alpha": 0.6 } }] }] };
            return SignInViewUI;
        }(View));
        signIn.SignInViewUI = SignInViewUI;
    })(signIn = ui.signIn || (ui.signIn = {}));
})(ui || (ui = {}));
(function (ui) {
    var tips;
    (function (tips) {
        var AsideViewUI = /** @class */ (function (_super) {
            __extends(AsideViewUI, _super);
            function AsideViewUI() {
                return _super.call(this) || this;
            }
            AsideViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.tips.AsideViewUI.uiView);
            };
            AsideViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "var": "black", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0f0f0f" } }, { "type": "Image", "props": { "width": 670, "height": 980, "centerY": 0, "centerX": 0 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 0, "x": 0, "width": 670, "var": "tx_black", "height": 980 } }] }] }, { "type": "Image", "props": { "var": "hero", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000", "alpha": 0.7 } }, { "type": "Box", "props": { "y": 0, "x": 0, "var": "avart_bg" } }, { "type": "Image", "props": { "y": 453, "width": 720, "var": "text_bg", "height": 194, "centerX": 0 }, "child": [{ "type": "Image", "props": { "skin": "ui_hero/img-tongyong-taitou-1.png" } }, { "type": "Image", "props": { "y": 26, "x": 0, "width": 720, "skin": "ui_guid/img-bg-yindao.png", "sizeGrid": "0,2,0,2", "height": 164 } }, { "type": "Label", "props": { "x": 0, "width": 720, "top": 22, "height": 4, "bgColor": "#372840" } }, { "type": "Label", "props": { "y": 22, "x": 0, "width": 720, "height": 4, "bottom": 0, "bgColor": "#372840" } }, { "type": "Image", "props": { "y": 26, "width": 720, "right": 0, "height": 164 }, "child": [{ "type": "Image", "props": { "y": -726, "x": 17, "width": 685, "skin": "ui_consumer/img-jiemian-bg-zhuagnshi-huodong.png", "height": 893 } }, { "type": "Sprite", "props": { "y": 0, "x": 0, "renderType": "mask" }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 720, "lineWidth": 0, "height": 164, "fillColor": "#010101" } }] }] }, { "type": "Text", "props": { "y": 2, "x": 12, "width": 217, "var": "tx_name", "height": 23, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "align": "center" } }, { "type": "Image", "props": { "y": 164, "x": 681, "var": "vector", "skin": "ui_common/img-xiaju-oangbai.png" } }, { "type": "HTMLDivElement", "props": { "y": 35, "x": 20, "width": 684, "var": "tx_hero", "height": 130 } }] }] }] };
            return AsideViewUI;
        }(View));
        tips.AsideViewUI = AsideViewUI;
    })(tips = ui.tips || (ui.tips = {}));
})(ui || (ui = {}));
(function (ui) {
    var tips;
    (function (tips) {
        var MessageBoxViewUI = /** @class */ (function (_super) {
            __extends(MessageBoxViewUI, _super);
            function MessageBoxViewUI() {
                return _super.call(this) || this;
            }
            MessageBoxViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.tips.MessageBoxViewUI.uiView);
            };
            MessageBoxViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "var": "backGround", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": -900, "x": -1125, "width": 3000, "var": "close1", "height": 3000, "bgColor": "#000000", "alpha": 0.6 } }, { "type": "Label", "props": { "y": 438, "x": 119, "width": 513, "height": 50, "bgColor": "#1b2838" }, "child": [{ "type": "Label", "props": { "x": 26, "width": 6, "height": 25, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Label", "props": { "x": 49, "var": "title", "text": "温馨提示", "fontSize": 26, "font": "SimHei", "color": "#cce1f2", "centerY": 0, "align": "left" } }] }, { "type": "Image", "props": { "y": 486, "x": 120, "width": 512, "var": "bg", "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "40,11,9,14", "height": 285 } }, { "type": "Button", "props": { "y": 705, "x": 256, "width": 190, "var": "CancelBtn", "stateNum": 1, "skin": "ui_common/btn-tongyong.png", "sizeGrid": "10,10,10,10", "labelStrokeColor": "#872d09", "labelStroke": 3, "labelSize": 28, "labelFont": "SimHei", "labelColors": "#ffffff,#ffffff,#ffffff,#ffffff", "labelBold": true, "labelAlign": "center", "label": "取 消", "height": 65, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 704, "x": 494, "width": 190, "var": "OKBtn", "stateNum": 1, "skin": "ui_common/btn-tongyong.png", "sizeGrid": "10,10,10,10", "labelStrokeColor": "#872d09", "labelStroke": 3, "labelSize": 28, "labelFont": "SimHei", "labelColors": "#ffffff,#ffffff,#ffffff,#ffffff", "labelBold": true, "labelAlign": "center", "label": "确 定", "height": 65, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 457, "x": 589, "width": 44, "var": "closeBtn", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "pivotY": 21, "pivotX": 26, "height": 42, "alpha": 0.8 } }, { "type": "HTMLDivElement", "props": { "y": 517, "x": 167, "width": 418, "var": "msg", "height": 120 } }, { "type": "Button", "props": { "y": 680, "x": 285, "width": 180, "var": "OKCenterBtn", "stateNum": 1, "labelStrokeColor": "#095a28", "labelStroke": 3, "labelSize": 26, "labelFont": "SimHei", "labelColors": "#fefeff", "label": "确定", "height": 50 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#4f7c23" } }] }, { "type": "Label", "props": { "y": 660, "x": 122, "width": 510, "height": 2, "color": "500", "bgColor": "#7c7a88" } }] }] };
            return MessageBoxViewUI;
        }(View));
        tips.MessageBoxViewUI = MessageBoxViewUI;
    })(tips = ui.tips || (ui.tips = {}));
})(ui || (ui = {}));
(function (ui) {
    var tips;
    (function (tips) {
        var ShopInfoViewUI = /** @class */ (function (_super) {
            __extends(ShopInfoViewUI, _super);
            function ShopInfoViewUI() {
                return _super.call(this) || this;
            }
            ShopInfoViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.tips.ShopInfoViewUI.uiView);
            };
            ShopInfoViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "text": "label", "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000", "alpha": 0.4 } }, { "type": "Label", "props": { "y": 205, "x": 74, "width": 613, "height": 50, "bgColor": "#1b2838" }, "child": [{ "type": "Label", "props": { "x": 26, "width": 6, "height": 25, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Text", "props": { "y": 13, "x": 47, "width": 514, "var": "infoName", "text": "输入Tip名字", "strokeColor": "#50560c", "height": 28, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 0, "x": 548, "var": "close", "skin": "ui_common/btn-X-tongyong.png", "alpha": 0.8 } }] }, { "type": "Image", "props": { "y": 255, "x": 74, "width": 613, "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "25,10,10,10", "height": 692 }, "child": [{ "type": "Image", "props": { "y": 69, "x": 8, "width": 597, "skin": "ui_shop/img-kuang-baoxiang.png", "sizeGrid": "29,30,20,29", "height": 600 } }, { "type": "Label", "props": { "y": 27, "x": 27, "width": 453, "var": "introduce", "valign": "middle", "text": "抽奖有概率获得奖励如下：", "strokeColor": "#7f5e5d", "stroke": 1, "height": 30, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "align": "left" } }, { "type": "List", "props": { "y": 81, "x": 20, "width": 573, "var": "itemList", "spaceY": 18, "spaceX": 18, "repeatX": 5, "height": 579 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 100, "renderType": "render", "height": 127 }, "child": [{ "type": "Image", "props": { "y": 52, "x": 52, "width": 84, "skin": "ui_hero/img-lanpinzhikuang.png", "name": "bjIcon", "height": 84, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 52, "x": 52, "width": 84, "skin": "ui_icon/icon_prop_004.png", "name": "icon", "height": 84, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 108, "x": 52, "width": 84, "valign": "middle", "text": "name", "strokeColor": "#000000", "stroke": 2, "name": "name", "height": 22, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "bold": false, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }] }] }] }] };
            return ShopInfoViewUI;
        }(View));
        tips.ShopInfoViewUI = ShopInfoViewUI;
    })(tips = ui.tips || (ui.tips = {}));
})(ui || (ui = {}));
(function (ui) {
    var tips;
    (function (tips) {
        var ShowGoodsTipsViewUI = /** @class */ (function (_super) {
            __extends(ShowGoodsTipsViewUI, _super);
            function ShowGoodsTipsViewUI() {
                return _super.call(this) || this;
            }
            ShowGoodsTipsViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.tips.ShowGoodsTipsViewUI.uiView);
            };
            ShowGoodsTipsViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Label", "props": { "y": 1100, "x": 376, "width": 743, "var": "closeTime", "height": 28, "fontSize": 30, "font": "SimHei", "color": "#b2b2b2", "centerX": 1, "bottom": 86, "bold": true, "anchorY": 0.5, "anchorX": 0.5, "alpha": 0.6, "align": "center" } }, { "type": "Image", "props": { "width": 200, "visible": false, "var": "Item_1", "height": 290, "centerY": -16, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -30, "name": "effect" } }, { "type": "Image", "props": { "y": 11, "x": 24, "var": "bj_1", "skin": "ui_hero/img-chengka.png" } }, { "type": "Label", "props": { "y": 214, "x": 0, "width": 200, "var": "ItemTpye_1", "text": "等级  15", "height": 25, "fontSize": 22, "font": "SimHei", "color": "#fef6b0", "align": "center" } }, { "type": "Label", "props": { "y": 243, "x": 0, "width": 200, "var": "ItemName_1", "text": "神秘宝珠", "height": 35, "fontSize": 30, "font": "SimHei", "color": "#fff073", "align": "center" } }, { "type": "Image", "props": { "y": 86, "x": 100, "var": "icon_1", "skin": "ui_icon/icon_tou_cg.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 160, "x": 92, "width": 70, "var": "hitValue_1", "text": "321.611", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Label", "props": { "y": 180, "x": 92, "width": 70, "var": "hpValue_1", "text": "321.611", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Label", "props": { "y": 160, "x": 40, "width": 39, "text": "伤害", "name": "hitname", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fef6b0", "bold": false } }, { "type": "Label", "props": { "y": 180, "x": 40, "width": 39, "text": "生命", "name": "hpname", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fef6b0", "bold": false } }, { "type": "Image", "props": { "y": 19, "x": 142, "var": "tb_1", "skin": "ui_hero/icon-renwu-leixing-bg.png" } }, { "type": "Image", "props": { "y": 24, "x": 150, "var": "heroType_1", "skin": "ui_hero/icon-renwu-leixing-gongji.png" } }] }, { "type": "Image", "props": { "width": 200, "var": "info_1", "height": 290, "centerY": -16, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "width": 200, "visible": false, "var": "Item_2", "height": 290, "centerY": -16, "centerX": -223, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -30, "name": "effect" } }, { "type": "Image", "props": { "y": 11, "x": 24, "var": "bj_2", "skin": "ui_hero/img-chengka.png" } }, { "type": "Label", "props": { "y": 214, "x": 0, "width": 200, "var": "ItemTpye_2", "text": "等级  15", "height": 25, "fontSize": 22, "font": "SimHei", "color": "#fef6b0", "align": "center" } }, { "type": "Label", "props": { "y": 243, "x": 0, "width": 200, "var": "ItemName_2", "text": "神秘宝珠", "height": 35, "fontSize": 30, "font": "SimHei", "color": "#fff073", "align": "center" } }, { "type": "Image", "props": { "y": 86, "x": 100, "var": "icon_2", "skin": "ui_icon/icon_tou_cg.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 160, "x": 40, "width": 39, "text": "伤害", "name": "hitname", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fef6b0", "bold": false } }, { "type": "Label", "props": { "y": 180, "x": 40, "width": 39, "text": "生命", "name": "hpname", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fef6b0", "bold": false } }, { "type": "Label", "props": { "y": 160, "x": 92, "width": 70, "var": "hitValue_2", "text": "321.611", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Label", "props": { "y": 180, "x": 92, "width": 70, "var": "hpValue_2", "text": "321.611", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Image", "props": { "y": 19, "x": 142, "var": "tb_2", "skin": "ui_hero/icon-renwu-leixing-bg.png" } }, { "type": "Image", "props": { "y": 24, "x": 150, "var": "heroType_2", "skin": "ui_hero/icon-renwu-leixing-gongji.png" } }] }, { "type": "Image", "props": { "width": 200, "var": "info_2", "height": 290, "centerY": -16, "centerX": -223, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "width": 200, "visible": false, "var": "Item_3", "height": 290, "centerY": -16, "centerX": 223, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -30, "name": "effect" } }, { "type": "Image", "props": { "y": 11, "x": 24, "var": "bj_3", "skin": "ui_hero/img-chengka.png" } }, { "type": "Label", "props": { "y": 214, "x": 0, "width": 200, "var": "ItemTpye_3", "text": "等级  15", "height": 25, "fontSize": 22, "font": "SimHei", "color": "#fef6b0", "align": "center" } }, { "type": "Label", "props": { "y": 243, "x": 0, "width": 200, "var": "ItemName_3", "text": "神秘宝珠", "height": 35, "fontSize": 30, "font": "SimHei", "color": "#fff073", "align": "center" } }, { "type": "Image", "props": { "y": 86, "x": 100, "var": "icon_3", "skin": "ui_icon/icon_tou_cg.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 160, "x": 40, "width": 39, "text": "伤害", "name": "hitname", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fef6b0", "bold": false } }, { "type": "Label", "props": { "y": 180, "x": 40, "width": 39, "text": "生命", "name": "hpname", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fef6b0", "bold": false } }, { "type": "Label", "props": { "y": 160, "x": 92, "width": 70, "var": "hitValue_3", "text": "321.611", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Label", "props": { "y": 180, "x": 92, "width": 70, "var": "hpValue_3", "text": "321.611", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Image", "props": { "y": 19, "x": 142, "var": "tb_3", "skin": "ui_hero/icon-renwu-leixing-bg.png" } }, { "type": "Image", "props": { "y": 24, "x": 150, "var": "heroType_3", "skin": "ui_hero/icon-renwu-leixing-gongji.png" } }] }, { "type": "Image", "props": { "width": 200, "var": "info_3", "height": 290, "centerY": -16, "centerX": 223, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "width": 200, "visible": false, "var": "Item_4", "height": 290, "centerY": 305, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -30, "name": "effect" } }, { "type": "Image", "props": { "y": 11, "x": 24, "var": "bj_4", "skin": "ui_hero/img-chengka.png" } }, { "type": "Label", "props": { "y": 214, "x": 0, "width": 200, "var": "ItemTpye_4", "text": "等级  15", "height": 25, "fontSize": 22, "font": "SimHei", "color": "#fef6b0", "align": "center" } }, { "type": "Label", "props": { "y": 243, "x": 0, "width": 200, "var": "ItemName_4", "text": "神秘宝珠", "height": 35, "fontSize": 30, "font": "SimHei", "color": "#fff073", "align": "center" } }, { "type": "Image", "props": { "y": 86, "x": 100, "var": "icon_4", "skin": "ui_icon/icon_tou_cg.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 160, "x": 40, "width": 39, "text": "伤害", "name": "hitname", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fef6b0", "bold": false } }, { "type": "Label", "props": { "y": 180, "x": 40, "width": 39, "text": "生命", "name": "hpname", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fef6b0", "bold": false } }, { "type": "Label", "props": { "y": 160, "x": 92, "width": 70, "var": "hitValue_4", "text": "321.611", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Label", "props": { "y": 180, "x": 92, "width": 70, "var": "hpValue_4", "text": "321.611", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Image", "props": { "y": 19, "x": 142, "var": "tb_4", "skin": "ui_hero/icon-renwu-leixing-bg.png" } }, { "type": "Image", "props": { "y": 24, "x": 150, "var": "heroType_4", "skin": "ui_hero/icon-renwu-leixing-gongji.png" } }] }, { "type": "Image", "props": { "width": 200, "var": "info_4", "height": 290, "centerY": 305, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "width": 200, "visible": false, "var": "Item_5", "height": 290, "centerY": -342, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -30, "name": "effect" } }, { "type": "Image", "props": { "y": 11, "x": 24, "var": "bj_5", "skin": "ui_hero/img-chengka.png" } }, { "type": "Label", "props": { "y": 214, "x": 0, "width": 200, "var": "ItemTpye_5", "text": "等级  15", "height": 25, "fontSize": 22, "font": "SimHei", "color": "#fef6b0", "align": "center" } }, { "type": "Label", "props": { "y": 243, "x": 0, "width": 200, "var": "ItemName_5", "text": "神秘宝珠", "height": 35, "fontSize": 30, "font": "SimHei", "color": "#fff073", "align": "center" } }, { "type": "Image", "props": { "y": 86, "x": 100, "var": "icon_5", "skin": "ui_icon/icon_tou_cg.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 160, "x": 40, "width": 39, "text": "伤害", "name": "hitname", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fef6b0", "bold": false } }, { "type": "Label", "props": { "y": 180, "x": 40, "width": 39, "text": "生命", "name": "hpname", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fef6b0", "bold": false } }, { "type": "Label", "props": { "y": 160, "x": 92, "width": 70, "var": "hitValue_5", "text": "321.611", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Label", "props": { "y": 180, "x": 92, "width": 70, "var": "hpValue_5", "text": "321.611", "height": 20, "fontSize": 18, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Image", "props": { "y": 19, "x": 142, "var": "tb_5", "skin": "ui_hero/icon-renwu-leixing-bg.png" } }, { "type": "Image", "props": { "y": 24, "x": 150, "var": "heroType_5", "skin": "ui_hero/icon-renwu-leixing-gongji.png" } }] }, { "type": "Image", "props": { "width": 200, "var": "info_5", "height": 290, "centerY": -342, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 0, "x": 3, "width": 750, "var": "close", "height": 1200 } }] };
            return ShowGoodsTipsViewUI;
        }(View));
        tips.ShowGoodsTipsViewUI = ShowGoodsTipsViewUI;
    })(tips = ui.tips || (ui.tips = {}));
})(ui || (ui = {}));
(function (ui) {
    var tips;
    (function (tips) {
        var SkillInfoViewUI = /** @class */ (function (_super) {
            __extends(SkillInfoViewUI, _super);
            function SkillInfoViewUI() {
                return _super.call(this) || this;
            }
            SkillInfoViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.tips.SkillInfoViewUI.uiView);
            };
            SkillInfoViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "width": 588, "height": 688, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 51, "x": 0, "width": 588, "height": 637, "bgColor": "#5e5f77" } }, { "type": "Label", "props": { "y": 183, "x": 10, "width": 568, "height": 495, "bgColor": "#2c2d45" } }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 588, "height": 51, "bgColor": "#000000", "alpha": 1 } }, { "type": "Image", "props": { "y": 594, "x": 498, "skin": "ui_camp/img-huawen2.png", "alpha": 0.2 } }, { "type": "Image", "props": { "y": 268, "x": 91, "skin": "ui_camp/img-huawen2.png", "skewY": 180, "skewX": 180, "alpha": 0.2 } }, { "type": "Image", "props": { "y": 50, "x": 589, "skin": "ui_camp/img-huawen1.png", "skewY": 180, "alpha": 0.5 } }, { "type": "Text", "props": { "y": 10, "x": 34, "width": 110, "var": "tipName", "text": "主动技能", "strokeColor": "#000000", "height": 35, "fontSize": 26, "font": "SimHei", "color": "#e4eafa", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 7, "x": 0, "width": 213, "skin": "ui_hero/img-zhuangshi-tangchuchuang.png", "height": 36 } }, { "type": "Button", "props": { "var": "close", "top": 7, "stateNum": 1, "skin": "ui_main/btn-guanbi.png", "name": "close", "left": 506 } }, { "type": "Rect", "props": { "y": 62, "x": 0, "width": 589, "lineWidth": 1, "height": 111, "fillColor": "#5d4565" } }, { "type": "Image", "props": { "y": 75, "x": 22, "width": 85, "var": "skillicon", "height": 85 } }, { "type": "Label", "props": { "y": 74, "x": 238, "var": "skillname", "text": "英雄名字", "fontSize": 24, "font": "SimHei", "color": "#fefeff", "align": "left" } }, { "type": "Label", "props": { "y": 75, "x": 131, "width": 31.171875, "text": "LV:", "height": 20, "fontSize": 22, "font": "SimHei", "color": "#c0eb9f", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 76, "x": 393, "width": 81, "text": "消耗法力:", "height": 18, "fontSize": 22, "font": "SimHei", "color": "#c0eb9f", "align": "left" } }, { "type": "Image", "props": { "y": 202, "x": 20, "width": 30, "skin": "ui_main/img-zhuangshi-xiaobingti-tongyong1.png", "height": 30 }, "child": [{ "type": "Label", "props": { "y": 3, "x": 36, "width": 174, "text": "当前等级效果", "height": 24, "fontSize": 26, "font": "SimHei", "color": "#e4eafa" } }] }, { "type": "Label", "props": { "y": 75, "x": 165, "width": 65, "var": "skilllvlabel", "text": "4", "height": 20, "fontSize": 22, "font": "SimHei", "color": "#ffff79", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 77, "x": 496, "width": 68, "var": "consume", "text": "4", "height": 20, "fontSize": 22, "font": "SimHei", "color": "#ffff79", "bold": true, "align": "left" } }, { "type": "HTMLDivElement", "props": { "y": 107, "x": 131, "width": 372, "var": "desc", "innerHTML": "fdsfdsfd", "height": 26 } }, { "type": "HTMLDivElement", "props": { "y": 245, "x": 56, "width": 529, "var": "desceffect", "innerHTML": "fdsfdsfd", "height": 26 } }, { "type": "Label", "props": { "y": 319, "x": 56, "text": "下一等级效果", "fontSize": 26, "font": "SimHei", "color": "#e4eafa", "align": "left" }, "child": [{ "type": "Image", "props": { "y": -2, "x": -34, "width": 30, "skin": "ui_main/img-zhuangshi-xiaobingti-tongyong1.png", "height": 30 } }] }, { "type": "HTMLDivElement", "props": { "y": 352, "x": 56, "width": 436, "var": "nextffect", "innerHTML": "fdsfdsfd", "height": 26 } }] }] };
            return SkillInfoViewUI;
        }(View));
        tips.SkillInfoViewUI = SkillInfoViewUI;
    })(tips = ui.tips || (ui.tips = {}));
})(ui || (ui = {}));
(function (ui) {
    var tips;
    (function (tips) {
        var TipsActionViewUI = /** @class */ (function (_super) {
            __extends(TipsActionViewUI, _super);
            function TipsActionViewUI() {
                return _super.call(this) || this;
            }
            TipsActionViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.tips.TipsActionViewUI.uiView);
            };
            TipsActionViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000", "alpha": 0.8 }, "child": [{ "type": "Image", "props": { "width": 586, "skin": "ui_action/ui-liebiaotiao-taitou-huodong.png", "mouseThrough": false, "height": 451, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "x": 12, "width": 6, "height": 25, "centerY": 0, "bgColor": "#c3b33a" } }, { "type": "Text", "props": { "y": 12, "x": 33, "width": 400, "var": "txt_name", "text": "输入Tip名字", "strokeColor": "#50560c", "height": 28, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "align": "left" } }, { "type": "Button", "props": { "y": 4, "var": "btn_close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "right": 21 } }, { "type": "Label", "props": { "y": 50, "x": 0, "width": 586, "var": "contentbg", "height": 400, "bgColor": "#c8c7c7", "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 83, "x": 80, "skin": "ui_common/img-huawen2.png", "scaleY": -1, "scaleX": -1, "alpha": 0.6 } }] }, { "type": "Label", "props": { "y": 71, "x": 42, "width": 231, "var": "txt_head", "text": "详情", "height": 22, "fontSize": 20, "font": "SimHei", "color": "#225a88", "align": "left" } }] }] }] }] };
            return TipsActionViewUI;
        }(View));
        tips.TipsActionViewUI = TipsActionViewUI;
    })(tips = ui.tips || (ui.tips = {}));
})(ui || (ui = {}));
(function (ui) {
    var tips;
    (function (tips) {
        var TipsTreasureViewUI = /** @class */ (function (_super) {
            __extends(TipsTreasureViewUI, _super);
            function TipsTreasureViewUI() {
                return _super.call(this) || this;
            }
            TipsTreasureViewUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.tips.TipsTreasureViewUI.uiView);
            };
            TipsTreasureViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#000000", "alpha": 0.4 } }, { "type": "Image", "props": { "width": 586, "var": "bj", "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "19,10,10,10", "height": 584, "centerY": 9, "centerX": 0.5, "anchorY": 0.5, "anchorX": 0.5, "alpha": 1 }, "child": [{ "type": "Image", "props": { "y": 31, "x": 9, "width": 568, "visible": false, "var": "bj_2", "skin": "ui_camp/img-lanzituo-tongyong.png", "sizeGrid": "46,1,1,1", "rotation": 180, "height": 311, "anchorY": 1, "anchorX": 1 }, "child": [{ "type": "Label", "props": { "y": 312, "width": 568, "height": 1, "bgColor": "#8185A7" } }] }, { "type": "Button", "props": { "y": 532, "x": 295, "var": "boxBuy", "stateNum": 1, "skin": "ui_hero/btn-huang.png", "sizeGrid": "20,20,20,20", "name": "boxBuy", "labelStrokeColor": "#e5fff3", "labelSize": 28, "labelFont": "SimHei", "labelColors": "#ffffff,#ffffff,#ffffff,#ffffff", "labelBold": true, "labelAlign": "center", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Text", "props": { "y": 6, "x": 74, "width": 46, "var": "Boxprice", "text": "750", "strokeColor": "#8b4d34", "stroke": 1, "name": "Boxprice", "height": 19, "fontSize": 18, "font": "Helvetica", "color": "#27af3d", "bold": true, "align": "left" } }, { "type": "Image", "props": { "y": 7, "x": 13, "width": 17, "var": "prictIcon", "skin": "ui_icon/icon_prop_013.png", "name": "prictIcon", "height": 16 } }, { "type": "Label", "props": { "y": 30, "x": 0, "width": 160, "valign": "middle", "text": "购买", "strokeColor": "#a65e5d", "stroke": 3, "height": 30, "fontSize": 22, "font": "SimHei", "color": "#ffffff", "bold": true, "align": "center" } }] }, { "type": "List", "props": { "y": 31, "x": 72, "width": 442, "var": "boxList", "spaceY": 10, "spaceX": 35, "repeatY": 2, "repeatX": 4, "name": "boxList", "height": 250 }, "child": [{ "type": "Box", "props": { "y": 4, "x": 0, "width": 84, "renderType": "render", "height": 124 }, "child": [{ "type": "Image", "props": { "y": 42, "x": 42, "width": 84, "skin": "ui_hero/img-lanpinzhikuang.png", "name": "bjIcon", "height": 84, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 42, "x": 42, "width": 84, "skin": "ui_icon/icon_prop_005.png", "name": "boxProImg", "height": 84, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "x": 1, "width": 82, "height": 20, "bottom": 41, "bgColor": "#000000", "alpha": 0.3 } }, { "type": "Text", "props": { "y": 64, "x": 46, "width": 34, "text": "99", "name": "boxProNum", "height": 18, "fontSize": 18, "font": "Helvetica", "color": "#C0C7DE", "bold": true, "align": "right" } }, { "type": "Text", "props": { "y": 88, "x": 0, "width": 84, "text": "name", "name": "boxProName", "height": 24, "fontSize": 20, "font": "Helvetica", "color": "#ffffff", "bold": true, "align": "center" } }] }] }, { "type": "Box", "props": { "y": 50, "x": 65, "width": 465, "visible": false, "var": "proBox", "renderType": "render", "height": 201 }, "child": [{ "type": "Image", "props": { "y": 42, "x": 42, "width": 84, "var": "proBgIcon", "skin": "ui_hero/img-lanpinzhikuang.png", "height": 84, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 42, "x": 42, "width": 84, "var": "proImg", "skin": "ui_icon/icon_prop_005.png", "height": 84, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Text", "props": { "y": 38, "x": 111, "width": 34, "var": "proNum", "text": "99", "height": 18, "fontSize": 18, "font": "Helvetica", "color": "#C0C7DE", "bold": true, "align": "left" } }, { "type": "Text", "props": { "y": 2, "x": 111, "width": 84, "var": "proName", "text": "name", "height": 24, "fontSize": 20, "font": "Helvetica", "color": "#ffffff", "bold": true, "align": "left" } }, { "type": "Text", "props": { "y": 127, "x": 1, "wordWrap": true, "width": 451, "var": "proContent", "text": "内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容", "height": 99, "fontSize": 18, "font": "Helvetica", "color": "#d6d7dd", "bold": true, "align": "left" } }] }, { "type": "Box", "props": { "y": 192, "x": 312, "width": 518, "visible": false, "var": "heroBox", "renderType": "render", "height": 314, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -42, "width": 206, "skin": "ui_hero/img-yingxiong-zhanshi-huang.png", "sizeGrid": "30,30,30,30", "scaleY": 1.5, "scaleX": 1.5, "name": "icon", "height": 262 } }, { "type": "Image", "props": { "y": 27, "x": 299, "skin": "ui_hero/icon-renwu-leixing-gongji.png", "name": "typeIcon", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 15, "x": 311, "width": 214, "text": "名字", "name": "name", "height": 26, "fontSize": 22, "font": "SimHei", "color": "#fefeff", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 50, "x": 287, "width": 73, "text": "等级：", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 75, "x": 287, "width": 73, "text": "品质：", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 100, "x": 287, "width": 73, "text": "类型：", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 175, "x": 287, "width": 73, "text": "先手：", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 125, "x": 287, "width": 73, "text": "生命：", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 150, "x": 287, "width": 73, "text": "伤害：", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 256, "x": 287, "width": 109, "text": "队长技能：", "height": 26, "fontSize": 20, "font": "SimHei", "color": "#fefeff", "bold": false } }, { "type": "Label", "props": { "y": 200, "x": 287, "width": 73, "text": "暴击率：", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 225, "x": 287, "width": 73, "text": "暴击倍率：", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 50, "x": 447, "width": 73, "text": "label", "name": "lv", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 75, "x": 447, "width": 73, "text": "label", "name": "quality", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 100, "x": 447, "width": 73, "text": "label", "name": "type", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 125, "x": 447, "width": 73, "text": "label", "name": "hp", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 150, "x": 447, "width": 73, "text": "label", "name": "hit", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 175, "x": 447, "width": 73, "text": "label", "name": "earlier", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 200, "x": 447, "width": 73, "text": "label", "name": "crit", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 225, "x": 447, "width": 73, "text": "label", "name": "critRatio", "height": 26, "fontSize": 18, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "HTMLDivElement", "props": { "y": 284, "x": 287, "width": 236, "name": "desc", "innerHTML": "htmlText", "height": 94 } }, { "type": "Label", "props": { "y": 414, "x": -42, "width": 566, "height": 2, "bgColor": "#414d73" } }] }, { "type": "Box", "props": { "y": 187, "x": 312, "width": 518, "visible": false, "var": "petBox", "renderType": "render", "height": 314, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -42, "width": 206, "skin": "ui_hero/img-yingxiong-zhanshi-huang.png", "sizeGrid": "13,14,13,19", "scaleY": 1.5, "scaleX": 1.5, "name": "icon", "height": 262 } }, { "type": "Image", "props": { "y": 27, "x": 299, "skin": "ui_hero/icon-renwu-leixing-gongji.png", "name": "type", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 15, "x": 287, "width": 214, "text": "名字", "name": "name", "height": 26, "fontSize": 26, "font": "SimHei", "color": "#fefeff", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 50, "x": 287, "width": 73, "text": "等级：", "height": 26, "fontSize": 20, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 75, "x": 287, "width": 73, "text": "品质：", "height": 26, "fontSize": 20, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 100, "x": 287, "width": 73, "text": "种族：", "height": 26, "fontSize": 20, "font": "SimHei", "color": "#9be585", "bold": false } }, { "type": "Label", "props": { "y": 137, "x": 287, "width": 109, "text": "神兽介绍：", "height": 26, "fontSize": 20, "font": "SimHei", "color": "#fefeff", "bold": true } }, { "type": "Label", "props": { "y": 50, "x": 440, "width": 73, "text": "label", "name": "lv", "height": 26, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 75, "x": 440, "width": 73, "text": "label", "name": "color", "height": 26, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "Label", "props": { "y": 100, "x": 366, "width": 147, "text": "label", "name": "phyle", "height": 26, "fontSize": 20, "font": "SimHei", "color": "#f4ff79", "bold": false, "align": "right" } }, { "type": "HTMLDivElement", "props": { "y": 175, "x": 287, "width": 236, "name": "desc", "innerHTML": "htmlText", "height": 208 } }, { "type": "Image", "props": { "y": 422, "x": -52, "skin": "ui_pet/btn-xuanzhong-shenshou.png", "name": "prime" }, "child": [{ "type": "Label", "props": { "y": 8, "x": 10, "width": 134, "text": "主属性", "name": "txt_1", "height": 24, "fontSize": 22, "font": "Microsoft YaHei", "color": "#491a22", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 32, "x": 10, "width": 175, "text": "主属性", "name": "prime_1", "height": 24, "fontSize": 22, "font": "Microsoft YaHei", "color": "#491a22", "bold": false, "align": "left" } }, { "type": "Label", "props": { "y": 58, "x": 10, "width": 234, "text": "主属性", "name": "prime_2", "height": 24, "fontSize": 22, "font": "Microsoft YaHei", "color": "#491a22", "bold": false, "align": "left" } }] }, { "type": "Image", "props": { "y": 422, "x": 240, "skin": "ui_pet/btn-weixuanzhong-shenshou.png", "name": "auxiliary" }, "child": [{ "type": "Label", "props": { "y": 4, "x": 10, "width": 177, "text": "辅助", "name": "txt_2", "height": 24, "fontSize": 22, "font": "Microsoft YaHei", "color": "#7f8aaa", "bold": true, "align": "left" } }, { "type": "Label", "props": { "y": 30, "x": 10, "width": 224, "text": "辅助", "name": "auxiliary_1", "height": 24, "fontSize": 22, "font": "Microsoft YaHei", "color": "#7f8aaa", "bold": false, "align": "left" } }, { "type": "Label", "props": { "y": 56, "x": 10, "width": 219, "text": "辅助", "name": "auxiliary_2", "height": 24, "fontSize": 22, "font": "Microsoft YaHei", "color": "#7f8aaa", "bold": false, "align": "left" } }] }, { "type": "Label", "props": { "y": 512, "x": 239, "width": 560, "name": "zs", "height": 2, "bgColor": "#2e455b", "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": -73, "x": 280, "width": 2, "name": "txt_1", "height": 60, "bgColor": "#2e455b" } }] }] }, { "type": "Label", "props": { "y": -40, "x": 0, "width": 586, "height": 50, "bgColor": "#1b2838" }, "child": [{ "type": "Label", "props": { "x": 26, "width": 6, "height": 25, "centerY": 0, "bgColor": "#4a408a" } }, { "type": "Text", "props": { "y": 12, "x": 47, "width": 514, "var": "tipName", "text": "输入Tip名字", "strokeColor": "#50560c", "name": "tipName", "height": 28, "fontSize": 24, "font": "SimHei", "color": "#e4eafe", "bold": true, "align": "left" } }, { "type": "Button", "props": { "var": "close", "stateNum": 1, "skin": "ui_common/btn-X-tongyong.png", "right": 30, "name": "close", "centerY": 0 } }] }] }] }] };
            return TipsTreasureViewUI;
        }(View));
        tips.TipsTreasureViewUI = TipsTreasureViewUI;
    })(tips = ui.tips || (ui.tips = {}));
})(ui || (ui = {}));
(function (ui) {
    var tips;
    (function (tips) {
        var TipsViewUI = /** @class */ (function (_super) {
            __extends(TipsViewUI, _super);
            function TipsViewUI() {
                return _super.call(this) || this;
            }
            TipsViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.tips.TipsViewUI.uiView);
            };
            TipsViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Image", "props": { "width": 750, "var": "backGround", "height": 1200 }, "child": [{ "type": "Image", "props": { "y": 600, "x": 375, "width": 400, "var": "imageBg", "skin": "ui_common/img-heijianbian.png", "height": 50, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 12.5, "x": 50, "width": 300, "var": "msgLabel", "height": 25 } }] }] }] };
            return TipsViewUI;
        }(View));
        tips.TipsViewUI = TipsViewUI;
    })(tips = ui.tips || (ui.tips = {}));
})(ui || (ui = {}));
(function (ui) {
    var vip;
    (function (vip) {
        var VipViewUI = /** @class */ (function (_super) {
            __extends(VipViewUI, _super);
            function VipViewUI() {
                return _super.call(this) || this;
            }
            VipViewUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.vip.VipViewUI.uiView);
            };
            VipViewUI.uiView = { "type": "View", "props": { "width": 750, "height": 1200 }, "child": [{ "type": "Label", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": -1, "top": 0, "right": 0, "left": -1, "bottom": 0, "bgColor": "#0c0908", "alpha": 0.8 } }, { "type": "Image", "props": { "width": 660, "skin": "ui_vip/img-bg-vip.png", "sizeGrid": "0,10,15,10", "height": 909, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 2, "x": 5, "width": 650, "height": 42, "bgColor": "#202025" }, "child": [{ "type": "Image", "props": { "var": "close", "skin": "ui_main/btn-guanbi.png", "right": 12 } }, { "type": "Image", "props": { "y": -39, "x": -6, "skin": "ui_vip/img-zhuangshi-taitou-vip.png" }, "child": [{ "type": "Label", "props": { "y": 36, "x": 86, "width": 92, "text": "VIP", "height": 60, "fontSize": 43, "font": "SimHei", "color": "#602051", "bold": true } }, { "type": "Label", "props": { "y": 28, "x": 84, "width": 92, "text": "VIP", "strokeColor": "#aa509b", "stroke": 1, "height": 60, "fontSize": 43, "font": "SimHei", "color": "#dbd5df", "bold": true } }] }] }, { "type": "Image", "props": { "y": 318, "skin": "ui_vip/img-hua-vip.png", "centerX": 1, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 65, "x": 30, "width": 182, "var": "validTime", "text": "有效时间：21小时", "height": 29, "fontSize": 20, "font": "Microsoft YaHei", "color": "#826c95", "bold": false } }, { "type": "Label", "props": { "y": 65, "x": 440, "width": 182, "var": "addNum", "text": "累计次数：3/5次", "height": 29, "fontSize": 20, "font": "Microsoft YaHei", "color": "#826c95", "bold": false, "align": "right" } }, { "type": "Image", "props": { "y": 96, "x": 5, "skin": "ui_vip/img-xiaotaitou-bg-vip.png" }, "child": [{ "type": "Label", "props": { "y": 9, "x": 49, "width": 182, "text": "专属特权", "height": 29, "fontSize": 28, "font": "SimHei", "color": "#3e1a26", "bold": false, "align": "left" } }, { "type": "Label", "props": { "y": 7, "x": 47, "width": 182, "text": "专属特权", "strokeColor": "713177", "stroke": 1, "height": 30, "fontSize": 28, "font": "SimHei", "color": "#ecc8a3", "bold": false, "align": "left" } }, { "type": "Image", "props": { "y": 11, "x": 23, "skin": "ui_vip/img-xiaotaitou-zhuagnshi-vip.png" } }] }, { "type": "Box", "props": { "y": 471, "x": 64, "width": 567, "renderType": "render", "height": 32 }, "child": [{ "type": "Image", "props": { "y": 17, "x": 12, "width": 34, "skin": "ui_vip/img-wenzizhuangshi-vip.png", "height": 34, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "HTMLDivElement", "props": { "y": 9, "x": 36, "width": 510, "var": "vipDiamondDescription", "innerHTML": "htmlText", "height": 50 } }] }, { "type": "List", "props": { "y": 509, "x": 64, "width": 540, "var": "contentList", "spaceY": 7, "repeatX": 1, "height": 376 }, "child": [{ "type": "Box", "props": { "y": 31, "x": 0, "width": 500, "renderType": "render", "height": 32 }, "child": [{ "type": "Image", "props": { "y": 17, "x": 12.409999999999997, "skin": "ui_vip/img-wenzizhuangshi-vip.png", "scaleY": 0.73, "scaleX": 0.73, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "HTMLDivElement", "props": { "y": 8, "x": 36, "width": 500, "name": "contentStr", "innerHTML": "htmlText", "height": 25 } }] }] }, { "type": "Button", "props": { "y": 838, "var": "buybun", "stateNum": 1, "skin": "ui_action/btn-huodong-p.png", "scaleY": 1, "scaleX": 1, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 8, "x": 1, "width": 160, "var": "buytext", "text": "30元", "height": 29, "fontSize": 26, "font": "SimHei", "color": "#5f2904", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 45, "x": 0, "width": 160, "text": "获得永久VIP特权", "name": "text_2", "height": 29, "fontSize": 18, "font": "SimHei", "color": "#ffc58b", "bold": false, "align": "center" } }, { "type": "Image", "props": { "y": -3, "x": 15, "width": 26, "skin": "ui_hero/img-biaoqian-zhekou-bg.png", "name": "point", "height": 30 }, "child": [{ "type": "Label", "props": { "y": 1, "x": -5, "width": 37, "text": "限时", "strokeColor": "#d10805", "stroke": 3, "rotation": 8, "height": 18, "fontSize": 18, "font": "SimHei", "color": "#ffffff" } }] }] }, { "type": "Label", "props": { "y": 775, "width": 157, "var": "moneytext", "text": "原价：288", "height": 25, "fontSize": 20, "font": "SimHei", "color": "#fcf1ca", "centerX": 0, "bold": true, "align": "center" }, "child": [{ "type": "Label", "props": { "y": 3, "x": 30, "width": 100, "rotation": 4, "height": 2, "bgColor": "#ca2a28" } }] }, { "type": "Label", "props": { "y": 808, "width": 589, "visible": false, "var": "text_2", "text": "已永久激活VIP", "height": 33, "fontSize": 30, "font": "SimHei", "color": "#842333", "centerX": 3, "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Label", "props": { "y": 806, "width": 589, "visible": false, "var": "text_1", "text": "已永久激活VIP", "height": 33, "fontSize": 30, "font": "SimHei", "color": "#fcda85", "centerX": 0, "bold": true, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }] }] }] };
            return VipViewUI;
        }(View));
        vip.VipViewUI = VipViewUI;
    })(vip = ui.vip || (ui.vip = {}));
})(ui || (ui = {}));
//# sourceMappingURL=layaUI.max.all.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * 英雄血条
 * @author zhangyusong
 */
var H52D_Framework;
(function (H52D_Framework) {
    var HeroBloodView = /** @class */ (function (_super) {
        __extends(HeroBloodView, _super);
        /**初始化 */
        function HeroBloodView() {
            var _this = _super.call(this) || this;
            _this.visible = true;
            _this.img_blood.x = 0;
            _this.maxWidth = _this.img_blood.width;
            return _this;
        }
        Object.defineProperty(HeroBloodView.prototype, "proportion", {
            set: function (value) {
                if (value < 0) {
                    value = 0;
                    this.visible = false;
                }
                else if (value > 1) {
                    value = 1;
                }
                this.img_blood.x = -this.maxWidth * (1 - value);
            },
            enumerable: true,
            configurable: true
        });
        return HeroBloodView;
    }(ui.action.kicking.HeroBloodViewUI));
    H52D_Framework.HeroBloodView = HeroBloodView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeroBloodView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    // 战斗伤害飘字
    var FloatView = /** @class */ (function (_super) {
        __extends(FloatView, _super);
        function FloatView(params) {
            var _this = _super.call(this) || this;
            _this.MOVE_TIME = 1100;
            _this.isCrit = false;
            _this.birthY = 0;
            _this.width = G_StageWidth;
            _this.height = G_StageHeight;
            var value = params[1];
            var dmgDegree = params[2];
            _this.hBox.x = params[3];
            _this.hBox.y = params[4];
            _this.isCrit = params[5];
            _this.birthY = params[6];
            _this.hBox.destroyChildren();
            _this.SetNumberClip(dmgDegree, value);
            _this.TweenMoveByCenter(dmgDegree);
            return _this;
        }
        FloatView.prototype.SetNumberClip = function (dmgDegree, value) {
            if (value <= 0) {
                return;
            }
            var damageMaxValue = 99999999999;
            if (value > damageMaxValue) {
                value = damageMaxValue;
            }
            var imagePath = "";
            if (dmgDegree == SkinEnum.SkinTap) {
                imagePath = "ui_common/img-dianji-shanghai.png";
            }
            else if (dmgDegree == SkinEnum.SkinHero) {
                imagePath = "ui_common/img-yingxiong-shanghai.png";
            }
            else if (dmgDegree == SkinEnum.SkinPet) {
                imagePath = "ui_common/img-chongwu-shanghai.png";
            }
            else if (dmgDegree == SkinEnum.SkinCamp) {
                imagePath = "ui_common/img-dachuan-shanghai.png";
            }
            else if (dmgDegree == SkinEnum.RewardCoin) {
                imagePath = "ui_common/img-jinbi-shanghai.png";
            }
            else if (dmgDegree == SkinEnum.SkinHP) {
                imagePath = "ui_common/img-xixue-shanghai.png";
            }
            var str = value.toString();
            for (var i = 0; i < str.length; i++) {
                var clip = this["clip" + i];
                clip.index = Number(str[i]);
                clip.visible = true;
                clip.skin = imagePath;
                this.hBox.addChild(clip);
                clip.x = this.hBox._childs.length;
            }
        };
        // 缓动
        FloatView.prototype.TweenMoveByCenter = function (dmgDegree) {
            var _this = this;
            if (!this.isCrit && dmgDegree != SkinEnum.RewardCoin) {
                this.hBox.scale(0.7, 0.7);
            }
            if (dmgDegree == SkinEnum.RewardCoin) {
                this.hBox.scale(0.6, 0.6);
            }
            var random_x = Math.random() * 20 - 5 >> 0;
            this.hBox.x += random_x;
            var random_y = Math.random() * this.birthY >> 0;
            this.hBox.y -= random_y;
            H52D_Framework.TweenList.to(this, this.hBox, { y: this.hBox.y - 250 }, this.MOVE_TIME, function () {
                _this.hBox.y = _this.hBox.y - 250;
                _this.TweenComplete();
            });
            H52D_Framework.TweenList.to(this, this.hBox, { alpha: 0 }, 500, function () { _this.hBox.alpha = 0; }, this.MOVE_TIME - 500);
            H52D_Framework.Tick.Once(10, this, function () {
                if (_this.hBox.y > _this.hBox.y - 5) {
                    H52D_Framework.TweenList.to(_this, _this.hBox, { y: _this.hBox.y - 250 }, _this.MOVE_TIME, function () {
                        _this.hBox.y = _this.hBox.y - 250;
                        _this.TweenComplete();
                    });
                }
            });
        };
        FloatView.prototype.TweenComplete = function () {
            this.hBox.alpha = 0;
            Laya.Tween.clearAll(this);
            H52D_Framework.UIManager.Instance.DestroyUI(this, [H52D_Framework.ViewDownRoot]);
        };
        return FloatView;
    }(ui.common.FloatViewUI));
    H52D_Framework.FloatView = FloatView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=FloatView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* 断线重连;
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ReConnectView", [
        { url: "res/ui/ui_reconnect.atlas", type: Laya.Loader.ATLAS }
    ]);
    var ReConnectView = /** @class */ (function (_super) {
        __extends(ReConnectView, _super);
        function ReConnectView() {
            var _this = _super.call(this) || this;
            _this.ReConnectStart();
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            H52D_Framework.Event.RegistEvent("Event_ReConnectEnd", Laya.Handler.create(_this, _this.Event_ReConnectEnd));
            return _this;
        }
        /**
         * 重连显示
         * @param num 重连次数
         */
        ReConnectView.prototype.ReConnectStart = function () {
            var _this = this;
            H52D_Framework.Tick.Loop(1000, this, function () {
                if (_this.desc.text.indexOf("...") != -1) {
                    _this.desc.text = "断线重连中.";
                }
                else if (_this.desc.text.indexOf("..") != -1) {
                    _this.desc.text = "断线重连中...";
                }
                else if (_this.desc.text.indexOf(".") != -1) {
                    _this.desc.text = "断线重连中..";
                }
            });
        };
        ReConnectView.prototype.Event_ReConnectEnd = function (bSuccess) {
            H52D_Framework.Tick.ClearAll(this);
            H52D_Framework.Event.RemoveEvent("Event_ReConnectEnd", Laya.Handler.create(this, this.Event_ReConnectEnd));
            H52D_Framework.UIManager.Instance.DestroyUI("ReConnectView", [H52D_Framework.ViewUpRoot]);
            if (!bSuccess) {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("重连失败，请重新登陆！", Laya.Handler.create(this, function () {
                    location.reload();
                }));
            }
        };
        ReConnectView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent("Event_ReConnectEnd", Laya.Handler.create(this, this.Event_ReConnectEnd));
        };
        return ReConnectView;
    }(ui.common.ReConnectViewUI));
    H52D_Framework.ReConnectView = ReConnectView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ReconnectView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：奖品模块
     * @author：zhangyusong
     */
    var RewardView = /** @class */ (function (_super) {
        __extends(RewardView, _super);
        function RewardView() {
            return _super.call(this) || this;
        }
        Object.defineProperty(RewardView.prototype, "pic", {
            set: function (value) {
                this.img_icon.skin = "ui_icon/" + value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RewardView.prototype, "itemName", {
            set: function (value) {
                this.tx_name.text = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RewardView.prototype, "itemNum", {
            set: function (value) {
                this.tx_num.text = value > 1 ? String(value) : "";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RewardView.prototype, "quality", {
            set: function (value) {
                this.img_quality.bgColor = H52D_Framework.BaseDefine.ItemBgColor[value];
                this.tx_name.color = H52D_Framework.BaseDefine.LabelColor1[value];
            },
            enumerable: true,
            configurable: true
        });
        return RewardView;
    }(ui.common.RewardViewUI));
    H52D_Framework.RewardView = RewardView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=RewardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("SkillNameView", [
        { url: "res/ui/ui_skillname.atlas", type: Laya.Loader.ATLAS }
    ]);
    var SkillNameView = /** @class */ (function (_super) {
        __extends(SkillNameView, _super);
        function SkillNameView(params) {
            var _this = _super.call(this) || this;
            _this.width = G_StageWidth;
            _this.height = G_StageHeight;
            var name = params[1];
            _this.SName.x = params[2];
            _this.SName.y = params[3];
            var x = name.length;
            switch (x) {
                case 6:
                    _this.SName.width = 76;
                    break;
                case 7:
                    _this.SName.width = 107;
                    break;
                case 8:
                    _this.SName.width = 136;
                    break;
            }
            _this.SName.skin = "ui_skillname/" + name;
            _this.SName.visible = true;
            _this.SName.alpha = 1;
            H52D_Framework.TweenList.to(_this, _this.SName, { alpha: 1 }, 200, function () {
                H52D_Framework.Tick.Once(700, _this, function () {
                    H52D_Framework.TweenList.to(_this, _this.SName, { alpha: 0 }, 200, function () {
                        _this.Destroy();
                    });
                });
            });
            return _this;
        }
        SkillNameView.prototype.Destroy = function () {
            this.SName.alpha = 0;
            Laya.Tween.clearAll(this);
            H52D_Framework.UIManager.Instance.DestroyUI(this, [H52D_Framework.ViewDownRoot]);
        };
        return SkillNameView;
    }(ui.common.SkillNameUI));
    H52D_Framework.SkillNameView = SkillNameView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SkillNameView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* name
*/
var H52D_Framework;
(function (H52D_Framework) {
    var PCamp = /** @class */ (function (_super) {
        __extends(PCamp, _super);
        function PCamp(vo, btype, viewRoot, bblood) {
            var _this = _super.call(this, btype, bblood) || this;
            _this._btype = btype;
            _this._dataVo = vo;
            _this.type = eCharacter_TYPE.CAMP;
            _this.SE = SkinEnum.SkinCamp;
            _this.viewRoot = viewRoot ? viewRoot : H52D_Framework.KickingManager.Instance.avatarRoot;
            return _this;
        }
        /**加载阵营模型 */
        PCamp.prototype.LoadMoudle = function (x, y, order, callback) {
            var _this = this;
            this._PosX = x;
            this._PosY = y;
            /**加载模型 */
            this._avatar = new H52D_Framework.Avatar(this.viewRoot);
            this._avatar.Load("res/player/chuan/chuan.sk", this._btype, 0.3, x, y, Laya.Handler.create(this, function () {
                if (_this._btype == 1) {
                    _this._avatar.Rotate(8);
                }
                else {
                    _this._avatar.Rotate(-8);
                }
                _this.SetOrderZ(order);
                /**初始化英雄普攻 */
                _this._attackskill = new H52D_Framework.PSkill(_this.vo.skillid, _this, _this._btype, eBELONGS_TO.CAMP);
                _this.Idle();
                if (callback)
                    callback.run();
            }));
        };
        PCamp.prototype.SetDamage = function () {
            if (this._btype == 1) {
                this.vo.setDamage(H52D_Framework.BattlefieldManager.Instance.Characterlist[0].HeroList);
            }
            else {
                this.vo.setDamage(H52D_Framework.BattlefieldManager.Instance.Characterlist[1].HeroList);
            }
        };
        /**更新函数 */
        PCamp.prototype.OnUpdate = function () {
            if (!this._target)
                return;
            if (this._attackskill) {
                this._attackskill.OnUpdate();
                if (!this._attackskill.IsCD &&
                    !this._bClose
                    && this._target.length > 0) {
                    this.SpellAttackSkill();
                }
            }
            if (this.TargetIsNull()) {
                this._bClose = true;
                this._target = [];
            }
        };
        return PCamp;
    }(H52D_Framework.Character));
    H52D_Framework.PCamp = PCamp;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PCamp.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    /**PVP */
    var PHeroCrad = /** @class */ (function (_super) {
        __extends(PHeroCrad, _super);
        /**初始化 */
        function PHeroCrad(vo, btype, viewRoot, bbool) {
            var _this = _super.call(this, btype, bbool) || this;
            _this._dataVo = vo;
            _this._passiveSkillList = [];
            if (vo.hero_Type == 1) {
                _this.type = eCharacter_TYPE.AHERO;
            }
            else {
                _this.type = eCharacter_TYPE.DHERO;
            }
            _this.SE = SkinEnum.SkinHero;
            _this.InitSkill();
            _this.CaptainSkillInit(btype);
            return _this;
        }
        PHeroCrad.prototype.CaptainSkillInit = function (btype) {
            if (this.vo.location == 4 && btype == 1) {
                var icon = "ui_icon/" + H52D_Framework.ActiveSkillConfig[this.vo.skillid[1]]["strIcon"];
                H52D_Framework.Event.DispatchEvent("PvpCaptainSkillInit", [icon]);
            }
        };
        Object.defineProperty(PHeroCrad.prototype, "vo", {
            get: function () { return this._dataVo; },
            enumerable: true,
            configurable: true
        });
        PHeroCrad.prototype.setCurrentHp = function (value) {
            this._currentHp = value;
            this.heroBlood.proportion = value / this.bloodMax;
        };
        /**加载英雄模型 */
        PHeroCrad.prototype.LoadMoudle = function (id, dir, scale, x, y, order, callback) {
            var _this = this;
            this._id = id;
            this._PosX = x;
            this._PosY = y;
            this.vo.InitPassiveID();
            this.vo.SetColOrow();
            this.SetToSpeed();
            this.bloodMax = this.vo.attr.GetAttributeValue(1);
            this._currentHp = this.vo.attr.GetAttributeValue(1);
            /**加载模型 */
            this._avatar = new H52D_Framework.Avatar(H52D_Framework.KickingManager.Instance.avatarRoot);
            this._avatar.Load(this.vo.ModlePath, dir, scale, x, y, Laya.Handler.create(this, function () {
                /**设置阴影 */
                _this._avatar.Shadow(1, true);
                _this.SetOrderZ(_this.vo.colNum);
                _this.Idle();
                _this.heroBlood = new H52D_Framework.HeroBloodView();
                _this.heroBlood.x = _this._avatar.PosX - 25;
                _this.heroBlood.y = _this._avatar.PosY - 120;
                H52D_Framework.KickingManager.Instance.effectRoot.addChild(_this.heroBlood);
                if (callback) {
                    callback.run();
                }
            }));
        };
        PHeroCrad.prototype.OnHurt = function (be, owr, damage, e, iscrit, type, viewRoot) {
            _super.prototype.OnHurt.call(this, be, owr, damage, e, iscrit, type, viewRoot);
            this.OnHurtTriggerConditions();
        };
        PHeroCrad.prototype.SpellAttackSkill = function () {
            _super.prototype.SpellAttackSkill.call(this);
            this.AttackTriggerConditions();
        };
        /**条件类被动技能生效 */
        PHeroCrad.prototype.OnEffectPassive = function () {
            for (var i = 0; i < this.vo.conditionsID.length; i++) {
                var pas = new H52D_Framework.PConditionsPassiveSkill(this.vo.conditionsID[i], this._btype, this);
                this._passiveSkillList.push(pas);
            }
            for (var i = 0; i < this._passiveSkillList.length; i++) {
                if (this._passiveSkillList[i]) {
                    this._passiveSkillList[i].Do();
                }
            }
        };
        PHeroCrad.prototype.SpellCaptainSkill = function () {
            var _this = this;
            _super.prototype.SpellCaptainSkill.call(this);
            this.CaptainEffct();
            H52D_Framework.Tick.Once(200, this, function () {
                _this.CaptainEffct_Z();
                var name = H52D_Framework.SkillName[_this.vo.skillid[1]];
                H52D_Framework.Floating.SkillNameText_P(name, _this.PosX, _this.PosY - 130);
            });
        };
        PHeroCrad.prototype.CaptainEffct = function () {
            var avatar = new H52D_Framework.Avatar(H52D_Framework.KickingManager.Instance.effectRoot);
            avatar.Load(H52D_Framework.EffectDefine.shifa, 1, 1, this.PosX + 5, this.PosY - 75, Laya.Handler.create(this, function () {
                avatar.Play("effect_state_shifa", false, false, function () {
                    avatar.Destroy();
                    avatar = null;
                });
            }));
        };
        PHeroCrad.prototype.CaptainEffct_Z = function () {
            var _this = this;
            var avatar = new H52D_Framework.Avatar(H52D_Framework.KickingManager.Instance.effectRoot);
            avatar.Load("res/effect/effect_state_shifa2/effect_state_shifa2.sk", 1, 1, this.PosX, this.PosY - 160, Laya.Handler.create(this, function () {
                avatar.Armature.alpha = 0;
                avatar.Play("effect_state_shifa2", true, false, function () {
                });
                H52D_Framework.TweenList.to(_this, avatar.Armature, { alpha: 1 }, 200, function () {
                    H52D_Framework.Tick.Once(700, _this, function () {
                        H52D_Framework.TweenList.to(_this, avatar.Armature, { alpha: 0 }, 200, function () {
                            avatar.Destroy();
                            avatar = null;
                        });
                    });
                });
            }));
        };
        return PHeroCrad;
    }(H52D_Framework.Character));
    H52D_Framework.PHeroCrad = PHeroCrad;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PHeroCrad.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var PPet = /** @class */ (function (_super) {
        __extends(PPet, _super);
        /**初始化 */
        function PPet(id, vo, btype, viewRoot, bbool) {
            var _this = _super.call(this, btype, bbool) || this;
            _this.SE = SkinEnum.SkinPet;
            _this.type = eCharacter_TYPE.PET;
            _this._dataVo = vo;
            _this.viewRoot = viewRoot ? viewRoot : H52D_Framework.KickingManager.Instance.avatarRoot;
            return _this;
        }
        /**加载英雄模型 */
        PPet.prototype.LoadMoudle = function (x, y, order, callback) {
            var _this = this;
            this._PosX = x;
            this._PosY = y;
            var dir = 0;
            if (this._btype == 1) {
                dir = -1;
                this.vo.SetDamage(H52D_Framework.BattlefieldManager.Instance.Characterlist[0].HeroList);
            }
            else {
                dir = 1;
                this.vo.SetDamage(H52D_Framework.BattlefieldManager.Instance.Characterlist[1].HeroList);
            }
            /**加载模型 */
            this._avatar = new H52D_Framework.Avatar(this.viewRoot);
            this._avatar.Load(this.vo.Path, dir, this.vo.Scla, x, y, Laya.Handler.create(this, function () {
                /**设置阴影 */
                //this._avatar.Shadow(0.5,true);
                _this.ChangeEffect();
                _this.SetOrderZ(order);
                /**初始化英雄普攻 */
                _this._attackskill = new H52D_Framework.PSkill(_this.vo.Sid, _this, _this._btype, eBELONGS_TO.PET);
                _this.Idle();
                if (callback)
                    callback.run();
            }));
        };
        PPet.prototype.SetDamage = function () {
            if (this._btype == 1) {
                this.vo.SetDamage(H52D_Framework.BattlefieldManager.Instance.Characterlist[0].HeroList);
            }
            else {
                this.vo.SetDamage(H52D_Framework.BattlefieldManager.Instance.Characterlist[1].HeroList);
            }
        };
        PPet.prototype.OnUpdate = function () {
            if (!this._target)
                return;
            if (this._attackskill) {
                this._attackskill.OnUpdate();
                if (!this._attackskill.IsCD &&
                    !this._bClose &&
                    this._target.length > 0) {
                    this.SpellAttackSkill();
                }
            }
            if (this.TargetIsNull()) {
                this._target = [];
            }
        };
        return PPet;
    }(H52D_Framework.Character));
    H52D_Framework.PPet = PPet;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=PPet.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var TextNameView = /** @class */ (function (_super) {
        __extends(TextNameView, _super);
        function TextNameView() {
            var _this = _super.call(this) || this;
            _this.logArray = [];
            _this.UpdateList();
            return _this;
        }
        TextNameView.prototype.UpdateList = function () {
            this.sList.vScrollBarSkin = "";
            this.sList.array = this.logArray;
            this.sList.renderHandler = new Laya.Handler(this, this.OnComeplete);
        };
        TextNameView.prototype.OnComeplete = function (item, index) {
            var tx = item.getChildByName("tx_log");
            // tx.width = 750;
            tx.text = this.logArray[index];
        };
        TextNameView.prototype.SetLog = function (list) {
            this.logArray.push(list);
            this.sList.array = this.logArray;
        };
        TextNameView.prototype._Cler = function () {
            this.logArray = [];
        };
        return TextNameView;
    }(ui.common.TextDamageUI));
    H52D_Framework.TextNameView = TextNameView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TextNameView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/** 成就界面 */
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("AchievementView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_sign.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_mail.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
    ]);
    var AchievementView = /** @class */ (function (_super) {
        __extends(AchievementView, _super);
        function AchievementView() {
            var _this = _super.call(this) || this;
            _this._bSort = true;
            _this.achievenIdArr = [];
            _this._SendBtnFlag1 = true;
            _this._SendBtnFlag2 = true;
            _this.AddEvent();
            _this.Init();
            return _this;
        }
        AchievementView.prototype.Init = function () {
            this.red1.visible = false;
            this.red2.visible = false;
            this.txt1.color = "#bebbf8";
            this.txt2.color = "#eff8bb";
            this.bg3.skin = "ui_rank/img-zi-xuan.png";
            this.btn1.skin = "ui_rank/img-zi-weixuan.png";
            this.btn2.skin = "ui_rank/img-lan-weixuan.png";
            H52D_Framework.AchievenManger.Instance.achievenType = E_AchievenType.eDay;
            this.tipName.text = "成就";
            this.achieven_List.vScrollBarSkin = "";
            this.SetListData(H52D_Framework.AchievenManger.Instance.dayMission);
            this.UpdateDate(H52D_Framework.AchievenManger.Instance.achievenType);
        };
        AchievementView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.close.on(Laya.Event.CLICK, this, this.CloseUI);
            this.btn1.on(Laya.Event.CLICK, this, this.UpdateDate, [E_AchievenType.eDay]);
            this.btn2.on(Laya.Event.CLICK, this, this.UpdateDate, [E_AchievenType.eAchieven]);
            H52D_Framework.Event.RegistEvent('UpdateAchievenDate', Laya.Handler.create(this, this.UpdateDate));
        };
        AchievementView.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.Tick.ClearAll(this);
            H52D_Framework.Event.RemoveEvent('UpdateAchievenDate', Laya.Handler.create(this, this.UpdateDate));
        };
        /**刷新页面数据 */
        AchievementView.prototype.UpdateDate = function (type) {
            if (type === void 0) { type = H52D_Framework.AchievenManger.Instance.achievenType; }
            if (H52D_Framework.AchievenManger.Instance.achievenType != type) {
                this._bSort = true;
            }
            H52D_Framework.AchievenManger.Instance.achievenType = type;
            if (H52D_Framework.AchievenManger.Instance.achievenType == E_AchievenType.eDay) {
                this.SetListData(H52D_Framework.AchievenManger.Instance.dayMission);
                this.txt1.color = "#bebbf8";
                this.txt2.color = "#eff8bb";
                this.bg3.skin = "ui_rank/img-zi-xuan.png";
                this.btn1.skin = "ui_rank/img-zi-weixuan.png";
                this.btn2.skin = "ui_rank/img-lan-weixuan.png";
            }
            if (H52D_Framework.AchievenManger.Instance.achievenType == E_AchievenType.eAchieven) {
                this.SetListData(H52D_Framework.AchievenManger.Instance.achievenMission);
                this.txt1.color = "#eff8bb";
                this.txt2.color = "#bebbf8";
                this.bg3.skin = "ui_rank/img-lan-xuan.png";
                this.btn1.skin = "ui_rank/img-lan-weixuan.png";
                this.btn2.skin = "ui_rank/img-zi-weixuan.png";
            }
            this.red1.visible = H52D_Framework.AchievenManger.Instance.showPointDay();
            this.red2.visible = H52D_Framework.AchievenManger.Instance.showPointAchieven();
        };
        AchievementView.prototype.SetListData = function (achievenList) {
            //排序
            if (this._bSort) {
                this.achievenIdArr = [];
                var achieven = achievenList;
                for (var id in achieven) {
                    this.achievenIdArr.push(Number(id));
                }
                var len = this.achievenIdArr.length;
                for (var i = 0; i < len - 1; i++) {
                    for (var j = i + 1; j < len; j++) {
                        var tempValue = void 0;
                        var value_i = achieven[this.achievenIdArr[i]].order;
                        var value_j = achieven[this.achievenIdArr[j]].order;
                        if (value_i < value_j) {
                            tempValue = this.achievenIdArr[i];
                            this.achievenIdArr[i] = this.achievenIdArr[j];
                            this.achievenIdArr[j] = tempValue;
                        }
                    }
                }
                var idArr = [];
                for (var vl = 0; vl < len; vl++) {
                    var tempKey = null;
                    for (var i in this.achievenIdArr) {
                        var id = this.achievenIdArr[i];
                        var starValue = achieven[id].star;
                        if (starValue > achieven[id].maxStar) {
                            var bBreak = false;
                            for (var key in idArr) {
                                if (idArr[key] == id) {
                                    bBreak = true;
                                    break;
                                }
                            }
                            if (bBreak) {
                                break;
                            }
                            else {
                                tempKey = i;
                                idArr.push(id);
                                break;
                            }
                        }
                    }
                    if (tempKey != null) {
                        var id = this.achievenIdArr[tempKey];
                        this.achievenIdArr.splice(tempKey, 1);
                        this.achievenIdArr.push(id);
                    }
                }
                this._bSort = false;
            }
            this.achieven_List.array = this.achievenIdArr;
            this.achieven_List.renderHandler = new Laya.Handler(this, this.SetListRender);
        };
        AchievementView.prototype.SetListRender = function (item, index) {
            var achieven_icon = item.getChildByName("achieven_icon");
            var achievent_btn = item.getChildByName("achievent_btn");
            var achieven_stage = item.getChildByName("achieven_stage");
            var achieven_content = item.getChildByName("achieven_content");
            var achieven_progress = item.getChildByName("achieven_progress");
            var achieven_awart = Laya.Label = item.getChildByName("achieven_awart");
            var achieven_bar = achieven_progress.getChildByName("achieven_bar");
            var achieven_barValue = achieven_progress.getChildByName("achieven_barValue");
            var achievent_btnText = achievent_btn.getChildByName("achievent_btnText");
            var eventId = this.achieven_List.array[index];
            var achieven;
            if (H52D_Framework.AchievenManger.Instance.achievenType == E_AchievenType.eDay) {
                H52D_Framework.AchievenManger.Instance.dayMission[eventId].Init();
                achieven = H52D_Framework.AchievenManger.Instance.dayMission[eventId];
            }
            if (H52D_Framework.AchievenManger.Instance.achievenType == E_AchievenType.eAchieven) {
                H52D_Framework.AchievenManger.Instance.achievenMission[eventId].Init();
                achieven = H52D_Framework.AchievenManger.Instance.achievenMission[eventId];
            }
            var barLength = achieven_progress.width - 4;
            var len = (1 - achieven.yetvalue / achieven.aimvalue) * barLength;
            var setLength = len < 0 ? 0 : len;
            achieven_icon.skin = "ui_icon/" + achieven.strPic;
            achieven_content.text = "任务描述：" + achieven.info;
            achieven_barValue.text = achieven.yetvalue + "/" + achieven.aimvalue;
            achieven_bar.width = setLength;
            H52D_Framework.SetHtmlStyle(achieven_awart, 18, "#fafa85", "center");
            achieven_awart.innerHTML = achieven.rewardType == H52D_Framework.BaseDefine.ItemIdGold ?
                ("<img src= 'ui_icon/icon_prop_012.png' width='20px' height='20px'></img>" + achieven.reward) :
                ("<img src= 'ui_icon/icon_prop_013.png' width='20px' height='15px'></img>" + achieven.reward);
            achieven_stage.destroyChildren();
            for (var i = 1; i <= achieven.maxStar; i++) {
                var stage = new Laya.Image();
                achieven_stage.addChild(stage);
                stage.x = (i - 1) * 30;
                achieven.star >= i + 1 ? stage.skin = "ui_hero/icon-xing-chengjiu.png" : stage.skin = "ui_hero/icon-weijihuo-jinjie-yingxiong.png";
            }
            achievent_btn.gray = false;
            achieven_awart.visible = true;
            achievent_btnText.text = "领奖";
            achievent_btn.offAll(Laya.Event.CLICK);
            if (H52D_Framework.AchievenManger.Instance.achievenType == E_AchievenType.eDay) {
                achievent_btn.on(Laya.Event.CLICK, this, this.ClickDaytBtn, [eventId]);
            }
            else if (H52D_Framework.AchievenManger.Instance.achievenType == E_AchievenType.eAchieven) {
                achievent_btn.on(Laya.Event.CLICK, this, this.ClickAchieventBtn, [eventId]);
            }
            if (achieven.star > achieven.maxStar) {
                achievent_btn.gray = true;
                achieven_awart.visible = false;
                achievent_btnText.text = "已完成";
                achievent_btn.offAll(Laya.Event.CLICK);
            }
            else if (achieven.yetvalue < achieven.aimvalue) {
                achievent_btnText.text = "未达成";
                achievent_btn.gray = true;
                achievent_btn.offAll(Laya.Event.CLICK);
            }
        };
        AchievementView.prototype.ClickAchieventBtn = function (eventId) {
            var _this = this;
            if (this._SendBtnFlag1 == false)
                return;
            this._SendBtnFlag1 = false;
            var canShare = H52D_Framework.AchieveConfig[eventId][1].isCanShare;
            if (canShare) {
                H52D_Framework.ShareLogic.Instance.ShareAchieven(H52D_Framework.AchievenManger.Instance.achievenType, eventId);
            }
            else {
                H52D_Framework.AchievenManger.Instance.K_ReqAchievementAward(eventId);
            }
            H52D_Framework.OneTimer(1000, Laya.Handler.create(this, function () {
                _this._SendBtnFlag1 = true;
            }), "ClickAchieventBtn");
        };
        AchievementView.prototype.ClickDaytBtn = function (id) {
            var _this = this;
            if (this._SendBtnFlag2 == false)
                return;
            this._SendBtnFlag2 = false;
            H52D_Framework.AchievenManger.Instance.K_ReqDayAchievementAward(id);
            H52D_Framework.OneTimer(1000, Laya.Handler.create(this, function () {
                _this._SendBtnFlag2 = true;
            }), "ClickDaytBtn");
        };
        AchievementView.prototype.CloseUI = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("AchievementView", [H52D_Framework.ViewUpRoot]);
        };
        return AchievementView;
    }(ui.achievement.AchievementViewUI));
    H52D_Framework.AchievementView = AchievementView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=AchievementView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("WroldBossBuffView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_wroldboss.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**世界bossbuff购买 */
    var WroldBossBuffView = /** @class */ (function (_super) {
        __extends(WroldBossBuffView, _super);
        function WroldBossBuffView() {
            var _this = _super.call(this) || this;
            _this.ViewInit();
            return _this;
        }
        WroldBossBuffView.prototype.Addevent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.Btn_close.on(Laya.Event.CLICK, this, this.Btn_clickclose);
            H52D_Framework.Event.RegistEvent('Update_bossbuffView', Laya.Handler.create(this, this.ReshList));
        };
        WroldBossBuffView.prototype.ViewInit = function () {
            this.Buff_list.vScrollBarSkin = "";
            this.ReshList();
            this.Addevent();
        };
        WroldBossBuffView.prototype.ReshList = function () {
            H52D_Framework.WroldBossManager.Instance.Buff_List = [];
            this.Buff_list.array = H52D_Framework.WroldBossManager.Instance.Buff_num();
            this.Buff_list.renderHandler = new Laya.Handler(this, this.Handler);
        };
        WroldBossBuffView.prototype.Handler = function (item, index) {
            var buff_info = H52D_Framework.MarketConfig[3][this.Buff_list.array[index]];
            var buff_price = buff_info.Price;
            var item_Id = buff_info.sellContent[2];
            var Icon = item.getChildByName("buff_icon");
            var buyed = item.getChildByName("buff_buyed");
            var Say = item.getChildByName("buff_say");
            var btn = item.getChildByName("btn_buy");
            var price_icon = btn.getChildByName("buff_price_icon");
            var price_num = btn.getChildByName("buff_price");
            var isBuy = H52D_Framework.WroldBossManager.Instance.Buff_Buy;
            var bool = isBuy[item_Id] == 1 ? true : false;
            buyed.visible = bool;
            btn.visible = !bool;
            if (buff_price[1] == 2) {
                price_icon.skin = "ui_icon/icon_prop_013.png";
            }
            price_num.text = buff_price[2];
            var buff_itemcfg = H52D_Framework.ItemConfig[item_Id];
            var name_Id = buff_itemcfg.dwItemAState;
            Icon.skin = "ui_icon/" + buff_itemcfg.strIconID_B;
            H52D_Framework.SetHtmlStyle(Say, 22, "#ffa5a7", "center");
            if (buyed.visible) {
                H52D_Framework.SetHtmlStyle(Say, 22, "#c5ffa5", "center");
            }
            Say.innerHTML = H52D_Framework.StringInfoConfig[name_Id].s;
            btn.on(Laya.Event.CLICK, this, this.Btn_clickbuy, [3, this.Buff_list.array[index], 1, buff_price]);
        };
        WroldBossBuffView.prototype.Btn_clickclose = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("WroldBossBuffView", [H52D_Framework.ViewUpRoot]);
        };
        /**购买Buff */
        WroldBossBuffView.prototype.Btn_clickbuy = function (type, buff_ID, buff_num, d_num) {
            var my_num = H52D_Framework.BagManager.Instance.getItemNumber(2);
            if (d_num > my_num) {
                var str = H52D_Framework.SysPromptConfig[10014].strPromptInfo;
                H52D_Framework.TipsLogic.Instance.OpenMessageBox(str, Laya.Handler.create(this, function () {
                    H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.SHOP]);
                }));
            }
            else {
                //发送请求 购买buff
                H52D_Framework.WroldBossManager.Instance.Buff_buy(type, buff_ID, buff_num);
            }
        };
        WroldBossBuffView.prototype.Destroy = function () {
            H52D_Framework.WroldBossManager.Instance.Buff_List = [];
            this.offAll();
            H52D_Framework.Event.RemoveEvent('Update_bossbuffView', Laya.Handler.create(this, this.ReshList));
        };
        return WroldBossBuffView;
    }(ui.action.boss.WroldBossBuffViewUI));
    H52D_Framework.WroldBossBuffView = WroldBossBuffView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=WroldBossBuffView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    var WroldBossEndView = /** @class */ (function (_super) {
        __extends(WroldBossEndView, _super);
        function WroldBossEndView() {
            var _this = _super.call(this) || this;
            _this._time = 5;
            _this.ViewInit();
            return _this;
        }
        WroldBossEndView.prototype.ViewInit = function () {
            H52D_Framework.WroldBossManager.Instance.Show = false;
            H52D_Framework.Event.DispatchEvent("UpdateBtnList");
            this.AddEvent();
            this.ViewInfo();
        };
        WroldBossEndView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            //this.Other.on(Laya.Event.CLICK, this, this.Btn_closeclick);
            this.Btn_sure.on(Laya.Event.CLICK, this, this.Btn_closeclick);
        };
        WroldBossEndView.prototype.ViewInfo = function () {
            this.My_hurt.text = H52D_Framework.Format(H52D_Framework.StringInfoConfig[7118].s, H52D_Framework.BattleManager.Instance.TheWordBossDamage);
            H52D_Framework.Tick.Loop(100, this, this.TimeFrame);
        };
        WroldBossEndView.prototype.TimeFrame = function (time) {
            this._time -= 0.1;
            this.Quit_time.text = "自动退出倒计时(" + Math.floor(this._time) + ")";
            if (this._time <= 0) {
                this.Btn_closeclick();
            }
        };
        WroldBossEndView.prototype.Btn_closeclick = function () {
            H52D_Framework.Tick.Clear(this, this.TimeFrame);
            H52D_Framework.UIManager.Instance.DestroyUI("WroldBossEndView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.Event.DispatchEvent("CUSTOMS_RESULT", [false]);
            H52D_Framework.WroldBossManager.Instance.Show = true;
            H52D_Framework.Event.DispatchEvent("UpdateBtnList");
            H52D_Framework.BattleManager.Instance.OpenBattle();
        };
        WroldBossEndView.prototype.Destroy = function () {
            this.offAll();
        };
        return WroldBossEndView;
    }(ui.action.boss.WroldBossEndViewUI));
    H52D_Framework.WroldBossEndView = WroldBossEndView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=WroldBossEndView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("WroldBossRewardView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
    ]);
    var WroldBossRewardView = /** @class */ (function (_super) {
        __extends(WroldBossRewardView, _super);
        function WroldBossRewardView() {
            var _this = _super.call(this) || this;
            _this.Colors = {
                0: "#ffe67b",
                1: "#ffe67b"
            };
            _this.StrokColors = {
                0: "#ffe67b",
                1: "#de6115",
            };
            _this.ViewInit();
            return _this;
        }
        WroldBossRewardView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.Btn_close.on(Laya.Event.CLICK, this, this.Btn_clickclose);
        };
        WroldBossRewardView.prototype.ViewInit = function () {
            this.AddEvent();
            this.ReshHandler();
            this.reward_list.vScrollBarSkin = "";
        };
        WroldBossRewardView.prototype.ReshHandler = function () {
            H52D_Framework.WroldBossManager.Instance.Reward_List = [];
            this.reward_list.array = H52D_Framework.WroldBossManager.Instance.Reward_num();
            this.reward_list.renderHandler = new Laya.Handler(this, this.Handler);
        };
        WroldBossRewardView.prototype.Handler = function (item, index) {
            var _Id = this.reward_list.array[index];
            var _Info = H52D_Framework.GameParamConfig.WorldBossReward[_Id];
            var reward = H52D_Framework.RewardConfig[_Info[2]].reWrad;
            var _next_Info = H52D_Framework.GameParamConfig.WorldBossReward[_Id + 1];
            var rank_num = item.getChildByName("rankNum");
            rank_num.strokeColor = this.StrokColors[index];
            rank_num.color = this.Colors[index];
            var str = "";
            if (!_next_Info) {
                str = _Info[1] + "及以后";
                rank_num.fontSize = 20;
            }
            else {
                str = (_Info[1] + "-" + (_next_Info[1] - 1));
                rank_num.fontSize = 26;
                if (_Id == 1) {
                    str = _Info[1];
                }
            }
            var bg = item.getChildByName("reward_bg"); //
            rank_num.changeText(str);
            for (var key in reward) {
                var icon_bg = item.getChildByName("reward_icon_bg" + key);
                var icon = icon_bg.getChildByName("reward_icon");
                var num = icon_bg.getChildByName("rew_num");
                var name_1 = icon_bg.getChildByName("rew_name");
                var Item_Info = reward[key];
                var path = H52D_Framework.WroldBossManager.Instance.Item_Info(Item_Info[1], Item_Info[2]);
                num.text = Item_Info[3];
                icon_bg.skin = path[1];
                icon.skin = path[0];
                name_1.text = path[2];
                name_1.color = path[3];
            }
        };
        WroldBossRewardView.prototype.Btn_clickclose = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("WroldBossRewardView", [H52D_Framework.ViewUpRoot]);
        };
        WroldBossRewardView.prototype.Destroy = function () {
            this.offAll();
        };
        return WroldBossRewardView;
    }(ui.action.boss.WroldBossRewardViewUI));
    H52D_Framework.WroldBossRewardView = WroldBossRewardView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=WroldBossRewardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("WroldBossView", [
        { url: "res/ui/ui_pet.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_wroldboss.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**世界boss入口 */
    var WroldBossView = /** @class */ (function (_super) {
        __extends(WroldBossView, _super);
        function WroldBossView() {
            var _this = _super.call(this) || this;
            _this.ViewInit();
            return _this;
        }
        WroldBossView.prototype.ViewInit = function () {
            this.Addevent();
            this.ViewInfo();
        };
        WroldBossView.prototype.Addevent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.Btn_Rank.on(Laya.Event.CLICK, this, this.Btn_clickrank);
            this.Btn_Challenge.on(Laya.Event.CLICK, this, this.Btn_clickchallenge);
            this.Btn_Close.on(Laya.Event.CLICK, this, this.Btn_clickclose);
        };
        WroldBossView.prototype.ViewInfo = function () {
            this.Boss_say.text = H52D_Framework.StringInfoConfig[7114].s;
            var monstor = H52D_Framework.MonstorConfig[99998];
            var monsterAin = new H52D_Framework.Avatar(this.Boss_Icon);
            this.Boss_Name.text = H52D_Framework.StringInfoConfig[monstor.NameId].s;
            monsterAin.Load(monstor.strModelId, 1, monstor.modelScale * 1.5, 200, 550, Laya.Handler.create(this, function () {
                monsterAin.Play(1, true, true, function () {
                }, true);
            }));
            this.Hurt_max.text = "最高伤害:" + H52D_Framework.MasterPlayer.Instance.GetEventDayProByType(EventProEnum.NowBossRank);
            this.hurt_bg.width = (this.Hurt_max.width) * 1.1;
        };
        /**关闭界面 */
        WroldBossView.prototype.Btn_clickclose = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("WroldBossView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.ACTION]);
        };
        /**打开排行榜 */
        WroldBossView.prototype.Btn_clickrank = function () {
            H52D_Framework.UIManager.Instance.CreateUI("RankView", [H52D_Framework.ViewUpRoot, 3, 9]);
        };
        /**挑战按钮的点击事件 */
        WroldBossView.prototype.Btn_clickchallenge = function () {
            H52D_Framework.WroldBossManager.Instance.Fight();
        };
        WroldBossView.prototype.Destroy = function () {
            this.offAll();
        };
        return WroldBossView;
    }(ui.action.boss.WroldBossViewUI));
    H52D_Framework.WroldBossView = WroldBossView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=WroldBossView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    var AcitonSettView = /** @class */ (function (_super) {
        __extends(AcitonSettView, _super);
        function AcitonSettView(buf) {
            var _this = _super.call(this) || this;
            _this._hurt = 0;
            _this._time = 5;
            _this._hurt = buf[1];
            _this.ViewInit();
            return _this;
        }
        AcitonSettView.prototype.ViewInit = function () {
            this.AddEvent();
            H52D_Framework.Tick.Loop(100, this, this.ShowTime);
            this.my_hurt.text = H52D_Framework.Format(H52D_Framework.StringInfoConfig[7117].s, this._hurt);
        };
        AcitonSettView.prototype.ShowTime = function () {
            this._time -= 0.1;
            this.quit_time.text = "自动退出倒计时(" + Math.floor(this._time) + ")";
            if (this._time <= 0) {
                this.Btn_quitclick();
            }
        };
        AcitonSettView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.Btn_quit.on(Laya.Event.CLICK, this, this.Btn_quitclick);
        };
        AcitonSettView.prototype.Btn_quitclick = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("AcitonSettView", [H52D_Framework.ViewTipRoot]);
            H52D_Framework.UIManager.Instance.DestroyUI("TopicView", [H52D_Framework.ViewToppestRoot]);
            H52D_Framework.Event.DispatchEvent("Action_sett");
        };
        AcitonSettView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Tick.ClearAll(this);
        };
        return AcitonSettView;
    }(ui.action.topic.AcitonSettViewUI));
    H52D_Framework.AcitonSettView = AcitonSettView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=AcitonSettView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource(" CampDonateView", [
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS },
    ]);
    var CampDonateView = /** @class */ (function (_super) {
        __extends(CampDonateView, _super);
        function CampDonateView() {
            var _this = _super.call(this) || this;
            _this._time = 0;
            _this.AddEvent();
            _this.Info();
            return _this;
        }
        CampDonateView.prototype.AddEvent = function () {
            H52D_Framework.Event.RegistEvent("changetimes", Laya.Handler.create(this, this.Info));
            this.Btn_Close.on(Laya.Event.CLICK, this, this.BtnClick_close);
            this.Other.on(Laya.Event.CLICK, this, this.BtnClick_close);
            this.m_d.on(Laya.Event.CLICK, this, this.Btn_click, [1]);
            this.D_d.on(Laya.Event.CLICK, this, this.Btn_click, [2]);
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
        };
        CampDonateView.prototype.Info = function () {
            if (!H52D_Framework.MasterPlayer.Instance.player.Donatetimes[1]) {
                H52D_Framework.MasterPlayer.Instance.player.Donatetimes[1] = 0;
            }
            var m_tcfg = H52D_Framework.GangDonateConfig[1].consume;
            var d_tcfg = H52D_Framework.GangDonateConfig[2].consume;
            var a = H52D_Framework.GangDonateConfig[1].num - H52D_Framework.MasterPlayer.Instance.player.Donatetimes[1];
            this.m.text = a.toString();
            if (a == 0) {
                this.m.color = "#ff9595";
            }
            this.M_Times.text = "剩余次数:  /" + H52D_Framework.GangDonateConfig[1].num;
            this.money_heat.text = "阵营热度:+" + H52D_Framework.GangDonateConfig[1].heat;
            this.M_num.text = "捐献" + m_tcfg[2] + H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[m_tcfg[1]].dwItemName].s;
            this.times = a;
            this.num_d.text = d_tcfg[2];
            this.D_heat.text = "阵营热度:+" + H52D_Framework.GangDonateConfig[2].heat;
            this.D_num.text = "捐献" + d_tcfg[2] + H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[d_tcfg[1]].dwItemName].s;
            this.num_m.text = m_tcfg[2];
            if (m_tcfg[2] == 1) {
                this.num_m.text = "";
            }
        };
        CampDonateView.prototype.BtnClick_close = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("CampDonateView", [H52D_Framework.ViewUpRoot]);
        };
        CampDonateView.prototype.Btn_click = function (itemId) {
            var nowDate = new Date();
            var time = (nowDate.getDate() * 24 * 60 + nowDate.getHours() * 60 + nowDate.getMinutes()) * 60 + nowDate.getSeconds();
            ;
            if (this._time == 0 || time - this._time > 0.5) {
                this._time = time;
                var iteminfo = H52D_Framework.GangDonateConfig[itemId].consume;
                var play_itemnum = H52D_Framework.BagManager.Instance.getItemNumber(iteminfo[1]);
                var itenname = H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[iteminfo[1]].dwItemName].s;
                var str = H52D_Framework.Format(H52D_Framework.SysPromptConfig[30027].strPromptInfo, itenname);
                if (play_itemnum < iteminfo[2]) {
                    if (itemId == 2) {
                        if (H52D_Framework.IsIOSExamine()) {
                            H52D_Framework.TipsLogic.Instance.OpenMessageBox("钻石不足!");
                            return;
                        }
                        else {
                            var str_1 = H52D_Framework.SysPromptConfig[10009].strPromptInfo;
                            H52D_Framework.TipsLogic.Instance.OpenMessageBox(str_1, Laya.Handler.create(this, function () {
                                H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.SHOP]);
                                H52D_Framework.UIManager.Instance.DestroyUI("CampMainInfo", [H52D_Framework.ViewUpRoot]);
                                H52D_Framework.UIManager.Instance.DestroyUI("CampDonateView", [H52D_Framework.ViewUpRoot]);
                            }));
                        }
                    }
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
                    return;
                }
                if (itemId == 1) {
                    if (this.times < 1) {
                        H52D_Framework.TipsLogic.Instance.OpenSystemTips("捐献次数不足！");
                        return;
                    }
                }
                H52D_Framework.CampManager.Instance.Donate_times(itemId);
            }
            else {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("0.5秒内只能赠送一次");
            }
        };
        CampDonateView.prototype.OnDestroy = function () {
            H52D_Framework.Event.RemoveEvent("changetimes", Laya.Handler.create(this, this.Info));
        };
        return CampDonateView;
    }(ui.camp.CampDonateViewUI));
    H52D_Framework.CampDonateView = CampDonateView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CampDonateView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("CampInfoView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
    ]);
    var CampInfoView = /** @class */ (function (_super) {
        __extends(CampInfoView, _super);
        function CampInfoView(buf) {
            var _this = _super.call(this) || this;
            _this.camp_ID = buf[1];
            _this.bool = buf[2];
            _this.Info();
            _this.AddEvent();
            return _this;
        }
        CampInfoView.prototype.AddEvent = function () {
            this.camp_Btn_join.visible = false;
            this.Look_member.on(Laya.Event.CLICK, this, this.Btn_look);
            this.camp_Btn_join.on(Laya.Event.CLICK, this, this.Btn_Add);
            this.Btn_close.on(Laya.Event.CLICK, this, this.Btn_Clickclose);
            this.Other.on(Laya.Event.CLICK, this, this.Btn_Clickclose);
            this.on(Laya.Event.REMOVED, this, this.Destory);
        };
        CampInfoView.prototype.Info = function () {
            var camplist = H52D_Framework.CampManager.Instance.CampList;
            var nIdx = this.camp_ID;
            var campinfo = H52D_Framework.CampManager.Instance.nCamp(nIdx);
            var camp = H52D_Framework.GangConfig[nIdx];
            this.Camp_icon.skin = "ui_icon/" + camp.stricon;
            this.Camp_name.text = H52D_Framework.StringInfoConfig[camp.nameId].s;
            this.Camp_Level.text = campinfo[3] + "/" + H52D_Framework.CampManager.Instance.Camp_LvMax();
            this.Camp_MemberNum.text = campinfo[2] + "/" + H52D_Framework.GangLevelUpConfig[campinfo[3]].Membership; //阵营人数
            //阵营代码
            if (nIdx == H52D_Framework.MasterPlayer.Instance.player.CampID) {
                this.camp_Btn_join.visible = false;
            }
            if (H52D_Framework.MasterPlayer.Instance.player.CampID == 0) {
                this.camp_Btn_join.label = "加入阵营";
            }
            else {
                this.camp_Btn_join.label = "更换阵营";
            }
            //this.Camp_Level.text=(campinfo.CampLevel).toString();
        };
        /** 查看成员按钮事件 */
        CampInfoView.prototype.Btn_look = function () {
            H52D_Framework.UIManager.Instance.CreateUI("CampMemberView", [H52D_Framework.ViewUpRoot, this.camp_ID]);
            H52D_Framework.CampManager.Instance.GetCampPlayInfo(this.camp_ID);
        };
        /**加入阵营   更换阵营 */
        CampInfoView.prototype.Btn_Add = function () {
            var camp_id = H52D_Framework.MasterPlayer.Instance.player.CampID;
            var iten_num = H52D_Framework.BagManager.Instance.getItemNumber(2);
            if (camp_id == this.camp_ID) {
                this.camp_Btn_join.label = "已加入";
                this.camp_Btn_join.mouseEnabled = false;
            }
            if (camp_id == 0) {
                this.camp_Btn_join.label = "加入阵营";
                H52D_Framework.CampManager.Instance.Camp_Jion(this.camp_ID);
            }
            else {
                this.camp_Btn_join.label = "更换阵营";
                var n_camp = H52D_Framework.CampManager.Instance.nCamp(camp_id);
                var campMaxNum = n_camp[3] * H52D_Framework.GangLevelUpConfig.hip;
                if (campMaxNum > n_camp[2]) {
                    if ("身上的钱满足") {
                        H52D_Framework.CampManager.Instance.Camp_Jion(this.camp_ID);
                    }
                    else {
                        H52D_Framework.TipsLogic.Instance.OpenSystemTips("钻石不足");
                    }
                }
                else {
                    //弹出人数上限 换个阵营					
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips(H52D_Framework.SysPromptConfig[10015].strPromptInfo);
                }
            }
        };
        /**关闭面板 */
        CampInfoView.prototype.Btn_Clickclose = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("CampInfoView", [H52D_Framework.ViewUpRoot]);
        };
        CampInfoView.prototype.Destory = function () {
            this.offAll();
        };
        return CampInfoView;
    }(ui.camp.CampInfoViewUI));
    H52D_Framework.CampInfoView = CampInfoView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CampInfoView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("CampMainInfo", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**阵营主界面 */
    var CampMainInfo = /** @class */ (function (_super) {
        __extends(CampMainInfo, _super);
        function CampMainInfo() {
            var _this = _super.call(this) || this;
            _this.contentId = 6010;
            _this._Info = [];
            _this.Btn_name = {
                CampPlay: ["CampMemberView"],
                CampRank: ["CampRankView"],
                CampDonate: ["CampDonateView"],
                CampReplace: ["ReplaceCampView"],
            };
            _this.Init();
            _this.AddEvent();
            H52D_Framework.Tick.Loop(5000, _this, H52D_Framework.CampManager.Instance.Camp_Info);
            H52D_Framework.Tick.Loop(2500, _this, _this.UpdateShow);
            return _this;
        }
        CampMainInfo.prototype.Init = function () {
            this._camp_Id = H52D_Framework.MasterPlayer.Instance.player.CampID;
            this.CampInfo();
            this.SetCamp_Info();
            this.UpdateShow();
        };
        CampMainInfo.prototype.AddEvent = function () {
            H52D_Framework.Event.RegistEvent("chengehot", Laya.Handler.create(this, this.CampInfo));
            H52D_Framework.Event.RegistEvent("changetimes", Laya.Handler.create(this, this.CampInfo));
            H52D_Framework.Event.RegistEvent("updatecamplist", Laya.Handler.create(this, this.SetCamp_Info));
            this.Btn_Close.on(Laya.Event.CLICK, this, this.BtnClick_Close);
            this.Other.on(Laya.Event.CLICK, this, this.BtnClick_Close);
            this.Btn_CampPlay.on(Laya.Event.CLICK, this, this.GetPlayInfo);
            this.Btn_CampRank.on(Laya.Event.CLICK, this, this.Btn_Click, [this.Btn_name.CampRank]);
            this.Btn_CampDonate.on(Laya.Event.CLICK, this, this.Btn_Click, [this.Btn_name.CampDonate]);
            this.camp_help.on(Laya.Event.CLICK, this, this.OpenView);
            this.Btn_Change.on(Laya.Event.CLICK, this, this.Btn_Click, [this.Btn_name.CampReplace]);
            this.on(Laya.Event.REMOVED, this, this.Destory);
        };
        CampMainInfo.prototype.CampInfo = function () {
            if (this._camp_Id == 0)
                return;
            var ncamp = H52D_Framework.CampManager.Instance.nCamp(this._camp_Id);
            var camp_tcfg = H52D_Framework.GangConfig[this._camp_Id];
            this.camp_name.text = H52D_Framework.StringInfoConfig[camp_tcfg.nameId].s;
            this.camp_icon.skin = "ui_icon/" + camp_tcfg.stricon;
            H52D_Framework.SetHtmlStyle(this.camp_lv, 20, "#9be589", "left");
            this.camp_lv.innerHTML = "阵营等级:" + H52D_Framework.GetHtmlStrByColor(ncamp[3], "#f4ff79");
            H52D_Framework.SetHtmlStyle(this.camp_hot, 20, "#9be589", "left");
            H52D_Framework.SetHtmlStyle(this.camp_hurt, 20, "#9be589", "left");
            var hurt = H52D_Framework.BCampManager.Instance.Camp.vo.attr.GetAttributeValue(2) * H52D_Framework.BCampManager.Instance.Camp.vo.ratio;
            this.camp_hurt.innerHTML = "大船伤害:" + H52D_Framework.GetHtmlStrByColor(Math.floor(hurt).toString(), "#f4ff79");
            var hot_num = H52D_Framework.CampManager.Instance.CampHot;
            if (!hot_num) {
                hot_num = ncamp[4];
            }
            var camp_lv = H52D_Framework.CampManager.Instance.Camp_LvMax();
            var str = H52D_Framework.Format(H52D_Framework.StringInfoConfig[6013].s, H52D_Framework.GetHtmlStrByColor(String(hot_num), "#f4ff79"), H52D_Framework.GangLevelUpConfig[ncamp[3]].GangExp);
            if (camp_lv <= ncamp[3]) {
                str = "已满级";
            }
            this.camp_hot.innerHTML = str;
            H52D_Framework.SetHtmlStyle(this.camp_num, 20, "#9be589", "left");
            this.camp_num.innerHTML = "阵营人数:" + H52D_Framework.GetHtmlStrByColor(ncamp[2], "#f4ff79") + "/" + H52D_Framework.GangLevelUpConfig[ncamp[3]].Membership;
        };
        /**设置阵营日志 */
        CampMainInfo.prototype.SetCamp_Info = function () {
            var infoList = H52D_Framework.CampManager.Instance.LogList;
            this.Camp_Panel.vScrollBarSkin = "";
            this.Camp_Info.height = 0;
            this.Camp_Panel.vScrollBar.value = 0;
            for (var key in infoList) {
                var info = infoList[key];
                var html = new Laya.HTMLDivElement();
                H52D_Framework.SetHtmlStyle(html, 22, H52D_Framework.BaseDefine.CampInfo_Color[info[0]], "left"); //
                html.style.wordWrap = true;
                html.x = 35;
                var Idx = Number(key);
                html.y = 10 + (Idx * 65);
                var str = this.logInfo(info);
                var path = "<img src= 'ui_camp/img-dian-tongyong.png' width='24px' height='24px'></img>";
                html.innerHTML = path + str;
                html.width = 600;
                this.Camp_Info.addChild(html);
                this.Camp_Info.height = (Idx + 1) * 65;
                this.Camp_Panel.vScrollBar.value = html.y;
            }
        };
        CampMainInfo.prototype.logInfo = function (info) {
            var str = "";
            var type = info[0];
            var date = info[1];
            switch (type) {
                case 1:
                    str = H52D_Framework.Format(H52D_Framework.StringInfoConfig[6020].s, H52D_Framework.GetHtmlStrByColor("【" + date[1] + "】", "#e6fefe"));
                    break;
                case 2:
                    str = H52D_Framework.Format(H52D_Framework.StringInfoConfig[6022].s, H52D_Framework.GetHtmlStrByColor("【" + date[1] + "】", "#e6fefe"));
                    break;
                case 3:
                    var name_1 = date[1];
                    var itemType = date[2];
                    var cfg = H52D_Framework.GangDonateConfig[itemType];
                    var n_tcfg = cfg.consume;
                    var n_heat = cfg.heat;
                    var itemName = H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[n_tcfg[1]].dwItemName].s;
                    var itemNumber = n_tcfg[2];
                    str = H52D_Framework.Format(H52D_Framework.StringInfoConfig[6021].s, H52D_Framework.GetHtmlStrByColor("【" + name_1 + "】", "#e6fefe"), itemNumber, itemName, n_heat);
                    break;
            }
            return str;
        };
        CampMainInfo.prototype.BtnClick_Close = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("CampMainInfo", [H52D_Framework.ViewUpRoot]);
        };
        /** */
        CampMainInfo.prototype.Btn_Click = function (name) {
            H52D_Framework.UIManager.Instance.CreateUI(name, [H52D_Framework.ViewUpRoot]);
        };
        CampMainInfo.prototype.OpenView = function () {
            var tvo = new H52D_Framework.TipsVo();
            tvo.title = "阵营说明";
            tvo.contentId = this.contentId;
            H52D_Framework.UIManager.Instance.CreateUI("TipsActionView", [H52D_Framework.ViewToppestRoot, tvo]);
        };
        CampMainInfo.prototype.GetPlayInfo = function () {
            H52D_Framework.CampManager.Instance.GetCampPlayInfo(this._camp_Id);
            H52D_Framework.UIManager.Instance.CreateUI("CampMemberView", [H52D_Framework.ViewUpRoot, this._camp_Id]);
        };
        CampMainInfo.prototype.UpdateShow = function () {
            var bool = H52D_Framework.CampManager.Instance.ShowRed(this.D_red);
            this.D_red.visible = bool;
        };
        CampMainInfo.prototype.Destory = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent("chengehot", Laya.Handler.create(this, this.CampInfo));
            H52D_Framework.Event.RemoveEvent("updatecamplist", Laya.Handler.create(this, this.SetCamp_Info));
            H52D_Framework.Event.RemoveEvent("changetimes", Laya.Handler.create(this, this.CampInfo));
        };
        return CampMainInfo;
    }(ui.camp.CampMainInfoUI));
    H52D_Framework.CampMainInfo = CampMainInfo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CampMainInfo.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("CampMemberView", [
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**成员列表 */
    var CampMemberView = /** @class */ (function (_super) {
        __extends(CampMemberView, _super);
        function CampMemberView(buf) {
            var _this = _super.call(this) || this;
            _this.Camp_play = [];
            _this.Camp_playInfo = {};
            _this.camp_ID = buf[1];
            _this.AddEvent();
            _this.Init();
            _this.arrow_up.visible = false;
            _this.arrow_down.visible = false;
            return _this;
        }
        CampMemberView.prototype.AddEvent = function () {
            //Event.RegistEvent("GetplayInfo", Laya.Handler.create(this, this.SetPlayInfo));
            this.Btn_close.on(Laya.Event.CLICK, this, this.Btn_CloseClick);
            this.background_label.on(Laya.Event.CLICK, this, this.Btn_CloseClick);
            this.arrow_down.on(Laya.Event.CLICK, this, this.Move_List, [10]);
            this.arrow_up.on(Laya.Event.CLICK, this, this.Move_List, [-10]);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.Refresh();
        };
        CampMemberView.prototype.Init = function () {
            this.SetPlayInfo();
            this.Updatelist();
        };
        /** */
        CampMemberView.prototype.SetPlayInfo = function () {
            for (var nIdx in H52D_Framework.CampManager.Instance.Camp_PlayInfO) {
                this.Camp_play.push(Number(nIdx));
            }
            this.Camp_playInfo = H52D_Framework.CampManager.Instance.Camp_PlayInfO;
            this.Updatelist();
        };
        CampMemberView.prototype.Destroy = function () {
            this.offAll();
            //Event.RemoveEvent("GetplayInfo", Laya.Handler.create(this, this.SetPlayInfo));			
        };
        CampMemberView.prototype.Updatelist = function () {
            this.arrow_down.visible = false;
            if (this.Camp_play.length > 8) {
                this.arrow_down.visible = true;
                this.Camp_playlist.vScrollBarSkin = "";
            }
            this.Camp_playlist.repeatY = this.Camp_play.length;
            this.Camp_playlist.array = this.Camp_play;
            this.Camp_playlist.renderHandler = new Laya.Handler(this, this.Camp_PlayList);
        };
        CampMemberView.prototype.Camp_PlayList = function (item, index) {
            if (index < this.Camp_play.length) {
                index += 1;
            }
            //this.Camp_playlist.scrollBar.stopScroll();
            var play = this.Camp_playInfo[index];
            //需要从这个阵营信息中拿到所有玩家信息  然后按照索引 id取出玩家
            var rank_num = item.getChildByName("Rank_Num"); //rankNum
            var play_name = item.getChildByName("play_Name");
            var ranknum = item.getChildByName("rankNum");
            var play_donate = item.getChildByName("play_Donate"); //捐献   
            var play_customs = item.getChildByName("play_Customs"); //关卡    background_img
            var play_info = item.getChildByName("background_label");
            if (index <= 3) {
                rank_num.skin = "ui_rank/img-" + index + "-paiming.png";
                ranknum.visible = false;
            }
            else {
                ranknum.text = index + "";
                rank_num.visible = false;
            }
            play_name.text = play[3];
            if (play[4] > 10000) {
                play_customs.text = play[4] - 10000 + "";
            }
            else {
                play_customs.text = play[4];
            }
            play_donate.text = play[5]; //捐献
            this.camp_name.text = H52D_Framework.MasterPlayer.Instance.player.Name;
            if (play[3] == H52D_Framework.MasterPlayer.Instance.player.Name) {
                this.my_rank.text = index + "名";
                this.play_Donate.text = play[5];
                this.play_su.text = play_customs.text;
            }
            if (this.camp_ID != H52D_Framework.MasterPlayer.Instance.player.CampID) {
                this.my_rank.text = "未加入";
                this.play_Donate.text = "";
                this.play_su.text = "";
            }
            play_info.on(Laya.Event.CLICK, this, this.OpenView, [play[1]]);
        };
        CampMemberView.prototype.Move_List = function (dis) {
            this.Camp_playlist.scrollBar.value += dis * 8.8;
            ;
        };
        /**箭头的显示 隐藏 */
        CampMemberView.prototype.Refresh = function () {
            var _this = this;
            H52D_Framework.Tick.FrameLoop(1, this, function () {
                if (!_this.Camp_playlist.scrollBar) {
                    return;
                }
                _this.Camp_playlist.scrollBar.changeHandler = Laya.Handler.create(_this, function (value) {
                    if (value < 10) {
                        _this.arrow_up.visible = false;
                    }
                    else {
                        _this.arrow_up.visible = true;
                    }
                    if (value > 780) {
                        _this.arrow_down.visible = false;
                    }
                    else {
                        _this.arrow_down.visible = true;
                    }
                });
            });
        };
        CampMemberView.prototype.Btn_CloseClick = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("CampMemberView", [H52D_Framework.ViewUpRoot]);
        };
        /**打开视图 */
        CampMemberView.prototype.OpenView = function (play_id) {
            H52D_Framework.CampManager.Instance.n_Play(play_id);
            H52D_Framework.UIManager.Instance.CreateUI("CampPlayInfo", [H52D_Framework.ViewUpRoot, play_id]);
        };
        return CampMemberView;
    }(ui.camp.CampMemberViewUI));
    H52D_Framework.CampMemberView = CampMemberView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CampMemberView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("CampPlayInfo", [
        { url: "res/ui/ui_head.atlas", type: Laya.Loader.ATLAS },
    ]);
    var CampPlayInfo = /** @class */ (function (_super) {
        __extends(CampPlayInfo, _super);
        function CampPlayInfo() {
            var _this = _super.call(this) || this;
            _this.Play_Info = [];
            _this.Play_Info = H52D_Framework.CampManager.Instance.OntherPlatInfo;
            _this.Add_Event();
            _this.CampInfo();
            return _this;
        }
        CampPlayInfo.prototype.Add_Event = function () {
            this.Btn_Close.on(Laya.Event.CLICK, this, this.BtnClick_close, ["CampPlayInfo"]);
            this.Other.on(Laya.Event.CLICK, this, this.BtnClick_close, ["CampPlayInfo"]);
            this.btn_sure.on(Laya.Event.CLICK, this, this.BtnClick_close, ["CampPlayInfo"]);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
        };
        CampPlayInfo.prototype.BtnClick_close = function (name) {
            H52D_Framework.UIManager.Instance.DestroyUI(name, [H52D_Framework.ViewUpRoot]);
        };
        CampPlayInfo.prototype.Btn_Click = function (name) {
            H52D_Framework.UIManager.Instance.CreateUI(name, [H52D_Framework.ViewUpRoot]);
        };
        CampPlayInfo.prototype.CampInfo = function () {
            this.Play_Name.text = this.Play_Info[1];
            var camp_id = this.Play_Info[3];
            var cuorder = this.Play_Info[4];
            var play_list = H52D_Framework.CampManager.Instance.Camp_PlayInfO;
            var play = this.Play_Info[1];
            var camp_name = H52D_Framework.StringInfoConfig[H52D_Framework.GangConfig[camp_id].nameId].s;
            this.camp_name.text = camp_name;
            this.guanka_num.text = "" + this.Play_Info[4];
            if (this.Play_Info[4] > 10000) {
                this.guanka_num.text = "" + (this.Play_Info[4] - 10000);
            }
            this.hero_num.text = "" + this.Play_Info[5];
            this.pet_num.text = "" + this.Play_Info[6];
            if (!this.Play_Info[5]) {
                this.hero_num.text = "无";
            }
            if (!this.Play_Info[6]) {
                this.pet_num.text = "无";
            }
            if (this.Play_Info[7]) {
                var now = H52D_Framework.Time.serverSecodes - this.Play_Info[7];
                var time = H52D_Framework.GetFormatTime(now);
                this.time_num.text = time + "前";
            }
            else {
                this.time_num.text = "小于 1 分钟";
            }
        };
        CampPlayInfo.prototype.Destroy = function () {
            this.offAll();
        };
        return CampPlayInfo;
    }(ui.camp.CampPlayInfoUI));
    H52D_Framework.CampPlayInfo = CampPlayInfo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CampPlayInfo.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("CampRankView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
    ]);
    var CampRankView = /** @class */ (function (_super) {
        __extends(CampRankView, _super);
        function CampRankView() {
            var _this = _super.call(this) || this;
            _this.Init();
            return _this;
        }
        CampRankView.prototype.Init = function () {
            H52D_Framework.CampManager.Instance.camp_Info = [];
            H52D_Framework.CampManager.Instance.Camp_sort();
            this.Addevent();
            this.Updatelist();
        };
        CampRankView.prototype.Addevent = function () {
            this.btn_close.on(Laya.Event.CLICK, this, this.btn_click);
            this.Other.on(Laya.Event.CLICK, this, this.btn_click);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
        };
        CampRankView.prototype.Updatelist = function () {
            this.camp_list.vScrollBarSkin = "";
            H52D_Framework.CampManager.Instance.SortCamp(H52D_Framework.CampManager.Instance.camp_Info);
            this.camp_list.array = H52D_Framework.CampManager.Instance.camp_Info;
            this.camp_list.repeatY = H52D_Framework.CampManager.Instance.CampId.length;
            this.camp_list.renderHandler = new Laya.Handler(this, this.Camp_handler);
        };
        CampRankView.prototype.Camp_handler = function (item, index) {
            var Idx = H52D_Framework.CampManager.Instance.camp_Info[index][1];
            var n_camp = H52D_Framework.CampManager.Instance.nCamp(Idx);
            var n_tcfg = H52D_Framework.GangConfig[Idx];
            var rank_bg = item.getChildByName("Rank_Num");
            var camp_name = item.getChildByName("Camp_Name"); //rankNum
            var camp_lv = item.getChildByName("camp_lv");
            var rank = item.getChildByName("rankNum");
            var camp_playnum = item.getChildByName("Camp_play_num");
            camp_name.text = H52D_Framework.StringInfoConfig[n_tcfg.nameId].s;
            camp_lv.text = n_camp[3] + "";
            H52D_Framework.SetHtmlStyle(camp_playnum, 20, "#feff79", "center");
            var Indx = index + 1;
            if (Indx <= 3) {
                rank_bg.skin = "ui_rank/img-" + Indx + "-paiming.png";
                rank.visible = false;
            }
            else {
                rank_bg.visible = false;
                rank.text = Indx + "";
            }
            camp_playnum.innerHTML = n_camp[2] + H52D_Framework.GetHtmlStrByColor("/" + H52D_Framework.GangLevelUpConfig[n_camp[3]].Membership, "#fefeff");
            if (H52D_Framework.MasterPlayer.Instance.player.CampID == Idx) { //设置自己阵营的信息
                this.my_campname.text = camp_name.text;
                H52D_Framework.SetHtmlStyle(this.camp_num, 20, "#feff79", "center");
                this.camp_num.innerHTML = n_camp[2] + H52D_Framework.GetHtmlStrByColor("/" + H52D_Framework.GangLevelUpConfig[n_camp[3]].Membership, "#fefeff");
                ;
                this.camp_rank.text = Indx + "";
                this.camp_lv.text = n_camp[3];
            }
            item.on(Laya.Event.CLICK, this, this.Openview, [Idx]);
        };
        CampRankView.prototype.Openview = function (id) {
            H52D_Framework.UIManager.Instance.CreateUI("CampInfoView", [H52D_Framework.ViewUpRoot, id, false]);
        };
        CampRankView.prototype.btn_click = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("CampRankView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.CampManager.Instance.camp_Info = [];
        };
        CampRankView.prototype.Destroy = function () {
            this.offAll();
        };
        return CampRankView;
    }(ui.camp.CampRankViewUI));
    H52D_Framework.CampRankView = CampRankView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CampRankView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("CampView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**阵营界面 */
    var CampView = /** @class */ (function (_super) {
        __extends(CampView, _super);
        function CampView() {
            var _this = _super.call(this) || this;
            _this._campId = [];
            H52D_Framework.CampManager.Instance.Camp_sort();
            _this.arrow_up.visible = false;
            _this.GetCampList();
            _this.nsys_cfg = H52D_Framework.SysPromptConfig;
            _this.AddEvent();
            return _this;
            //this.OnDestory();
        }
        CampView.prototype.AddEvent = function () {
            this.Btn_Close.on(Laya.Event.CLICK, this, this.Btnclick);
            this.arrow_up.on(Laya.Event.CLICK, this, this.Move_List, [-10]);
            this.arrow_down.on(Laya.Event.CLICK, this, this.Move_List, [10]);
            this.Refresh();
            H52D_Framework.Event.RegistEvent('C_ReqAddCamp', Laya.Handler.create(this, this.JoinCamp));
            H52D_Framework.Event.RegistEvent('C_ReqGuildList', Laya.Handler.create(this, this.GetCamp));
            this.on(Laya.Event.REMOVED, this, this.Destory);
            //C_ReqGuildList
        };
        CampView.prototype.Destory = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent('C_ReqAddCamp', Laya.Handler.create(this, this.JoinCamp));
            H52D_Framework.Event.RemoveEvent('C_ReqGuildList', Laya.Handler.create(this, this.JoinCamp));
        };
        CampView.prototype.SortCamp = function () {
            function C_sort(up, down) {
                var hot_up = up[4]; //热度
                var hot_down = down[4];
                if (up[4] == down[4]) {
                    return up[1] < down[1] ? -1 : 1; //根据阵营id排行
                }
                else {
                    return up[4] > down[4] ? -1 : 1;
                }
            }
            H52D_Framework.CampManager.Instance.camp_Info.sort(C_sort);
        };
        CampView.prototype.UpdateList = function () {
            H52D_Framework.CampManager.Instance.SortCamp(H52D_Framework.CampManager.Instance.camp_Info);
            this.Camp_List.vScrollBarSkin = "";
            this._campId = H52D_Framework.CampManager.Instance.CampId;
            this.Camp_List.array = H52D_Framework.CampManager.Instance.camp_Info;
            this.Camp_List.repeatY = this.Camp_List.length;
            this.Camp_List.renderHandler = new Laya.Handler(this, this.CampHander);
        };
        CampView.prototype.CampHander = function (item, index) {
            var ncampID = H52D_Framework.CampManager.Instance.camp_Info[index][1];
            var campinfo_cfg = H52D_Framework.GangConfig[ncampID];
            var camplist = H52D_Framework.CampManager.Instance.CampList;
            var camp_info = camplist[ncampID];
            var member_Num = H52D_Framework.GangLevelUpConfig[camp_info[3]].Membership;
            var paly_campId = H52D_Framework.MasterPlayer.Instance.player.CampID;
            var campname = item.getChildByName("Camp_Name");
            var Btn_join = item.getChildByName("Btn_join");
            var camp_Info = item.getChildByName("Camp_Info");
            var camp_Icon = item.getChildByName("Camp_Icon");
            var camp_playernum = item.getChildByName("Camp_PalyNum");
            H52D_Framework.SetHtmlStyle(camp_playernum, 24, "#f4ff79", "left");
            camp_playernum.innerHTML = camp_info[2] + H52D_Framework.GetHtmlStrByColor("/" + member_Num, "#fefeff");
            campname.text = H52D_Framework.StringInfoConfig[campinfo_cfg.nameId].s;
            camp_Icon.skin = "ui_icon/" + campinfo_cfg.stricon;
            Btn_join.on(Laya.Event.CLICK, this, this.AddCamp, [ncampID, Btn_join]);
            if (paly_campId == ncampID) {
                Btn_join.label = "已加入";
                Btn_join.mouseEnabled = false;
                Btn_join.skin = "ui_camp/btn-jiaruhui-tongyong-n.png";
            }
            var value = this.Camp_List.scrollBar.value;
            camp_Info.on(Laya.Event.CLICK, this, this.Btn_Info, [ncampID]);
        };
        CampView.prototype.Move_List = function (dis) {
            this.Camp_List.scrollBar.value += dis * 8.8;
            //this.Refresh(this.camp_list.scrollBar.value);			
        };
        CampView.prototype.Refresh = function () {
            var _this = this;
            H52D_Framework.Tick.FrameLoop(1, this, function () {
                if (_this.Camp_List && _this.Camp_List.scrollBar) {
                    _this.Camp_List.scrollBar.changeHandler = Laya.Handler.create(_this, function (value) {
                        if (value < 10) {
                            _this.arrow_up.visible = false;
                        }
                        else {
                            _this.arrow_up.visible = true;
                        }
                        if (value > 1700) {
                            _this.arrow_down.visible = false;
                        }
                        else {
                            _this.arrow_down.visible = true;
                        }
                    });
                }
            });
        };
        CampView.prototype.Btnclick = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("CampView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.CampManager.Instance.CampList = [];
            H52D_Framework.CampManager.Instance.BShowFlag = false;
            H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.camp, true);
        };
        /**阵营加入成功 */
        CampView.prototype.JoinCamp = function () {
            var ID = H52D_Framework.MasterPlayer.Instance.player.CampID;
            this._addBtn.skin = "ui_camp/btn-jiaruhui-tongyong-n.png";
            var tex = this.nsys_cfg[10016].strPromptInfo; //提示id  加入成功
            H52D_Framework.TipsLogic.Instance.OpenSystemTips(tex + H52D_Framework.StringInfoConfig[H52D_Framework.GangConfig[ID].nameId].s);
            H52D_Framework.UIManager.Instance.DestroyUI("CampView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.UIManager.Instance.CreateUI("CampMainInfo", [H52D_Framework.ViewUpRoot]);
            //增加阵营大船的伤害
            this.UpdateList();
        };
        /**获取阵营列表信息 */
        CampView.prototype.GetCamp = function () {
            this.UpdateList();
        };
        CampView.prototype.AddCamp = function (id, btn) {
            this._addBtn = btn;
            var camp = H52D_Framework.CampManager.Instance.nCamp(id);
            var Maxnum = H52D_Framework.GangLevelUpConfig[camp[3]].Membership;
            var tex = this.nsys_cfg[10015].strPromptInfo; // 人数已满的提示id
            if (camp[2] == Maxnum) {
                //TipsLogic.Instance.OpenSystemTips("该阵营成员已达上限，换一个阵营加入吧！");
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(tex);
                return;
            }
            H52D_Framework.CampManager.Instance.Camp_Jion(id);
        };
        CampView.prototype.GetCampList = function () {
            H52D_Framework.CampManager.Instance.GetCamp_List();
        };
        CampView.prototype.Btn_Info = function (id) {
            H52D_Framework.UIManager.Instance.CreateUI("CampInfoView", [H52D_Framework.ViewUpRoot, id, true]);
        };
        return CampView;
    }(ui.camp.CampViewUI));
    H52D_Framework.CampView = CampView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CampView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("JoinCampTip", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
    ]);
    var JoinCampTip = /** @class */ (function (_super) {
        __extends(JoinCampTip, _super);
        function JoinCampTip() {
            var _this = _super.call(this) || this;
            _this.Init();
            return _this;
        }
        JoinCampTip.prototype.Init = function () {
            this.AddEvent();
            this.camp_text.text = H52D_Framework.StringInfoConfig[6011].s;
        };
        JoinCampTip.prototype.AddEvent = function () {
            this.btn_jioncamp.on(Laya.Event.CLICK, this, this.OpenView);
            this.btn_cancel.on(Laya.Event.CLICK, this, this.Btn_click);
            this.btn_close.on(Laya.Event.CLICK, this, this.Btn_click);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
        };
        JoinCampTip.prototype.OpenView = function () {
            H52D_Framework.UIManager.Instance.CreateUI("CampView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.UIManager.Instance.DestroyUI("JoinCampTip", [H52D_Framework.ViewUpRoot]);
        };
        JoinCampTip.prototype.Btn_click = function () {
            H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.newGuid, GuidBooleanEnum.camp, true);
            H52D_Framework.UIManager.Instance.DestroyUI("JoinCampTip", [H52D_Framework.ViewUpRoot]);
        };
        JoinCampTip.prototype.Destroy = function () {
            this.offAll();
        };
        return JoinCampTip;
    }(ui.camp.JoinCampTipUI));
    H52D_Framework.JoinCampTip = JoinCampTip;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=JoinCampTip.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ReplaceCampView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**更换阵营界面 */
    var ReplaceCampView = /** @class */ (function (_super) {
        __extends(ReplaceCampView, _super);
        function ReplaceCampView() {
            var _this = _super.call(this) || this;
            _this._camplist = [];
            H52D_Framework.CampManager.Instance.camp_Info = [];
            H52D_Framework.CampManager.Instance.Camp_sort();
            _this._camplist = [];
            for (var key in H52D_Framework.CampManager.Instance.CampList) {
                var Indx = Number(key);
                _this._camplist.push(Indx);
            }
            _this.AddEvent();
            _this.UpdaList();
            return _this;
        }
        ReplaceCampView.prototype.AddEvent = function () {
            H52D_Framework.Event.RegistEvent('C_ReqGuildList', Laya.Handler.create(this, this.UpdaList));
            this.Btn_Close.on(Laya.Event.CLICK, this, this.Btn_CloseClick);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.Other.on(Laya.Event.CLICK, this, this.Btn_CloseClick);
        };
        ReplaceCampView.prototype.UpdaList = function () {
            H52D_Framework.CampManager.Instance.SortCamp(H52D_Framework.CampManager.Instance.camp_Info);
            this.Camp_List.array = this._camplist;
            this.Camp_List.vScrollBarSkin = "";
            this.Camp_List.repeatY = this._camplist.length;
            this.Camp_List.renderHandler = new Laya.Handler(this, this.Render);
        };
        ReplaceCampView.prototype.Render = function (item, index) {
            var Idx = H52D_Framework.CampManager.Instance.camp_Info[index][1];
            var campInfo = H52D_Framework.CampManager.Instance.CampList[Idx];
            var campname = item.getChildByName("Camp_Name");
            var camp_playnum = item.getChildByName("Camp_play_num");
            var img = item.getChildByName("Rank_Num");
            var _text = item.getChildByName("rankNum"); //Btn_Change
            var btn_change = item.getChildByName("Btn_Change");
            campname.text = H52D_Framework.StringInfoConfig[H52D_Framework.GangConfig[campInfo[1]].nameId].s;
            H52D_Framework.SetHtmlStyle(camp_playnum, 22, "#feff79", "center");
            var n_campplaynum = H52D_Framework.GangLevelUpConfig[campInfo[3]].Membership;
            camp_playnum.innerHTML = campInfo[2] + H52D_Framework.GetHtmlStrByColor("/" + n_campplaynum, "#fefeff");
            var Indx = index + 1;
            if (Indx <= 3) {
                img.skin = "ui_rank/img-" + Indx + "-paiming.png";
                _text.visible = false;
            }
            else {
                img.visible = false;
                _text.text = Indx + "";
            }
            if (Idx == H52D_Framework.MasterPlayer.Instance.player.CampID) {
                btn_change.label = "已加入";
                btn_change.gray = true;
                btn_change.mouseEnabled = false;
                this.camp_Name.text = campname.text;
                this.rankNum.text = Indx + "";
                H52D_Framework.SetHtmlStyle(this.camp_num, 22, "#feff79", "center");
                this.camp_num.innerHTML = campInfo[2] + H52D_Framework.GetHtmlStrByColor("/" + n_campplaynum, "#fefeff");
            }
            btn_change.on(Laya.Event.CLICK, this, this.OpenView, [Idx]);
        };
        ReplaceCampView.prototype.OpenView = function (id) {
            H52D_Framework.UIManager.Instance.CreateUI("ReplaceTipView", [H52D_Framework.ViewUpRoot, id]);
        };
        ReplaceCampView.prototype.Btn_CloseClick = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("ReplaceCampView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.CampManager.Instance.camp_Info = [];
        };
        ReplaceCampView.prototype.Destroy = function () {
            this.offAll();
        };
        return ReplaceCampView;
    }(ui.camp.ReplaceCampViewUI));
    H52D_Framework.ReplaceCampView = ReplaceCampView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ReplaceCampView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    var ReplaceTipView = /** @class */ (function (_super) {
        __extends(ReplaceTipView, _super);
        function ReplaceTipView(buf) {
            var _this = _super.call(this) || this;
            _this.camp_Id = buf[1];
            _this.Init();
            return _this;
        }
        ReplaceTipView.prototype.Init = function () {
            var n_camp = H52D_Framework.CampManager.Instance.nCamp(this.camp_Id);
            this.camp_hot.text = n_camp[4] + "";
            this.camp_playnum.text = n_camp[2] + "/" + H52D_Framework.GangLevelUpConfig[n_camp[3]].Membership;
            this.camp_lv.text = n_camp[3] + "";
            var camp = H52D_Framework.GangConfig[this.camp_Id];
            this.camp_icon.skin = "ui_icon/" + camp.stricon;
            this.camp_name.text = H52D_Framework.StringInfoConfig[camp.nameId].s;
            H52D_Framework.SetHtmlStyle(this.DiamondNUm, 20, "#1f5e18", "center");
            this.DiamondNUm.innerHTML = "<img src= 'ui_icon/icon_prop_013.png' width='24px' height='24px'></img>" + H52D_Framework.GameParamConfig.GangChangeConsume;
            this.AddEvent();
        };
        ReplaceTipView.prototype.AddEvent = function () {
            this.look_play.on(Laya.Event.CLICK, this, this.OpenView);
            this.Btn_close.on(Laya.Event.CLICK, this, this.btnclick);
            this.Other.on(Laya.Event.CLICK, this, this.btnclick);
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.btn_change.on(Laya.Event.CLICK, this, this.camp_change);
            H52D_Framework.Event.RegistEvent("ReqchangeCamp", Laya.Handler.create(this, this.camp_jion));
        };
        ReplaceTipView.prototype.btnclick = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("ReplaceTipView", [H52D_Framework.ViewUpRoot]);
        };
        ReplaceTipView.prototype.camp_change = function () {
            var n_camp = H52D_Framework.CampManager.Instance.nCamp(this.camp_Id);
            if (n_camp[2] < H52D_Framework.GangLevelUpConfig[n_camp[3]].Membership) {
                if (H52D_Framework.BagManager.Instance.getItemNumber(2) >= 100) {
                    H52D_Framework.CampManager.Instance.Camp_Jion(this.camp_Id);
                    //打开加入阵营后的主界面
                }
                else {
                    if (H52D_Framework.IsIOSExamine()) {
                        H52D_Framework.TipsLogic.Instance.OpenMessageBox("钻石不足!");
                        return;
                    }
                    else {
                        //弹出金币不足  前往充值按钮
                        var str = H52D_Framework.SysPromptConfig[10014].strPromptInfo;
                        H52D_Framework.TipsLogic.Instance.OpenMessageBox(str, Laya.Handler.create(this, function () {
                            var panel_id = H52D_Framework.ViewUILogic.Instance.OpenPanel;
                            if (panel_id != E_OpenGrade.SHOP) {
                                H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.SHOP]);
                                H52D_Framework.ViewUILogic.Instance.OpenPanel = E_OpenGrade.SHOP;
                                H52D_Framework.UIManager.Instance.DestroyUI("CampMainInfo", [H52D_Framework.ViewUpRoot]);
                                H52D_Framework.UIManager.Instance.DestroyUI("ReplaceCampView", [H52D_Framework.ViewUpRoot]);
                                H52D_Framework.UIManager.Instance.DestroyUI("ReplaceTipView", [H52D_Framework.ViewUpRoot]);
                            }
                            else {
                                H52D_Framework.UIManager.Instance.DestroyUI("CampMainInfo", [H52D_Framework.ViewUpRoot]);
                                H52D_Framework.UIManager.Instance.DestroyUI("ReplaceCampView", [H52D_Framework.ViewUpRoot]);
                                H52D_Framework.UIManager.Instance.DestroyUI("ReplaceTipView", [H52D_Framework.ViewUpRoot]);
                            }
                        }));
                        //TipsLogic.Instance.OpenSystemTips()
                    }
                }
            }
            else {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(H52D_Framework.SysPromptConfig[10015].strPromptInfo); //
            }
        };
        ReplaceTipView.prototype.camp_jion = function () {
            H52D_Framework.TipsLogic.Instance.OpenSystemTips(H52D_Framework.SysPromptConfig[10016].strPromptInfo);
            H52D_Framework.UIManager.Instance.DestroyUI("CampMainInfo", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.UIManager.Instance.DestroyUI("ReplaceCampView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.UIManager.Instance.DestroyUI("ReplaceTipView", [H52D_Framework.ViewUpRoot]);
        };
        ReplaceTipView.prototype.OpenView = function () {
            H52D_Framework.UIManager.Instance.CreateUI("CampMemberView", [H52D_Framework.ViewUpRoot, this.camp_Id]);
            H52D_Framework.CampManager.Instance.GetCampPlayInfo(this.camp_Id);
        };
        ReplaceTipView.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent("ReqchangeCamp", Laya.Handler.create(this, this.camp_jion));
        };
        return ReplaceTipView;
    }(ui.camp.ReplaceTipViewUI));
    H52D_Framework.ReplaceTipView = ReplaceTipView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ReplaceTipView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var ChatFaceResView = /** @class */ (function (_super) {
        __extends(ChatFaceResView, _super);
        function ChatFaceResView() {
            var _this = _super.call(this) || this;
            _this._pageNum = 0;
            _this._offX = 0;
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            _this.list.hScrollBarSkin = "";
            _this.list.array = H52D_Framework.ChatLogic.Inst.FaceList;
            //this.list.repeatX = ChatLogic.Inst.FaceList.length
            _this.list.renderHandler = new Laya.Handler(_this, _this.RenderHandler);
            _this.on(Laya.Event.MOUSE_DOWN, _this, function () {
                _this._offX = Laya.MouseManager.instance.mouseX;
            });
            _this.rights.visible = true;
            _this.lefts.visible = false;
            _this.on(Laya.Event.MOUSE_UP, _this, function () {
                //向左画
                if (_this._offX - Laya.MouseManager.instance.mouseX > 150) {
                    if (_this._pageNum < H52D_Framework.ChatLogic.Inst.FaceList.length - 1) {
                        _this._pageNum++;
                    }
                }
                else if (Laya.MouseManager.instance.mouseX - _this._offX > 150) {
                    if (_this._pageNum > 0) {
                        _this._pageNum--;
                    }
                }
                _this.list.tweenTo(_this._pageNum, 2.0, new Laya.Handler(_this, function () {
                    _this.list.scrollBar.stopScroll();
                    _this.UpdateLeftRight();
                }));
            });
            _this.lefts.on(Laya.Event.CLICK, _this, function () {
                if (_this._pageNum > 0) {
                    _this._pageNum--;
                    _this.list.tweenTo(_this._pageNum, 2.0, new Laya.Handler(_this, function () {
                        _this.list.scrollBar.stopScroll();
                        _this.UpdateLeftRight();
                    }));
                }
            });
            _this.rights.on(Laya.Event.CLICK, _this, function () {
                if (_this._pageNum < H52D_Framework.ChatLogic.Inst.FaceList.length - 1) {
                    _this._pageNum++;
                    _this.list.tweenTo(_this._pageNum, 2.0, new Laya.Handler(_this, function () {
                        _this.list.scrollBar.stopScroll();
                        _this.UpdateLeftRight();
                    }));
                }
            });
            return _this;
        }
        /** 刷新左右按钮 */
        ChatFaceResView.prototype.UpdateLeftRight = function () {
            this.rights.visible = true;
            this.lefts.visible = true;
            if (this._pageNum == 0) {
                this.lefts.visible = false;
            }
            else if (this._pageNum == H52D_Framework.ChatLogic.Inst.FaceList.length - 1) {
                this.rights.visible = false;
            }
        };
        /**  @param callBack:初始化回调(点击表情回调通知点击的图片类型) **/
        ChatFaceResView.prototype.init = function (callBack) {
            this._callBack = callBack;
            this.initEvent();
        };
        /** click事件添加**/
        ChatFaceResView.prototype.initEvent = function () {
        };
        /** click事件移除,便于销毁调用**/
        ChatFaceResView.prototype.removeEvent = function () {
        };
        /**list */
        ChatFaceResView.prototype.RenderHandler = function (item, index) {
            var page = H52D_Framework.ChatLogic.Inst.FaceList[index];
            for (var idx = 0; idx < item._childs.length; idx++) {
                var id = page[idx];
                var itemChild = item.getChildByName("item" + idx);
                if (id != null) {
                    itemChild.visible = true;
                    itemChild.skin = "ui_chat/i_f" + id + ".png";
                    itemChild.on(Laya.Event.CLICK, this, this.onFaceImgClick, [id]);
                }
                else {
                    itemChild.visible = false;
                }
            }
        };
        /** 表情图片点击注册事件  **/
        ChatFaceResView.prototype.onFaceImgClick = function (type, evt) {
            //runWith执行处理器，携带额外数据。"@" + type + "@"就是图片类型
            this._callBack != null && (this._callBack.runWith(["@" + type + "@"]));
        };
        /** 销毁 **/
        ChatFaceResView.prototype.dispose = function () {
            this.removeEvent();
            this.removeSelf();
        };
        ChatFaceResView.prototype.Destroy = function () {
            this.offAll();
        };
        return ChatFaceResView;
    }(ui.Chat.ChatFaceResViewUI));
    H52D_Framework.ChatFaceResView = ChatFaceResView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ChatFaceResView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var ChatLineView = /** @class */ (function (_super) {
        __extends(ChatLineView, _super);
        function ChatLineView() {
            var _this = _super.call(this) || this;
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            return _this;
        }
        ChatLineView.prototype.Init = function (data) {
            this.pos(0, 0);
            this._data = data;
            switch (data.smallChannel) {
                case E_ChatChannel.C_WORLD:
                    this.downBg.skin = "ui_chat/img-duihuakuang-liaotian.png";
                    break;
                case E_ChatChannel.C_CAMP:
                    this.downBg.skin = "ui_chat/img-zijiduihuakuang-liaotian.png";
                    break;
                default:
                    break;
            }
            //角色头像
            if (data.smallChannel != E_ChatChannel.C_SYSTEM) {
                var headId = data.headId;
                if (headId == 0) {
                    this.headImage.skin = "ui_head/icon_ui_01.png";
                }
                else {
                    this.headImage.skin = "ui_icon/" + H52D_Framework.HeroConfig[headId].strIcon;
                }
                this.headImage.on(Laya.Event.CLICK, this, function () {
                    if (data.roleID != H52D_Framework.MasterPlayer.Instance.player.ID) {
                        H52D_Framework.UIManager.Instance.CreateUI("InteractView", [H52D_Framework.ViewUpRoot, data.roleID, data.strName]);
                    }
                });
            }
            else {
                this.headImage.skin = "ui_chat/img-font-xitong.png";
                this.timeLabel.visible = false;
                this.channelLabel.visible = false;
                this.textfieldUp.visible = false;
            }
            // 频道名称
            this.channelLabel.text = ChateNameColor[data.smallChannel][0];
            this.channelLabel.color = ChateNameColor[data.smallChannel][1];
            H52D_Framework.SetHtmlStyle(this.textfieldUp, 20, ChateNameColor[data.smallChannel][1], "middle", true);
            H52D_Framework.SetHtmlStyle(this.textfieldDown, 20, ChateNameColor[data.smallChannel][1], "middle");
            //聊天时间
            this.timeLabel.text = data.time;
            var vipIcon = "";
            if (H52D_Framework.MasterPlayer.Instance.player.ID == data.roleID) {
                H52D_Framework.SetHtmlStyle(this.textfieldUp, 20, "#ffffff", "left", true);
            }
            else {
                H52D_Framework.SetHtmlStyle(this.textfieldUp, 20, "#5a456a", "left", true);
            }
            if (H52D_Framework.MasterPlayer.Instance.player.ID == data.roleID) {
                if (H52D_Framework.MasterPlayer.Instance.player.IsVip) {
                    vipIcon = "<img src= 'ui_camp/icn-vip-jiemian-tongyong.png' width='42px' height='22px'></img>";
                }
                this.textfieldUp.innerHTML = vipIcon + " 我";
                this.downBg.skin = "ui_chat/img-zijiduihuakuang-liaotian.png";
            }
            else {
                if (H52D_Framework.MasterPlayer.Instance.player.getIsVip(data.vipLevel)) {
                    vipIcon = "<img src= 'ui_camp/icn-vip-jiemian-tongyong.png' width='42px' height='22px'></img>";
                }
                this.textfieldUp.innerHTML = vipIcon + data.strName;
                this.downBg.skin = "ui_chat/img-duihuakuang-liaotian.png";
            }
            var msg = data.msg;
            if (msg.search("1~%") != -1) {
                msg = msg.replace("1~%", "");
                var tempArr = msg.split("~");
                var nime = H52D_Framework.GetHtmlStrByColor("【" + H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[tempArr[2]].dwItemName].s + "】", H52D_Framework.BaseDefine.LabelColor1[H52D_Framework.ItemConfig[tempArr[2]].dwItemQuality]);
                var nime1 = H52D_Framework.GetHtmlStrByColor(tempArr[1], H52D_Framework.BaseDefine.LabelColor1[H52D_Framework.ItemConfig[tempArr[2]].dwItemQuality]);
                this.textfieldDown.innerHTML = "赠送" + nime + "给" + nime1;
            }
            else {
                this.textfieldDown.innerHTML = H52D_Framework.ChatLogic.Inst.OnGetChatInfo(data.msg);
            }
        };
        /** 销毁 **/
        ChatLineView.prototype.dispose = function () {
            this.removeSelf();
        };
        ChatLineView.prototype.Destroy = function () {
            this.offAll();
        };
        return ChatLineView;
    }(ui.Chat.ChatLineViewUI));
    H52D_Framework.ChatLineView = ChatLineView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ChatLineView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ChatView", [
        { url: "res/ui/ui_chat.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_head.atlas", type: Laya.Loader.ATLAS },
    ]);
    var ChatView = /** @class */ (function (_super) {
        __extends(ChatView, _super);
        function ChatView() {
            var _this = _super.call(this) || this;
            /**聊天内容条目UI存放容器 **/
            _this._chatLineViewArr = {};
            /**聊天内容上限设置（默认最多30条） **/
            _this._chatLimitInt = {};
            /**聊天内容条目总高度 **/
            _this._chatMsgTotalHeight = {};
            _this.Init();
            _this.InitEvent();
            return _this;
        }
        ChatView.prototype.Update = function () {
            var length = this.chatInfo.text.length;
            if (length >= H52D_Framework.ChatLogic.Inst.GetLetterNumLimit()) {
                this.chatInfo.text = this.chatInfo.text.substr(0, 25);
            }
            if (H52D_Framework.ChatLogic.Inst.GetNewMsgOrder()[E_ChatChannel.C_WORLD] > 0) {
                this.worldpoint.visible = true;
            }
            else {
                this.worldpoint.visible = false;
            }
            if (H52D_Framework.ChatLogic.Inst.GetNewMsgOrder()[E_ChatChannel.C_CAMP] > 0) {
                this.camppoint.visible = true;
            }
            else {
                this.camppoint.visible = false;
            }
            if (this.chatInfo.focus) {
                this.onSelectFaceClick1();
            }
            if (this.chatInfo.focus) {
                if (this.chatInfo.text == "请输入聊天内容") {
                    this.chatInfo.text = "";
                }
            }
            else {
                if (this.chatInfo.text == "") {
                    this.chatInfo.text = "请输入聊天内容";
                }
            }
            if (this.selectFaceClip.name == "show" && this.chatInfo.text == "请输入聊天内容") {
                this.chatInfo.text = "";
            }
        };
        ChatView.prototype.OnCloseBtnClick = function () {
            H52D_Framework.ChatLogic.Inst.SaveChannelChatMsg(this._curChannel, this.chatInfo.text);
            H52D_Framework.UIManager.Instance.DestroyUI("ChatView", [H52D_Framework.ViewUpRoot]);
        };
        /** 初始化聊天内容 **/
        ChatView.prototype.Init = function () {
            for (var index = 0; index < E_ChatChannel.C_CNUM - 1; index++) {
                this._chatLineViewArr[index] = [];
                this._chatLimitInt[index] = H52D_Framework.ChatLogic.Inst.GetChatLineNum(index); //配置表
                this._chatMsgTotalHeight[index] = 0;
                this["chatPanel" + index].vScrollBarSkin = ""; //滚动条隐藏
                this["chatPanel" + index].vScrollBar.isVertical = true; //滚动条的方向为垂直滚动
                this["chatPanel" + index].vScrollBar.elasticBackTime = 600; //设置橡皮筋回弹时间
                this["chatPanel" + index].vScrollBar.elasticDistance = 200; //设置橡皮筋回弹距离
                this["panelBgImage" + index].visible = false;
            }
            this._curChannel = H52D_Framework.ChatLogic.Inst.GetCurChannel();
            H52D_Framework.ChatLogic.Inst.SetNewMsgOrder(this._curChannel);
            H52D_Framework.ChatLogic.Inst.SetCurChannel(this._curChannel);
            this["panelBgImage" + this._curChannel].visible = true;
            //从对象池创建表情UI面板
            this._chatFaceResUI = Laya.Pool.getItemByClass("chatFaceResView", H52D_Framework.ChatFaceResView);
            //初始化回调
            this._chatFaceResUI.init(new Laya.Handler(this, this.onGetFaceType));
            this._chatFaceResUI.y = 876;
            //表情UI面板位置设置
            // if (this._chatFaceResUI) {
            // 	let num: number = G_StageHeight / Laya.Browser.clientHeight;
            // 	this._chatFaceResUI.width = Laya.Browser.clientWidth * num;
            // 	this._chatFaceResUI.backGround.centerX = 0;
            // }
            //表情UI面板添加到聊天室面板
            this.addChild(this._chatFaceResUI);
            //表情UI面板默认为不可访问状态
            this._chatFaceResUI.visible = false; //隐藏显示
            this.btn0.skin = "ui_rank/img-lan-xuan.png";
            this.btn1.skin = "ui_rank/img-lan-weixuan.png";
            if (this._curChannel == E_ChatChannel.C_WORLD) {
                this.btn0.skin = "ui_rank/img-zi-xuan.png";
            }
            else if (this._curChannel == E_ChatChannel.C_CAMP) {
                this.btn1.skin = "ui_rank/img-zi-weixuan.png";
            }
            this.InitPannel();
            this.changePanel();
            H52D_Framework.Tick.FrameLoop(1, this, this.Update);
        };
        ChatView.prototype.InitPannel = function () {
            for (var index = 0; index < E_ChatChannel.C_CNUM - 1; index++) {
                //清除所有Line
                this["chatPanel" + index].destroyChildren();
                this._chatMsgTotalHeight[index] = 0;
                // this.chatInfo.text = ChatLogic.Inst.GetChannelChatMsg(this._curChannel);
                var arr = H52D_Framework.ChatLogic.Inst.GetChatMsg(index);
                if (arr == null || arr.length == 0) {
                    continue;
                }
                for (var i = 0; i < arr.length; i++) {
                    var chatLineUI = Laya.Pool.getItemByClass("chatLineView", H52D_Framework.ChatLineView);
                    chatLineUI.Init(arr[i]);
                    chatLineUI.alpha = 1;
                    this["chatPanel" + index].addChild(chatLineUI);
                    chatLineUI.y = this._chatMsgTotalHeight[index];
                    this._chatLineViewArr[index].push(chatLineUI);
                    this._chatMsgTotalHeight[index] += chatLineUI.height;
                    this["chatPanel" + index].vScrollBar.max = this["chatPanel" + index].contentHeight;
                    this["chatPanel" + index].vScrollBar.value = this["chatPanel" + index].vScrollBar.max;
                }
            }
        };
        /** 事件添加  **/
        ChatView.prototype.InitEvent = function () {
            this.selectFaceClip.on(Laya.Event.CLICK, this, this.onSelectFaceClick);
            this.sendMsgBtn.on(Laya.Event.CLICK, this, this.OnSendClick);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.on(Laya.Event.CLICK, this, this.onSelectFaceClick1);
            this.chatInfo.on(Laya.Event.CLICK, this, this.onSelectFaceClick1);
            this.closeBtn.on(Laya.Event.CLICK, this, this.OnCloseBtnClick);
            this.btn0.on(Laya.Event.CLICK, this, this.OnChannelTabClick, [E_ChatChannel.C_WORLD]);
            this.btn1.on(Laya.Event.CLICK, this, this.OnChannelTabClick, [E_ChatChannel.C_CAMP]);
            H52D_Framework.Event.RegistEvent("UpdateAllPannelEvent", Laya.Handler.create(this, this.UpdateAllPannelEvent));
            H52D_Framework.Event.RegistEvent("RefreshList", Laya.Handler.create(this, this.RefreshList));
        };
        ChatView.prototype.UpdateAllPannelEvent = function (buf) {
            this._curChannel = buf;
            this.InitPannel();
        };
        ChatView.prototype.OnChannelTabClick = function (index) {
            if (index == E_ChatChannel.C_CAMP) {
                if (H52D_Framework.MasterPlayer.Instance.player.CampID == 0 || !H52D_Framework.MasterPlayer.Instance.player.CampID) {
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips(10017);
                    return;
                }
            }
            this._curChannel = index;
            //记录上一个频道输入框中的信息
            H52D_Framework.ChatLogic.Inst.SaveChannelChatMsg(this._curChannel, this.chatInfo.text);
            H52D_Framework.ChatLogic.Inst.SetNewMsgOrder(this._curChannel);
            H52D_Framework.ChatLogic.Inst.SetCurChannel(this._curChannel);
            this.changePanel();
            this.btn0.skin = "ui_rank/img-lan-xuan.png";
            this.btn1.skin = "ui_rank/img-lan-weixuan.png";
            if (index == E_ChatChannel.C_WORLD) {
                this.btn0.skin = "ui_rank/img-zi-xuan.png";
            }
            else if (index == E_ChatChannel.C_CAMP) {
                this.btn1.skin = "ui_rank/img-zi-weixuan.png";
            }
        };
        ChatView.prototype.changePanel = function () {
            this.sendBgImage.visible = true;
            for (var index = 0; index < E_ChatChannel.C_CNUM - 1; index++) {
                this["panelBgImage" + index].visible = false;
            }
            this["panelBgImage" + this._curChannel].visible = true;
            this.chatInfo.text = H52D_Framework.ChatLogic.Inst.GetChannelChatMsg(this._curChannel);
        };
        /** 事件移除，便于销毁调用**/
        ChatView.prototype.removeEvent = function () {
            //移除UI面板打开按钮的click事
            this.selectFaceClip.off(Laya.Event.CLICK, this, this.onSelectFaceClick);
            //移除发送消息按钮的click事件
            this.sendMsgBtn.off(Laya.Event.CLICK, this, this.OnSendClick);
        };
        /**发送消息 */
        ChatView.prototype.OnSendClick = function (evt) {
            //匹配表情后的字符串
            this.chatInfo.text = H52D_Framework.SensitiveWord.Instance.Replace(this.chatInfo.text);
            var chatStr = this.chatInfo.text;
            //检测内容是否为空
            if (chatStr == null || chatStr == "" || chatStr == "请输入聊天内容") {
                this.chatInfo.text = "";
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("发送内容不能为空", 1);
                return;
            }
            //各频道发言间隔
            var nowDate = new Date();
            var timeSeconds = (nowDate.getDate() * 24 * 60 + nowDate.getHours() * 60 + nowDate.getMinutes()) * 60 + nowDate.getSeconds();
            var timeInterval = timeSeconds - H52D_Framework.ChatLogic.Inst.GetChatTime(this._curChannel);
            var restTime;
            switch (this._curChannel) {
                case E_ChatChannel.C_WORLD:
                    H52D_Framework.ChatLogic.Inst.GMCommondMsg(chatStr);
                    // let level = OpenGrade_Cfg[233].Level;
                    // if (KMainHero.Inst.hero.info.level < level) {
                    // 	TipsLogic.Instance.OpenSystemTips(100007, level, "世界聊天");
                    // 	return;
                    // }
                    // let restTime: number = GameParamConfig["worldchanneltime"] - timeInterval;  //nearbytime
                    restTime = 5 - timeInterval; //nearbytime
                    // if (timeInterval < GameParamConfig["worldchanneltime"]) {
                    if (timeInterval < 5) {
                        H52D_Framework.TipsLogic.Instance.OpenSystemTips(10013, restTime);
                        return;
                    }
                    break;
                case E_ChatChannel.C_CAMP:
                    // if (KMainHero.Inst.hero.info.guildId <= 0 || !KMainHero.Inst.hero.info.guildId) {
                    // 	TipsLogic.Instance.OpenSystemTips(100048);
                    // 	return;
                    // }
                    // let restTime: number = GameParamConfig["worldchanneltime"] - timeInterval;  //nearbytime
                    restTime = 5 - timeInterval; //nearbytime
                    // if (timeInterval < GameParamConfig["worldchanneltime"]) {
                    if (timeInterval < 5) {
                        H52D_Framework.TipsLogic.Instance.OpenSystemTips(10013, restTime);
                        return;
                    }
                    break;
                default:
                    break;
            }
            H52D_Framework.RemoteCall.Instance.Send("K_SendChatInfoMsg", this._curChannel, [0, chatStr, {}], GetSig(H52D_Framework.MasterPlayer.Instance.player.ID.toString(), chatStr));
            chatStr = H52D_Framework.ChatLogic.Inst.OnGetChatInfo(this.chatInfo.text);
            //保存最新的聊天时间
            H52D_Framework.ChatLogic.Inst.SaveChatTime(this._curChannel);
            this.chatInfo.text = "";
        };
        /** 重置chatlineUI的所有位置 **/
        ChatView.prototype.onReChatLinePos = function () {
            this._chatMsgTotalHeight[this._curChannel] = 0;
            var chatLineUI;
            for (var i = 0, sz = this._chatLineViewArr[this._curChannel].length; i < sz; i++) {
                chatLineUI = this._chatLineViewArr[this._curChannel][i];
                chatLineUI.y = this._chatMsgTotalHeight[this._curChannel];
                this._chatMsgTotalHeight[this._curChannel] += chatLineUI.height;
            }
        };
        ChatView.prototype.onSelectFaceClick1 = function () {
            if (Laya.MouseManager.instance.mouseY > 876 && Laya.MouseManager.instance.mouseY < 1122) {
                return;
            }
            //如果表情面板为运动状态，则停止onSelectFaceClick方法的执行
            if (this._isFaceMove)
                return;
            //如果UI面板打开按钮的name为show，表示面板为打开状态，点击UI面板打开按钮，将其隐藏
            if (this.selectFaceClip.name == "show") {
                //点击UI面板打开按钮，触发缓动，则面板状态为运动中
                this._isFaceMove = true;
                this.selectFaceClip.name = "hide";
                //设置缓动初始值alpha为1
                this._chatFaceResUI.alpha = 1;
                //缓动：alpha从1开始，经过200毫秒缓动到0，即隐藏状态
                Laya.Tween.to(this._chatFaceResUI, { alpha: 0 }, 200, Laya.Ease.backIn, Laya.Handler.create(this, this.onOperateFaceUI, [false]));
            }
        };
        /** 显示表情选择框 **/
        ChatView.prototype.onSelectFaceClick = function (evt) {
            //如果表情面板为运动状态，则停止onSelectFaceClick方法的执行
            if (this._isFaceMove)
                return;
            //点击UI面板打开按钮，触发缓动，则面板状态为运动中
            this._isFaceMove = true;
            //如果UI面板打开按钮的name为show，表示面板为打开状态，点击UI面板打开按钮，将其隐藏
            if (this.selectFaceClip.name == "show") {
                this.selectFaceClip.name = "hide";
                //设置缓动初始值alpha为1
                this._chatFaceResUI.alpha = 1;
                //缓动：alpha从1开始，经过200毫秒缓动到0，即隐藏状态
                Laya.Tween.to(this._chatFaceResUI, { alpha: 0 }, 200, Laya.Ease.backIn, Laya.Handler.create(this, this.onOperateFaceUI, [false]));
            }
            //如果UI面板的name不为show，表示面板为关闭状态，点击UI面板打开按钮，将其显示
            else {
                this.selectFaceClip.name = "show";
                //设置缓动初始值alpha为0
                this._chatFaceResUI.alpha = 0;
                //缓动：alpha从0开始，经过200毫秒缓动到1，即显示状态
                Laya.Tween.to(this._chatFaceResUI, { alpha: 1 }, 200, Laya.Ease.backOut, Laya.Handler.create(this, this.onOperateFaceUI, [true]));
            }
        };
        /** 缓动完成回调**/
        ChatView.prototype.onOperateFaceUI = function (type) {
            //根据面板显示/隐藏状态，设置面板是否可访问
            this._chatFaceResUI.visible = type;
            //缓动完成，面板运动结束
            this._isFaceMove = false;
        };
        /** 获取点击的表情图片类型 **/
        ChatView.prototype.onGetFaceType = function (type) {
            this.chatInfo.text += type; //将图片类型以字符串的形式显示到输入文本框
        };
        ChatView.prototype.RefreshList = function () {
        };
        ChatView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent("UpdateAllPannelEvent", Laya.Handler.create(this, this.UpdateAllPannelEvent));
            H52D_Framework.Event.RemoveEvent("RefreshList", Laya.Handler.create(this, this.RefreshList));
            H52D_Framework.ChatLogic.Inst.SaveChannelChatMsg(this._curChannel, this.chatInfo.text);
        };
        return ChatView;
    }(ui.Chat.ChatViewUI));
    H52D_Framework.ChatView = ChatView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ChatView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("InteractView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_head.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_interact.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_sign.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
    ]);
    var InteractView = /** @class */ (function (_super) {
        __extends(InteractView, _super);
        function InteractView(buf) {
            var _this = _super.call(this) || this;
            _this._presentCfg = [];
            _this._giveObj = 0;
            _this._roleID = 0;
            _this._roleName = "";
            _this._image = null;
            _this._pageNum = 0;
            _this._offX = 0;
            _this._selected = false;
            _this._time = 0;
            _this._mouseDown = false;
            _this._image = null;
            _this._giveObj = null;
            _this._roleID = buf[1];
            _this._roleName = buf[2];
            _this.Init();
            _this.InitEvent();
            return _this;
        }
        InteractView.prototype.Init = function () {
            this.giveto.text = this._roleName;
            //list
            this._presentCfg = H52D_Framework.InteractLogic.Inst.presentCfg;
            this.list.hScrollBarSkin = "";
            this.list.array = this._presentCfg;
            this.list.renderHandler = new Laya.Handler(this, this.RenderHandler);
            for (var index = 1; index < 6; index++) {
                this["image" + index].visible = false;
            }
            for (var index = 1; index < this._presentCfg.length + 1; index++) {
                this["image" + index].visible = true;
            }
            this["image" + 1].skin = "ui_interact/img-huaye1.png";
        };
        InteractView.prototype.InitEvent = function () {
            var _this = this;
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.giveBtn.on(Laya.Event.CLICK, this, this.OnGive);
            this.close.on(Laya.Event.CLICK, this, function () {
                H52D_Framework.UIManager.Instance.DestroyUI("InteractView", [H52D_Framework.ViewUpRoot]);
            });
            H52D_Framework.Event.RegistEvent("RefreshInteractViewList", Laya.Handler.create(this, this.RefreshInteractViewList));
            this.on(Laya.Event.MOUSE_DOWN, this, function () {
                _this._mouseDown = true;
                _this._offX = Laya.MouseManager.instance.mouseX;
            });
            this.on(Laya.Event.MOUSE_UP, this, function () {
                H52D_Framework.Debugger.Log("MOUSE_UP");
                if (!_this._mouseDown)
                    return;
                _this._mouseDown = false;
                //向左画
                if (_this._offX - Laya.MouseManager.instance.mouseX > 150) {
                    if (_this._pageNum < _this._presentCfg.length - 1) {
                        _this._pageNum++;
                    }
                }
                else if (Laya.MouseManager.instance.mouseX - _this._offX > 150) {
                    if (_this._pageNum > 0) {
                        _this._pageNum--;
                    }
                }
                _this.list.tweenTo(_this._pageNum, 2.0, new Laya.Handler(_this, function () {
                    _this.list.scrollBar.stopScroll();
                    _this._image.visible = true;
                    _this._selected = true;
                    for (var index = 1; index < _this._presentCfg.length + 1; index++) {
                        _this["image" + index].skin = "ui_interact/img-huaye2.png";
                    }
                    var i = _this._pageNum + 1;
                    _this["image" + i].skin = "ui_interact/img-huaye1.png";
                }));
            });
            this.on(Laya.Event.MOUSE_OUT, this, function () {
                H52D_Framework.Debugger.Log("MOUSE_OUT");
                if (!_this._mouseDown)
                    return;
                _this._mouseDown = false;
                //向左画
                if (_this._offX - Laya.MouseManager.instance.mouseX > 150) {
                    if (_this._pageNum < _this._presentCfg.length - 1) {
                        _this._pageNum++;
                    }
                }
                else if (Laya.MouseManager.instance.mouseX - _this._offX > 150) {
                    if (_this._pageNum > 0) {
                        _this._pageNum--;
                    }
                }
                _this.list.tweenTo(_this._pageNum, 2.0, new Laya.Handler(_this, function () {
                    _this.list.scrollBar.stopScroll();
                    _this._image.visible = true;
                    _this._selected = true;
                    for (var index = 1; index < _this._presentCfg.length + 1; index++) {
                        _this["image" + index].skin = "ui_interact/img-huaye2.png";
                    }
                    var i = _this._pageNum + 1;
                    _this["image" + i].skin = "ui_interact/img-huaye1.png";
                }));
            });
        };
        InteractView.prototype.Destroy = function () {
            this.offAll();
            Laya.timer.clearAll(this);
            H52D_Framework.Event.RemoveEvent("RefreshInteractViewList", Laya.Handler.create(this, this.RefreshInteractViewList));
        };
        InteractView.prototype.OnGive = function () {
            var _this = this;
            if (H52D_Framework.BagManager.Instance.getItemNumber(this._giveObj["itemId"]) > 0) {
                var nowDate = new Date();
                var time = (nowDate.getDate() * 24 * 60 + nowDate.getHours() * 60 + nowDate.getMinutes()) * 60 + nowDate.getSeconds();
                ;
                if (this._time == 0 || time - this._time > 1) {
                    this._time = time;
                    H52D_Framework.RemoteCall.Instance.Send("K_ReqGiveGifts", this._roleID, Number(this._giveObj["presentId"]));
                }
                else {
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips("一秒内只能赠送一次");
                }
            }
            else {
                if (H52D_Framework.BagManager.Instance.getItemNumber(this._giveObj["cost"][1]) > this._giveObj["cost"][2]) {
                    var nowDate = new Date();
                    var time = (nowDate.getDate() * 24 * 60 + nowDate.getHours() * 60 + nowDate.getMinutes()) * 60 + nowDate.getSeconds();
                    ;
                    if (this._time == 0 || time - this._time > 1) {
                        this._time = time;
                        H52D_Framework.RemoteCall.Instance.Send("K_ReqGiveGifts", this._roleID, Number(this._giveObj["presentId"]));
                    }
                    else {
                        H52D_Framework.TipsLogic.Instance.OpenSystemTips("一秒内只能赠送一次");
                    }
                }
                else {
                    if (H52D_Framework.IsIOSExamine()) {
                        H52D_Framework.TipsLogic.Instance.OpenMessageBox("钻石不足!");
                        return;
                    }
                    else {
                        H52D_Framework.TipsLogic.Instance.OpenMessageBox("前往充值", Laya.Handler.create(this, function () {
                            H52D_Framework.UIManager.Instance.DestroyUI("InteractView", [H52D_Framework.ViewUpRoot]);
                            H52D_Framework.UIManager.Instance.DestroyUI("RankView", [H52D_Framework.ViewUpRoot]);
                            H52D_Framework.UIManager.Instance.DestroyUI("ChatView", [H52D_Framework.ViewUpRoot]);
                            H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.SHOP]);
                            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.BOTTOM_SET_PANEL);
                            H52D_Framework.OneTimer(500, Laya.Handler.create(_this, function () {
                                H52D_Framework.Event.DispatchEvent("toGemShop");
                            }));
                        }), Laya.Handler.create(this, function () {
                        }));
                    }
                }
            }
        };
        InteractView.prototype.RefreshInteractViewList = function () {
            // this._selected = false;
            this.list.refresh();
        };
        /**list */
        InteractView.prototype.RenderHandler = function (item, index) {
            var page = this._presentCfg[index];
            for (var m = 0; m < item._childs.length; m++) {
                item._childs[m].visible = false;
            }
            for (var key in page) {
                var obj = page[key];
                var box = item._childs[key];
                box.visible = true;
                //---------------------------------
                var selecticon = box.getChildByName("selecticon");
                var giftname = box.getChildByName("giftname");
                var gifticon = box.getChildByName("gifticon");
                var giftnum = box.getChildByName("giftnum");
                var charm = box.getChildByName("charm");
                var gold = box.getChildByName("gold");
                var goldnum = box.getChildByName("goldnum");
                selecticon.visible = false;
                if ((index == 0 && Number(key) == 0) && (this._giveObj == null)) {
                    this._image = selecticon;
                    this._giveObj = obj;
                }
                var itemID = obj.itemId;
                giftname.text = H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[itemID].dwItemName].s;
                giftname.color = H52D_Framework.BaseDefine.LabelColor[H52D_Framework.ItemConfig[itemID].dwItemQuality];
                gifticon.skin = H52D_Framework.GetIcon(H52D_Framework.ItemConfig[itemID].strIconID_B);
                giftnum.text = H52D_Framework.BagManager.Instance.getItemNumber(itemID) + "";
                // if ((this._giveObj != null) && (BagManager.Instance.getItemNumber(this._giveObj.itemId))) {
                // 	if( this._giveObj == obj ){
                // 		this._giveObj = obj;
                // 		this._image = selecticon;
                // 		selecticon.visible = true;
                // 		this._selected = true;
                // 	}
                // } else {
                if (H52D_Framework.BagManager.Instance.getItemNumber(itemID) > 0 && !this._selected) {
                    this._giveObj = obj;
                    this._image = selecticon;
                    selecticon.visible = true;
                    this._selected = true;
                }
                // }
                if (obj.charm >= 0) {
                    charm.text = "魅力+" + obj.charm;
                }
                else {
                    charm.text = "魅力" + obj.charm;
                }
                var cost = obj.cost;
                gold.skin = H52D_Framework.GetIcon(H52D_Framework.ItemConfig[cost[1]].strIconID_B);
                goldnum.text = cost[2];
                box.on(Laya.Event.CLICK, this, this.OnGift, [{ 1: obj, 2: selecticon }]);
                if (index == this._presentCfg.length - 1 && Number(key) == (H52D_Framework.ObjLength(page) - 1)) {
                    this._image.visible = true;
                    this._selected = true;
                }
            }
        };
        /**
         * 技能详情
         */
        InteractView.prototype.OnGift = function (buf) {
            if (this._image) {
                this._image.visible = false;
            }
            this._giveObj = buf[1];
            this._image = buf[2];
            if (buf[2]) {
                buf[2].visible = true;
            }
        };
        return InteractView;
    }(ui.Chat.InteractViewUI));
    H52D_Framework.InteractView = InteractView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=InteractView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var LinkView = /** @class */ (function (_super) {
        __extends(LinkView, _super);
        function LinkView() {
            var _this = _super.call(this) || this;
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            return _this;
        }
        LinkView.prototype.Destroy = function () {
            this.offAll();
        };
        return LinkView;
    }(ui.Chat.LinkViewUI));
    H52D_Framework.LinkView = LinkView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=LinkView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ActiveBgView", [
        { url: "res/ui/ui_consumer.atlas", type: Laya.Loader.ATLAS },
    ]);
    /***活动主界面 */
    var ActiveBgView = /** @class */ (function (_super) {
        __extends(ActiveBgView, _super);
        function ActiveBgView(params) {
            var _this = _super.call(this) || this;
            //当前入口的index
            _this._entranceIndex = 0;
            _this._enterceType = null;
            //当前选中的tab页index
            _this._curSelectIndex = -1;
            _this._listChildArr = [];
            _this._entranceIndex = params[1];
            _this._enterceType = params[2];
            _this.InitView();
            _this.AddEvent();
            return _this;
        }
        ActiveBgView.prototype.InitView = function () {
            var _this = this;
            this._listChildArr = [];
            this.top_list.hScrollBarSkin = "";
            this._oActivityList = H52D_Framework.OActivityLogic.Instance.openList[this._entranceIndex];
            var arr = [];
            for (var i = 0; i < this._oActivityList.length; i++) {
                var cls = this._oActivityList[i];
                var iconPath = "ui_consumer/" + cls.icon;
                arr.push({ tabBtn: { skin: iconPath, label: cls.tabName } });
            }
            if (this.top_list.renderHandler) {
                this.top_list.renderHandler.clear();
                this.top_list.renderHandler = null;
            }
            //this.top_list.repeatX = arr.length;
            this.top_list.array = arr;
            this.top_list.renderHandler = new Laya.Handler(this, this.OnListClick, [Laya.Handler.create(this, function () {
                    if (_this._enterceType == null) {
                        _this.OnClickTab(0);
                    }
                    else {
                        // 默认加载选中的界面
                        _this.OnClickTab(_this._enterceType);
                    }
                })]);
        };
        ActiveBgView.prototype.AddEvent = function () {
            this.btn_close.on(Laya.Event.CLICK, this, this.Btn_close);
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            H52D_Framework.Event.RegistEvent('CloseOActivityView', Laya.Handler.create(this, this.CloseOActivityView));
        };
        ActiveBgView.prototype.Btn_close = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("ActiveBgView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.Event.DispatchEvent("UpdateOActivitysEntrance");
        };
        // 切换页签
        ActiveBgView.prototype.OnClickTab = function (index) {
            var _this = this;
            //同一个页面不操作
            if (index == this._curSelectIndex)
                return;
            this._curSelectIndex = index;
            // 当前页面拥有的功能类型
            var type = this._oActivityList[index].type;
            //this.top_list.array = { tabBtn: { skin: iconPath, label: cls.tabName } }
            for (var i = 0; i < this.top_list.array.length; i++) {
                this._listChildArr[i]._childs[0].alpha = this._curSelectIndex == i ? 1 : 0.7;
            }
            //this.top_list.tweenTo(this._curSelectIndex);
            var viewName = OActivityViewName[type];
            H52D_Framework.UIManager.Instance.CreateUI(viewName, [H52D_Framework.ViewUpRoot, type], Laya.Handler.create(this, function (view) {
                if (_this.destroyed) {
                    view.destroy(true);
                }
                else {
                    if (_this.ChildBox._childs.length > 0) {
                        _this.ChildBox._childs[0].Destroy();
                    }
                    _this.ChildBox.destroyChildren();
                    _this.ChildBox.addChild(view);
                }
            }));
        };
        // 界面1点击list控件
        ActiveBgView.prototype.OnListClick = function (callBack, item, index) {
            this._listChildArr.push(item);
            item.on(Laya.Event.CLICK, this, this.OnClickTab, [index, item]);
            var arr = this.top_list.array;
            var icon = item.getChildByName("icon");
            var name = item.getChildByName("name");
            icon.skin = arr[index].tabBtn.skin;
            name.text = arr[index].tabBtn.label;
            //加载完成再执行
            if (this._listChildArr.length == this.top_list.length) {
                callBack.run();
            }
        };
        ActiveBgView.prototype.CloseOActivityView = function (type) {
            //正在查看此界面
            var bLook = false;
            if (this._oActivityList[this._curSelectIndex]) {
                bLook = this._oActivityList[this._curSelectIndex].type == type;
            }
            for (var i = this._oActivityList.length - 1; i >= 0; i--) {
                if (this._oActivityList[i]["type"] == type) {
                    this._oActivityList.splice(i, 1);
                }
            }
            //如果一个页签都没了，这个界面就不需要了
            if (this._oActivityList.length <= 0) {
                this.OnDestroy();
                return;
            }
            this.InitView();
        };
        // 退出
        ActiveBgView.prototype.OnDestroy = function () {
            this.offAll();
            if (this.ChildBox._childs.length > 0) {
                this.ChildBox._childs[0].Destroy();
            }
            this.ChildBox.destroyChildren();
            H52D_Framework.Event.RemoveEvent('CloseOActivityView', Laya.Handler.create(this, this.CloseOActivityView));
            H52D_Framework.UIManager.Instance.DestroyUI("OActivityBgView", [H52D_Framework.ViewUpRoot]);
        };
        return ActiveBgView;
    }(ui.consumer.ActiveBgViewUI));
    H52D_Framework.ActiveBgView = ActiveBgView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ActiveBgView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**每日累消*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("DiamondView", [
        { url: "res/ui/ui_consumer.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
    ]);
    /***消耗钻石领取奖励   每日累消 */
    var DiamondView = /** @class */ (function (_super) {
        __extends(DiamondView, _super);
        function DiamondView() {
            var _this = _super.call(this) || this;
            _this.AddEvent();
            _this.Initview();
            return _this;
        }
        DiamondView.prototype.AddEvent = function () {
            H52D_Framework.Event.RegistEvent("resh_diamond", Laya.Handler.create(this, this.addListener));
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
        };
        DiamondView.prototype.Initview = function () {
            this.D_list.array = H52D_Framework.DEverydayManager.Instance.GetInfoArr();
            this.ReshHandle();
            this.D_list.vScrollBarSkin = "";
        };
        DiamondView.prototype.addListener = function () {
            this.ReshHandle();
        };
        DiamondView.prototype.ReshHandle = function () {
            this.D_list.repeatY = this.D_list.array.length;
            this.D_list.renderHandler = new Laya.Handler(this, this.Handler);
        };
        DiamondView.prototype.Handler = function (item, index) {
            var nIdx = this.D_list.array[index];
            var D_num = H52D_Framework.DEverydayManager.Instance.Dnum;
            var action_id = H52D_Framework.DEverydayManager.Instance.ActionData.id;
            var data = H52D_Framework.DEverydayManager.Instance.ActionData.award;
            var d_num = data[nIdx].value;
            var shop = data[nIdx].items;
            var btn = item.getChildByName("btn_receive");
            var say = item.getChildByName("D_say");
            var getbag = item.getChildByName("reced");
            H52D_Framework.SetHtmlStyle(say, 20, "#ffea6d", "left");
            var num = D_num + "/" + d_num;
            var str = H52D_Framework.StringInfoConfig[7094].s;
            var bool = H52D_Framework.DEverydayManager.Instance.Dnum > d_num ? true : false;
            say.innerHTML = H52D_Framework.Format(H52D_Framework.StringInfoConfig[7094].s, d_num, H52D_Framework.GetHtmlStrByColor(D_num, "#ff7a6d"), H52D_Framework.GetHtmlStrByColor(d_num, "#ff7a6d"));
            if (bool) {
                say.innerHTML = H52D_Framework.Format(str, d_num, H52D_Framework.GetHtmlStrByColor(D_num, "#90f96f"), H52D_Framework.GetHtmlStrByColor(d_num, "#90f96f"));
            }
            btn.gray = !bool;
            btn.mouseEnabled = bool;
            for (var key in shop) {
                var icon_bg = item.getChildByName("item_icon" + key);
                var icon = icon_bg.getChildByName("item_icon");
                var name_1 = icon_bg.getChildByName("item_name");
                var item_num = icon_bg.getChildByName("item_num");
                var Item = shop[key];
                item_num.text = Item[3];
                if (item_num.text == "1") {
                    item_num.text = "";
                }
                var ShopInfo = H52D_Framework.ItemConfig[Item[2]];
                var path = "ui_icon/" + ShopInfo.strIconID_B;
                icon.skin = path;
                name_1.text = H52D_Framework.StringInfoConfig[ShopInfo.dwItemName].s;
                name_1.color = H52D_Framework.BaseDefine.LabelColor1[ShopInfo.dwItemQuality];
                icon_bg.skin = H52D_Framework.BaseDefine.HeroQualityList[ShopInfo.dwItemQuality];
            }
            var Istrue = H52D_Framework.DEverydayManager.Instance.LingQu[nIdx] == 1 ? false : true;
            btn.visible = Istrue;
            getbag.visible = !Istrue;
            btn.on(Laya.Event.CLICK, this, this.Btn_receive, [action_id, nIdx]);
        };
        DiamondView.prototype.Btn_receive = function (type, id) {
            H52D_Framework.OActivityLogic.Instance.K_GetActivityAwardReq(type, id);
        };
        DiamondView.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.DEverydayManager.Instance.ShowEff = false;
            H52D_Framework.DEverydayManager.Instance.ActionArr = [];
        };
        DiamondView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.DEverydayManager.Instance.ShowEff = false;
            H52D_Framework.Event.RemoveEvent("resh_diamond", Laya.Handler.create(this, this.addListener));
            H52D_Framework.DEverydayManager.Instance.ActionArr = [];
        };
        return DiamondView;
    }(ui.consumer.DiamondViewUI));
    H52D_Framework.DiamondView = DiamondView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=DiamondView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("EverydayMoneyView", [
        { url: "res/ui/ui_consumer.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
    ]);
    /***每日累充 */
    var EverydayMoneyView = /** @class */ (function (_super) {
        __extends(EverydayMoneyView, _super);
        function EverydayMoneyView() {
            var _this = _super.call(this) || this;
            _this.InitView();
            _this.AddEvent();
            return _this;
        }
        EverydayMoneyView.prototype.InitView = function () {
            this.lay_outlist.vScrollBarSkin = "";
            this.Reshlist();
            this.ViewInfo();
            this.lay_outlist.repeatY = this.lay_outlist.array.length;
        };
        EverydayMoneyView.prototype.ViewInfo = function () {
            this.showmoney.text = "今日已充值:" + H52D_Framework.mEverydayManager.Instance.MyMoney;
            this.say.text = H52D_Framework.StringInfoConfig[7081].s;
        };
        EverydayMoneyView.prototype.AddEvent = function () {
            H52D_Framework.Event.RegistEvent("UpdateView_everydaymoney", Laya.Handler.create(this, this.Reshlist));
            this.on(Laya.Event.REMOVED, this, this.Destroy);
        };
        EverydayMoneyView.prototype.Reshlist = function () {
            H52D_Framework.mEverydayManager.Instance.Activonarr = [];
            this.lay_outlist.array = H52D_Framework.mEverydayManager.Instance.GetArr();
            this.lay_outlist.renderHandler = new Laya.Handler(this, this.Handler);
        };
        EverydayMoneyView.prototype.Handler = function (item, index) {
            var id = this.lay_outlist.array[index];
            var itemInfo = H52D_Framework.mEverydayManager.Instance.ActionData.award[id];
            var action_id = H52D_Framework.mEverydayManager.Instance.ActionData.id;
            var shop = itemInfo.items[1];
            var nheroID = H52D_Framework.ItemConfig[shop[2]].heroId;
            var n_tcfg = H52D_Framework.HeroConfig[nheroID];
            var pos = n_tcfg.position;
            var name = item.getChildByName("item_name");
            var lock = item.getChildByName("lock");
            var bg = item.getChildByName("item_bg");
            var iteminfo = item.getChildByName("iteminfo");
            var icon = iteminfo.getChildByName("item_icon");
            var btn = item.getChildByName("btn_isgo");
            var btn_label = btn.getChildByName("btn_label");
            var item_num = iteminfo.getChildByName("item_num");
            var btn_lingqu = btn.getChildByName("lab_lingqu");
            var bool = H52D_Framework.mEverydayManager.Instance.MyMoney >= itemInfo.value ? true : false;
            btn_label.visible = !bool;
            btn_lingqu.visible = bool;
            item_num.text = shop[3];
            item_num.color = H52D_Framework.BaseDefine.LabelColor1[n_tcfg.quality];
            var a = H52D_Framework.mEverydayManager.Instance.Lingqu;
            if (H52D_Framework.mEverydayManager.Instance.Lingqu[id] == 1) {
                btn_lingqu.text = "已领取";
            }
            lock.text = H52D_Framework.Format(H52D_Framework.StringInfoConfig[7082].s, itemInfo.value, H52D_Framework.mEverydayManager.Instance.MyMoney, itemInfo.value);
            bg.skin = H52D_Framework.BaseDefine.HeroAllinfo_bg[n_tcfg.quality];
            name.text = H52D_Framework.StringInfoConfig[n_tcfg.name].s;
            name.color = H52D_Framework.BaseDefine.LabelColor[n_tcfg.quality];
            var heroAin = new H52D_Framework.Avatar(icon);
            heroAin.Load(n_tcfg.strFacadeModel, 1, n_tcfg.modelScale * 2.6, pos[1], pos[2], Laya.Handler.create(this, function () {
                heroAin.Play(1, true, true, function () {
                }, true);
            }));
            iteminfo.on(Laya.Event.CLICK, this, this.OpenView, [nheroID]);
            if (bool) {
                btn.on(Laya.Event.CLICK, this, this.Btn_lingqu, [action_id, id, shop[3]]);
            }
            else {
                btn.on(Laya.Event.CLICK, this, this.GoShop);
            }
        };
        EverydayMoneyView.prototype.OpenView = function (nheroID) {
            H52D_Framework.HeroManager.Instance.OpenView(nheroID);
        };
        EverydayMoneyView.prototype.GoShop = function () {
            H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.SHOP]);
            H52D_Framework.OneTimer(500, Laya.Handler.create(this, function () {
                H52D_Framework.Event.DispatchEvent("toGemShop");
                H52D_Framework.UIManager.Instance.DestroyUI("ActiveBgView", [H52D_Framework.ViewUpRoot]);
            }));
        };
        EverydayMoneyView.prototype.Btn_lingqu = function (type, id, num) {
            H52D_Framework.OActivityLogic.Instance.K_GetActivityAwardReq(type, id, num);
        };
        EverydayMoneyView.prototype.ShowItem = function () {
            H52D_Framework.UIManager.Instance.CreateUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot]);
        };
        EverydayMoneyView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.mEverydayManager.Instance.Activonarr = [];
        };
        EverydayMoneyView.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.mEverydayManager.Instance.Activonarr = [];
            H52D_Framework.Event.RemoveEvent("UpdateView_everydaymoney", Laya.Handler.create(this, this.Reshlist));
        };
        return EverydayMoneyView;
    }(ui.consumer.EverydayMoneyViewUI));
    H52D_Framework.EverydayMoneyView = EverydayMoneyView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=EverydayMoneyView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("HeroStarPeckView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_consumer.atlas", type: Laya.Loader.ATLAS },
    ]);
    var HeroStarPeckView = /** @class */ (function (_super) {
        __extends(HeroStarPeckView, _super);
        function HeroStarPeckView() {
            var _this = _super.call(this) || this;
            _this.ViewInit();
            return _this;
        }
        HeroStarPeckView.prototype.ViewInit = function () {
            this.List_peck.vScrollBarSkin = "";
            this.ViewEvent();
            this.ARR();
            this.List_handle();
        };
        HeroStarPeckView.prototype.ViewEvent = function () {
            this.Btn_close.on(Laya.Event.CLICK, this, this.Btnclick_close);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
        };
        HeroStarPeckView.prototype.ARR = function () {
            this.List_peck.array = [];
            for (var key in H52D_Framework.HeroManager.Instance.HeroPeck) {
                var nID = H52D_Framework.HeroManager.Instance.HeroPeck[key];
                var bool = H52D_Framework.HeroManager.Instance.IsActive(nID);
                var time = H52D_Framework.Time.serverSecodes - H52D_Framework.HeroManager.Instance.GetHeroPecktime(nID);
                var bool_s = time > 0 ? true : false;
                if (bool && !bool_s && time) {
                    this.List_peck.array.push(nID);
                }
            }
            if (this.List_peck.array.length > 0) {
                H52D_Framework.Event.DispatchEvent("UpdateBtnList");
            }
            else {
                H52D_Framework.HeroManager.Instance.PeckIcon = false;
                this.Btnclick_close();
            }
        };
        HeroStarPeckView.prototype.Sort_heroPeck = function () {
            function tsort(left, right) {
                var left_time = H52D_Framework.HeroManager.Instance.GetHeroPecktime(left);
                var right_time = H52D_Framework.HeroManager.Instance.GetHeroPecktime(right);
                return left_time - right_time;
            }
            this.List_peck.array.sort(tsort);
        };
        HeroStarPeckView.prototype.List_handle = function () {
            this.Sort_heroPeck();
            this.List_peck.repeatY = this.List_peck.array.length;
            this.List_peck.renderHandler = new Laya.Handler(this, this.Handle);
        };
        HeroStarPeckView.prototype.Handle = function (item, index) {
            var _this = this;
            var nId = this.List_peck.array[index];
            var peck_cfg = H52D_Framework.HeroPeckConfig[nId];
            var time = item.getChildByName("Shop_time");
            var hero_modle_d = item.getChildByName("hero_d");
            var hero_name_d = hero_modle_d.getChildByName("hero_name");
            var hero_pin_d = hero_modle_d.getChildByName("hero_pinzhi"); //品质色
            var hero_icon_d = hero_modle_d.getChildByName("hero_icon_d"); //模型
            var hero_num_d = hero_modle_d.getChildByName("hero_num_D"); //数量
            var discount_d = hero_modle_d.getChildByName("discount"); //打折数
            var hero_btn_d = hero_modle_d.getChildByName("Btn_buy"); //购买按钮
            var price_d = hero_btn_d.getChildByName("new_price");
            var hero_modle_m = item.getChildByName("hero_m");
            var hero_name_m = hero_modle_m.getChildByName("hero_name");
            var hero_pin_m = hero_modle_m.getChildByName("hero_pinzhi"); //品质色
            var hero_icon_m = hero_modle_m.getChildByName("hero_icon_d"); //模型
            var hero_num_m = hero_modle_m.getChildByName("hero_num_M");
            var discount_m = hero_modle_m.getChildByName("discount"); //打折数
            var hero_btn_m = hero_modle_m.getChildByName("Btn_buy"); //购买按钮
            var price_m = hero_btn_m.getChildByName("new_price");
            var tcfg_hero = H52D_Framework.HeroConfig[nId];
            hero_name_d.text = hero_name_m.text = H52D_Framework.StringInfoConfig[tcfg_hero.name].s;
            var pos = tcfg_hero.position;
            hero_pin_d.skin = hero_pin_m.skin = H52D_Framework.BaseDefine.HeroAllinfo_bg[tcfg_hero.quality];
            var heroAin = new H52D_Framework.Avatar(hero_icon_d);
            heroAin.Load(tcfg_hero.strFacadeModel, 1, tcfg_hero.modelScale * 2.6, pos[1], pos[2], Laya.Handler.create(this, function () {
                heroAin.Play(1, true, true, function () {
                }, true);
            }));
            var heromod = new H52D_Framework.Avatar(hero_icon_m);
            heromod.Load(tcfg_hero.strFacadeModel, 1, tcfg_hero.modelScale * 2.6, pos[1], pos[2], Laya.Handler.create(this, function () {
                heromod.Play(1, true, true, function () {
                }, true);
            }));
            H52D_Framework.Tick.Loop(1000, this, function () {
                var _time = H52D_Framework.HeroManager.Instance.GetHeroPecktime(nId) - H52D_Framework.Time.serverSecodes;
                time.text = H52D_Framework.GetFormatTime(_time) + "";
                if (_time <= 0) {
                    _this.ARR();
                    _this.List_handle();
                    heromod.Destroy();
                    heroAin.Destroy();
                }
            });
            var Item_Info_d = H52D_Framework.MarketConfig[4][peck_cfg.shopId];
            var Shop_Info_d = Item_Info_d.sellContent;
            var preic = Item_Info_d.Price; //
            var old_m = preic[2] * Item_Info_d.Discount / 10;
            var Item_cfg = H52D_Framework.ItemConfig[Shop_Info_d[2]];
            hero_num_d.text = Shop_Info_d[3];
            hero_num_d.color = H52D_Framework.BaseDefine.LabelColor1[tcfg_hero.quality];
            var path = "<img src= 'ui_icon/icon_prop_013.png' width='30px' height='20px'></img>";
            H52D_Framework.SetHtmlStyle(price_d, 25, "#fdcbad", "center");
            price_d.innerHTML = path + preic[2] + "   " + path + old_m;
            discount_d.text = Item_Info_d.Discount + "折";
            //********************************* 人民币↓
            var Item_Info_m = H52D_Framework.ChargeConfig[5][peck_cfg.chargeId];
            var rew_cfg = H52D_Framework.RewardConfig[Item_Info_m.chargeReward].reWrad[1];
            var Shop_Info_m = H52D_Framework.ItemConfig[rew_cfg[2]];
            hero_num_m.text = rew_cfg[3];
            hero_num_m.color = H52D_Framework.BaseDefine.LabelColor1[tcfg_hero.quality];
            var item_name = H52D_Framework.StringInfoConfig[Shop_Info_m.dwItemName].s + "X " + rew_cfg[3];
            H52D_Framework.SetHtmlStyle(price_m, 25, "#fdcbad", "center");
            price_m.innerHTML = Item_Info_m.Money + "元  " + Item_Info_m.Price + "元";
            discount_m.text = (Item_Info_m.Price / Item_Info_m.Money) * 10 + "折";
            hero_icon_d.on(Laya.Event.CLICK, this, this.OPenView, [nId]);
            hero_icon_m.on(Laya.Event.CLICK, this, this.OPenView, [nId]);
            hero_btn_m.on(Laya.Event.CLICK, this, this.Btnclick_Mbuy, [5, peck_cfg.chargeId, item_name]);
            hero_btn_d.on(Laya.Event.CLICK, this, this.Btnclick_Dbuy, [4, peck_cfg.shopId, 1, old_m, preic[1]]);
        };
        HeroStarPeckView.prototype.Btnclick_Mbuy = function (type, item_id, item_des) {
            H52D_Framework.BaiDuSDK.Instance.ToRecharge(type, item_id, item_des);
        };
        HeroStarPeckView.prototype.Btnclick_Dbuy = function (type, item_id, item_num, price, item_type) {
            var _this = this;
            var price_num = H52D_Framework.BagManager.Instance.getItemNumber(item_type);
            if (price_num < price) {
                var str = H52D_Framework.SysPromptConfig[10014].strPromptInfo;
                H52D_Framework.TipsLogic.Instance.OpenMessageBox(str, Laya.Handler.create(this, function () {
                    H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.SHOP]);
                    H52D_Framework.OneTimer(500, Laya.Handler.create(_this, function () {
                        H52D_Framework.Event.DispatchEvent("toGemShop");
                    }));
                    H52D_Framework.UIManager.Instance.DestroyUI("MessageBoxView", [H52D_Framework.ViewToppestRoot]);
                    H52D_Framework.UIManager.Instance.DestroyUI("HeroStarPeckView", [H52D_Framework.ViewUpRoot]);
                }), Laya.Handler.create(this, function () {
                    H52D_Framework.UIManager.Instance.DestroyUI("MessageBoxView", [H52D_Framework.ViewToppestRoot]);
                }));
                return;
            }
            H52D_Framework.ShopLogic.Instance.SendBuyMsg(type, item_id, item_num);
        };
        HeroStarPeckView.prototype.OPenView = function (nHeroId) {
            H52D_Framework.HeroManager.Instance.OpenView(nHeroId);
        };
        HeroStarPeckView.prototype.Btnclick_close = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("HeroStarPeckView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.HeroManager.Instance.PeckShow = false;
            H52D_Framework.Event.DispatchEvent("UpdateBtnList");
        };
        HeroStarPeckView.prototype.Destroy = function () {
            H52D_Framework.Tick.ClearAll(this);
            this.offAll();
        };
        return HeroStarPeckView;
    }(ui.consumer.HeroStarPeckViewUI));
    H52D_Framework.HeroStarPeckView = HeroStarPeckView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeroStarPeckView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("MoneybackView", [
        { url: "res/ui/ui_consumer.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**充值返馈 */
    var MoneybackView = /** @class */ (function (_super) {
        __extends(MoneybackView, _super);
        function MoneybackView() {
            var _this = _super.call(this) || this;
            _this.AddEvent();
            _this.Initview();
            return _this;
        }
        MoneybackView.prototype.AddEvent = function () {
            this.btn_close.on(Laya.Event.CLICK, this, this.Btn_close);
            this.Other.on(Laya.Event.CLICK, this, this.Btn_close);
            H52D_Framework.Event.RegistEvent("UpdateView_moneyback", Laya.Handler.create(this, this.ReshHandler));
            this.on(Laya.Event.REMOVED, this, this.Destroy);
        };
        MoneybackView.prototype.Initview = function () {
            this.ReshHandler();
            H52D_Framework.ShopLogic.Instance.EffShow = false;
        };
        MoneybackView.prototype.ReshHandler = function () {
            this.m_backlist.vScrollBarSkin = "";
            this.m_backlist.array = H52D_Framework.ShopLogic.Instance.MonenArr;
            // this.m_backlist.array=[1,1,1,1,1,1,1];
            this.m_backlist.renderHandler = new Laya.Handler(this, this.Handler);
        };
        MoneybackView.prototype.Handler = function (item, index) {
            var n_cfgId = this.m_backlist.array[index];
            var n_cfg = H52D_Framework.ChargeReturnConfig[n_cfgId];
            var recfg_id = n_cfg.chargeReward; //道具表ID			
            var btn = item.getChildByName("btn_isgo");
            var say = item.getChildByName("M_say");
            var item_bg = item.getChildByName("item_bg1");
            var icon = item_bg.getChildByName("item_icon1");
            var name = item_bg.getChildByName("item_name");
            var bg = item_bg.getChildByName("bg");
            var lab = item.getChildByName("lab_text");
            if (H52D_Framework.ShopLogic.Instance.MoneyBack[n_cfgId] == 1) {
                lab.text = "已领取";
                btn.visible = false;
            }
            H52D_Framework.SetHtmlStyle(say, 20, "#ff7a6d", "left");
            say.innerHTML = H52D_Framework.Format(H52D_Framework.StringInfoConfig[7093].s, n_cfgId);
            var item_infolist = H52D_Framework.RewardConfig[recfg_id].reWrad[1];
            var iteminfo;
            if (item_infolist[1] == H52D_Framework.BaseDefine.ItemTypePro) {
                iteminfo = H52D_Framework.ItemConfig[item_infolist[2]];
                icon.skin = "ui_icon/" + iteminfo.strIconID_B;
                name.text = H52D_Framework.StringInfoConfig[iteminfo.dwItemName].s + "X" + item_infolist[3];
                name.color = H52D_Framework.BaseDefine.LabelColor1[iteminfo.dwItemQuality];
                item_bg.skin = H52D_Framework.BaseDefine.HeroAllinfo_bg[iteminfo.dwItemQuality];
                bg.bgColor = H52D_Framework.BaseDefine.ItemBgColor[iteminfo.dwItemQuality];
            }
            if (item_infolist[1] == H52D_Framework.BaseDefine.ItemTypeEquip) {
                iteminfo = H52D_Framework.EquipConfig[item_infolist[2]];
                icon.skin = "ui_icon/" + iteminfo.equipIcon;
                name.text = H52D_Framework.StringInfoConfig[iteminfo.equipName].s;
            }
            if (item_infolist[1] == H52D_Framework.BaseDefine.ItemTypeHero) {
                iteminfo = H52D_Framework.HeroConfig[item_infolist[2]];
                icon.skin = "ui_icon/" + iteminfo.strIcon;
                name.text = H52D_Framework.StringInfoConfig[iteminfo.name].s;
            }
            if (item_infolist[1] == H52D_Framework.BaseDefine.ItemTypePet) {
                iteminfo = H52D_Framework.PetConfig[item_infolist[2]];
                icon.skin = "ui_icon/" + iteminfo.strPetIcon;
                name.text = H52D_Framework.StringInfoConfig[iteminfo.petName].s;
            }
            var num = index + 4;
            if (H52D_Framework.ShopLogic.Instance.isFristCharge(1, num)) {
                btn.on(Laya.Event.CLICK, this, this.Btn_receive, [num]);
            }
            else {
                btn.label = "领取";
                btn.on(Laya.Event.CLICK, this, this.n_Money, [n_cfgId]);
            }
        };
        MoneybackView.prototype.Btn_receive = function (num) {
            this.Btn_close();
            H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.SHOP]);
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.BOTTOM_SET_PANEL);
            H52D_Framework.OneTimer(500, Laya.Handler.create(this, function () {
                H52D_Framework.Event.DispatchEvent("toGemShop", num);
            }));
        };
        /***发送领取消息  */
        MoneybackView.prototype.n_Money = function (n_money) {
            H52D_Framework.ShopLogic.Instance.K_ReqChargeFeedback(n_money);
        };
        MoneybackView.prototype.Btn_close = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("MoneybackView", [H52D_Framework.ViewUpRoot]);
            this.m_backlist.array = [];
            H52D_Framework.Event.DispatchEvent("UpdateBtnList");
        };
        MoneybackView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent("UpdateView_moneyback", Laya.Handler.create(this, this.ReshHandler));
        };
        return MoneybackView;
    }(ui.consumer.MoneybackViewUI));
    H52D_Framework.MoneybackView = MoneybackView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MoneybackView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("CreateView", [
        { url: "res/ui/ui_login.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_noPack/login_background.png", type: Laya.Loader.IMAGE },
    ]);
    var CreateView = /** @class */ (function (_super) {
        __extends(CreateView, _super);
        function CreateView() {
            var _this = _super.call(this) || this;
            _this._genderEnum = 1;
            _this._StartGameTime = H52D_Framework.GameParamConfig["StartGameTime"];
            _this._StartGameResTime = H52D_Framework.GameParamConfig["StartGameResTime"];
            _this._beginTime = 0;
            _this._countTime = -1;
            _this.backGround.skin = "res/ui/ui_noPack/login_background.png";
            _this.rBtn.on(Laya.Event.CLICK, _this, _this.OnRandomClick); //骰子 
            _this.loginBtn.on(Laya.Event.CLICK, _this, _this.OnLoginBtn);
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            _this.OnRandomClick();
            _this.countlabel.visible = false;
            H52D_Framework.Tick.FrameLoop(1, _this, function () {
                _this.input.text = H52D_Framework.SensitiveWord.Instance.Replace(_this.input.text);
                // let _name=GetInfoAttr.Instance.Format(this.input.text);
                // this.input.text = SensitiveWord.Instance.Replace(_name);
                if (_this.input.focus) {
                    _this.countlabel.visible = false;
                    _this._beginTime = 0;
                    _this._countTime = -1;
                }
                // else {
                //     this.countlabel.visible = true;
                // }
            });
            H52D_Framework.Tick.Loop(1000, _this, function () {
                _this._beginTime++;
                if (_this._beginTime > _this._StartGameTime) {
                    _this.countlabel.visible = true;
                    _this._countTime++;
                    if (_this._StartGameResTime - _this._countTime < 1) {
                        if (H52D_Framework.StringIsEmpty(_this.input.text)) {
                            _this.input.text = H52D_Framework.GetRandName(_this._genderEnum);
                        }
                        _this.countlabel.visible = false;
                        var nickName = _this.input.text;
                        H52D_Framework.RemoteCall.Instance.Send("K_CreateCharReqMsg", nickName, _this._genderEnum, _this._genderEnum, H52D_Framework.LoginLogic.Instance.InviteRoleID);
                    }
                    _this.countlabel.text = (_this._StartGameResTime - _this._countTime) + "秒后自动进入游戏";
                }
            });
            var nScale = 0.5;
            _this._heromod = new H52D_Framework.Avatar(_this.heromod);
            _this._heromod.Load("res/player/login_juese/juese.sk", 1, nScale, 0, 0, Laya.Handler.create(_this, function () {
                _this._heromod.Play("idle", true);
            }));
            _this._stareffect = new H52D_Framework.Avatar(_this.stareffect);
            _this._stareffect.Load("res/player/login_huoxing/huoxing.sk", 1, nScale, 0, 0, Laya.Handler.create(_this, function () {
                _this._stareffect.Play("idle", true);
            }));
            _this._suipianeffect = new H52D_Framework.Avatar(_this.suipianeffect);
            _this._suipianeffect.Load("res/player/login_suipian/suipian.sk", 1, 0.36, 0, 0, Laya.Handler.create(_this, function () {
                _this._suipianeffect.Play("idle", true);
            }));
            _this._xingxingmod = new H52D_Framework.Avatar(_this.xingxingmod);
            _this._xingxingmod.Load("res/player/login_gly/login_gly.sk", 1, 0.7, 0, 0, Laya.Handler.create(_this, function () {
                _this._xingxingmod.Play("idle", true);
            }));
            return _this;
        }
        CreateView.prototype.OnRandomClick = function () {
            this.input.text = H52D_Framework.GetRandName(this._genderEnum);
        };
        CreateView.prototype.OnLoginBtn = function () {
            if (H52D_Framework.StringIsEmpty(this.input.text) || this.input.text == "请输入角色名") {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("角色名不能为空!");
                return;
            }
            var nickName = this.input.text;
            var nLength = 0;
            for (var index = 0; index < nickName.length; index++) {
                if (nickName.charCodeAt(index) > 255) {
                    nLength += 2;
                }
                else {
                    nLength++;
                }
            }
            if (nLength > 12) {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("角色名过长，请重新输入！");
                return;
            }
            H52D_Framework.RemoteCall.Instance.Send("K_CreateCharReqMsg", nickName, this._genderEnum, this._genderEnum, H52D_Framework.LoginLogic.Instance.InviteRoleID);
        };
        CreateView.prototype.Destroy = function () {
            this.offAll();
            if (this._heromod != null) {
                this._heromod.Destroy();
            }
            if (this._stareffect != null) {
                this._stareffect.Destroy();
            }
            if (this._suipianeffect != null) {
                this._suipianeffect.Destroy();
            }
            if (this._xingxingmod != null) {
                this._xingxingmod.Destroy();
            }
        };
        return CreateView;
    }(ui.login.CreateViewUI));
    H52D_Framework.CreateView = CreateView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=CreateView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("EquipTips", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_equip.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
    ]);
    var EquipTips = /** @class */ (function (_super) {
        __extends(EquipTips, _super);
        function EquipTips(buf) {
            var _this = _super.call(this) || this;
            _this.equip_ID = buf[1];
            _this.e_Info = H52D_Framework.EquipManager.Instance.GetEquipByInstId(_this.equip_ID);
            _this.ChangeLock(_this.e_Info.bLock);
            _this.InitView();
            _this.AddEvent();
            return _this;
        }
        EquipTips.prototype.InitView = function () {
            this.Info();
            this.Isuse();
            this.Btn_puton();
            H52D_Framework.EquipManager.Instance.K_ReqLookEquip(this.equip_ID);
            H52D_Framework.Event.DispatchEvent("ShowRedPoint", E_OpenGrade.EQUIP);
        };
        EquipTips.prototype.Info = function () {
            H52D_Framework.SetHtmlStyle(this.price_num, 18, "#fafa85", "center");
            this.price_num.innerHTML = "<img src= 'ui_icon/icon_prop_013.png' width='20px' height='20px'></img>" + this.e_Info.sellNum;
            H52D_Framework.SetHtmlStyle(this.E_lv, 18, "#9be589", "left");
            this.E_lv.innerHTML = "LV:" + H52D_Framework.GetHtmlStrByColor(this.e_Info.equipLevel, "#fafa85");
            H52D_Framework.SetHtmlStyle(this.E_base1, 20, "#d7e6ff", "left");
            //SetHtmlStyle(this.E_base2,18,"#d6d7dd","center");
            //this.E_base2.innerHTML=path;//属性
            var path = "<img src= 'ui_camp/img-dian-tongyong.png' width='24px' height='24px'></img>";
            this.E_icon.skin = "ui_icon/" + this.e_Info.equipIcon; //装备图片
            this.E_pinzhi.skin = H52D_Framework.BaseDefine.EquipBgColor[this.e_Info.equipColor];
            this.E_name.text = this.e_Info.equipName;
            this.E_name.color = H52D_Framework.BaseDefine.EquipQualityColor[this.e_Info.equipColor];
            var e_info_base = this.e_Info.baseAttribute;
            var base_ID = e_info_base[1][1];
            var base_value = Math.floor(e_info_base[1][2]);
            var base_tcfg = H52D_Framework.QualityValue[base_ID];
            this.E_base1.innerHTML = path + H52D_Framework.StringInfoConfig[base_tcfg.dwName].s + base_value;
            if (base_tcfg.isper == 1) {
                this.E_base1.innerHTML = path + H52D_Framework.StringInfoConfig[base_tcfg.dwName].s + Math.floor(base_value / 100) + "%";
            }
        };
        EquipTips.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_lock.on(Laya.Event.CLICK, this, this.Btn_lock);
            this.btn_price.on(Laya.Event.CLICK, this, this.Btn_price);
            this.btn_close.on(Laya.Event.CLICK, this, this.Btn_close);
            this.btn_use.on(Laya.Event.CLICK, this, this.Btn_use);
            this.Other.on(Laya.Event.CLICK, this, this.Btn_close);
            H52D_Framework.Event.RegistEvent("Setlock", Laya.Handler.create(this, this.ChangeLock));
            H52D_Framework.Event.RegistEvent("Puton", Laya.Handler.create(this, this.Btn_puton));
        };
        EquipTips.prototype.Btn_lock = function () {
            if (this.e_Info.bLock) {
                H52D_Framework.EquipManager.Instance.K_ReqLockEquip(this.equip_ID, false);
            }
            else {
                H52D_Framework.EquipManager.Instance.K_ReqLockEquip(this.equip_ID, true);
            }
        };
        /**关闭页面 */
        EquipTips.prototype.Btn_close = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("EquipTips", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.Event.DispatchEvent("redshow");
        };
        EquipTips.prototype.Btn_puton = function () {
            var E_Info = H52D_Framework.EquipManager.Instance.GetEquipByInstId(this.equip_ID);
            var type = E_Info.equipType;
            var E_id = H52D_Framework.EquipManager.Instance.GetCurrentEquipByType(type);
            var bool = E_id == this.equip_ID ? true : false;
            this.used.visible = bool;
            this.btn_use.visible = !bool;
        };
        /**佩戴装备 */
        EquipTips.prototype.Btn_use = function () {
            H52D_Framework.EquipManager.Instance.K_ReqUseEquip(this.equip_ID);
        };
        /**出售装备 */
        EquipTips.prototype.Btn_price = function () {
            var _this = this;
            if (this.e_Info.equipColor > 3) {
                var str = H52D_Framework.Format(H52D_Framework.SysPromptConfig[30032].strPromptInfo, H52D_Framework.GetHtmlStrByColor(this.e_Info.equipName, H52D_Framework.BaseDefine.EquipQualityColor[this.e_Info.equipColor]));
                H52D_Framework.TipsLogic.Instance.OpenMessageBox(str, Laya.Handler.create(this, function () {
                    if (!_this.e_Info.bLock) {
                        H52D_Framework.EquipManager.Instance.K_ReqSellEquip(_this.equip_ID);
                        H52D_Framework.UIManager.Instance.DestroyUI("EquipTips", [H52D_Framework.ViewUpRoot]);
                    }
                    else {
                        //飘字 或者啥
                    }
                }));
            }
            else {
                H52D_Framework.EquipManager.Instance.K_ReqSellEquip(this.equip_ID);
                H52D_Framework.UIManager.Instance.DestroyUI("EquipTips", [H52D_Framework.ViewUpRoot]);
            }
        };
        EquipTips.prototype.Isuse = function () {
            var tcfg = H52D_Framework.EquipManager.Instance.GetEquipByInstId(this.equip_ID);
            var use_id = H52D_Framework.EquipManager.Instance.GetCurrentEquipByType(tcfg.equipType);
            if (use_id == this.equip_ID) {
                this.used.visible = true;
                this.btn_price.visible = false;
            }
        };
        EquipTips.prototype.ChangeLock = function (bool) {
            var path_s = "ui_equip/btn-suoding-faqi.png";
            var path_w = "ui_equip/btn-weisuoding-faqi.png"; //true 锁上
            if (bool) {
                this.E_lock.skin = path_s;
            }
            else {
                this.E_lock.skin = path_w;
            }
            var tcfg = H52D_Framework.EquipManager.Instance.GetEquipByInstId(this.equip_ID);
            var use_id = H52D_Framework.EquipManager.Instance.GetCurrentEquipByType(tcfg.equipType);
            if (use_id == this.equip_ID)
                return;
            this.btn_price.gray = bool;
            this.btn_price.mouseEnabled = !bool;
        };
        EquipTips.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent("Setlock", Laya.Handler.create(this, this.ChangeLock));
            H52D_Framework.Event.RemoveEvent("Puton", Laya.Handler.create(this, this.Btn_puton));
        };
        return EquipTips;
    }(ui.Equep.EquipTipsUI));
    H52D_Framework.EquipTips = EquipTips;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=EquipTips.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("MakeEquipView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
    ]);
    var MakeEquipView = /** @class */ (function (_super) {
        __extends(MakeEquipView, _super);
        function MakeEquipView() {
            var _this = _super.call(this) || this;
            _this._sendlock = true;
            _this.AddEvent();
            _this.InitView();
            return _this;
        }
        MakeEquipView.prototype.InitView = function () {
            this.E_suitList.vScrollBarSkin = "";
            this.Info();
            this.Btn_click(MakeEquipView.Indx);
        };
        MakeEquipView.prototype.AddEvent = function () {
            this.btn_1.on(Laya.Event.CLICK, this, this.Btn_click, [3]);
            this.btn_2.on(Laya.Event.CLICK, this, this.Btn_click, [4]);
            this.btn_3.on(Laya.Event.CLICK, this, this.Btn_click, [5]);
            this.btn_close.on(Laya.Event.CLICK, this, this.Btn_closeclick);
            this.Other.on(Laya.Event.CLICK, this, this.Btn_closeclick);
            this.M_help.on(Laya.Event.CLICK, this, this.Btn_help);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            H52D_Framework.Event.RegistEvent("updatelist_equip", Laya.Handler.create(this, this.Btn_Resh));
            H52D_Framework.Event.RegistEvent("DeleShow", Laya.Handler.create(this, this.Btn_Resh));
        };
        MakeEquipView.prototype.Info = function () {
            H52D_Framework.SetHtmlStyle(this.my_num, 26, "#c0eb9f", "left");
            var path = "<img src= 'ui_icon/icon_prop_016.png' width='35px' height='35px'></img>";
            var item_num = H52D_Framework.BagManager.Instance.getItemNumber(2201);
            this.my_num.innerHTML = "拥有:" + path + H52D_Framework.GetHtmlStrByColor(item_num.toString(), "#fafa85");
        };
        MakeEquipView.prototype.UpdateList = function (type) {
            MakeEquipView.Indx = type;
            this.E_suitList.array = H52D_Framework.EquipManager.Instance.GetSuitCfgListByType(type);
            this.E_suitList.renderHandler = new Laya.Handler(this, this.E_Handler);
        };
        MakeEquipView.prototype.E_Handler = function (item, index) {
            var nIdx = this.E_suitList.array[index];
            var suit_tcfg = H52D_Framework.SuitConfig[nIdx];
            var equipnum = suit_tcfg.equipGroupId;
            var suit_name = item.getChildByName("Equip_name");
            var suit_base1 = item.getChildByName("suit_base1");
            var suit_base2 = item.getChildByName("suit_base2");
            var suit_base3 = item.getChildByName("suit_base3");
            suit_base1.innerHTML = "";
            suit_base2.innerHTML = "";
            suit_base3.innerHTML = "";
            H52D_Framework.SetHtmlStyle(suit_name, 22, H52D_Framework.BaseDefine.EquipQualityColor[suit_tcfg.suitColor], "left");
            var base_info = suit_tcfg.suitAttribute;
            for (var key in base_info) {
                var path = "<img src= 'ui_camp/img-dian-tongyong.png' width='24px' height='24px'></img>";
                var suit_base = item.getChildByName("suit_base" + key);
                H52D_Framework.SetHtmlStyle(suit_base, 22, "#dde2f2", "left");
                var id = base_info[key][1];
                var name_id = H52D_Framework.QualityValue[id];
                var name_text = H52D_Framework.StringInfoConfig[name_id.dwName].s;
                if (H52D_Framework.EquipManager.Instance.IsSuitActivate(nIdx)) {
                    H52D_Framework.SetHtmlStyle(suit_base, 22, "#9be589", "left");
                }
                suit_base.innerHTML = path + name_text + H52D_Framework.GetHtmlStrByColor(base_info[key][2], "#f4ff79");
                if (name_id.isper == 1) {
                    suit_base.innerHTML = path + name_text + H52D_Framework.GetHtmlStrByColor((base_info[key][2] / 100).toString(), "#f4ff79") + "%";
                }
            }
            var name = H52D_Framework.StringInfoConfig[suit_tcfg.suitName].s;
            var num = H52D_Framework.EquipManager.Instance.GetSuitOnceActivateNum(nIdx);
            suit_name.innerHTML = name + H52D_Framework.GetHtmlStrByColor("(" + num + "/5)", "#bebbf8");
            for (var key in equipnum) {
                var l_n = item.getChildByName(key); //
                var suit_bg = l_n.getChildByName("E_pinzhi" + key);
                var suit_icon = l_n.getChildByName("E_icon" + key);
                var suit_name_1 = l_n.getChildByName("E_name" + key);
                var suit_base1_1 = l_n.getChildByName("E_base" + key);
                var suit_lv = l_n.getChildByName("E_lv" + key);
                var make_num = l_n.getChildByName("E_makenum" + key);
                var btn = l_n.getChildByName("E_make" + key);
                var suit_lock = l_n.getChildByName("E_lock");
                H52D_Framework.SetHtmlStyle(make_num, 20, "#fafa85", "center");
                var group_id = equipnum[key];
                var equip_id = H52D_Framework.EquipManager.Instance.GetEquipIdBySuitId(group_id);
                if (equip_id == null) {
                    return;
                }
                var e_info = H52D_Framework.EquipConfig[equip_id];
                var type = e_info.equipType;
                var bool = H52D_Framework.EquipManager.Instance.IsSuitOnceActivate(group_id);
                suit_icon.gray = !bool;
                suit_lock.visible = !bool;
                btn.gray = bool;
                var base = e_info.baseAttribute;
                H52D_Framework.SetHtmlStyle(suit_lv, 20, "#9be589", "left");
                suit_lv.innerHTML = "LV:" + H52D_Framework.GetHtmlStrByColor(e_info.equipLevel, "#f4ff79");
                suit_name_1.text = H52D_Framework.StringInfoConfig[e_info.equipName].s;
                suit_name_1.color = H52D_Framework.BaseDefine.EquipQualityColor[e_info.equipColor];
                suit_bg.skin = H52D_Framework.BaseDefine.EquipBgColor[e_info.equipColor];
                suit_icon.skin = "ui_icon/" + e_info.equipIcon;
                var base_ID = base[1][1];
                var base_value = base[1][2];
                var base_tcfg = H52D_Framework.QualityValue[base_ID];
                suit_base1_1.text = H52D_Framework.StringInfoConfig[base_tcfg.dwName].s + base_value;
                if (base_tcfg.isper == 1) {
                    suit_base1_1.text = H52D_Framework.StringInfoConfig[base_tcfg.dwName].s + Math.floor(base_value / 100) + "%";
                }
                var item_num = H52D_Framework.BagManager.Instance.getItemNumber(2201);
                var path = "<img src= 'ui_icon/icon_prop_016.png' width='25px' height='25px'></img>";
                make_num.innerHTML = path + e_info.composeNeedNum;
                suit_base1_1.color = "#d7e6ff";
                btn.gray = item_num < e_info.composeNeedNum ? true : false;
                btn.mouseEnabled = !btn.gray;
                if (item_num < e_info.composeNeedNum) {
                    btn.gray = true;
                }
                else {
                    btn.gray = false;
                }
                btn.on(Laya.Event.CLICK, this, this.Btn_makeequip, [group_id]);
            }
        };
        MakeEquipView.prototype.Btn_closeclick = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("MakeEquipView", [H52D_Framework.ViewUpRoot]);
        };
        MakeEquipView.prototype.Btn_click = function (index) {
            this.UpdateList(index);
            switch (index) {
                case 3:
                    this.img1.skin = "ui_rank/img-zi-weixuan.png";
                    this.left1.skin = "ui_rank/img-zi-xuan.png";
                    this.img2.skin = "ui_rank/img-lan-weixuan.png";
                    this.img3.skin = "ui_rank/img-lan-weixuan.png";
                    this.btn_name1.color = "#eff8bb";
                    this.btn_name2.color = "#bebbf8";
                    this.btn_name3.color = "#bebbf8";
                    break;
                case 4:
                    this.img1.skin = "ui_rank/img-lan-weixuan.png";
                    this.left1.skin = "ui_rank/img-lan-xuan.png";
                    this.img2.skin = "ui_rank/img-zi-weixuan.png";
                    this.img3.skin = "ui_rank/img-lan-weixuan.png";
                    this.btn_name1.color = "#bebbf8";
                    this.btn_name2.color = "#eff8bb";
                    this.btn_name3.color = "#bebbf8";
                    break;
                case 5:
                    this.img1.skin = "ui_rank/img-lan-weixuan.png";
                    this.left1.skin = "ui_rank/img-lan-xuan.png";
                    this.img2.skin = "ui_rank/img-lan-weixuan.png";
                    this.img3.skin = "ui_rank/img-zi-weixuan.png";
                    this.btn_name1.color = "#bebbf8";
                    this.btn_name2.color = "#bebbf8";
                    this.btn_name3.color = "#eff8bb";
                    break;
            }
        };
        /**制作装备 */
        MakeEquipView.prototype.Btn_makeequip = function (id) {
            var _this = this;
            if (this._sendlock == false) {
                return;
            }
            this._sendlock = false;
            H52D_Framework.OneTimer(1000, Laya.Handler.create(this, function () {
                _this._sendlock = true;
            }));
            H52D_Framework.EquipManager.Instance.K_ReqCompoundEquip(id);
        };
        MakeEquipView.prototype.Btn_help = function () {
            var tvo = new H52D_Framework.TipsVo();
            tvo.title = "玩法说明";
            tvo.contentId = 6005;
            H52D_Framework.UIManager.Instance.CreateUI("TipsActionView", [H52D_Framework.ViewToppestRoot, tvo]);
        };
        MakeEquipView.prototype.Btn_Resh = function () {
            this.Info();
            this.UpdateList(MakeEquipView.Indx);
        };
        MakeEquipView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent("updatelist_equip", Laya.Handler.create(this, this.Btn_Resh));
            H52D_Framework.Event.RemoveEvent("DeleShow", Laya.Handler.create(this, this.Btn_Resh));
        };
        MakeEquipView.Indx = 3;
        return MakeEquipView;
    }(ui.Equep.MakeEquipViewUI));
    H52D_Framework.MakeEquipView = MakeEquipView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MakeEquipView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("FundView", [
        { url: "res/ui/ui_consumer.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_common.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_fund.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**
     * @class 分享邀请页面
     * @author zhangyusong
     **/
    var FundView = /** @class */ (function (_super) {
        __extends(FundView, _super);
        function FundView() {
            var _this = _super.call(this) || this;
            /** 面板名字ID */
            _this.VIEW_NAME_ID = 5017;
            /** 描述字 */
            _this.DESCRIPTION_WORD = 7121;
            /** 钻石不够 */
            _this.DIAMONDS = 10014;
            /** 没有永久VIP */
            _this.VIP = 30051;
            /** 您未购买基金 */
            _this.NOBUY = 30052;
            /** 通关可领取 */
            _this.CUSTOMS = 30053;
            _this.ViewInit();
            _this.EventInit();
            return _this;
        }
        FundView.prototype.ViewInit = function () {
            var _this = this;
            this.tx_name_bg.text = this.tx_name.text = H52D_Framework.GetInfoAttr.Instance.GetSystemText(this.VIEW_NAME_ID);
            this.tx_money.text = H52D_Framework.GameParamConfig["BuyFoundationNeedDiamond"];
            this.dataList = [];
            for (var i in H52D_Framework.FoundationConfig) {
                var data = H52D_Framework.FoundationConfig[i];
                data["id"] = Number(i);
                this.dataList.push(data);
            }
            this.list_fund.renderHandler = new Laya.Handler(this, function (view, index) {
                var tCfg = _this.dataList[index];
                var customsNum = tCfg["customsNum"];
                var rewardid = tCfg["rewardId"];
                var txShow = view.getChildByName("tx_show");
                H52D_Framework.SetHtmlStyle(txShow, 22, "#f97876", "left");
                var sColor = H52D_Framework.BaseDefine.LabelColor[2];
                if (H52D_Framework.CustomsManager.Instance.customsOrder < customsNum) {
                    sColor = H52D_Framework.BaseDefine.LabelColor[6];
                }
                var sInfo = H52D_Framework.GetHtmlStrByColor("(" + String(H52D_Framework.CustomsManager.Instance.customsOrder) + "/" + String(customsNum) + ")", sColor);
                txShow.innerHTML = H52D_Framework.GetInfoAttr.Instance.GetSystemText(_this.DESCRIPTION_WORD, String(customsNum)) + sInfo;
                var btnReward = view.getChildByName("btn_reward");
                var imgComplete = view.getChildByName("img_complete");
                var reward = H52D_Framework.RewardConfig[rewardid]["reWrad"];
                for (var i in reward) {
                    var itemId = reward[i][2];
                    var itemNum = reward[i][3];
                    var model = new H52D_Framework.RewardView();
                    model.itemName = H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[itemId]["dwItemName"]]["s"];
                    model.pic = H52D_Framework.ItemConfig[itemId]["strIconID_B"];
                    model.itemNum = itemNum;
                    model.quality = H52D_Framework.ItemConfig[itemId]["dwItemQuality"];
                    model.x = 24 + 96 * (Number(i) - 1);
                    model.y = 53;
                    view.addChild(model);
                }
                btnReward.offAll();
                //已经投资
                if (H52D_Framework.MasterPlayer.Instance.fundBuy) {
                    imgComplete.visible = !!tCfg["receive"];
                    btnReward.visible = !imgComplete.visible;
                    if (btnReward.visible) {
                        btnReward.on(Laya.Event.CLICK, _this, _this.OnRewardHander, [index]);
                    }
                }
                else {
                    imgComplete.visible = false;
                    btnReward.visible = true;
                    btnReward.on(Laya.Event.CLICK, _this, function () {
                        H52D_Framework.TipsLogic.Instance.OpenSystemTips(_this.NOBUY);
                    });
                }
            });
            this.Frush();
        };
        /** 页面刷新 */
        FundView.prototype.Frush = function () {
            this.btn_investment.gray = H52D_Framework.MasterPlayer.Instance.fundBuy;
            this.btn_investment.mouseEnabled = !H52D_Framework.MasterPlayer.Instance.fundBuy;
            this.btn_investment.label = !H52D_Framework.MasterPlayer.Instance.fundBuy ? "投资" : "已投资";
            for (var i in this.dataList) {
                var id = this.dataList[i]["id"];
                this.dataList[i]["receive"] = H52D_Framework.MasterPlayer.Instance.getFundReceive(id);
            }
            this.list_fund.array = this.dataList;
        };
        FundView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            H52D_Framework.Event.RegistEvent("FundFrush", Laya.Handler.create(this, this.Frush));
            this.btn_close.on(Laya.Event.CLICK, this, this.OnCloseHander);
            this.btn_investment.on(Laya.Event.CLICK, this, this.Investment);
        };
        FundView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent("FundFrush", Laya.Handler.create(this, this.Frush));
        };
        FundView.prototype.OnCloseHander = function () {
            H52D_Framework.UIManager.Instance.DestroyUI(this.name, [this.parent]);
        };
        /** 投资 */
        FundView.prototype.Investment = function () {
            var _this = this;
            if (H52D_Framework.MasterPlayer.Instance.player.IsPermanentVip) {
                if (H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdDiamonds) >= H52D_Framework.GameParamConfig["BuyFoundationNeedDiamond"]) {
                    H52D_Framework.FundLogic.Instance.ReqBuyFund();
                }
                else { //钻石不够
                    H52D_Framework.TipsLogic.Instance.OpenMessageBox(this.DIAMONDS, Laya.Handler.create(this, function () {
                        _this.OnCloseHander();
                        // 钻石充值
                        H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.SHOP]);
                        H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.BOTTOM_SET_PANEL);
                        H52D_Framework.OneTimer(100, Laya.Handler.create(_this, function () {
                            H52D_Framework.Event.DispatchEvent("toGemShop");
                        }));
                    }));
                }
            }
            else {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox(this.VIP, Laya.Handler.create(this, function () {
                    // 是否前往激活VIP
                    H52D_Framework.UIManager.Instance.CreateUI("VipView", [H52D_Framework.ViewUpRoot]);
                }));
            }
        };
        /** 领奖 */
        FundView.prototype.OnRewardHander = function (index) {
            var data = this.dataList[index];
            if (H52D_Framework.CustomsManager.Instance.customsOrder >= Number(data["customsNum"])) {
                H52D_Framework.FundLogic.Instance.ReqGetFundAward(data["id"]);
            }
            else {
                H52D_Framework.SysPromptConfig[this.CUSTOMS];
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(this.CUSTOMS, data["customsNum"]);
            }
        };
        return FundView;
    }(ui.fund.FundViewUI));
    H52D_Framework.FundView = FundView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=FundView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ProfitView", [
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_over.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**离线收益 */
    var ProfitView = /** @class */ (function (_super) {
        __extends(ProfitView, _super);
        function ProfitView() {
            var _this = _super.call(this) || this;
            _this.Btn_sure.on(Laya.Event.CLICK, _this, _this.Btn_click);
            _this.Btn_close.on(Laya.Event.CLICK, _this, _this.Btn_click);
            _this.CampInfo();
            return _this;
        }
        /**设置文本信息 */
        ProfitView.prototype.CampInfo = function () {
            H52D_Framework.SetHtmlStyle(this.sys_Info, 20, "#49495b", "left", true);
            this.sys_Info.innerHTML = H52D_Framework.StringInfoConfig[7050].s;
            var ward = H52D_Framework.ProfManager.Instance.AddReward;
            var time = H52D_Framework.ProfManager.Instance.Time;
            var x = ward[1][1];
            var y = x.toFixed(2);
            this.Money_Num.text = ward[1][1];
            if (ward[1][1] > 1000000) {
                ward[1][1] = ward[1][1] / 10000;
                var y_1 = ward[1][1].toFixed(2);
                this.Money_Num.text = y_1 + "W";
            }
            this.exp_num.text = ward[1][3];
            this.Off_time.text = "离线时间：" + H52D_Framework.GetFormatTime(time);
        };
        /**关闭按钮事件 */
        ProfitView.prototype.Btn_click = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("ProfitView", [H52D_Framework.ViewUpRoot]);
        };
        return ProfitView;
    }(ui.GameOver.ProfitViewUI));
    H52D_Framework.ProfitView = ProfitView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ProfitView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**新手引导*/
var H52D_Framework;
(function (H52D_Framework) {
    var Label = laya.ui.Label;
    H52D_Framework.AddViewResource("GuidanceView", [
        { url: "res/ui/ui_guid.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS }
    ]);
    var E_GuidanceType;
    (function (E_GuidanceType) {
        E_GuidanceType[E_GuidanceType["E_Strong"] = 0] = "E_Strong";
        E_GuidanceType[E_GuidanceType["E_Weak"] = 1] = "E_Weak"; //弱引导
    })(E_GuidanceType || (E_GuidanceType = {}));
    var GuidanceView = /** @class */ (function (_super) {
        __extends(GuidanceView, _super);
        function GuidanceView() {
            var _this = _super.call(this) || this;
            /**剧情参数 */
            _this._StandingTime = 4000;
            _this._currentTime = 0;
            _this._timeTab = [];
            _this._aniTab = [];
            _this._index = 0;
            _this.bSetAniT = true;
            _this.AddEvent();
            _this.Init();
            return _this;
        }
        GuidanceView.prototype.Init = function () {
            this.spr_1.width = this.spr_2.width = this.shade.width = G_StageWidth * G_StageWidthScale;
            this.spr_1.height = this.spr_2.height = this.shade.height = G_StageHeight * G_StageHeightScale;
            H52D_Framework.Guidance.Instance.bProceeding = true;
            this._clickNum = 0;
            this._time = 10;
            if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Aide) {
                this._time = 7;
            }
            this._xExcursion = 70;
            this._yExcursion = -150;
            this._bControl = true;
            this.guidBj.visible = false;
            this.storyBj.visible = false;
            this.clickImg.visible = false;
            this.introduce.visible = false;
            this._guidanceType = E_GuidanceType.E_Strong;
            this.time.text = "自动引导下一步（" + this._time + "s)";
            this.click.blendMode = "destination-out";
            this.SetEffectScale();
        };
        GuidanceView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.over.on(Laya.Event.CLICK, this, this.StoryOver);
            this.storyBj.on(Laya.Event.CLICK, this, this.setAniT);
            H52D_Framework.Event.RegistEvent('NewTeach', Laya.Handler.create(this, this.NewTeach));
            H52D_Framework.Event.RegistEvent('ShowStory', Laya.Handler.create(this, this.ShowStory));
            H52D_Framework.Event.RegistEvent('FirstGuidance', Laya.Handler.create(this, this.FirstGuidance));
            H52D_Framework.Event.RegistEvent('SecondGuidance', Laya.Handler.create(this, this.SecondGuidance));
            H52D_Framework.Event.RegistEvent('ThirdlyGuidance', Laya.Handler.create(this, this.ThirdlyGuidance));
            H52D_Framework.Event.RegistEvent('FourthlyGuidance', Laya.Handler.create(this, this.FourthlyGuidance));
            H52D_Framework.Event.RegistEvent('FifthGuidance', Laya.Handler.create(this, this.FifthGuidance));
            H52D_Framework.Event.RegistEvent('SixthGuidance', Laya.Handler.create(this, this.SixthGuidance));
            H52D_Framework.Event.RegistEvent('SeventhGuidance', Laya.Handler.create(this, this.SeventhGuidance));
            H52D_Framework.Event.RegistEvent('EighthGuidance', Laya.Handler.create(this, this.EighthGuidance));
            H52D_Framework.Event.RegistEvent('EventSaveWar', Laya.Handler.create(this, this.SaveWar));
            H52D_Framework.Event.RegistEvent('NinthGuidance', Laya.Handler.create(this, this.NinthGuidance));
            H52D_Framework.Event.RegistEvent('AideGuidance', Laya.Handler.create(this, this.AideGuidance));
        };
        GuidanceView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Tick.ClearAll(this);
            this.Close();
            if (this._storyImgMod != null) {
                this._storyImgMod.Destroy();
            }
            H52D_Framework.Event.RemoveEvent('NewTeach', Laya.Handler.create(this, this.NewTeach));
            H52D_Framework.Event.RemoveEvent('ShowStory', Laya.Handler.create(this, this.ShowStory));
            H52D_Framework.Event.RemoveEvent('FirstGuidance', Laya.Handler.create(this, this.FirstGuidance));
            H52D_Framework.Event.RemoveEvent('SecondGuidance', Laya.Handler.create(this, this.SecondGuidance));
            H52D_Framework.Event.RemoveEvent('ThirdlyGuidance', Laya.Handler.create(this, this.ThirdlyGuidance));
            H52D_Framework.Event.RemoveEvent('FourthlyGuidance', Laya.Handler.create(this, this.FourthlyGuidance));
            H52D_Framework.Event.RemoveEvent('FourthlyGuidance', Laya.Handler.create(this, this.FourthlyGuidance));
            H52D_Framework.Event.RemoveEvent('FifthGuidance', Laya.Handler.create(this, this.FifthGuidance));
            H52D_Framework.Event.RemoveEvent('SixthGuidance', Laya.Handler.create(this, this.SixthGuidance));
            H52D_Framework.Event.RemoveEvent('SeventhGuidance', Laya.Handler.create(this, this.SeventhGuidance));
            H52D_Framework.Event.RemoveEvent('EighthGuidance', Laya.Handler.create(this, this.EighthGuidance));
            H52D_Framework.Event.RemoveEvent('NinthGuidance', Laya.Handler.create(this, this.NinthGuidance));
            H52D_Framework.Event.RemoveEvent('EventSaveWar', Laya.Handler.create(this, this.SaveWar));
            H52D_Framework.Event.RemoveEvent('AideGuidance', Laya.Handler.create(this, this.AideGuidance));
        };
        GuidanceView.prototype.CloseUI = function () {
            H52D_Framework.Guidance.Instance.bProceeding = false;
            //Guidance.Instance.SetGuidanceStep(E_GuidanceStep.E_Empty);
            if (this._arrows) {
                this._arrows.Destroy();
            }
            if (this._aperture) {
                this._aperture.Destroy();
            }
            this.infoBg.removeSelf();
            H52D_Framework.UIManager.Instance.DestroyUI("GuidanceView", [H52D_Framework.NewGuidRoot], Laya.Handler.create(this, function () {
                H52D_Framework.Guidance.Instance.TriggerAll();
            }));
            this.Destroy();
        };
        /**显示故事 */
        GuidanceView.prototype.ShowStory = function () {
            var _this = this;
            this._currentTime = 0;
            this._timeTab = [0, this._StandingTime, 400, this._StandingTime, 400, this._StandingTime, 700];
            this._aniTab = ["idle", "dead", "idle2", "dead2", "idle3", "dead3"];
            this._index = 0;
            this._storyImgMod = new H52D_Framework.Avatar(this.storyImg);
            this.storyBj.visible = true;
            H52D_Framework.SoundManager.Instance.OnPlayMusic("res/sound/story_sound.mp3", 1);
            this._storyImgMod.Load("res/player/juqing/juqing.sk", 1, 0.69, 0, 0, Laya.Handler.create(this, function () {
                _this._storyImgMod.visible = true;
                H52D_Framework.Tick.Loop(10, _this, function () {
                    _this.timec();
                });
            }));
        };
        GuidanceView.prototype.timec = function () {
            this._currentTime += 10;
            if (this._currentTime >= this._timeTab[this._index] &&
                this._index <= this._timeTab.length) {
                this._currentTime = 0;
                var list = this._timeTab.length - 1;
                H52D_Framework.Tick.Clear(this, playSound_1);
                H52D_Framework.Tick.Clear(this, playSound_2);
                this._StandingTime = 4000;
                switch (this._index) {
                    case 0:
                        H52D_Framework.Tick.Once(1000, this, playSound_1);
                        break;
                    case 1:
                        H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/menu_check.mp3");
                        break;
                    case 2:
                        H52D_Framework.Tick.Once(500, this, playSound_2);
                        break;
                    case 3:
                        H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/menu_check.mp3");
                        break;
                    case 4:
                        H52D_Framework.OneTimer(2000, Laya.Handler.create(this, function () {
                            H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/story_shake.mp3");
                            H52D_Framework.EffectManager.Instance.StartShock(800, true);
                        }));
                        break;
                    case 5:
                        break;
                    case list:
                        H52D_Framework.Tick.Clear(this, this.timec);
                        this.StoryOver();
                        return;
                }
                this._storyImgMod.Play(this._aniTab[this._index], false, null);
                this._index += 1;
            }
            function playSound_1() {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/typewriting.mp3");
            }
            function playSound_2() {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/phone.mp3");
            }
        };
        GuidanceView.prototype.setAniT = function () {
            var _this = this;
            if (this.bSetAniT) {
                H52D_Framework.SoundManager.Instance.OnStopSound("res/sound/phone.mp3");
                H52D_Framework.SoundManager.Instance.OnStopSound("res/sound/typewriting.mp3");
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/menu_check.mp3");
                this.bSetAniT = false;
                // this._index += 1;
                this._StandingTime = 10;
                this._currentTime = this._timeTab[this._index];
                H52D_Framework.OneTimer(1000, Laya.Handler.create(this, function () {
                    _this.bSetAniT = true;
                }));
            }
        };
        /**跳过故事 */
        GuidanceView.prototype.StoryOver = function () {
            H52D_Framework.SoundManager.Instance.OnStopMusic();
            H52D_Framework.Event.DispatchEvent("LoadingGame");
            //加载主界面
            H52D_Framework.UIManager.Instance.CreateUI("MainView", [H52D_Framework.ViewDownRoot], Laya.Handler.create(this, function () {
                //加载关卡场景
                H52D_Framework.CustomsManager.Instance.Initialize();
            }));
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/story_end.mp3");
            }
            this.CloseUI();
        };
        /**
         * 设置常规引导信息
         * @param guidanceType	引导类型
         * @param guidanceStep	引导步骤
         * @param listener 		点击函数
         * @param rotation 		箭头旋转弧度
         * @param x 			光圈、箭头 x轴
         * @param y 			光圈、箭头 y轴
         * @param excursion_x 	箭头x轴偏移
         * @param excursion_y 	箭头y轴偏移
         */
        GuidanceView.prototype.SetGuidanceInfo = function (guidanceType, guidanceStep, listener, args, rotation, x, y, excursion_x, excursion_y) {
            if (rotation === void 0) { rotation = 180; }
            if (x === void 0) { x = 190; }
            if (y === void 0) { y = 1180; }
            if (excursion_x === void 0) { excursion_x = 0; }
            if (excursion_y === void 0) { excursion_y = -100; }
            this.offAll();
            this.infoBg.visible = false;
            this.guidBj.visible = true;
            H52D_Framework.Guidance.Instance.SetGuidanceStep(guidanceStep);
            this.aperture.on(Laya.Event.CLICK, this, listener, args);
            this.GuidanceType(guidanceType);
            this.SetEffectPos(x, y, excursion_x, excursion_y);
            if (guidanceType == E_GuidanceType.E_Strong) {
                this.ApertureEffect(0, 3);
                this.ArrowsEffect(rotation, 1);
                this.GuidanceAuto(Laya.Handler.create(this, listener, args));
            }
            else if (guidanceType == E_GuidanceType.E_Weak) {
                if (guidanceStep == H52D_Framework.E_GuidanceStep.E_Seventh) {
                    this.ApertureEffect(0, 3, H52D_Framework.ViewUILogic.Instance.customWave);
                    this.ArrowsEffect(rotation, 1, H52D_Framework.ViewUILogic.Instance.customWave);
                    H52D_Framework.ViewUILogic.Instance.customWave.addChild(this.infoBg);
                    this.infoBg.left = -300;
                    this.infoBg.top = 300;
                    // this.infoBg.x = -100;// * G_StageWidthScale;
                    // this.infoBg.y = 300;// * G_StageHeightScale;
                    this._aperture.PosX += 10;
                    this._aperture.PosY += -20;
                    this._arrows.PosX += 60;
                    this._arrows.PosY += 140;
                }
                else {
                    this.ApertureEffect(0, 3, H52D_Framework.ViewUILogic.Instance.listView.GetMainBtn(args[0]));
                    this.ArrowsEffect(rotation, 1, H52D_Framework.ViewUILogic.Instance.listView.GetMainBtn(args[0]));
                    this._aperture.PosX += 10;
                    this._aperture.PosY += 0;
                    this._arrows.PosX += 70;
                    this._arrows.PosY += -60;
                }
            }
        };
        GuidanceView.prototype.SetintroduceInfo = function (bVisible, stringID) {
            this.introduce.visible = bVisible;
            this.introduce.text = H52D_Framework.StringInfoConfig[stringID].s;
        };
        /**新手小助手*/
        GuidanceView.prototype.AideGuidance = function () {
            this.offAll();
            this.guidBj.visible = true;
            this.infoBg.visible = true;
            this.time.visible = true;
            this._time = H52D_Framework.GameParamConfig.GuideTime;
            this.storyBj.visible = false;
            this.arrows.visible = false;
            this.SetintroduceInfo(true, 7021);
            this.infoBg.y -= 200 * G_StageHeightScale;
            this.guidBj.on(Laya.Event.CLICK, this, ClickAide);
            this.GuidanceAuto(Laya.Handler.create(this, ClickAide));
            function ClickAide() {
                this.CloseUI();
                H52D_Framework.Guidance.Instance.StartGuidance(H52D_Framework.E_GuidanceStep.E_First);
            }
        };
        /**新手指导一：点击屏幕攻击BOSS*/
        GuidanceView.prototype.FirstGuidance = function () {
            this.offAll();
            this.guidBj.visible = true;
            this.clickImg.visible = true;
            this.introduce.visible = true;
            this.introduce.text = H52D_Framework.StringInfoConfig[7009].s;
            this.aperture.on(Laya.Event.CLICK, this, this.ClickAttack, [1]);
            H52D_Framework.Tick.Loop(5000, this, this.GameShowPic);
            this.GuidanceAuto(Laya.Handler.create(this, this.ClickAttack, [3]));
            this.GuidanceType(E_GuidanceType.E_Strong);
            this.SetEffectPos(550, 518, this._xExcursion, this._yExcursion);
            this.ApertureEffect(0, 3);
            this.ArrowsSlide(620, 390, 580, 420, 200);
            this.clickImg.x *= G_StageWidthScale;
            this.clickImg.y += (G_StageHeight - 1200) / 2;
            //this.infoBg.y += 100 * G_StageHeightScale;
            // this.infoBg.y -= 100 * G_StageHeightScale;
        };
        /**新手指导二：升级英雄*/
        GuidanceView.prototype.SecondGuidance = function () {
            this.SetintroduceInfo(true, 7010);
            this.SetGuidanceInfo(E_GuidanceType.E_Weak, H52D_Framework.E_GuidanceStep.E_Second, this.HeroActivate, [E_OpenGrade.HERO]);
        };
        /**新手指导三：激活英雄*/
        GuidanceView.prototype.ThirdlyGuidance = function () {
            this.SetintroduceInfo(true, 7012);
            this.SetGuidanceInfo(E_GuidanceType.E_Weak, H52D_Framework.E_GuidanceStep.E_Thirdly, this.HeroActivate, [E_OpenGrade.HERO]);
        };
        /**新手指导四：英雄布阵*/
        GuidanceView.prototype.FourthlyGuidance = function () {
            this.SetintroduceInfo(true, 7013);
            this.SetGuidanceInfo(E_GuidanceType.E_Strong, H52D_Framework.E_GuidanceStep.E_Fourthly, this.HeroActivate, [E_OpenGrade.HERO]);
        };
        /**新手指导五：进阶英雄*/
        GuidanceView.prototype.FifthGuidance = function () {
            this.SetintroduceInfo(true, 7014);
            this.SetGuidanceInfo(E_GuidanceType.E_Weak, H52D_Framework.E_GuidanceStep.E_Fifth, this.HeroActivate, [E_OpenGrade.HERO]);
        };
        /**新手指导六：解锁和释放角色主动技能*/
        GuidanceView.prototype.SixthGuidance = function () {
            this.SetintroduceInfo(true, 7015);
            this.SetGuidanceInfo(E_GuidanceType.E_Strong, H52D_Framework.E_GuidanceStep.E_Sixth, this.HeroActivate, [E_OpenGrade.ROLE], 180, 60, 1180, 0, -100);
            // this.infoBg.x -= 200 * G_StageWidthScale;
            // this.infoBg.y -= 200 * G_StageHeightScale;
        };
        /**新手指导七：切换自动闯关模式*/
        GuidanceView.prototype.SeventhGuidance = function () {
            this.SetintroduceInfo(true, 7016);
            this.SetGuidanceInfo(E_GuidanceType.E_Weak, H52D_Framework.E_GuidanceStep.E_Seventh, this.ClickBtnEvent, [H52D_Framework.EventDefine.BOSSHANDER, true, H52D_Framework.E_GuidanceStep.E_Eighth], 0, 670, 70, 0, 100);
            this.infoBg.visible = true;
        };
        /**新手指导八：玩家上阵英雄*/
        GuidanceView.prototype.EighthGuidance = function () {
            this.SetintroduceInfo(true, 7017);
            this.SetGuidanceInfo(E_GuidanceType.E_Strong, H52D_Framework.E_GuidanceStep.E_Eighth, this.HeroActivate, [E_OpenGrade.HERO]);
        };
        /**新手指导八：神兽上阵*/
        GuidanceView.prototype.NinthGuidance = function () {
            this.SetintroduceInfo(true, 7018);
            this.SetGuidanceInfo(E_GuidanceType.E_Strong, H52D_Framework.E_GuidanceStep.E_Ninth, this.HeroActivate, [E_OpenGrade.PET], 180, 320, 1180, 0, -100);
        };
        /**点击引导光圈攻击 */
        GuidanceView.prototype.ClickAttack = function (num) {
            this._clickNum += num;
            H52D_Framework.BattleManager.Instance.OnClick();
            if (this._clickNum >= 3) {
                this.CloseUI();
                H52D_Framework.Guidance.Instance.SetGuidanceStep(H52D_Framework.E_GuidanceStep.E_Second);
            }
        };
        /**激活英雄标签弹出 */
        GuidanceView.prototype.HeroActivate = function (clickType) {
            var _this = this;
            this.infoBg.visible = true;
            this.aperture.off(Laya.Event.CLICK, this, this.HeroActivate);
            H52D_Framework.Event.DispatchEvent("PanelClose", Laya.Handler.create(this, function () {
                _this.GuidanceType(E_GuidanceType.E_Strong);
                switch (H52D_Framework.Guidance.Instance.guidanceStep) {
                    case H52D_Framework.E_GuidanceStep.E_Second:
                        H52D_Framework.Event.DispatchEvent("OnPanelClick", [clickType]);
                        _this.NewTeach();
                        if (H52D_Framework.Guidance.Instance.bWar) {
                            _this.aperture.on(Laya.Event.CLICK, _this, _this.ClickBtnEvent, ["ClickUpgrade", true, H52D_Framework.E_GuidanceStep.E_Thirdly, [1]]);
                        }
                        else {
                            _this.aperture.on(Laya.Event.CLICK, _this, _this.ClickBtnEvent, ["ClickUpgrade", true, H52D_Framework.E_GuidanceStep.E_Thirdly, [0]]);
                        }
                        if (_this._guidanceType == E_GuidanceType.E_Strong) {
                            if (H52D_Framework.Guidance.Instance.bWar) {
                                _this.GuidanceAuto(Laya.Handler.create(_this, _this.ClickBtnEvent, ["ClickUpgrade", true, H52D_Framework.E_GuidanceStep.E_Thirdly, [1]]));
                            }
                            else {
                                _this.GuidanceAuto(Laya.Handler.create(_this, _this.ClickBtnEvent, ["ClickUpgrade", true, H52D_Framework.E_GuidanceStep.E_Thirdly, [0]]));
                            }
                        }
                        break;
                    case H52D_Framework.E_GuidanceStep.E_Thirdly:
                        H52D_Framework.Event.DispatchEvent("OnPanelClick", [clickType]);
                        _this.NewTeach();
                        _this.aperture.on(Laya.Event.CLICK, _this, _this.ClickBtnEvent, ["ClickActivate", true, H52D_Framework.E_GuidanceStep.E_Fourthly]);
                        if (_this._guidanceType == E_GuidanceType.E_Strong) {
                            _this.GuidanceAuto(Laya.Handler.create(_this, _this.ClickBtnEvent, ["ClickActivate", true, H52D_Framework.E_GuidanceStep.E_Fourthly]));
                        }
                        break;
                    case H52D_Framework.E_GuidanceStep.E_Fourthly:
                        _this.infoBg.visible = false;
                        H52D_Framework.Event.DispatchEvent("OnPanelClick", [clickType]);
                        _this.NewTeach();
                        _this.aperture.on(Laya.Event.CLICK, _this, _this.ClickBtnEvent, ["ClickWar", true, H52D_Framework.E_GuidanceStep.E_Fifth]);
                        _this.GuidanceAuto(Laya.Handler.create(_this, _this.ClickBtnEvent, ["ClickWar", true, H52D_Framework.E_GuidanceStep.E_Fifth]));
                        break;
                    case H52D_Framework.E_GuidanceStep.E_Fifth:
                        _this.infoBg.visible = false;
                        H52D_Framework.Event.DispatchEvent("OnPanelClick", [clickType]);
                        _this.NewTeach();
                        _this.aperture.on(Laya.Event.CLICK, _this, _this.ClickBtnEvent, ["ClickStar", true, H52D_Framework.E_GuidanceStep.E_Sixth]);
                        _this.GuidanceAuto(Laya.Handler.create(_this, _this.ClickBtnEvent, ["ClickStar", true, H52D_Framework.E_GuidanceStep.E_Sixth]));
                        break;
                    case H52D_Framework.E_GuidanceStep.E_Sixth:
                        H52D_Framework.Event.DispatchEvent("OnPanelClick", [clickType]);
                        _this.NewTeach();
                        _this.aperture.on(Laya.Event.CLICK, _this, _this.ClickBtnEvent, ["ClickUpgrade", true, H52D_Framework.E_GuidanceStep.E_Seventh]);
                        if (_this._guidanceType == E_GuidanceType.E_Strong) {
                            _this.GuidanceAuto(Laya.Handler.create(_this, _this.ClickBtnEvent, ["ClickUpgrade", true, H52D_Framework.E_GuidanceStep.E_Seventh]));
                        }
                        break;
                    case H52D_Framework.E_GuidanceStep.E_Seventh:
                        _this.aperture.on(Laya.Event.CLICK, _this, _this.ClickBtnEvent, [H52D_Framework.EventDefine.BOSSHANDER, true, H52D_Framework.E_GuidanceStep.E_Eighth]);
                        if (_this._guidanceType == E_GuidanceType.E_Strong) {
                            _this.GuidanceAuto(Laya.Handler.create(_this, _this.ClickBtnEvent, [H52D_Framework.EventDefine.BOSSHANDER, true, H52D_Framework.E_GuidanceStep.E_Eighth]));
                        }
                        break;
                    case H52D_Framework.E_GuidanceStep.E_Eighth:
                        H52D_Framework.Event.DispatchEvent("OnPanelClick", [clickType]);
                        _this.NewTeach();
                        _this.aperture.on(Laya.Event.CLICK, _this, _this.ClickBtnEvent, ["ClickWar", true, H52D_Framework.E_GuidanceStep.E_Ninth]);
                        if (_this._guidanceType == E_GuidanceType.E_Strong) {
                            _this.GuidanceAuto(Laya.Handler.create(_this, _this.ClickBtnEvent, ["ClickWar", true, H52D_Framework.E_GuidanceStep.E_Ninth]));
                        }
                        break;
                    case H52D_Framework.E_GuidanceStep.E_Ninth:
                        H52D_Framework.Event.DispatchEvent("OnPanelClick", [clickType]);
                        _this.NewTeach();
                        _this.aperture.on(Laya.Event.CLICK, _this, _this.ClickBtnEvent, ["ClickPetUp", false, H52D_Framework.E_GuidanceStep.E_Empty]);
                        if (_this._guidanceType == E_GuidanceType.E_Strong) {
                            _this.GuidanceAuto(Laya.Handler.create(_this, _this.ClickBtnEvent, ["ClickPetUp", false, H52D_Framework.E_GuidanceStep.E_Empty]));
                        }
                        break;
                }
            }));
        };
        /**派发点击按钮事件 */
        GuidanceView.prototype.ClickBtnEvent = function (EventStr, bNext, NextGuidance, args) {
            if (bNext === void 0) { bNext = true; }
            this.infoBg.visible = true;
            if (EventStr == "OnSkillClick") {
                if (!H52D_Framework.ViewUILogic.Instance.FirstSkillCd) {
                    H52D_Framework.Event.DispatchEvent(EventStr, args);
                }
            }
            else {
                H52D_Framework.Event.DispatchEvent(EventStr, args);
            }
            if (bNext) {
                if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Fourthly) {
                    this.ClickWar();
                    return;
                }
                else if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Eighth) {
                    this.ClickWar();
                    H52D_Framework.Guidance.Instance.SetGuidanceStep(H52D_Framework.E_GuidanceStep.E_Eighth);
                    return;
                }
                else if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Fifth) {
                    this.ClickStar();
                }
                else if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Sixth) {
                    this.ClickUpSkill();
                }
                else {
                    this.CloseUI();
                }
                H52D_Framework.Guidance.Instance.SetGuidanceStep(NextGuidance);
            }
            else {
                this.CloseUI();
                if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Fourthly) {
                    H52D_Framework.Guidance.Instance.SetGuidanceStep(NextGuidance);
                }
                else if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Eighth) {
                    H52D_Framework.Guidance.Instance.SetGuidanceStep(NextGuidance);
                }
            }
        };
        /**点击布阵页面 */
        GuidanceView.prototype.ClickWar = function () {
            this.Close();
            H52D_Framework.Event.DispatchEvent("ClickWar");
            this.aperture.off(Laya.Event.CLICK, this, this.ClickBtnEvent);
            if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Fourthly) {
                this.aperture.on(Laya.Event.MOUSE_DOWN, this, this.ExchangePlace);
                this.GuidanceAuto(Laya.Handler.create(this, this.AutoExchangePlace));
                this.SetEffectPos(535, 380, 0, 0);
                this._arrows.visible = false;
                this.ArrowsSlide(550, 290, 380, 330, 2000, 0);
                //this.SetInfoBgPos(0,600);
            }
            else if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Eighth) {
                this.aperture.on(Laya.Event.MOUSE_DOWN, this, this.ExchangePlace);
                this.GuidanceAuto(Laya.Handler.create(this, this.AutoExchangePlace));
                this.SetEffectPos(280, 1100, 0, 0);
                this._arrows.visible = false;
                this.ArrowsSlide(300, 1000, 390, 330, 3000, 0);
                //this.SetInfoBgPos(0,600);
            }
        };
        /**点击进阶页面 */
        GuidanceView.prototype.ClickStar = function () {
            this.infoBg.visible = true;
            H52D_Framework.Event.DispatchEvent("ClickStar");
            this.GuidanceType(E_GuidanceType.E_Strong);
            this.NewTeach(H52D_Framework.E_GuidanceStep.E_Second);
            this.aperture.off(Laya.Event.CLICK, this, this.ClickBtnEvent);
            this.aperture.on(Laya.Event.CLICK, this, this.ClickBtnEvent, ["ClickBtnStar", false]);
            this.GuidanceAuto(Laya.Handler.create(this, this.ClickBtnEvent, ["ClickBtnStar", false]));
        };
        /**交换位置 */
        GuidanceView.prototype.ExchangePlace = function () {
            this.infoBg.visible = true;
            if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Fourthly) {
                H52D_Framework.Event.DispatchEvent("ExchangePlace");
            }
            else if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Eighth) {
                H52D_Framework.Event.DispatchEvent("fsTen");
            }
            this.guidBj.visible = false;
            this.aperture.off(Laya.Event.MOUSE_DOWN, this, this.ExchangePlace);
            H52D_Framework.UIManager.Instance.DestroyUI("GuidanceView", [H52D_Framework.NewGuidRoot]);
            this.Destroy();
            if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Fourthly) {
                H52D_Framework.Guidance.Instance.SetGuidanceStep(H52D_Framework.E_GuidanceStep.E_Fourthly);
            }
            else if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Eighth) {
                H52D_Framework.Guidance.Instance.SetGuidanceStep(H52D_Framework.E_GuidanceStep.E_Eighth);
            }
        };
        GuidanceView.prototype.AutoExchangePlace = function () {
            this.aperture.off(Laya.Event.MOUSE_DOWN, this, this.ExchangePlace);
            if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Fourthly) {
                H52D_Framework.Guidance.Instance.SetGuidanceStep(H52D_Framework.E_GuidanceStep.E_Fourthly);
                var heroID = H52D_Framework.HeroPosition.Instance.PositionWar[0];
                H52D_Framework.Event.DispatchEvent("PutHero", [4, heroID]);
            }
            else if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Eighth) {
                H52D_Framework.Guidance.Instance.SetGuidanceStep(H52D_Framework.E_GuidanceStep.E_Eighth);
                var heroID = H52D_Framework.HeroManager.Instance.Hero_sort(9);
                H52D_Framework.Event.DispatchEvent("PutHero", [4, heroID]);
            }
            this.Close();
            this.SaveWar();
        };
        /**保持布阵 */
        GuidanceView.prototype.SaveWar = function () {
            this.infoBg.visible = false;
            if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Fourthly) {
                this.SetGuidanceInfo(E_GuidanceType.E_Strong, H52D_Framework.E_GuidanceStep.E_Fourthly, this.ClickBtnEvent, ["SaveWar", false, H52D_Framework.E_GuidanceStep.E_Fifth], 0, 670, 70, 0, 100);
            }
            else if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Eighth) {
                this.SetGuidanceInfo(E_GuidanceType.E_Strong, H52D_Framework.E_GuidanceStep.E_Eighth, this.ClickBtnEvent, ["SaveWar", false], 0, 670, 70, 0, 100);
            }
        };
        GuidanceView.prototype.ClickUpSkill = function () {
            this.infoBg.visible = true;
            var text = new Label();
            var img = new Laya.Image();
            text.text = "解锁技能";
            var buf = { 1: 0, 2: text, 3: img };
            H52D_Framework.Event.DispatchEvent("ClickUpSkill", buf);
            H52D_Framework.Event.DispatchEvent("PanelClose");
            this.SetEffectPos(70, 1070, 0, -100);
            text.destroy();
            img.destroy();
            this.infoBg.visible = false;
            this._arrows.rotation = 180;
            this.aperture.on(Laya.Event.CLICK, this, this.ClickBtnEvent, ["OnSkillClick", true, H52D_Framework.E_GuidanceStep.E_Seventh, [0]]);
            this.GuidanceAuto(Laya.Handler.create(this, this.ClickBtnEvent, ["OnSkillClick", true, H52D_Framework.E_GuidanceStep.E_Seventh, [0]]));
        };
        /**自动调整激活光圈位置 */
        GuidanceView.prototype.NewTeach = function (special) {
            var _this = this;
            if (special === void 0) { special = 0; }
            H52D_Framework.OneTimer(100, Laya.Handler.create(this, function () {
                _this.ApertureEffect(0, 3);
                _this.ArrowsEffect(0, 1);
            }));
            var choice = special == 0 ? H52D_Framework.Guidance.Instance.guidanceStep : special;
            this._bControl = H52D_Framework.ViewUILogic.Instance.halfPanel;
            switch (choice) {
                case H52D_Framework.E_GuidanceStep.E_Second:
                    if (H52D_Framework.Guidance.Instance.bWar) {
                        this._bControl == true ? this.SetEffectPos(650, 950, 0, 100) : this.SetEffectPos(650, 150, 0, 100);
                        H52D_Framework.Guidance.Instance.bWar = false;
                    }
                    else {
                        var nPos = this.GetHeroLvPos();
                        if (nPos) {
                            this._bControl == true ? this.SetEffectPos(650, nPos + 950, 0, 100) : this.SetEffectPos(650, nPos + 150, 0, 100);
                            break;
                        }
                        this._bControl == true ? this.SetEffectPos(650, 950, 0, 100) : this.SetEffectPos(650, 150, 0, 100);
                    }
                    break;
                case H52D_Framework.E_GuidanceStep.E_Thirdly:
                    this._bControl == true ? this.SetEffectPos(650, 950, 0, 100) : this.SetEffectPos(650, 150, 0, 100);
                    break;
                case H52D_Framework.E_GuidanceStep.E_Fourthly:
                    this._bControl == true ? this.SetEffectPos(330, 880, 0, 100) : this.SetEffectPos(330, 80, 0, 100);
                    break;
                case H52D_Framework.E_GuidanceStep.E_Fifth:
                    this._bControl == true ? this.SetEffectPos(200, 870, 0, 100) : this.SetEffectPos(200, 70, 0, 100);
                    break;
                case H52D_Framework.E_GuidanceStep.E_Sixth:
                    this._bControl == true ? this.SetEffectPos(650, 1080, 0, 100) : this.SetEffectPos(650, 300, 0, 100);
                    break;
                case H52D_Framework.E_GuidanceStep.E_Seventh:
                    this._bControl == true ? this.SetEffectPos(320, 1070, 0, 100) : this.SetEffectPos(650, 350, 0, 100);
                    break;
                case H52D_Framework.E_GuidanceStep.E_Eighth:
                    this._bControl == true ? this.SetEffectPos(320, 870, 0, 100) : this.SetEffectPos(320, 70, 0, 100);
                    break;
                case H52D_Framework.E_GuidanceStep.E_Ninth:
                    this._bControl == true ? this.SetEffectPos(220, 1050, 0, 100) : this.SetEffectPos(220, 220, 0, 100);
                    break;
            }
        };
        GuidanceView.prototype.GetHalfPanel = function (value) {
            this._bControl = value;
        };
        /**光圈特效加载 */
        GuidanceView.prototype.ApertureEffect = function (direction, scale, Btn) {
            var _this = this;
            if (this._aperture) {
                this._aperture.Destroy();
            }
            if (Btn) {
                this._aperture = new H52D_Framework.Avatar(Btn);
                this._aperture.Load("res/effect/effect_ui_guangquan/effect_ui_guangquan.sk", 1, scale, 50, 50, Laya.Handler.create(this, function () {
                    _this._aperture.Play("effect_ui_guangquan", true, true, function () {
                    });
                    _this._aperture.Armature.rotation = direction;
                }));
            }
            else {
                this._aperture = new H52D_Framework.Avatar(this.aperture);
                this._aperture.Load("res/effect/effect_ui_guangquan/effect_ui_guangquan.sk", 1, scale, 50, 50, Laya.Handler.create(this, function () {
                    _this._aperture.Play("effect_ui_guangquan", true, true, function () {
                    });
                    _this._aperture.Armature.rotation = direction;
                }));
            }
        };
        /**箭头特效加载 */
        GuidanceView.prototype.ArrowsEffect = function (direction, scale, Btn) {
            var _this = this;
            this.arrows.skin = "";
            if (this._arrows) {
                this._arrows.Destroy();
            }
            if (Btn) {
                this._arrows = new H52D_Framework.Avatar(Btn);
                this._arrows.Load("res/effect/effect_ui_jiantou/effect_ui_jiantou.sk", 1, scale, 0, 0, Laya.Handler.create(this, function () {
                    _this._arrows.Play("effect_ui_jiantou", true, true, function () {
                    });
                    _this._arrows.Armature.rotation = direction;
                }));
            }
            else {
                this._arrows = new H52D_Framework.Avatar(this.arrows);
                this._arrows.Load("res/effect/effect_ui_jiantou/effect_ui_jiantou.sk", 1, scale, 0, 0, Laya.Handler.create(this, function () {
                    _this._arrows.Play("effect_ui_jiantou", true, true, function () {
                    });
                    _this._arrows.Armature.rotation = direction;
                }));
            }
        };
        /**设置特效位置 */
        GuidanceView.prototype.SetEffectPos = function (x, y, excursion_x, excursion_y, Btn) {
            var value_x = x * G_StageWidthScale;
            var value_y = y * G_StageHeightScale;
            var ax = value_x + excursion_x;
            var ay = value_y + excursion_y;
            this.aperture.x = value_x;
            this.aperture.y = value_y;
            this.arrows.x = ax;
            this.arrows.y = ay;
            this.click.x = value_x;
            this.click.y = value_y;
            // this.infoBg.x = this.arrows.x;
            // this.infoBg.y = this.arrows.y + excursion_y;
        };
        /**光圈呼吸大小 */
        GuidanceView.prototype.SetEffectScale = function () {
            var _this = this;
            var x = 1;
            H52D_Framework.Tick.FrameLoop(2, this, function () {
                if (!_this._aperture || !_this._aperture.loaded)
                    return;
                var scaleValue = Math.sin(x);
                scaleValue > 0 ? scaleValue += 4 : scaleValue -= 4;
                _this._aperture.scale = scaleValue / 2;
                _this.click.scale(scaleValue, scaleValue);
                x += 0.02;
            });
        };
        /**光圈滑动 */
        GuidanceView.prototype.EffectSlide = function (start_x, start_y, end_x, end_y) {
            var slidetime = 100;
            var speed_x = (end_x - start_x) / slidetime;
            var speed_y = (end_y - start_y) / slidetime;
            var sx = start_x;
            var sy = start_y;
            this.SetEffectPos(start_x, start_y, this._xExcursion, this._yExcursion);
            H52D_Framework.Tick.FrameLoop(120, this, TickSlide);
            function TickSlide() {
                H52D_Framework.Tick.Clear(this, Slide);
                sx = start_x;
                sy = start_y;
                H52D_Framework.Tick.FrameLoop(1, this, Slide);
            }
            function Slide() {
                var difference_x = sx - end_x;
                var difference_y = sy - end_y;
                var abs_x = Math.abs(difference_x);
                var abs_y = Math.abs(difference_y);
                if (abs_x < 1 && abs_y < 1)
                    return;
                sx += speed_x;
                sy += speed_y;
                this.SetEffectPos(sx, sy, this._xExcursion, this._yExcursion);
            }
        };
        /**手指滑动 */
        GuidanceView.prototype.ArrowsSlide = function (start_x, start_y, end_x, end_y, time, rot) {
            if (rot === void 0) { rot = 0; }
            this.arrows.visible = true;
            this.arrows.skin = "ui_guid/ui_shouzhi.png";
            this.arrows.rotation = rot;
            this.arrows.x = start_x * G_StageWidthScale;
            this.arrows.y = start_y * G_StageHeightScale;
            this.Open(start_x * G_StageWidthScale, start_y * G_StageHeightScale, end_x * G_StageWidthScale, end_y * G_StageHeightScale, time);
        };
        GuidanceView.prototype.Open = function (start_x, start_y, end_x, end_y, time) {
            this.loop = true;
            this.Come(start_x, start_y, end_x, end_y, time);
        };
        GuidanceView.prototype.Close = function () {
            if (this.comeTween == null || this.goTween == null)
                return;
            Laya.Tween.clear(this.comeTween);
            Laya.Tween.clear(this.goTween);
        };
        GuidanceView.prototype.Come = function (start_x, start_y, end_x, end_y, time) {
            var _this = this;
            this.comeTween = Laya.Tween.to(this.arrows, { x: end_x, y: end_y }, time, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                if (_this.loop) {
                    _this.Go(start_x, start_y, end_x, end_y, time);
                }
                else {
                    _this.Close();
                }
            }));
        };
        GuidanceView.prototype.Go = function (start_x, start_y, end_x, end_y, time) {
            var _this = this;
            this.goTween = Laya.Tween.to(this.arrows, { x: start_x, y: start_y }, time, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                if (_this.loop) {
                    _this.Come(start_x, start_y, end_x, end_y, time);
                }
                else {
                    _this.Close();
                }
            }));
        };
        /**
         * 选择引导类型
         * @param type 引导类型
         */
        GuidanceView.prototype.GuidanceType = function (guidanceType) {
            this._guidanceType = guidanceType;
            this.storyBj.visible = false;
            switch (this._guidanceType) {
                case E_GuidanceType.E_Strong:
                    this.spr_1.visible = true;
                    this.time.visible = true;
                    break;
                case E_GuidanceType.E_Weak:
                    this.spr_1.visible = false;
                    this.time.visible = false;
                    break;
            }
        };
        GuidanceView.prototype.GuidanceAuto = function (fun) {
            H52D_Framework.Tick.Clear(this, this.AutoTime);
            this._time = 10;
            if (H52D_Framework.Guidance.Instance.guidanceStep == H52D_Framework.E_GuidanceStep.E_Aide) {
                this._time = 7;
            }
            H52D_Framework.Tick.Loop(1000, this, this.AutoTime, [fun]);
        };
        GuidanceView.prototype.AutoTime = function (fun) {
            this._time--;
            this.time.text = "自动引导下一步（" + this._time + "s)";
            if (this._time <= 0) {
                fun.run();
            }
        };
        /** 点点点呼吸效果*/
        GuidanceView.prototype.GameShowPic = function () {
            var _this = this;
            var tween;
            tween = Laya.Tween.to(this.clickImg, { alpha: 0 }, 500, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                Laya.Tween.clear(tween);
                tween = Laya.Tween.to(_this.clickImg, { alpha: 1 }, 1200, Laya.Ease.linearIn, Laya.Handler.create(_this, function () {
                    Laya.Tween.clear(tween);
                }));
            }));
        };
        GuidanceView.prototype.SetInfoBgPos = function (x, y) {
            this.infoBg.x += x * G_StageWidthScale;
            this.infoBg.y += y * G_StageHeightScale;
        };
        GuidanceView.prototype.GetHeroLvPos = function () {
            function tsort(left, right) {
                var leftcan = false; //是否能够激活
                var leftActive = false;
                var rightcan = false; //是否已经激活
                var rightActive = false;
                leftActive = H52D_Framework.HeroManager.Instance.IsActive(left); //是否已经激活
                leftcan = H52D_Framework.HeroManager.Instance.HeroIstrue(left);
                var left_quality = H52D_Framework.HeroConfig[left].heroPosition;
                rightActive = H52D_Framework.HeroManager.Instance.IsActive(right);
                rightcan = H52D_Framework.HeroManager.Instance.HeroIstrue(right);
                var right_quality = H52D_Framework.HeroConfig[right].heroPosition;
                if (leftcan != rightcan) {
                    return leftcan ? -1 : 1;
                }
                if (leftActive != rightActive) {
                    return leftActive ? -1 : 1;
                }
                if (left_quality && left_quality != right_quality) {
                    return left_quality < right_quality ? -1 : 1;
                }
                return left - right;
                //先排能够激活的
            }
            var tHeroList = H52D_Framework.HeroManager.Instance.GetCfgHeroList();
            tHeroList.sort(tsort);
            for (var nHeroId in tHeroList) {
                var bCanAct = H52D_Framework.HeroManager.Instance.HeroIstrue(tHeroList[nHeroId]); //是否能够激活
                var bIsActive = H52D_Framework.HeroManager.Instance.IsActive(tHeroList[nHeroId]);
                if (!bCanAct && bIsActive) {
                    return 98 * (Number(nHeroId));
                }
            }
            return null;
        };
        return GuidanceView;
    }(ui.guidance.GuidanceViewUI));
    H52D_Framework.GuidanceView = GuidanceView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=GuidanceView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**剧情*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("StoryView", [
        { url: "res/ui/ui_guid.atlas", type: Laya.Loader.ATLAS },
    ]);
    var StoryView = /** @class */ (function (_super) {
        __extends(StoryView, _super);
        function StoryView(buf) {
            var _this = _super.call(this) || this;
            _this.AddEvent();
            _this.Init(buf);
            return _this;
        }
        StoryView.prototype.Init = function (buf) {
            var sound = buf[1][1].sound;
            var shake = buf[1][1].shake;
            var AnimaName = buf[1][1].AnimaName;
            var strFlieName = buf[1][1].strFlieName;
            this.PlaySound(sound, shake);
            this.PlayStory(strFlieName, AnimaName);
        };
        StoryView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.overBtn.on(Laya.Event.CLICK, this, this.OverStory);
        };
        StoryView.prototype.OnDestroy = function () {
            this.offAll();
        };
        //播放音效、震屏处理
        StoryView.prototype.PlaySound = function (sound, shake) {
            var _loop_1 = function (key) {
                var time = sound[key][1];
                var soundName = sound[key][2];
                H52D_Framework.Tick.Once(time, this_1, function () {
                    H52D_Framework.SoundManager.Instance.OnPlayMusic(soundName, 1);
                });
            };
            var this_1 = this;
            //播放音效
            for (var key in sound) {
                _loop_1(key);
            }
            var _loop_2 = function (key) {
                var time = shake[key][1];
                var value_1 = shake[key][2];
                var value_2 = shake[key][3];
                H52D_Framework.Tick.Once(time, this_2, function () {
                    H52D_Framework.EffectManager.Instance.StartShock(value_1, true, value_2);
                });
            };
            var this_2 = this;
            //震屏
            for (var key in shake) {
                _loop_2(key);
            }
        };
        //播放动画
        StoryView.prototype.PlayStory = function (aimUrl, aimNameArr) {
            var _this = this;
            if (this._storyImgMod != null) {
                this._storyImgMod.Destroy();
            }
            //动画名字
            var aimName;
            //延迟播放、结束时间
            var standingTime = 0;
            this._storyImgMod = new H52D_Framework.Avatar(this.aim);
            //播放逻辑
            this._storyImgMod.Load(aimUrl, 1, 0.69, 0, 0, Laya.Handler.create(this, function () {
                aimName = aimNameArr[1][2];
                standingTime = aimNameArr[1][1];
                H52D_Framework.OneTimer(standingTime, Laya.Handler.create(_this, function () {
                    _this._storyImgMod.Play(aimName, false, null, function () {
                        aimName = aimNameArr[2][2];
                        standingTime = aimNameArr[2][1];
                        H52D_Framework.OneTimer(standingTime, Laya.Handler.create(_this, function () {
                            _this._storyImgMod.Play(aimName, false, null, function () {
                                aimName = aimNameArr[3][2];
                                standingTime = aimNameArr[3][1];
                                H52D_Framework.OneTimer(standingTime, Laya.Handler.create(_this, function () {
                                    _this._storyImgMod.Play(aimName, false, null, function () {
                                        _this.OverStory();
                                    });
                                }));
                            });
                        }));
                    });
                }));
            }));
        };
        //结束动画
        StoryView.prototype.OverStory = function () {
            if (this._storyImgMod != null) {
                this._storyImgMod.Destroy();
            }
            H52D_Framework.BattleManager.Instance.OpenBattle();
            H52D_Framework.UIManager.Instance.DestroyUI("StoryView", [H52D_Framework.ViewStoryRoot], Laya.Handler.create(this, function () {
                H52D_Framework.Event.DispatchEvent("StoryEvent");
            }));
        };
        return StoryView;
    }(ui.guidance.StoryViewUI));
    H52D_Framework.StoryView = StoryView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=StoryView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("HeroLvUp", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
    ]);
    var HeroLvUp = /** @class */ (function (_super) {
        __extends(HeroLvUp, _super);
        function HeroLvUp(buf) {
            var _this = _super.call(this) || this;
            //private _isclick=false;		
            _this._Lveffect = null;
            _this._tabItemIndex = 0;
            _this._lock = false;
            _this.btn_label = {
                0: "升级",
                1: "升级X1",
                2: "升级X10",
                3: "升级最大",
            };
            _this.Btn_enum = {
                1: _this.Btn_shop,
                2: _this.Btn_shop1,
                3: _this.Btn_shop10,
                4: _this.Btn_shopMax,
            };
            _this.skill = [];
            _this.hero = [];
            _this.Hero_type = {
                1: "ui_hero/icon-renwu-leixing-gongji.png",
                2: "ui_hero/icon-renwu-leixing-fangyu.png"
            };
            _this.heroView = buf[1];
            var Button = _this.heroView.mainView.btn_ui_max;
            Button.visible = true;
            _this._tabItemIndex = 0;
            _this.List_hero.vScrollBarSkin = "";
            _this.BtnShop.selectedIndex = 0;
            _this.BtnShop.visible = true;
            _this.Btn_shop.text = _this.btn_label[HeroLvUp.nIdex];
            _this.Btn_shop1.visible = false;
            _this.Btn_shop10.visible = false;
            _this.Btn_shopMax.visible = false;
            H52D_Framework.HeroPosition.Instance.InitPosInfo();
            //this.UpdateList();				
            _this.Refesh();
            _this.ChangeListHigth();
            _this.AddEvent();
            _this.Btn_OnClick();
            return _this;
        }
        HeroLvUp.prototype.Refesh = function () {
            this.BtnShop.selectedIndex = HeroLvUp._Indx;
            this.hero = H52D_Framework.HeroManager.Instance.GetCfgHeroList();
            this.SortHero(true);
            this.List_hero.repeatY = this.hero.length;
            this.List_hero.array = this.hero;
            this.List_hero.renderHandler = new Laya.Handler(this, this.BtnList);
            this.BtnShop.selectHandler = new Laya.Handler(this, this.BtnShopClick);
        };
        HeroLvUp.prototype.Btn_OnClick = function () {
            this.Btn_shop.on(Laya.Event.CLICK, this, this.Btn_shopclick, [1]);
            this.Btn_shop1.on(Laya.Event.CLICK, this, this.Btn_shopclick, [2]);
            this.Btn_shop10.on(Laya.Event.CLICK, this, this.Btn_shopclick, [3]);
            this.Btn_shopMax.on(Laya.Event.CLICK, this, this.Btn_shopclick, [4]);
        };
        HeroLvUp.prototype.AddEvent = function () {
            H52D_Framework.Event.RegistEvent('ClickActivate', Laya.Handler.create(this, this.NewTeach_Active));
            H52D_Framework.Event.RegistEvent('ChangeMoeny', Laya.Handler.create(this, this.ChangeMoney)); //ClickActivate
            H52D_Framework.Event.RegistEvent('ReqActivateHero', Laya.Handler.create(this, this.ReqActivateHero));
            H52D_Framework.Event.RegistEvent('ReqHeroLevelUp', Laya.Handler.create(this, this.ReqHeroLevelUp));
            H52D_Framework.Event.RegistEvent('changelisthigth', Laya.Handler.create(this, this.ChangeListHigth));
            H52D_Framework.Event.RegistEvent('ClickUpgrade', Laya.Handler.create(this, this.NewTeach_LvUp));
        };
        HeroLvUp.prototype.ChangeMoney = function () {
            this.UpdateList();
        };
        // 移除事件监听
        HeroLvUp.prototype.OnDestroy = function () {
            this.offAll();
            //this._Lveffect.Destroy();
            H52D_Framework.Event.RemoveEvent('ClickActivate', Laya.Handler.create(this, this.NewTeach_Active)); //激活按钮
            H52D_Framework.Event.RemoveEvent('ChangeMoeny', Laya.Handler.create(this, this.ChangeMoney));
            H52D_Framework.Event.RemoveEvent('ReqActivateHero', Laya.Handler.create(this, this.ReqActivateHero));
            H52D_Framework.Event.RemoveEvent('ReqHeroLevelUp', Laya.Handler.create(this, this.ReqHeroLevelUp));
            H52D_Framework.Event.RemoveEvent('changelisthigth', Laya.Handler.create(this, this.ChangeListHigth));
            H52D_Framework.Event.RemoveEvent('ClickUpgrade', Laya.Handler.create(this, this.NewTeach_LvUp));
        };
        HeroLvUp.prototype.ChangeListHigth = function () {
            var _this = this;
            var bool = Boolean(this.heroView.mainView.halfPanel);
            if (bool) {
                H52D_Framework.OneTimer(300, Laya.Handler.create(this, function () {
                    if (_this.destroyed)
                        return;
                    _this.List_hero.height = 238 * G_StageHeightScale;
                }), "OneTimerChangeListHigth");
            }
            else {
                this.List_hero.height = 1040 * G_StageHeightScale;
            }
        };
        /** 激活成功 */
        HeroLvUp.prototype.ReqActivateHero = function () {
            var _this = this;
            this.LvUpEffect();
            H52D_Framework.TipsLogic.Instance.OpenSystemTips("英雄激活成功！");
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/level_up.mp3");
            }
            H52D_Framework.OneTimer(500, Laya.Handler.create(this, function () {
                _this.UpdateList(false);
            }));
            H52D_Framework.Guidance.Instance.Trigger_Eighth();
        };
        /** 升级成功 */
        HeroLvUp.prototype.ReqHeroLevelUp = function () {
            var _this = this;
            H52D_Framework.TipsLogic.Instance.OpenSystemTips("英雄升级成功！");
            this.LvUpEffect();
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.ADD_GOLD);
            // this.UpdateList();
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/level_up.mp3");
            }
            H52D_Framework.OneTimer(300, Laya.Handler.create(this, function () {
                _this.UpdateList();
            }));
        };
        /***播放特效 */
        HeroLvUp.prototype.LvUpEffect = function () {
            var _this = this;
            this._Lveffect = new H52D_Framework.Avatar(this._icon);
            this._Lveffect.Load("res/effect/effect_ui_shengji/effect_ui_shengji.sk", 1, 1.8, 37, 36, Laya.Handler.create(this, function () {
                //this._Lveffect.visible=true;
                _this._Lveffect.Play("effect_ui_shengji", false, true, function () {
                    _this._Lveffect.Destroy();
                });
            }));
        };
        HeroLvUp.prototype.UpdateList = function (bool) {
            bool = false;
            this.BtnShop.selectedIndex = HeroLvUp._Indx;
            this.hero = H52D_Framework.HeroManager.Instance.GetCfgHeroList();
            this.SortHero(bool);
            this.List_hero.array = this.hero;
            this.List_hero.refresh();
            this.List_hero.renderHandler = new Laya.Handler(this, this.BtnList);
            this.BtnShop.selectHandler = new Laya.Handler(this, this.BtnShopClick);
            H52D_Framework.Event.DispatchEvent("UpdateRedPoint");
        };
        /**新手指导 激活英雄 */
        HeroLvUp.prototype.NewTeach_Active = function () {
            var nHeroId = this.hero[0];
            this.OpenHero(nHeroId);
        };
        /**新手引导  升级 */
        HeroLvUp.prototype.NewTeach_LvUp = function (num) {
            this.nHeroID = this.hero[num];
            var lv = H52D_Framework.HeroManager.Instance.MaxLvUp(this.nHeroID, H52D_Framework.MasterPlayer.Instance.player.Level);
            if (H52D_Framework.HeroManager.Instance.GetHero(this.nHeroID).Level >= lv) {
                return;
            }
            this.LvUpHero(this.nHeroID, H52D_Framework.HeroManager.Instance.GetHero(this.nHeroID).Level + 1);
            H52D_Framework.Guidance.Instance.bWar = false;
        };
        HeroLvUp.prototype.SortHero = function (bool) {
            function tsort(left, right) {
                var leftcan = false; //是否能够激活
                var leftActive = false;
                var rightcan = false; //是否已经激活
                var rightActive = false;
                leftActive = H52D_Framework.HeroManager.Instance.IsActive(left); //是否已经激活
                leftcan = H52D_Framework.HeroManager.Instance.HeroIstrue(left);
                var left_quality = H52D_Framework.HeroConfig[left].heroPosition;
                rightActive = H52D_Framework.HeroManager.Instance.IsActive(right);
                rightcan = H52D_Framework.HeroManager.Instance.HeroIstrue(right);
                var right_quality = H52D_Framework.HeroConfig[right].heroPosition;
                if (leftcan != rightcan) {
                    return leftcan ? -1 : 1;
                }
                if (leftActive != rightActive) {
                    return leftActive ? -1 : 1;
                }
                if (left_quality && left_quality != right_quality) {
                    return left_quality < right_quality ? -1 : 1;
                }
                return left - right;
                //先排能够激活的
            }
            if (bool) {
                this.hero.sort(tsort);
            }
        };
        HeroLvUp.prototype.BtnList = function (item, index) {
            var nHeroID = this.hero[index];
            var tCfg = H52D_Framework.HeroConfig[nHeroID];
            var Item_id = tCfg.needItem;
            var Item_tcfg = H52D_Framework.ItemConfig[Item_id].Line;
            var nx = tCfg.heroRatio;
            var nType = tCfg.type;
            // 是否激活
            var bActive = H52D_Framework.HeroManager.Instance.IsActive(nHeroID);
            var n_canActive = H52D_Framework.HeroManager.Instance.HeroIstrue(nHeroID); //检测英雄是否满足激活条件
            var herotype = item.getChildByName("HeroType");
            var level = item.getChildByName("HeroLevel"); //拿到人物等级信息
            var icon = item.getChildByName("HeadIcon");
            var hero_war = icon.getChildByName("War_img");
            var hero_warbg = icon.getChildByName("War_bg");
            var icon_bg = item.getChildByName("pinzhi_bg");
            var name = item.getChildByName("HeroName");
            var hurt = item.getChildByName("HeroHurt");
            var hp = item.getChildByName("HeroHp");
            var btn_1 = item.getChildByName("Btn_1");
            var btn_label = btn_1.getChildByName("Btn_label");
            var money_html = btn_1.getChildByName("money");
            var nlock = btn_1.getChildByName("lvup_lock");
            var btn_img = btn_1.getChildByName("btn_img");
            var new_logo = btn_1.getChildByName("new_logo");
            var btn_2 = item.getChildByName("Btn_2");
            var skill = item.getChildByName("Btn_skill");
            var btn_labels = item.getChildByName("Btn_labels");
            var Addhurt = item.getChildByName("Add_Hurt");
            var Addhp = item.getChildByName("Add_hp");
            var icon1 = item.getChildByName("heroicon1");
            var get_name = item.getChildByName("get_LandName");
            var get_land1 = item.getChildByName("get_Land1");
            var get_land2 = item.getChildByName("get_Land2");
            var get_land3 = item.getChildByName("get_Land3");
            var img_max = item.getChildByName("lv_max");
            img_max.visible = btn_labels.visible;
            new_logo.visible = n_canActive;
            herotype.skin = H52D_Framework.BaseDefine.HeroTypeIcon[nType];
            btn_2.on(Laya.Event.CLICK, this, this.HeroAllInfo, [nHeroID]);
            name.text = H52D_Framework.StringInfoConfig[tCfg.name]["s"];
            name.color = H52D_Framework.BaseDefine.LabelColor[tCfg.quality];
            icon.skin = "ui_icon/" + tCfg.strIcon;
            var money_label;
            H52D_Framework.SetHtmlStyle(money_html, 20, "#2ae52a", "center");
            var path = "<img src= 'ui_main/icon-jinbi.png' width='24px' height='24px'></img>";
            money_html.innerHTML = path;
            var nLevel;
            var my_money = H52D_Framework.BagManager.Instance.getItemNumber(1);
            var _playlv = H52D_Framework.MasterPlayer.Instance.player.Level;
            var myNum = H52D_Framework.BagManager.Instance.getItemNumber(tCfg.needItem);
            icon_bg.skin = H52D_Framework.BaseDefine.QualityList[tCfg.quality];
            btn_1.mouseEnabled = true;
            btn_labels.visible = false;
            btn_1.visible = true;
            nlock.visible = false;
            nlock.color = "#892020";
            hero_warbg.visible = H52D_Framework.HeroPosition.Instance.IsInWar(nHeroID);
            var money_color;
            if (bActive) {
                hero_war.skin = "";
                var war = H52D_Framework.HeroPosition.Instance.HeroWar;
                if (H52D_Framework.HeroPosition.Instance.IsInWar(nHeroID)) {
                    if (war[nHeroID] != 4) {
                        hero_war.skin = H52D_Framework.BaseDefine.HeroWar_pos[2];
                    }
                    else {
                        hero_war.skin = H52D_Framework.BaseDefine.HeroWar_pos[1];
                    }
                }
                var hero = H52D_Framework.HeroManager.Instance.GetHero(nHeroID);
                icon.gray = false;
                get_name.visible = get_land1.visible = get_land2.visible = get_land3.visible = false;
                money_html.innerHTML = path;
                btn_1.visible = true;
                Addhp.visible = true;
                Addhurt.visible = true;
                var star = hero.Star == 0 ? 1 : hero.Star;
                var add_star = H52D_Framework.HeroAdvanceConfig[nHeroID][star].Attr[1][2] / 10000;
                if (hero.Star == 0) {
                    add_star = 0;
                }
                var base = H52D_Framework.HeroUpgrateConfig[nType][hero.Level];
                hp.text = H52D_Framework.StringInfoConfig[base.Attr[1][1]].s + ":" + hero.attr.GetAttributeValue(1);
                hurt.text = H52D_Framework.StringInfoConfig[base.Attr[2][1]].s + ":" + hero.attr.GetAttributeValue(2);
                level.text = hero.Level.toString();
                var tSkillCfg = H52D_Framework.HeroConfig[nHeroID].heroPassiveSkill;
                var nSkillFlag = 0;
                for (var nIdx = 1; nIdx <= 10; nIdx++) { //设置技能图片
                    var tSkillInfo = tSkillCfg[nIdx];
                    var nSKillID = tSkillInfo[1];
                    var info = H52D_Framework.PassiveSkillConfig[nSKillID];
                    var nUseLevel = tSkillInfo[2];
                    var skillicon = item.getChildByName("skill_icon" + nIdx);
                    var iconlock = skillicon.getChildByName("skill_lock");
                    skillicon.visible = true;
                    //设置图片
                    skillicon.skin = "ui_icon/" + info.strIcon;
                    if (hero.Level >= nUseLevel) {
                        iconlock.visible = false;
                    }
                    else {
                        if (nSkillFlag < 1) {
                            nSkillFlag += 1;
                            // 至灰							
                            iconlock.visible = true;
                        }
                        else {
                            skillicon.visible = false;
                            iconlock.visible = true;
                        }
                    }
                }
                if (H52D_Framework.HeroManager.Instance.HeroMaxLv <= hero.Level) { //满级判断
                    Addhp.visible = false;
                    Addhurt.visible = false;
                    money_html.visible = false;
                    btn_1.visible = false;
                    btn_labels.visible = true;
                    return;
                }
                else {
                    var needs = H52D_Framework.StringInfoConfig[7001].s;
                    var tUseList = H52D_Framework.HeroManager.Instance.GetHeroLvUpUse(nHeroID, HeroLvUp.nIdex); //能升的级数和需要的金币
                    var money_num = Math.floor(tUseList[1] * nx); //实际需要金币
                    var nowmoney = H52D_Framework.HeroUpgrateConfig[nType][hero.Level].ConsumeGold; //现在等级需要的金币
                    var next_base = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0]].Attr;
                    var addhp = next_base[1][2] - base.Attr[1][2];
                    var addhurt = next_base[2][2] - base.Attr[2][2];
                    Addhp.text = "(↑" + (Math.floor((addhp * nx) * (add_star + 1))).toString() + ")";
                    Addhurt.text = "(↑" + (Math.floor((addhurt * nx) * (add_star + 1))).toString() + ")";
                    var play_lv = H52D_Framework.MasterPlayer.Instance.player.Level; //玩家等级
                    var play_money = H52D_Framework.BagManager.Instance.getItemNumber(1); //拥有的金币数
                    var nCanup = H52D_Framework.HeroManager.Instance.MaxLvUp(nHeroID, play_lv); //能升的最大级数
                    var m_canup = H52D_Framework.HeroManager.Instance.M_MaxLvup(nHeroID, play_money);
                    var lock_money = Math.floor((H52D_Framework.HeroUpgrateConfig[nType][nCanup].ConsumeGold - nowmoney) * nx);
                    var lvup_lock = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0]].needPlayerLv; //升级的限制
                    money_label = Math.floor(money_num).toString();
                    money_html.innerHTML = path + money_label;
                    btn_img.gray = false;
                    btn_label.text = "升级X 1";
                    if (tUseList[0] == hero.Level) {
                        if (hero.Level > play_lv || play_money < lock_money) {
                            btn_label.y = 14;
                            lvup_lock = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].needPlayerLv;
                            nlock.visible = true;
                            nlock.text = "角色" + H52D_Framework.Format(needs, lvup_lock);
                            next_base = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0] + 1].Attr;
                            addhp = next_base[1][2] - base.Attr[1][2];
                            addhurt = next_base[2][2] - base.Attr[2][2];
                            btn_img.gray = true;
                            btn_label.gray = true; //#ffa5a7
                            H52D_Framework.SetHtmlStyle(money_html, 20, "#ffa5a7", "center");
                            Addhp.text = "(↑" + (Math.floor((addhp * nx) * (add_star + 1))).toString() + ")";
                            Addhurt.text = "(↑" + (Math.floor((addhurt * nx) * (add_star + 1))).toString() + ")";
                            var a_1 = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].ConsumeGold - nowmoney;
                            money_label = Math.floor(a_1 * nx).toString();
                            money_color = H52D_Framework.HeroManager.Instance.HeroUp_labelcolor(play_money, money_label);
                            money_html.innerHTML = path + H52D_Framework.GetHtmlStrByColor(money_label, money_color[0]);
                            btn_1.mouseEnabled = !btn_img.gray;
                            if (hero.Level < nCanup) {
                                btn_label.y = 24;
                                nlock.visible = false;
                            }
                            return;
                        }
                        next_base = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0] + 1].Attr;
                        addhp = next_base[1][2] - base.Attr[1][2];
                        addhurt = next_base[2][2] - base.Attr[2][2];
                        Addhp.text = "(↑" + (Math.floor((addhp * nx) * (add_star + 1))).toString() + ")";
                        Addhurt.text = "(↑" + (Math.floor((addhurt * nx) * (add_star + 1))).toString() + ")";
                        var a = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].ConsumeGold - nowmoney;
                        money_label = Math.floor(a * nx).toString();
                        money_html.innerHTML = path + money_label;
                        btn_1.mouseEnabled = false;
                        //btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, nLevel, btn_1]);
                    }
                    if (money_num != 0) {
                        if (play_lv >= lvup_lock && play_money >= money_num) { //钱和等级都足够的情况下
                            if (tUseList[0] == -1) {
                                tUseList[0] = 300;
                            }
                            else { //没有满级								
                                btn_label.y = 24;
                                money_label = Math.floor(money_num).toString();
                                money_html.innerHTML = path + money_label;
                                H52D_Framework.SetHtmlStyle(money_html, 20, "#2ae52a", "center");
                                btn_label.text = "升级X " + (tUseList[0] - hero.Level);
                                btn_img.gray = false; //变亮
                                btn_label.gray = false;
                                addhp = next_base[1][2] - base.Attr[1][2];
                                addhurt = next_base[2][2] - base.Attr[2][2];
                                if (tUseList[0] < 300) {
                                    next_base = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0] + 1].Attr;
                                }
                                else {
                                    next_base = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0]].Attr;
                                }
                                Addhp.text = "(↑" + (Math.floor((addhp * nx) * (add_star + 1))).toString() + ")";
                                Addhurt.text = "(↑" + (Math.floor((addhurt * nx) * (add_star + 1))).toString() + ")";
                            }
                            btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, tUseList[0], btn_1]);
                            return;
                        }
                        if (play_lv < lvup_lock && play_money >= money_num) { //钱够   等级不够的情况下
                            btn_label.gray = false;
                            btn_img.gray = false;
                            if (nCanup == hero.Level) {
                                btn_label.text = "升级X 1";
                                btn_label.y = 14;
                                btn_img.gray = true;
                                lvup_lock = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].needPlayerLv;
                                nlock.visible = btn_img.gray;
                                nlock.text = "角色" + H52D_Framework.Format(needs, lvup_lock);
                                var A = nCanup + 1;
                                btn_label.gray = true;
                                ;
                                btn_1.mouseEnabled = !btn_img.gray;
                                var a_2 = H52D_Framework.HeroUpgrateConfig[nType][nCanup + 1].ConsumeGold - nowmoney;
                                H52D_Framework.SetHtmlStyle(money_html, 20, "#ffa5a7", "center");
                                money_label = (Math.floor(a_2 * nx)).toString();
                                //money_html.innerHTML = path + money_label;
                                money_color = H52D_Framework.HeroManager.Instance.HeroUp_labelcolor(play_money, money_label);
                                money_html.innerHTML = path + H52D_Framework.GetHtmlStrByColor(money_label, money_color[0]);
                                next_base = H52D_Framework.HeroUpgrateConfig[nType][nCanup + 1].Attr;
                                var addhp_1 = next_base[1][2] - base.Attr[1][2];
                                var addhurt_1 = next_base[2][2] - base.Attr[2][2];
                                Addhp.text = "(↑" + (Math.floor((addhp_1 * nx) * (add_star + 1))).toString() + ")";
                                Addhurt.text = "(↑" + (Math.floor((addhurt_1 * nx) * (add_star + 1))).toString() + ")";
                                //btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, A, btn_1]);
                                return;
                            }
                            btn_label.text = "升级X " + (nCanup - hero.Level);
                            if (lvup_lock - play_lv > 10 && HeroLvUp.nIdex != 3) {
                                btn_label.text = "升级X 1";
                                if (play_lv < lvup_lock) {
                                    btn_img.gray = true;
                                    nlock.visible = true;
                                    nlock.text = "角色" + H52D_Framework.Format(needs, lvup_lock);
                                    btn_label.y = 14;
                                    var a_3 = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].ConsumeGold - nowmoney;
                                    money_label = (Math.floor(a_3 * nx)).toString();
                                    var money_color_1 = H52D_Framework.HeroManager.Instance.HeroUp_labelcolor(play_money, money_label);
                                    money_html.innerHTML = path + H52D_Framework.GetHtmlStrByColor(money_label, money_color_1[0]);
                                    if (hero.Level > nCanup) {
                                        return;
                                    }
                                    else {
                                        nlock.visible = btn_img.gray = false;
                                        btn_label.y = 24;
                                    }
                                }
                                var a_4 = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].ConsumeGold - nowmoney;
                                money_label = (Math.floor(a_4 * nx)).toString();
                                var money_color_2 = H52D_Framework.HeroManager.Instance.HeroUp_labelcolor(play_money, money_label);
                                money_html.innerHTML = path + H52D_Framework.GetHtmlStrByColor(money_label, money_color_2[0]);
                                next_base = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].Attr;
                                var addhp_2 = next_base[1][2] - base.Attr[1][2];
                                var addhurt_2 = next_base[2][2] - base.Attr[2][2];
                                Addhp.text = "(↑" + (Math.floor((addhp_2 * nx) * (add_star + 1))).toString() + ")";
                                Addhurt.text = "(↑" + (Math.floor((addhurt_2 * nx) * (add_star + 1))).toString() + ")";
                                btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, nCanup, btn_1]);
                                return;
                            }
                            var a = H52D_Framework.HeroUpgrateConfig[nType][nCanup].ConsumeGold - nowmoney;
                            H52D_Framework.SetHtmlStyle(money_html, 20, "#2ae52a", "center");
                            money_label = (Math.floor(a * nx)).toString();
                            money_html.innerHTML = path + money_label;
                            next_base = H52D_Framework.HeroUpgrateConfig[nType][nCanup].Attr;
                            var addhp_3 = next_base[1][2] - base.Attr[1][2];
                            btn_label.y = 24;
                            var addhurt_3 = next_base[2][2] - base.Attr[2][2];
                            Addhp.text = "(↑" + (Math.floor((addhp_3 * nx) * (add_star + 1))).toString() + ")";
                            Addhurt.text = "(↑" + (Math.floor((addhurt_3 * nx) * (add_star + 1))).toString() + ")";
                            btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, nCanup, btn_1]);
                            return;
                        }
                        if (play_lv >= lvup_lock && play_money < money_num) { //钱不够   等级够的情况下							
                            btn_img.gray = true; //变灰
                            btn_label.gray = true;
                            btn_1.mouseEnabled = !btn_img.gray;
                            if (m_canup > hero.Level) { //能升几级 升几级	
                                btn_label.text = "升级X " + (m_canup - hero.Level);
                                var a_5 = H52D_Framework.HeroUpgrateConfig[nType][m_canup].ConsumeGold;
                                //let b = HeroUpgrateConfig[nType][hero.Level].ConsumeGold;								
                                H52D_Framework.SetHtmlStyle(money_html, 20, "#2ae52a", "center");
                                money_label = (Math.floor((a_5 - nowmoney) * nx)).toString();
                                money_html.innerHTML = path + money_label;
                                next_base = H52D_Framework.HeroUpgrateConfig[nType][m_canup].Attr;
                                var addhp_4 = next_base[1][2] - base.Attr[1][2];
                                var addhurt_4 = next_base[2][2] - base.Attr[2][2];
                                Addhp.text = "(↑" + (Math.floor((addhp_4 * nx) * (add_star + 1))).toString() + ")";
                                Addhurt.text = "(↑" + (Math.floor((addhurt_4 * nx) * (add_star + 1))).toString() + ")";
                                btn_img.gray = false;
                                btn_label.gray = false;
                                btn_1.mouseEnabled = !btn_img.gray;
                                btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, m_canup, btn_1]);
                                return;
                            }
                            //钱不够 显示升一级需要的钱
                            btn_label.text = "升级X 1";
                            var a = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0]].ConsumeGold;
                            next_base = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0]].Attr;
                            var addhp_5 = next_base[1][2] - base.Attr[1][2];
                            var addhurt_5 = next_base[2][2] - base.Attr[2][2];
                            money_label = (Math.floor((a - nowmoney) * nx)).toString();
                            H52D_Framework.SetHtmlStyle(money_html, 20, "#ffa5a7", "center");
                            money_html.innerHTML = path + money_label;
                            Addhp.text = "(↑" + (Math.floor((addhp_5 * nx) * (add_star + 1))).toString() + ")";
                            Addhurt.text = "(↑" + (Math.floor((addhurt_5 * nx) * (add_star + 1))).toString() + ")";
                            btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, tUseList[0], btn_1]);
                            return;
                        }
                        if (play_lv < lvup_lock && play_money < money_num) { //等级不够   钱也不够
                            if (hero.Level == nCanup) {
                                next_base = H52D_Framework.HeroUpgrateConfig[nType][nCanup + 1].Attr;
                                var addhp_6 = next_base[1][2] - base.Attr[1][2];
                                var addhurt_6 = next_base[2][2] - base.Attr[2][2];
                                Addhp.text = "(↑" + (Math.floor((addhp_6 * nx) * (add_star + 1))).toString() + ")";
                                Addhurt.text = "(↑" + (Math.floor((addhurt_6 * nx) * (add_star + 1))).toString() + ")";
                            }
                            btn_label.text = "升级X 1";
                            btn_label.y = 14;
                            btn_label.gray = true;
                            btn_img.gray = true;
                            lvup_lock = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].needPlayerLv;
                            var needmoney = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].ConsumeGold;
                            nlock.visible = true;
                            H52D_Framework.HeroManager.Instance.HeroUp_labelcolor(play_money, money_label);
                            nlock.text = "角色" + H52D_Framework.Format(needs, lvup_lock);
                            if (play_lv < lvup_lock && lvup_lock == hero.Level) {
                                H52D_Framework.SetHtmlStyle(money_html, 20, "#ffa5a7", "center");
                                money_label = Math.floor((needmoney - nowmoney) * nx).toString();
                                //money_html.innerHTML = path + money_label;
                                money_color = H52D_Framework.HeroManager.Instance.HeroUp_labelcolor(play_money, money_label);
                                money_html.innerHTML = path + H52D_Framework.GetHtmlStrByColor(money_label, money_color[0]);
                                btn_1.mouseEnabled = !btn_img.gray;
                                return;
                            }
                            btn_label.y = 24;
                            nlock.visible = false;
                            var need_m = H52D_Framework.HeroUpgrateConfig[nType][nCanup].ConsumeGold - nowmoney < play_money ? true : false;
                            var need_lv = H52D_Framework.HeroUpgrateConfig[nType][m_canup].needPlayerLv > play_lv ? true : false;
                            btn_img.gray = true; //变灰
                            if (hero.Level == tUseList[0]) {
                                btn_label.text = "升级X 1";
                                var a = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].ConsumeGold - nowmoney; //HeroUpgrateConfig[nType][hero.Level].ConsumeGold;
                                money_label = a.toString();
                                money_html.innerHTML = path + money_label;
                                btn_img.gray = true; //变灰														
                                return;
                            }
                            if (nCanup < m_canup) {
                                if (need_lv && need_m) {
                                    btn_label.text = "升级X " + (nCanup - hero.Level);
                                    if (play_lv < lvup_lock) {
                                        btn_label.text = "升级X 1";
                                        if (play_lv < lvup_lock) {
                                            btn_img.gray = true;
                                            nlock.visible = true;
                                            nlock.text = "角色" + H52D_Framework.Format(needs, lvup_lock);
                                            btn_label.y = 14;
                                            return;
                                        }
                                    }
                                    H52D_Framework.SetHtmlStyle(money_html, 20, "#2ae52a", "center");
                                    var a = H52D_Framework.HeroUpgrateConfig[nType][nCanup].ConsumeGold - nowmoney; // HeroUpgrateConfig[nType][hero.Level].ConsumeGold;									
                                    money_label = (Math.floor((a) * nx)).toString();
                                    money_html.innerHTML = path + money_label;
                                    next_base = H52D_Framework.HeroUpgrateConfig[nType][nCanup].Attr;
                                    btn_img.gray = false;
                                    btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, nCanup, btn_1]);
                                    if (nCanup == hero.Level) {
                                        btn_label.text = "升级X 1";
                                        H52D_Framework.SetHtmlStyle(money_html, 20, "#ffa5a7", "center");
                                        a = H52D_Framework.HeroUpgrateConfig[nType][nCanup + 1].ConsumeGold - H52D_Framework.HeroUpgrateConfig[nType][nCanup].ConsumeGold;
                                        money_label = (Math.floor(a * nx)).toString();
                                        money_html.innerHTML = path + money_label;
                                        next_base = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].Attr;
                                        a = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].ConsumeGold - nowmoney; // HeroUpgrateConfig[nType][hero.Level].ConsumeGold;
                                    }
                                    var addhp_7 = next_base[1][2] - base.Attr[1][2];
                                    var addhurt_7 = next_base[2][2] - base.Attr[2][2];
                                    Addhp.text = "(↑" + (Math.floor((addhp_7 * nx) * (add_star + 1))).toString() + ")";
                                    Addhurt.text = "(↑" + (Math.floor((addhurt_7 * nx) * (add_star + 1))).toString() + ")";
                                    btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, nCanup, btn_1]);
                                    return;
                                }
                                else {
                                    btn_label.text = "升级X " + (m_canup - hero.Level);
                                    btn_img.gray = false;
                                    H52D_Framework.SetHtmlStyle(money_html, 20, "#2ae52a", "center");
                                    var a = H52D_Framework.HeroUpgrateConfig[nType][m_canup].ConsumeGold - nowmoney; // HeroUpgrateConfig[nType][hero.Level].ConsumeGold;
                                    money_label = (Math.floor(a * nx)).toString();
                                    money_html.innerHTML = path + money_label;
                                    btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, m_canup, btn_1]);
                                    return;
                                }
                            }
                            else {
                                btn_label.text = "升级X " + (m_canup - hero.Level);
                                btn_img.gray = false;
                                var a = H52D_Framework.HeroUpgrateConfig[nType][m_canup].ConsumeGold - nowmoney; // HeroUpgrateConfig[nType][hero.Level].ConsumeGold;
                                money_label = (Math.floor(a * nx)).toString();
                                H52D_Framework.SetHtmlStyle(money_html, 20, "#2ae52a", "center");
                                money_html.innerHTML = path + money_label;
                                next_base = H52D_Framework.HeroUpgrateConfig[nType][m_canup].Attr;
                                var addhp_8 = next_base[1][2] - base.Attr[1][2];
                                var addhurt_8 = next_base[2][2] - base.Attr[2][2];
                                Addhp.text = "(↑" + (Math.floor((addhp_8 * nx) * (add_star + 1))).toString() + ")";
                                Addhurt.text = "(↑" + (Math.floor((addhurt_8 * nx) * (add_star + 1))).toString() + ")";
                                if (m_canup == hero.Level) {
                                    btn_label.text = "升级X 1";
                                    next_base = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0]].Attr;
                                    var addhp_9 = next_base[1][2] - base.Attr[1][2];
                                    var addhurt_9 = next_base[2][2] - base.Attr[2][2];
                                    Addhp.text = "(↑" + (Math.floor((addhp_9 * nx) * (add_star + 1))).toString() + ")";
                                    Addhurt.text = "(↑" + (Math.floor((addhurt_9 * nx) * (add_star + 1))).toString() + ")";
                                    var a_6 = H52D_Framework.HeroUpgrateConfig[nType][hero.Level + 1].ConsumeGold - nowmoney;
                                    money_label = (Math.floor(a_6 * nx)).toString();
                                    money_html.innerHTML = path + money_label;
                                    return;
                                }
                                btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, m_canup, btn_1]);
                                return;
                            }
                        }
                    }
                    else {
                        var info_1 = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0] + 1].ConsumeGold - nowmoney;
                        btn_label.text = "升级X 1";
                        btn_label.gray = true;
                        H52D_Framework.SetHtmlStyle(money_html, 20, "#ffa5a7", "center");
                        money_label = Math.floor(info_1 * nx).toString(); ///更改数值---------
                        money_html.innerHTML = path + money_label;
                        btn_img.gray = true; //变灰												
                    }
                    var info = H52D_Framework.HeroUpgrateConfig[nType][tUseList[0] + 1].ConsumeGold - nowmoney;
                    money_label = Math.floor(money_num).toString();
                    money_label = Math.floor(info * nx).toString();
                    btn_img.gray = true; //变灰
                    btn_label.gray = true;
                    nlock.visible = btn_img.gray;
                    money_color = H52D_Framework.HeroManager.Instance.HeroUp_labelcolor(play_money, money_label);
                    money_html.innerHTML = path + H52D_Framework.GetHtmlStrByColor(money_label, money_color[0]);
                }
            }
            else {
                get_name.visible = get_land1.visible = get_land2.visible = get_land3.visible = true;
                if (Item_tcfg[2]) {
                    get_land2.text = H52D_Framework.StringInfoConfig[H52D_Framework.LineConfig[Item_tcfg[2]].LineName].s;
                    if (H52D_Framework.LineConfig[Item_tcfg[2]].param != 0) {
                        get_land2.on(Laya.Event.CLICK, this, this.OpenShop, [H52D_Framework.LineConfig[Item_tcfg[2]].param]);
                    }
                    else {
                        get_land2.underline = false;
                    }
                }
                if (Item_tcfg[1]) {
                    get_land1.text = H52D_Framework.StringInfoConfig[H52D_Framework.LineConfig[Item_tcfg[1]].LineName].s; //充奖获得的文本内容
                    if (H52D_Framework.LineConfig[Item_tcfg[1]].param != 0) {
                        get_land1.on(Laya.Event.CLICK, this, this.OpenShop, [H52D_Framework.LineConfig[Item_tcfg[1]].param]);
                    }
                    else {
                        get_land1.underline = false;
                    }
                }
                if (Item_tcfg[3]) {
                    get_land3.text = H52D_Framework.StringInfoConfig[H52D_Framework.LineConfig[Item_tcfg[3]].LineName].s; //充奖获得的文本内容
                    if (H52D_Framework.LineConfig[Item_tcfg[3]].param != 0) {
                        get_land3.on(Laya.Event.CLICK, this, this.OpenShop, [H52D_Framework.LineConfig[Item_tcfg[3]].param]);
                    }
                    else {
                        get_land3.underline = false;
                    }
                }
                //
                icon.gray = true;
                var base = H52D_Framework.HeroUpgrateConfig[nType][1]["Attr"];
                hp.text = "生命：" + Math.floor(base[1][2] * nx).toString();
                hurt.text = "伤害：" + Math.floor(base[2][2] * nx).toString();
                Addhp.text = "";
                Addhurt.text = "";
                btn_label.text = "激活";
                var num = myNum / tCfg.needNum;
                var money = myNum + "/" + tCfg.needNum;
                money_html.innerHTML = "<img src= " + "'ui_icon/" + tCfg.strIcon + "'" + " width='24px' height='24px'></img>" + money;
                level.text = "1";
                if (myNum < tCfg.needNum) {
                    btn_1.gray = true;
                    H52D_Framework.SetHtmlStyle(money_html, 20, "#ffa5a7", "center");
                    btn_1.mouseEnabled = !btn_img.gray;
                }
                else {
                    H52D_Framework.SetHtmlStyle(money_html, 20, "#17FF48", "center");
                    btn_1.gray = false;
                }
            }
            var bool = H52D_Framework.HeroManager.Instance.HeroIstrue(nHeroID);
            btn_1.on(Laya.Event.CLICK, this, this.BtnClick, [nHeroID, icon1, nLevel, btn_1]);
        };
        /**按钮的点击时间 */
        HeroLvUp.prototype.BtnClick = function (nHeroID, icon, lv, label, btn) {
            this._icon = icon;
            this.nHeroID = nHeroID;
            this._btn = btn;
            this._lv = lv;
            var bActive = H52D_Framework.HeroManager.Instance.IsActive(nHeroID);
            var skillinfo = H52D_Framework.HeroConfig[nHeroID].heroPassiveSkill;
            // for(let nIdx in skillinfo){
            // 	let skill=skillinfo[nIdx];
            // 	if(lv==skill[2]){
            // 	}
            // }
            if (bActive) {
                this.LvUpHero(nHeroID, lv);
            }
            else {
                this.OpenHero(nHeroID);
                label.visible = false;
            }
        };
        HeroLvUp.prototype.HeroAllInfo = function (nHeroID) {
            H52D_Framework.HeroManager.Instance.OpenView(nHeroID);
        };
        /**激活英雄 */
        HeroLvUp.prototype.OpenHero = function (nHeroID) {
            var tCfg = H52D_Framework.HeroConfig[nHeroID];
            var needItem = tCfg.needItem;
            var needNum = tCfg.needNum;
            if (H52D_Framework.BagManager.Instance.getItemNumber(needItem) < needNum) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("激活英雄所需材料不足！");
                return;
            }
            H52D_Framework.HeroManager.Instance.OpenHero(nHeroID);
        };
        /**英雄升级 */
        HeroLvUp.prototype.LvUpHero = function (nHeroID, lv) {
            var tUseList = H52D_Framework.HeroManager.Instance.GetHeroLvUpUse(nHeroID, HeroLvUp.nIdex);
            var hasMoney = H52D_Framework.BagManager.Instance.getItemNumber(1);
            var a = H52D_Framework.HeroManager.Instance.M_MaxLvup(nHeroID, hasMoney);
            var ntype = H52D_Framework.HeroConfig[nHeroID].type;
            var hero = H52D_Framework.HeroManager.Instance.GetHero(nHeroID);
            var lvup_lock = H52D_Framework.HeroUpgrateConfig[ntype][tUseList[0]].needPlayerLv;
            var _playlv = H52D_Framework.MasterPlayer.Instance.player.Level;
            var maxup = H52D_Framework.HeroManager.Instance.MaxLvUp(nHeroID, _playlv);
            if (_playlv < lvup_lock) {
                if (hero.Level < maxup) {
                    tUseList[0] = maxup;
                }
            }
            if (tUseList[1] > hasMoney) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("金币不足！");
                this._btn.gray = true;
                return;
            }
            if (tUseList[1] == 0) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("金币不足！");
                return;
            }
            H52D_Framework.HeroManager.Instance.HeroLevlUp(nHeroID, lv);
        };
        HeroLvUp.prototype.BtnShopClick = function (id) {
            HeroLvUp._Indx = this.BtnShop.selectedIndex;
            this.UpdateList();
        };
        /**控制购买按钮 */
        HeroLvUp.prototype.Btn_shopclick = function (btnIdnx) {
            if (btnIdnx == 1) {
                if (this.Btn_shop1.visible) {
                    this.Btn_shop1.visible = false;
                    this.Btn_shop10.visible = false;
                    this.Btn_shopMax.visible = false;
                    this.Btn_shop.bgColor = "#30303a";
                }
                else {
                    this.Btn_shop1.visible = true;
                    this.Btn_shop10.visible = true;
                    this.Btn_shopMax.visible = true;
                    this.Btn_shop.bgColor = "#474557"; //
                    if (HeroLvUp.nIdex == 1) {
                        this.Btn_shop1.color = "#b5b2c6";
                        this.Btn_shop10.color = "#89848a";
                        this.Btn_shopMax.color = "#89848a";
                    }
                    if (HeroLvUp.nIdex == 2) {
                        this.Btn_shop10.color = "#b5b2c6";
                        this.Btn_shopMax.color = "#89848a";
                        this.Btn_shop1.color = "#89848a";
                    }
                    if (HeroLvUp.nIdex == 3) {
                        this.Btn_shopMax.color = "#b5b2c6";
                        this.Btn_shop10.color = "#89848a";
                        this.Btn_shop1.color = "#89848a";
                    }
                }
            }
            if (btnIdnx == 2) {
                this.Btn_shop1.visible = false;
                this.Btn_shop10.visible = false;
                this.Btn_shopMax.visible = false;
                this.Btn_shop.text = "升级X1";
                this.Btn_shop.bgColor = "#30303a";
                HeroLvUp.nIdex = 1;
                this.UpdateList();
            }
            if (btnIdnx == 3) {
                this.Btn_shop1.visible = false;
                this.Btn_shop10.visible = false;
                this.Btn_shopMax.visible = false;
                this.Btn_shop.text = "升级X10";
                this.Btn_shop.bgColor = "#30303a";
                HeroLvUp.nIdex = 2;
                this.UpdateList();
            }
            if (btnIdnx == 4) {
                this.Btn_shop1.visible = false;
                this.Btn_shop10.visible = false;
                this.Btn_shopMax.visible = false;
                this.Btn_shop.text = "升级最大";
                this.Btn_shop.bgColor = "#30303a";
                HeroLvUp.nIdex = 3;
                this.UpdateList();
            }
        };
        HeroLvUp.prototype.OpenShop = function (Pos) {
            H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.SHOP]);
            if (Pos == 2) {
                H52D_Framework.OneTimer(500, Laya.Handler.create(this, function () {
                    H52D_Framework.Event.DispatchEvent("toGemShop");
                }));
            }
        };
        HeroLvUp.prototype.Hero_lv = function (heroId) {
            var tcfg = H52D_Framework.HeroConfig[heroId];
            var hero_info = H52D_Framework.HeroManager.Instance.GetHero(heroId);
            var type = tcfg.type;
            var nx = tcfg.heroRatio;
            var heroup_tcfg = H52D_Framework.HeroUpgrateConfig[type][hero_info.Level];
        };
        HeroLvUp._Indx = 0;
        HeroLvUp.nIdex = 1;
        return HeroLvUp;
    }(ui.heroList.HeroLvUpUI));
    H52D_Framework.HeroLvUp = HeroLvUp;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeroLvUp.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("HeroStar", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
    ]);
    var HeroStar = /** @class */ (function (_super) {
        __extends(HeroStar, _super);
        function HeroStar(buf) {
            var _this = _super.call(this) || this;
            _this.StarColorurl = {
                0: "ui_hero/icon-weijihuo-jinjie-yingxiong.png",
                1: "ui_hero/icon-lan-jinjie-yingxiong.png",
                2: "ui_hero/icon-zi-jinjie-yingxiong.png",
                3: "ui_hero/icon-huang-jinjie-yingxiong.png",
                4: "ui_hero/icon-hong-jinjie-yingxiong.png",
            };
            _this.icon_bg = {
                // 3:"ui_hero/img-lanka.png",
                // 4:"ui_hero/img-zika.png",
                // 5:"ui_hero/img-chengka.png",
                // 6:"ui_hero/img-hongka.png",
                3: "ui_hero/img-lanpinzhikuang.png",
                4: "ui_hero/img-zipinzhikuang.png",
                5: "ui_hero/img-chengpinzhikuang.png",
                6: "ui_hero/img-hongpinzhikuang.png",
            };
            _this._once = false;
            _this.bool = false;
            _this.heroList = []; //存放英雄的id
            _this.heroView = buf[1];
            var Button = _this.heroView.mainView.btn_ui_max;
            Button.visible = true;
            _this.AddEvent();
            _this.heroStar_List.vScrollBarSkin = "";
            _this.UpdateList();
            _this.ChangeListHigth();
            _this.Refesh();
            return _this;
            //this.heroList = HeroManager.Instance.GetCfgHeroList();
        }
        HeroStar.prototype.AddEvent = function () {
            H52D_Framework.Event.RegistEvent('ReqHeroStartUps', Laya.Handler.create(this, this.ReqHeroStartUps)); //ClickBtnStar
            H52D_Framework.Event.RegistEvent('changelisthigth', Laya.Handler.create(this, this.ChangeListHigth));
            H52D_Framework.Event.RegistEvent('ClickBtnStar', Laya.Handler.create(this, this.NewTeach_Star));
        };
        HeroStar.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent('ReqHeroStartUps', Laya.Handler.create(this, this.ReqHeroStartUps));
            H52D_Framework.Event.RemoveEvent('changelisthigth', Laya.Handler.create(this, this.ChangeListHigth));
            H52D_Framework.Event.RemoveEvent('ClickBtnStar', Laya.Handler.create(this, this.NewTeach_Star));
        };
        HeroStar.prototype.ChangeListHigth = function () {
            var _this = this;
            var bool = Boolean(this.heroView.mainView.halfPanel);
            if (bool) {
                H52D_Framework.OneTimer(300, Laya.Handler.create(this, function () {
                    if (_this.destroyed)
                        return;
                    _this.heroStar_List.height = 230 * G_StageHeightScale;
                }), "OneTimerChangeListHigthStar");
            }
            else {
                this.heroStar_List.height = 1040 * G_StageHeightScale;
            }
        };
        /** 进阶成功 */
        HeroStar.prototype.ReqHeroStartUps = function () {
            H52D_Framework.TipsLogic.Instance.OpenSystemTips("英雄进阶成功！");
            //this.UpdateList();
            this.Refesh();
            this.LvUpEffect();
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.MODIFYATTR, [this.nHeroID]);
        };
        /***播放晋阶特效 */
        HeroStar.prototype.LvUpEffect = function () {
            var _this = this;
            this._Lveffect = new H52D_Framework.Avatar(this._icon);
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/level_up.mp3");
            }
            this._Lveffect.Load("res/effect/effect_ui_shengji/effect_ui_shengji.sk", 1, 2, 30, 30, Laya.Handler.create(this, function () {
                //this._Lveffect.visible=true;
                _this._Lveffect.Play("effect_ui_shengji", false, true, function () {
                });
            }));
        };
        HeroStar.prototype.UpdateList = function () {
            this.heroList = H52D_Framework.HeroManager.Instance.GetCfgHeroList();
            this.SortHero(true);
            this.heroStar_List.array = this.heroList;
            this.heroStar_List.renderHandler = new Laya.Handler(this, this.ListStar);
            //刷新红点
            H52D_Framework.Event.DispatchEvent("UpdateRedPoint");
        };
        HeroStar.prototype.Refesh = function () {
            this.heroList = H52D_Framework.HeroManager.Instance.GetCfgHeroList();
            this.heroStar_List.array = this.heroList;
            this.heroStar_List.renderHandler = new Laya.Handler(this, this.ListStar);
            //刷新红点
            H52D_Framework.Event.DispatchEvent("UpdateRedPoint");
            this.SortHero();
        };
        /**新手指导 激活英雄 */
        HeroStar.prototype.NewTeach_Star = function () {
            var nHeroId = this.heroList[0];
            this.BtnStatUp(nHeroId);
        };
        HeroStar.prototype.SortHero = function (bool) {
            function tsort(left, right) {
                var leftActive = H52D_Framework.HeroManager.Instance.IsActive(left);
                var leftCan = leftActive && H52D_Framework.HeroManager.Instance.HeroIsStar(left);
                var left_quality = H52D_Framework.HeroConfig[left].heroPosition;
                var rightActive = H52D_Framework.HeroManager.Instance.IsActive(right);
                var rightCan = rightActive && H52D_Framework.HeroManager.Instance.HeroIsStar(right);
                var right_quality = H52D_Framework.HeroConfig[right].heroPosition;
                if (leftCan != rightCan) {
                    return leftCan ? -1 : 1;
                }
                if (leftActive != rightActive) {
                    return leftActive ? -1 : 1;
                }
                if (left_quality && left_quality != right_quality) {
                    return left_quality < right_quality ? -1 : 1;
                }
                return left - right;
            }
            if (bool) {
                this.heroList.sort(tsort);
            }
        };
        /**对英雄列表赋值 */
        HeroStar.prototype.ListStar = function (item, index) {
            //let lock: Laya.Image = item.getChildByName("Lock");
            var icon = item.getChildByName("hero_Icon");
            var icon_bg = item.getChildByName("pinzhi_bg");
            var name = item.getChildByName("hero_Name");
            var hp = item.getChildByName("hero_Hp");
            var hurt = item.getChildByName("hero_Hurt");
            var starNum = item.getChildByName("hero_StarNum");
            var btn_starup = item.getChildByName("Btn_StarUp");
            var up_start = btn_starup.getChildByName("UP_Start");
            var type_icon = item.getChildByName("hero_TypeIcon");
            //let itemNum: Laya.Label = item.getChildByName("ItemNum");
            //let heropoker: Laya.Image = btn_starup.getChildByName("Hero_Poker") as Laya.Image;
            var Star_Max = item.getChildByName("Star_Max");
            var Star_Maximg = item.getChildByName("star_max");
            var changeBase = btn_starup.getChildByName("BaseChange");
            var item_num = btn_starup.getChildByName("ItemNum");
            var btnlock = item.getChildByName("Btn_lock");
            var max_star = H52D_Framework.HeroManager.Instance.HeroMaxStar;
            Star_Maximg.visible = Star_Max.visible;
            item_num.mouseThrough = true;
            var heroid = this.heroList[index];
            var info = H52D_Framework.HeroConfig[heroid];
            var hero = H52D_Framework.HeroManager.Instance.GetHero(heroid);
            icon_bg.skin = this.icon_bg[info.quality];
            var nActive = H52D_Framework.HeroManager.Instance.IsActive(heroid); //英雄是否激活
            Star_Max.visible = false;
            var path = "<img src= " + "'ui_icon/" + info.strIcon + "'" + " width='24px' height='24px'></img>";
            icon.gray = true;
            if (nActive) {
                btn_starup.visible = true;
                up_start.visible = true;
                icon.gray = false;
                var star = hero.Star == 0 ? 1 : hero.Star;
                if (hero.Star == 0) {
                    star = 1;
                }
                else {
                    star = hero.Star;
                }
                if (hero.Star == H52D_Framework.HeroManager.Instance.HeroMaxStar) {
                    item_num.visible = false;
                    changeBase.visible = false;
                    Star_Max.visible = true;
                    btn_starup.visible = false;
                    var nstarc_Cfg = H52D_Framework.HeroAdvanceConfig[heroid][star];
                    if (hero.heroCfg.type == 1) {
                        type_icon.skin = "ui_hero/icon-renwu-leixing-gongji.png";
                    }
                    if (hero.heroCfg.type == 2) {
                        type_icon.skin = "ui_hero/icon-renwu-leixing-fangyu.png";
                    }
                    for (var i = 1; i <= max_star; i++) {
                        var star_1 = item.getChildByName("Star_Icon" + i);
                        star_1.visible = true;
                    }
                    type_icon.visible = true;
                    icon.skin = hero.HeadIcon;
                    starNum.text = hero.Star.toString() + "阶"; //
                    item_num.innerHTML = path + nstarc_Cfg.Consume[1][2].toString();
                    var basename = nstarc_Cfg.Attr[1][1];
                    var basevalue = (nstarc_Cfg.Attr[1][2] / 100 + "%").toString();
                    hp.text = H52D_Framework.StringInfoConfig[basename].s + "X" + basevalue;
                    hurt.text = H52D_Framework.StringInfoConfig[nstarc_Cfg.Attr[2][1]].s + "X" + (nstarc_Cfg.Attr[2][2] / 100 + "%").toString();
                    var nFloor = Math.floor(hero.Star / max_star);
                    var nOpenStar = hero.Star % max_star;
                    for (var nIdx = 1; nIdx <= max_star; nIdx++) {
                        var Staricon_Num = item.getChildByName("Star_Icon" + nIdx);
                        Staricon_Num.visible = true;
                        if (nIdx <= nOpenStar) {
                            Staricon_Num.skin = this.StarColorurl[nFloor + 1];
                        }
                        else {
                            Staricon_Num.skin = this.StarColorurl[nFloor];
                        }
                    }
                    // btn_starup.visible = false;
                }
                else {
                    var nstarc_Cfg = H52D_Framework.HeroAdvanceConfig[heroid][star];
                    if (hero.heroCfg.type == 1) {
                        type_icon.skin = "ui_hero/icon-renwu-leixing-gongji.png";
                    }
                    if (hero.heroCfg.type == 2) {
                        type_icon.skin = "ui_hero/icon-renwu-leixing-fangyu.png";
                    }
                    for (var i = 1; i <= max_star; i++) {
                        var star_2 = item.getChildByName("Star_Icon" + i);
                        star_2.visible = true;
                    }
                    type_icon.visible = true;
                    icon.skin = hero.HeadIcon;
                    if (hero.Star < 1) {
                        hp.visible = false;
                        hurt.visible = false;
                    }
                    else {
                        hp.visible = true;
                        hurt.visible = true;
                    }
                    starNum.text = hero.Star.toString() + "阶";
                    // if (hero.Star == 0) {
                    // 	nstarc_Cfg = HeroAdvanceConfig[heroid][hero.Star + 1];
                    // }
                    // else {
                    // 	nstarc_Cfg = HeroAdvanceConfig[heroid][hero.Star+1];
                    // }
                    var ItemID = nstarc_Cfg.Consume[1][1];
                    var ItemNum = H52D_Framework.BagManager.Instance.getItemNumber(ItemID);
                    if (ItemNum < H52D_Framework.HeroAdvanceConfig[heroid][hero.Star + 1].Consume[1][2]) {
                        H52D_Framework.SetHtmlStyle(item_num, 20, "#7f190b", "center");
                    }
                    else {
                        H52D_Framework.SetHtmlStyle(item_num, 20, "#2ae52a", "center");
                    }
                    changeBase.text = "属性加成" + (H52D_Framework.HeroAdvanceConfig[heroid][star + 1].Attr[2][2] / 100 + "%").toString();
                    if (hero.Star < 1) {
                        changeBase.text = "属性加成" + (H52D_Framework.HeroAdvanceConfig[heroid][1].Attr[2][2] / 100 + "%").toString();
                    }
                    item_num.innerHTML = path + ItemNum + "/" + H52D_Framework.HeroAdvanceConfig[heroid][hero.Star + 1].Consume[1][2];
                    //let val: number = ItemNum / nstarc_Cfg.Consume[1][2];
                    var basename = nstarc_Cfg.Attr[1][1];
                    var basevalue = (nstarc_Cfg.Attr[1][2] / 100 + "%").toString();
                    hp.text = H52D_Framework.StringInfoConfig[basename].s + "" + basevalue;
                    hurt.text = H52D_Framework.StringInfoConfig[nstarc_Cfg.Attr[2][1]].s + "" + (nstarc_Cfg.Attr[2][2] / 100 + "%").toString();
                    if (H52D_Framework.HeroAdvanceConfig[heroid][hero.Star + 1].Consume[1][2] > ItemNum) {
                        //btnlock.visible = true;
                        btn_starup.gray = true;
                        btn_starup.mouseEnabled = false;
                    }
                    else {
                        btn_starup.mouseEnabled = true;
                        //btnlock.visible = false;
                        btn_starup.gray = false;
                    }
                    var nFloor = Math.floor(hero.Star / max_star);
                    var nOpenStar = hero.Star % max_star;
                    for (var nIdx = 1; nIdx <= max_star; nIdx++) {
                        var Staricon_Num = item.getChildByName("Star_Icon" + nIdx);
                        if (nIdx <= nOpenStar) {
                            Staricon_Num.skin = this.StarColorurl[nFloor + 1];
                        }
                        else {
                            Staricon_Num.skin = this.StarColorurl[nFloor];
                        }
                    }
                }
            }
            else {
                var hero_list = H52D_Framework.HeroManager.Instance.GetCfgHeroList();
                if (!hero) {
                }
                changeBase.visible = false;
                up_start.fontSize = 24;
                var star = 1;
                var nstarc_Cfg = H52D_Framework.HeroAdvanceConfig[heroid][star];
                var ItemID = nstarc_Cfg.Consume[1][1];
                var ItemNum = H52D_Framework.BagManager.Instance.getItemNumber(ItemID);
                H52D_Framework.SetHtmlStyle(item_num, 20, "#7f190b", "center");
                item_num.innerHTML = path + "0/" + nstarc_Cfg.Consume[1][2].toString();
                //icon.visible = true;
                type_icon.visible = false;
                btn_starup.gray = true;
            }
            name.color = H52D_Framework.BaseDefine.LabelColor[info.quality];
            name.text = H52D_Framework.StringInfoConfig[info.name]["s"];
            btn_starup.on(Laya.Event.CLICK, this, this.BtnStatUp, [heroid, icon]);
            icon.skin = "ui_icon/" + info["strIcon"];
            //heropoker.skin = "ui_icon/" + info["strIcon"];
        };
        /**英雄进阶 */
        HeroStar.prototype.BtnStatUp = function (heroid, icon) {
            this._icon = icon;
            var itemnum;
            this.nHeroID = heroid;
            var item;
            var starnum;
            var hero = H52D_Framework.HeroManager.Instance.GetHero(heroid);
            if (!hero) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("英雄未激活！");
            }
            else {
                starnum = hero.Star;
                if (starnum >= H52D_Framework.HeroManager.Instance.HeroMaxStar) {
                }
                else {
                    var iteminfo = H52D_Framework.HeroAdvanceConfig[heroid][starnum + 1].Consume;
                    item = iteminfo[1][1];
                    itemnum = iteminfo[1][2];
                    if (H52D_Framework.BagManager.Instance.getItemNumber(item) < itemnum) {
                        //TipsLogic.Instance.OpenSystemTips("英雄进阶所需材料不足！");
                        return;
                    }
                    H52D_Framework.HeroManager.Instance.HeroStartUp(heroid);
                }
            }
        };
        return HeroStar;
    }(ui.heroList.HeroStarUI));
    H52D_Framework.HeroStar = HeroStar;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeroStar.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("HeroWar", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_scene01.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_head.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS } //ui_action	
    ]);
    var HeroWar = /** @class */ (function (_super) {
        __extends(HeroWar, _super);
        function HeroWar(buf) {
            var _this = _super.call(this) || this;
            _this.backgroundColor = {
                3: "ui_hero/img-lanpinzhikuang.png",
                4: "ui_hero/img-zipinzhikuang.png",
                5: "ui_hero/img-chengpinzhikuang.png",
                6: "ui_hero/img-hongpinzhikuang.png",
            };
            _this.BackGround_k = {
                3: "ui_hero/img-lanka.png",
                4: "ui_hero/img-zika.png",
                5: "ui_hero/img-chengka.png",
                6: "ui_hero/img-hongka.png",
            };
            /**选择的上阵位置 */
            _this._HasHeroList = [];
            _this._Lveffect = {};
            _this.bool = true;
            _this._heroAvatarMap = {};
            /** 拖拽物 */
            _this.nDragHeroID = null;
            /** 记录拖拽物坐标 */
            _this.tDragPos = [0, 0];
            /** 记录之前的位置颜色 */
            _this.sFlagColorSkin = [];
            _this._heroPathFlagMap = {};
            _this.old_heroid = 0;
            _this.BackGround.skin = "res/ui/ui_noPack/img-daguanchangjing-huantixiangfeng.png";
            _this._heroAvatarMap = {};
            _this._heroPathFlagMap = {};
            _this.nDragHeroID = null;
            _this.sFlagColorSkin = [];
            _this.dragHeroIcon.visible = false;
            _this.heroView = buf[1];
            _this.heroView.mainView.btn_ui_max.visible = false;
            H52D_Framework.HeroPosition.Instance.InitPosInfo();
            H52D_Framework.Event.RegistEvent("ExchangePlace", Laya.Handler.create(_this, _this.NewTeach_changewar));
            H52D_Framework.Event.RegistEvent("btn_closes", Laya.Handler.create(_this, _this.Btn_Close));
            H52D_Framework.Event.RegistEvent('Destroy', Laya.Handler.create(_this, _this.OnDestroy));
            H52D_Framework.Event.RegistEvent('OnMouseUp', Laya.Handler.create(_this, _this.MouseUp));
            H52D_Framework.Event.RegistEvent('SaveWar', Laya.Handler.create(_this, _this.NewTeach_war));
            H52D_Framework.Event.RegistEvent('PutHero', Laya.Handler.create(_this, _this.PutHero));
            H52D_Framework.Event.RegistEvent('fsTen', Laya.Handler.create(_this, _this.NewTeach_wars));
            // 缓存已有英雄列表
            for (var nHeroID in H52D_Framework.HeroManager.Instance.Herolist) {
                _this._HasHeroList.push(nHeroID);
            }
            _this.Btn_save.on(Laya.Event.CLICK, _this, _this.SaveBtnClick);
            for (var pos = 0; pos <= 8; pos++) {
                _this["dragpos" + pos].on(Laya.Event.MOUSE_DOWN, _this, _this.CurMouseDown, [pos]);
            }
            _this.UpdatePosView();
            _this.UpateHeroLsit();
            _this.INfo();
            _this.bgbox.on(Laya.Event.MOUSE_MOVE, _this, _this.MouseMove);
            return _this;
        }
        HeroWar.prototype.INfo = function () {
            this.tixing.text = H52D_Framework.StringInfoConfig[7011].s;
        };
        HeroWar.prototype.OnDestroy = function () {
            this.MouseUp();
            this.offAll();
            for (var pos in this._heroAvatarMap) {
                var mod = this._heroAvatarMap[pos];
                if (mod != null) {
                    mod.Destroy();
                }
            }
            this._heroAvatarMap = {};
            this._heroPathFlagMap = {};
            H52D_Framework.Event.RemoveEvent("ExchangePlace", Laya.Handler.create(this, this.NewTeach_changewar));
            H52D_Framework.Event.RemoveEvent("btn_closes", Laya.Handler.create(this, this.Btn_Close));
            H52D_Framework.Event.RemoveEvent('Destroy', Laya.Handler.create(this, this.OnDestroy));
            H52D_Framework.Event.RemoveEvent('OnMouseUp', Laya.Handler.create(this, this.MouseUp));
            H52D_Framework.Event.RemoveEvent('SaveWar', Laya.Handler.create(this, this.NewTeach_war));
            H52D_Framework.Event.RemoveEvent('PutHero', Laya.Handler.create(this, this.PutHero));
            H52D_Framework.Event.RemoveEvent('fsTen', Laya.Handler.create(this, this.NewTeach_wars));
        };
        /** 拾取英雄 */
        HeroWar.prototype.DragHero = function (nHeroID, bShowDrag) {
            var _this = this;
            this.dragHeroIcon.visible = true;
            this.nDragHeroID = nHeroID;
            this.old_heroid = nHeroID;
            var hero = H52D_Framework.HeroManager.Instance.GetHero(nHeroID);
            if (this._heroAvatarMap[-1]) {
                this._heroAvatarMap[-1].Destroy();
                this._heroAvatarMap[-1] = null;
                delete this._heroAvatarMap[-1];
            }
            this._heroAvatarMap[-1] = new H52D_Framework.Avatar(this.dragHeroMod);
            var info_cfg = hero.heroCfg;
            var path = info_cfg.strFacadeModel;
            var tPosInfo = this.GetDirAndScale(nHeroID); //获取方向和坐标
            this._heroAvatarMap[-1].Load(path, tPosInfo[0], tPosInfo[1] * 2, 0, 0, Laya.Handler.create(this, function () {
                _this._heroAvatarMap[-1].visible = true;
                _this._heroAvatarMap[-1].Play(H52D_Framework.AnimationName.idle, true);
                _this._heroAvatarMap[-1].SetOrder(10);
            }));
            if (!H52D_Framework.HeroPosition.Instance.IsInWar(nHeroID)) {
                //let mod:Laya.View=this._heroAvatarMap[-1]
            }
            H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/ui_buzhen01.mp3");
            this.UpdatePosView(true, bShowDrag);
        };
        /** 列表按下事件 */
        HeroWar.prototype.ListHeadDown = function (nHeroID, item, event) {
            H52D_Framework.Tick.Once(300, this, this.OneListHeadDown, [nHeroID, this.List_head._childs[1].value, item, event]);
        };
        /** 列表按下事件 */
        HeroWar.prototype.OneListHeadDown = function (nHeroID, scrollBarY, item, event) {
            if (this.List_head._childs[1].value != scrollBarY) {
                return;
            }
            var bool = false;
            this.dragHeroIcon.x = this.List_head.x + item.x + 120;
            this.dragHeroIcon.y = this.List_head.y + item.y - this.List_head._childs[1].value + 120;
            this.List_head._childs[0];
            this.List_head.scrollBar.stopDrag();
            this.List_head.scrollBar.stopScroll();
            bool = H52D_Framework.HeroPosition.Instance.IsInWar(nHeroID);
            this.DragHero(nHeroID, bool);
        };
        /** 按住阵容上的英雄 */
        HeroWar.prototype.CurMouseDown = function (pos) {
            var tPositionWar = H52D_Framework.HeroPosition.Instance.PositionWar;
            var nCurHeroID = tPositionWar[pos];
            if (nCurHeroID == null) {
                return;
            }
            var dragpos = this["dragpos" + pos];
            this._opos = pos;
            this.dragHeroIcon.x = dragpos.x + dragpos.width / 2;
            this.dragHeroIcon.y = dragpos.y + dragpos.height - 15;
            this.DragHero(nCurHeroID, true);
        };
        /** 鼠标移动事件 */
        HeroWar.prototype.MouseMove = function (event) {
            if (this.nDragHeroID == null) {
                return;
            }
            this.dragHeroIcon.x = event.currentTarget.mouseX;
            this.dragHeroIcon.y = event.currentTarget.mouseY;
            // 记录坐标
            this.tDragPos[0] = event.currentTarget.mouseX;
            this.tDragPos[1] = event.currentTarget.mouseY;
            var nNowPos = this.GetJionPos();
            if (nNowPos != this.sFlagColorSkin[0]) {
                if (this.sFlagColorSkin[0] != null) {
                    var dragpos = this["Pos_" + this.sFlagColorSkin[0]];
                    dragpos.skin = this.sFlagColorSkin[1];
                }
            }
            if (nNowPos != null) {
                if (nNowPos != this.sFlagColorSkin[0]) {
                    var dragpos = this["Pos_" + nNowPos];
                    var strSkin = dragpos.skin;
                    this.sFlagColorSkin = [nNowPos, dragpos.skin];
                    dragpos.skin = "ui_hero/img-yingxiong-tuozhaua-bg.png";
                }
            }
            else {
                this.sFlagColorSkin = [];
            }
        };
        /** 鼠标抬起事件 */
        HeroWar.prototype.MouseUp = function () {
            this.dragHeroIcon.visible = false;
            this.sFlagColorSkin = [];
            H52D_Framework.Tick.Clear(this, this.OneListHeadDown);
            if (this.nDragHeroID == null) {
                this.UpdatePosView();
                return;
            }
            // 记录ID
            var nDragHeroID = this.nDragHeroID;
            this.nDragHeroID = null;
            var nNowPos = this.GetJionPos();
            this.tDragPos = [0, 0];
            if (nNowPos == null) {
                this.UpdatePosView();
                return;
            }
            var tPositionWar = H52D_Framework.HeroPosition.Instance.PositionWar;
            var nCurHeroID = tPositionWar[nNowPos];
            // 当前位置与拖拽的相同
            if (nCurHeroID == nDragHeroID) {
                this.UpdatePosView();
                return;
            }
            if (nCurHeroID != nDragHeroID) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/ui_buzhen02.mp3");
            }
            // 放置英雄
            this.PutHero(nNowPos, nDragHeroID);
            var bool = H52D_Framework.HeroPosition.Instance.IsInSaveWar(nNowPos, nDragHeroID);
            var hero_id = H52D_Framework.HeroPosition.Instance.PositionWar[this._opos];
            if (bool) {
                if (hero_id) {
                    this.WarEffect(this._opos);
                }
            }
            //新手引导
            H52D_Framework.Guidance.Instance.Trigger_SaveWar();
        };
        HeroWar.prototype.PutHero = function (nNowPos, nDragHeroID) {
            // 放置英雄
            H52D_Framework.HeroPosition.Instance.PutHero(nNowPos, nDragHeroID);
            H52D_Framework.HeroPosition.Instance.bChange = true;
            this.UpdatePosView();
            this.UpateHeroLsit();
            this.WarEffect(nNowPos);
            var oldhero = this.old_heroid;
        };
        /** 获取当前在哪个位置上 */
        HeroWar.prototype.GetJionPos = function () {
            if (this.tDragPos[0] == 0 && this.tDragPos[1] == 0) {
                return null;
            }
            var nNowX = this.tDragPos[0];
            var nNowY = this.tDragPos[1];
            for (var pos = 0; pos <= 8; pos++) {
                var dragpos = this["dragpos" + pos];
                if (dragpos.x < nNowX && dragpos.x + dragpos.width > nNowX && dragpos.y < nNowY && dragpos.y + dragpos.height > nNowY) {
                    return pos;
                }
            }
            return null;
        };
        /** 打开英雄详情面板 */
        HeroWar.prototype.OpenView = function (nHeroID) {
            if (this.nDragHeroID != null) {
                return;
            }
            H52D_Framework.HeroManager.Instance.OpenView(nHeroID);
        };
        /** 刷新位置信息 */
        HeroWar.prototype.UpdatePosView = function (bDrag, bShowDrag) {
            var _this = this;
            var tPositionWar = H52D_Framework.HeroPosition.Instance.PositionWar;
            var _loop_1 = function (pos) {
                var PosBtn = this_1["Pos_" + pos];
                var Mod = this_1["mod" + pos];
                if (bDrag) {
                    PosBtn.scale(1.3, 1.3);
                }
                else {
                    PosBtn.scale(1, 1);
                }
                var nHeroID = tPositionWar[pos];
                if ((bDrag && bShowDrag && nHeroID == this_1.nDragHeroID)) {
                    Mod.alpha = 0.5;
                }
                else {
                    Mod.alpha = 1;
                }
                if ((nHeroID == null)) {
                    if ((this_1._heroAvatarMap[pos] != null) && this_1._heroAvatarMap[pos].loaded) {
                        this_1._heroAvatarMap[pos].visible = false;
                    }
                    this_1._heroPathFlagMap[pos] = "";
                    PosBtn.skin = "ui_hero/img-yingxiong-renwuyuan-bg.png";
                }
                else {
                    if (pos == 4) {
                        PosBtn.skin = "ui_hero/img-yingxiong-duizhang-bg.png";
                    }
                    else {
                        PosBtn.skin = "ui_hero/img-yingxiong-xuanzhong-bg.png";
                    }
                    var hero = H52D_Framework.HeroManager.Instance.GetHero(nHeroID);
                    var info_cfg = hero.heroCfg;
                    var path = info_cfg.strFacadeModel;
                    if (this_1._heroPathFlagMap[pos] != path) {
                        if (this_1._heroAvatarMap[pos]) {
                            this_1._heroAvatarMap[pos].Destroy();
                            this_1._heroAvatarMap[pos] = null;
                            delete this_1._heroAvatarMap[pos];
                        }
                        this_1._heroPathFlagMap[pos] = path;
                        this_1._heroAvatarMap[pos] = new H52D_Framework.Avatar(Mod);
                        var tPosInfo = this_1.GetDirAndScale(nHeroID);
                        this_1._heroAvatarMap[pos].Load(path, tPosInfo[0], tPosInfo[1], 0, 0, Laya.Handler.create(this_1, function () {
                            _this._heroAvatarMap[pos].visible = true;
                            _this._heroAvatarMap[pos].Play(H52D_Framework.AnimationName.idle, true);
                            _this._heroAvatarMap[pos].SetOrder(pos);
                        }));
                    }
                }
            };
            var this_1 = this;
            for (var pos = 0; pos <= 8; pos++) {
                _loop_1(pos);
            }
            this.SetMainskillIcon(tPositionWar[4]);
        };
        /** 获取方向和坐标 */
        HeroWar.prototype.GetDirAndScale = function (nHeroID) {
            var dir = 1;
            var scale = H52D_Framework.HeroConfig[nHeroID].modelScale;
            return [dir, scale];
        };
        HeroWar.prototype.WarSort = function () {
            function tsort(a, b) {
                var a_q = H52D_Framework.HeroConfig[a].quality;
                var b_q = H52D_Framework.HeroConfig[b].quality;
                if (a_q == b_q) {
                    return a > b ? 1 : -1;
                }
                return a_q > b_q ? -1 : 1;
            }
            this._HasHeroList.sort(tsort);
        };
        HeroWar.prototype.UpateHeroLsit = function () {
            this.WarSort();
            this.List_head.array = this._HasHeroList;
            this.List_head.vScrollBarSkin = "";
            this.List_head.renderHandler = new Laya.Handler(this, this.SetHandler);
        };
        HeroWar.prototype.SetHandler = function (item, index) {
            var nHeroID = this._HasHeroList[index];
            var tcfg = H52D_Framework.HeroConfig[nHeroID];
            var nx = tcfg.heroRatio;
            var colorID = tcfg.quality;
            var ntype = tcfg.type;
            var hero = H52D_Framework.HeroManager.Instance.GetHero(nHeroID);
            var bg_color = item.getChildByName("background");
            var btn_01 = item.getChildByName("Btn_skill");
            var bg_k = btn_01.getChildByName("background_k");
            var duihao = btn_01.getChildByName("hero_zhiwei");
            var heroinfo = btn_01.getChildByName("Btn_Info");
            var head = btn_01.getChildByName("HeadIcon");
            var hp = btn_01.getChildByName("Hp");
            var hurt = btn_01.getChildByName("Hurt");
            var hero_type = btn_01.getChildByName("Hero_Type");
            ;
            var gowar = btn_01.getChildByName("IsGoWar");
            var type_bg = btn_01.getChildByName("Hero_Type_bg");
            var lv = hero.Level;
            duihao.skin = "";
            var herolist = H52D_Framework.HeroPosition.Instance.HeroWar;
            var a = H52D_Framework.HeroPosition.Instance.IsInWar(nHeroID);
            if (a) {
                duihao.skin = H52D_Framework.BaseDefine.HeroWar_pos[2];
                if (herolist[nHeroID] == 4) {
                    duihao.skin = H52D_Framework.BaseDefine.HeroWar_pos[1];
                }
            }
            bg_color.skin = this.backgroundColor[colorID];
            bg_k.skin = this.BackGround_k[colorID];
            hero_type.skin = H52D_Framework.BaseDefine.HeroTypeIcon[ntype];
            var bool = H52D_Framework.HeroPosition.Instance.IsInWar(nHeroID);
            gowar.visible = bool;
            type_bg.skin = "ui_hero/icon-renwu-leixing-bg.png";
            var star = hero.Star = 0 ? 1 : (hero.Star);
            var base_f;
            if (hero.Star == 0) {
                star = 1;
                var base = H52D_Framework.HeroAdvanceConfig[nHeroID][star].Attr;
                base_f = 0;
                var basenum = nx * (base_f + 1);
                hp.text = hero.attr.GetAttributeValue(1);
                hurt.text = hero.attr.GetAttributeValue(2);
            }
            else {
                var base = H52D_Framework.HeroAdvanceConfig[nHeroID][star].Attr;
                base_f = base[1][2] / 10000;
                var basenum = nx * (base_f + 1);
                hp.text = hero.attr.GetAttributeValue(1);
                hurt.text = hero.attr.GetAttributeValue(2);
            }
            btn_01.on(Laya.Event.MOUSE_UP, this, this.OpenView, [nHeroID]);
            btn_01.on(Laya.Event.MOUSE_DOWN, this, this.ListHeadDown, [nHeroID, item]);
            head.skin = hero.HeadIcon; //----------		
        };
        /** 点击保存按钮 */
        HeroWar.prototype.SaveBtnClick = function () {
            var heroposInfo = H52D_Framework.HeroPosition.Instance.PositionWar;
            var bool = H52D_Framework.HeroPosition.Instance.bChange;
            if (heroposInfo[4] == null) {
                //弹出面板 保存失败 提示队长不能保存
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("必须有队长才能保存！！");
                return;
            }
            if (!bool) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("阵容未发生改变！！");
                return;
            }
            H52D_Framework.HeroManager.Instance.HeroWarInfo(heroposInfo);
            H52D_Framework.HeroPosition.Instance.bChange = false;
        };
        /**关闭按钮 弹出提示框 */
        HeroWar.prototype.Btn_Close = function (ShowView) {
            var _this = this;
            var nremind = H52D_Framework.SysPromptConfig[10012].strPromptInfo;
            H52D_Framework.TipsLogic.Instance.OpenMessageBox(nremind, Laya.Handler.create(this, function () {
                _this.SaveBtnClick();
                _this.heroView.mainView.btn_ui_max.visible = false;
                if (_this.heroView.mainView._clicktype == 2) {
                    if (_this.heroView._child == "HeroWar") {
                        H52D_Framework.Event.DispatchEvent("PanelClose");
                    }
                    else {
                        if (H52D_Framework.HeroPosition.Instance.PositionWar[4] == null) {
                            return;
                        }
                        else {
                            ShowView.run();
                        }
                    }
                }
                else {
                    ShowView.run();
                }
            }), Laya.Handler.create(this, function () {
                _this.heroView.mainView.btn_ui_max.visible = false;
                H52D_Framework.HeroPosition.Instance.bChange = false;
                if (_this.heroView.mainView._clicktype == 2) {
                    if (_this.heroView._child == "HeroWar") {
                        H52D_Framework.Event.DispatchEvent("PanelClose");
                    }
                    else {
                        ShowView.run();
                    }
                }
                else {
                    ShowView.run();
                }
            }));
        };
        /**新手教程 保存 */
        HeroWar.prototype.NewTeach_war = function () {
            this.SaveBtnClick();
        };
        /**改变阵容英雄 */
        HeroWar.prototype.NewTeach_changewar = function () {
            this.CurMouseDown(0);
        };
        /**获取第10个位置的英雄 */
        HeroWar.prototype.NewTeach_wars = function () {
            var item = this.List_head._childs[0]._childs[9];
            var NheroID = Number(this.List_head.array[9]);
            //let NheroID=HeroManager.Instance.Hero_sort(9);
            var btn_01 = item.getChildByName("Btn_skill");
            // let head: Laya.Image = btn_01.getChildByName("HeadIcon") as Laya.Image;		
            this.ListHeadDown(NheroID, item, event);
            btn_01.on(Laya.Event.MOUSE_DOWN, this, this.ListHeadDown, [NheroID, item]);
        };
        /***播放特效 */
        HeroWar.prototype.WarEffect = function (pos) {
            var _this = this;
            if (this._Lveffect[pos]) {
                this._Lveffect[pos].Destroy();
            }
            var PosBtn = this["Pos_" + pos];
            this._Lveffect[pos] = new H52D_Framework.Avatar(PosBtn);
            this._Lveffect[pos].Load("res/effect/effect_state_buzhen/effect_state_buzhen.sk", 1, 1, 60, 36, Laya.Handler.create(this, function () {
                _this._Lveffect[pos].Play("effect_state_buzhen", false, true, function () {
                    _this._Lveffect[pos].Destroy();
                });
            }));
        };
        /**设置队长技能图片 */
        HeroWar.prototype.SetMainskillIcon = function (nHeroID) {
            if (nHeroID) {
                this.L.visible = true;
                this.main_skillName.visible = true;
                var skill_ID = H52D_Framework.HeroConfig[nHeroID].heroBigSkill;
                var skill_Info = H52D_Framework.ActiveSkillConfig[skill_ID];
                this.Skill_Icon.skin = "ui_icon/" + skill_Info.strIcon;
                this.Skill_Icon.on(Laya.Event.CLICK, this, this.OpenView, [nHeroID]);
            }
            else {
                this.L.visible = false;
                this.main_skillName.visible = false;
                this.Skill_Icon.skin = "";
            }
        };
        return HeroWar;
    }(ui.heroList.HeroWarUI));
    H52D_Framework.HeroWar = HeroWar;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=HeroWar.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("Hero_AlInfo", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
    ]);
    var Btn;
    (function (Btn) {
        Btn[Btn["close"] = 0] = "close";
    })(Btn || (Btn = {}));
    var Hero_AlInfo = /** @class */ (function (_super) {
        __extends(Hero_AlInfo, _super);
        function Hero_AlInfo(buf) {
            var _this = _super.call(this) || this;
            _this.listInfo = [];
            var nHeroID = buf[1];
            _this._HeroID = nHeroID;
            _this.skill_panel.vScrollBarSkin = "";
            _this.Info();
            _this.UpdateList();
            _this.ViewEvent();
            _this.GetHeroMolde();
            return _this;
        }
        Hero_AlInfo.prototype.ViewEvent = function () {
            this.hero_peck.on(Laya.Event.CLICK, this, this.Btnclick_openview);
            this.close.on(Laya.Event.CLICK, this, this.BtnClick, [Btn.close]);
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.REFFIXEDATTR, Laya.Handler.create(this, this.Info));
            H52D_Framework.Event.RegistEvent("UpdateBtnList", Laya.Handler.create(this, this.SetRedPrint));
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
        };
        Hero_AlInfo.prototype.UpdateList = function () {
            var nHeroID = this._HeroID;
            var cfg = H52D_Framework.HeroConfig[nHeroID].heroPassiveSkill;
            this.listInfo = [];
            for (var idx in cfg) {
                var info = cfg[idx];
                this.listInfo.push(info);
            }
            this.skill_List.array = this.listInfo;
            this.skill_List.repeatY = this.skill_List.array.length;
            this.skill_List.height = this.listInfo.length * 104;
            this.skill_List.renderHandler = new Laya.Handler(this, this.OtherSkill);
        };
        Hero_AlInfo.prototype.SetRedPrint = function () {
            this.heropeck_red.visible = H52D_Framework.HeroManager.Instance.PeckShow;
        };
        Hero_AlInfo.prototype.OtherSkill = function (item, index) {
            var nHeroID = this._HeroID;
            var hero = H52D_Framework.HeroManager.Instance.GetHero(nHeroID);
            var lv = hero ? hero.Level : 1;
            var info = this.listInfo[index];
            var SkillID = info[1];
            // 解锁技能等级
            var a = this.skill_List.array.length;
            var SKillFlag = info[2];
            var tSkillCfg = H52D_Framework.PassiveSkillConfig[SkillID];
            var skillNameID = tSkillCfg.nameId;
            var icon = item.getChildByName("skill_Icon");
            var skillOrigin = item.getChildByName("skill_Base");
            var skillLock = item.getChildByName("SkillLock");
            var skilllv = item.getChildByName("SkillLv");
            var openlock = item.getChildByName("openlock");
            skilllv.text = "lv." + SKillFlag.toString();
            H52D_Framework.SetHtmlStyle(skillOrigin, 20, "#d7e6ff", "left");
            skillOrigin.innerHTML = H52D_Framework.StringInfoConfig[tSkillCfg.descId].s;
            icon.skin = "ui_icon/" + tSkillCfg.strIcon;
            var name = item.getChildByName("skill_Name");
            name.text = H52D_Framework.StringInfoConfig[skillNameID].s;
            skillLock.visible = true;
            if (SKillFlag <= lv) {
                skillLock.visible = false;
                skillLock.visible = false;
                skilllv.visible = false;
                openlock.visible = false;
            }
        };
        Hero_AlInfo.prototype.Info = function () {
            var tcfg_hero = H52D_Framework.HeroConfig[this._HeroID];
            var pos = tcfg_hero.position;
            var ntype = tcfg_hero.type;
            this.heroIcon_bg.skin = H52D_Framework.BaseDefine.HeroAllinfo_bg[tcfg_hero.quality];
            var hero = H52D_Framework.HeroManager.Instance.GetHero(this._HeroID);
            var nActive = H52D_Framework.HeroManager.Instance.IsActive(this._HeroID);
            this.hero_peck.visible = H52D_Framework.HeroManager.Instance.HeroIsHave_peck(this._HeroID) && nActive;
            var star = hero ? hero.Star : 1;
            var _add;
            if (hero) {
                if (hero.Star == 0) {
                    star = 1;
                    _add = 0;
                }
                else {
                    star = hero.Star;
                    _add = H52D_Framework.HeroAdvanceConfig[this._HeroID][star].Attr[1][2] / 10000;
                }
            }
            else {
                _add = 0;
            }
            this.herolevel;
            var base = H52D_Framework.HeroAdvanceConfig[this._HeroID][star].Attr;
            var lv = hero ? hero.Level : 1;
            var info = H52D_Framework.HeroConfig[this._HeroID];
            var nx = info.heroRatio;
            var heroinfos = info.stationaryAttribute;
            var list = info.heroBigSkill;
            var herobase = H52D_Framework.HeroUpgrateConfig[info.type][lv].Attr;
            this.herolevel.text = hero != null ? hero.Level + "级" : "1级";
            if (hero) {
                if (hero.Star != 0) {
                    this.herolevel.text = hero.Star + "阶" + hero.Level + "级";
                }
            }
            this.heroName.text = H52D_Framework.StringInfoConfig[info.name]["s"];
            this.heroName.color = H52D_Framework.BaseDefine.LabelColor[tcfg_hero.quality];
            this.heroOrigin.text = H52D_Framework.StringInfoConfig[info.heroOrigin]["s"];
            var tData = H52D_Framework.ActiveSkillConfig[info.heroBigSkill];
            this.Teamskill_Icon.skin = "ui_icon/" + tData.strIcon;
            this.skill_Name.text = H52D_Framework.StringInfoConfig[tData.nameId]["s"] + "(作为队长时候才能生效)";
            H52D_Framework.SetHtmlStyle(this.skill_Origin, 18, "#d7e6ff", "left");
            this.skill_Origin.innerHTML = H52D_Framework.StringInfoConfig[tData.descId].s;
            H52D_Framework.Tick.Loop(60000, this, this.GetHeroMolde);
            // 设置属性
            for (var nIdx = 1; nIdx <= 2; nIdx++) {
                var attNameLable = this["heroattl" + nIdx];
                var valLable = this["val" + nIdx];
                var attrInfo = herobase[nIdx];
                var nAttrID = attrInfo[1];
                var nAttrVal = Math.floor((attrInfo[2] * nx) * (1 + _add)).toString();
                var nName = H52D_Framework.QualityValue[nAttrID].dwName;
                var isper = H52D_Framework.QualityValue[nAttrID].isper;
                attNameLable.text = H52D_Framework.StringInfoConfig[nName].s + "：";
                if (isper == 1) {
                    //nAttrVal = nAttrVal / 10000 + "%"
                }
                valLable.text = nAttrVal;
                if (hero) {
                    valLable.text = hero.attr.GetAttributeValue(nIdx);
                }
            }
            //基础属性
            for (var nIdx = 3; nIdx <= 5; nIdx++) {
                var attNameLable = this["heroattl" + nIdx];
                var valLable = this["val" + nIdx];
                var atteInfo = heroinfos[(nIdx - 2)];
                var nattrID = atteInfo[1];
                var nattrval = atteInfo[2];
                var nName = H52D_Framework.QualityValue[nattrID].dwName;
                var isper = H52D_Framework.QualityValue[nattrID].isper;
                attNameLable.text = H52D_Framework.StringInfoConfig[nName].s + "：";
                valLable.text = nattrval.toString();
                if (isper == 1) {
                    nattrval = nattrval / 100 + "%";
                    if (hero) {
                        var value = hero.attr.GetAttributeValue(nIdx);
                        if (nIdx == 4 && value > 10000) {
                            value = 10000;
                        }
                        valLable.text = value / 100 + "%";
                    }
                    else {
                        valLable.text = nattrval.toString();
                    }
                }
                else {
                    if (hero) {
                        valLable.text = hero.attr.GetAttributeValue(nIdx) + "";
                    }
                }
            }
            this.heropeck_red.visible = H52D_Framework.HeroManager.Instance.PeckShow;
            var a = H52D_Framework.HeroManager.Instance.GetHeroPecktime(this._HeroID);
            this._time = a - H52D_Framework.Time.serverSecodes;
            H52D_Framework.Tick.Loop(100, this, this.nHero_time);
        };
        Hero_AlInfo.prototype.nHero_time = function () {
            this.peck_time.text = H52D_Framework.GetFormatTime(this._time) + "";
            this._time -= 0.1;
        };
        Hero_AlInfo.prototype.GetHeroMolde = function () {
            var _this = this;
            if (this.heroModle) {
                this.heroModle.Destroy();
            }
            var tcfg_hero = H52D_Framework.HeroConfig[this._HeroID];
            var pos = tcfg_hero.position;
            this.heroModle = new H52D_Framework.Avatar(this.heroIcon);
            this.heroModle.Load(tcfg_hero.strFacadeModel, 1, tcfg_hero.modelScale * 2.6, pos[1], pos[2], Laya.Handler.create(this, function () {
                _this.heroModle.Play(1, true, true, function () {
                }, true);
            }));
        };
        Hero_AlInfo.prototype.BtnClick = function (buf) {
            switch (buf) {
                case Btn.close:
                    this.Close();
                    break;
            }
        };
        Hero_AlInfo.prototype.Close = function () {
            H52D_Framework.UIManager.Instance.DestroyUI(this, null);
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.REFFIXEDATTR, Laya.Handler.create(this, this.Info));
            H52D_Framework.Event.RemoveEvent("UpdateBtnList", Laya.Handler.create(this, this.SetRedPrint));
        };
        Hero_AlInfo.prototype.Btnclick_openview = function () {
            if (H52D_Framework.UIManager.Instance.IsHave("HeroStarPeckView", H52D_Framework.ViewUpRoot)) {
                H52D_Framework.UIManager.Instance.DestroyUI("HeroStarPeckView", [H52D_Framework.ViewUpRoot]);
            }
            H52D_Framework.UIManager.Instance.CreateUI("HeroStarPeckView", [H52D_Framework.ViewUpRoot]);
        };
        Hero_AlInfo.prototype.OnDestroy = function () {
            this.offAll();
        };
        return Hero_AlInfo;
    }(ui.heroList.Hero_AlInfoUI));
    H52D_Framework.Hero_AlInfo = Hero_AlInfo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Hero_AlInfo.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ChangeSceneView", [
        { url: "res/ui/ui_scene01.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_scene02.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_scene03.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_scene04.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_scene05.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_scene06.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_scene07.atlas", type: Laya.Loader.ATLAS },
    ]);
    var ChangeSceneView = /** @class */ (function (_super) {
        __extends(ChangeSceneView, _super);
        function ChangeSceneView() {
            var _this = _super.call(this) || this;
            _this.path = "ui_icon/";
            _this.visible = false;
            _this.scenebg = new Laya.Image();
            _this.scenebg.bottom = 0;
            _this.img_bg.addChild(_this.scenebg);
            _this.img_bg.width = G_StageWidth * G_StageWidthScale;
            _this.img_bg.height = G_StageHeight * G_StageHeightScale;
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.SHOW_SCENE, Laya.Handler.create(_this, _this.ShowScene));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.CLOSE_SCENE, Laya.Handler.create(_this, _this.CloseScene));
            return _this;
        }
        ChangeSceneView.prototype.ShowScene = function (sceneVo) {
            this.scene_name.text = sceneVo.sceneName;
            var sceneurl = "ui_scene" + sceneVo.strSceneFileName.substr(-2, 2) + "/";
            this.scenebg.skin = sceneurl + "02.png";
            this.scenebg.height = G_StageWidth * G_StageWidthScale / this.scenebg.width * this.scenebg.height;
            this.scenebg.width = G_StageWidth * G_StageWidthScale;
            this.img_bg.skin = sceneurl + "01.png";
            this.img_sign.skin = this.path + sceneVo.strSceneChange + ".png";
            this.alpha = 1;
            this.visible = true;
        };
        ChangeSceneView.prototype.CloseScene = function (callBack) {
            var _this = this;
            H52D_Framework.TweenList.to(this, this, { alpha: 0 }, 600, function () {
                _this.visible = false;
                if (callBack) {
                    callBack();
                }
                else {
                    // if (CustomsManager.Instance.CustomsVo.customsType == Customs_Type.Boss) {
                    // 	Tick.Once(2500, this, () => {
                    // 		Event.DispatchEvent(EventDefine.BEGIN_FIRE);
                    // 		BattleManager.Instance.OpenBattle();
                    // 	});
                    // } else {
                    // 	Event.DispatchEvent(EventDefine.BEGIN_FIRE);
                    // 	BattleManager.Instance.OpenBattle();
                    // }
                }
            }, 800);
        };
        ChangeSceneView.prototype.Destroy = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("ChangeSceneView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.SHOW_SCENE, Laya.Handler.create(this, this.ShowScene));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.CLOSE_SCENE, Laya.Handler.create(this, this.CloseScene));
        };
        return ChangeSceneView;
    }(ui.loading.ChangeSceneViewUI));
    H52D_Framework.ChangeSceneView = ChangeSceneView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ChangeSceneView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("LoadingView", [
        { url: "res/ui/ui_login.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_noPack/login.png", type: Laya.Loader.IMAGE }
    ]);
    var LoadingView = /** @class */ (function (_super) {
        __extends(LoadingView, _super);
        function LoadingView() {
            var _this = _super.call(this) || this;
            //进度条长度
            _this._progressLen = 596;
            _this.backGround.skin = "res/ui/ui_noPack/login.png";
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.UPDATE_LOADING_SLIDER_VALUE, Laya.Handler.create(_this, _this.UpdateLoadingSliderValue));
            return _this;
        }
        LoadingView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.UPDATE_LOADING_SLIDER_VALUE, Laya.Handler.create(this, this.UpdateLoadingSliderValue));
        };
        LoadingView.prototype.UpdateLoadingSliderValue = function (value, strInfo) {
            if (strInfo) {
                this.loadingtxt.text = strInfo;
            }
            this.sliderValue.width = value * this._progressLen;
        };
        return LoadingView;
    }(ui.loading.LoadingViewUI));
    H52D_Framework.LoadingView = LoadingView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=LoadingView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("LoginView", [
        { url: "res/ui/ui_login.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_noPack/login.png", type: Laya.Loader.IMAGE },
    ]);
    var LoginView = /** @class */ (function (_super) {
        __extends(LoginView, _super);
        function LoginView() {
            var _this = _super.call(this) || this;
            _this.backGround.skin = "res/ui/ui_noPack/login.png";
            _this.loginBtn.on(Laya.Event.CLICK, _this, _this.OnLoginBtnClick);
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            //敏感词检测
            H52D_Framework.Tick.FrameLoop(1, _this, function () {
                _this.accountInput.text = H52D_Framework.SensitiveWord.Instance.Replace(_this.accountInput.text);
                if (_this.accountInput.focus) {
                    if (_this.accountInput.text == "请输入角色名") {
                        _this.accountInput.text = "";
                    }
                }
                else {
                    if (_this.accountInput.text == "") {
                        _this.accountInput.text = "请输入角色名";
                    }
                }
            });
            return _this;
        }
        LoginView.prototype.Destroy = function () {
            this.offAll();
        };
        LoginView.prototype.OnLoginBtnClick = function () {
            if (H52D_Framework.StringIsEmpty(this.accountInput.text) || this.accountInput.text == "请输入角色名") {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("账号不能为空!");
                return;
            }
            H52D_Framework.LoginLogic.Instance.Login(this.accountInput.text, "");
        };
        return LoginView;
    }(ui.login.LoginViewUI));
    H52D_Framework.LoginView = LoginView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=LoginView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("MailView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_head.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_mail.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS },
    ]);
    var MailLineView = /** @class */ (function (_super) {
        __extends(MailLineView, _super);
        function MailLineView(buf) {
            var _this = _super.call(this) || this;
            _this._mailData = buf;
            _this.AddEvent();
            _this.Init();
            return _this;
        }
        MailLineView.prototype.AddEvent = function () {
            this.btn.on(Laya.Event.CLICK, this, this.MailClick);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
        };
        MailLineView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Tick.ClearAll(this);
        };
        MailLineView.prototype.Init = function () {
            this.MailRecTime();
            this.InitStateLab();
            this.InitTitleText();
            this.SetAward();
        };
        MailLineView.prototype.MailClick = function () {
            if (this._mailData.ReadMail()) {
                H52D_Framework.MailLogic.Inst.ReadMail(this._mailData.instId);
            }
            H52D_Framework.UIManager.Instance.CreateUI("MailTipView", [H52D_Framework.ViewUpRoot, this._mailData]);
        };
        MailLineView.prototype.InitStateLab = function () {
            if (this._mailData.isNew) {
                this.notRead.text = '未读';
                this.notRead.color = '#377b51';
            }
            else {
                this.notRead.text = '已读';
                this.notRead.color = '#435586';
            }
        };
        MailLineView.prototype.SetAward = function () {
            if (this._mailData.tAffixData.length) {
                if (!this._mailData.bAward) {
                    this.itemImg.visible = true;
                }
                else {
                    this.itemImg.visible = false;
                }
            }
            else {
                this.itemImg.visible = false;
            }
        };
        MailLineView.prototype.InitTitleText = function () {
            this.mailTitle.text = this._mailData.mailTitle;
            this.mailContent.text = this._mailData.getAffixContent;
        };
        MailLineView.prototype.MailRecTime = function () {
            var lastTotalTime = this._mailData.dueTime - new Date().getTime() / 1000;
            var lastDay = Math.ceil(lastTotalTime / 86400);
            this.mailReciveTime.text = this._mailData.reciveTimeToStr;
            if (lastTotalTime <= 1) {
                if (this._mailData.tAffixData.length) {
                    if (!this._mailData.bAward) {
                        H52D_Framework.MailLogic.Inst.GetMailAffix(this._mailData.instId);
                        H52D_Framework.MailLogic.Inst.DelMailsReq1(this._mailData.instId);
                    }
                    else {
                        H52D_Framework.MailLogic.Inst.DelMailsReq1(this._mailData.instId);
                    }
                }
                else {
                    H52D_Framework.MailLogic.Inst.DelMailsReq1(this._mailData.instId);
                }
                return;
            }
            this.lastTime.text = '有效期: ' + lastDay + '天';
            if (lastDay < 3) {
                this.lastTime.color = '#ff0000';
                if (lastDay <= 1) {
                    // TODO 倒计时显示剩余时间 02:30:40
                    if (!this._timeOut || this._timeOut != Math.ceil(lastTotalTime)) {
                        this._timeOut = Math.ceil(lastTotalTime);
                    }
                    var h = Math.floor(this._timeOut / 3600) < 10 ? '0' + Math.floor(this._timeOut / 3600) : Math.floor(this._timeOut / 3600);
                    var m = Math.floor(this._timeOut % 3600 / 60) < 10 ? '0' + Math.floor(this._timeOut % 3600 / 60) : Math.floor(this._timeOut % 3600 / 60);
                    var s = (this._timeOut % 3600 % 60) < 10 ? '0' + (this._timeOut % 3600 % 60) : (this._timeOut % 3600 % 60);
                    this.lastTime.text = h + " : " + m + " : " + s;
                    this.lastTime.color = '#ff0000';
                    H52D_Framework.Tick.Loop(1000, this, this.SetTimeOut, [this._mailData]);
                }
            }
        };
        MailLineView.prototype.SetTimeOut = function (data) {
            if (this._timeOut <= 1) {
                H52D_Framework.Tick.Clear(this, this.SetTimeOut);
                // 到期邮件直接删除
                if (this._mailData.tAffixData.length) {
                    if (!this._mailData.bAward) {
                        H52D_Framework.MailLogic.Inst.GetMailAffix(this._mailData.instId);
                        H52D_Framework.MailLogic.Inst.DelMailsReq1(this._mailData.instId);
                    }
                    else {
                        H52D_Framework.MailLogic.Inst.DelMailsReq1(this._mailData.instId);
                    }
                }
                else {
                    H52D_Framework.MailLogic.Inst.DelMailsReq1(this._mailData.instId);
                }
            }
            else {
                var time = Math.ceil((--this._timeOut));
                var h = Math.floor(time / 3600) < 10 ? '0' + Math.floor(time / 3600) : Math.floor(time / 3600);
                var m = Math.floor(time % 3600 / 60) < 10 ? '0' + Math.floor(time % 3600 / 60) : Math.floor(time % 3600 / 60);
                var s = (time % 3600 % 60) < 10 ? '0' + (time % 3600 % 60) : (time % 3600 % 60);
                this.lastTime.text = h + " : " + m + " : " + s;
            }
        };
        return MailLineView;
    }(ui.Mail.MailLineViewUI));
    H52D_Framework.MailLineView = MailLineView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MailLineView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    var MailTipView = /** @class */ (function (_super) {
        __extends(MailTipView, _super);
        function MailTipView(paramsData) {
            var _this = _super.call(this) || this;
            _this._type = 0; //操作类型标记 0:删除 1领取
            _this._dataSourceObj = {};
            _this._dataSourceArr = [];
            // 缓存数据
            _this._mailItemData = paramsData[1];
            _this.AddEvent();
            _this.Init(paramsData[1]);
            return _this;
        }
        MailTipView.prototype.AddEvent = function () {
            this.closeBtn.on(Laya.Event.CLICK, this, this.CloseFunc);
            this.returnImg.on(Laya.Event.CLICK, this, this.CloseFunc);
            this.operationBtn.on(Laya.Event.CLICK, this, this.OperationFunc);
            this.list.renderHandler = new Laya.Handler(this, this.AffixItemClick);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            // 注册消息，邮件删除后关闭对应的详情页
            H52D_Framework.Event.RegistEvent('CloseMailTips', Laya.Handler.create(this, this.CloseFunc));
            // 刷新邮件tips界面
            H52D_Framework.Event.RegistEvent('UpdateMailTipView', Laya.Handler.create(this, this.Init));
        };
        MailTipView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent('CloseMailTips', Laya.Handler.create(this, this.CloseFunc));
            H52D_Framework.Event.RemoveEvent('UpdateMailTipView', Laya.Handler.create(this, this.Init));
        };
        MailTipView.prototype.Init = function (data) {
            H52D_Framework.SetHtmlStyle(this.mailContent, 18, "#49495b", "left");
            // 界面初始化
            this.mailTitle.text = data.mailTitle;
            this.mailContent.innerHTML = data.mailContent;
            this.mailReciveTime.text = data.reciveTimeToStr; //格式2018-03-21 10:21:20
            // 按钮初始化显示删除
            this.btnLab.text = "领取";
            this._type = 0;
            this.operationBtn.disabled = true;
            if (data.tAffixData.length) {
                this.aFFixBox.visible = true;
                if (!data.bAward) {
                    // 图标置灰
                    this.operationBtn.disabled = false;
                    this.btnLab.text = "领取";
                }
                else {
                    // 按钮显示领取
                    this.operationBtn.disabled = true;
                    this.btnLab.text = "已领取";
                    this._type = 1;
                }
                // TODO 初始化list数据展示
                this.SetDataToList(data.tAffixData);
            }
            else {
                this.aFFixBox.visible = false;
            }
        };
        MailTipView.prototype.CloseFunc = function () {
            H52D_Framework.UIManager.Instance.DestroyUI('MailTipView', [H52D_Framework.ViewUpRoot]);
        };
        // 邮件操作
        MailTipView.prototype.OperationFunc = function () {
            var tAffix = this._mailItemData.tAffix;
            // let num = tAffix[1][3];
            var bSucess = {};
            for (var key in tAffix) {
                bSucess[key] = tAffix[1][3];
                var cutNum = H52D_Framework.EquipManager.Instance.GetEquipNum();
                var maxNum = H52D_Framework.GameParamConfig.EquipMaxNum;
                if (cutNum >= maxNum) {
                    var str = H52D_Framework.SysPromptConfig[30040].strPromptInfo;
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
                    return;
                }
            }
            H52D_Framework.MailLogic.Inst.GetMailAffix(this._mailItemData.instId);
            this.operationBtn.disabled = true;
        };
        // 向list添加渲染数据
        MailTipView.prototype.SetDataToList = function (data) {
            var arr = [];
            this._dataSourceObj = {};
            this._dataSourceArr = [];
            for (var i = 0; i < data.length; i++) {
                var cfgId = data[i].cfgId;
                var type = data[i].type;
                if (!this._dataSourceObj[cfgId]) {
                    this._dataSourceObj[cfgId] = 0;
                }
                if (data[i].num != 0) {
                    this._dataSourceObj[cfgId] += data[i].num;
                    this._dataSourceArr.push(data[i]);
                    arr.push(data[i]);
                }
            }
            this.list.array = arr;
            this.SetListCenter();
        };
        // list自适应居中
        MailTipView.prototype.SetListCenter = function () {
            this.list.repeatX = this._dataSourceArr.length;
            this.list.spaceX = 17;
            if (this._dataSourceArr.length > 3) {
                this.list.spaceX = 0;
            }
            this.list.width = 80 * this.list.repeatX + 17 * (this.list.repeatX - 1);
            if (this.list.width >= 466 * G_StageWidthScale) {
                this.list.width = 466 * G_StageWidthScale;
            }
        };
        // 附件点击事件
        MailTipView.prototype.AffixItemClick = function (item, index) {
            var btn = item.getChildByName('btn');
            var name = item.getChildByName('name');
            var num = item.getChildByName('num');
            var itemData = this.list.array[index];
            var colorQua = itemData.color;
            var quaUrl = "ui_icon/" + itemData.icon;
            var bgUrl = H52D_Framework.BaseDefine.ItemBgColor[colorQua];
            var bgImg = item.getChildByName('bgImg');
            var quaImg = item.getChildByName('quaImg');
            num.visible = itemData.num > 1 ? true : false;
            name.color = H52D_Framework.BaseDefine.LabelColor1[colorQua];
            name.text = itemData.name;
            bgImg.bgColor = bgUrl;
            quaImg.skin = quaUrl;
        };
        return MailTipView;
    }(ui.Mail.MailTipViewUI));
    H52D_Framework.MailTipView = MailTipView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MailTipView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* 邮件系统UI类;
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("MailView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_head.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_mail.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS },
    ]);
    var MailView = /** @class */ (function (_super) {
        __extends(MailView, _super);
        function MailView() {
            var _this = _super.call(this) || this;
            /**
             * 获取背包容量
             */
            _this._cutNum = H52D_Framework.EquipManager.Instance.GetEquipNum();
            _this.AddEvent();
            _this.Init();
            return _this;
        }
        MailView.prototype.AddEvent = function () {
            this.closeBtn.on(Laya.Event.CLICK, this, this.CloseFunc);
            this.delAll.on(Laya.Event.CLICK, this, this.DelAllMail);
            this.getAll.on(Laya.Event.CLICK, this, this.GetAllAffix);
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            // 刷新界面消息
            H52D_Framework.Event.RegistEvent('UpdateMailView', Laya.Handler.create(this, this.Init));
            H52D_Framework.Event.RegistEvent('UpdateMailList', Laya.Handler.create(this, this.Init));
        };
        MailView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Tick.ClearAll(this);
            H52D_Framework.Event.RemoveEvent('UpdateMailView', Laya.Handler.create(this, this.Init));
            H52D_Framework.Event.RemoveEvent('UpdateMailList', Laya.Handler.create(this, this.Init));
        };
        MailView.prototype.Init = function () {
            this.closeBtn.visible = true;
            if (H52D_Framework.MailLogic.Inst.sortList.length) {
                this.mailBox.visible = true;
                this.noMailLab.visible = false;
            }
            else {
                this.mailBox.visible = false;
                this.noMailLab.visible = true;
                this.MailLab.text = H52D_Framework.GetInfoAttr.Instance.GetText(7006);
            }
            H52D_Framework.MailLogic.Inst.SortData();
            this.mailPanel.vScrollBarSkin = '';
            this.mailPanel.vScrollBar.isVertical = true; //滚动条的方向为垂直滚动
            this.mailPanel.vScrollBar.elasticBackTime = 600; //设置橡皮筋回弹时间
            this.mailPanel.vScrollBar.elasticDistance = 100; //设置橡皮筋回弹距离
            this.InitBtn();
            this.InitPanel();
        };
        MailView.prototype.InitBtn = function () {
            if (H52D_Framework.MailLogic.Inst.sortList.length) {
                if (H52D_Framework.MailLogic.Inst.canAwardId.length <= 0) {
                    this.getAll.disabled = true;
                }
                else {
                    this.getAll.disabled = false;
                }
                if (H52D_Framework.MailLogic.Inst.canDelId.length <= 0) {
                    this.delAll.disabled = true;
                }
                else {
                    this.delAll.disabled = false;
                }
            }
            else {
                this.getAll.disabled = true;
                this.delAll.disabled = true;
            }
        };
        MailView.prototype.DelAllMail = function () {
            // 判断是否存在符合条件的邮件，没有的话进行提示
            if (H52D_Framework.MailLogic.Inst.canDelId.length) {
                // 删除接口的参数就是一个ID集合
                H52D_Framework.MailLogic.Inst.DelMailsReq(H52D_Framework.MailLogic.Inst.canDelId);
            }
            else {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("当前无可删除的邮件");
            }
        };
        MailView.prototype.GetAllAffix = function () {
            var aWardMailId = H52D_Framework.MailLogic.Inst.canAwardId;
            var maxNum = H52D_Framework.GameParamConfig.EquipMaxNum;
            if (!aWardMailId.length) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("当前无可领取的邮件");
                return;
            }
            while (aWardMailId.length > 0) {
                var sendMailId = aWardMailId.shift();
                var itemType = H52D_Framework.MailLogic.Inst.GetMailById(sendMailId).tAffix[1];
                switch (itemType[1]) {
                    case H52D_Framework.BaseDefine.ItemTypeEquip:
                        this._cutNum++;
                        if (this._cutNum <= maxNum) {
                            H52D_Framework.MailLogic.Inst.GetMailAffix(sendMailId);
                        }
                        else {
                            if (this._cutNum <= (H52D_Framework.GameParamConfig.EquipMaxNum + 1)) {
                                var str = H52D_Framework.SysPromptConfig[30040].strPromptInfo;
                                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
                            }
                        }
                        break;
                    default:
                        H52D_Framework.MailLogic.Inst.GetMailAffix(sendMailId);
                        break;
                }
            }
            this._cutNum = H52D_Framework.EquipManager.Instance.GetEquipNum();
        };
        MailView.prototype.CloseFunc = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("MailView", [H52D_Framework.ViewUpRoot]);
        };
        MailView.prototype.DeleteMail = function (index) {
            if (!H52D_Framework.MailLogic.Inst.sortList[index].bAward) {
                H52D_Framework.MailLogic.Inst.GetMailAffix(H52D_Framework.MailLogic.Inst.sortList[index].instId);
                H52D_Framework.OneTimer(200, Laya.Handler.create(this, function () {
                    H52D_Framework.MailLogic.Inst.DelMailsReq1(H52D_Framework.MailLogic.Inst.sortList[index].instId);
                }), "DeleteMail");
            }
            else {
                H52D_Framework.MailLogic.Inst.DelMailsReq1(H52D_Framework.MailLogic.Inst.sortList[index].instId);
            }
        };
        MailView.prototype.InitPanel = function () {
            this.mailPanel.destroyChildren();
            var index = 0;
            for (var i = 0; i < H52D_Framework.MailLogic.Inst.listData.length; i++) {
                var node = new H52D_Framework.MailLineView(H52D_Framework.MailLogic.Inst.listData[i]);
                node.y = node.height * index;
                this.mailPanel.addChild(node);
                index++;
            }
        };
        return MailView;
    }(ui.Mail.MailViewUI));
    H52D_Framework.MailView = MailView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MailView.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class 活动数据模型
     * @author zhangyusong
     */
    var ActionVo = /** @class */ (function () {
        function ActionVo() {
        }
        return ActionVo;
    }());
    H52D_Framework.ActionVo = ActionVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ActionVo.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：世界Boss模型
     * @author：zhangyusong
     */
    var BossVo = /** @class */ (function (_super) {
        __extends(BossVo, _super);
        function BossVo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return BossVo;
    }(H52D_Framework.ActionVo));
    H52D_Framework.BossVo = BossVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=BossVo.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("KickingChooseView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_kicking.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_pet.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**
     * @class：pvp选择房间
     * @author：zhangyusong
     */
    var KickingChooseView = /** @class */ (function (_super) {
        __extends(KickingChooseView, _super);
        function KickingChooseView() {
            var _this = _super.call(this) || this;
            _this.skin_1_up = "ui_rank/img-lan-xuan.png";
            _this.skin_1_down = "ui_rank/img-zi-xuan.png";
            _this.skin_2_up = "ui_rank/img-lan-weixuan.png";
            _this.skin_2_down = "ui_rank/img-zi-weixuan.png";
            _this.TX_CHALLENGE = "x/y";
            _this.MARTCH_TIME = "匹配中：xS";
            /** 匹配房间当前耗时 */
            _this.martchCurrTime = 0;
            _this.EventInit();
            _this.ViewInit();
            return _this;
        }
        KickingChooseView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_close.on(Laya.Event.CLICK, this, this.OnCloseHander);
            this.btn_gold.on(Laya.Event.CLICK, this, this.OnChoosePage, [H52D_Framework.BaseDefine.ItemIdGold]);
            this.btn_diamond.on(Laya.Event.CLICK, this, this.OnChoosePage, [H52D_Framework.BaseDefine.ItemIdDiamonds]);
            this.btn_pvp.on(Laya.Event.CLICK, this, this.OnOpenPvp);
            this.btn_pet.on(Laya.Event.CLICK, this, this.OnOpenPet);
            this.btn_matching.on(Laya.Event.CLICK, this, this.OnMatching);
            H52D_Framework.Event.RegistEvent("KickingChooseUpdate", Laya.Handler.create(this, this.KickingChooseUpdate));
        };
        KickingChooseView.prototype.ViewInit = function () {
            var _this = this;
            this.listGold = this.SetData(H52D_Framework.BaseDefine.ItemIdGold);
            this.listDiamonds = this.SetData(H52D_Framework.BaseDefine.ItemIdDiamonds);
            this.currentGold = 0;
            this.currentDiamonds = 0;
            this.SelectInit(H52D_Framework.BaseDefine.ItemIdGold);
            this.SelectInit(H52D_Framework.BaseDefine.ItemIdDiamonds);
            this.current = H52D_Framework.BaseDefine.ItemIdGold;
            this.totleGold = H52D_Framework.GameParamConfig["ParticipationMaxNum"][1];
            this.totleDiamonds = H52D_Framework.GameParamConfig["ParticipationMaxNum"][2];
            this.room_list.array = this.listGold;
            this.room_list.renderHandler = new Laya.Handler(this, function (item, index) {
                var vo = _this.room_list.array[index];
                item.getChildByName("icon_money").skin = vo.type == H52D_Framework.BaseDefine.ItemIdGold ?
                    "ui_common/icon-jinbi.png" : "ui_icon/icon_prop_013.png";
                item.getChildByName("img_sign").skin = vo.roomIcon;
                item.getChildByName("room_name").text = H52D_Framework.StringInfoConfig[vo.rname].s;
                item.getChildByName("box_select").visible = vo.select;
                item.getChildByName("img_hook").visible = vo.select;
                var bg = item.getChildByName("img_bg");
                var icon = item.getChildByName("icon_money");
                var money = item.getChildByName("money");
                if (vo.type == H52D_Framework.BaseDefine.ItemIdGold) {
                    bg.skin = "ui_camp/btn-junaxuan-zhenying.png";
                    icon.skin = "ui_common/icon-jinbi.png";
                    money.text = _this.ShowMoney(vo.money, "金币");
                }
                else if (vo.type == H52D_Framework.BaseDefine.ItemIdDiamonds) {
                    bg.skin = "ui_camp/btn-zuanshi-pvp.png";
                    icon.skin = "ui_icon/icon_prop_013.png";
                    money.text = _this.ShowMoney(vo.money, "钻石");
                }
                icon.x = 148 - icon.width - money.textWidth * 0.5;
                item.on(Laya.Event.CLICK, _this, _this.ChoosRoom, [index]);
            });
            this.OnChoosePage(H52D_Framework.KickingManager.Instance.roomType);
            this._canmatching = true;
        };
        KickingChooseView.prototype.ShowMoney = function (num, name) {
            if (num > 1000000) {
                return (num / 10000 >> 0) + "万%n及以上".replace("%n", name);
            }
            else {
                return num + "%n及以上".replace("%n", name);
            }
        };
        KickingChooseView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent("KickingChooseUpdate", Laya.Handler.create(this, this.KickingChooseUpdate));
        };
        /** 刷新界面 */
        KickingChooseView.prototype.KickingChooseUpdate = function () {
            this.OnChoosePage(this.current);
        };
        KickingChooseView.prototype.SelectInit = function (itemID) {
            if (itemID == H52D_Framework.BaseDefine.ItemIdGold) {
                for (var i = 0; i < this.listGold.length; i++) {
                    if (this.listGold[i].money < H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold) &&
                        this.listGold[i].money > this.listGold[this.currentGold].money) {
                        this.currentGold = i;
                    }
                }
                this.listGold[this.currentGold].select = true;
            }
            if (itemID == H52D_Framework.BaseDefine.ItemIdDiamonds) {
                for (var i = 0; i < this.listDiamonds.length; i++) {
                    if (this.listDiamonds[i].money < H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdDiamonds) &&
                        this.listDiamonds[i].money > this.listDiamonds[this.currentDiamonds].money) {
                        this.currentDiamonds = i;
                    }
                }
                this.listDiamonds[this.currentDiamonds].select = true;
            }
        };
        /** 设置数据列表 */
        KickingChooseView.prototype.SetData = function (type) {
            var list = H52D_Framework.KickingConfig[type];
            var dataList = [];
            for (var i in list) {
                var vo = new H52D_Framework.PvpRoomVo();
                vo.type = type;
                vo.id = Number(i);
                vo.rname = list[i].roomName;
                vo.roomIcon = "ui_kicking/img-" + list[i].roomIcon + "-pvp.png";
                vo.money = list[i].comeInNeed;
                vo.sceneId = list[i].roomScene;
                vo.maxTime = list[i].AttackMaxTime;
                vo.select = false;
                dataList.push(vo);
            }
            return dataList;
        };
        KickingChooseView.prototype.OnCloseHander = function () {
            H52D_Framework.KickingManager.Instance.roomType = H52D_Framework.BaseDefine.ItemIdGold;
            H52D_Framework.UIManager.Instance.DestroyUI(this.name, [H52D_Framework.ViewToppestRoot]);
        };
        KickingChooseView.prototype.OnChoosePage = function (cost) {
            this.current = cost;
            var surplus;
            var totle;
            var item_num = H52D_Framework.BagManager.Instance.getItemNumber(cost);
            var list;
            H52D_Framework.SetHtmlStyle(this.My_money, 22, "#dde2f2", "center");
            if (cost == H52D_Framework.BaseDefine.ItemIdGold) {
                this.btn_gold.skin = this.skin_1_down;
                this.btn_diamond.skin = this.skin_2_up;
                this.btn_gold.labelColors = "#eff8bb";
                this.btn_diamond.labelColors = "#bebbf8";
                surplus = H52D_Framework.KickingManager.Instance.surplusGold;
                totle = this.totleGold;
                list = this.listGold;
                this.My_money.innerHTML = "<img src= 'ui_main/icon-jinbi.png' width='24px' height='24px'></img>" + item_num;
            }
            else if (cost == H52D_Framework.BaseDefine.ItemIdDiamonds) {
                this.btn_gold.skin = this.skin_1_up;
                this.btn_diamond.skin = this.skin_2_down;
                this.btn_gold.labelColors = "#bebbf8";
                this.btn_diamond.labelColors = "#eff8bb";
                surplus = H52D_Framework.KickingManager.Instance.surplusDiamonds;
                totle = this.totleDiamonds;
                list = this.listDiamonds;
                this.My_money.innerHTML = "<img src= 'ui_icon/icon_prop_013.png' width='24px' height='24px'></img>" + item_num;
            }
            this.txt_challenge.text = this.TX_CHALLENGE.replace("x", String(surplus)).replace("y", String(totle));
            this.txt_challenge.color = surplus > 0 ? H52D_Framework.BaseDefine.LabelColor1[2] : H52D_Framework.BaseDefine.LabelColor1[6];
            this.room_list.array = list;
        };
        /**
         * 选择房间
         * @param 房间id
         */
        KickingChooseView.prototype.ChoosRoom = function (index) {
            if (this.current == H52D_Framework.BaseDefine.ItemIdGold) {
                this.listGold[this.currentGold].select = false;
                this.currentGold = index;
                this.listGold[this.currentGold].select = true;
                this.room_list.array = this.listGold;
            }
            else if (this.current == H52D_Framework.BaseDefine.ItemIdDiamonds) {
                this.listDiamonds[this.currentDiamonds].select = false;
                this.currentDiamonds = index;
                this.listDiamonds[this.currentDiamonds].select = true;
                this.room_list.array = this.listDiamonds;
            }
        };
        /** 匹配房间 */
        KickingChooseView.prototype.OnMatching = function () {
            var _this = this;
            if (this.canmatching) { //匹配
                this.btn_matching.mouseEnabled = false;
                H52D_Framework.Tick.Once(100, this, function () {
                    _this.btn_matching.mouseEnabled = true;
                });
                this.currentVo = null;
                if (this.current == H52D_Framework.BaseDefine.ItemIdGold) {
                    if (H52D_Framework.KickingManager.Instance.surplusGold > 0 || this.totleGold == -1) {
                        this.currentVo = this.listGold[this.currentGold];
                    }
                }
                else if (this.current == H52D_Framework.BaseDefine.ItemIdDiamonds) {
                    if (H52D_Framework.KickingManager.Instance.surplusDiamonds > 0 || this.totleDiamonds == -1) {
                        this.currentVo = this.listDiamonds[this.currentDiamonds];
                    }
                }
                if (this.currentVo == null) {
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips(30042);
                }
                else if (H52D_Framework.BagManager.Instance.getItemNumber(this.current) < this.currentVo.money) {
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips(30028, this.current == H52D_Framework.BaseDefine.ItemIdGold ? "金币" : "钻石");
                }
                else {
                    this.canmatching = false;
                    this.martchCurrTime = 1;
                    this.tx_martch_time.text = this.MARTCH_TIME.replace("x", String(this.martchCurrTime));
                    var matchTime = H52D_Framework.GameParamConfig["MatchTime"];
                    this.martchTotleTime = matchTime[1] + ((matchTime[2] - matchTime[1] + 1) * Math.random() >> 0);
                    H52D_Framework.Tick.Loop(1000, this, this.MatchCountdwon);
                }
            }
            else { //退出匹配
                H52D_Framework.Tick.Clear(this, this.MatchCountdwon);
                this.canmatching = true;
                this.tx_martch_time.text = "";
            }
        };
        Object.defineProperty(KickingChooseView.prototype, "canmatching", {
            get: function () {
                return this._canmatching;
            },
            set: function (value) {
                this._canmatching = value;
                this.room_list.mouseEnabled = value;
                this.btn_gold.mouseEnabled = value;
                this.btn_diamond.mouseEnabled = value;
                this.btn_matching.label = value ? "匹配" : "取消匹配";
            },
            enumerable: true,
            configurable: true
        });
        /** 匹配房间计时 */
        KickingChooseView.prototype.MatchCountdwon = function () {
            if (++this.martchCurrTime > this.martchTotleTime) {
                this.btn_matching.label = "匹配";
                this.tx_martch_time.text = "";
                this.room_list.mouseEnabled = true;
                this.btn_gold.mouseEnabled = true;
                this.btn_diamond.mouseEnabled = true;
                H52D_Framework.UIManager.Instance.DestroyUI("KickingWarView", [H52D_Framework.ViewToppestRoot]);
                H52D_Framework.UIManager.Instance.DestroyUI("KickingPetView", [H52D_Framework.ViewToppestRoot]);
                H52D_Framework.Tick.Clear(this, this.MatchCountdwon);
                var roomId = 0;
                if (this.current == H52D_Framework.BaseDefine.ItemIdGold) {
                    roomId = this.listGold[this.currentGold].id;
                }
                else if (this.current == H52D_Framework.BaseDefine.ItemIdDiamonds) {
                    roomId = this.listDiamonds[this.currentDiamonds].id;
                }
                this.canmatching = true;
                H52D_Framework.KickingManager.Instance.PvpMatching(this.current, roomId, this.currentVo);
            }
            else {
                this.tx_martch_time.text = this.MARTCH_TIME.replace("x", String(this.martchCurrTime));
            }
        };
        /** PVP阵型 */
        KickingChooseView.prototype.OnOpenPvp = function () {
            H52D_Framework.UIManager.Instance.CreateUI("KickingWarView", [H52D_Framework.ViewToppestRoot]);
        };
        /** 上阵神兽 */
        KickingChooseView.prototype.OnOpenPet = function () {
            H52D_Framework.UIManager.Instance.CreateUI("KickingPetView", [H52D_Framework.ViewToppestRoot]);
        };
        return KickingChooseView;
    }(ui.action.kicking.KickingChooseViewUI));
    H52D_Framework.KickingChooseView = KickingChooseView;
    var RoomModel = /** @class */ (function () {
        function RoomModel(item) {
            this.roomName = item.getChildByName("room_name");
            this.money = item.getChildByName("money");
            this.imgSelect = item.getChildByName("img_select");
        }
        Object.defineProperty(RoomModel.prototype, "select", {
            set: function (value) {
                this.imgSelect.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        return RoomModel;
    }());
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=KickingChooseView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**神兽页面*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ListPetView", [
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_pet.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_sign.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS }
    ]);
    var KickingPetView = /** @class */ (function (_super) {
        __extends(KickingPetView, _super);
        function KickingPetView(buf) {
            var _this = _super.call(this) || this;
            _this.UpdateList();
            _this.SetCurrentPetInfo();
            _this.SetTopPetHit();
            _this.AddEvent();
            return _this;
        }
        KickingPetView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_close.on(Laya.Event.CLICK, this, this.CloseHander);
        };
        // 移除事件监听
        KickingPetView.prototype.Destroy = function () {
            this.offAll();
        };
        KickingPetView.prototype.CloseHander = function () {
            H52D_Framework.UIManager.Instance.DestroyUI(this.name, [H52D_Framework.ViewToppestRoot]);
        };
        /**设置神兽总伤害加成 */
        KickingPetView.prototype.SetTopPetHit = function () {
            this.info.on(Laya.Event.CLICK, this, this.PetPlayMethod);
            var petId = H52D_Framework.KickingManager.Instance.petId;
            if (petId == 0) {
                this.petHit.text = "0  神兽伤害";
                this.info.x = 0;
                this.info.x += this.petHit.text.length * 22 * G_StageWidthScale;
                return;
            }
            var OwnPetList = H52D_Framework.PetManager.Instance.OwnPetList;
            var pet = OwnPetList[petId];
            var hitValue = pet.GetDamage() * pet.ratio >> 0;
            if (hitValue >= 10000) {
                var str = (hitValue / 10000).toFixed(0);
                this.petHit.text = str + "W  神兽伤害";
            }
            else {
                this.petHit.text = hitValue.toFixed(0) + "  神兽伤害";
            }
            this.info.x = 0;
            this.info.x += this.petHit.text.length * 22 * G_StageWidthScale;
        };
        /**设置当前上阵神兽信息 */
        KickingPetView.prototype.SetCurrentPetInfo = function () {
            var currentId = H52D_Framework.KickingManager.Instance.petId;
            if (currentId == 0) {
                return;
            }
            var pet_tcfg = H52D_Framework.PetConfig[currentId];
            var pet = H52D_Framework.PetManager.Instance.GetPet_Instance(currentId);
            if (pet) {
                var pet_PrimeStr = H52D_Framework.StringInfoConfig[H52D_Framework.QualityValue[pet.currentAttribute[1][1]].dwName].s;
                var pet_AuxiliaryStr = H52D_Framework.StringInfoConfig[H52D_Framework.QualityValue[pet.currentAttribute[2][1]].dwName].s;
                var primeIsper = H52D_Framework.QualityValue[pet.currentAttribute[1][1]].isper;
                var auxiliaryIsper = H52D_Framework.QualityValue[pet.currentAttribute[2][1]].isper;
                var pet_PrimeValue = pet.currentAttribute[1][2];
                var pet_AuxiliaryValue = pet.currentAttribute[2][2];
                if (pet.currentAttribute[1][1] == 4 && pet_PrimeValue > 10000) {
                    pet_PrimeValue = 10000;
                }
                if (pet.currentAttribute[2][1] == 4 && pet_AuxiliaryValue > 10000) {
                    pet_AuxiliaryValue = 10000;
                }
                var addPethurt = pet_PrimeValue + pet.addCurrentAttribute_1;
                var addHerohurt = pet_AuxiliaryValue + pet.addCurrentAttribute_2;
            }
        };
        /**神兽List赋值 */
        KickingPetView.prototype.UpdateList = function () {
            var arr = [];
            for (var id in H52D_Framework.PetManager.Instance.OwnPetList) {
                arr.push(Number(id));
            }
            for (var i = 0; i < arr.length; i++) {
                for (var j = i + 1; j < arr.length; j++) {
                    var qu = void 0;
                    if (H52D_Framework.PetManager.Instance.OwnPetList[arr[i]].petColor > H52D_Framework.PetManager.Instance.OwnPetList[arr[j]].petColor) {
                        qu = arr[i];
                        arr[i] = arr[j];
                        arr[j] = qu;
                    }
                }
            }
            for (var i = 0; i < arr.length; i++) {
                for (var j = i + 1; j < arr.length; j++) {
                    var lv = void 0;
                    if (H52D_Framework.PetManager.Instance.OwnPetList[arr[i]].Level < H52D_Framework.PetManager.Instance.OwnPetList[arr[j]].Level &&
                        H52D_Framework.PetManager.Instance.OwnPetList[arr[i]].petColor == H52D_Framework.PetManager.Instance.OwnPetList[arr[j]].petColor) {
                        lv = arr[i];
                        arr[i] = arr[j];
                        arr[j] = lv;
                    }
                }
            }
            this.Pet_list.array = arr;
            this.Pet_list.vScrollBarSkin = "";
            this.Pet_list.renderHandler = new Laya.Handler(this, this.Pethandle);
        };
        KickingPetView.prototype.Pethandle = function (item, index) {
            var ID = Number(this.Pet_list.array[index]);
            var pet = H52D_Framework.PetManager.Instance.OwnPetList[ID];
            var pet_name = item.getChildByName("Pet_name");
            var pet_lv = item.getChildByName("Pet_lv");
            var pet_icon = item.getChildByName("Pet_icon");
            var pet_icon_bg = item.getChildByName("pet_icon_bg");
            var pet_info = pet_icon.getChildByName("Pet_info");
            var pet_hurt = item.getChildByName("pet_hurt");
            var hero_hurt = item.getChildByName("hero_hurt");
            var choice = item.getChildByName("choice");
            var click = item.getChildByName("click");
            var point = item.getChildByName("point");
            pet_name.text = pet.petName;
            pet_name.color = H52D_Framework.BaseDefine.PetColor_label[pet.petColor];
            pet_lv.text = pet.Level + "";
            pet_icon.skin = "ui_icon/" + pet.strPetIcon;
            pet_icon_bg.skin = H52D_Framework.BaseDefine.QualityList[pet.petColor];
            var pet_PrimeStr = H52D_Framework.StringInfoConfig[H52D_Framework.QualityValue[pet.currentAttribute[1][1]].dwName].s;
            var pet_AuxiliaryStr = H52D_Framework.StringInfoConfig[H52D_Framework.QualityValue[pet.currentAttribute[2][1]].dwName].s;
            var primeIsper = H52D_Framework.QualityValue[pet.currentAttribute[1][1]].isper;
            var auxiliaryIsper = H52D_Framework.QualityValue[pet.currentAttribute[2][1]].isper;
            var pet_PrimeValue = pet.currentAttribute[1][2];
            var pet_AuxiliaryValue = pet.currentAttribute[2][2];
            if (pet.currentAttribute[1][1] == 4 && pet_PrimeValue > 10000) {
                pet_PrimeValue = 10000;
            }
            if (pet.currentAttribute[2][1] == 4 && pet_AuxiliaryValue > 10000) {
                pet_AuxiliaryValue = 10000;
            }
            pet_hurt.text = primeIsper = 0 ? "+" + pet_PrimeValue + pet_PrimeStr : "x" + pet_PrimeValue / 100 + "%" + pet_PrimeStr;
            hero_hurt.text = auxiliaryIsper = 0 ? "+" + pet_AuxiliaryValue + pet_AuxiliaryStr : "x" + pet_AuxiliaryValue / 100 + "%" + pet_AuxiliaryStr;
            choice.visible = H52D_Framework.KickingManager.Instance.petId == pet.ID;
            click.on(Laya.Event.CLICK, this, this.ChoiceCurrentPet, [ID]);
            point.visible = H52D_Framework.PetManager.Instance.IsNewPet(ID);
            pet_icon.on(Laya.Event.CLICK, this, this.OpenInfoView, [ID]);
        };
        KickingPetView.prototype.ChoiceCurrentPet = function (id) {
            if (H52D_Framework.KickingManager.Instance.petId != 0)
                H52D_Framework.PetManager.Instance.OwnPetList[H52D_Framework.KickingManager.Instance.petId].CurrentState = 0;
            H52D_Framework.PetManager.Instance.OwnPetList[id].CurrentState = 1;
            if (H52D_Framework.KickingManager.Instance.petId != id) {
                this.SetCurrentPetInfo();
                //这是PVP上阵
                H52D_Framework.KickingManager.Instance.petId = id;
                H52D_Framework.KickingManager.Instance.fireData.Pet[0].id = id;
                H52D_Framework.KickingManager.Instance.fireData.Pet[0].Level = H52D_Framework.PetManager.Instance.OwnPetList[id].Level;
            }
            this.UpdateList();
            H52D_Framework.PetManager.Instance.SendShowPet(id);
            this.SetTopPetHit();
        };
        KickingPetView.prototype.PetPlayMethod = function () {
            var tvo = new H52D_Framework.TipsVo();
            tvo.title = "神兽";
            tvo.contentId = 5000;
            tvo.replace = null;
            H52D_Framework.UIManager.Instance.CreateUI("TipsActionView", [H52D_Framework.ViewToppestRoot, tvo]);
        };
        /**
         * 打开神兽tips
         */
        KickingPetView.prototype.OpenInfoView = function (nID) {
            H52D_Framework.PetManager.Instance.SendShowPet(nID);
            H52D_Framework.UIManager.Instance.CreateUI("TipsTreasureView", [H52D_Framework.ViewToppestRoot, 0, nID, 0, 0, 0, "神兽详情", OpenType.ePet]);
        };
        KickingPetView.prototype.ClickPetUp = function () {
            var len = this.Pet_list.array.length;
            if (len < 1)
                return;
            var pet_id = this.Pet_list.array[0];
            this.ChoiceCurrentPet(pet_id);
            H52D_Framework.PetManager.Instance.K_ReqUsePet(pet_id);
        };
        return KickingPetView;
    }(ui.action.kicking.KickingPetViewUI));
    H52D_Framework.KickingPetView = KickingPetView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=KickingPetView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：踢馆提示
     * @author：zhangyusong
     */
    var KickingPromptView = /** @class */ (function (_super) {
        __extends(KickingPromptView, _super);
        function KickingPromptView(buf) {
            var _this = _super.call(this) || this;
            _this.PaneClose = buf[1];
            _this.ViewInit();
            _this.EventInit();
            return _this;
        }
        KickingPromptView.prototype.ViewInit = function () {
        };
        KickingPromptView.prototype.EventInit = function () {
            this.btn_close.on(Laya.Event.CLICK, this, this.onCloseHander);
            this.btn_back.on(Laya.Event.CLICK, this, this.onCloseHander);
            this.btn_confirm.on(Laya.Event.CLICK, this, this.onConfirmHander);
        };
        KickingPromptView.prototype.Destroy = function () {
        };
        KickingPromptView.prototype.onCloseHander = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("KickingPromptView", [H52D_Framework.ViewToppestRoot]);
        };
        /** 确定事件 */
        KickingPromptView.prototype.onConfirmHander = function () {
            this.PaneClose();
            H52D_Framework.UIManager.Instance.DestroyUI("KickingPromptView", [H52D_Framework.ViewToppestRoot]);
            H52D_Framework.UIManager.Instance.DestroyUI("KickingSceneView", [H52D_Framework.ViewToppestRoot]);
        };
        return KickingPromptView;
    }(ui.action.kicking.KickingPromptViewUI));
    H52D_Framework.KickingPromptView = KickingPromptView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=KickingPromptView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("KickingResultView", [
        { url: "res/ui/ui_kicking.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
    ]);
    var KickingResultView = /** @class */ (function (_super) {
        __extends(KickingResultView, _super);
        function KickingResultView(buff) {
            var _this = _super.call(this) || this;
            _this.txResult_w = "本局胜利";
            _this.txResult_l = "本局失败";
            _this.txResult_r = "本局平局";
            _this.time = 10;
            _this.star = buff[1];
            _this.win = buff[2];
            _this.type = buff[3];
            _this.money = buff[4];
            _this.InitView();
            _this.InitEvent();
            return _this;
        }
        KickingResultView.prototype.InitView = function () {
            if (this.win == 2) { //失败
                this.fight_logo.skin = "ui_kicking/img-shibai-pvp.png";
                this.fight_bg.gray = true; //橙色背景板
                this.fight_bg_icon.gray = true; //背景板下的图案
                this.fight_result.text = this.txResult_l;
                this.item_num.text = "-" + this.money;
                this.item_result.text = H52D_Framework.StringInfoConfig[7062].s;
            }
            else {
                if (this.win == 1) { //胜利
                    var Item_rew = H52D_Framework.GameParamConfig.StarData;
                    this.fight_logo.skin = "ui_kicking/img-shengli-pvp.png";
                    if (this.star > 1) {
                        this.fight_result.text = this.star + "星，获得" + Item_rew[4 - this.star][3] + "倍奖励";
                    }
                    else {
                        this.fight_result.text = this.star + "星，获得基础奖励";
                    }
                    this.item_num.text = "+" + this.money;
                    this.item_result.text = String(H52D_Framework.StringInfoConfig[7061].s).replace("%s", 10 + "%");
                    this.fight_win.visible = true;
                }
                else if (this.win == 0) { //平局
                    this.fight_logo.skin = "ui_kicking/img-pingju-pvp.png";
                    this.fight_result.text = this.txResult_r;
                    this.item_num.text = "无奖励";
                    this.item_result.text = H52D_Framework.StringInfoConfig[7063].s;
                }
                this.fight_bg.gray = false;
                this.fight_bg_icon.gray = false; //背景板下的图案
            }
            this.Start_Color(1, this.star);
            //战斗中获得的道具 名字
            this.item_name.text = H52D_Framework.StringInfoConfig[H52D_Framework.ItemConfig[this.type].dwItemName].s;
            this.item_name.color = H52D_Framework.BaseDefine.LabelColor1[H52D_Framework.ItemConfig[this.type]["dwItemQuality"]];
            //战斗中获得的道具品质背景 
            this.item_pinzhi.skin = H52D_Framework.BaseDefine.HeroQualityList[H52D_Framework.ItemConfig[this.type].dwItemQuality];
            this.item_icon.skin = "ui_icon/" + H52D_Framework.ItemConfig[this.type].strIconID_B;
            this.fight_war.array = H52D_Framework.KickingManager.Instance.GetwarInfo();
            this.fight_war.renderHandler = new Laya.Handler(this, this.Handler);
        };
        KickingResultView.prototype.Start_Color = function (start, num) {
            var _this = this;
            var key = start;
            this["start_" + key].skin = "ui_kicking/img-shengli-xingxing-pvp.png";
            this["start_" + key].scale(3, 3);
            Laya.Tween.to(this["start_" + key], { scaleX: 1, scaleY: 1 }, 200, null, Laya.Handler.create(this, function () {
                key++;
                if (key <= num) {
                    _this.Start_Color(key, num);
                }
            }));
        };
        KickingResultView.prototype.InitEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_receive.on(Laya.Event.CLICK, this, this.Btn_click_receive);
            H52D_Framework.Tick.Loop(1000, this, this.CountDown);
        };
        KickingResultView.prototype.Handler = function (item, index) {
            var nhero_Id = this.fight_war.array[index];
            var n_tcfg = H52D_Framework.HeroConfig[nhero_Id];
            var hero_bg = item.getChildByName("hero_bg");
            var hero_icon = item.getChildByName("hero_icon");
            hero_bg.skin = H52D_Framework.BaseDefine.QualityList[n_tcfg.quality];
            hero_icon.skin = "ui_icon/" + n_tcfg.strIcon;
        };
        KickingResultView.prototype.Btn_click_receive = function () {
            H52D_Framework.BattlefieldManager.Instance.Destroy();
            H52D_Framework.UIManager.Instance.DestroyUI("KickingSceneView", [H52D_Framework.ViewToppestRoot]);
            H52D_Framework.UIManager.Instance.DestroyUI("KickingResultView", [H52D_Framework.ViewToppestRoot]);
        };
        KickingResultView.prototype.CountDown = function () {
            this.time--;
            var str = "(" + this.time.toString() + "s后自动退出)";
            this.fight_quittime.text = str;
            if (this.time == 0) {
                this.Btn_click_receive();
                H52D_Framework.Tick.Clear(this, this.CountDown);
            }
        };
        KickingResultView.prototype.Destroy = function () {
            H52D_Framework.HeroPosition.Instance.Puthero = [];
            this.offAll();
        };
        return KickingResultView;
    }(ui.action.kicking.KickingResultViewUI));
    H52D_Framework.KickingResultView = KickingResultView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=KickingResultView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：踢馆场景
     * @author：zhangyusong
     */
    H52D_Framework.AddViewResource("KickingSceneView", [
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS }
    ]);
    H52D_Framework.FightType = "Pvp";
    var KickingSceneView = /** @class */ (function (_super) {
        __extends(KickingSceneView, _super);
        function KickingSceneView(buf) {
            var _this = _super.call(this) || this;
            _this.COUNTDOWN = "倒计时:xS";
            _this.vo = buf[1];
            _this.ViewInit();
            _this.EventInit();
            return _this;
        }
        KickingSceneView.prototype.ViewInit = function () {
            var datavo = new H52D_Framework.SceneVo(this.vo.sceneId);
            H52D_Framework.UIManager.Instance.CreateUI(datavo.strSceneFileName, [this.img_bg], Laya.Handler.create(this, this.SceneComplete));
            this.dps = new H52D_Framework.MainDpsView(H52D_Framework.FightType);
            this.dps.centerX = 0;
            this.dps.bottom = 258;
            this.addChild(this.dps);
            this.skill = new H52D_Framework.MainSkillView(H52D_Framework.FightType);
            this.skill.centerX = 0;
            this.skill.bottom = 59;
            this.addChild(this.skill);
            this.countdown = new H52D_Framework.Countdwon();
            this.countdown.centerX = 0;
            this.countdown.centerY = 0;
            this.fireCountdown = this.vo.maxTime;
            this.txt_countdown.text = this.COUNTDOWN.replace("x", String(this.fireCountdown));
        };
        KickingSceneView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_close.on(Laya.Event.CLICK, this, this.onCloseHander);
            H52D_Framework.Event.RegistEvent("KickingClose", Laya.Handler.create(this, this.PaneClose));
        };
        KickingSceneView.prototype.Destroy = function () {
            this.countdown.Destroy();
            this.dps.Destroy();
            this.skill.Destroy();
            H52D_Framework.Event.RemoveEvent("KickingClose", Laya.Handler.create(this, this.PaneClose));
            H52D_Framework.Event.DispatchEvent("KickingChooseUpdate");
        };
        KickingSceneView.prototype.onCloseHander = function () {
            H52D_Framework.UIManager.Instance.CreateUI("KickingPromptView", [H52D_Framework.ViewToppestRoot, this.PaneClose]);
        };
        KickingSceneView.prototype.PaneClose = function () {
            H52D_Framework.KickingManager.Instance.roomType = H52D_Framework.BaseDefine.ItemIdGold;
            H52D_Framework.BattlefieldManager.Instance.Destroy();
            H52D_Framework.Tick.ClearAll(this);
            H52D_Framework.UIManager.Instance.DestroyUI(this.name, [H52D_Framework.ViewToppestRoot]);
            H52D_Framework.BattleManager.Instance.OpenBattle();
        };
        KickingSceneView.prototype.SceneComplete = function (view) {
            H52D_Framework.KickingManager.Instance.SceneView = view;
            //将角色层赋值
            H52D_Framework.KickingManager.Instance.avatarRoot = view.getChildByName("avatarRoot");
            H52D_Framework.KickingManager.Instance.effectRoot = view.getChildByName("effectRoot");
            this.skill.mouseEnabled = false;
            H52D_Framework.KickingManager.Instance.effectRoot.addChild(this.countdown);
            this.countdown.time = 3;
            this.countdown.Start(Laya.Handler.create(this, this.Start));
            H52D_Framework.BattlefieldManager.Instance.LoadBattle();
        };
        KickingSceneView.prototype.Start = function () {
            this.skill.mouseEnabled = true;
            this.PlayFightCharacter();
            H52D_Framework.BattlefieldManager.Instance.OnFire();
            this.txt_countdown.text = this.COUNTDOWN.replace("x", String(this.fireCountdown));
            H52D_Framework.Tick.Loop(1000, this, this.FireCountdown);
            H52D_Framework.BattleManager.Instance.StopBattle();
        };
        KickingSceneView.prototype.FireCountdown = function () {
            if (--this.fireCountdown > 0) {
                this.txt_countdown.text = this.COUNTDOWN.replace("x", String(this.fireCountdown));
                if (H52D_Framework.BattlefieldManager.Instance.end) {
                    H52D_Framework.Tick.Clear(this, this.FireCountdown);
                    H52D_Framework.BattleManager.Instance.OpenBattle();
                }
            }
            else {
                this.txt_countdown.text = this.COUNTDOWN.replace("x", String(this.fireCountdown));
                H52D_Framework.Tick.Clear(this, this.FireCountdown);
                H52D_Framework.BattlefieldManager.Instance.Destroy();
                H52D_Framework.BattleManager.Instance.OpenBattle();
            }
        };
        //开始战斗文字
        KickingSceneView.prototype.PlayFightCharacter = function () {
            var _this = this;
            this.play.visible = true;
            this.play.scaleX = 1;
            this.play.scaleY = 1.2;
            this.play.alpha = 1.2;
            var t = Laya.Tween.to(this.play, { scaleX: 1, scaleY: 1, alpha: 0 }, 400, Laya.Ease.linearInOut, Laya.Handler.create(this, function () {
                Laya.Tween.clear(t);
                _this.play.visible = false;
            }));
        };
        return KickingSceneView;
    }(ui.action.kicking.KickingSceneViewUI));
    H52D_Framework.KickingSceneView = KickingSceneView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=KickingSceneView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("KickingWarView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_scene01.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_head.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS }
    ]);
    var KickingWarView = /** @class */ (function (_super) {
        __extends(KickingWarView, _super);
        function KickingWarView() {
            var _this = _super.call(this) || this;
            /**选择的上阵位置 */
            _this._HasHeroList = [];
            //private heroView: ListHeroView;
            _this._Lveffect = {};
            _this.bool = true;
            _this._heroAvatarMap = {};
            /** 拖拽物 */
            _this.nDragHeroID = null;
            /** 记录拖拽物坐标 */
            _this.tDragPos = [0, 0];
            /** 记录之前的位置颜色 */
            _this.sFlagColorSkin = [];
            _this._heroPathFlagMap = {};
            _this.old_heroid = 0;
            _this._bool = false;
            _this.BackGround.skin = "res/ui/ui_noPack/img-daguanchangjing-huantixiangfeng.png";
            _this._heroAvatarMap = {};
            _this._heroPathFlagMap = {};
            _this.nDragHeroID = null;
            _this.sFlagColorSkin = [];
            _this.dragHeroIcon.visible = false;
            H52D_Framework.KickingManager.Instance.InitPosInfo();
            _this.on(Laya.Event.REMOVED, _this, _this.OnDestroy);
            H52D_Framework.Event.RegistEvent('OnMouseUp', Laya.Handler.create(_this, _this.MouseUp));
            if (H52D_Framework.GetTabLength(H52D_Framework.KickingManager.Instance.Kickingwar) == 0) {
                H52D_Framework.KickingManager.Instance.Kickingwar = H52D_Framework.HeroPosition.Instance.PositionWar;
            }
            // 缓存已有英雄列表
            for (var nHeroID in H52D_Framework.HeroManager.Instance.Herolist) {
                _this._HasHeroList.push(nHeroID);
            }
            _this.Btn_save.on(Laya.Event.CLICK, _this, _this.SaveBtnClick);
            for (var pos = 0; pos <= 8; pos++) {
                _this["dragpos" + pos].on(Laya.Event.MOUSE_DOWN, _this, _this.CurMouseDown, [pos]);
            }
            _this.UpdatePosView();
            _this.UpateHeroLsit();
            _this.INfo();
            _this.bgbox.on(Laya.Event.MOUSE_MOVE, _this, _this.MouseMove);
            _this.btn_close.on(Laya.Event.CLICK, _this, _this.Btn_Close);
            return _this;
        }
        KickingWarView.prototype.OnCloseHander = function () {
            if (!this.IsQuit())
                return;
            H52D_Framework.UIManager.Instance.DestroyUI(this.name, [H52D_Framework.ViewToppestRoot]);
        };
        KickingWarView.prototype.INfo = function () {
            this.tixing.text = H52D_Framework.StringInfoConfig[7011].s;
        };
        KickingWarView.prototype.OnDestroy = function () {
            this.MouseUp();
            this.offAll();
            for (var pos in this._heroAvatarMap) {
                var mod = this._heroAvatarMap[pos];
                if (mod != null) {
                    mod.Destroy();
                }
            }
            this._heroAvatarMap = {};
            this._heroPathFlagMap = {};
            H52D_Framework.Event.RemoveEvent('OnMouseUp', Laya.Handler.create(this, this.MouseUp));
        };
        /** 拾取英雄 */
        KickingWarView.prototype.DragHero = function (nHeroID, bShowDrag) {
            var _this = this;
            this.dragHeroIcon.visible = true;
            this.nDragHeroID = nHeroID;
            this.old_heroid = nHeroID;
            var hero = H52D_Framework.HeroManager.Instance.GetHero(nHeroID);
            if (this._heroAvatarMap[-1]) {
                this._heroAvatarMap[-1].Destroy();
                this._heroAvatarMap[-1] = null;
                delete this._heroAvatarMap[-1];
            }
            this._heroAvatarMap[-1] = new H52D_Framework.Avatar(this.dragHeroMod);
            var info_cfg = hero.heroCfg;
            var path = info_cfg.strFacadeModel;
            var tPosInfo = this.GetDirAndScale(nHeroID); //获取方向和坐标
            this._heroAvatarMap[-1].Load(path, tPosInfo[0], tPosInfo[1] * 2, 0, 0, Laya.Handler.create(this, function () {
                _this._heroAvatarMap[-1].visible = true;
                _this._heroAvatarMap[-1].Play(H52D_Framework.AnimationName.idle, true);
                _this._heroAvatarMap[-1].SetOrder(10);
            }));
            if (!H52D_Framework.KickingManager.Instance.IsInWar(nHeroID)) {
                //let mod:Laya.View=this._heroAvatarMap[-1]
            }
            H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/ui_buzhen01.mp3");
            this.UpdatePosView(true, bShowDrag);
        };
        /** 列表按下事件 */
        KickingWarView.prototype.ListHeadDown = function (nHeroID, item, event) {
            H52D_Framework.Tick.Once(300, this, this.OneListHeadDown, [nHeroID, this.List_head._childs[1].value, item, event]);
        };
        /** 列表按下事件 */
        KickingWarView.prototype.OneListHeadDown = function (nHeroID, scrollBarY, item, event) {
            if (this.List_head._childs[1].value != scrollBarY) {
                return;
            }
            var bool = false;
            this.dragHeroIcon.x = this.List_head.x + item.x + 120;
            this.dragHeroIcon.y = this.List_head.y + item.y - this.List_head._childs[1].value + 120;
            this.List_head._childs[0];
            this.List_head.scrollBar.stopDrag();
            this.List_head.scrollBar.stopScroll();
            bool = H52D_Framework.KickingManager.Instance.IsInWar(nHeroID);
            this.DragHero(nHeroID, bool);
        };
        /** 按住阵容上的英雄 */
        KickingWarView.prototype.CurMouseDown = function (pos) {
            var tPositionWar = H52D_Framework.KickingManager.Instance.Kickingwar;
            var nCurHeroID = tPositionWar[pos];
            if (nCurHeroID == null) {
                return;
            }
            var dragpos = this["dragpos" + pos];
            this._opos = pos;
            this.dragHeroIcon.x = dragpos.x + dragpos.width / 2;
            this.dragHeroIcon.y = dragpos.y + dragpos.height - 15;
            this.DragHero(nCurHeroID, true);
        };
        /** 鼠标移动事件 */
        KickingWarView.prototype.MouseMove = function (event) {
            if (this.nDragHeroID == null) {
                return;
            }
            this.dragHeroIcon.x = event.currentTarget.mouseX;
            this.dragHeroIcon.y = event.currentTarget.mouseY;
            // 记录坐标
            this.tDragPos[0] = event.currentTarget.mouseX;
            this.tDragPos[1] = event.currentTarget.mouseY;
            var nNowPos = this.GetJionPos();
            if (nNowPos != this.sFlagColorSkin[0]) {
                if (this.sFlagColorSkin[0] != null) {
                    var dragpos = this["Pos_" + this.sFlagColorSkin[0]];
                    dragpos.skin = this.sFlagColorSkin[1];
                }
            }
            if (nNowPos != null) {
                if (nNowPos != this.sFlagColorSkin[0]) {
                    var dragpos = this["Pos_" + nNowPos];
                    var strSkin = dragpos.skin;
                    this.sFlagColorSkin = [nNowPos, dragpos.skin];
                    dragpos.skin = "ui_hero/img-yingxiong-tuozhaua-bg.png";
                }
            }
            else {
                this.sFlagColorSkin = [];
            }
        };
        /** 鼠标抬起事件 */
        KickingWarView.prototype.MouseUp = function () {
            this.dragHeroIcon.visible = false;
            this.sFlagColorSkin = [];
            H52D_Framework.Tick.Clear(this, this.OneListHeadDown);
            if (this.nDragHeroID == null) {
                this.UpdatePosView();
                return;
            }
            // 记录ID
            var nDragHeroID = this.nDragHeroID;
            this.nDragHeroID = null;
            var nNowPos = this.GetJionPos();
            this.tDragPos = [0, 0];
            if (nNowPos == null) {
                this.UpdatePosView();
                return;
            }
            var tPositionWar = H52D_Framework.KickingManager.Instance.Kickingwar;
            var nCurHeroID = tPositionWar[nNowPos];
            // 当前位置与拖拽的相同
            if (nCurHeroID == nDragHeroID) {
                this.UpdatePosView();
                return;
            }
            if (nCurHeroID != nDragHeroID) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/ui_buzhen02.mp3");
            }
            // 放置英雄
            this.PutHero(nNowPos, nDragHeroID);
            var bool = H52D_Framework.KickingManager.Instance.IsInSaveWar(nNowPos, nDragHeroID);
            var hero_id = H52D_Framework.KickingManager.Instance.Kickingwar[this._opos];
            if (bool) {
                if (hero_id) {
                    this.WarEffect(this._opos);
                }
            }
        };
        KickingWarView.prototype.PutHero = function (nNowPos, nDragHeroID) {
            // 放置英雄
            H52D_Framework.KickingManager.Instance.PutHero(nNowPos, nDragHeroID);
            H52D_Framework.KickingManager.Instance.bChange = true;
            this.UpdatePosView();
            this.UpateHeroLsit();
            this.WarEffect(nNowPos);
            var oldhero = this.old_heroid;
        };
        /** 获取当前在哪个位置上 */
        KickingWarView.prototype.GetJionPos = function () {
            if (this.tDragPos[0] == 0 && this.tDragPos[1] == 0) {
                return null;
            }
            var nNowX = this.tDragPos[0];
            var nNowY = this.tDragPos[1];
            for (var pos = 0; pos <= 8; pos++) {
                var dragpos = this["dragpos" + pos];
                if (dragpos.x < nNowX && dragpos.x + dragpos.width > nNowX && dragpos.y < nNowY && dragpos.y + dragpos.height > nNowY) {
                    return pos;
                }
            }
            return null;
        };
        /** 打开英雄详情面板 */
        KickingWarView.prototype.OpenView = function (nHeroID) {
            if (this.nDragHeroID != null) {
                return;
            }
            H52D_Framework.HeroManager.Instance.OpenView(nHeroID);
        };
        /** 刷新位置信息 */
        KickingWarView.prototype.UpdatePosView = function (bDrag, bShowDrag) {
            var _this = this;
            var tPositionWar = H52D_Framework.KickingManager.Instance.Kickingwar;
            var _loop_1 = function (pos) {
                var PosBtn = this_1["Pos_" + pos];
                var Mod = this_1["mod" + pos];
                if (bDrag) {
                    PosBtn.scale(1.3, 1.3);
                }
                else {
                    PosBtn.scale(1, 1);
                }
                var nHeroID = tPositionWar[pos];
                if ((bDrag && bShowDrag && nHeroID == this_1.nDragHeroID)) {
                    Mod.alpha = 0.5;
                }
                else {
                    Mod.alpha = 1;
                }
                if ((nHeroID == null)) {
                    if ((this_1._heroAvatarMap[pos] != null) && this_1._heroAvatarMap[pos].loaded) {
                        this_1._heroAvatarMap[pos].visible = false;
                    }
                    this_1._heroPathFlagMap[pos] = "";
                    PosBtn.skin = "ui_hero/img-yingxiong-renwuyuan-bg.png";
                }
                else {
                    if (pos == 4) {
                        PosBtn.skin = "ui_hero/img-yingxiong-duizhang-bg.png";
                    }
                    else {
                        PosBtn.skin = "ui_hero/img-yingxiong-xuanzhong-bg.png";
                    }
                    var hero = H52D_Framework.HeroManager.Instance.GetHero(nHeroID);
                    var info_cfg = hero.heroCfg;
                    var path = info_cfg.strFacadeModel;
                    if (this_1._heroPathFlagMap[pos] != path) {
                        if (this_1._heroAvatarMap[pos]) {
                            this_1._heroAvatarMap[pos].Destroy();
                            this_1._heroAvatarMap[pos] = null;
                            delete this_1._heroAvatarMap[pos];
                        }
                        this_1._heroPathFlagMap[pos] = path;
                        this_1._heroAvatarMap[pos] = new H52D_Framework.Avatar(Mod);
                        var tPosInfo = this_1.GetDirAndScale(nHeroID);
                        this_1._heroAvatarMap[pos].Load(path, tPosInfo[0], tPosInfo[1], 0, 0, Laya.Handler.create(this_1, function () {
                            _this._heroAvatarMap[pos].visible = true;
                            _this._heroAvatarMap[pos].Play(H52D_Framework.AnimationName.idle, true);
                            _this._heroAvatarMap[pos].SetOrder(pos);
                        }));
                    }
                }
            };
            var this_1 = this;
            for (var pos = 0; pos <= 8; pos++) {
                _loop_1(pos);
            }
            this.SetMainskillIcon(tPositionWar[4]);
        };
        /** 获取方向和坐标 */
        KickingWarView.prototype.GetDirAndScale = function (nHeroID) {
            var dir = 1;
            var scale = H52D_Framework.HeroConfig[nHeroID].modelScale;
            return [dir, scale];
        };
        KickingWarView.prototype.WarSort = function () {
            function tsort(a, b) {
                var a_q = H52D_Framework.HeroConfig[a].quality;
                var b_q = H52D_Framework.HeroConfig[b].quality;
                if (a_q == b_q) {
                    return a > b ? 1 : -1;
                }
                return a_q > b_q ? -1 : 1;
            }
            this._HasHeroList.sort(tsort);
        };
        KickingWarView.prototype.UpateHeroLsit = function () {
            this.WarSort();
            this.List_head.array = this._HasHeroList;
            this.List_head.vScrollBarSkin = "";
            this.List_head.renderHandler = new Laya.Handler(this, this.SetHandler);
        };
        KickingWarView.prototype.SetHandler = function (item, index) {
            var nHeroID = this._HasHeroList[index];
            var tcfg = H52D_Framework.HeroConfig[nHeroID];
            var nx = tcfg.heroRatio;
            var colorID = tcfg.quality;
            var ntype = tcfg.type;
            var hero = H52D_Framework.HeroManager.Instance.GetHero(nHeroID);
            var bg_color = item.getChildByName("background");
            var btn_01 = item.getChildByName("Btn_skill");
            var bg_k = btn_01.getChildByName("background_k");
            var duihao = btn_01.getChildByName("hero_zhiwei");
            var heroinfo = btn_01.getChildByName("Btn_Info");
            var head = btn_01.getChildByName("HeadIcon");
            var hp = btn_01.getChildByName("Hp");
            var hurt = btn_01.getChildByName("Hurt");
            var hero_type = btn_01.getChildByName("Hero_Type");
            ;
            var gowar = btn_01.getChildByName("IsGoWar");
            var type_bg = btn_01.getChildByName("Hero_Type_bg");
            var lv = hero.Level;
            duihao.skin = "";
            var herolist = H52D_Framework.KickingManager.Instance.HeroWar;
            var a = H52D_Framework.KickingManager.Instance.IsInWar(nHeroID);
            if (a) {
                duihao.skin = H52D_Framework.BaseDefine.HeroWar_pos[2];
                if (herolist[nHeroID] == 4) {
                    duihao.skin = H52D_Framework.BaseDefine.HeroWar_pos[1];
                }
            }
            bg_color.skin = H52D_Framework.BaseDefine.QualityList[colorID];
            bg_k.skin = H52D_Framework.BaseDefine.HeroQualityList[colorID];
            hero_type.skin = H52D_Framework.BaseDefine.HeroTypeIcon[ntype];
            var bool = H52D_Framework.KickingManager.Instance.IsInWar(nHeroID);
            gowar.visible = bool;
            type_bg.skin = "ui_hero/icon-renwu-leixing-bg.png";
            var star = hero.Star = 0 ? 1 : (hero.Star);
            var base_f;
            if (hero.Star == 0) {
                star = 1;
                var base = H52D_Framework.HeroAdvanceConfig[nHeroID][star].Attr;
                base_f = 0;
                var basenum = nx * (base_f + 1);
                hp.text = hero.attr.GetAttributeValue(1);
                hurt.text = hero.attr.GetAttributeValue(2);
            }
            else {
                var base = H52D_Framework.HeroAdvanceConfig[nHeroID][star].Attr;
                base_f = base[1][2] / 10000;
                var basenum = nx * (base_f + 1);
                hp.text = hero.attr.GetAttributeValue(1);
                hurt.text = hero.attr.GetAttributeValue(2);
            }
            btn_01.on(Laya.Event.MOUSE_UP, this, this.OpenView, [nHeroID]);
            btn_01.on(Laya.Event.MOUSE_DOWN, this, this.ListHeadDown, [nHeroID, item]);
            head.skin = hero.HeadIcon;
        };
        /** 点击保存按钮 */
        KickingWarView.prototype.SaveBtnClick = function () {
            var heroposInfo = H52D_Framework.KickingManager.Instance.Kickingwar;
            var bool = H52D_Framework.KickingManager.Instance.bChange;
            if (heroposInfo[4] == null) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("必须有队长才能保存！！");
                return;
            }
            if (!bool) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("阵容未发生改变！！");
                return;
            }
            heroposInfo = H52D_Framework.KickingManager.Instance.getwar();
            if (!H52D_Framework.CacheManager.Instance.getDerailByType(CacheTypeEnum.common, CacheTypeCommon.pvpSaveCombat)) {
                H52D_Framework.CacheManager.Instance.setDerailByType(CacheTypeEnum.common, CacheTypeCommon.pvpSaveCombat, true);
            }
            H52D_Framework.KickingManager.Instance.KickingWarInfo(heroposInfo);
            H52D_Framework.KickingManager.Instance.bChange = false;
        };
        KickingWarView.prototype.IsQuit = function () {
            return true;
        };
        /**关闭按钮 弹出提示框 */
        KickingWarView.prototype.Btn_Close = function () {
            var _this = this;
            var heroposInfo = H52D_Framework.KickingManager.Instance.Kickingwar;
            var bool = H52D_Framework.KickingManager.Instance.bChange;
            if (heroposInfo[4] == null) {
                //弹出面板 保存失败 提示队长不能保存
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("必须有队长才能保存！！");
                return;
            }
            if (H52D_Framework.KickingManager.Instance.bChange) {
                var str = H52D_Framework.SysPromptConfig[10012].strPromptInfo;
                H52D_Framework.TipsLogic.Instance.OpenMessageBox(str, Laya.Handler.create(this, function () {
                    _this.SaveBtnClick();
                    H52D_Framework.UIManager.Instance.DestroyUI("KickingWarView", [H52D_Framework.ViewToppestRoot]);
                }), Laya.Handler.create(this, function () {
                    H52D_Framework.UIManager.Instance.DestroyUI("KickingWarView", [H52D_Framework.ViewToppestRoot]);
                }));
            }
            else {
                H52D_Framework.UIManager.Instance.DestroyUI("KickingWarView", [H52D_Framework.ViewToppestRoot]);
            }
        };
        /***播放特效 */
        KickingWarView.prototype.WarEffect = function (pos) {
            var _this = this;
            if (this._Lveffect[pos]) {
                this._Lveffect[pos].Destroy();
            }
            var PosBtn = this["Pos_" + pos];
            this._Lveffect[pos] = new H52D_Framework.Avatar(PosBtn);
            this._Lveffect[pos].Load("res/effect/effect_state_buzhen/effect_state_buzhen.sk", 1, 1, 60, 36, Laya.Handler.create(this, function () {
                _this._Lveffect[pos].Play("effect_state_buzhen", false, true, function () {
                    _this._Lveffect[pos].Destroy();
                });
            }));
        };
        /**设置队长技能图片 */
        KickingWarView.prototype.SetMainskillIcon = function (nHeroID) {
            if (nHeroID) {
                this.L.visible = true;
                this.main_skillName.visible = true;
                var skill_ID = H52D_Framework.HeroConfig[nHeroID].heroBigSkill;
                var skill_Info = H52D_Framework.ActiveSkillConfig[skill_ID];
                this.Skill_Icon.skin = "ui_icon/" + skill_Info.strIcon;
                this.Skill_Icon.on(Laya.Event.CLICK, this, this.OpenView, [nHeroID]);
            }
            else {
                this.L.visible = false;
                this.main_skillName.visible = false;
                this.Skill_Icon.skin = "";
            }
        };
        return KickingWarView;
    }(ui.action.kicking.KickingWarUI));
    H52D_Framework.KickingWarView = KickingWarView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=KickingWarView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：王者约战模型
     * @author：zhangyusong
     */
    var KickingVo = /** @class */ (function (_super) {
        __extends(KickingVo, _super);
        function KickingVo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return KickingVo;
    }(H52D_Framework.ActionVo));
    H52D_Framework.KickingVo = KickingVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=KickingVo.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：倒计时
     * @author：zhangyusong
     */
    var Countdwon = /** @class */ (function (_super) {
        __extends(Countdwon, _super);
        function Countdwon() {
            var _this = _super.call(this) || this;
            _this.visible = false;
            return _this;
        }
        Object.defineProperty(Countdwon.prototype, "time", {
            set: function (value) {
                this.readNumber = value % 10;
            },
            enumerable: true,
            configurable: true
        });
        Countdwon.prototype.Start = function (callBackHander) {
            this.callBackHander = callBackHander;
            this.TweenCountdown();
            H52D_Framework.Tick.Loop(1000, this, this.ReadyCountdown);
            this.visible = true;
        };
        Countdwon.prototype.Destroy = function () {
            H52D_Framework.Tick.Clear(this, this.ReadyCountdown);
            this.visible = false;
            this.destroy();
        };
        /**
         * 战斗准备倒计时
         * @constructor
         */
        Countdwon.prototype.ReadyCountdown = function () {
            if (--this.readNumber > 0) {
                this.TweenCountdown();
            }
            else {
                H52D_Framework.Tick.Clear(this, this.ReadyCountdown);
                this.Destroy();
                this.callBackHander.run();
            }
        };
        Countdwon.prototype.TweenCountdown = function () {
            this.model.index = this.readNumber;
            this.model.scaleX = 3.5;
            this.model.scaleY = 3.5;
            var t = Laya.Tween.to(this.model, { scaleX: 2, scaleY: 2 }, 400, Laya.Ease.linearInOut, Laya.Handler.create(this, function () {
                Laya.Tween.clear(t);
            }));
        };
        return Countdwon;
    }(ui.action.topic.CountdownViewUI));
    H52D_Framework.Countdwon = Countdwon;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Countdwon.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：话题先锋面板
     * @author：zhangyusong
     */
    var TopicView = /** @class */ (function (_super) {
        __extends(TopicView, _super);
        function TopicView(id) {
            var _this = _super.call(this) || this;
            // 出生点
            _this.BRITH_X = 360;
            _this.BRITH_Y = 480;
            _this.SKILL_CLICK = 100;
            _this.LOCAL_WIN = [112, 592, 352];
            _this.countdownTime = 3;
            _this._hurt = 0;
            _this.bgImg.skin = "res/ui/ui_noPack/img-daguanchangjing-huantixiangfeng.png";
            _this.id = id;
            _this.ViewInit();
            _this.EventInit();
            return _this;
        }
        TopicView.prototype.ViewInit = function () {
            this.actionVo = H52D_Framework.TopicManager.Instance.CurrVo;
            this.attack_name.text = this.actionVo.name;
            this.attack_point.text = this.actionVo.attackPoint;
            H52D_Framework.SetHtmlStyle(this.attack_instruction, 20, "#fef3ce", "left");
            this.attack_instruction.innerHTML = this.actionVo.attackInstruction;
            this.countdown = new H52D_Framework.Countdwon();
            this.countdown.centerX = 0;
            this.countdown.centerY = 0;
            this.fighting.addChild(this.countdown);
            this.pic_point_click.alpha = 0;
            this.pic_start_click.visible = false;
            this.pic_end_click.visible = false;
            this.icon_win.visible = false;
            this.btn_against.gray = false;
            this.btn_support.gray = false;
            this._showPointTime = 0;
            this.tx_reward.text = "";
            this.actionEffect = H52D_Framework.ActiveSkillConfig[this.SKILL_CLICK]["actionEffect"];
            this.contributeNumber = this.actionVo.contribution;
            this.AddMonster();
            //胜利方为空，说明正在游戏中
            if (this.actionVo.win == H52D_Framework.ViewPoint.empty) {
                //游戏未开启，游戏开始
                if (this.actionVo.stamp == 0) {
                    this.fightCountdownNumber = this.actionVo.countdown;
                    this.GameStart();
                }
                //游戏已开启，判断是否过时
                else {
                    var time = H52D_Framework.Time.serverSecodes - this.actionVo.stamp;
                    //未过时，游戏刷新
                    if (time < this.actionVo.countdown + 3) {
                        this.fightCountdownNumber = this.actionVo.countdown + 3 - time;
                        this.GameUpdate();
                    }
                    //已过时，游戏结束
                    else {
                        this.fightCountdownNumber = 0;
                        this.GameOver();
                    }
                }
            }
            //有胜利方，游戏结算
            else {
                this.GameBalance();
            }
        };
        TopicView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_close.on(Laya.Event.CLICK, this, this.ClosePanel);
            this.target.on(Laya.Event.MOUSE_DOWN, this, this.GameFight);
            H52D_Framework.Event.RegistEvent("TopicInit", Laya.Handler.create(this, this.ViewInit));
            H52D_Framework.Event.RegistEvent("Action_sett", Laya.Handler.create(this, this.GameOver));
        };
        TopicView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent("TopicInit", Laya.Handler.create(this, this.ViewInit));
            H52D_Framework.Event.RemoveEvent("Action_sett", Laya.Handler.create(this, this.GameOver));
            H52D_Framework.Tick.ClearAll(this);
        };
        TopicView.prototype.ClosePanel = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("TopicView", [H52D_Framework.ViewToppestRoot]);
        };
        /** 游戏开始 */
        TopicView.prototype.GameStart = function () {
            this.target.mouseEnabled = false;
            this.btn_against.mouseEnabled = true;
            this.btn_support.mouseEnabled = true;
            this.btn_support.on(Laya.Event.CLICK, this, this.ChooseViewPoint, [H52D_Framework.ViewPoint.support]);
            this.btn_against.on(Laya.Event.CLICK, this, this.ChooseViewPoint, [H52D_Framework.ViewPoint.against]);
        };
        /** 游戏刷新 */
        TopicView.prototype.GameUpdate = function () {
            this.viewpoint = this.actionVo.viewPoint;
            this.target.mouseEnabled = true;
            H52D_Framework.Tick.Loop(1000, this, this.GameCountdown);
            H52D_Framework.Tick.Loop(3000, this, this.GameShowPic);
        };
        /** 游戏结算 */
        TopicView.prototype.GameBalance = function () {
            H52D_Framework.Tick.ClearAll(this);
            this.GameOver();
            this.icon_win.visible = true;
            if (this.actionVo.viewPoint == this.actionVo.win) {
                this.win_txt.text = "胜利";
            }
            else {
                this.win_txt.text = this.actionVo.win == H52D_Framework.ViewPoint.draw ? "平局" : "失败";
            }
            var index = Number(this.actionVo.win) - 1;
            this.icon_win.x = this.LOCAL_WIN[index];
            this.btn_support.label = this.actionVo.supportNum + "\n支持";
            this.btn_against.label = this.actionVo.againstNum + "\n反对";
            if (this.actionVo.viewPoint == H52D_Framework.ViewPoint.support) {
                this.btn_against.gray = true;
            }
            else if (this.actionVo.viewPoint == H52D_Framework.ViewPoint.against) {
                this.btn_support.gray = true;
            }
        };
        Object.defineProperty(TopicView.prototype, "fightCountdownNumber", {
            get: function () {
                return this._fightCountdownNumber;
            },
            set: function (value) {
                this._fightCountdownNumber = value;
                this.txt_countdown.text = "倒计时x秒".replace("x", String(this._fightCountdownNumber));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TopicView.prototype, "contributeNumber", {
            get: function () {
                return this._contributeNumber;
            },
            set: function (value) {
                this._contributeNumber = value;
                this.attack_contribution.text = "贡献值:" +
                    (this._contributeNumber > 1000000 ? (this._contributeNumber / 10000 >> 0) + "W" : this._contributeNumber);
            },
            enumerable: true,
            configurable: true
        });
        TopicView.prototype.AddMonster = function () {
            var mid = this.actionVo.monsterId;
            this.target.removeChildAt(0);
            this.CreateMonster(mid, this.target);
        };
        /**
         * 选择观点：同意还是反对
         * @param point 观点
         */
        TopicView.prototype.ChooseViewPoint = function (point) {
            this.viewpoint = point;
            H52D_Framework.RemoteCall.Instance.Send("K_ReqTopicStarVote", point);
            H52D_Framework.Event.DispatchEvent("ActionCheck", [this.id]);
            this.countdown.time = this.countdownTime;
            this.countdown.Start(Laya.Handler.create(this, this.ReadyCountdown));
        };
        Object.defineProperty(TopicView.prototype, "viewpoint", {
            set: function (point) {
                if (!(this.actionVo.win == H52D_Framework.ViewPoint.empty)) {
                    return;
                }
                if (point == H52D_Framework.ViewPoint.support) { //支持
                    this.btn_support.label = "已支持";
                    this.btn_against.gray = true;
                }
                else if (point == H52D_Framework.ViewPoint.against) { //反对
                    this.btn_against.label = "已反对";
                    this.btn_support.gray = true;
                }
                this.btn_against.mouseEnabled = false;
                this.btn_support.mouseEnabled = false;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 战斗准备倒计时
         * @constructor
         */
        TopicView.prototype.ReadyCountdown = function () {
            var _this = this;
            if (this.monster != null) {
                this.target.mouseEnabled = true;
            }
            this.pic_start_click.visible = true;
            H52D_Framework.TweenList.to(this, this.pic_start_click, { "alpha": 0 }, 1500, function () {
                _this.pic_start_click.visible = false;
                _this.pic_start_click.alpha = 1;
            });
            H52D_Framework.Tick.Loop(1000, this, this.GameCountdown);
            H52D_Framework.Tick.Loop(3000, this, this.GameShowPic);
        };
        /**
         * 游戏倒计时
         * @constructor
         */
        TopicView.prototype.GameCountdown = function () {
            if (--this.fightCountdownNumber <= 0) {
                H52D_Framework.Tick.Clear(this, this.GameCountdown);
                H52D_Framework.Tick.Clear(this, this.GameShowPic);
                // this.GameOver();
                this.Elastic();
            }
        };
        /**
         * 游戏显示图标
         * @constructor
         */
        TopicView.prototype.GameShowPic = function () {
            var _this = this;
            var tween;
            tween = Laya.Tween.to(this.pic_point_click, { alpha: 1 }, 500, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                Laya.Tween.clear(tween);
                tween = Laya.Tween.to(_this.pic_point_click, { alpha: 0 }, 1200, Laya.Ease.linearIn, Laya.Handler.create(_this, function () {
                    Laya.Tween.clear(tween);
                }));
            }));
        };
        /**
         * 开始点击伤害
         */
        TopicView.prototype.GameFight = function () {
            this.TapSkill();
            var damage = H52D_Framework.MasterPlayer.Instance.player.damage;
            this.contributeNumber += damage;
            this.monster.OnHurt(damage, SkinEnum.SkinTap, false, SPECIAL_TYPE.ACTION, this.target);
            this._hurt = damage;
            H52D_Framework.RemoteCall.Instance.Send("K_ReqTopicVote", damage);
        };
        /** 游戏结束弹框 */
        TopicView.prototype.Elastic = function () {
            // let contribute:string = SysPromptConfig[30047].strPromptInfo.replace("%s",
            // this._contributeNumber > 1000000 ? (this._contributeNumber/10000>>0)+"W" : this._contributeNumber)
            // TipsLogic.Instance.OpenMessageBox(contribute,
            // Laya.Handler.create(this,this.GameOver),
            // Laya.Handler.create(this,this.GameOver));
            H52D_Framework.UIManager.Instance.CreateUI("AcitonSettView", [H52D_Framework.ViewTipRoot, this.contributeNumber]);
        };
        /**
         * 游戏结束
         * @constructor
         */
        TopicView.prototype.GameOver = function () {
            var min = this.actionVo.timeEnd.getMinutes();
            var endtime = this.actionVo.timeEnd.getHours() + "点" + (min < 10 ? "0" + min : min) + "分";
            this.tx_reward.text = H52D_Framework.GetInfoAttr.Instance.GetText(7116).replace("%s", endtime);
            this.viewpoint = this.actionVo.viewPoint;
            this.fightCountdownNumber = 0;
            this.pic_end_click.visible = true;
            this.target.mouseEnabled = false;
        };
        /**
         * 创建怪物
         * @param id 怪物ID
         **/
        TopicView.prototype.CreateMonster = function (id, viewRoot) {
            var vo = new H52D_Framework.MonsterVo(id);
            if (this.monster == null) {
                this.monster = new H52D_Framework.Monster(vo, viewRoot);
                var scale = vo.modelScale;
                var shadow = 3;
                this.monster.LoadMonster(AvatarDirection.right, scale, this.BRITH_X, this.BRITH_Y, shadow, vo.location);
            }
        };
        /**点击技能 */
        TopicView.prototype.TapSkill = function () {
            var _this = this;
            if (this.tapAvatar == null) {
                this.tapAvatar = new H52D_Framework.Avatar(this.target);
                this.tapAvatar.Load(this.actionEffect["3"], 1, this.actionEffect["5"], 0, 0, Laya.Handler.create(this, function () {
                    _this.PlayTapEffect();
                }));
            }
            else {
                this.PlayTapEffect();
            }
        };
        /** 点击特效 */
        TopicView.prototype.PlayTapEffect = function () {
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/tap_sound.mp3");
            }
            var x = Laya.MouseManager.instance.mouseX;
            var y = Laya.MouseManager.instance.mouseY;
            var point = this.target.globalToLocal(new Laya.Point(x, y));
            this.tapAvatar.PosX = point.x;
            this.tapAvatar.PosY = point.y;
            this.tapAvatar.Play(this.actionEffect["4"], false);
        };
        return TopicView;
    }(ui.action.topic.TopicViewUI));
    H52D_Framework.TopicView = TopicView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TopicView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class 活动数据模型
     * @author zhangyusong
     */
    var TopicVo = /** @class */ (function (_super) {
        __extends(TopicVo, _super);
        function TopicVo() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /** 支持时间戳 */
            _this.stamp = 0;
            return _this;
        }
        return TopicVo;
    }(H52D_Framework.ActionVo));
    H52D_Framework.TopicVo = TopicVo;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TopicVo.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**首冲商城UI*/
var H52D_Framework;
(function (H52D_Framework) {
    var ItemToolView = /** @class */ (function (_super) {
        __extends(ItemToolView, _super);
        function ItemToolView() {
            var _this = _super.call(this) || this;
            _this.on(Laya.Event.REMOVED, _this, _this.OnDestroy);
            H52D_Framework.Event.RegistEvent('PackRef', Laya.Handler.create(_this, _this.UpDateText)); //背包界面刷新
            _this.UpDateText();
            return _this;
        }
        //** 刷新UI */
        ItemToolView.prototype.UpDateText = function () {
            var sText = "";
            var list = H52D_Framework.BagManager.Instance.GetItemList();
            for (var id in list) {
                var item = list[id];
                sText += item.itemStrName + "(" + item.dwItemName + ")" + ":" + item.itemNumber + "\n";
            }
            this.tipstext.text = sText;
        };
        // 移除事件监听
        ItemToolView.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent('PackRef', Laya.Handler.create(this, this.UpDateText));
        };
        return ItemToolView;
    }(ui.main.ItemToolViewUI));
    H52D_Framework.ItemToolView = ItemToolView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ItemToolView.js.map
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * 功能开启条件
     */
    function OpenCondition(clickType, word) {
        if (word === void 0) { word = true; }
        var open = false;
        if (!H52D_Framework.OpenGradeConfig[clickType]) {
            return open = true;
        }
        var id = H52D_Framework.OpenGradeConfig[clickType].NamaId;
        if (H52D_Framework.OpenGradeConfig[clickType].Level == -1) {
            if (H52D_Framework.OpenGradeConfig[clickType].Checkpoint == -1) {
                if (H52D_Framework.OpenGradeConfig[clickType].OpenDay == -1) {
                    open = true;
                }
                else if (H52D_Framework.MasterPlayer.Instance.days > H52D_Framework.OpenGradeConfig[clickType].OpenDay) {
                    open = true;
                }
                else if (word) //开服天数不足
                 {
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips(H52D_Framework.OpenGradeConfig[clickType].OpenDay + "天开启" + H52D_Framework.StringInfoConfig[id].s);
                }
            }
            else if (H52D_Framework.MasterPlayer.Instance.player.CunstLevel >= H52D_Framework.OpenGradeConfig[clickType].Checkpoint) {
                open = true;
            }
            else if (word) //关卡不足
             {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(H52D_Framework.OpenGradeConfig[clickType].Checkpoint + "关开启" + H52D_Framework.StringInfoConfig[id].s);
            }
        }
        else if (H52D_Framework.MasterPlayer.Instance.player.Level >= H52D_Framework.OpenGradeConfig[clickType].Level) {
            open = true;
        }
        else if (word) //等级不足
         {
            var str = H52D_Framework.Format(H52D_Framework.SysPromptConfig[10007].strPromptInfo, H52D_Framework.OpenGradeConfig[clickType].Level, H52D_Framework.StringInfoConfig[id].s);
            H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
        }
        return open;
    }
    H52D_Framework.OpenCondition = OpenCondition;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ViewPanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ListActionView", [
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS }
    ]);
    /**
     * @class 活动主界面
     * @param zhangyusong
     */
    var ListActionView = /** @class */ (function (_super) {
        __extends(ListActionView, _super);
        function ListActionView(buf) {
            var _this = _super.call(this) || this;
            _this._MainView = buf[1];
            _this.ViewInit();
            _this.EventInit();
            _this.ChangeListHigth();
            return _this;
        }
        ListActionView.prototype.ViewInit = function () {
            var _this = this;
            this.currVo = {};
            this.nextVo = {};
            this.voend = {};
            this.vostart = {};
            this.modelList = [];
            this.voList = H52D_Framework.MainActionLogic.Instance.list;
            for (var type in this.voList) {
                this.CheckOverdueAction(type);
                this.voend[type] = true;
                this.vostart[type] = true;
            }
            this.actionList.vScrollBarSkin = "";
            this.FrushActionList();
            this.actionList.renderHandler = new Laya.Handler(this, function (item, index) {
                if (_this.modelList.length >= _this.currList.length) {
                    for (var i in _this.modelList) {
                        _this.modelList[i].Destroy();
                    }
                    _this.modelList = [];
                }
                var model = new H52D_Framework.ActionModel(item);
                model.vo = _this.currList[index];
                model.Init();
                _this.modelList.push(model);
            });
        };
        ListActionView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            H52D_Framework.Event.RegistEvent("ActionListUpDate", Laya.Handler.create(this, this.ActionListUpDate));
            H52D_Framework.Event.RegistEvent("ActionCheck", Laya.Handler.create(this, this.ActionCheck));
            H52D_Framework.Event.RegistEvent('changelisthigth', Laya.Handler.create(this, this.ChangeListHigth));
            H52D_Framework.Event.RegistEvent("ZeroRefresh", Laya.Handler.create(this, this.ZeroRefresh));
            H52D_Framework.Tick.Loop(1000, this, this.FrameAction);
        };
        ListActionView.prototype.ChangeListHigth = function () {
            var _this = this;
            var bool = Boolean(this._MainView.halfPanel);
            if (bool) {
                H52D_Framework.OneTimer(300, Laya.Handler.create(this, function () {
                    _this.actionList.height = 290 * G_StageHeightScale;
                }), "ChangeListHigthShop");
            }
            else {
                this.actionList.height = 1098 * G_StageHeightScale;
            }
        };
        /** 每秒检测任务是否切换 */
        ListActionView.prototype.FrameAction = function () {
            this.modelList.forEach(function (model) {
                model.FrameAction();
            });
            for (var type in this.currVo) {
                if (!this.currVo[type]) {
                    break;
                }
                //活动结束时间
                if (this.voend[type] && this.currVo[type].timeEnd < H52D_Framework.Time.serverTime) {
                    this.voend[type] = false;
                    this.vostart[type] = true;
                    this.ActionListUpDate(this.currVo[type].id);
                }
                //活动开始时间
                else if (this.vostart[type] && !!this.nextVo[type] && this.nextVo[type].timeStart < H52D_Framework.Time.serverTime) {
                    this.vostart[type] = false;
                    this.voend[type] = true;
                    this.CheckOverdueAction(type);
                    this.FrushActionList();
                }
            }
        };
        /** 零点刷新 */
        ListActionView.prototype.ZeroRefresh = function () {
            H52D_Framework.MainActionLogic.Instance.FrushTime();
            this.FrushActionList();
        };
        /** 显示列表刷新 */
        ListActionView.prototype.FrushActionList = function () {
            this.currList = new Array();
            for (var type in this.currVo) {
                this.currList.push(this.currVo[type]);
            }
            //新开服，没活动
            if (this.currList.length == 0) {
                for (var type in this.nextVo) {
                    this.currVo[type] = this.nextVo[type];
                    this.currList.push(this.currVo[type]);
                }
            }
            this.actionList.array = this.currList;
        };
        /**
         * 检查特定类型活动列表
         * 当前时间在活动列表空白期
         * 查找上一个活动赋给当前列表
         * 记录下一个活动
         */
        ListActionView.prototype.CheckOverdueAction = function (type) {
            var into = false;
            var befor = false;
            for (var i = 0; i < this.voList[type].length; i++) {
                var listVo = this.voList[type][i];
                //现在时刻在时间范围内，设为显示活动
                if (!into && H52D_Framework.MainActionLogic.Instance.Period(listVo)) {
                    this.currVo[type] = listVo;
                    into = befor = true;
                }
                //若无范围内活动，将现在时刻之前的活动最近的一个设为显示活动
                if (!into) {
                    if (listVo.timeEnd < H52D_Framework.Time.serverTime) {
                        if (this.currVo[type] == null) {
                            this.currVo[type] = listVo;
                        }
                        //列表中vo的结束时间比当前vo的结束时间更接近当前时刻，则替换
                        if (listVo.timeEnd.getTime() > this.currVo[type].timeEnd.getTime()) {
                            this.currVo[type] = listVo;
                        }
                        befor = true;
                    }
                }
                //若无范围前活动，将现在时刻之后的活动最近的一个，设为显示活动
                if (!befor) {
                    if (listVo.timeStart > H52D_Framework.Time.serverTime) {
                        if (this.currVo[type] == null) {
                            this.currVo[type] = listVo;
                        }
                        //列表vo的开始时间比当前vo的开始时间更接近当前时刻，则替换
                        if (listVo.timeStart.getTime() < this.currVo[type].timeStart.getTime()) {
                            this.currVo[type] = listVo;
                        }
                    }
                }
                //寻找下一个活动
                if (listVo.timeStart > H52D_Framework.Time.serverTime) {
                    if (this.nextVo[type] == null) {
                        this.nextVo[type] = listVo;
                    }
                    //列表vo的开始时间比当前vo的开始时间更接近当前时刻，则替换
                    if (listVo.timeStart.getTime() < this.nextVo[type].timeStart.getTime()) {
                        this.nextVo[type] = listVo;
                    }
                }
            }
        };
        ListActionView.prototype.ActionListUpDate = function (activityID) {
            for (var key in this.modelList) {
                var model = this.modelList[key];
                if (model.vo.id == activityID) {
                    model.UpDate();
                }
            }
        };
        /**
         * 设置按钮字为查看
         * @param data
         **/
        ListActionView.prototype.ActionCheck = function (data) {
            this.modelList.forEach(function (model) {
                if (data && model.vo.id == data[1]) {
                    model.BtnWord(2);
                    return;
                }
            });
        };
        /** 移除事件监听 */
        ListActionView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent("ZeroRefresh", Laya.Handler.create(this, this.ZeroRefresh));
            H52D_Framework.Event.RemoveEvent("ActionListUpDate", Laya.Handler.create(this, this.ActionListUpDate));
            H52D_Framework.Event.RemoveEvent("ActionCheck", Laya.Handler.create(this, this.ActionCheck));
            H52D_Framework.Event.RemoveEvent("changelisthigth", Laya.Handler.create(this, this.ChangeListHigth));
            H52D_Framework.Tick.ClearAll(this);
        };
        return ListActionView;
    }(ui.main.list.ListActionViewUI));
    H52D_Framework.ListActionView = ListActionView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ListActionView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * 时空法器
 */
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ListEquipView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_equip.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
    ]);
    var ListEquipView = /** @class */ (function (_super) {
        __extends(ListEquipView, _super);
        function ListEquipView(buf) {
            var _this = _super.call(this) || this;
            _this.Equiplist = [];
            _this._mainView = buf[1];
            _this.AddEvent();
            _this.InitView();
            return _this;
        }
        ListEquipView.prototype.InitView = function () {
            this.E_list.vScrollBarSkin = "";
            this.red_start();
            this.Btn_click(ListEquipView.Idx);
            this.ChangeListHigth();
            this.Put_Equip();
        };
        /**添加事件 */
        ListEquipView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_1.on(Laya.Event.CLICK, this, this.Btn_click, [1]);
            this.btn_2.on(Laya.Event.CLICK, this, this.Btn_click, [2]);
            this.btn_3.on(Laya.Event.CLICK, this, this.Btn_click, [3]);
            this.btn_4.on(Laya.Event.CLICK, this, this.Btn_click, [4]);
            this.btn_5.on(Laya.Event.CLICK, this, this.Btn_click, [5]);
            this.E_make.on(Laya.Event.CLICK, this, this.OpenView, ["MakeEquipView"]);
            H52D_Framework.Event.RegistEvent("changelisthigth", Laya.Handler.create(this, this.ChangeListHigth));
            H52D_Framework.Event.RegistEvent("Puton", Laya.Handler.create(this, this.Btn_puton));
            H52D_Framework.Event.RegistEvent("updatelist_equip", Laya.Handler.create(this, this.Btn_Resh));
            H52D_Framework.Event.RegistEvent("redshow", Laya.Handler.create(this, this.RedShow)); //
            H52D_Framework.Event.RegistEvent("DeleShow", Laya.Handler.create(this, this.DeleShow));
        };
        ListEquipView.prototype.SortE = function (E_id, bool) {
            function sort_E(left, right) {
                var left_info = H52D_Framework.EquipManager.Instance.GetEquipByInstId(left.instId);
                var right_Info = H52D_Framework.EquipManager.Instance.GetEquipByInstId(right.instId);
                if (left_info.bNew != right_Info.bNew) {
                    return left_info.bNew ? -1 : 1;
                }
                if (left_info.equipColor == right_Info.equipColor) {
                    if (left_info.equipLevel == right_Info.equipLevel) {
                        return left.instId > right.instId ? -1 : 1;
                    }
                    return left_info.equipLevel > right_Info.equipLevel ? -1 : 1;
                }
                else {
                    return left_info.equipColor > right_Info.equipColor ? -1 : 1;
                }
            }
            if (bool) {
                E_id.sort(sort_E);
            }
        };
        ListEquipView.prototype.EquipMax_num = function () {
            var my_num = H52D_Framework.EquipManager.Instance.GetEquipNum();
            var number = H52D_Framework.GameParamConfig.EquipMaxNum;
            this.E_mynum.text = my_num + "/" + H52D_Framework.GameParamConfig.EquipMaxNum;
        };
        ListEquipView.prototype.Resh_num = function () {
            var my_num = H52D_Framework.EquipManager.Instance.GetEquipNum();
            if (H52D_Framework.EquipManager.Instance.IsOverflow) {
                var str = H52D_Framework.SysPromptConfig[30030].strPromptInfo;
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
            }
        };
        ListEquipView.prototype.ChangeListHigth = function () {
            var _this = this;
            var bool = Boolean(this._mainView.halfPanel);
            if (bool) {
                H52D_Framework.OneTimer(300, Laya.Handler.create(this, function () {
                    if (_this.destroyed)
                        return;
                    _this.E_list.height = 175 * G_StageHeightScale;
                }), "OneTimerChangeListHigth");
            }
            else {
                this.E_list.height = 980 * G_StageHeightScale;
            }
        };
        ListEquipView.prototype.Equip_List = function (index, bool) {
            this.EquipMax_num();
            var E_id = H52D_Framework.EquipManager.Instance.GetEquipByType(index);
            this.Equiplist = E_id.array;
            this.SortE(this.Equiplist, bool);
            this.E_list.array = this.Equiplist;
            this["red_" + ListEquipView.Idx].visible = false;
            this.E_list.renderHandler = new Laya.Handler(this, this.E_Handler);
        };
        ListEquipView.prototype.E_Handler = function (item, index) {
            var nIdx = this.E_list.array[index].instId;
            var e_Info = H52D_Framework.EquipManager.Instance.GetEquipByInstId(nIdx);
            var e_info_base = e_Info.baseAttribute; //
            var e_icon = item.getChildByName("e_icon");
            var bg = item.getChildByName("bg");
            var pinzhi = item.getChildByName("E_pinzhi");
            var e_name = item.getChildByName("e_name");
            var e_lv = item.getChildByName("e_lv");
            var e_base = item.getChildByName("e_base");
            var btn = item.getChildByName("btn_use");
            var type_icon = btn.getChildByName("type_icon");
            var bnew = item.getChildByName("red");
            var used = item.getChildByName("used");
            var use_id = H52D_Framework.EquipManager.Instance.GetCurrentEquipByType(ListEquipView.Idx);
            if (use_id == nIdx) {
                btn.visible = false;
                used.visible = true;
            }
            else {
                btn.visible = true;
                used.visible = false;
            }
            bnew.visible = e_Info.bNew;
            if (e_Info.bNew) {
                this["red_" + ListEquipView.Idx].visible = e_Info.bNew;
            }
            e_name.color = H52D_Framework.BaseDefine.EquipQualityColor[e_Info.equipColor];
            e_name.text = e_Info.equipName;
            e_icon.skin = "ui_icon/" + e_Info.equipIcon;
            H52D_Framework.SetHtmlStyle(e_lv, 18, "#c0eb9f", "left");
            e_lv.innerHTML = "LV:" + H52D_Framework.GetHtmlStrByColor(e_Info.equipLevel, "#ffff79");
            pinzhi.skin = H52D_Framework.BaseDefine.EquipBgColor[e_Info.equipColor];
            var base_ID = e_info_base[1][1];
            var base_value = e_info_base[1][2];
            var base_tcfg = H52D_Framework.QualityValue[base_ID];
            e_base.text = H52D_Framework.StringInfoConfig[base_tcfg.dwName].s + base_value;
            if (base_tcfg.isper == 1) {
                var num = Math.floor(base_value / 100);
                e_base.text = H52D_Framework.StringInfoConfig[base_tcfg.dwName].s + num + "%";
            }
            bg.on(Laya.Event.CLICK, this, this.OpenView, ["EquipTips", nIdx]);
            btn.on(Laya.Event.CLICK, this, this.Btn_use, [nIdx, btn]);
        };
        ListEquipView.prototype.Btn_click = function (index) {
            ListEquipView.Idx = index;
            this.Equip_List(index, true);
            this.TitileShow(index);
        };
        ListEquipView.prototype.OpenView = function (name, id) {
            H52D_Framework.UIManager.Instance.CreateUI(name, [H52D_Framework.ViewUpRoot, id]);
        };
        ListEquipView.prototype.Btn_use = function (id, btn) {
            this._btn = btn;
            H52D_Framework.EquipManager.Instance.K_ReqUseEquip(id);
        };
        ListEquipView.prototype.Btn_puton = function (nIdx) {
            var e_Info = H52D_Framework.EquipManager.Instance.GetEquipByInstId(nIdx);
            this["E_" + [ListEquipView.Idx]].skin = "ui_icon/" + e_Info.equipIcon;
            e_Info.bNew = false;
            H52D_Framework.EquipManager.Instance.K_ReqLookEquip(nIdx);
            this.Equip_List(ListEquipView.Idx, false);
            this["icon" + [ListEquipView.Idx]].visible = false;
            if (H52D_Framework.UIManager.Instance.IsHave("EquipTips", H52D_Framework.ViewUpRoot)) {
                H52D_Framework.UIManager.Instance.DestroyUI("EquipTips", [H52D_Framework.ViewUpRoot]);
            }
            this.Equip_List(ListEquipView.Idx, false);
        };
        ListEquipView.prototype.TitileShow = function (index) {
            switch (index) {
                case 1:
                    this.o1.visible = true;
                    this.o2.visible = false;
                    this.o3.visible = false;
                    this.o4.visible = false;
                    this.o5.visible = false;
                    this.name1.color = "#d3c1aa";
                    this.name2.color = "#89848a";
                    this.name3.color = "#89848a";
                    this.name4.color = "#89848a";
                    this.name5.color = "#89848a";
                    break;
                case 2:
                    this.o1.visible = false;
                    this.o2.visible = true;
                    this.o3.visible = false;
                    this.o4.visible = false;
                    this.o5.visible = false;
                    this.name1.color = "#89848a";
                    this.name2.color = "#d3c1aa";
                    this.name3.color = "#89848a";
                    this.name4.color = "#89848a";
                    this.name5.color = "#89848a";
                    break;
                case 3:
                    this.o1.visible = false;
                    this.o2.visible = false;
                    this.o3.visible = true;
                    this.o4.visible = false;
                    this.o5.visible = false;
                    this.name1.color = "#89848a";
                    this.name2.color = "#89848a";
                    this.name3.color = "#d3c1aa";
                    this.name4.color = "#89848a";
                    this.name5.color = "#89848a";
                    break;
                case 4:
                    this.o1.visible = false;
                    this.o2.visible = false;
                    this.o3.visible = false;
                    this.o4.visible = true;
                    this.o5.visible = false;
                    this.name1.color = "#89848a";
                    this.name2.color = "#89848a";
                    this.name3.color = "#89848a";
                    this.name4.color = "#d3c1aa";
                    this.name5.color = "#89848a";
                    break;
                case 5:
                    this.o1.visible = false;
                    this.o2.visible = false;
                    this.o3.visible = false;
                    this.o4.visible = false;
                    this.o5.visible = true;
                    this.name1.color = "#89848a";
                    this.name2.color = "#89848a";
                    this.name3.color = "#89848a";
                    this.name4.color = "#89848a";
                    this.name5.color = "#d3c1aa";
                    break;
            }
        };
        ListEquipView.prototype.Put_Equip = function () {
            for (var type = 1; type <= 5; type++) {
                var E_id = H52D_Framework.EquipManager.Instance.GetCurrentEquipByType(type);
                var E_Info = H52D_Framework.EquipManager.Instance.GetEquipByInstId(E_id);
                if (!E_Info) {
                    continue;
                }
                this["E_" + type].skin = "ui_icon/" + E_Info.equipIcon;
                this["icon" + type].visible = false;
            }
        };
        ListEquipView.prototype.Btn_Resh = function (id) {
            this.Equip_List(ListEquipView.Idx, true);
            var e_Info = H52D_Framework.EquipConfig[id];
            e_Info.bNew = true;
            var type = e_Info.equipType;
            this["red_" + type].visible = e_Info.bNew;
            this.Resh_num();
        };
        /**增加装备 */
        ListEquipView.prototype.RedShow = function () {
            if (this["red_" + ListEquipView.Idx].visible) {
                this.Equip_List(ListEquipView.Idx, false);
            }
        };
        /**删除装备 */
        ListEquipView.prototype.DeleShow = function () {
            this.Equip_List(ListEquipView.Idx, true);
        };
        ListEquipView.prototype.red_start = function () {
            for (var type = 1; type <= 5; type++) {
                var all_equip = H52D_Framework.EquipManager.Instance.GetEquipByType(type);
                for (var key in all_equip.list) {
                    var e_info = all_equip.list[key];
                    if (e_info.bNew) {
                        this["red_" + type].visible = e_info.bNew;
                    }
                }
            }
        };
        // 移除事件监听
        ListEquipView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent("changelisthigth", Laya.Handler.create(this, this.ChangeListHigth));
            H52D_Framework.Event.RemoveEvent("Puton", Laya.Handler.create(this, this.Btn_puton));
            H52D_Framework.Event.RemoveEvent("updatelist_equip", Laya.Handler.create(this, this.Btn_Resh));
            H52D_Framework.Event.RemoveEvent("redshow", Laya.Handler.create(this, this.RedShow));
            H52D_Framework.Event.RemoveEvent("DeleShow", Laya.Handler.create(this, this.DeleShow));
        };
        ListEquipView.Idx = 1;
        return ListEquipView;
    }(ui.main.list.ListEquipViewUI));
    H52D_Framework.ListEquipView = ListEquipView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ListEquipView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ListHeroView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
    ]);
    var SelectType;
    (function (SelectType) {
        SelectType[SelectType["One"] = 0] = "One";
        SelectType[SelectType["Five"] = 1] = "Five";
        SelectType[SelectType["Max"] = 2] = "Max";
    })(SelectType || (SelectType = {}));
    var ListHeroView = /** @class */ (function (_super) {
        __extends(ListHeroView, _super);
        function ListHeroView(buf) {
            var _this = _super.call(this) || this;
            _this._tabItemIndex = 0;
            _this.currentBtn = [];
            _this.childViews = {
                lv: ["Btn_Lv", "HeroLvUp", "lv"],
                star: ["Btn_Star", "HeroStar", "star"],
                war: ["Btn_War", "HeroWar", "war"],
            };
            _this.titleStr = {
                0: "升级",
                1: "进阶",
                2: "布阵",
            };
            _this.mainView = buf[1];
            _this._tabItemIndex = 0;
            _this.lock = true;
            _this.currentBtn = [];
            _this.AddEvent();
            _this.UpdateRedPoint();
            _this.InitEvent();
            return _this;
        }
        // 移除事件监听
        ListHeroView.prototype.Destroy = function () {
            this.offAll();
            if (this.ChildBox._childs[0]) {
                this.ChildBox._childs[0].OnDestroy();
            }
            this.ChildBox.destroyChildren();
            H52D_Framework.Tick.ClearAll(this);
            H52D_Framework.Event.RemoveEvent("UpdateRedPoint", Laya.Handler.create(this, this.UpdateRedPoint));
            H52D_Framework.Event.RemoveEvent("ClickWar", Laya.Handler.create(this, this.NewTeach_clickWar));
            H52D_Framework.Event.RemoveEvent("ClickStar", Laya.Handler.create(this, this.NewTeach_clickStar));
        };
        ListHeroView.prototype.AddEvent = function () {
            H52D_Framework.Event.RegistEvent("UpdateRedPoint", Laya.Handler.create(this, this.UpdateRedPoint));
            H52D_Framework.Event.RegistEvent("ClickWar", Laya.Handler.create(this, this.NewTeach_clickWar));
            H52D_Framework.Event.RegistEvent("ClickStar", Laya.Handler.create(this, this.NewTeach_clickStar));
        };
        ListHeroView.prototype.InitEvent = function () {
            this.Btn_Lv.on(Laya.Event.CLICK, this, this.Btn_Click, [this.childViews.lv]);
            this.Btn_Star.on(Laya.Event.CLICK, this, this.Btn_Click, [this.childViews.star]);
            this.Btn_War.on(Laya.Event.CLICK, this, this.Btn_Click, [this.childViews.war]);
            this.Btn_Click(this.childViews.lv);
        };
        // 刷新红点
        ListHeroView.prototype.UpdateRedPoint = function () {
            //升级，激活
            var red_open = false;
            //进阶，进阶
            var red_star = false;
            var lv, star = 0;
            var herolist = H52D_Framework.HeroManager.Instance.GetCfgHeroList();
            for (var Idex = 0; Idex < herolist.length; Idex++) {
                var nheroID = herolist[Idex];
                var IsActive = H52D_Framework.HeroManager.Instance.IsActive(nheroID);
                if (IsActive) {
                    var Red_star = H52D_Framework.HeroManager.Instance.HeroIsStar(nheroID);
                    var Red_lvup = H52D_Framework.HeroManager.Instance.HeroIsUp(nheroID);
                    if (Red_lvup) {
                        red_open = true;
                    }
                    if (Red_star) {
                        red_star = true;
                    }
                }
                else {
                    var Red_open = H52D_Framework.HeroManager.Instance.HeroIstrue(nheroID);
                    if (Red_open) {
                        red_open = true;
                    }
                }
                if (red_open || red_star) {
                    if (red_open && red_star) {
                        break;
                    }
                }
            }
            this.red_lv.visible = red_open;
            this.red_star.visible = red_star;
            H52D_Framework.Event.DispatchEvent("ShowRedPoint", [E_OpenGrade.HERO]);
        };
        ListHeroView.prototype.Btn_Click = function (child) {
            var _this = this;
            ///切换页签  提示弹框
            this._child = child[1];
            var ShowView = Laya.Handler.create(this, function () {
                if (_this.lock && _this.currentBtn[0] != child[0]) {
                    if (_this.currentBtn.length > 0) {
                        _this[_this.currentBtn[0]].bgColor = "#2c2129";
                        _this[_this.currentBtn[0]].alpha = 0.3;
                        _this[_this.currentBtn[2]].visible = false;
                        for (var key in _this.childViews) {
                            if (key != child[2]) {
                                _this[key + "_gang"].visible = false;
                            }
                        }
                    }
                    _this.currentBtn = child;
                    _this[_this.currentBtn[0]].bgColor = "";
                    _this[_this.currentBtn[0]].alpha = 0;
                    _this[_this.currentBtn[0]].visible = true;
                    _this[child[2]].visible = true;
                    _this[child[2] + "_gang"].visible = true;
                    _this.lock = false;
                    H52D_Framework.UIManager.Instance.CreateUI(child[1], [_this, _this], Laya.Handler.create(_this, function (view) {
                        if (_this.destroyed) {
                            view.destroy(true);
                        }
                        else {
                            if (_this.ChildBox._childs[0]) {
                                _this.ChildBox._childs[0].OnDestroy();
                            }
                            _this.ChildBox.destroyChildren();
                            _this.ChildBox.addChild(view);
                        }
                        _this.lock = true;
                    }));
                }
                if (child[0] == "Btn_War") {
                    H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.BOTTOM_SET_PANEL);
                }
            });
            if (child[1] != "HeroWar") {
                if (H52D_Framework.HeroPosition.Instance.bChange) {
                    H52D_Framework.Event.DispatchEvent("btn_closes", ShowView);
                    return;
                }
                else {
                    //ShowView.run();
                }
            }
            ShowView.run();
        };
        ListHeroView.prototype.NewTeach_clickWar = function () {
            this.Btn_Click(this.childViews.war);
        };
        ListHeroView.prototype.NewTeach_clickStar = function () {
            this.Btn_Click(this.childViews.star);
        };
        return ListHeroView;
    }(ui.main.list.ListHeroViewUI));
    H52D_Framework.ListHeroView = ListHeroView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ListHeroView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**神兽页面*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ListPetView", [
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_pet.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_sign.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS }
    ]);
    var ListPetView = /** @class */ (function (_super) {
        __extends(ListPetView, _super);
        function ListPetView(buf) {
            var _this = _super.call(this) || this;
            //private pet: { [id: number]: BPetVo } = {};
            /**当前神兽ID */
            _this._currentPetID = 0;
            _this.time = 0;
            _this._MainView = buf[1];
            _this.Init();
            _this.AddEvent();
            _this.ChangeListHigth();
            return _this;
        }
        ListPetView.prototype.Init = function () {
            this.UpdateList();
            this.SetAgeTime();
            this.SetCurrentPetInfo();
            this.SetTopPetHit();
        };
        ListPetView.prototype.AddEvent = function () {
            H52D_Framework.Event.RegistEvent('SetAgeTime', Laya.Handler.create(this, this.SetAgeTime));
            H52D_Framework.Event.RegistEvent('PetInit', Laya.Handler.create(this, this.Init));
            H52D_Framework.Event.RegistEvent('ClickPetUp', Laya.Handler.create(this, this.ClickPetUp));
            H52D_Framework.Event.RegistEvent('changelisthigth', Laya.Handler.create(this, this.ChangeListHigth));
        };
        // 移除事件监听
        ListPetView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent('SetAgeTime', Laya.Handler.create(this, this.SetAgeTime));
            H52D_Framework.Event.RemoveEvent('PetInit', Laya.Handler.create(this, this.Init));
            H52D_Framework.Event.RemoveEvent('ClickPetUp', Laya.Handler.create(this, this.ClickPetUp));
            H52D_Framework.Event.RemoveEvent('changelisthigth', Laya.Handler.create(this, this.ChangeListHigth));
        };
        ListPetView.prototype.ChangeListHigth = function () {
            var _this = this;
            var bool = Boolean(this._MainView.halfPanel);
            if (bool) {
                H52D_Framework.OneTimer(300, Laya.Handler.create(this, function () {
                    _this.Pet_list.height = 170 * G_StageHeightScale;
                }), "ChangeListHigthShop");
            }
            else {
                this.Pet_list.height = 932 * G_StageHeightScale;
            }
        };
        /**设置神兽总伤害加成 */
        ListPetView.prototype.SetTopPetHit = function () {
            this.info.on(Laya.Event.CLICK, this, this.PetPlayMethod);
            if (H52D_Framework.PetManager.Instance.CurrentpetID == 0) {
                this.petHit.text = "0  神兽伤害";
                this.info.x = 0;
                this.info.x += this.petHit.text.length * 22 * G_StageWidthScale;
                return;
            }
            var OwnPetList = H52D_Framework.PetManager.Instance.OwnPetList;
            var pet = OwnPetList[H52D_Framework.PetManager.Instance.CurrentpetID];
            var hitValue = pet.attr.GetAttributeValue(2) * pet.ratio >> 0;
            if (hitValue >= 10000) {
                var str = (hitValue / 10000).toFixed(0);
                this.petHit.text = str + "W  神兽伤害";
            }
            else {
                this.petHit.text = hitValue.toFixed(0) + "  神兽伤害";
            }
            this.info.x = 0;
            this.info.x += this.petHit.text.length * 22 * G_StageWidthScale;
        };
        /**设置孵化 时间及次数 */
        ListPetView.prototype.SetAgeTime = function () {
            this.time = H52D_Framework.PetManager.Instance.NextUpdateTime - H52D_Framework.Time.serverSecodes;
            var tims = H52D_Framework.PetManager.Instance.HasTimes;
            var maxTims = H52D_Framework.GameParamConfig['HatchMaxNum'];
            H52D_Framework.Tick.Clear(this, this.SetTime);
            if (this.time <= 0) {
                this.time = 0;
            }
            this.Has_num.text = "X" + tims;
            this.UpdateTime.text = "孵化时间：" + H52D_Framework.GetFormatNumTime(this.time);
            H52D_Framework.Tick.Loop(1000, this, this.SetTime);
            if (tims == maxTims) {
                H52D_Framework.Tick.Clear(this, this.SetTime);
                this.UpdateTime.text = "次数已上限";
                return;
            }
        };
        ListPetView.prototype.SetTime = function () {
            this.time--;
            if (this.time <= 0) {
                this.time = 0;
                H52D_Framework.Tick.Clear(this, this.SetTime);
            }
            this.UpdateTime.text = "孵化时间：" + H52D_Framework.GetFormatNumTime(this.time);
        };
        /**设置当前上阵神兽信息 */
        ListPetView.prototype.SetCurrentPetInfo = function () {
            var currentId = H52D_Framework.PetManager.Instance.CurrentpetID;
            if (currentId == 0) {
                this.Pet_iconbg.visible = false;
                return;
            }
            this.Pet_iconbg.visible = true;
            var pet_tcfg = H52D_Framework.PetConfig[currentId];
            var pet = H52D_Framework.PetManager.Instance.GetPet_Instance(currentId);
            if (pet) {
                this.Pet_name.text = pet.petName;
                this.Pet_name.color = H52D_Framework.BaseDefine.PetColor_label[pet.petColor];
                this.Pet_lv.text = pet.Level + "";
                this.Pet_icon.skin = "ui_icon/" + pet.strPetIcon;
                this.Pet_iconbg.skin = H52D_Framework.BaseDefine.QualityList[pet.petColor];
                var pet_PrimeStr = H52D_Framework.StringInfoConfig[H52D_Framework.QualityValue[pet.currentAttribute[1][1]].dwName].s;
                var pet_AuxiliaryStr = H52D_Framework.StringInfoConfig[H52D_Framework.QualityValue[pet.currentAttribute[2][1]].dwName].s;
                var primeIsper = H52D_Framework.QualityValue[pet.currentAttribute[1][1]].isper;
                var auxiliaryIsper = H52D_Framework.QualityValue[pet.currentAttribute[2][1]].isper;
                var pet_PrimeValue = pet.currentAttribute[1][2];
                var pet_AuxiliaryValue = pet.currentAttribute[2][2];
                if (pet.currentAttribute[1][1] == 4 && pet_PrimeValue > 10000) {
                    pet_PrimeValue = 10000;
                }
                if (pet.currentAttribute[2][1] == 4 && pet_AuxiliaryValue > 10000) {
                    pet_AuxiliaryValue = 10000;
                }
                var addPethurt = pet_PrimeValue + pet.addCurrentAttribute_1;
                var addHerohurt = pet_AuxiliaryValue + pet.addCurrentAttribute_2;
                this.add_pethurt.text = primeIsper == 0 ? "+" + pet_PrimeValue + pet_PrimeStr : "x" + pet_PrimeValue / 100 + "%" + pet_PrimeStr;
                this.add_herohurt.text = auxiliaryIsper == 0 ? "+" + pet_AuxiliaryValue + pet_AuxiliaryStr : "x" + pet_AuxiliaryValue / 100 + "%" + pet_AuxiliaryStr;
                this.add_nexthurt_pet.text = primeIsper == 0 ? "+" + addPethurt + pet_PrimeStr : "x" + addPethurt / 100 + "%" + pet_PrimeStr;
                this.add_nexthurt_hero.text = auxiliaryIsper == 0 ? "+" + addHerohurt + pet_AuxiliaryStr : "x" + addHerohurt / 100 + "%" + pet_AuxiliaryStr;
            }
        };
        /**神兽List赋值 */
        ListPetView.prototype.UpdateList = function () {
            //this.pet = PetManager.Instance.OwnPetList;
            var arr = [];
            for (var id in H52D_Framework.PetManager.Instance.OwnPetList) {
                arr.push(Number(id));
            }
            for (var i = 0; i < arr.length; i++) {
                for (var j = i + 1; j < arr.length; j++) {
                    var qu = void 0;
                    if (H52D_Framework.PetManager.Instance.OwnPetList[arr[i]].petColor > H52D_Framework.PetManager.Instance.OwnPetList[arr[j]].petColor) {
                        qu = arr[i];
                        arr[i] = arr[j];
                        arr[j] = qu;
                    }
                }
            }
            for (var i = 0; i < arr.length; i++) {
                for (var j = i + 1; j < arr.length; j++) {
                    var lv = void 0;
                    if (H52D_Framework.PetManager.Instance.OwnPetList[arr[i]].Level < H52D_Framework.PetManager.Instance.OwnPetList[arr[j]].Level &&
                        H52D_Framework.PetManager.Instance.OwnPetList[arr[i]].petColor == H52D_Framework.PetManager.Instance.OwnPetList[arr[j]].petColor) {
                        lv = arr[i];
                        arr[i] = arr[j];
                        arr[j] = lv;
                    }
                }
            }
            this.Pet_list.array = arr;
            this.Pet_list.vScrollBarSkin = "";
            this.Pet_list.renderHandler = new Laya.Handler(this, this.Pethandle);
        };
        ListPetView.prototype.Pethandle = function (item, index) {
            var ID = Number(this.Pet_list.array[index]);
            var pet = H52D_Framework.PetManager.Instance.OwnPetList[ID];
            var pet_name = item.getChildByName("Pet_name");
            var pet_lv = item.getChildByName("Pet_lv");
            var pet_icon = item.getChildByName("Pet_icon");
            var pet_icon_bg = item.getChildByName("pet_icon_bg");
            var pet_info = pet_icon.getChildByName("Pet_info");
            var pet_hurt = item.getChildByName("pet_hurt");
            var hero_hurt = item.getChildByName("hero_hurt");
            var choice = item.getChildByName("choice");
            var click = item.getChildByName("click");
            var point = item.getChildByName("point");
            pet_name.text = pet.petName;
            pet_name.color = H52D_Framework.BaseDefine.PetColor_label[pet.petColor];
            pet_lv.text = pet.Level + "";
            pet_icon.skin = "ui_icon/" + pet.strPetIcon;
            pet_icon_bg.skin = H52D_Framework.BaseDefine.QualityList[pet.petColor];
            var pet_PrimeStr = H52D_Framework.StringInfoConfig[H52D_Framework.QualityValue[pet.currentAttribute[1][1]].dwName].s;
            var pet_AuxiliaryStr = H52D_Framework.StringInfoConfig[H52D_Framework.QualityValue[pet.currentAttribute[2][1]].dwName].s;
            var primeIsper = H52D_Framework.QualityValue[pet.currentAttribute[1][1]].isper;
            var auxiliaryIsper = H52D_Framework.QualityValue[pet.currentAttribute[2][1]].isper;
            var pet_PrimeValue = pet.currentAttribute[1][2];
            var pet_AuxiliaryValue = pet.currentAttribute[2][2];
            if (pet.currentAttribute[1][1] == 4 && pet_PrimeValue > 10000) {
                pet_PrimeValue = 10000;
            }
            if (pet.currentAttribute[2][1] == 4 && pet_AuxiliaryValue > 10000) {
                pet_AuxiliaryValue = 10000;
            }
            pet_hurt.text = primeIsper == 0 ? "+" + pet_PrimeValue + pet_PrimeStr : "x" + pet_PrimeValue / 100 + "%" + pet_PrimeStr;
            hero_hurt.text = auxiliaryIsper == 0 ? "+" + pet_AuxiliaryValue + pet_AuxiliaryStr : "x" + pet_AuxiliaryValue / 100 + "%" + pet_AuxiliaryStr;
            choice.visible = H52D_Framework.PetManager.Instance.CurrentpetID == pet.ID;
            click.on(Laya.Event.CLICK, this, this.ChoiceCurrentPet, [ID]);
            point.visible = H52D_Framework.PetManager.Instance.IsNewPet(ID);
            pet_icon.on(Laya.Event.CLICK, this, this.OpenInfoView, [ID]);
        };
        ListPetView.prototype.Close = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("MainPetView", [H52D_Framework.ViewUpRoot]);
        };
        ListPetView.prototype.ChoiceCurrentPet = function (id) {
            if (H52D_Framework.PetManager.Instance.CurrentpetID != 0)
                H52D_Framework.PetManager.Instance.OwnPetList[H52D_Framework.PetManager.Instance.CurrentpetID].CurrentState = 0;
            H52D_Framework.PetManager.Instance.OwnPetList[id].CurrentState = 1;
            if (H52D_Framework.PetManager.Instance.CurrentpetID != id) {
                this.SetCurrentPetInfo();
                H52D_Framework.PetManager.Instance.K_ReqUsePet(id);
            }
            H52D_Framework.PetManager.Instance.CurrentpetID = id;
            this.UpdateList();
            H52D_Framework.PetManager.Instance.SendShowPet(id);
        };
        ListPetView.prototype.PetPlayMethod = function () {
            var tvo = new H52D_Framework.TipsVo();
            tvo.title = "神兽";
            tvo.contentId = 5000;
            tvo.replace = null;
            H52D_Framework.UIManager.Instance.CreateUI("TipsActionView", [H52D_Framework.ViewToppestRoot, tvo]);
        };
        /**
         * 打开神兽tips
         */
        ListPetView.prototype.OpenInfoView = function (nID) {
            H52D_Framework.PetManager.Instance.SendShowPet(nID);
            H52D_Framework.UIManager.Instance.CreateUI("TipsTreasureView", [H52D_Framework.ViewToppestRoot, 0, nID, 0, 0, 0, "神兽详情", OpenType.ePet]);
        };
        ListPetView.prototype.ClickPetUp = function () {
            var len = this.Pet_list.array.length;
            if (len < 1)
                return;
            var pet_id = this.Pet_list.array[0];
            this.ChoiceCurrentPet(pet_id);
            H52D_Framework.PetManager.Instance.K_ReqUsePet(pet_id);
        };
        return ListPetView;
    }(ui.main.list.ListPetViewUI));
    H52D_Framework.ListPetView = ListPetView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ListPetView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ListRoleView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_head.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_setting.atlas", type: Laya.Loader.ATLAS },
    ]);
    var ListRoleView = /** @class */ (function (_super) {
        __extends(ListRoleView, _super);
        function ListRoleView(buf) {
            var _this = _super.call(this) || this;
            _this._roleSkill = [];
            _this._roleSkillCfg = [];
            _this._cfg = H52D_Framework.RoleLevelUpConfig;
            _this._Lveffect = null;
            _this._mainview = buf[1];
            _this.ViewInit();
            _this.EventInit();
            _this.UpdateUseTime();
            _this.SetPanelHeight();
            return _this;
        }
        ListRoleView.prototype.ViewInit = function () {
            H52D_Framework.MainRoleLogic.Instance.SetPrivList();
            //角色信息
            var roleLv = H52D_Framework.MasterPlayer.Instance.player.Level;
            var camp_ID = H52D_Framework.MasterPlayer.Instance.player.CampID;
            if (camp_ID != 0) {
                this.Camp_name.text = "【阵营：" + H52D_Framework.StringInfoConfig[H52D_Framework.GangConfig[camp_ID].nameId].s + "】";
            }
            else {
                this.Camp_name.text = "【阵营：无】";
            }
            this.vip.visible = H52D_Framework.MasterPlayer.Instance.player.IsVip;
            H52D_Framework.MasterPlayer.Instance.player.Head = "ui_head/icon_ui_01.png";
            this.ListPanel.vScrollBarSkin = "";
            this.SetHead();
            this.SetName();
            this.HeroLevel.text = roleLv + "";
            this.damage.text = H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeValue(2) + "";
            //经验
            this.ExpProgressbar();
            //list
            this._roleSkillCfg = H52D_Framework.MainRoleLogic.Instance.roleSkillCfg;
            this._roleSkill = H52D_Framework.MainRoleLogic.Instance.roleSkill;
            this.list.vScrollBarSkin = "";
            this.list.array = this._roleSkill;
            this.list.renderHandler = new Laya.Handler(this, this.RenderHandler);
            this.list.height = 95 * this._roleSkill.length;
            this.privilegeBox.y = 26 + this.list.height;
            this.RedPoint();
            H52D_Framework.Tick.Loop(1000, this, this.RedPoint);
            this.privilegeBox.visible = true;
            this.RefPrivList();
            this.ConcealIcon();
        };
        ListRoleView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.achieven.on(Laya.Event.CLICK, this, this.OnAchieven);
            this.onMail.on(Laya.Event.CLICK, this, this.OnMailInfo);
            this.setting.on(Laya.Event.CLICK, this, this.OnSetting);
            this.sign.on(Laya.Event.CLICK, this, this.Onsign);
            H52D_Framework.Event.RegistEvent("RefreshList", Laya.Handler.create(this, this.RefreshList));
            H52D_Framework.Event.RegistEvent("privListTime", Laya.Handler.create(this, this.privListTime));
            H52D_Framework.Event.RegistEvent("LvUpEffect", Laya.Handler.create(this, this.LvUpEffect));
            H52D_Framework.Event.RegistEvent("changelisthigth", Laya.Handler.create(this, this.SetPanelHeight));
            H52D_Framework.Event.RegistEvent("RefPrivList", Laya.Handler.create(this, this.RefPrivList));
            H52D_Framework.Event.RegistEvent("ClickUpSkill", Laya.Handler.create(this, this.OnActUpSkill));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.PLAYER_NAME_UPDATE, Laya.Handler.create(this, this.SetName));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.PLAYER_HEAD_UPDATE, Laya.Handler.create(this, this.SetHead));
            H52D_Framework.Event.RegistEvent('ConcealIcon', Laya.Handler.create(this, this.ConcealIcon));
        };
        ListRoleView.prototype.SetName = function () {
            this.HeroName.text = H52D_Framework.MasterPlayer.Instance.player.Name;
        };
        ListRoleView.prototype.SetHead = function () {
            var headId = H52D_Framework.MasterPlayer.Instance.player.HeadId;
            if (headId == 0) {
                this.HeadIcon.skin = "ui_head/icon_ui_01.png";
            }
            else {
                this.HeadIcon.skin = "ui_icon/" + H52D_Framework.HeroConfig[headId].strIcon;
            }
        };
        ListRoleView.prototype.Destroy = function () {
            this.offAll();
            Laya.timer.clearAll(this); //RefreshList			
            H52D_Framework.Event.RemoveEvent("RefreshList", Laya.Handler.create(this, this.RefreshList));
            H52D_Framework.Event.RemoveEvent("LvUpEffect", Laya.Handler.create(this, this.LvUpEffect));
            H52D_Framework.Event.RemoveEvent("changelisthigth", Laya.Handler.create(this, this.SetPanelHeight));
            H52D_Framework.Event.RemoveEvent("RefPrivList", Laya.Handler.create(this, this.RefPrivList));
            H52D_Framework.Event.RemoveEvent("privListTime", Laya.Handler.create(this, this.privListTime));
            H52D_Framework.Event.RemoveEvent("ClickUpSkill", Laya.Handler.create(this, this.OnActUpSkill));
            H52D_Framework.Event.RemoveEvent('ConcealIcon', Laya.Handler.create(this, this.ConcealIcon));
        };
        ListRoleView.prototype.RefreshList = function () {
            this._roleSkill = H52D_Framework.MainRoleLogic.Instance.roleSkill;
            var roleLv = H52D_Framework.MasterPlayer.Instance.player.Level;
            this.HeroLevel.text = roleLv + "";
            this.list.array = this._roleSkill;
            this.damage.text = H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeValue(2) + "";
            this.list.refresh();
            this.ExpProgressbar();
            this.privilegeBox.y = 26 + this.list.height;
        };
        ListRoleView.prototype.ExpProgressbar = function () {
            var roleLv = H52D_Framework.MasterPlayer.Instance.player.Level;
            var roleMaxLv = H52D_Framework.MainRoleLogic.Instance.roleMaxLv;
            var nextExp = H52D_Framework.RoleLevelUpConfig[roleLv + 1 > roleMaxLv ? roleMaxLv : roleLv + 1].levelUpExp;
            var curExp = H52D_Framework.MasterPlayer.Instance.player.Exp;
            if (roleLv == roleMaxLv) {
                this.progressbar.width = this.progressbg.width;
                this.progresslabel.text = curExp + "/" + nextExp;
            }
            else {
                this.progressbar.width = (curExp / nextExp) * this.progressbg.width;
                this.progresslabel.text = curExp + "/" + nextExp;
            }
        };
        /**刷新特权list */
        ListRoleView.prototype.RefPrivList = function () {
            this.privList.array = H52D_Framework.MainRoleLogic.Instance.PrivList;
            this.privList.renderHandler = new Laya.Handler(this, this.privRenderHandler);
            this.privList.height = 95 * this.privList.array.length;
        };
        /**特权list */
        ListRoleView.prototype.privRenderHandler = function (item, index) {
            var desc = item.getChildByName('desc');
            var useBtn = item.getChildByName('useBtn'); //按钮
            var useNumHtml = useBtn.getChildByName('useNumHtml');
            var useNum = item.getChildByName('useNum');
            H52D_Framework.SetHtmlStyle(desc, 20, "#d7e6ff", "left");
            H52D_Framework.SetHtmlStyle(useNumHtml, 18, "#fafa85", "center");
            useBtn.label = '使用';
            useBtn.gray = false;
            useBtn.mouseEnabled = true;
            desc.innerHTML = H52D_Framework.GetInfoAttr.Instance.GetText(H52D_Framework.PrivilegeConfig[index + 1].description);
            //if(useNum["diamonds"]){	//显示钻石
            useNumHtml.innerHTML = useNum.text;
            //}
            // else{
            // 	useNumHtml.innerHTML = useNum.text;
            //}
            var privInfo = H52D_Framework.MainRoleLogic.Instance.PrivListInfo;
            if (privInfo[index + 1] && H52D_Framework.MainRoleLogic.Instance.GetBuffTime(index + 1) == -1) { //若永久已购买
                useBtn.label = '已生效';
                useBtn.gray = true;
                useBtn.mouseEnabled = false;
            }
            useBtn.on(Laya.Event.CLICK, this, this.UseBuff, [useBtn, index + 1]);
        };
        /**技能list */
        ListRoleView.prototype.RenderHandler = function (item, index) {
            var skillicon = item.getChildByName("skillicon");
            var skillname = item.getChildByName("skillname");
            var skilllvlabel = item.getChildByName("skilllvlabel");
            var desc = item.getChildByName("desc");
            var skillBgBtn = item.getChildByName("skillBgBtn");
            var unlock = item.getChildByName("unlock");
            var btnlabel = unlock.getChildByName("btnlabel");
            var money = unlock.getChildByName("money");
            var newskill = unlock.getChildByName("newskill");
            var maxLv = item.getChildByName("maxLv");
            newskill.visible = false;
            unlock.on(Laya.Event.CLICK, this, this.OnActUpSkill, [{ 1: index, 2: btnlabel, 3: skillicon }]);
            skillBgBtn.on(Laya.Event.CLICK, this, this.OnSkillInfo, [index]);
            var skilllv = this._roleSkill[index].lv;
            var roleLv = H52D_Framework.MasterPlayer.Instance.player.Level;
            var ownMoney = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold);
            if (skilllv == 0) {
                skilllv = skilllv + 1;
            }
            var roleSkillId = this._roleSkillCfg[index][skilllv].roleSkillId;
            skillicon.skin = H52D_Framework.GetIcon(H52D_Framework.ActiveSkillConfig[roleSkillId].strIcon);
            skillname.text = H52D_Framework.StringInfoConfig[H52D_Framework.ActiveSkillConfig[roleSkillId].nameId].s;
            skilllvlabel.text = skilllv + "";
            H52D_Framework.SetHtmlStyle(desc, 20, "#d7e6ff", "left");
            desc.innerHTML = H52D_Framework.StringInfoConfig[H52D_Framework.ActiveSkillConfig[roleSkillId].descId].s;
            H52D_Framework.SetHtmlStyle(money, 18, "#fafa85", "center");
            unlock.disabled = false;
            //技能解锁
            if (!H52D_Framework.MainRoleLogic.Instance.IsMaxLv(index)) {
                unlock.visible = true;
                maxLv.visible = false;
                if (H52D_Framework.MainRoleLogic.Instance.IsSkillUnlocked(index)) {
                    var condition = H52D_Framework.MainRoleLogic.Instance.GetSkillLvUpCondition(index);
                    money.innerHTML = "<img src= 'ui_main/icon-jinbi.png' width='20px' height='20px'></img>" + condition[2];
                    if (roleLv >= condition[1]) { //如果角色等级达到升级技能条件
                        btnlabel.text = "升级";
                        if (ownMoney >= condition[2]) { //如果金币够
                        }
                        else {
                            unlock.disabled = true;
                        }
                    }
                    else { //角色等级未达到解锁技能条件
                        unlock.disabled = true;
                        btnlabel.text = H52D_Framework.Format(H52D_Framework.StringInfoConfig[7004].s, condition[1]);
                    }
                }
                else { //技能未解锁
                    var condition = H52D_Framework.MainRoleLogic.Instance.GetSkillUnlockCondition(index);
                    money.innerHTML = "<img src= 'ui_main/icon-jinbi.png' width='20px' height='20px'></img>" + condition[2];
                    if (roleLv >= condition[1]) { //如果角色等级达到解锁技能条件
                        btnlabel.text = "解锁技能";
                        if (ownMoney >= condition[2]) { //如果金币够
                            newskill.visible = true;
                        }
                        else {
                            unlock.disabled = true;
                        }
                    }
                    else { //角色等级未达到解锁技能条件
                        unlock.disabled = true;
                        btnlabel.text = H52D_Framework.Format(H52D_Framework.StringInfoConfig[7005].s, condition[1]);
                    }
                }
            }
            else {
                unlock.visible = false;
                maxLv.visible = true;
            }
        };
        /**
         * 技能按钮点击
         */
        ListRoleView.prototype.OnActUpSkill = function (buf) {
            this._icon = buf[3];
            var index = buf[1] + 1;
            if (buf[2].text == "解锁技能") {
                H52D_Framework.RemoteCall.Instance.Send("K_ReqActivateSkill", index);
            }
            else if (buf[2].text == "升级") {
                //升级到哪一级
                H52D_Framework.RemoteCall.Instance.Send("K_ReqSkillLevelUp", index, this._roleSkill[buf[1]].lv + 1);
            }
        };
        ListRoleView.prototype.OnAchieven = function () {
            // if (OpenGradeConfig[7].Level < MasterPlayer.Instance.player.Level) {
            H52D_Framework.UIManager.Instance.CreateUI("AchievementView", [H52D_Framework.ViewUpRoot]);
            // } else {
            // 	let str = SysPromptConfig[10007].strPromptInfo
            // 	let strCont: string = str;
            // 	strCont = Format(str, OpenGradeConfig[7].Level, StringInfoConfig[5007].s);
            // 	TipsLogic.Instance.OpenSystemTips(strCont);
            // }
        };
        //打开邮件界面
        ListRoleView.prototype.OnMailInfo = function () {
            if (H52D_Framework.OpenGradeConfig[7].Level < H52D_Framework.MasterPlayer.Instance.player.Level) {
                H52D_Framework.UIManager.Instance.CreateUI("MailView", [H52D_Framework.ViewUpRoot]);
            }
            else {
                var str = H52D_Framework.SysPromptConfig[10007].strPromptInfo;
                var strCont = str;
                strCont = H52D_Framework.Format(str, H52D_Framework.OpenGradeConfig[7].Level, H52D_Framework.StringInfoConfig[5007].s);
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(strCont);
            }
        };
        //打开系统设置
        ListRoleView.prototype.OnSetting = function () {
            H52D_Framework.UIManager.Instance.CreateUI("SettingView", [H52D_Framework.ViewUpRoot]);
        };
        /**打开签到界面 */
        ListRoleView.prototype.Onsign = function () {
            H52D_Framework.UIManager.Instance.CreateUI("SignInView", [H52D_Framework.ViewUpRoot]);
        };
        /**
         * 技能详情
         */
        ListRoleView.prototype.OnSkillInfo = function (index) {
            H52D_Framework.UIManager.Instance.CreateUI("SkillInfoView", [H52D_Framework.ViewUpRoot, index]);
        };
        ListRoleView.prototype.LvUpEffect = function () {
            var _this = this;
            this._Lveffect = new H52D_Framework.Avatar(this._icon);
            this._Lveffect.Load("res/effect/effect_ui_shengji/effect_ui_shengji.sk", 1, 2, 35, 30, Laya.Handler.create(this, function () {
                _this._Lveffect.Play("effect_ui_shengji", false, true, function () {
                });
            }));
        };
        /**使用buff */
        ListRoleView.prototype.UseBuff = function (useBtn, index) {
            useBtn.mouseEnabled = false;
            if (H52D_Framework.MainRoleLogic.Instance.UseBuff(index)) {
                useBtn.gray = true;
            }
        };
        /**buff倒计时 */
        ListRoleView.prototype.UpdateUseTime = function () {
            //this.buffTime=MainRoleLogic.Instance.SetToUpdatePriv();
            this.privListTime();
            Laya.timer.loop(1000, this, this.privListTime);
        };
        /**特权倒计时 */
        ListRoleView.prototype.privListTime = function () {
            var obj = H52D_Framework.MainRoleLogic.Instance.SetToUpdatePriv();
            for (var i in obj) {
                var listChild = this.privList.cells[Number(i) - 1];
                var _button = listChild._childs[7];
                var _bewrite = listChild._childs[8];
                var _useNumHtml = _button.getChildByName("useNumHtml");
                var _time = _button.getChildByName("time");
                var _discountBg = _button.getChildByName("discountBg");
                var _discount = _discountBg.getChildByName("discount");
                var _useNum = H52D_Framework.MainRoleLogic.Instance.PrivList[Number(i) - 1].useNum.text;
                _useNumHtml.innerHTML = _useNum;
                var otime = H52D_Framework.DiscountManager.Instance.tPrivilegeSvot - H52D_Framework.Time.serverSecodes;
                if (H52D_Framework.MainRoleLogic.Instance.PrivList[Number(i) - 1].discount == -1 || H52D_Framework.DiscountManager.Instance._bStartPrivilege == false || otime < 0) {
                    _time.visible = _discountBg.visible = false;
                }
                else {
                    _time.visible = _discountBg.visible = true;
                    _time.text = H52D_Framework.GetFormatNumTime(otime);
                    var disNum = H52D_Framework.MainRoleLogic.Instance.PrivList[Number(i) - 1].discount;
                    _discount.text = (disNum == 0 ? 1 : disNum) + "折";
                }
                if (H52D_Framework.GetInfoAttr.Instance.GetCountDown(obj[i], false) >= 0) {
                    _button.label = H52D_Framework.GetInfoAttr.Instance.GrtTimeOut(H52D_Framework.GetInfoAttr.Instance.GetCountDown(obj[i], false));
                    _button.gray = true;
                    _button.mouseEnabled = false;
                    _bewrite.visible = true;
                    // if (MainRoleLogic.Instance.GetBuffTime(Number(i)) == 0) {//没有持续时间,显示冷却时间
                    // 	_bewrite.text = '冷却';
                    // }else{
                    // 	_bewrite.text = PrivilegeConfig[i].isActive==1?'主动':'被动';
                    // }
                }
                else {
                    _button.label = '使用';
                    _button.gray = false;
                    _button.mouseEnabled = true;
                    _bewrite.visible = false;
                }
                //永久经验加成
                var privInfo = H52D_Framework.MainRoleLogic.Instance.PrivListInfo;
                if (privInfo[Number(i)] && H52D_Framework.MainRoleLogic.Instance.GetBuffTime(Number(i)) == -1) { //若永久已购买
                    _button.label = '已生效';
                    _button.gray = true;
                    _button.mouseEnabled = false;
                    _bewrite.visible = true;
                    //_bewrite.text = PrivilegeConfig[i].isActive==1?'主动':'被动';
                }
            }
            for (var a = 0; a < this.privList.cells.length; a++) {
                if (obj[Number(a) + 1])
                    continue;
                var listChild = this.privList.cells[a];
                var _button = listChild._childs[7];
                var _bewrite = listChild._childs[8];
                var _useNumHtml = _button.getChildByName("useNumHtml");
                var _time = _button.getChildByName("time");
                var _discountBg = _button.getChildByName("discountBg");
                var _discount = _discountBg.getChildByName("discount");
                var _useNum = H52D_Framework.MainRoleLogic.Instance.PrivList[Number(a)].useNum.text;
                var otime = H52D_Framework.DiscountManager.Instance.tPrivilegeSvot - H52D_Framework.Time.serverSecodes;
                var aaa = H52D_Framework.MainRoleLogic.Instance.PrivList[Number(a)].discount;
                var bbb = H52D_Framework.DiscountManager.Instance._bStartPrivilege == false;
                var vvv = otime < 0;
                if (H52D_Framework.MainRoleLogic.Instance.PrivList[Number(a)].discount == -1 || H52D_Framework.DiscountManager.Instance._bStartPrivilege == false || otime < 0) {
                    _time.visible = _discountBg.visible = false;
                }
                else {
                    _time.visible = _discountBg.visible = true;
                    _time.text = H52D_Framework.GetFormatNumTime(otime);
                    var disNum = H52D_Framework.MainRoleLogic.Instance.PrivList[Number(a)].discount;
                    _discount.text = (disNum == 0 ? 1 : disNum) + "折";
                }
                _button.label = '使用';
                _button.gray = false;
                _button.mouseEnabled = true;
                _bewrite.visible = false;
            }
        };
        /**设置panel高度,为了滑动 */
        ListRoleView.prototype.SetPanelHeight = function () {
            var bool = Boolean(this._mainview.halfPanel);
            if (bool) {
                this.ListPanel.height = 150 * G_StageHeightScale;
            }
            else {
                this.ListPanel.height = 940 * G_StageHeightScale;
            }
        };
        //邮件红点
        ListRoleView.prototype.RedPoint = function () {
            this.redPoint.visible = H52D_Framework.MailLogic.Inst.checkShowRed;
            this.achPoint.visible = H52D_Framework.AchievenManger.Instance.showPoint();
        };
        /**签到红点 */
        ListRoleView.prototype.ConcealIcon = function () {
            this.btnHong_3.visible = !H52D_Framework.SignInLogic.Instance.ToDayAlr;
        };
        return ListRoleView;
    }(ui.main.list.ListRoleViewUI));
    H52D_Framework.ListRoleView = ListRoleView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ListRoleView.js.map
/**
* 商城UI类 叶;
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**商城类型枚举 */
var ShopEnum;
(function (ShopEnum) {
    /** 空*/
    ShopEnum[ShopEnum["eEmpty"] = 0] = "eEmpty";
    /** 首冲*/
    ShopEnum[ShopEnum["eFirstRecharge"] = 1] = "eFirstRecharge";
    /** 宝箱*/
    ShopEnum[ShopEnum["eTreasureBox"] = 2] = "eTreasureBox";
    /** 宝石*/
    ShopEnum[ShopEnum["eGem"] = 3] = "eGem";
    /** 道具*/
    ShopEnum[ShopEnum["ePro"] = 4] = "ePro";
    /** 抽奖*/
    ShopEnum[ShopEnum["eLottery"] = 5] = "eLottery";
})(ShopEnum || (ShopEnum = {}));
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ListShopView", [
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_sign.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS }
    ]);
    var ListShopView = /** @class */ (function (_super) {
        __extends(ListShopView, _super);
        function ListShopView(buf) {
            var _this = _super.call(this) || this;
            _this._boxList = [];
            _this._proList = [];
            /** 充值列表 */
            _this._chargeList = [];
            //奖励表充值档位
            _this.Reward_gemGift = [];
            //钻石礼包的道具表现
            _this.Item_gemGift = [];
            //钻石礼包对应的奖励表
            _this.Reward_Gem = [];
            /** 首充列表 */
            _this._fristList = [];
            _this._fristItemList = [];
            /** 抽奖列表 */
            _this._lotteryOneList = [];
            _this._lotteryTenList = [];
            _this._SendLotteryFlag = true;
            _this.Init();
            _this.AddEvent();
            _this._MainView = buf[1];
            _this.ChangeListHigth();
            return _this;
        }
        ListShopView.prototype.Destroy = function () {
        };
        /**添加按钮侦听器 */
        ListShopView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            H52D_Framework.Event.RegistEvent('BuySucceed', Laya.Handler.create(this, this.Init));
            H52D_Framework.Event.RegistEvent('PackRef', Laya.Handler.create(this, this.UpDateData));
            H52D_Framework.Event.RegistEvent('toGemShop', Laya.Handler.create(this, this.ToGemShop));
            H52D_Framework.Event.RegistEvent('changelisthigth', Laya.Handler.create(this, this.ChangeListHigth));
            H52D_Framework.Event.RegistEvent('UpdateChargeList', Laya.Handler.create(this, this.UpdateChargeList));
            H52D_Framework.Event.RegistEvent('CloseEffect', Laya.Handler.create(this, this.PlayEffect));
            H52D_Framework.Event.RegistEvent('UpdateLotteryShop', Laya.Handler.create(this, this.SetLotteryShop));
            H52D_Framework.Event.RegistEvent('UpdateBoxList', Laya.Handler.create(this, this.UpdateBoxList));
            //CloseEffect
            // this.firstShop.proInfo.on(Laya.Event.CLICK, this, this.ClickHintRule, [ShopEnum.eFirstRecharge]);
            // this.firstShop.firstList.renderHandler = new Laya.Handler(this, this.SetFristListRender);
            this.boxShop.treList.renderHandler = new Laya.Handler(this, this.SetBoxListRender);
            this.boxShop.proInfo.on(Laya.Event.CLICK, this, this.ClickHintRule, [ShopEnum.eTreasureBox]);
            this.gemShop.gemList.renderHandler = new Laya.Handler(this, this.SetChargeListRender);
            this.gemShop.proInfo.on(Laya.Event.CLICK, this, this.ClickHintRule, [ShopEnum.eGem]);
            this.lotteryShop.proInfo.on(Laya.Event.CLICK, this, this.ClickHintRule, [ShopEnum.eLottery]);
            this.lotteryShop.oneBtn.on(Laya.Event.CLICK, this, this.ClickLotteryBtn, [LotteryDataEnum.eOne]);
            this.lotteryShop.tenBtn.on(Laya.Event.CLICK, this, this.ClickLotteryBtn, [LotteryDataEnum.eTen]);
        };
        /**移除事件监听 */
        ListShopView.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.Tick.ClearAll(this);
            H52D_Framework.Event.RemoveEvent('PackRef', Laya.Handler.create(this, this.UpDateData));
            H52D_Framework.Event.RemoveEvent('changelisthigth', Laya.Handler.create(this, this.ChangeListHigth));
            H52D_Framework.Event.RemoveEvent('toGemShop', Laya.Handler.create(this, this.ToGemShop));
            H52D_Framework.Event.RemoveEvent('BuySucceed', Laya.Handler.create(this, this.Init));
            H52D_Framework.Event.RemoveEvent('UpdateChargeList', Laya.Handler.create(this, this.UpdateChargeList));
            H52D_Framework.Event.RemoveEvent('CloseEffect', Laya.Handler.create(this, this.PlayEffect));
            H52D_Framework.Event.RemoveEvent('UpdateLotteryShop', Laya.Handler.create(this, this.SetLotteryShop));
            H52D_Framework.Event.RemoveEvent('UpdateBoxList', Laya.Handler.create(this, this.UpdateBoxList));
        };
        /**更新商城数值 */
        ListShopView.prototype.UpDateData = function () {
            this._gemNum = H52D_Framework.ShopLogic.Instance.gemNum;
            this._goldNum = H52D_Framework.ShopLogic.Instance.goldNum;
            this._ticketNum = H52D_Framework.ShopLogic.Instance.ticketNum;
            this.TxtNum.text = this._goldNum >= 1000000 ? Number(this._goldNum * 0.0001).toFixed(2).toString() + "W" : this._goldNum.toString();
            this.gemTxtNum.text = "x" + this._gemNum;
            this.lotteryShop.ticketNum.text = "x" + this._ticketNum;
        };
        /**初始化UI */
        ListShopView.prototype.Init = function () {
            this.UpDateData();
            this.SetDataToList();
            // this.SetFirstShop();
            this.SetLotteryShop();
            this.shopPanel.vScrollBarSkin = "";
            // this.SetIconScale(this.firstShop.proInfo);
            this.SetIconScale(this.boxShop.proInfo);
            this.SetIconScale(this.gemShop.proInfo);
            //this.SetIconScale(this.proShop.proInfo);
            this.SetIconScale(this.lotteryShop.proInfo);
            this.SetIconScale(this.lotteryShop.oneBtn);
            this.SetIconScale(this.lotteryShop.tenBtn);
            this.SetProShopH();
            if (H52D_Framework.IsIOSExamine()) {
                this.gemShop.visible = false;
                this.gemShop.height = 0;
            }
        };
        /**设置抽奖界面 */
        ListShopView.prototype.SetLotteryShop = function () {
            var oneData = this._lotteryOneList;
            var tenData = this._lotteryTenList;
            var cusNum = H52D_Framework.MasterPlayer.Instance.player.CunstLevel;
            var gemNum = H52D_Framework.ShopLogic.Instance.gemNum;
            //单抽
            for (var info in oneData) {
                if (oneData[info].customNum <= cusNum) {
                    var onePrict = oneData[info].needDiamond;
                    this.lotteryShop.onePrict.changeText(onePrict.toString());
                    this.lotteryShop.oneNum.changeText("x1");
                    var ticketNum = H52D_Framework.ShopLogic.Instance.ticketNum;
                    gemNum > onePrict ? this.lotteryShop.onePrict.color = "#ffffff" : this.lotteryShop.onePrict.color = "#ff0400";
                    ticketNum >= 1 ? this.lotteryShop.oneNum.color = "#ffffff" : this.lotteryShop.oneNum.color = "#ff0400";
                    break;
                }
            }
            //十连抽
            var bDiscount = H52D_Framework.DiscountManager.Instance.IsStartLotteryAction();
            var discountNum = H52D_Framework.DiscountManager.Instance.LotteryMoney;
            for (var info in tenData) {
                if (tenData[info].customNum <= cusNum) {
                    var needgem = tenData[info].needDiamond;
                    if (bDiscount) {
                        this.lotteryShop.img_1.visible = false;
                        this.lotteryShop.tenPrict.visible = false;
                        this.lotteryShop.discount.visible = true;
                        this.lotteryShop.discountNum.text = "限时"; //discountNum / 10 + "折";
                        this.lotteryShop.residueNum.text = "今日剩余优惠次数：1/1";
                        this.lotteryShop.discount_1.text = needgem + "";
                        this.lotteryShop.discount_2.text = discountNum + "";
                        this.lotteryShop.new.visible = true;
                        gemNum > discountNum ? this.lotteryShop.discount_2.color = "#ffffff" : this.lotteryShop.discount_2.color = "#ff0400";
                        gemNum > needgem ? this.lotteryShop.discount_1.color = "#ffffff" : this.lotteryShop.discount_1.color = "#ff0400";
                    }
                    else {
                        this.lotteryShop.new.visible = false;
                        this.lotteryShop.residueNum.visible = false;
                        this.lotteryShop.img_1.visible = true;
                        this.lotteryShop.tenPrict.visible = true;
                        this.lotteryShop.discount.visible = false;
                        gemNum > needgem ? this.lotteryShop.tenPrict.color = "#ffffff" : this.lotteryShop.tenPrict.color = "#ff0400";
                        this.lotteryShop.tenPrict.text = needgem + "";
                    }
                    break;
                }
            }
        };
        /**关闭UI */
        ListShopView.prototype.CloseUI = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("ShopView", [H52D_Framework.ViewDownRoot]);
        };
        ListShopView.prototype.ChangeListHigth = function () {
            var _this = this;
            var bool = Boolean(this._MainView.halfPanel);
            if (bool) {
                H52D_Framework.OneTimer(300, Laya.Handler.create(this, function () {
                    _this.shopPanel.height = 270 * G_StageHeightScale;
                }), "ChangeListHigthShop");
            }
            else {
                this.shopPanel.height = 1030 * G_StageHeightScale;
            }
        };
        /**
         * 为list添加数据源
         */
        ListShopView.prototype.SetDataToList = function () {
            //首充数据装载  
            var Charge_Info = H52D_Framework.ShopLogic.Instance.ChargeData;
            var Charge_Frist = Charge_Info[ChargeDataEnum.eFristCharge];
            this._fristList = Charge_Frist;
            for (var info in Charge_Frist) {
                var data = Charge_Frist[info];
                var Reward_Info = H52D_Framework.RewardConfig[data.chargeReward].reWrad;
                for (var i in Reward_Info) {
                    this._fristItemList.push(Reward_Info[i]);
                }
            }
            //钻石充值数据装载
            //钻石充值商店
            var Charge_Gem = Charge_Info[ChargeDataEnum.eCharge];
            var Item_Gem = [];
            //老代码 有时间优化。。。
            for (var id in Charge_Gem) {
                var Charge_data = Charge_Gem[id];
                this._chargeList.push(Number(id));
                var Reward_data = H52D_Framework.RewardConfig[Charge_data.chargeReward].reWrad[1];
                this.Reward_gemGift.push(Reward_data);
            }
            for (var info in this.Reward_gemGift) {
                var Item_data = this.Reward_gemGift[info];
                this.Item_gemGift.push(H52D_Framework.ItemConfig[Item_data[2]]);
            }
            for (var Item_info in this.Item_gemGift) {
                var data = this.Item_gemGift[Item_info];
                var dw_data = data.dwUseEffect;
                for (var dw_info in dw_data) {
                    this.Reward_Gem.push(H52D_Framework.RewardConfig[dw_data[dw_info]]);
                }
            }
            this.gemShop.gemList.array = this._chargeList;
            this._boxList = H52D_Framework.ShopLogic.Instance.ShopData[ShopDataEnum.eBoxShop];
            //this._proList = ShopLogic.Instance.ShopData[ShopDataEnum.eProShop];
            this._lotteryOneList = H52D_Framework.ShopLogic.Instance.LotteryData[1];
            this._lotteryTenList = H52D_Framework.ShopLogic.Instance.LotteryData[2];
            this.boxShop.treList.array = this._boxList;
            //this.proShop.proList.array = this._proList;
            // this.firstShop.firstList.array = this._fristItemList;
        };
        /**
         * 设置商城list样式,首充
         * @param item 单个box
         * @param index 索引
        */
        // private SetFristListRender(item, index: number): void {
        // 	let info: any = this._fristItemList[index];
        // 	let Item_Info: any;
        // 	//物品数据类型
        // 	let Item_Id = info[BaseDefine.ItemSellContentId];
        // 	let Item_Num = info[BaseDefine.ItemNumSellContent];
        // 	let Item_Type = info[BaseDefine.ItemSellContentType];
        // 	let icon: Laya.Image = item.getChildByName('icon');
        // 	if (Item_Type == BaseDefine.ItemTypePro) {
        // 		Item_Info = ItemConfig[Item_Id];
        // 		if (Item_Info.dwItemTypes == BaseDefine.ItemSonTypeUesHero) {
        // 			let hero = HeroConfig[Item_Info.heroId];
        // 			//获取动画帧数成图片
        // 			let heroAin: Avatar = new Avatar(icon);
        // 			heroAin.Load(hero.strFacadeModel, 1, hero.modelScale * 2.7, icon.x + 77, icon.y + 180,
        // 				Laya.Handler.create(this, () => {
        // 					heroAin.Play(1, true, true, () => {
        // 					}, true)
        // 				}));
        // 		}
        // 		else {
        // 			icon.skin = "ui_icon/" + Item_Info.strIconID_B;
        // 		}
        // 	}
        // }
        /**刷新充值页面 */
        ListShopView.prototype.UpdateChargeList = function () {
            this.SetDataToList();
            this.gemShop.gemList.renderHandler = new Laya.Handler(this, this.SetChargeListRender);
        };
        /**刷新充值页面 */
        ListShopView.prototype.UpdateBoxList = function () {
            H52D_Framework.Tick.ClearAll(this);
            this.boxShop.treList.renderHandler = new Laya.Handler(this, this.SetBoxListRender);
        };
        /**
         * 设置商城list样式,充值
         * @param item 单个box
         * @param index 索引
        */
        ListShopView.prototype.SetChargeListRender = function (item, index) {
            var gemNum = item.getChildByName('gemNum');
            var gemName = item.getChildByName('gemName');
            var gemIcon = item.getChildByName('gemIcon');
            var buyBtn = gemIcon.getChildByName('buyBtn');
            var gemPrice = item.getChildByName('gemPrice');
            var discountBg = item.getChildByName('discountBg');
            var discount = discountBg.getChildByName('discount');
            var buyId = this.gemShop.gemList.array[index];
            var gemPrices = H52D_Framework.ShopLogic.Instance.ChargeData[ChargeDataEnum.eCharge][buyId]['Price'];
            var nItemQuality = this.Item_gemGift[index].dwItemQuality;
            var gemNames = H52D_Framework.StringInfoConfig[this.Item_gemGift[index].dwItemName].s;
            var gemNums = this.Reward_Gem[index].reWrad[1][H52D_Framework.BaseDefine.ItemRewardNum];
            var icon = this.Item_gemGift[index].strIconID_B;
            var discountNum = H52D_Framework.ShopLogic.Instance.ChargeData[ChargeDataEnum.eCharge][buyId]['firstChargeRate'];
            discountBg.visible = H52D_Framework.ShopLogic.Instance.isFristCharge(1, buyId);
            if (H52D_Framework.ShopLogic.Instance.isFristCharge(1, buyId)) {
                discount.text = discountNum + "倍";
                gemNums *= discountNum;
            }
            gemName.changeText(gemNames);
            gemName.color = H52D_Framework.BaseDefine.LabelColor[nItemQuality];
            gemNum.changeText("x" + gemNums);
            gemPrice.changeText(gemPrices);
            gemIcon.skin = "ui_icon/" + icon;
            this.SetIconScale(gemIcon);
            if (H52D_Framework.ShopLogic.Instance.nIdx == buyId) {
                var bool = H52D_Framework.ShopLogic.Instance.isFristCharge(1, buyId);
                this.PlayEffect(bool, buyBtn);
            }
            buyBtn.on(Laya.Event.CLICK, this, this.ToBuyGemInterface, [ChargeDataEnum.eCharge, buyId, gemNames]);
        };
        /**
         * 设置商城list样式，宝箱
         * @param item 单个box
         * @param index 索引
        */
        ListShopView.prototype.SetBoxListRender = function (item, index) {
            var _this = this;
            var resName = item.getChildByName('resName');
            var resIcon = item.getChildByName('resIcon');
            var buyBtn = resIcon.getChildByName('buyBtn');
            var resPrice = item.getChildByName('resPrice');
            var priceType = item.getChildByName('priceType');
            var discountBg = item.getChildByName('discountBg');
            var discount = discountBg.getChildByName('discount');
            var activityTime = item.getChildByName('activityTime');
            var info = this._boxList[index];
            //出售内容
            var sellContent = info.sellContent;
            //商品类型
            var nItemType = sellContent[H52D_Framework.BaseDefine.ItemSellContentType];
            discountBg.visible = activityTime.visible = H52D_Framework.DiscountManager.Instance.IsStartBoxAction();
            if (nItemType == H52D_Framework.BaseDefine.ItemTypePro) {
                var nItemID = sellContent[H52D_Framework.BaseDefine.ItemSellContentId];
                var nItemNum = sellContent[H52D_Framework.BaseDefine.ItemNumSellContent];
                var nItemPrice = info.Price[H52D_Framework.BaseDefine.ItemIdPrice];
                var nItemPriceType = info.Price[H52D_Framework.BaseDefine.ItemIdCurrency];
                //道具信息
                var Item_Info = H52D_Framework.ItemConfig[nItemID];
                var nItemName_1 = H52D_Framework.StringInfoConfig[Item_Info.dwItemName] ? H52D_Framework.StringInfoConfig[Item_Info.dwItemName].s : "未匹配Name";
                var nItemQuality = Item_Info.dwItemQuality;
                var color = H52D_Framework.BaseDefine.LabelColor[nItemQuality];
                H52D_Framework.SetHtmlStyle(resName, 24, color, "center", true);
                resPrice.changeText(nItemPrice);
                nItemPriceType == 1 ? priceType.skin = "ui_icon/icon_prop_012.png" : priceType.skin = "ui_icon/icon_prop_013.png";
                resName.innerHTML = nItemName_1;
                var bbb = H52D_Framework.DiscountManager.Instance.getBoxTims(index + 1) < H52D_Framework.DiscountManager.Instance.nBoxMaxTims;
                //是否打折
                if (discountBg.visible && H52D_Framework.DiscountManager.Instance.getBoxTims(index + 1) < H52D_Framework.DiscountManager.Instance.nBoxMaxTims) {
                    var money = H52D_Framework.DiscountManager.Instance.tBoxMoney[index + 1];
                    var disNum = money / nItemPrice * 10;
                    discount.text = disNum.toFixed(1) + "折";
                    nItemPrice = money;
                    resName.innerHTML = nItemName_1 + "(" + H52D_Framework.DiscountManager.Instance.getBoxTims(index + 1) + "/" + H52D_Framework.DiscountManager.Instance.nBoxMaxTims + ")";
                    //活动倒计时
                    var time_1 = H52D_Framework.DiscountManager.Instance.tBoxSvot - H52D_Framework.Time.serverSecodes;
                    activityTime.text = H52D_Framework.GetFormatNumTime(time_1);
                    resPrice.changeText(nItemPrice);
                    H52D_Framework.Tick.Loop(1000, this, function () {
                        time_1 = H52D_Framework.DiscountManager.Instance.tBoxSvot - H52D_Framework.Time.serverSecodes;
                        if (time_1 <= 0 || H52D_Framework.DiscountManager.Instance.getBoxTims(index + 1) >= H52D_Framework.DiscountManager.Instance.nBoxMaxTims) {
                            _this.UpdateBoxList();
                            resName.innerHTML = nItemName_1;
                        }
                        else {
                            resName.innerHTML = nItemName_1 + "(" + H52D_Framework.DiscountManager.Instance.getBoxTims(index + 1) + "/" + H52D_Framework.DiscountManager.Instance.nBoxMaxTims + ")";
                        }
                        activityTime.text = H52D_Framework.GetFormatNumTime(time_1);
                    }, [], false);
                }
                else {
                    discountBg.visible = activityTime.visible = false;
                    resName.innerHTML = nItemName_1;
                }
                resIcon.skin = "ui_icon/" + Item_Info.strIconID_B;
                resIcon.width = 168;
                resIcon.height = 162;
                buyBtn.on(Laya.Event.CLICK, this, this.ClickBoxItem, [ShopDataEnum.eBoxShop, info.id, index, "宝箱详情", OpenType.eBox, nItemPrice]);
                this.SetIconScale(resIcon);
            }
        };
        ListShopView.prototype.UpdateActivityTime = function (text) {
        };
        ListShopView.prototype.PlayEffect = function (bool, btn) {
            var _this = this;
            if (this._moneyEffectBg) {
                this._moneyEffectBg.Destroy();
            }
            if (bool) {
                this._moneyEffectBg = new H52D_Framework.Avatar(btn);
                this._moneyEffectBg.Load("res/effect/effect_ui_shangcheng/effect_ui_shangcheng.sk", 1, 3.5, 110, 110, Laya.Handler.create(this, function () {
                    _this._moneyEffectBg.Play("effect_ui_shangcheng", true, true, function () {
                    });
                }));
            }
            else {
                if (this._moneyEffectBg) {
                    this._moneyEffectBg.Destroy();
                }
            }
        };
        /**
         * 设置商城list样式，道具
         * @param item 单个box
         * @param index 索引
        */
        ListShopView.prototype.SetProListRender = function (item, index) {
            var proBj = item.getChildByName('proBj');
            var proNum = item.getChildByName('proNum');
            var proName = item.getChildByName('proName');
            var proIcon = item.getChildByName('proIcon');
            var buyBtn = proIcon.getChildByName('buyBtn');
            var proPrice = item.getChildByName('proPrice');
            var proPriceType = item.getChildByName('proPriceType');
            var info = this._proList[index];
            //出售内容
            var sellContent = info.sellContent;
            //商品类型
            var nItemType = sellContent[H52D_Framework.BaseDefine.ItemSellContentType];
            var nItemID = sellContent[H52D_Framework.BaseDefine.ItemSellContentId];
            var nItemNum = sellContent[H52D_Framework.BaseDefine.ItemNumSellContent];
            var nItemPrice = info.Price[H52D_Framework.BaseDefine.ItemIdPrice];
            var nItemPriceType = info.Price[H52D_Framework.BaseDefine.ItemIdCurrency];
            if (nItemPriceType == 1) {
                proPriceType.skin = "ui_icon/icon_prop_012.png";
            }
            else {
                proPriceType.skin = "ui_icon/icon_prop_013.png";
            }
            if (nItemType == H52D_Framework.BaseDefine.ItemTypePro) {
                //道具信息
                var Item_Info = H52D_Framework.ItemConfig[nItemID];
                var nItemQuality = Item_Info.dwItemQuality;
                var nItemName = H52D_Framework.StringInfoConfig[Item_Info.dwItemName] ? H52D_Framework.StringInfoConfig[Item_Info.dwItemName].s : "未匹配Name";
                if (Item_Info.dwItemTypes != H52D_Framework.BaseDefine.ItemSonTypeUesHero) {
                    buyBtn.on(Laya.Event.CLICK, this, this.ClickBoxItem, [ShopDataEnum.eProShop, info.id, index, "道具详情", OpenType.ePro, nItemPrice]);
                }
                else {
                    buyBtn.on(Laya.Event.CLICK, this, this.ClickBoxItem, [ShopDataEnum.eProShop, info.id, index, "英雄详情", OpenType.eHero, nItemPrice]);
                }
                this.SetIconScale(proIcon);
                proPrice.changeText(nItemPrice);
                proIcon.skin = "ui_icon/" + Item_Info.strIconID_B;
                proName.changeText(nItemName);
                proName.color = H52D_Framework.BaseDefine.LabelColor[nItemQuality];
                proNum.visible = nItemNum != 1;
                proNum.changeText("X" + nItemNum);
                proBj.skin = H52D_Framework.BaseDefine.QualityList[nItemQuality];
            }
            else if (nItemType == H52D_Framework.BaseDefine.ItemTypeEquip) {
            }
            else if (nItemType == H52D_Framework.BaseDefine.ItemTypeHero) {
            }
            else if (nItemType == H52D_Framework.BaseDefine.ItemTypePet) {
                var pet = new H52D_Framework.BPetVo(nItemID);
                buyBtn.on(Laya.Event.CLICK, this, this.ClickBoxItem, [ShopDataEnum.eProShop, info.id, index, "神兽详情", OpenType.ePet, nItemPrice]);
                proIcon.skin = "ui_icon/" + pet.strPetIcon;
                proName.changeText(pet.petName);
                proName.color = H52D_Framework.BaseDefine.PetColor_label[pet.petColor];
                proNum.visible = nItemNum != 1;
                proNum.changeText("X" + nItemNum);
                proBj.skin = H52D_Framework.BaseDefine.QualityList[pet.petColor];
            }
        };
        /**
         * 点击宝箱，打开宝箱tips
         * @param nType 商城类型
         * @param nID 商品ID
         */
        ListShopView.prototype.ClickBoxItem = function (nType, nID, index, name, openType, nprice) {
            var num = index + 1;
            var cfg = H52D_Framework.MarketConfig[nType][num];
            var price = nprice;
            var PriceType = cfg.Price[H52D_Framework.BaseDefine.ItemIdCurrency];
            var boxId = cfg.sellContent[H52D_Framework.BaseDefine.ItemSellContentId];
            var proNum = cfg.sellContent[H52D_Framework.BaseDefine.ItemNumSellContent];
            var proIcon;
            if (openType == OpenType.ePet) {
                proIcon = 0;
            }
            else {
                proIcon = H52D_Framework.ItemConfig[boxId].strIconID_B;
            }
            var tipName = name;
            H52D_Framework.UIManager.Instance.CreateUI("TipsTreasureView", [H52D_Framework.ViewToppestRoot, nType, boxId, price, PriceType, num, tipName, openType, proIcon, proNum]);
        };
        ListShopView.prototype.SetIconScale = function (icon) {
            icon.on(Laya.Event.MOUSE_MOVE, this, function () {
                icon.scale(1.07, 1.07);
            });
            icon.on(Laya.Event.MOUSE_OUT, this, function () {
                icon.scale(1, 1);
            });
            icon.on(Laya.Event.MOUSE_DOWN, this, function () {
                icon.scale(0.93, 0.93);
            });
            icon.on(Laya.Event.MOUSE_UP, this, function () {
                icon.scale(1, 1);
            });
        };
        /**
         * 跳转充值界面
         * @param goodsType 商品类型
         * @param goodsId 商品id
         * @param goodsDesc 商品描述
         */
        ListShopView.prototype.ToBuyGemInterface = function (goodsType, goodsId, goodsDesc) {
            H52D_Framework.BaiDuSDK.Instance.ToRecharge(goodsType, goodsId, goodsDesc);
        };
        /** 跳到钻石充值商城*/
        ListShopView.prototype.ToGemShop = function (Idx) {
            H52D_Framework.ShopLogic.Instance.nIdx = Idx;
            this.UpdateChargeList();
            this.shopPanel.vScrollBar.value = this.gemShop.y;
        };
        /**
         * 购买按钮
         * @param nType 商品类型
         * @param nId 商品ID
         */
        ListShopView.prototype.BuyItems = function (nType, nId, index) {
            var num = index + 1;
            H52D_Framework.ShopLogic.Instance.SendBuyMsg(nType, num, 1);
        };
        ListShopView.prototype.ClickLotteryBtn = function (lotteryEnum) {
            var _this = this;
            if (this._SendLotteryFlag == false) {
                return;
            }
            this._SendLotteryFlag = false;
            //发送抽奖请求
            H52D_Framework.ShopLogic.Instance.SendLotteryMsg(lotteryEnum);
            H52D_Framework.OneTimer(1000, Laya.Handler.create(this, function () {
                _this._SendLotteryFlag = true;
            }), "ClickLotteryBtn");
        };
        /** 点击提示规则
         * @param 提示类型
         */
        ListShopView.prototype.ClickHintRule = function (ruleEnum) {
            switch (ruleEnum) {
                case ShopEnum.eFirstRecharge:
                    break;
                case ShopEnum.eGem:
                    break;
                case ShopEnum.eTreasureBox:
                    break;
                case ShopEnum.eLottery:
                    this.OpenLotteryInfo();
                    break;
                case ShopEnum.ePro:
                    break;
                default:
                    break;
            }
        };
        /**打开抽奖查看信息界面 */
        ListShopView.prototype.OpenLotteryInfo = function () {
            var data_id = [];
            var reward_id;
            var reWrad_data = [];
            var front_id;
            var frist = true;
            for (var type in H52D_Framework.LotteryConfig) {
                var data_type = H52D_Framework.LotteryConfig[type];
                for (var info in data_type) {
                    var customNum = Number(data_type[info].customNum);
                    var customsOrder = H52D_Framework.MasterPlayer.Instance.player.CunstLevel;
                    if (frist) {
                        if (customNum >= customsOrder) {
                            frist = false;
                            front_id = data_type[info].id;
                            reWrad_data.push(H52D_Framework.RewardConfig[front_id].reWrad);
                            break;
                        }
                    }
                    var length_1 = H52D_Framework.GetTabLength(data_type);
                    if (customNum > customsOrder) {
                        if (frist) {
                            frist = false;
                            reward_id = data_type[info].id;
                            reWrad_data.push(H52D_Framework.RewardConfig[reward_id].reWrad);
                        }
                        else {
                            reWrad_data.push(H52D_Framework.RewardConfig[front_id].reWrad);
                        }
                        break;
                    }
                    if (customsOrder > customNum && length_1 == Number(info)) {
                        if (frist) {
                            frist = false;
                            reward_id = data_type[info].id;
                            reWrad_data.push(H52D_Framework.RewardConfig[reward_id].reWrad);
                        }
                        else {
                            reWrad_data.push(H52D_Framework.RewardConfig[front_id].reWrad);
                        }
                        break;
                    }
                    frist = false;
                    front_id = data_type[info].id;
                }
            }
            H52D_Framework.UIManager.Instance.CreateUI("ShopInfoView", [H52D_Framework.ViewUpRoot, "奖励预览", "抽奖有概率获得奖励如下：", reWrad_data]);
        };
        /**自定义商城的高度 */
        ListShopView.prototype.SetProShopH = function () {
            var proNum = this._proList.length;
            var boxNum = this._boxList.length;
            var boxH = 272;
            var wNum = 3;
            var proh = (Math.floor(proNum / wNum) + 1) * boxH;
            var boxh = (Math.floor(boxNum / wNum)) * boxH;
            this.boxShop.treList.height = boxh;
            this.boxShop.height = boxh + 60;
        };
        return ListShopView;
    }(ui.main.list.ListShopViewUI));
    H52D_Framework.ListShopView = ListShopView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ListShopView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var MainListViewUI = ui.main.subinterface.MainListViewUI;
    /**
     * @class：列表视图
     * @author：zhangyusong
     */
    var MainListView = /** @class */ (function (_super) {
        __extends(MainListView, _super);
        function MainListView() {
            var _this = _super.call(this) || this;
            /** 全屏位置 */
            _this.local_full = 0;
            /** 半屏位置 */
            _this.local_half = 807 * G_StageHeightScale;
            _this._bBoxRun = false;
            _this.InitView();
            _this.InitEvent();
            return _this;
        }
        MainListView.prototype.GetMainBtn = function (type) {
            switch (type) {
                case E_OpenGrade.ROLE:
                    return this.btn_role;
                case E_OpenGrade.HERO:
                    return this.btn_hero;
                case E_OpenGrade.EQUIP:
                    return this.btn_equip;
                case E_OpenGrade.PET:
                    return this.btn_pet;
                case E_OpenGrade.ACTION:
                    return this.btn_active;
                case E_OpenGrade.SHOP:
                    return this.btn_shop;
            }
        };
        MainListView.prototype.InitView = function () {
            var _this = this;
            this.curr_panel = E_OpenGrade.EMPTY;
            this.halfPanel = true;
            this.ui_box.y = G_StageHeight;
            this.local_start = this.ui_box.y;
            H52D_Framework.ViewUILogic.Instance.listView = this;
            H52D_Framework.ViewUILogic.Instance.OpenPanel = E_OpenGrade.EMPTY;
            H52D_Framework.Tick.Once(3000, this, function () {
                _this.ShowRedPoint(E_OpenGrade.PET);
                _this.ShowRedPoint(E_OpenGrade.ROLE);
                _this.ShowRedPoint(E_OpenGrade.HERO);
                _this.ShowRedPoint(E_OpenGrade.EQUIP);
                _this.ShowRedPoint(E_OpenGrade.SHOP);
                _this.ShowRedPoint(E_OpenGrade.ACTION);
            });
        };
        MainListView.prototype.InitEvent = function () {
            var _this = this;
            this.btn_role.on(Laya.Event.CLICK, this, this.OnPanelClick, [E_OpenGrade.ROLE]);
            this.btn_hero.on(Laya.Event.CLICK, this, this.OnPanelClick, [E_OpenGrade.HERO]);
            this.btn_pet.on(Laya.Event.CLICK, this, this.OnPanelClick, [E_OpenGrade.PET]);
            this.btn_equip.on(Laya.Event.CLICK, this, this.OnPanelClick, [E_OpenGrade.EQUIP]);
            this.btn_active.on(Laya.Event.CLICK, this, this.OnPanelClick, [E_OpenGrade.ACTION]);
            this.btn_shop.on(Laya.Event.CLICK, this, this.OnPanelClick, [E_OpenGrade.SHOP]);
            this.btn_ui_max.on(Laya.Event.CLICK, this, function () {
                _this.halfPanel = !_this.halfPanel;
                H52D_Framework.Event.DispatchEvent("changelisthigth", [_this.halfPanel]);
                _this.PanelMove();
            });
            this.btn_ui_close.on(Laya.Event.CLICK, this, this.PanelClose, [null]);
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.BOTTOM_SET_PANEL, Laya.Handler.create(this, this.OpenPanel));
            // Event.RegistEvent(EventDefine.BOTTOM_GET_PANEL, Laya.Handler.create(this, this.HalfPanel));
            H52D_Framework.Event.RegistEvent("PanelClose", Laya.Handler.create(this, this.PanelClose));
            H52D_Framework.Event.RegistEvent("ShowRedPoint", Laya.Handler.create(this, this.ShowRedPoint));
            H52D_Framework.Event.RegistEvent("OnPanelClick", Laya.Handler.create(this, this.OnPanelClick, [E_OpenGrade]));
            H52D_Framework.Event.RegistEvent("Role_lvup", Laya.Handler.create(this, this.OpenEffect));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT, Laya.Handler.create(this, this.CunstomCurrent));
            H52D_Framework.MainActionLogic.Instance.ShowRedPoint();
            H52D_Framework.ViewUILogic.Instance.roleLvUp = this.btn_role;
            H52D_Framework.Tick.Loop(5000, this, this.UpdateRed);
        };
        MainListView.prototype.UpdateRed = function () {
            H52D_Framework.WroldBossManager.Instance.ShowPrint();
            this.ShowRedPoint(E_OpenGrade.HERO);
            this.ShowRedPoint(E_OpenGrade.ACTION);
        };
        MainListView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.BOTTOM_SET_PANEL, Laya.Handler.create(this, this.OpenPanel));
            //Event.RemoveEvent(EventDefine.BOTTOM_GET_PANEL, Laya.Handler.create(this, this.HalfPanel));
            H52D_Framework.Event.RemoveEvent("PanelClose", Laya.Handler.create(this, this.PanelClose));
            H52D_Framework.Event.RemoveEvent("ShowRedPoint", Laya.Handler.create(this, this.ShowRedPoint));
            H52D_Framework.Event.RemoveEvent("OnPanelClick", Laya.Handler.create(this, this.OnPanelClick, [E_OpenGrade]));
            H52D_Framework.Event.RemoveEvent("Role_lvup", Laya.Handler.create(this, this.OpenEffect));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT, Laya.Handler.create(this, this.CunstomCurrent));
        };
        MainListView.prototype.CunstomCurrent = function () {
            this.Btn_control();
        };
        /** 显示红点 */
        MainListView.prototype.ShowRedPoint = function (type, open) {
            switch (type) {
                case E_OpenGrade.ROLE:
                    this.role_point.visible = !H52D_Framework.SignInLogic.Instance.ToDayAlr || H52D_Framework.AchievenManger.Instance.showPoint() || H52D_Framework.MailLogic.Inst.checkShowRed || H52D_Framework.DiscountManager.Instance.IsShowShopPint();
                    break;
                case E_OpenGrade.HERO:
                    this.hero_point.visible = H52D_Framework.HeroManager.Instance.HeroMainRed();
                    break;
                case E_OpenGrade.EQUIP:
                    this.equip_point.visible = H52D_Framework.EquipManager.Instance.IsMainShowRed();
                    break;
                case E_OpenGrade.PET:
                    this.pet_point.visible = H52D_Framework.PetManager.Instance.IsMainShowRed();
                    break;
                case E_OpenGrade.ACTION:
                    this.active_point.visible = open || H52D_Framework.WroldBossManager.Instance.ShowPrint();
                    break;
                case E_OpenGrade.SHOP:
                    this.shop_point.visible = H52D_Framework.DiscountManager.Instance.IsShowShopPint();
                    break;
            }
        };
        MainListView.prototype.OpenEffect = function () {
            this.Role_lvup_Effect(H52D_Framework.ViewUILogic.Instance.roleLvUp);
        };
        /**角色升级特效 */
        MainListView.prototype.Role_lvup_Effect = function (pos) {
            var apos = new H52D_Framework.Avatar(pos);
            apos.Load("res/effect/effect_ui_shengji/effect_ui_shengji.sk", 1, 3.3, 80, 68, Laya.Handler.create(this, function () {
                apos.Play("effect_ui_shengji", false, true, function () {
                    apos.Destroy();
                });
            }));
        };
        MainListView.prototype.PanelSound = function () {
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/check.mp3");
            }
            H52D_Framework.OneTimer(100, Laya.Handler.create(this, function () {
                if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                    H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/menu_check.mp3");
                }
            }));
        };
        /**
         * 打开面板事件
         * @param clickType 面板类型
         */
        MainListView.prototype.OnPanelClick = function (clickType) {
            var _this = this;
            if (this._bBoxRun) {
                return;
            }
            this._clicktype = clickType;
            var leve = H52D_Framework.MasterPlayer.Instance.player.Level;
            var needLeve = H52D_Framework.OpenGradeConfig[clickType]["Level"];
            if (!needLeve) {
                needLeve = 0;
            }
            if (leve < needLeve) {
                var str = H52D_Framework.Format(H52D_Framework.SysPromptConfig[10007]["strPromptInfo"], needLeve, H52D_Framework.BaseDefine.ButtonStr[clickType]);
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
                return;
            }
            var ShowView = Laya.Handler.create(this, function () {
                var view_name;
                var getInImg;
                var condition = H52D_Framework.OpenCondition(clickType);
                if (!condition) {
                    return;
                }
                switch (clickType) {
                    case E_OpenGrade.ROLE:
                        view_name = "ListRoleView";
                        getInImg = _this.btn_role.getChildByName("getIn");
                        break;
                    case E_OpenGrade.HERO:
                        view_name = "ListHeroView";
                        getInImg = _this.btn_hero.getChildByName("getIn");
                        break;
                    case E_OpenGrade.PET:
                        view_name = "ListPetView";
                        getInImg = _this.btn_pet.getChildByName("getIn");
                        break;
                    case E_OpenGrade.EQUIP:
                        view_name = "ListEquipView";
                        getInImg = _this.btn_equip.getChildByName("getIn");
                        break;
                    case E_OpenGrade.ACTION:
                        view_name = "ListActionView";
                        getInImg = _this.btn_active.getChildByName("getIn");
                        break;
                    case E_OpenGrade.SHOP:
                        view_name = "ListShopView";
                        getInImg = _this.btn_shop.getChildByName("getIn");
                        break;
                }
                _this.SetBtnType();
                getInImg.visible = true;
                //当前面板没有打开
                if (H52D_Framework.ViewUILogic.Instance.OpenPanel == E_OpenGrade.EMPTY) {
                    _this.curr_panel = clickType;
                    H52D_Framework.UIManager.Instance.CreateUI(view_name, [_this.ui_panel, _this], Laya.Handler.create(_this, function (view) {
                        if (_this.ui_panel.numChildren > 1) {
                            _this.ui_panel.removeChild(view);
                        }
                        else {
                            view.x = 0;
                            view.y = 0;
                            _this.currPanel = view;
                        }
                    }));
                    _this.PanelMove();
                }
                else {
                    //是当前面板,则关闭
                    if (_this.curr_panel == clickType) {
                        getInImg.visible = false;
                        _this.PanelClose();
                    }
                    else {
                        //不是当前面板则直接打开
                        _this.curr_panel = clickType;
                        getInImg.visible = true;
                        if (_this.ui_panel.numChildren > 0) {
                            _this.ui_panel.removeChildren();
                            _this.currPanel.Destroy();
                        }
                        H52D_Framework.UIManager.Instance.CreateUI(view_name, [_this.ui_panel, _this], Laya.Handler.create(_this, function (view) {
                            view.x = 0;
                            view.y = 0;
                            _this.currPanel = view;
                        }));
                    }
                }
                _this.btn_ui_max.visible = true;
            });
            if (H52D_Framework.HeroPosition.Instance.bChange) {
                H52D_Framework.Event.DispatchEvent("btn_closes", ShowView);
            }
            else {
                ShowView.run();
            }
        };
        /**下方按钮 */
        MainListView.prototype.SetBtnType = function () {
            for (var i = 1; i <= 6; i++) {
                this['getIn' + i].visible = false;
            }
        };
        MainListView.prototype.OpenPanel = function (half, callBack) {
            this.halfPanel = half;
            this.PanelMove(false, callBack);
            H52D_Framework.Event.DispatchEvent("changelisthigth", [this.halfPanel]);
        };
        Object.defineProperty(MainListView.prototype, "halfPanel", {
            get: function () {
                return this._halfPanel;
            },
            set: function (b) {
                this._halfPanel = b;
                H52D_Framework.ViewUILogic.Instance.halfPanel = b;
                this.btn_ui_up.visible = b;
                this.btn_ui_down.visible = !b;
            },
            enumerable: true,
            configurable: true
        });
        MainListView.prototype.PanelMove = function (close, handler) {
            var _this = this;
            if (close === void 0) { close = false; }
            var _y;
            //关闭界面
            if (close) {
                _y = this.local_start;
                H52D_Framework.GetInfoAttr.Instance.IsAllScreen = false;
            }
            else { //缩放界面
                _y = this.halfPanel ? this.local_half : this.local_full;
                H52D_Framework.GetInfoAttr.Instance.IsAllScreen = !this.halfPanel;
            }
            var time = Math.abs(this.ui_box.y - _y) * 0.3; //位移×系数=移动时间（毫秒）
            this._bBoxRun = true;
            H52D_Framework.TweenList.to(this, this.ui_box, { y: _y }, time, function () {
                _this.ui_box.y = _y;
                if (_this._bBoxRun) {
                    _this._bBoxRun = false;
                    if (handler) {
                        handler.run();
                    }
                }
            });
            if (this.halfPanel) {
                this.bombg.y = this.ui_panel.y;
            }
            else {
                this.bombg.y = 0;
            }
            H52D_Framework.ViewUILogic.Instance.OpenPanel = this._clicktype;
            this.PanelSound();
        };
        /** 关闭面板 */
        MainListView.prototype.PanelClose = function (callBack) {
            var _this = this;
            if (this.currPanel) {
                if (H52D_Framework.HeroPosition.Instance.bChange) {
                    H52D_Framework.Event.DispatchEvent("btn_closes");
                    return;
                }
                this.currPanel.Destroy();
            }
            this.SetBtnType();
            this.PanelMove(true, Laya.Handler.create(this, function () {
                //清空面板
                if (_this.ui_panel.numChildren > 0) {
                    _this.ui_panel.removeChildren();
                }
                if (callBack) {
                    callBack.run();
                }
            }));
            H52D_Framework.ViewUILogic.Instance.OpenPanel = E_OpenGrade.EMPTY;
            this.PanelSound();
        };
        MainListView.prototype.Btn_control = function () {
            var bool = H52D_Framework.WroldBossManager.Instance.View_Control();
            this.bg.visible = this.top_bg.visible = bool;
        };
        return MainListView;
    }(MainListViewUI));
    H52D_Framework.MainListView = MainListView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainListView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* 主界面背景
* 通关推图
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("MainView", [
        { url: "res/ui/ui_stareffect.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_wroldboss.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
    ]);
    var MainView = /** @class */ (function (_super) {
        __extends(MainView, _super);
        function MainView() {
            var _this = _super.call(this) || this;
            _this.name = "MainView";
            _this.InitView();
            _this.InitEvent();
            return _this;
        }
        MainView.prototype.InitView = function () {
            this.visible = false;
            laya.events.MouseManager.multiTouchEnabled = false; //关闭多点触控
            this.click = new H52D_Framework.MainClickView();
            this.addChild(this.click);
            this.click.top = this.click.bottom = this.click.centerX = 0;
            this.control = new H52D_Framework.MainControlView();
            this.addChild(this.control);
            this.control.top = this.control.bottom = this.control.left = this.control.right = 0;
            this.customs = new H52D_Framework.MainCustomsView();
            this.addChild(this.customs);
            this.customs.top = this.customs.centerX = 0;
            this.dps = new H52D_Framework.MainDpsView();
            this.addChild(this.dps);
            this.dps.centerX = 0;
            this.dps.bottom = 258;
            this.skill = new H52D_Framework.MainSkillView();
            this.addChild(this.skill);
            this.skill.centerX = 0;
            this.skill.bottom = 59;
            this.bubble = new H52D_Framework.MainBubbleView();
            this.addChild(this.bubble);
            this.bubble.bottom = this.bubble.centerX = 0;
            this.list = new H52D_Framework.MainListView();
            this.addChild(this.list);
            this.list.top = this.list.bottom = this.list.centerX = 0;
            this.boss = new H52D_Framework.MainBossView();
            this.addChild(this.boss);
            this.boss.top = 355;
            this.boss.centerX = 0;
        };
        MainView.prototype.InitEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            H52D_Framework.Event.RegistEvent("ClearMainView", Laya.Handler.create(this, this.Clear));
            H52D_Framework.Event.RegistEvent("ShowMainView", Laya.Handler.create(this, this.showPanel));
        };
        MainView.prototype.Clear = function () {
        };
        MainView.prototype.showPanel = function () {
            this.visible = true;
        };
        MainView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent("ClearMainView", Laya.Handler.create(this, this.Clear));
            H52D_Framework.Event.RemoveEvent("ShowMainView", Laya.Handler.create(this, this.showPanel));
            this.click.Destroy();
            this.control.Destroy();
            this.customs.Destroy();
            this.dps.Destroy();
            this.skill.Destroy();
            this.bubble.Destroy();
            this.list.Destroy();
            this.boss.Destroy();
        };
        return MainView;
    }(ui.main.MainViewUI));
    H52D_Framework.MainView = MainView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var NoticeView = /** @class */ (function (_super) {
        __extends(NoticeView, _super);
        function NoticeView() {
            var _this = _super.call(this) || this;
            _this._msg = "";
            H52D_Framework.SetHtmlStyle(_this.noticeLabel, 30, "#ffffff", "left", true);
            _this.noticeLabel.style.wordWrap = false;
            _this.noticeLabel.style.stroke = 2;
            _this.noticeLabel.style.strokeColor = "#000000";
            // Tick.Loop(1000, this, this.Update);
            Laya.timer.loop(1, _this, _this.NewUpdate);
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            _this.noticeLabel.x = -10000000;
            return _this;
        }
        NoticeView.prototype.Destroy = function () {
            this.offAll();
            // Tick.ClearAll(this);
            // Laya.Tween.clearAll(this);
        };
        NoticeView.prototype.NewUpdate = function () {
            this.noticeLabel.x -= 5;
            var targetX = this.noticeLabel.x + this.noticeLabel.contextWidth + 10;
            if (targetX < 0) {
                this._msg = H52D_Framework.NoticeLogic.Inst.GetNoticeMsg();
                if (this._msg != "") {
                    this.noticeLabel.innerHTML = this._msg;
                    if (this.noticeLabel._childs.length > 0 && this.noticeLabel.contextWidth > 5) {
                        this.noticeLabel.x = 760;
                        this.noticeLabel.visible = true;
                        this.htmlBg.visible = true;
                    }
                    else {
                        this.noticeLabel.visible = false;
                        this.htmlBg.visible = false;
                    }
                }
                else {
                    this.noticeLabel.visible = false;
                    this.htmlBg.visible = false;
                }
            }
        };
        return NoticeView;
    }(ui.main.subinterface.NoticeViewUI));
    H52D_Framework.NoticeView = NoticeView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=NoticeView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var MainSkillViewUI = ui.main.subinterface.MainSkillViewUI;
    /**
     * @class：技能视图类
     * @author：zhangyusong
     */
    var MainSkillView = /** @class */ (function (_super) {
        __extends(MainSkillView, _super);
        function MainSkillView(type) {
            if (type === void 0) { type = ""; }
            var _this = _super.call(this) || this;
            _this.mpListWidth = 0;
            _this.skillNum = 0;
            /** 法力池 */
            _this._mpPool = 0;
            /** 法力值 */
            _this._mpValue = 0;
            /** 法力回复速度 */
            _this._mpRecoveryRate = 0;
            _this.type = type;
            _this.InitView();
            _this.InitEvent();
            return _this;
        }
        MainSkillView.prototype.Destroy = function () {
            Laya.Tween.clearAll(this);
            H52D_Framework.Event.RemoveEvent('UpdateBtnList', Laya.Handler.create(this, this.Show_Control));
            H52D_Framework.Event.RemoveEvent(this.type + "SkillUpdate", Laya.Handler.create(this, this.SkillUpdate));
            H52D_Framework.Event.RemoveEvent(this.type + "MpPoolChange", Laya.Handler.create(this, this.MpPoolChange));
            H52D_Framework.Event.RemoveEvent(this.type + "MpValueChange", Laya.Handler.create(this, this.MpValueChange));
            H52D_Framework.Event.RemoveEvent(this.type + "MpRecoveryRateChange", Laya.Handler.create(this, this.MpRecoveryRateChange));
            H52D_Framework.Event.RemoveEvent(this.type + "OnSkillClick", Laya.Handler.create(this, this.OnSkillClick));
            H52D_Framework.Event.RemoveEvent(this.type + "CaptainCd", Laya.Handler.create(this, this.UseCaptainSkill));
            H52D_Framework.Tick.ClearAll(this.captainSkill);
            this.skillModel.forEach(function (model) { model.Destroy(); });
            this.destroy();
        };
        Object.defineProperty(MainSkillView.prototype, "mpPool", {
            get: function () {
                return this._mpPool;
            },
            /** 法力上限 */
            set: function (value) {
                this._mpPool = value;
                this.ShowMpNum();
                this.MpListChange(100);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainSkillView.prototype, "mpValue", {
            get: function () {
                return this._mpValue;
            },
            /** 法力值 */
            set: function (value) {
                this._mpValue = value;
                //法力值发送到服务器
                H52D_Framework.OneTimer(1000, Laya.Handler.create(this, function () {
                    H52D_Framework.RemoteCall.Instance.Send("K_SetMP", value);
                }), "SendSetMp");
                this.ShowMpNum();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainSkillView.prototype, "mpRecoveryRate", {
            get: function () {
                return this._mpRecoveryRate;
            },
            /** 法力回升速度 */
            set: function (value) {
                this._mpRecoveryRate = value;
                this.ShowMpNum();
            },
            enumerable: true,
            configurable: true
        });
        MainSkillView.prototype.InitView = function () {
            //法力条初始化
            this.mpListWidth = this.mp_list.width;
            this.regist = false;
            this.Show_Control();
            this.SkillInit(this.Skill);
            this.MpPoolChange();
            this.MpValueChange(H52D_Framework.MasterPlayer.Instance.player.Mp);
            this.MpRecoveryRateChange();
        };
        MainSkillView.prototype.InitEvent = function () {
            H52D_Framework.Event.RegistEvent('UpdateBtnList', Laya.Handler.create(this, this.Show_Control));
            H52D_Framework.Event.RegistEvent(this.type + "CaptainSkillInit", Laya.Handler.create(this, this.CaptainSkillIcon));
            H52D_Framework.Event.RegistEvent(this.type + "SkillUpdate", Laya.Handler.create(this, this.SkillUpdate));
            H52D_Framework.Event.RegistEvent(this.type + "SkillLeveUp", Laya.Handler.create(this, this.SkillLeveUp));
            H52D_Framework.Event.RegistEvent(this.type + "MpPoolChange", Laya.Handler.create(this, this.MpPoolChange));
            H52D_Framework.Event.RegistEvent(this.type + "MpValueChange", Laya.Handler.create(this, this.MpValueChange));
            H52D_Framework.Event.RegistEvent(this.type + "MpRecoveryRateChange", Laya.Handler.create(this, this.MpRecoveryRateChange));
            H52D_Framework.Event.RegistEvent(this.type + "OnSkillClick", Laya.Handler.create(this, this.OnSkillClick));
            H52D_Framework.Event.RegistEvent(this.type + "CaptainCd", Laya.Handler.create(this, this.UseCaptainSkill));
        };
        /**
         * 技能初始化
         * @param value
         */
        MainSkillView.prototype.SkillInit = function (value) {
            var _this = this;
            this.skill = value;
            this.skillModel = [];
            //基础数据初始化
            var roleSkill = H52D_Framework.MainRoleLogic.Instance.roleSkill;
            this.skillNum = roleSkill.length;
            this.skill.array = roleSkill;
            this.skill.renderHandler = new Laya.Handler(this, function (item, index) {
                var model = new H52D_Framework.SkillModel(item, index, _this.type);
                model.UpdateMp(_this.mpValue);
                model.view.on(Laya.Event.CLICK, _this, _this.OnSkillClick, [index]);
                _this.skillModel.push(model);
                if (--_this.skillNum <= 0) {
                    _this.SkillUpdate();
                    H52D_Framework.MasterPlayer.Instance.player.SetSkillList();
                    for (var k in _this.skillModel) {
                        if (!_this.skillModel[k].lock) {
                            H52D_Framework.MasterPlayer.Instance.player.SetSkillList(_this.skillModel[k].type, _this.skillModel[k].vo.id);
                        }
                    }
                }
            });
            //队长技能初始化
            this.captainSkill = new H52D_Framework.CaptainSkill(this);
            MainSkillView.IsAuto = this.autoIcon.visible = true;
        };
        /** 更新法力池 */
        MainSkillView.prototype.MpPoolChange = function () {
            this.mpPool = H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeValue(51);
            this.RegistFrame();
        };
        /** 更新法力增加值 */
        MainSkillView.prototype.MpValueChange = function (value) {
            this.UpdateMp(this.mpValue + value, 20);
        };
        /** 更新法力恢复速度 */
        MainSkillView.prototype.MpRecoveryRateChange = function () {
            this.mpRecoveryRate = H52D_Framework.MasterPlayer.Instance.player.vo.attr.GetAttributeValue(53);
        };
        MainSkillView.prototype.CaptainSkillIcon = function (icon) {
            this.captainSkillIcon.skin = icon;
        };
        /** 技能更新 */
        MainSkillView.prototype.SkillUpdate = function () {
            this.MpPoolChange();
            //基础数据初始化
            var roleSkill = H52D_Framework.MainRoleLogic.Instance.roleSkill;
            for (var i = 0; i < roleSkill.length; i++) {
                var model = this.skillModel[i];
                model.level = roleSkill[i].lv;
                model.UpdateCd(roleSkill[i].cd);
                model.UpdateMp(this.mpValue);
            }
        };
        /** 技能升级 */
        MainSkillView.prototype.SkillLeveUp = function () {
            var roleSkill = H52D_Framework.MainRoleLogic.Instance.roleSkill;
            for (var i = 0; i < roleSkill.length; i++) {
                var model = this.skillModel[i];
                model.level = roleSkill[i].lv;
                model.UpdateMp(this.mpValue);
            }
        };
        /** 使用技能 */
        MainSkillView.prototype.OnSkillClick = function (index) {
            var monsterList = H52D_Framework.MonsterManager.Instance.monsterList;
            if (monsterList == {}) {
                return;
            }
            else {
                for (var k in monsterList) {
                    if (monsterList[k].IsDie) {
                        return;
                    }
                }
            }
            this.clearTick();
            var model = this.skillModel[index];
            this.mpValue -= model.vo.conMp;
            this.UpdateMp(this.mpValue, 200);
            model.StartUse();
            model.UpdateMp(this.mpValue);
            //使用技能数量
            H52D_Framework.MasterPlayer.Instance.ReqOnEvent(EventProEnum.UsePlayerSkill, 1);
        };
        /** 更新法力条 */
        MainSkillView.prototype.MpListChange = function (time) {
            if (time === void 0) { time = 1000; }
            if (this.updateTween) {
                Laya.Tween.clear(this.updateTween);
                this.updateTween = null;
            }
            var nMp = this.mpValue < this.mpPool ? this.mpValue : this.mpPool;
            this.updateTween = Laya.Tween.to(this.mp_list, { x: -this.mpListWidth * (1 - nMp / this.mpPool) }, time);
        };
        /**
         * 更新法力值
         * @param value 法力值
         * @param time 缓动时间（毫秒）
         */
        MainSkillView.prototype.UpdateMp = function (value, time) {
            if (time === void 0) { time = 1000; }
            if (value < 0) {
                value = 0;
            }
            this.mpValue = value;
            // 更新法力条
            this.MpListChange(time);
            // 帧函数
            this.RegistFrame();
        };
        /** 注册时间函数 */
        MainSkillView.prototype.RegistFrame = function () {
            if (this.regist)
                return;
            if (this.mpValue < this.mpPool) {
                this.regist = true;
                H52D_Framework.Tick.Loop(100, this, this.Frame);
            }
            else {
                this.regist = false;
            }
        };
        MainSkillView.prototype.Frame = function () {
            if (this.regist && this.mpValue < this.mpPool) {
                this.mpValue += this.mpRecoveryRate / 600;
                this.MpListChange(100);
            }
            else if (this.mpValue >= this.mpPool) {
                this.clearTick();
            }
            if (this.skillModel.length == 6) {
                //更新技能
                for (var i = 0; i < 6; i++) {
                    this.skillModel[i].UpdateMp(this.mpValue);
                }
            }
        };
        MainSkillView.prototype.clearTick = function () {
            this.regist = false;
            H52D_Framework.Tick.Clear(this, this.Frame);
        };
        MainSkillView.prototype.ShowMpNum = function () {
            this.tx_skill_num.text = (this._mpValue >> 0) + "/" + (this._mpPool >> 0);
            this.tx_skill_time.text = "(恢复:x/分钟)".replace("x", String(this.mpRecoveryRate));
        };
        /** 使用队长技能 */
        MainSkillView.prototype.UseCaptainSkill = function (cdTime) {
            this.captainSkill.UseCaptainSkill(cdTime);
        };
        MainSkillView.prototype.Show_Control = function () {
            this.bg.visible = H52D_Framework.WroldBossManager.Instance.Show;
        };
        /** 自动释放技能 */
        MainSkillView.IsAuto = false;
        return MainSkillView;
    }(MainSkillViewUI));
    H52D_Framework.MainSkillView = MainSkillView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainSkillView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var MainBossViewUI = ui.main.subinterface.MainBossViewUI;
    var path = "ui_icon/";
    /**
     * @class：
     * @author：zhangyusong
     */
    var MainBossView = /** @class */ (function (_super) {
        __extends(MainBossView, _super);
        function MainBossView() {
            var _this = _super.call(this) || this;
            _this.InitView();
            _this.InitEvent();
            return _this;
        }
        MainBossView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent('BossCome', Laya.Handler.create(this, this.BossCome));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT, Laya.Handler.create(this, this.Btn_control));
        };
        /** 视图清理 */
        MainBossView.prototype.Clear = function () {
            this.BossClear();
        };
        MainBossView.prototype.InitView = function () {
            this.tips_boss.alpha = 0;
            // this.SetShopPetVisible(PetManager.Instance.HasTimes > 0);
        };
        MainBossView.prototype.InitEvent = function () {
            H52D_Framework.Event.RegistEvent('BossCome', Laya.Handler.create(this, this.BossCome, [true]));
            H52D_Framework.Event.RegistEvent('ChallengeBossFail', Laya.Handler.create(this, this.BossCome, [false]));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT, Laya.Handler.create(this, this.Btn_control));
        };
        MainBossView.prototype.Btn_control = function () {
            var bool = H52D_Framework.WroldBossManager.Instance.View_Control();
            this.tips_boss.visible = bool;
        };
        /** boss来袭 */
        MainBossView.prototype.BossCome = function (success) {
            var _this = this;
            this.tips_boss.alpha = 0;
            this.challenge_boss.visible = success;
            this.fail_boss.visible = !success;
            this.tween1 = Laya.Tween.to(this.tips_boss, { alpha: 1 }, 600, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                H52D_Framework.Tick.Once(1000, _this, function () {
                    _this.tween2 = Laya.Tween.to(_this.tips_boss, { alpha: 0 }, 1000, Laya.Ease.linearIn, Laya.Handler.create(_this, function () {
                        _this.BossClear();
                    }));
                });
            }));
            H52D_Framework.Tick.Once(3000, this, function () {
                _this.BossClear();
            });
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/boss_appear.mp3");
            }
        };
        MainBossView.prototype.BossClear = function () {
            this.tips_boss.alpha = 0;
            if (this.tween1)
                Laya.Tween.clear(this.tween1);
            if (this.tween2)
                Laya.Tween.clear(this.tween2);
        };
        return MainBossView;
    }(MainBossViewUI));
    H52D_Framework.MainBossView = MainBossView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainBossView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    var MainBubbleView = /** @class */ (function (_super) {
        __extends(MainBubbleView, _super);
        function MainBubbleView() {
            var _this = _super.call(this) || this;
            /**英雄对话初始时间 */
            _this._heroHreoTime = 0;
            /**队长技能提示次数 */
            _this._skillBubblNum = 1;
            /**队长技能提示时间 */
            _this._skillBubblTime = 15000;
            _this._bubbleImage = {
                0: _this.bubble_pet,
                1: _this.bubble_hreo,
                2: _this.bubble_monster,
                3: _this.bubble_skill
            };
            _this._cartridge = new H52D_Framework.Cartridge();
            _this.InitView();
            _this.InitEvent();
            return _this;
        }
        MainBubbleView.prototype.InitEvent = function () {
            H52D_Framework.Event.RegistEvent("ClearOneBubble", Laya.Handler.create(this, this.ClearOneBubble));
            H52D_Framework.Event.RegistEvent("StartBubbleMonster", Laya.Handler.create(this, this.StartBubbleMonster));
            H52D_Framework.Event.RegistEvent("ClearBubble", Laya.Handler.create(this, this.ClearBubble));
            H52D_Framework.Event.RegistEvent("SetClickPetButton", Laya.Handler.create(this, this.SetClickPetButton));
        };
        MainBubbleView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent("ClearOneBubble", Laya.Handler.create(this, this.ClearOneBubble));
            H52D_Framework.Event.RemoveEvent("StartBubbleMonster", Laya.Handler.create(this, this.StartBubbleMonster));
            H52D_Framework.Event.RemoveEvent("ClearBubble", Laya.Handler.create(this, this.ClearBubble));
            H52D_Framework.Event.RemoveEvent("SetClickPetButton", Laya.Handler.create(this, this.SetClickPetButton));
        };
        MainBubbleView.prototype.InitView = function () {
            this.bubble.visible = true;
            for (var i in this._bubbleImage) {
                this._bubbleImage[i].visible = false;
                this._bubbleImage[i].width = 220;
            }
            this._bubbleImage[2].width = 260;
            this.StartBubble();
        };
        /**气泡渐变 */
        MainBubbleView.prototype.SetBubbleScale = function (bubbleType, scale, hideTime) {
            var _this = this;
            //大小
            H52D_Framework.TweenList.to(this, this._bubbleImage[bubbleType], { scaleX: scale, scaleY: scale }, 200, function () {
                _this._bubbleImage[bubbleType].scale(1, 1);
                if (bubbleType == E_BubbleType.eHero)
                    return;
                H52D_Framework.Tick.Clear(_this, _this.SetBubbleAlpha);
                H52D_Framework.Tick.Once(hideTime, _this, _this.SetBubbleAlpha, [bubbleType]);
            }, 0, Laya.Ease.backInOut);
        };
        /**气泡渐变 */
        MainBubbleView.prototype.SetBubbleAlpha = function (bubbleType) {
            var _this = this;
            H52D_Framework.TweenList.to(this, this._bubbleImage[bubbleType], { alpha: 0 }, 1000, function () {
                _this._bubbleImage[bubbleType].visible = false;
                _this._bubbleImage[bubbleType].alpha = 0;
                _this._bubbleImage[bubbleType].scale(0, 0);
                H52D_Framework.BubbleManager.Instance.bMonsterFirst = false;
                H52D_Framework.Tick.Clear(_this, _this.SetBubbleAlpha);
            }, 0, Laya.Ease.linearIn);
        };
        /**强制关闭所有气泡
         * @param bubbleType 不关闭的气泡类型
         */
        MainBubbleView.prototype.ClearBubble = function (bubbleType) {
            if (bubbleType === void 0) { bubbleType = -1; }
            H52D_Framework.Tick.Clear(this, this.SetBubbleAlpha);
            for (var bubble in this._bubbleImage) {
                if (bubbleType != Number(bubble)) {
                    this._bubbleImage[bubble].visible = false;
                    this._bubbleImage[bubble].alpha = 1;
                    this._bubbleImage[bubble].scale(0, 0);
                }
            }
        };
        /**强制关闭指定气泡
         * @param bubbleType 不关闭的气泡类型
         */
        MainBubbleView.prototype.ClearOneBubble = function (bubbleType) {
            this._bubbleImage[bubbleType].visible = false;
            this._bubbleImage[bubbleType].alpha = 1;
            this._bubbleImage[bubbleType].scale(0, 0);
        };
        /**开启所有气泡入口 */
        MainBubbleView.prototype.StartBubble = function () {
            this._heroHreoTime = H52D_Framework.GameParamConfig.HeroTalkInterval * 1000;
            var monsterTime = H52D_Framework.GameParamConfig.MonsterTalkCD * 1000;
            H52D_Framework.Tick.Loop(this._heroHreoTime, this, this.RandTime);
            H52D_Framework.Tick.Loop(monsterTime, this, this.StartBubbleMonster, [E_BubbleType.eMonster, 1, null, true, true]);
            this.clickPet.on(Laya.Event.CLICK, this, this.StartBubblePet, [E_BubbleType.ePet, 1]);
            H52D_Framework.Tick.Loop(this._skillBubblTime, this, this.StartBubbleSkill, [E_BubbleType.eSkill, 1]);
        };
        MainBubbleView.prototype.RandTime = function () {
            var num = Math.random() * 100;
            var heroTalkProbability = H52D_Framework.GameParamConfig.HeroTalkProbability;
            if (!this.CheckCanShowBubble(-1)) {
                return;
            }
            if (num < heroTalkProbability) {
                this.StartBubbleHreo(E_BubbleType.eHero, 1);
                H52D_Framework.Tick.Clear(this, this.RandTime);
            }
            else {
                this._heroHreoTime = H52D_Framework.GameParamConfig.HeroTalkInterval * 1000;
            }
        };
        /**开启技能提示气泡 */
        MainBubbleView.prototype.StartBubbleSkill = function (bubbleType, scale) {
            var _this = this;
            if (scale === void 0) { scale = 1; }
            if (this._skillBubblNum >= 5) {
                return;
            }
            this._skillBubblNum++;
            var x = 370;
            var y = 820;
            var str = H52D_Framework.StringInfoConfig[7071].s;
            var hideTime = 4000;
            var html = this._bubbleImage[bubbleType].getChildByName('text');
            var strLen = str.length / 9 >> 0;
            html.width = this._bubbleImage[bubbleType].width - 8;
            this._bubbleImage[bubbleType].height = 64 + strLen * 26;
            H52D_Framework.SetHtmlStyle(html, 20, "#231614", "left", true);
            html.innerHTML = str;
            this._bubbleImage[bubbleType].x = x;
            this._bubbleImage[bubbleType].y = y;
            this._bubbleImage[bubbleType].visible = true;
            this._bubbleImage[bubbleType].alpha = 1;
            this._bubbleImage[bubbleType].scale(0, 0);
            //大小
            H52D_Framework.TweenList.to(this, this._bubbleImage[bubbleType], { scaleX: scale, scaleY: scale }, 200, function () {
                _this._bubbleImage[bubbleType].scale(1, 1);
                H52D_Framework.Tick.Once(hideTime, _this, function () {
                    H52D_Framework.TweenList.to(_this, _this._bubbleImage[bubbleType], { alpha: 0 }, 1000, function () {
                        _this._bubbleImage[bubbleType].visible = false;
                        _this._bubbleImage[bubbleType].alpha = 0;
                        _this._bubbleImage[bubbleType].scale(0, 0);
                    }, 0, Laya.Ease.linearIn);
                });
            }, 0, Laya.Ease.backInOut);
        };
        /**开启英雄气泡 */
        MainBubbleView.prototype.StartBubbleHreo = function (bubbleType, scale, heroTalkId) {
            var _this = this;
            if (!this.CheckCanShowBubble(-1)) {
                return;
            }
            var id = H52D_Framework.BubbleManager.Instance.RandomHeroBubbleID();
            if (id == null) {
                return;
            }
            this.ClearBubble(E_BubbleType.eSkill);
            var heroWord = H52D_Framework.HeroWordConfig[id];
            this._cartridge.Clear();
            var _loop_1 = function (heroTalkId_1) {
                var x = 0;
                var y = 0;
                var cfg = void 0;
                var heroid;
                var str = "";
                var hideTime = 0;
                var idx = heroTalkId_1;
                var func = Laya.Handler.create(this_1, function () {
                    heroid = heroWord[idx].heroid;
                    str = H52D_Framework.StringInfoConfig[heroWord[idx].word[1]].s;
                    hideTime = heroWord[idx].word[2];
                    if (!H52D_Framework.HeroCardManager.Instance.GetHeroCardByid(heroid)) {
                        return;
                    }
                    x = H52D_Framework.HeroCardManager.Instance.GetHeroCardByid(heroid).PosX + 20;
                    y = H52D_Framework.HeroCardManager.Instance.GetHeroCardByid(heroid).PosY - 72;
                    _this.SetBubble(bubbleType, 1, hideTime, str, 20, x, y);
                });
                this_1._cartridge.AddFunc(func);
                hideTime = heroWord[idx].word[2];
                this_1._cartridge.AddDelay(hideTime);
            };
            var this_1 = this;
            for (var heroTalkId_1 in heroWord) {
                _loop_1(heroTalkId_1);
            }
            var funss = Laya.Handler.create(this, function () {
                _this.SetBubbleAlpha(bubbleType);
                _this._heroHreoTime = H52D_Framework.GameParamConfig.HeroTalkCD * 1000;
                H52D_Framework.Tick.Loop(_this._heroHreoTime, _this, _this.RandTime);
            });
            this._cartridge.AddFunc(funss);
            this._cartridge.AddDelay(100);
            this._cartridge.Do();
        };
        /**开启怪物气泡 */
        MainBubbleView.prototype.StartBubbleMonster = function (bubbleType, scale, bubbleId, b, bfirst) {
            if (bfirst === void 0) { bfirst = false; }
            if (!this.CheckCanShowBubble(bubbleType)) {
                return;
            }
            H52D_Framework.BubbleManager.Instance.bMonsterFirst = bfirst;
            H52D_Framework.BubbleManager.Instance.bMonsterBubble = b;
            this.ClearBubble(E_BubbleType.eSkill);
            var x = 0;
            var y = 0;
            var cfg;
            var id = 0;
            var str = "";
            var hideTime = 0;
            var monId = 0;
            if (H52D_Framework.MonsterManager.Instance.monsterList == null || H52D_Framework.MonsterManager.Instance.monsterList[0] == null) {
                return;
            }
            monId = H52D_Framework.MonsterManager.Instance.monsterList[0].vo.id;
            var nameId = H52D_Framework.MonstorConfig[monId].NameId;
            id = bubbleId ? bubbleId : nameId;
            var MonstorWord = H52D_Framework.MonsterWordConfig[id].word;
            var MonstorCfgLen = H52D_Framework.GetTabLength(MonstorWord);
            var RandId = (Math.random() * MonstorCfgLen) + 1 << 0;
            var strId = H52D_Framework.MonsterWordConfig[id].word[RandId][1];
            str = H52D_Framework.StringInfoConfig[strId].s;
            hideTime = H52D_Framework.MonsterWordConfig[id].word[RandId][2];
            if (H52D_Framework.CustomsManager.Instance.bBoss) {
                x = H52D_Framework.MonsterManager.Instance.monsterList[0].PosX - 200;
                y = H52D_Framework.MonsterManager.Instance.monsterList[0].PosY - 300;
            }
            else {
                x = H52D_Framework.MonsterManager.Instance.monsterList[0].PosX - 150;
                y = H52D_Framework.MonsterManager.Instance.monsterList[0].PosY - 250;
            }
            this.SetBubble(bubbleType, 1, hideTime, str, 20, x, y);
        };
        /**开启神兽气泡 */
        MainBubbleView.prototype.StartBubblePet = function (bubbleType, scale, bubbleId) {
            if (!this.CheckCanShowBubble(bubbleType) || H52D_Framework.PetManager.Instance.CurrentpetID == 0) {
                return;
            }
            this.ClearBubble(E_BubbleType.eSkill);
            var x = 0;
            var y = 0;
            var cfg;
            var str = "";
            var strLen = 0;
            var hideTime = 0;
            var id = bubbleId;
            var petLen = H52D_Framework.GetTabLength(H52D_Framework.PetWordConfig);
            var sceneId = H52D_Framework.SceneManager.Instance.sceneId - 10000;
            id = (Math.random() * petLen) + 1 << 0;
            ;
            str = H52D_Framework.StringInfoConfig[H52D_Framework.PetWordConfig[id].word[1]].s;
            hideTime = H52D_Framework.PetWordConfig[id].word[2];
            x = H52D_Framework.PetPoint[sceneId][0] + 10;
            y = H52D_Framework.PetPoint[sceneId][1] - 80;
            this.SetBubble(bubbleType, 1, hideTime, str, 18, x, y);
        };
        /**
         * 设置气泡统一接口
         * @param bubbleType 气泡类型
         * @param scale 气泡大小
         * @param hideTime 气泡持续时间
         * @param str 气泡内容
         * @param strScale 气泡内容文字大小
         * @param x 气泡x轴
         * @param y 气泡y轴
         */
        MainBubbleView.prototype.SetBubble = function (bubbleType, scale, hideTime, str, strScale, x, y) {
            var html = this._bubbleImage[bubbleType].getChildByName('text');
            var strLen = str.length / 9 >> 0;
            html.width = this._bubbleImage[bubbleType].width - 6;
            this._bubbleImage[bubbleType].height = 64 + strLen * 24;
            H52D_Framework.SetHtmlStyle(html, strScale, "#231614", "left", true);
            html.innerHTML = str;
            this._bubbleImage[bubbleType].x = x;
            this._bubbleImage[bubbleType].y = y;
            this._bubbleImage[bubbleType].alpha = 1;
            this._bubbleImage[bubbleType].scale(0, 0);
            this._bubbleImage[bubbleType].visible = true;
            this.SetBubbleScale(bubbleType, scale, hideTime);
        };
        MainBubbleView.prototype.CheckCanShowBubble = function (bubbleType) {
            for (var eBubbleType in this._bubbleImage) {
                if (Number(eBubbleType) == E_BubbleType.eSkill) {
                    continue;
                }
                if (bubbleType != Number(eBubbleType)) {
                    var image = this._bubbleImage[eBubbleType];
                    if (image.visible) {
                        return false;
                    }
                }
            }
            return true;
        };
        MainBubbleView.prototype.SetClickPetButton = function (x, y) {
            this.clickPet.x = x;
            this.clickPet.y = y;
        };
        return MainBubbleView;
    }(ui.main.subinterface.MainBubbleViewUI));
    H52D_Framework.MainBubbleView = MainBubbleView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainBubbleView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var Point = Laya.Point;
    /**
     * @class：主界面控制页面
     * @author：zhangyusong
     */
    var MainClickView = /** @class */ (function (_super) {
        __extends(MainClickView, _super);
        function MainClickView() {
            var _this = _super.call(this) || this;
            _this._first = null;
            _this._second = null;
            _this._timeLimit = true;
            _this._start = false;
            _this.totleCountdown = 8;
            _this.openCountdown = _this.totleCountdown;
            _this.InitView();
            _this.InitEvent();
            return _this;
        }
        MainClickView.prototype.InitView = function () {
            var _this = this;
            this.goldEndNum = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold);
            this.WriteGold(this.goldEndNum);
            this.FrushDiamonds();
            Laya.loader.load("res/ui/particle2D/StarEffect.part", Laya.Handler.create(this, function (settings) {
                _this.particle = new Laya.Particle2D(settings);
                _this.clickBg.addChild(_this.particle);
                _this.particle.emitter.stop();
                _this.particle.emitter.clear();
                _this.particle.autoPlay = false;
            }), null);
            H52D_Framework.CoinFlyBackPos[0] = this.control_box.x + this.gold_icon.x;
            H52D_Framework.CoinFlyBackPos[1] = (this.control_box.y + this.gold_icon.y) - (G_StageHeight - this.clickBg.height);
            this.goldSpeed = new GoldSpeed();
            this.goldSpeed.n = 0;
            this.goldEndNum = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold);
            this.goldStartNum = this.goldMiddleNum = this.goldEndNum;
            this.effectCd = new H52D_Framework.Avatar(this.effect_bg);
            this.effectCd.Load(H52D_Framework.EffectDefine.jinbi, 1, 0.34, 30, 30);
        };
        MainClickView.prototype.InitEvent = function () {
            H52D_Framework.Event.RegistEvent("Stop_click", Laya.Handler.create(this, this.UpdateView));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.DROP_ADD_CHILD, Laya.Handler.create(this, this.DropAddChild));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT, Laya.Handler.create(this, this.Btn_control));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.ADD_GOLD, Laya.Handler.create(this, this.FrushGold));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.ADD_DIAMONDS, Laya.Handler.create(this, this.FrushDiamonds));
            H52D_Framework.Event.RegistEvent("Role_lvup", Laya.Handler.create(this, this.OpenEffect));
            this.clickBg.on(Laya.Event.MOUSE_DOWN, this, this.OnSlideDown);
        };
        MainClickView.prototype.Destroy = function () {
            H52D_Framework.Tick.ClearAll(this);
            H52D_Framework.Event.RemoveEvent("Role_lvup", Laya.Handler.create(this, this.OpenEffect));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.DROP_ADD_CHILD, Laya.Handler.create(this, this.DropAddChild));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.ADD_GOLD, Laya.Handler.create(this, this.FrushGold));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT, Laya.Handler.create(this, this.Btn_control));
            H52D_Framework.Event.RemoveEvent("Stop_click", Laya.Handler.create(this, this.UpdateView));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.ADD_DIAMONDS, Laya.Handler.create(this, this.FrushDiamonds));
        };
        MainClickView.prototype.UpdateView = function (bool) {
            this.clickBg.mouseEnabled = bool;
        };
        MainClickView.prototype.Btn_control = function () {
            var bool = H52D_Framework.WroldBossManager.Instance.View_Control();
            this.control_box.visible = bool;
            this.control_diond.visible = bool;
        };
        MainClickView.prototype.OnSlideDown = function () {
            //记录鼠标按下的位置 　　
            if (H52D_Framework.PrivilegeBuff.Instance.IsStart) {
                var mouseX = Laya.MouseManager.instance.mouseX;
                var mouseY = Laya.MouseManager.instance.mouseY;
                this._first = new Point(mouseX, mouseY);
                this._start = true;
                this.clickBg.on(Laya.Event.MOUSE_MOVE, this, this.OnSlideMove);
                this.clickBg.on(Laya.Event.MOUSE_UP, this, this.OnSlideUp);
            }
            else {
                this._first = null;
                this._second = null;
                this._timeLimit = true;
                if (this.particle) {
                    this.particle.emitter.stop();
                }
            }
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.MAIN_VIEW_CLICK, [1]);
            H52D_Framework.DropManager.Instance.SearchCoinFlyback(this.clickBg.mouseX, this.clickBg.mouseY);
        };
        MainClickView.prototype.OnSlideMove = function () {
            var _this = this;
            if (H52D_Framework.PrivilegeBuff.Instance.IsStart) {
                var tPos = this.clickBg.getMousePoint();
                this.particle.x = tPos.x;
                this.particle.y = tPos.y;
                if (this._start) {
                    this._start = false;
                    this.particle.emitter.start();
                }
                if (this._first && this._timeLimit) {
                    //记录鼠标拖动的位置
                    var x = Laya.MouseManager.instance.mouseX;
                    var y = Laya.MouseManager.instance.mouseY;
                    this._second = new Point(x, y);
                    if (this._second.x < this._first.x || this._second.x > this._first.x) {
                        H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.MAIN_VIEW_CLICK);
                        this._timeLimit = false;
                        H52D_Framework.Tick.Once(100, this, function () {
                            _this._timeLimit = true;
                        });
                    }
                    this._first = this._second;
                }
            }
        };
        MainClickView.prototype.OnSlideUp = function () {
            this.clickBg.off(Laya.Event.MOUSE_MOVE, this, this.OnSlideMove);
            this.clickBg.off(Laya.Event.MOUSE_UP, this, this.OnSlideUp);
            if (H52D_Framework.PrivilegeBuff.Instance.IsStart) {
                this._first = null;
                this._second = null;
                this._timeLimit = true;
                this.particle.emitter.stop();
            }
        };
        /** 刷新金币 */
        MainClickView.prototype.FrushGold = function (cost) {
            var _this = this;
            if (cost === void 0) { cost = 0; }
            this.TweenClear();
            if (this.scaleTween) {
                Laya.Tween.clear(this.scaleTween);
            }
            this.scaleTween = Laya.Tween.to(this.gold_icon, { scaleX: 1.3, scaleY: 1.3 }, 200, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                Laya.Tween.clear(_this.scaleTween);
                _this.resetTween = Laya.Tween.to(_this.gold_icon, { scaleX: 1.0, scaleY: 1.0 }, 300, Laya.Ease.linearIn, Laya.Handler.create(_this, function () {
                    Laya.Tween.clear(_this.resetTween);
                }));
            }));
            //容错，防止Tween函数中断
            if (this.openCountdown >= this.totleCountdown) {
                H52D_Framework.Tick.Loop(100, this, this.ScaleEnd);
            }
            this.openCountdown = 0;
            if (cost == 0) {
                this.goldEndNum = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold);
            }
            else {
                this.goldEndNum += cost;
                if (this.goldEndNum >= H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold)) {
                    this.goldEndNum = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold);
                    //释放特效
                    this.effectCd.PlayOnce();
                }
            }
            this.goldStartNum = Math.ceil(this.goldMiddleNum);
            H52D_Framework.Tick.FrameLoop(1, this, this.AddGold);
            this.turnTween = Laya.Tween.to(this.goldSpeed, { n: 100 }, 800, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                _this.TweenClear();
                _this.WriteGold(_this.goldEndNum);
            }));
        };
        MainClickView.prototype.ScaleEnd = function () {
            if (++this.openCountdown >= this.totleCountdown) {
                if (this.gold_icon.scaleX > 1.0) {
                    this.gold_icon.scaleX = this.gold_icon.scaleY = 1.0;
                    Laya.Tween.clear(this.scaleTween);
                    Laya.Tween.clear(this.resetTween);
                }
                H52D_Framework.Tick.Clear(this, this.ScaleEnd);
            }
        };
        MainClickView.prototype.TweenClear = function () {
            H52D_Framework.Tick.Clear(this, this.AddGold);
            if (this.turnTween) {
                Laya.Tween.clear(this.turnTween);
            }
            this.goldSpeed.n = 0;
        };
        MainClickView.prototype.AddGold = function () {
            var location = this.goldSpeed.n / 100;
            this.goldMiddleNum = this.goldStartNum + (this.goldEndNum - this.goldStartNum) * location;
            this.WriteGold(Number(this.goldMiddleNum.toFixed(0)));
        };
        MainClickView.prototype.WriteGold = function (gold) {
            if (gold < 1000000) {
                this.gold_num.text = gold.toString();
            }
            else {
                this.gold_num.text = Number(gold * 0.0001).toFixed(2).toString() + "W";
            }
        };
        MainClickView.prototype.FrushDiamonds = function () {
            var diamondsNum = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdDiamonds);
            this.diond_num.text = String(diamondsNum);
        };
        /**将掉落物加入ClickBg下面 */
        MainClickView.prototype.DropAddChild = function (item) {
            this.clickBg.addChild(item);
        };
        MainClickView.prototype.OpenEffect = function () {
            this.Role_lvup_Effect(H52D_Framework.ViewUILogic.Instance.roleLvUp);
        };
        /**角色升级特效 */
        MainClickView.prototype.Role_lvup_Effect = function (pos) {
            var apos = new H52D_Framework.Avatar(pos);
            apos.Load("res/effect/effect_ui_shengji/effect_ui_shengji.sk", 1, 3.3, 80, 68, Laya.Handler.create(this, function () {
                //this._Lveffect.visible=true;
                apos.Play("effect_ui_shengji", false, true, function () {
                    apos.Destroy();
                });
            }));
        };
        return MainClickView;
    }(ui.main.subinterface.MainClickViewUI));
    H52D_Framework.MainClickView = MainClickView;
    var GoldSpeed = /** @class */ (function () {
        function GoldSpeed() {
        }
        return GoldSpeed;
    }());
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainClickView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    /**
     * @class：主界面控制页面
     * @author：zhangyusong
     */
    var MainControlView = /** @class */ (function (_super) {
        __extends(MainControlView, _super);
        function MainControlView() {
            var _this = _super.call(this) || this;
            _this._showeff = {};
            _this.btn_rank.on(Laya.Event.CLICK, _this, _this.OnOptionClick, [E_OpenGrade.RANK]);
            _this.btn_vIp.on(Laya.Event.CLICK, _this, _this.OnOptionClick, [E_OpenGrade.VIP]);
            _this.btn_camp.on(Laya.Event.CLICK, _this, _this.OnOptionClick, [E_OpenGrade.CAMP]);
            _this.btn_week.on(Laya.Event.CLICK, _this, _this.OnOptionClick, [E_OpenGrade.SEVEN]);
            _this.btn_share.on(Laya.Event.CLICK, _this, _this.OnOptionClick, [E_OpenGrade.SHARE]);
            _this.btn_fund.on(Laya.Event.CLICK, _this, _this.OnOptionClick, [E_OpenGrade.FUND]);
            _this.return_money.on(Laya.Event.CLICK, _this, _this.OpenView, ["MoneybackView"]);
            _this.btn_frist.on(Laya.Event.CLICK, _this, _this.OpenView, ["GiftBag2YuanView"]);
            _this.btn_heropeck.on(Laya.Event.CLICK, _this, _this.OnOptionClick, [E_OpenGrade.HeroPeck]);
            _this.btn_deploy.on(Laya.Event.CLICK, _this, _this.OnOptionClick, [E_OpenGrade.DEPLOY]);
            var Item_num = H52D_Framework.BagManager.Instance.getItemNumber(4001);
            _this.btn_frist.visible = H52D_Framework.ShopLogic.Instance.isFristCharge(3, 1) || Item_num != 0;
            _this.return_money.visible = !_this.btn_frist.visible;
            _this.showPet.on(Laya.Event.CLICK, _this, _this.ClickShopPet);
            _this.chatbtn.on(Laya.Event.CLICK, _this, _this.ChatBtn);
            _this.Btn_close.on(Laya.Event.CLICK, _this, _this.Quit_boss);
            _this.Btn_buff.on(Laya.Event.CLICK, _this, _this.OpenView, ["WroldBossBuffView"]);
            H52D_Framework.Event.RegistEvent("ShowControlRedPoint", Laya.Handler.create(_this, _this.ShowRedPoint));
            H52D_Framework.Event.RegistEvent('SetShopPetVisible', Laya.Handler.create(_this, _this.SetShopPetVisible));
            H52D_Framework.Event.RegistEvent('UpdateBtnList', Laya.Handler.create(_this, _this.UpdateBtnList));
            H52D_Framework.Event.RegistEvent('UpdateOActivitysEntrance', Laya.Handler.create(_this, _this.UpdateOActivitysEntrance));
            H52D_Framework.Event.RegistEvent('SetMoneny', Laya.Handler.create(_this, _this.SetMoneny));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT, Laya.Handler.create(_this, _this.CunstomCurrent));
            H52D_Framework.Event.RegistEvent('UpdateBtnList', Laya.Handler.create(_this, _this.Show_Control));
            H52D_Framework.Tick.Loop(1000, _this, _this.Update);
            H52D_Framework.OneTimer(1000, Laya.Handler.create(_this, function () {
                H52D_Framework.ProfManager.Instance.Add_Prof();
                H52D_Framework.CampManager.Instance.Add_camp();
            }), "");
            H52D_Framework.ViewUILogic.Instance.CampRed = _this.Camp_red;
            var bool = H52D_Framework.CampManager.Instance.Bool;
            _this.ShowRedPoint(E_OpenGrade.CAMP);
            H52D_Framework.CampManager.Instance.GetCamp_List();
            _this.SetShopPetVisible(H52D_Framework.PetManager.Instance.HasTimes > 0);
            _this.ShowRedPoint(E_OpenGrade.VIP);
            // 创建走马灯界面
            if (!H52D_Framework.UIManager.Instance.IsHave("NoticeView", H52D_Framework.ViewToppestRoot)) {
                H52D_Framework.UIManager.Instance.CreateUI("NoticeView", [H52D_Framework.ViewToppestRoot]);
            }
            //vip特效
            if (!H52D_Framework.IsIOSExamine()) {
                _this.SetMoneny(true, "e_vip");
            }
            _this.UpdateBtnList();
            // 刷新运营活动入口
            _this.UpdateOActivitysEntrance();
            _this.UpdateIOSExamine();
            return _this;
        }
        /** 显示红点 */
        MainControlView.prototype.ShowRedPoint = function (type, open) {
            if (open === void 0) { open = false; }
            switch (type) {
                case E_OpenGrade.ACTION:
                    this.action_print.visible = open;
                    break;
                case E_OpenGrade.CAMP:
                    this.Camp_red.visible = H52D_Framework.CampManager.Instance.ShowRed(this.Camp_red);
                    break;
                case E_OpenGrade.DEPLOY:
                    this.deploy_red.visible = this.CanShowDeployRed();
                    break;
                case E_OpenGrade.FIRST:
                    this.money_red.visible = this.FirstShowRed();
                    break;
                case E_OpenGrade.FUND:
                    this.fund_red.visible = H52D_Framework.FundLogic.Instance.ShowRedPoint();
                    break;
                case E_OpenGrade.SEVEN:
                    this.btnweekred.visible = (H52D_Framework.SignInLogic.Instance.ToDayNumSeven > 0) && (!H52D_Framework.SignInLogic.Instance.toDayAlrSeven);
                    break;
                case E_OpenGrade.VIP:
                    this.btnHong_3.visible = false;
                    break;
            }
        };
        MainControlView.prototype.UpdateIOSExamine = function () {
            // ios屏蔽功能
            if (H52D_Framework.IsIOSExamine()) {
                this.btn_vIp.visible = false;
                this.btn_frist.visible = false;
                this.return_money.visible = false;
                this.btn_active1.visible = false;
                this.SetMoneny(false, "e_vip");
                this.SetMoneny(false, "action_eff");
                this.SetMoneny(false, "f_showred");
                this.SetMoneny(false, "m_showred");
            }
        };
        MainControlView.prototype.Destroy = function () {
            if (this._petEffectBj) {
                this._petEffectBj.Destroy();
                this._petEffectBj = null;
            }
            H52D_Framework.Event.RemoveEvent("ShowControlRedPoint", Laya.Handler.create(this, this.ShowRedPoint));
            H52D_Framework.Event.RemoveEvent('SetShopPetVisible', Laya.Handler.create(this, this.SetShopPetVisible));
            H52D_Framework.Event.RemoveEvent('UpdateBtnList', Laya.Handler.create(this, this.UpdateBtnList));
            H52D_Framework.Event.RemoveEvent('UpdateOActivitysEntrance', Laya.Handler.create(this, this.UpdateOActivitysEntrance));
            H52D_Framework.Event.RemoveEvent('SetMoneny', Laya.Handler.create(this, this.SetMoneny));
            H52D_Framework.Event.RemoveEvent('UpdateBtnList', Laya.Handler.create(this, this.Show_Control));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT, Laya.Handler.create(this, this.CunstomCurrent));
            this.countdown.Destroy();
            this.countdown = null;
        };
        MainControlView.prototype.CunstomCurrent = function () {
            var _this = this;
            if (H52D_Framework.CustomsManager.Instance.CustomsVo.customsType == Customs_Type.Boss) {
                H52D_Framework.OneTimer(1500, Laya.Handler.create(this, function () {
                    _this.timesd();
                }), "bosstimerdaojishi");
            }
            this.Btn_control();
        };
        /** 刷新主界面按钮 */
        MainControlView.prototype.UpdateBtnList = function () {
            this.btn_week.visible = H52D_Framework.SignInLogic.Instance.IsShowMainBtn();
            if (this.btn_week.visible) {
                this.ShowRedPoint(E_OpenGrade.SEVEN);
            }
            var Item_num = H52D_Framework.BagManager.Instance.getItemNumber(4001);
            var bo = H52D_Framework.ShopLogic.Instance.isFristCharge(3, 1) && Item_num != 0;
            if (Item_num == 0 && !H52D_Framework.ShopLogic.Instance.isFristCharge(3, 1)) {
                this.btn_frist.visible = false;
            }
            //this.btn_frist.visible = ShopLogic.Instance.isFristCharge(3, 1)||Item_num!=0
            if (!this.btn_frist.visible) {
                this.return_money.visible = true;
            }
            this.SetMoneny(H52D_Framework.ShopLogic.Instance.EffShow && this.btn_frist.visible && !H52D_Framework.IsIOSExamine(), "f_showred");
            // if () {
            //    //两元礼包
            // }       
            this.ShowIcon();
            if (this.return_money.visible) {
                this.SetMoneny(H52D_Framework.ShopLogic.Instance.EffShow && !H52D_Framework.IsIOSExamine(), "m_showred");
            }
            this.ShowRedPoint(E_OpenGrade.FIRST);
            this.UpdateIOSExamine();
            this.chatbtn.visible = H52D_Framework.WroldBossManager.Instance.Show;
            this.ShowRedPoint(E_OpenGrade.DEPLOY);
            this.btn_heropeck.visible = H52D_Framework.HeroManager.Instance.PeckIcon;
            this.heropeck_red.visible = H52D_Framework.HeroManager.Instance.PeckShow;
            this.SetDeployBtnPos();
        };
        MainControlView.prototype.FirstShowRed = function () {
            var m_arr = H52D_Framework.ShopLogic.Instance.MoneyBack;
            if (!m_arr)
                return false;
            var arr = H52D_Framework.ShopLogic.Instance.Eff_show();
            for (var key in arr) {
                var money = H52D_Framework.ChargeConfig[1][arr[key]].Money;
                var bool = H52D_Framework.ShopLogic.Instance.isFristCharge(1, arr[key]);
                if (m_arr[money] != 1 && bool == false) {
                    return true;
                }
            }
            return false;
        };
        MainControlView.prototype.ShowIcon = function () {
            if (this.btn_frist.visible)
                return false;
            var bool = H52D_Framework.ShopLogic.Instance.Contr_redshow();
            this.return_money.visible = !bool;
            this.UpdateIOSExamine();
        };
        /**
         * 主界面按钮事件
         * @param clickType 功能类型
         */
        MainControlView.prototype.OnOptionClick = function (clickType) {
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/check.mp3");
            }
            var condition = H52D_Framework.OpenCondition(clickType);
            if (!condition) {
                return;
            }
            switch (clickType) {
                case E_OpenGrade.RANK:
                    H52D_Framework.UIManager.Instance.CreateUI("RankView", [H52D_Framework.ViewUpRoot]);
                    break;
                case E_OpenGrade.CAMP:
                    if (H52D_Framework.MasterPlayer.Instance.player.CampID != 0) {
                        H52D_Framework.UIManager.Instance.CreateUI("CampMainInfo", [H52D_Framework.ViewUpRoot]);
                    }
                    else {
                        H52D_Framework.UIManager.Instance.CreateUI("JoinCampTip", [H52D_Framework.ViewUpRoot]);
                    }
                    break;
                case E_OpenGrade.SEVEN:
                    H52D_Framework.UIManager.Instance.CreateUI("SevenSigninView", [H52D_Framework.ViewUpRoot]);
                    break;
                case E_OpenGrade.VIP:
                    H52D_Framework.UIManager.Instance.CreateUI("VipView", [H52D_Framework.ViewUpRoot]);
                    break;
                case E_OpenGrade.FIRST:
                    break;
                case E_OpenGrade.SHARE:
                    H52D_Framework.UIManager.Instance.CreateUI("ShareBaseView", [H52D_Framework.ViewUpRoot]);
                    break;
                case E_OpenGrade.FUND:
                    H52D_Framework.UIManager.Instance.CreateUI("FundView", [H52D_Framework.ViewUpRoot]);
                    break;
                case E_OpenGrade.HeroPeck:
                    H52D_Framework.UIManager.Instance.CreateUI("HeroStarPeckView", [H52D_Framework.ViewUpRoot]);
                    break;
                case E_OpenGrade.DEPLOY:
                    this.ClickDeploy(true, false);
                    break;
            }
        };
        /**排列左上方功能图标位置*/
        MainControlView.prototype.SetDeployBtnPos = function () {
            var nYpos = 220;
            for (var i = 0; i < this.toprightbox._childs.length; i++) {
                var child = this.toprightbox._childs[i];
                if (child.visible) {
                    child.pos(child.x, nYpos);
                    nYpos = nYpos + child.height + 5;
                }
            }
        };
        /**是否显示功能伸缩的红点 */
        MainControlView.prototype.CanShowDeployRed = function () {
            if (H52D_Framework.SignInLogic.Instance.IsShowMainBtn() && (H52D_Framework.SignInLogic.Instance.ToDayNumSeven > 0) && (!H52D_Framework.SignInLogic.Instance.toDayAlrSeven)) {
                return true;
            }
            if (H52D_Framework.HeroManager.Instance.PeckShow && H52D_Framework.HeroManager.Instance.PeckIcon) {
                return true;
            }
            return false;
        };
        /**功能伸缩 */
        MainControlView.prototype.ClickDeploy = function (bShow, bControl) {
            if (bShow) {
                if (this.btn_deploy.visible) {
                    this.toprightbox.visible = !this.toprightbox.visible;
                    this.btn_deploy.skin = this.toprightbox.visible ? "ui_main/btn-zhujiemian-zhankai.png" : "ui_main/btn-zhujiemian-shousuo.png";
                }
                else {
                    this.btn_deploy.visible = true;
                    this.toprightbox.visible = this.btn_deploy.skin == "ui_main/btn-zhujiemian-zhankai.png";
                }
            }
            else {
                this.btn_deploy.visible = bControl;
                this.toprightbox.visible = bControl && this.btn_deploy.skin == "ui_main/btn-zhujiemian-zhankai.png";
            }
        };
        MainControlView.prototype.ClickShopPet = function () {
            H52D_Framework.PetManager.Instance.GetPet();
        };
        MainControlView.prototype.ChatBtn = function () {
            if (H52D_Framework.MasterPlayer.Instance.player.CunstLevel > H52D_Framework.OpenGradeConfig[8].Checkpoint) {
                H52D_Framework.UIManager.Instance.CreateUI("ChatView", [H52D_Framework.ViewUpRoot]);
            }
            else {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("通关" + H52D_Framework.OpenGradeConfig[8].Checkpoint + "关开启");
            }
        };
        MainControlView.prototype.Update = function () {
            var bool = false;
            if (H52D_Framework.MailLogic.Inst.checkShowRed || H52D_Framework.AchievenManger.Instance.showPoint() || this.RoleRedPoint()) {
                bool = true;
            }
            else {
                bool = false;
            }
            //聊天红点
            if (H52D_Framework.MasterPlayer.Instance.player.CunstLevel > H52D_Framework.OpenGradeConfig[8].Checkpoint) {
                this.chatbtnpoint.visible = H52D_Framework.ChatLogic.Inst.newMsg;
            }
            else {
                this.chatbtnpoint.visible = false;
            }
            H52D_Framework.Event.DispatchEvent("ShowRedPoint", [E_OpenGrade.ROLE, bool]);
            this.UpdateOActivitysEntrance();
        };
        MainControlView.prototype.RoleRedPoint = function () {
            var roleSkill = H52D_Framework.MainRoleLogic.Instance.roleSkill;
            var roleLv = H52D_Framework.MasterPlayer.Instance.player.Level;
            var ownMoney = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdGold);
            var bool = false;
            for (var index = 0; index < roleSkill.length; index++) {
                var element = roleSkill[index];
                //技能解锁
                if (!H52D_Framework.MainRoleLogic.Instance.IsMaxLv(index)) {
                    if (!H52D_Framework.MainRoleLogic.Instance.IsSkillUnlocked(index)) {
                        var condition = H52D_Framework.MainRoleLogic.Instance.GetSkillUnlockCondition(index);
                        if (roleLv >= condition[1]) { //如果角色等级达到解锁技能条件
                            if (ownMoney >= condition[2]) { //如果金币够
                                bool = true;
                                break;
                            }
                        }
                    }
                }
            }
            return bool;
        };
        /**加载神兽蛋特效 */
        MainControlView.prototype.SetShopPetVisible = function (bvisible) {
            var _this = this;
            this.showPet.visible = bvisible;
            this.showPetBg.visible = bvisible;
            if (this._petEffectBj != null) {
                this._petEffectBj.Destroy();
            }
            this._petEffectBj = new H52D_Framework.Avatar(this.showPetBg);
            this._petEffectBj.Load("res/effect/effect_ui_daoju2/effect_ui_daoju2.sk", 1, 1.5, 0, 0, Laya.Handler.create(this, function () {
                _this._petEffectBj.Play("effect_ui_daoju2", true, true, function () {
                });
            }));
        };
        /***加载充值返馈特效 */
        MainControlView.prototype.SetMoneny = function (bool, name) {
            var _this = this;
            if (this._showeff[name]) {
                this._showeff[name].Destroy();
            }
            this[name].visible = bool;
            this._showeff[name] = new H52D_Framework.Avatar(this[name]);
            this._showeff[name].Load("res/effect/effect_ui_tubiao2/effect_ui_tubiao2.sk", 1, 1.1, 1, 0, Laya.Handler.create(this, function () {
                _this._showeff[name].Play("effect_ui_tubiao2", true, true, function () {
                });
            }));
        };
        MainControlView.prototype.OpenView = function (name) {
            H52D_Framework.UIManager.Instance.CreateUI(name, [H52D_Framework.ViewUpRoot]);
            // UIManager.Instance.CreateUI("MoneybackView", [ViewUpRoot]);
        };
        /**刷新运营活动入口 */
        MainControlView.prototype.UpdateOActivitysEntrance = function () {
            //活动入口初始化
            for (var i = 1; i < 2; i++) {
                var btn = this["btn_active" + i];
                btn.off(Laya.Event.CLICK, this, this.OnOActivityBtnClick);
                btn.visible = false;
                this.SetMoneny(false, "action_eff");
            }
            if (H52D_Framework.IsIOSExamine()) {
                return;
            }
            if (H52D_Framework.OActivityLogic.Instance.msgLoaded) {
                var index = 1;
                for (var i in H52D_Framework.OActivityLogic.Instance.openList) {
                    var strName = OActivityPosName[i];
                    if (strName) {
                        var btn = this["btn_active" + index];
                        this["btn_active" + index].text = strName;
                        btn.skin = "ui_main/" + OActivityPosIcon[i];
                        btn.visible = true;
                        this.SetMoneny(true, "action_eff");
                        this.ActionInfo(btn.visible);
                        btn.on(Laya.Event.CLICK, this, this.OnOActivityBtnClick, [i, btn]);
                        index++;
                    }
                }
            }
        };
        MainControlView.prototype.ActionInfo = function (bool) {
            if (bool) {
                var bool1 = H52D_Framework.DEverydayManager.Instance.eff_Contr();
                var bool2 = H52D_Framework.mEverydayManager.Instance.eff_Contr();
                //let istrue = DEverydayManager.Instance.ShowEff &&  bool1 ? true : false; 
                var bool_1 = H52D_Framework.DEverydayManager.Instance.ShowEff && bool1 ? true : false;
                var bool_2 = H52D_Framework.DEverydayManager.Instance.ShowEff && bool2;
                var istrue = bool_1 || bool_2;
                this.SetMoneny(istrue && !H52D_Framework.IsIOSExamine(), "action_eff");
                var _bool = H52D_Framework.DEverydayManager.Instance.red_contr() || H52D_Framework.mEverydayManager.Instance.red_contr();
                this.ShowRedPoint(E_OpenGrade.ACTION, _bool);
                // if (_bool) {
                //     //this.Playeff_action(_bool);
                // }
            }
        };
        MainControlView.prototype.OnOActivityBtnClick = function (index, btn) {
            // if (btn._childs[2]) {
            //     btn._childs[2].destroy(true);
            // }
            H52D_Framework.UIManager.Instance.CreateUI("ActiveBgView", [H52D_Framework.ViewUpRoot, index]);
        };
        MainControlView.prototype.Btn_control = function () {
            var bool = H52D_Framework.WroldBossManager.Instance.View_Control();
            this.btn_rank.visible = this.btn_camp.visible = this.btn_deploy.visible = this.btn_share.visible =
                this.showPet.visible = this.btn_1.visible = this.btn_2.visible = this.btn_3.visible = this.btn_4.visible = bool;
            this.boss.visible = !bool;
            this.Btn_buff.visible = !bool;
            this.ClickDeploy(false, bool);
        };
        MainControlView.prototype.Show_Control = function () {
            var bool = H52D_Framework.WroldBossManager.Instance.View_Control();
            this.Btn_buff.visible = !bool && H52D_Framework.WroldBossManager.Instance.Show;
            this.showPet.visible = H52D_Framework.PetManager.Instance.HasTimes > 0;
            this.ClickDeploy(false, bool);
        };
        MainControlView.prototype.Quit_boss = function () {
            H52D_Framework.CustomsManager.Instance.LeaveCustomsManager();
            H52D_Framework.WroldBossManager.Instance.Buff_Del();
            H52D_Framework.WroldBossManager.Instance.SendHrut();
            if (H52D_Framework.UIManager.Instance.IsHave("WroldBossBuffView", H52D_Framework.ViewUpRoot)) {
                H52D_Framework.UIManager.Instance.DestroyUI("WroldBossBuffView", [H52D_Framework.ViewUpRoot]);
            }
            H52D_Framework.Event.DispatchEvent("BossThrough");
        };
        MainControlView.prototype.timesd = function () {
            this.countdown = new H52D_Framework.Countdwon();
            this.addChild(this.countdown);
            this.countdown.centerX = 0;
            this.countdown.centerY = 0;
            this.countdown.time = 3;
            this.countdown.Start(Laya.Handler.create(this, this.Btn_control));
            if (H52D_Framework.CustomsManager.Instance.CustomsVo.customsType == Customs_Type.Boss) {
                H52D_Framework.Tick.Once(3000, this, function () {
                    H52D_Framework.Event.DispatchEvent("Stop_click", [true]);
                    H52D_Framework.BattleManager.Instance.OpenBattle();
                    H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.BEGIN_FIRE);
                });
            }
        };
        return MainControlView;
    }(ui.main.subinterface.MainControlViewUI));
    H52D_Framework.MainControlView = MainControlView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainControlView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var Sprite = Laya.Sprite;
    var path = "ui_icon/";
    /**
     * @class：
     * @author：zhangyusong
     */
    var MainCustomsView = /** @class */ (function (_super) {
        __extends(MainCustomsView, _super);
        function MainCustomsView() {
            var _this = _super.call(this) || this;
            _this.comein = true;
            _this.fromauto = true;
            _this.totleWave = 0;
            _this.bossStartY = 0;
            _this.bossEndY = 0;
            _this.followOpen = false;
            _this.InitView();
            _this.InitEvent();
            return _this;
        }
        MainCustomsView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT, Laya.Handler.create(this, this.CunstomCurrent));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.CUSTOMS_BASEINFOR, Laya.Handler.create(this, this.BaseInfor));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.CUSTOMS_DROP_BLOOD, Laya.Handler.create(this, this.DropBlood));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.BOSSHANDER, Laya.Handler.create(this, this.BossHander));
            H52D_Framework.Event.RemoveEvent("CustomsClear", Laya.Handler.create(this, this.CustomsClear));
            H52D_Framework.Event.RemoveEvent("BossThrough", Laya.Handler.create(this, this.BossThrough));
            H52D_Framework.Event.RemoveEvent("CunstomsModel", Laya.Handler.create(this, this.ShowModel));
            H52D_Framework.Event.RemoveEvent('UpdateBtnList', Laya.Handler.create(this, this.bossEndControl));
            this.custom_wave_boss.off(Laya.Event.CLICK, this, this.BossHander);
            H52D_Framework.Tick.ClearAll(this);
        };
        MainCustomsView.prototype.InitView = function () {
            var _this = this;
            this.bossStartY = this.custom_wave_boss.y;
            this.bossEndY = -40;
            this.bloodMask = new Sprite();
            var bw = this.blood_list.width;
            this.bloodMask.graphics.drawPoly(0, 0, [0, 0, bw, 0, bw, 16, bw - 8, 24, 0, 24], 0x000000);
            this.blood_list.mask = this.bloodMask;
            this.blood_follow.x = 0;
            this.blood.visible = false;
            this.custom_wave_boss.y = this.bossEndY;
            this.bloodTimeWidth = this.blood_time.width;
            this.customsIcon = new CustomsIcon(this, this.effect_customs);
            this.custom_wave_boss.mouseEnabled = false;
            //----特效表现----
            this.customEff = new H52D_Framework.Avatar(this.effect_customs);
            this.customEff.Load(H52D_Framework.EffectDefine.tubiao, 1, 0.44, 35, 37, Laya.Handler.create(this, function () {
                H52D_Framework.Tick.Loop(3000, _this, function () { _this.customEff.PlayOnce(); });
                // this.customEff.Play();
            }));
            this.bossEff = new H52D_Framework.Avatar(this.effect_boss);
            this.bossEff.Load(H52D_Framework.EffectDefine.anniu, 1, 2.3, 64, 26, Laya.Handler.create(this, function () {
                _this.bossEff.Play();
            }));
            this.fightEff = new H52D_Framework.Avatar(this.effect_fight);
            this.fightEff.Load(H52D_Framework.EffectDefine.guanqia, 1, 1, 0, 22, Laya.Handler.create(this, function () {
                _this.fightEff.Play();
            }));
            this.headEff = new H52D_Framework.Avatar(this.effect_head);
            this.headEff.Load(H52D_Framework.EffectDefine.touxiang, 1, 1, 42, 50, Laya.Handler.create(this, function () {
                _this.headEff.Play("idle");
            }));
            //------end-----
            H52D_Framework.ViewUILogic.Instance.customWave = this.custom_wave_boss;
        };
        MainCustomsView.prototype.InitEvent = function () {
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.CUSTOMS_CURRENT, Laya.Handler.create(this, this.WroldBossTime));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.CUSTOMS_BASEINFOR, Laya.Handler.create(this, this.BaseInfor));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.CUSTOMS_DROP_BLOOD, Laya.Handler.create(this, this.DropBlood));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.BOSSHANDER, Laya.Handler.create(this, this.BossHander));
            H52D_Framework.Event.RegistEvent("CustomsClear", Laya.Handler.create(this, this.CustomsClear));
            H52D_Framework.Event.RegistEvent("BossThrough", Laya.Handler.create(this, this.BossThrough));
            H52D_Framework.Event.RegistEvent("CunstomsModel", Laya.Handler.create(this, this.ShowModel));
            H52D_Framework.Event.RegistEvent('UpdateBtnList', Laya.Handler.create(this, this.bossEndControl));
            this.custom_wave_boss.on(Laya.Event.CLICK, this, this.BossHander);
        };
        MainCustomsView.prototype.WroldBossTime = function () {
            var _this = this;
            this.Boss_time.text = "倒计时:" + H52D_Framework.CustomsManager.Instance.CustomsVo.waveTime;
            if (H52D_Framework.CustomsManager.Instance.CustomsVo.customsType == Customs_Type.Boss) {
                H52D_Framework.Tick.Clear(this, this.TimeFrame);
                H52D_Framework.BattleManager.Instance.TheWordBossDamage = 0;
                this.waveTime = H52D_Framework.CustomsManager.Instance.CustomsVo.waveTime;
                this.Boss_time.text = "倒计时:" + H52D_Framework.CustomsManager.Instance.CustomsVo.waveTime;
                this.Btn_control();
                H52D_Framework.Tick.Once(5500, this, function () {
                    _this.WroldBoss();
                });
            }
            else {
                this.CunstomCurrent();
            }
        };
        /** 关卡图标清理 */
        MainCustomsView.prototype.CustomsClear = function () {
            this.blood.visible = false;
        };
        /** 场景小图标 */
        MainCustomsView.prototype.CunstomCurrent = function () {
            var _this = this;
            //顶部小图标
            this.customsIcon.setIcon();
            if (H52D_Framework.CustomsManager.Instance.customsMode == Customs_Mode.Auto) { //自动战斗模式
                if (H52D_Framework.CustomsManager.Instance.bBoss) {
                    if (this.fromauto) { //来自自动模式，渐变出现
                        this.custom_wave_boss.y = this.bossEndY;
                        H52D_Framework.TweenList.to(this, this.custom_wave_boss, { y: this.bossStartY + 10 }, 200, function () {
                            _this.custom_wave_boss.y = _this.bossStartY + 10;
                        });
                        H52D_Framework.TweenList.to(this, this.custom_wave_boss, { y: this.bossStartY }, 80, function () {
                            _this.custom_wave_boss.y = _this.bossStartY;
                            H52D_Framework.Tick.Once(600, _this, function () {
                                _this.custom_wave_boss.mouseEnabled = true;
                            });
                        }, 200);
                        H52D_Framework.EffectManager.Instance.StartShock(250);
                    }
                    this.waveTime = H52D_Framework.CustomsManager.Instance.CustomsVo.waveTime;
                    this.OpenBoss();
                }
                else { //不是Boss，渐变消失
                    if (this.custom_wave_boss.y >= this.bossStartY - 2) {
                        this.custom_wave_boss.y = this.bossStartY;
                        H52D_Framework.TweenList.to(this, this.custom_wave_boss, { y: this.bossEndY }, 300, function () {
                            _this.custom_wave_boss.y = _this.bossEndY;
                        });
                    }
                    this.fromauto = true;
                    this.boss_time.visible = false;
                }
                this.bg_bossicon.visible = H52D_Framework.CustomsManager.Instance.bBoss;
                this.effect_boss.visible = false;
                this.tx_num_boss.text = H52D_Framework.CustomsManager.Instance.LEAVE;
            }
            else if (H52D_Framework.CustomsManager.Instance.customsMode == Customs_Mode.Loop) { //循环战斗模式
                this.bg_bossicon.visible = false;
                this.effect_boss.visible = true;
                this.tx_num_boss.text = H52D_Framework.CustomsManager.Instance.CHALLENGE;
                this.boss_time.visible = false;
            }
            this.TotleProgress(H52D_Framework.CustomsManager.Instance.CustomsVo.waveNum);
            this.CurrProgress(H52D_Framework.CustomsManager.Instance.CustomsVo.waveOrder - 1);
            this.Btn_control();
            H52D_Framework.Event.DispatchEvent("ClearOneBubble", [E_BubbleType.eMonster]);
        };
        /** 开启Boss模式 */
        MainCustomsView.prototype.OpenBoss = function () {
            this.boss_time.visible = true;
            this.waveTimeCurrent = this.waveTime;
            this.blood_time.width = this.bloodTimeWidth;
            H52D_Framework.Tick.Loop(100, this, this.TimeFrame);
            H52D_Framework.Event.DispatchEvent("BossCome", [true]);
        };
        MainCustomsView.prototype.WroldBoss = function () {
            this.waveTimeCurrent = H52D_Framework.CustomsManager.Instance.CustomsVo.waveTime;
            //Tick.Clear(this, this.TimeFrame);
            H52D_Framework.Tick.Loop(100, this, this.TimeFrame);
        };
        /** 计时帧函数 */
        MainCustomsView.prototype.TimeFrame = function () {
            this.waveTimeCurrent -= .1;
            var bWorldBoss = false;
            if (H52D_Framework.CustomsManager.Instance.CustomsVo.customsType == Customs_Type.Boss) {
                this.Boss_time.text = "倒计时:" + Math.floor(this.waveTimeCurrent) + "";
                bWorldBoss = true;
            }
            this.bg_hurt.width = (this.Boss_hurt.width) * 1.1;
            if (this.waveTimeCurrent > 0) {
                this.blood_time.width = this.bloodTimeWidth * this.waveTimeCurrent / this.waveTime;
                this.time_boss.text = this.waveTimeCurrent.toFixed(1) + "S";
            }
            else {
                this.BossThrough(true);
                this.boss_time.visible = false;
                H52D_Framework.Event.DispatchEvent("ChallengeBossFail");
            }
        };
        MainCustomsView.prototype.BossHander = function () {
            var _this = this;
            if (this.comein) {
                this.comein = false;
                H52D_Framework.Tick.Once(600, this, function () {
                    _this.comein = true;
                });
                this.BossThrough(false);
                //循环模式切换
                if (H52D_Framework.CustomsManager.Instance.customsMode == Customs_Mode.Auto) {
                    H52D_Framework.CustomsManager.Instance.CustomsModelChange(Customs_Mode.Loop);
                    H52D_Framework.Guidance.Instance.Trigger_Seventh();
                }
                else if (H52D_Framework.CustomsManager.Instance.customsMode == Customs_Mode.Loop) {
                    this.fromauto = false;
                    H52D_Framework.CustomsManager.Instance.CustomsModelChange(Customs_Mode.Auto);
                }
            }
        };
        MainCustomsView.prototype.BaseInfor = function (info) {
            this.monster_name.text = info["monster_name"];
            this.surplusBlood = this.totleBlood = info["blood"];
            this.blood_num.text = info["blood"] + " HP";
            this.blood.visible = true;
            this.bloodMask.graphics.clear();
            var bw = this.blood_list.width;
            this.bloodMask.graphics.drawPoly(0, 0, [0, 0, bw, 0, bw, 16, bw - 8, 24, 0, 24], 0x000000);
            this.blood_follow.x = 0;
        };
        MainCustomsView.prototype.ShowModel = function (m) {
            this.tx_num_boss.text = m;
        };
        /** 掉血 */
        MainCustomsView.prototype.DropBlood = function (blood) {
            var _this = this;
            if (this.surplusBlood == 0) {
                return;
            }
            this.surplusBlood -= blood;
            this.surplusBlood = this.surplusBlood < 0 ? 0 : this.surplusBlood;
            this.blood_num.text = this.surplusBlood + " HP";
            var blood_width = (this.blood_list.width * this.surplusBlood / this.totleBlood) >> 0;
            this.bloodMask.graphics.clear();
            if (blood_width > 8) { //5边型
                this.bloodMask.graphics.drawPoly(0, 0, [0, 0, blood_width, 0, blood_width, 16, blood_width - 7, 24, 0, 24], 0x000000);
            }
            else { //4边型=梯形
                var point_y = 24 - (8 - blood_width); //∠45°宽高相同
                this.bloodMask.graphics.drawPoly(0, 0, [0, 0, blood_width, 0, blood_width, 16, 0, point_y], 0x000000);
            }
            if (this.tween) {
                Laya.Tween.clear(this.tween);
            }
            this.followOpen = true;
            this.tween = Laya.Tween.to(this.blood_follow, { "x": blood_width - this.blood_list.width - 1 }, 600, Laya.Ease.linearInOut, Laya.Handler.create(this, function () {
                _this.followOpen = false;
                _this.FollowComplete();
            }));
            if (this.followOpen) {
                H52D_Framework.Tick.Clear(this, this.FollowComplete);
                H52D_Framework.Tick.Once(700, this, this.FollowProgram);
            }
            this.Num_show();
        };
        MainCustomsView.prototype.FollowProgram = function () {
            if (this.followOpen) {
                this.FollowComplete();
            }
        };
        MainCustomsView.prototype.FollowComplete = function () {
            this.blood_follow.x = this.blood_list.width * (this.surplusBlood / this.totleBlood - 1) - 1;
            if (this.surplusBlood < 0) {
                this.surplusBlood = 0;
                this.blood.visible = false;
            }
            Laya.Tween.clear(this.tween);
        };
        MainCustomsView.prototype.TotleProgress = function (totle) {
            if (this.totleWave == totle) {
                return;
            }
            this.totleWave = totle;
            var separation = 56;
            for (var i = 0; i < 5; i++) {
                this["sign_" + i].x = separation * i + separation / 2 * (5 - totle);
                this["sign_" + i].visible = i < totle;
            }
            this.progress_bg.x = 30 + separation / 2 * (5 - totle);
            this.progress_bg.width = separation * (totle - 1);
            if (!this.custom_wave_loop.visible) {
                this.custom_wave_loop.visible = true;
            }
        };
        MainCustomsView.prototype.CurrProgress = function (currSign) {
            for (var i = 0; i < this.totleWave; i++) {
                //未开启
                var wkq = this["sign_" + i].getChildByName("weikaiqi");
                //攻击中
                var gjz = this["sign_" + i].getChildByName("gongjizhong");
                //已打完
                var ydw = this["sign_" + i].getChildByName("yidawan");
                //Boss
                var bossWeida = this["sign_" + i].getChildByName("boss_weida");
                var bossKaida = this["sign_" + i].getChildByName("boss_kaida");
                ydw.visible = i < currSign;
                gjz.visible = i == currSign;
                wkq.visible = i > currSign && i < this.totleWave - 1;
                if (i == this.totleWave - 1) {
                    bossKaida.visible = currSign == this.totleWave - 1;
                    bossWeida.visible = !bossKaida.visible;
                }
                else {
                    bossKaida.visible = bossWeida.visible = false;
                }
            }
            this.effect_fight.x = this["sign_" + currSign].x + 22;
        };
        /**
         * 挑战Boss完成
         * 清理倒计时数据
         */
        MainCustomsView.prototype.BossThrough = function (win) {
            this.custom_wave_boss.mouseEnabled = !win;
            H52D_Framework.Tick.Clear(this, this.TimeFrame);
        };
        MainCustomsView.prototype.Clear = function () {
            this.bloodMask.graphics.drawRect(0, 0, this.blood_list.width, this.blood_list.height, 0x000000);
            this.blood.visible = false;
            this.customsIcon.Clear();
        };
        MainCustomsView.prototype.Btn_control = function () {
            var bool = H52D_Framework.WroldBossManager.Instance.View_Control();
            this.bg.visible = bool;
            this.bg_num.visible = !bool;
            this.Num_show();
        };
        MainCustomsView.prototype.bossEndControl = function () {
            var bool = H52D_Framework.WroldBossManager.Instance.View_Control();
            this.bg_num.visible = !bool && H52D_Framework.WroldBossManager.Instance.Show;
        };
        MainCustomsView.prototype.Num_show = function () {
            this.Boss_hurt.text = "伤害:" + H52D_Framework.BattleManager.Instance.TheWordBossDamage + "";
        };
        return MainCustomsView;
    }(ui.main.subinterface.MainCustomsViewUI));
    H52D_Framework.MainCustomsView = MainCustomsView;
    var CustomsIcon = /** @class */ (function () {
        function CustomsIcon(mainView, customBox) {
            this.proportion = 0.63;
            this.time = 250;
            this.customsOrder = 0;
            this.custems = mainView;
            this.customBox = customBox;
        }
        CustomsIcon.prototype.setIcon = function () {
            var _this = this;
            var urls = H52D_Framework.CustomsManager.Instance.CustomsVo;
            var currIcon = urls.strCustomsIcon;
            var prevIcon = null;
            if (H52D_Framework.CustomspassConfig.hasOwnProperty(urls.customsId - 1)) {
                prevIcon = H52D_Framework.CustomspassConfig[urls.customsId - 1]["strCustomsIcon"];
            }
            var nextIcon = null;
            if (H52D_Framework.CustomspassConfig.hasOwnProperty(urls.customsId + 1)) {
                nextIcon = H52D_Framework.CustomspassConfig[urls.customsId + 1]["strCustomsIcon"];
            }
            if (this.customsOrder == urls.customsOrder) {
                return;
            }
            this.customsOrder = urls.customsOrder;
            Laya.Tween.clearAll(this);
            if (H52D_Framework.CustomsManager.Instance.CustomsVo.customsOrder == 1) {
                this.custems.middle_customs_panel.visible = false;
                this.custems.behind_customs_panel.visible = false;
                //没有最前场景,不移动
                this.custems.img_link_left.visible = !!prevIcon;
                this.custems.prev_customs_panel.visible = !!prevIcon;
                if (!!prevIcon) {
                    this.custems.prev_customs.skin = path + prevIcon + ".png";
                    this.custems.prev_num.text = String(urls.customsOrder - 1);
                }
                this.custems.curr_customs.skin = path + currIcon + ".png";
                this.custems.curr_num.text = String(urls.customsOrder) + "关";
                this.custems.next_customs.skin = path + nextIcon + ".png";
                this.custems.next_num.text = String(urls.customsOrder + 1);
                this.custems.icon.visible = true;
                return;
            }
            //容错
            H52D_Framework.Tick.Once(this.time + 200, this, this.MoveComplete);
            //没有最前场景,不移动
            if (prevIcon == null) {
                this.custems.img_link_left.visible = false;
                this.custems.middle_customs_panel.visible = false;
                this.custems.behind_customs_panel.visible = false;
                this.custems.prev_customs_panel.visible = false;
                this.custems.curr_customs.skin = path + currIcon + ".png";
                this.custems.curr_num.text = String(urls.customsOrder) + "关";
                this.custems.next_customs.skin = path + nextIcon + ".png";
                this.custems.next_num.text = String(urls.customsOrder + 1);
            }
            else {
                this.custems.img_link_left.visible = true;
                this.custems.middle_customs.skin = path + prevIcon + ".png";
                if (urls.customsOrder - 1 <= H52D_Framework.ShareLogic.Instance.ShareMax && H52D_Framework.ShareLogic.Instance.isOpenShare) {
                    for (var i = 0; i < H52D_Framework.ShareLogic.Instance.shareCustems.length; i++) {
                        var custemsNum = H52D_Framework.ShareLogic.Instance.shareCustems[i];
                        if ((urls.customsOrder - 1) == custemsNum) {
                            if (Number(this.custems.middle_num) != urls.customsOrder - 1) {
                                H52D_Framework.UIManager.Instance.CreateUI("ShareCustomsView", [H52D_Framework.ViewToppestRoot, urls.customsOrder - 1]);
                                break;
                            }
                        }
                    }
                }
                this.custems.middle_num.text = String(urls.customsOrder - 1);
                this.custems.behind_customs.skin = path + currIcon + ".png";
                this.custems.behind_num.text = String(urls.customsOrder) + "关";
                this.custems.next_customs.skin = path + nextIcon + ".png";
                this.custems.next_num.text = String(urls.customsOrder + 1);
                this.custems.prev_customs_panel.alpha = 1;
                this.custems.prev_customs_panel.scaleX = this.custems.prev_customs_panel.scaleY = 1;
                this.custems.middle_customs_panel.centerX = this.custems.curr_customs_panel.centerX;
                this.custems.middle_customs_panel.y = this.custems.curr_customs_panel.y;
                this.custems.middle_customs_panel.scaleX = this.custems.middle_customs_panel.scaleY = 1;
                this.custems.middle_customs_panel.visible = true;
                this.custems.curr_customs_panel.visible = false;
                this.custems.curr_num.text = String(urls.customsOrder) + "关";
                if (!!nextIcon) {
                    this.custems.img_link_right.visible = true;
                    this.custems.next_customs_panel.visible = true;
                    this.custems.behind_customs_panel.centerX = this.custems.next_customs_panel.centerX;
                    this.custems.behind_customs_panel.y = this.custems.next_customs_panel.y;
                    this.custems.behind_customs_panel.scaleX = this.custems.behind_customs_panel.scaleY = this.proportion;
                    this.custems.behind_customs_panel.alpha = 1;
                    this.custems.behind_customs_panel.visible = true;
                    this.custems.next_customs_panel.alpha = 0;
                    this.custems.next_customs_panel.scaleX = this.custems.next_customs_panel.scaleY = 0;
                }
                else {
                    this.custems.behind_customs_panel.visible = false;
                    this.custems.img_link_right.visible = false;
                }
                this.customBox.visible = false;
                this.num = 4;
                H52D_Framework.TweenList.to(this, this.custems.middle_customs_panel, {
                    centerX: this.custems.prev_customs_panel.centerX,
                    scaleX: this.proportion,
                    scaleY: this.proportion,
                }, this.time, function () {
                    _this.custems.middle_customs_panel.centerX = _this.custems.prev_customs_panel.centerX;
                    _this.custems.middle_customs_panel.scaleX = _this.proportion;
                    _this.custems.middle_customs_panel.scaleY = _this.proportion;
                    _this.MoveComplete();
                });
                H52D_Framework.TweenList.to(this, this.custems.behind_customs_panel, {
                    centerX: this.custems.curr_customs_panel.centerX,
                    scaleX: 1,
                    scaleY: 1,
                }, this.time, function () {
                    _this.custems.behind_customs_panel.centerX = _this.custems.curr_customs_panel.centerX;
                    _this.custems.behind_customs_panel.scaleX = 1;
                    _this.custems.behind_customs_panel.scaleY = 1;
                    _this.MoveComplete();
                });
                H52D_Framework.TweenList.to(this, this.custems.prev_customs_panel, {
                    alpha: 0,
                    scaleX: 0,
                    scaleY: 0,
                }, this.time, function () {
                    _this.custems.prev_customs_panel.alpha = 0;
                    _this.custems.prev_customs_panel.scaleX = 0;
                    _this.custems.prev_customs_panel.scaleY = 0;
                    _this.MoveComplete();
                });
                H52D_Framework.TweenList.to(this, this.custems.next_customs_panel, {
                    alpha: 1,
                    scaleX: 1,
                    scaleY: 1,
                }, this.time, function () {
                    _this.custems.next_customs_panel.alpha = 1;
                    _this.custems.next_customs_panel.scaleX = 1;
                    _this.custems.next_customs_panel.scaleY = 1;
                    _this.MoveComplete();
                });
            }
        };
        CustomsIcon.prototype.MoveComplete = function () {
            if (--this.num <= 0) {
                Laya.Tween.clearAll(this);
                this.custems.prev_customs.skin = this.custems.middle_customs.skin;
                this.custems.curr_customs.skin = this.custems.behind_customs.skin;
                this.custems.prev_num.text = this.custems.middle_num.text;
                this.custems.middle_customs_panel.visible = false;
                this.custems.middle_customs_panel.centerX = this.custems.prev_customs_panel.centerX;
                this.custems.middle_customs_panel.scaleX = this.proportion;
                this.custems.middle_customs_panel.scaleY = this.proportion;
                this.custems.behind_customs_panel.visible = false;
                this.custems.behind_customs_panel.centerX = this.custems.curr_customs_panel.centerX;
                this.custems.behind_customs_panel.scaleX = 1;
                this.custems.behind_customs_panel.scaleY = 1;
                this.custems.prev_customs_panel.scaleX = 1;
                this.custems.prev_customs_panel.scaleY = 1;
                this.custems.prev_customs_panel.alpha = 1;
                this.custems.prev_customs_panel.visible = true;
                this.custems.next_customs_panel.alpha = 1;
                this.custems.next_customs_panel.scaleX = 1;
                this.custems.next_customs_panel.scaleY = 1;
                this.custems.curr_customs_panel.visible = true;
                this.customBox.visible = true;
            }
        };
        CustomsIcon.prototype.Clear = function () {
            this.num = 0;
            this.MoveComplete();
        };
        return CustomsIcon;
    }());
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainCustomsView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var MainDpsViewUI = ui.main.subinterface.MainDpsViewUI;
    var path = "ui_icon/";
    /**
     * @class：
     * @author：zhangyusong
     */
    var MainDpsView = /** @class */ (function (_super) {
        __extends(MainDpsView, _super);
        function MainDpsView(type) {
            if (type === void 0) { type = ""; }
            var _this = _super.call(this) || this;
            _this.type = type;
            _this.InitEvent();
            return _this;
        }
        MainDpsView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent('UpdateBtnList', Laya.Handler.create(this, this.Show_Control));
            H52D_Framework.Event.RemoveEvent(this.type + H52D_Framework.EventDefine.ALL_DPS, Laya.Handler.create(this, this.ShowTotlesDps));
            H52D_Framework.Event.RemoveEvent(this.type + H52D_Framework.EventDefine.HERO_DPS, Laya.Handler.create(this, this.ShowHeroDps));
            H52D_Framework.Event.RemoveEvent(this.type + H52D_Framework.EventDefine.PET_DPS, Laya.Handler.create(this, this.ShowPetDps));
            H52D_Framework.Event.RemoveEvent(this.type + H52D_Framework.EventDefine.CAMP_DPS, Laya.Handler.create(this, this.ShowCampDps));
            this.destroy();
        };
        MainDpsView.prototype.InitEvent = function () {
            H52D_Framework.Event.RegistEvent('UpdateBtnList', Laya.Handler.create(this, this.Show_Control));
            H52D_Framework.Event.RegistEvent(this.type + H52D_Framework.EventDefine.ALL_DPS, Laya.Handler.create(this, this.ShowTotlesDps));
            H52D_Framework.Event.RegistEvent(this.type + H52D_Framework.EventDefine.HERO_DPS, Laya.Handler.create(this, this.ShowHeroDps));
            H52D_Framework.Event.RegistEvent(this.type + H52D_Framework.EventDefine.PET_DPS, Laya.Handler.create(this, this.ShowPetDps));
            H52D_Framework.Event.RegistEvent(this.type + H52D_Framework.EventDefine.CAMP_DPS, Laya.Handler.create(this, this.ShowCampDps));
        };
        MainDpsView.prototype.ShowTotlesDps = function (totles) {
            this.dsp_totles.text = H52D_Framework.Abbreviation(Number(totles));
        };
        MainDpsView.prototype.ShowHeroDps = function (hero) {
            this.dsp_hero.text = H52D_Framework.Abbreviation(Number(hero));
        };
        MainDpsView.prototype.ShowPetDps = function (pet) {
            this.dsp_pet.text = H52D_Framework.Abbreviation(Number(pet));
        };
        MainDpsView.prototype.ShowCampDps = function (camp) {
            this.dsp_camp.text = H52D_Framework.Abbreviation(Number(camp));
        };
        MainDpsView.prototype.Show_Control = function () {
            this.bg.visible = H52D_Framework.WroldBossManager.Instance.Show;
        };
        return MainDpsView;
    }(MainDpsViewUI));
    H52D_Framework.MainDpsView = MainDpsView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MainDpsView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**排行榜
 * yezhunian
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("RankView", [
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_head.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_wroldboss.atlas", type: Laya.Loader.ATLAS },
    ]);
    var RankView = /** @class */ (function (_super) {
        __extends(RankView, _super);
        function RankView(buf) {
            var _a;
            var _this = _super.call(this) || this;
            _this.rankTypeName_d = {
                1: "个人榜",
                2: "魅力榜",
                3: "世界Boss"
            };
            _this.rankTypeName_s = {
                1: [1, "等级榜", RankEnum.ePerStrength],
                4: [1, "财富榜", RankEnum.ePerTreasure],
                3: [1, "点击榜", RankEnum.ePerClick],
                5: [1, "富豪榜", RankEnum.ePerRich],
                2: [1, "英雄榜", RankEnum.ePerHreo],
                6: [2, "本周榜", RankEnum.CharmWeek],
                7: [2, "上周榜", RankEnum.CharmLastWeek],
                8: [2, "总榜", RankEnum.CharmAll],
                9: [3, "今日榜", RankEnum.NowBossRank],
                10: [3, "昨日榜", RankEnum.LastBossRank],
            };
            _this.rankText = (_a = {},
                _a[RankEnum.ePerStrength] = "角色等级：",
                _a[RankEnum.ePerHreo] = "英雄数量：",
                _a[RankEnum.ePerClick] = "点击次数：",
                _a[RankEnum.ePerTreasure] = "累计获取金币：",
                _a[RankEnum.ePerRich] = "充值钻石：",
                _a[RankEnum.CharmAll] = "魅力值：",
                _a[RankEnum.CharmWeek] = "魅力值：",
                _a[RankEnum.CharmLastWeek] = "魅力值：",
                _a[RankEnum.LastBossRank] = "伤害：",
                _a[RankEnum.NowBossRank] = "伤害：",
                _a);
            //设置初始页面
            _this._currentRankEnum_d = buf[1] || RankTypeEnum.ePer;
            _this._currentRankEnum_s = buf[2] || RankEnum.ePerStrength;
            _this.Init();
            _this.AddEvent();
            return _this;
        }
        /**添加事件 */
        RankView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.close.on(Laya.Event.CLICK, this, this.CloseUI);
            H52D_Framework.Event.RegistEvent('UpdateRankList', Laya.Handler.create(this, this.UpdateRankList));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.PLAYER_HEAD_UPDATE, Laya.Handler.create(this, this.SetHead));
        };
        /**销毁按钮侦听器 */
        RankView.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent('UpdateRankList', Laya.Handler.create(this, this.UpdateRankList));
        };
        /**初始化 */
        RankView.prototype.Init = function () {
            this.UpdateDate();
            this.SetOneTypeToList();
            this.SetTwoTypeToList();
            this.SetHead();
            this.WroldBossReward(this._currentRankEnum_d);
        };
        /**控制世界boss奖励按钮显示 隐藏 */
        RankView.prototype.WroldBossReward = function (id) {
            if (this.rankTypeName_d[id] != this.rankTypeName_d[3]) {
                this.Btn_reward.visible = false;
                return;
            }
            this.Btn_reward.visible = true;
            this.Btn_reward.on(Laya.Event.CLICK, this, this.Btn_reward_show);
        };
        /**打开世界boss奖励界面 */
        RankView.prototype.Btn_reward_show = function () {
            H52D_Framework.UIManager.Instance.CreateUI("WroldBossRewardView", [H52D_Framework.ViewUpRoot]);
        };
        RankView.prototype.SetHead = function () {
            var headId = H52D_Framework.MasterPlayer.Instance.player.HeadId;
            if (headId == 0) {
                this.myRankIcon.skin = "ui_head/icon_ui_01.png";
            }
            else {
                this.myRankIcon.skin = "ui_icon/" + H52D_Framework.HeroConfig[headId].strIcon;
            }
        };
        RankView.prototype.UpdateDate = function () {
            H52D_Framework.RankLogic.Instance.K_ReqClickTimes(0);
            H52D_Framework.RankLogic.Instance.K_RankDataReq(this._currentRankEnum_s, 1, 100);
        };
        /**排行列表刷新 */
        RankView.prototype.UpdateRankList = function (type) {
            this.SetDataToList(type);
        };
        /**设置一级级排行榜标签List*/
        RankView.prototype.SetOneTypeToList = function () {
            this.typeList_d.hScrollBarSkin = "";
            var arr = [];
            for (var info in this.rankTypeName_d) {
                arr.push(this.rankTypeName_d[info]);
            }
            this.typeList_d.array = arr;
            this.typeList_d.renderHandler = new Laya.Handler(this, this.SetOneTypeListRender);
        };
        /**设置二级排行榜标签List*/
        RankView.prototype.SetTwoTypeToList = function () {
            this.typeList_s.hScrollBarSkin = "";
            var arr = [];
            for (var info in this.rankTypeName_s) {
                var rankData_s = this.rankTypeName_s[info];
                if (rankData_s[0] == this._currentRankEnum_d) {
                    arr.push(rankData_s);
                }
            }
            this.typeList_s.array = arr;
            this.typeList_s.renderHandler = new Laya.Handler(this, this.SetTwoTypeListRender);
        };
        /**为排名list添加数据源 */
        RankView.prototype.SetDataToList = function (rankEnum) {
            this._curRankType = rankEnum;
            this.rankList.vScrollBarSkin = "";
            //this.rankList.array = [];
            var info = this.typeList_s.array[rankEnum];
            var data = H52D_Framework.RankLogic.Instance.GetDataByType(rankEnum);
            this.myCampName.visible = this.Btn_reward.visible;
            var data_List = [];
            for (var i in data) {
                if (Number(i) != 0) {
                    data_List.push(data[i]);
                }
                else {
                    this._myRangNum = data[0];
                    if (this._myRangNum == 0) {
                        var name_1 = H52D_Framework.MasterPlayer.Instance.player.Name;
                        var rankContentString = void 0;
                        this.notNum.visible = true;
                        this.myRankNum.visible = false;
                        this.myRankName.changeText(name_1);
                        var a = H52D_Framework.MasterPlayer.Instance.player.Head;
                        //this.myRankIcon.skin = "ui_icon/icon_tou_lss.png";
                        switch (this._currentRankEnum_s) {
                            case RankEnum.ePerClick:
                                var clickNum = H52D_Framework.MasterPlayer.Instance.GetEventProByType[EventProEnum.AddClick].toString();
                                rankContentString = this.rankText[this._currentRankEnum_s] + clickNum;
                                break;
                            case RankEnum.ePerHreo:
                                var hreo = H52D_Framework.HeroManager.Instance.GetHeroNum().toString();
                                rankContentString = this.rankText[this._currentRankEnum_s] + hreo;
                                break;
                            case RankEnum.ePerRich:
                                //let Rich = MasterPlayer.Instance.GetEventProByType[RankProEnum.AddGold].toString();
                                rankContentString = this.rankText[this._currentRankEnum_s] + "暂未开启！";
                                break;
                            case RankEnum.ePerStrength:
                                var lv = H52D_Framework.MasterPlayer.Instance.player.Level.toString();
                                rankContentString = this.rankText[this._currentRankEnum_s] + lv;
                                break;
                            case RankEnum.ePerTreasure:
                                var Treasure = H52D_Framework.MasterPlayer.Instance.GetEventProByType(EventProEnum.AddGold).toString();
                                rankContentString = this.rankText[this._currentRankEnum_s] + Treasure;
                                break;
                            case RankEnum.CharmAll:
                                var Charm = H52D_Framework.MasterPlayer.Instance.GetEventProByType(EventProEnum.Charm).toString();
                                rankContentString = this.rankText[this._currentRankEnum_s] + Charm;
                                break;
                            case RankEnum.CharmWeek:
                                var CharmWeek = H52D_Framework.MasterPlayer.Instance.GetEventProByType(EventProEnum.CharmWeek).toString();
                                rankContentString = this.rankText[this._currentRankEnum_s] + CharmWeek;
                                break;
                            case RankEnum.CharmLastWeek:
                                var CharLastmWeek = H52D_Framework.MasterPlayer.Instance.GetEventProByType(EventProEnum.CharLastmWeek).toString();
                                rankContentString = this.rankText[this._currentRankEnum_s] + CharLastmWeek;
                                break;
                            case RankEnum.NowBossRank:
                                var NowBossRanks = H52D_Framework.MasterPlayer.Instance.GetEventProByType(EventProEnum.NowBossRank).toString();
                                rankContentString = this.rankText[this._currentRankEnum_s] + NowBossRanks;
                                break;
                            case RankEnum.LastBossRank:
                                var LastBossRanks = H52D_Framework.MasterPlayer.Instance.GetEventProByType(EventProEnum.LastBossRank).toString();
                                rankContentString = this.rankText[this._currentRankEnum_s] + LastBossRanks;
                                break;
                        }
                        this.myRankContent.changeText(rankContentString);
                    }
                    else {
                        var mydata = data[this._myRangNum];
                        //获取自己排名信息
                        this.notNum.visible = false;
                        this.myRankNum.visible = true;
                        this.myRankNum.changeText(this._myRangNum.toString());
                        this.myRankName.changeText(mydata[2]);
                        this.myVip.visible = H52D_Framework.MasterPlayer.Instance.player.IsVip;
                        this.myRankName.x = H52D_Framework.MasterPlayer.Instance.player.IsVip ? 233 : 185;
                        this.myCampName.text = "阵营：无";
                        var myCampId = H52D_Framework.MasterPlayer.Instance.player.CampID;
                        var GangCfg = H52D_Framework.GangConfig[myCampId];
                        if (myCampId != -1 && myCampId != 0) {
                            this.myCampName.text = "阵营：" + H52D_Framework.StringInfoConfig[GangCfg.nameId].s;
                        }
                        var rankContentString = this.rankText[this._currentRankEnum_s] + mydata[3].toString();
                        this.myRankContent.changeText(rankContentString);
                    }
                }
            }
            this.rankList.array = data_List;
            this.rankList.renderHandler = new Laya.Handler(this, this.SetRankListRender);
        };
        /**
         * 设置一级标签Rank list样式
         * @param item 单个box
         * @param index 索引
        */
        RankView.prototype.SetOneTypeListRender = function (item, index) {
            var data = this.typeList_d.array[index];
            var type = item.getChildByName("type");
            var btn = item.getChildByName("btn");
            var cur = item.getChildByName("cur");
            type.text = data;
            if (index + 1 == this._currentRankEnum_d) {
                cur.skin = "ui_rank/img-zi-daxuanze.png";
            }
            else {
                cur.skin = "";
            }
            btn.on(Laya.Event.CLICK, this, this.SetCurrentOneRankEnum, [index + 1]);
        };
        /**
         * 设置二级标签Rank list样式
         * @param item 单个box
         * @param index 索引
        */
        RankView.prototype.SetTwoTypeListRender = function (item, index) {
            var data = this.typeList_s.array[index];
            var nRankType = data[2];
            var type = item.getChildByName("type");
            var btn = item.getChildByName("btn");
            type.text = data[1];
            type.color = "#bebbf8";
            if (nRankType == this._currentRankEnum_s) {
                btn.skin = "ui_rank/img-zi-weixuan.png";
            }
            else {
                btn.skin = "ui_rank/img-lan-weixuan.png";
            }
            if (this._currentRankEnum_s == RankEnum.ePerStrength || this._currentRankEnum_s == RankEnum.CharmWeek) {
                this.tp.skin = "ui_rank/img-zi-xuan.png";
            }
            else {
                this.tp.skin = "ui_rank/img-lan-xuan.png";
            }
            btn.on(Laya.Event.CLICK, this, this.SetCurrentTwoRankEnum, [nRankType]);
            if (this._currentRankEnum_s == RankEnum.ePerRich) {
                this.typeList_s.scrollBar.value = 100;
            }
            if (this._currentRankEnum_s == nRankType) {
                type.color = "#eff8bb";
            }
        };
        /**
         * 设置排名Rank list样式
         * @param item 单个box
         * @param index 索引
        */
        RankView.prototype.SetRankListRender = function (item, index) {
            var vip = item.getChildByName("vip");
            var bgImg = item.getChildByName("bgImg");
            var rankNum = item.getChildByName("rankNum");
            var rankName = item.getChildByName("rankName");
            var rankIcon = item.getChildByName("rankIcon");
            var rankContent = item.getChildByName("rankContent");
            var camp_name = item.getChildByName("camp_name");
            camp_name.visible = this.Btn_reward.visible;
            var tOtherList = {};
            if (this._curRankType) {
                tOtherList = H52D_Framework.RankLogic.Instance.GetOtherInfoByType(this._curRankType);
            }
            var data = this.rankList.array[index];
            var num = index + 1;
            var tOtherInfo = tOtherList[num] || {};
            var nHeadID = tOtherInfo[1];
            var nVip = tOtherInfo[2];
            var nCamp = tOtherInfo[3];
            camp_name.text = "阵营：无";
            if (nCamp) {
                camp_name.text = "阵营：" + H52D_Framework.StringInfoConfig[H52D_Framework.GangConfig[nCamp].nameId].s;
            }
            if (nHeadID != null && nHeadID > 0) {
                var cfg = H52D_Framework.HeroConfig[nHeadID];
                rankIcon.skin = "ui_icon/" + cfg.strIcon;
            }
            else {
                rankIcon.skin = "ui_head/icon_ui_01.png";
            }
            if (nVip != null && H52D_Framework.MasterPlayer.Instance.player.getIsVip(nVip)) {
                vip.visible = true;
                rankName.x = 233;
            }
            else {
                vip.visible = false;
                rankName.x = 185;
            }
            rankName.changeText(data[2]);
            rankNum.changeText(num.toString());
            var rankContentString = this.rankText[this._currentRankEnum_s] + data[3].toString();
            rankContent.changeText(rankContentString);
            if (num == 1 || num == 2 || num == 3) {
                bgImg.skin = "ui_rank/img-" + num.toString() + "-paiming.png";
                rankNum.visible = false;
            }
            else {
                rankNum.visible = true;
                bgImg.skin = "ui_rank/img-zhihou-paiming.png";
            }
            if (this._myRangNum != num) {
                rankIcon.on(Laya.Event.CLICK, this, this.GiveGift, [data[1], data[2]]);
            }
            else {
                rankIcon.off(Laya.Event.CLICK, this, this.GiveGift);
            }
        };
        /**设置当前一级标签 */
        RankView.prototype.SetCurrentOneRankEnum = function (_rankTypeEnum) {
            //if (_rankTypeEnum == RankTypeEnum.ePer) {
            this._currentRankEnum_d = _rankTypeEnum;
            for (var i in this.rankTypeName_s) {
                var data = this.rankTypeName_s[i];
                if (data[0] == _rankTypeEnum) {
                    this.SetCurrentTwoRankEnum(data[2]);
                    break;
                }
            }
            this.WroldBossReward(this._currentRankEnum_d);
            this.SetTwoTypeToList();
            this.SetOneTypeToList();
        };
        /**设置当前二级标签 */
        RankView.prototype.SetCurrentTwoRankEnum = function (_rankEnum) {
            if (_rankEnum == RankEnum.ePerRich) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("暂未开启！！");
                return;
            }
            this._currentRankEnum_s = _rankEnum;
            H52D_Framework.RankLogic.Instance.K_RankDataReq(_rankEnum, 1, 100);
            this.SetTwoTypeToList();
        };
        /**
         * 赠送礼物
         * @param roleID 玩家ID
         * @param strName 玩家名字
         */
        RankView.prototype.GiveGift = function (roleID, strName) {
            H52D_Framework.UIManager.Instance.CreateUI("InteractView", [H52D_Framework.ViewUpRoot, roleID, strName]);
            console.log("aaa");
        };
        /**关闭UI */
        RankView.prototype.CloseUI = function () {
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/check.mp3");
            }
            H52D_Framework.UIManager.Instance.DestroyUI("RankView", [H52D_Framework.ViewUpRoot]);
        };
        return RankView;
    }(ui.rank.RankViewUI));
    H52D_Framework.RankView = RankView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=RankView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("Scene01", [
        { url: "res/ui/ui_scene01.atlas", type: Laya.Loader.ATLAS }
    ]);
    var Scene01 = /** @class */ (function (_super) {
        __extends(Scene01, _super);
        function Scene01() {
            var _this = _super.call(this) || this;
            _this.animationList = [];
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            H52D_Framework.InitSceneAnim(_this, "Scene01");
            return _this;
        }
        Scene01.prototype.Destroy = function () {
            H52D_Framework.ClearViewResource(this.name);
            this.removeChildren();
        };
        return Scene01;
    }(ui.scene.Scene01UI));
    H52D_Framework.Scene01 = Scene01;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Scene01.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("Scene02", [
        { url: "res/ui/ui_scene02.atlas", type: Laya.Loader.ATLAS }
    ]);
    var Scene02 = /** @class */ (function (_super) {
        __extends(Scene02, _super);
        function Scene02() {
            var _this = _super.call(this) || this;
            _this.animationList = [];
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            H52D_Framework.InitSceneAnim(_this, "Scene02");
            return _this;
        }
        Scene02.prototype.Destroy = function () {
            H52D_Framework.ClearViewResource(this.name);
            this.removeChildren();
        };
        return Scene02;
    }(ui.scene.Scene02UI));
    H52D_Framework.Scene02 = Scene02;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Scene02.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("Scene03", [
        { url: "res/ui/ui_scene03.atlas", type: Laya.Loader.ATLAS }
    ]);
    var Scene03 = /** @class */ (function (_super) {
        __extends(Scene03, _super);
        function Scene03() {
            var _this = _super.call(this) || this;
            _this.animationList = [];
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            H52D_Framework.InitSceneAnim(_this, "Scene03");
            return _this;
        }
        Scene03.prototype.Destroy = function () {
            H52D_Framework.ClearViewResource(this.name);
            this.removeChildren();
        };
        return Scene03;
    }(ui.scene.Scene03UI));
    H52D_Framework.Scene03 = Scene03;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Scene03.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("Scene04", [
        { url: "res/ui/ui_scene04.atlas", type: Laya.Loader.ATLAS }
    ]);
    var Scene04 = /** @class */ (function (_super) {
        __extends(Scene04, _super);
        function Scene04() {
            var _this = _super.call(this) || this;
            _this.animationList = [];
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            H52D_Framework.InitSceneAnim(_this, "Scene04");
            return _this;
        }
        Scene04.prototype.Destroy = function () {
            H52D_Framework.ClearViewResource(this.name);
            this.removeChildren();
        };
        return Scene04;
    }(ui.scene.Scene04UI));
    H52D_Framework.Scene04 = Scene04;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Scene04.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("Scene05", [
        { url: "res/ui/ui_scene05.atlas", type: Laya.Loader.ATLAS }
    ]);
    var Scene05 = /** @class */ (function (_super) {
        __extends(Scene05, _super);
        function Scene05() {
            var _this = _super.call(this) || this;
            _this.animationList = [];
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            H52D_Framework.InitSceneAnim(_this, "Scene05");
            return _this;
        }
        Scene05.prototype.Destroy = function () {
            H52D_Framework.ClearViewResource(this.name);
            this.removeChildren();
        };
        return Scene05;
    }(ui.scene.Scene05UI));
    H52D_Framework.Scene05 = Scene05;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Scene05.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("Scene06", [
        { url: "res/ui/ui_scene06.atlas", type: Laya.Loader.ATLAS }
    ]);
    var Scene06 = /** @class */ (function (_super) {
        __extends(Scene06, _super);
        function Scene06() {
            var _this = _super.call(this) || this;
            _this.animationList = [];
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            H52D_Framework.InitSceneAnim(_this, "Scene06");
            return _this;
        }
        Scene06.prototype.Destroy = function () {
            H52D_Framework.ClearViewResource(this.name);
            this.removeChildren();
        };
        return Scene06;
    }(ui.scene.Scene06UI));
    H52D_Framework.Scene06 = Scene06;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Scene06.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* name;
*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("Scene07", [
        { url: "res/ui/ui_scene07.atlas", type: Laya.Loader.ATLAS }
    ]);
    var Scene07 = /** @class */ (function (_super) {
        __extends(Scene07, _super);
        function Scene07() {
            var _this = _super.call(this) || this;
            _this.animationList = [];
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            H52D_Framework.InitSceneAnim(_this, "Scene07");
            return _this;
        }
        Scene07.prototype.Destroy = function () {
            H52D_Framework.ClearViewResource(this.name);
            this.removeChildren();
        };
        return Scene07;
    }(ui.scene.Scene07UI));
    H52D_Framework.Scene07 = Scene07;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=Scene07.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("SettingHeadView", [
        { url: "res/ui/ui_setting.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**
     * @class 设置页面
     * @author zhangyusong
     **/
    var SettingHeadView = /** @class */ (function (_super) {
        __extends(SettingHeadView, _super);
        function SettingHeadView(defaultVo) {
            var _this = _super.call(this) || this;
            _this.defaultId = defaultVo[1];
            _this.ViewInit();
            _this.EventInit();
            return _this;
        }
        SettingHeadView.prototype.ViewInit = function () {
            this.InitHeadList();
            this.modelList = new Array();
            this.warehouse.vScrollBarSkin = "";
            this.warehouse.array = this.voList;
            this.warehouse.renderHandler = new Laya.Handler(this, this.WarehouseHandler);
        };
        SettingHeadView.prototype.EventInit = function () {
            this.btn_close.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_close"]);
            this.btn_ok.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_ok"]);
        };
        SettingHeadView.prototype.OnBtnClick = function (btnName) {
            switch (btnName) {
                case "btn_ok": //确认
                    if (this.defaultId != this.modelList[this.defaultIndex].headId) {
                        H52D_Framework.RemoteCall.Instance.Send("K_ChgHeadID", this.modelList[this.defaultIndex].headId);
                        break;
                    }
                case "btn_close": //关闭
                    H52D_Framework.UIManager.Instance.DestroyUI("SettingHeadView", [H52D_Framework.ViewUpRoot]);
                    break;
            }
        };
        /** 头像信息列表初始化 */
        SettingHeadView.prototype.InitHeadList = function () {
            this.voList = new Array();
            var hvo = new H52D_Framework.HeadVo();
            hvo.headId = 0;
            hvo.headRes = "ui_head/icon_ui_01.png";
            hvo.headSelect = hvo.headId == this.defaultId;
            hvo.headUse = hvo.headId == this.defaultId;
            this.voList.push(hvo);
            var heroHead = H52D_Framework.HeroManager.Instance.GetCfgHeroList();
            for (var i = 0; i < heroHead.length; i++) {
                var nHeroID = heroHead[i];
                var bActive = H52D_Framework.HeroManager.Instance.IsActive(nHeroID);
                if (bActive) {
                    var hvo_1 = new H52D_Framework.HeadVo();
                    hvo_1.headId = nHeroID;
                    hvo_1.headRes = "ui_icon/" + H52D_Framework.HeroConfig[nHeroID].strIcon;
                    hvo_1.headSelect = nHeroID == this.defaultId;
                    hvo_1.headSelect = hvo_1.headId == this.defaultId;
                    hvo_1.headUse = hvo_1.headId == this.defaultId;
                    this.voList.push(hvo_1);
                }
            }
        };
        /** 头像库初始化 */
        SettingHeadView.prototype.WarehouseHandler = function (item, index) {
            var model = new H52D_Framework.HeadModel(item);
            model.data = this.voList[index];
            if (model.select) {
                this.defaultIndex = index;
            }
            item.on(Laya.Event.CLICK, this, this.OnSelect, [index]);
            this.modelList.push(model);
        };
        SettingHeadView.prototype.OnSelect = function (index) {
            if (this.defaultIndex != index) {
                this.modelList[this.defaultIndex].select = false;
                this.modelList[index].select = true;
                this.defaultIndex = index;
            }
        };
        return SettingHeadView;
    }(ui.setting.SettingHeadViewUI));
    H52D_Framework.SettingHeadView = SettingHeadView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SettingHeadView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("SettingView", [
        { url: "res/ui/ui_setting.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**
     * @class 设置页面
     * @author zhangyusong
     **/
    var SettingNameView = /** @class */ (function (_super) {
        __extends(SettingNameView, _super);
        function SettingNameView() {
            var _this = _super.call(this) || this;
            /** 性别 */
            _this._genderEnum = 1;
            _this.ViewInit();
            _this.EventInit();
            return _this;
        }
        SettingNameView.prototype.ViewInit = function () {
            this.startName = H52D_Framework.MasterPlayer.Instance.player.Name;
            this.username = this.startName;
            var changeNum = H52D_Framework.MasterPlayer.Instance.GetEventProByType(EventProEnum.ChangeName);
            this.ChangeNameCost(!changeNum);
        };
        SettingNameView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_close.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_close"]);
            this.btn_random.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_random"]);
            this.btn_ok.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_ok"]);
            this.input.on(Laya.Event.FOCUS, this, this.OnBtnClick, ["input_focus"]);
        };
        SettingNameView.prototype.OnBtnClick = function (btnName) {
            switch (btnName) {
                case "btn_random": //骰子
                    this.username = H52D_Framework.GetRandName(this._genderEnum);
                    break;
                case "input_focus":
                    this.username = "";
                    break;
                case "btn_ok": //确定
                    this.OnLoginBtn();
                    break;
                case "btn_close": //关闭
                    H52D_Framework.UIManager.Instance.DestroyUI("SettingNameView", [H52D_Framework.ViewUpRoot]);
                    break;
            }
        };
        Object.defineProperty(SettingNameView.prototype, "username", {
            get: function () {
                return this._username;
            },
            set: function (value) {
                this._username = value;
                this.input.text = this.username;
            },
            enumerable: true,
            configurable: true
        });
        /** 更名消费 */
        SettingNameView.prototype.ChangeNameCost = function (free) {
            this.cost = free ? 0 : H52D_Framework.GameParamConfig["ReNameExpend"];
            this.img_diamonds.visible = !free;
            this.txt_cost.visible = !free;
            this.txt_freed.visible = free;
            this.txt_cost.text = String(this.cost);
        };
        SettingNameView.prototype.OnLoginBtn = function () {
            this.username = this.input.text;
            if (this.startName == this.username) {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("角色名没有修改!");
                return;
            }
            if (H52D_Framework.StringIsEmpty(this.username)) {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("角色名不能为空!");
                return;
            }
            if (this.username != H52D_Framework.SensitiveWord.Instance.Replace(this.username)) {
                this.input.text = "";
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("少侠，您创建的角色名称中含有非法字符，请重新输入");
                return;
            }
            var diamonds = H52D_Framework.BagManager.Instance.getItemNumber(H52D_Framework.BaseDefine.ItemIdDiamonds);
            if (this.cost > diamonds) {
                if (H52D_Framework.IsIOSExamine()) {
                    H52D_Framework.TipsLogic.Instance.OpenMessageBox("钻石不足!");
                }
                else {
                    H52D_Framework.TipsLogic.Instance.OpenMessageBox("钻石不足，是否前往购买", Laya.Handler.create(this, this.BuyDiamonds));
                }
                return;
            }
            var nLength = 0;
            for (var index = 0; index < this.username.length; index++) {
                if (this.username.charCodeAt(index) > 255) {
                    nLength += 2;
                }
                else {
                    nLength++;
                }
            }
            if (nLength > 12) {
                H52D_Framework.TipsLogic.Instance.OpenMessageBox("角色名过长，请重新输入！");
                return;
            }
            H52D_Framework.RemoteCall.Instance.Send("K_RoleRenameReq", this.username);
        };
        /** 购买钻石 */
        SettingNameView.prototype.BuyDiamonds = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("SettingNameView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.UIManager.Instance.DestroyUI("SettingView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.BOTTOM_SET_PANEL, [false, Laya.Handler.create(this, function () {
                    H52D_Framework.Event.DispatchEvent("OnPanelClick", [E_OpenGrade.SHOP]);
                })]);
        };
        SettingNameView.prototype.Destroy = function () {
            H52D_Framework.Tick.ClearAll(this);
            this.offAll();
        };
        return SettingNameView;
    }(ui.setting.SettingNameViewUI));
    H52D_Framework.SettingNameView = SettingNameView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SettingNameView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("SettingView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_head.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_setting.atlas", type: Laya.Loader.ATLAS },
    ]);
    /**
     * @class 设置页面
     * @author zhangyusong
     **/
    var SettingView = /** @class */ (function (_super) {
        __extends(SettingView, _super);
        function SettingView() {
            var _this = _super.call(this) || this;
            _this.ViewInit();
            _this.EventInit();
            return _this;
        }
        SettingView.prototype.ViewInit = function () {
            /** 默认头像信息 */
            this.defaultVo = new H52D_Framework.HeadVo();
            this.defaultVo.headSelect = true;
            this.ChangeName(false);
            this.ChangeHead(false);
            this.txt_username.text = H52D_Framework.MasterPlayer.Instance.player.Name;
            this.effect_select.visible = H52D_Framework.MasterPlayer.Instance.player.Sound;
            this.music_select.visible = H52D_Framework.MasterPlayer.Instance.player.Music;
        };
        SettingView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.PLAYER_NAME_UPDATE, Laya.Handler.create(this, this.ChangeName));
            H52D_Framework.Event.RegistEvent(H52D_Framework.EventDefine.PLAYER_HEAD_UPDATE, Laya.Handler.create(this, this.ChangeHead));
            this.btn_close.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_close"]);
            this.btn_head.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_head"]);
            this.img_head.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_head"]);
            this.btn_name.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_name"]);
            this.btn_effect.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_sound"]);
            this.btn_music.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_music"]);
            this.btn_ok.on(Laya.Event.CLICK, this, this.OnBtnClick, ["btn_ok"]);
        };
        SettingView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.PLAYER_NAME_UPDATE, Laya.Handler.create(this, this.ChangeName));
            H52D_Framework.Event.RemoveEvent(H52D_Framework.EventDefine.PLAYER_HEAD_UPDATE, Laya.Handler.create(this, this.ChangeHead));
        };
        /** 名字更新 */
        SettingView.prototype.ChangeName = function (tips) {
            if (tips === void 0) { tips = true; }
            this.txt_username.text = H52D_Framework.MasterPlayer.Instance.player.Name;
            if (tips) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("改名成功");
                H52D_Framework.UIManager.Instance.DestroyUI("SettingNameView", [H52D_Framework.ViewUpRoot]);
            }
        };
        /** 头像更新 */
        SettingView.prototype.ChangeHead = function (tips) {
            if (tips === void 0) { tips = true; }
            this.defaultVo.headId = H52D_Framework.MasterPlayer.Instance.player.HeadId;
            if (this.defaultVo.headId == 0) {
                this.defaultVo.headRes = "ui_head/icon_ui_01.png";
            }
            else {
                this.defaultVo.headRes = "ui_icon/" + H52D_Framework.HeroConfig[this.defaultVo.headId].strIcon;
            }
            this.img_head.skin = this.defaultVo.headRes;
            if (tips) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("更换头像成功");
                H52D_Framework.UIManager.Instance.DestroyUI("SettingHeadView", [H52D_Framework.ViewUpRoot]);
            }
        };
        SettingView.prototype.OnBtnClick = function (btnName) {
            switch (btnName) {
                case "btn_head": //改头像
                    H52D_Framework.UIManager.Instance.CreateUI("SettingHeadView", [H52D_Framework.ViewUpRoot, this.defaultVo.headId]);
                    break;
                case "btn_name": //改名
                    H52D_Framework.UIManager.Instance.CreateUI("SettingNameView", [H52D_Framework.ViewUpRoot]);
                    break;
                case "btn_sound": //音效
                    H52D_Framework.MasterPlayer.Instance.player.Sound = !H52D_Framework.MasterPlayer.Instance.player.Sound;
                    this.effect_select.visible = H52D_Framework.MasterPlayer.Instance.player.Sound;
                    H52D_Framework.SetLocalStorage("sound", H52D_Framework.MasterPlayer.Instance.player.Sound ? "1" : "0", true);
                    break;
                case "btn_music": //音乐
                    H52D_Framework.MasterPlayer.Instance.player.Music = !H52D_Framework.MasterPlayer.Instance.player.Music;
                    this.music_select.visible = H52D_Framework.MasterPlayer.Instance.player.Music;
                    H52D_Framework.SetLocalStorage("music", H52D_Framework.MasterPlayer.Instance.player.Music ? "1" : "0", true);
                    H52D_Framework.Event.DispatchEvent("PlayMusic");
                    break;
                case "btn_close": //关闭
                case "btn_ok": //确定
                    H52D_Framework.UIManager.Instance.DestroyUI("SettingView", [H52D_Framework.ViewUpRoot]);
                    break;
            }
        };
        return SettingView;
    }(ui.setting.SettingViewUI));
    H52D_Framework.SettingView = SettingView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SettingView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ShareAchievenView", [
        { url: "res/ui/ui_share.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
    ]);
    //领取方式
    var AchiDrawType;
    (function (AchiDrawType) {
        AchiDrawType[AchiDrawType["eShareDraw"] = 0] = "eShareDraw";
        AchiDrawType[AchiDrawType["eAchievementDraw"] = 1] = "eAchievementDraw";
    })(AchiDrawType = H52D_Framework.AchiDrawType || (H52D_Framework.AchiDrawType = {}));
    /**
     * @class 分享邀请页面
     * @author zhangyusong
     **/
    var ShareAchievenView = /** @class */ (function (_super) {
        __extends(ShareAchievenView, _super);
        function ShareAchievenView(buf) {
            var _this = _super.call(this) || this;
            _this.type = buf[1];
            _this.eventId = buf[2];
            _this.ViewInit();
            _this.EventInit();
            return _this;
        }
        ShareAchievenView.prototype.ViewInit = function () {
            var achieven = null;
            for (var key in H52D_Framework.AchievenManger.Instance.achievenMission) {
                if (H52D_Framework.AchievenManger.Instance.achievenMission[key].eventId == this.eventId) {
                    achieven = H52D_Framework.AchievenManger.Instance.achievenMission[key];
                }
            }
            this.tx_content.text = H52D_Framework.GetInfoAttr.Instance.GetText(6025);
            if (achieven) {
                this.tx_nosharenum.text = String(achieven.reward);
                this.tx_sharenum.text = String(achieven.reward * 2);
            }
        };
        ShareAchievenView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_close.on(Laya.Event.CLICK, this, this.OnClosePanel);
            //直接领取
            this.btn_receive.on(Laya.Event.CLICK, this, this.OnReceivePanel);
            //分享领取
            this.btn_share.on(Laya.Event.CLICK, this, this.OnSharePanel);
        };
        ShareAchievenView.prototype.Destroy = function () {
            this.offAll();
        };
        ShareAchievenView.prototype.OnClosePanel = function () {
            H52D_Framework.UIManager.Instance.DestroyUI(this.name, [H52D_Framework.ViewToppestRoot]);
        };
        /** 直接领取 */
        ShareAchievenView.prototype.OnReceivePanel = function () {
            this.OnClosePanel();
            H52D_Framework.AchievenManger.Instance.K_ReqAchievementAward(this.eventId);
        };
        /** 分享领取 */
        ShareAchievenView.prototype.OnSharePanel = function () {
            var _a;
            H52D_Framework.BaiDuSDK.Instance.CallTieBa(H52D_Framework.ShareType.achieven, (_a = {}, _a["id"] = this.type, _a["eventId"] = this.eventId, _a));
            this.OnClosePanel();
        };
        return ShareAchievenView;
    }(ui.share.ShareAchievenViewUI));
    H52D_Framework.ShareAchievenView = ShareAchievenView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ShareAchievenView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ShareBaseView", [
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_share.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
    ]);
    var Type;
    (function (Type) {
        Type[Type["share"] = 0] = "share";
        Type[Type["invitation"] = 1] = "invitation";
    })(Type || (Type = {}));
    /**
     * @class 分享邀请页面
     * @author zhangyusong
     **/
    var ShareBaseView = /** @class */ (function (_super) {
        __extends(ShareBaseView, _super);
        function ShareBaseView() {
            var _this = _super.call(this) || this;
            _this.skin_1_up = "ui_rank/img-lan-xuan.png";
            _this.skin_1_down = "ui_rank/img-zi-xuan.png";
            _this.skin_2_up = "ui_rank/img-lan-weixuan.png";
            _this.skin_2_down = "ui_rank/img-zi-weixuan.png";
            _this.piclist = [
                "ui_icon/icon-tequan-hjzl.png",
                "ui_icon/icon-tequan-ssxjs.png",
                "ui_icon/icon-tequan-flhf.png",
                "ui_icon/icon-tequan-tjjy.png",
                "ui_icon/icon-tequan-jyjc.png",
            ];
            _this.SHARE_INFOR_ID = 6026;
            _this.SHARE_NOTICE_ID = 6027;
            _this.IMMEDIATELY_ID = 6030;
            _this.EVERY_DAY_ID = 6031;
            _this.receiveType = 0;
            _this.ShareInit();
            _this.InvitationInit();
            _this.ChoosePage(Type.share);
            _this.EventInit();
            return _this;
        }
        ShareBaseView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            H52D_Framework.Event.RegistEvent("InviteTodayNum", Laya.Handler.create(this, this.InvitationNum));
            H52D_Framework.Event.RegistEvent("ShareInit", Laya.Handler.create(this, this.ShareInit));
            H52D_Framework.Event.RegistEvent("InviteAwardFrush", Laya.Handler.create(this, this.InvitationFrushList));
            H52D_Framework.Event.RegistEvent("FrushVipTime", Laya.Handler.create(this, this.FrushVipTime));
            H52D_Framework.Event.RegistEvent("ZeroRefresh", Laya.Handler.create(this, this.InvitationNum));
            this.btn_close.on(Laya.Event.CLICK, this, this.OnClosePanel);
            this.btnlist_share.on(Laya.Event.CLICK, this, this.ChoosePage, [Type.share]);
            this.btnlist_invitation.on(Laya.Event.CLICK, this, this.ChoosePage, [Type.invitation]);
            this.btn_receive.on(Laya.Event.CLICK, this, this.OnInvitationReceive);
            //邀请也是分享
            this.btn_immediate.on(Laya.Event.CLICK, this, this.OnSharePanel);
            this.btn_share.on(Laya.Event.CLICK, this, this.OnSharePanel);
        };
        ShareBaseView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent("FrushVipTime", Laya.Handler.create(this, this.FrushVipTime));
            H52D_Framework.Event.RemoveEvent("ZeroRefresh", Laya.Handler.create(this, this.InvitationNum));
            H52D_Framework.Event.RemoveEvent("InviteTodayNum", Laya.Handler.create(this, this.InvitationNum));
            H52D_Framework.Event.RemoveEvent("ShareInit", Laya.Handler.create(this, this.ShareInit));
        };
        ShareBaseView.prototype.OnClosePanel = function () {
            H52D_Framework.UIManager.Instance.DestroyUI(this.name, [H52D_Framework.ViewUpRoot]);
        };
        ShareBaseView.prototype.ChoosePage = function (t) {
            this.btnlist_share.skin = t == Type.share ? this.skin_1_down : this.skin_1_up;
            this.btnlist_invitation.skin = t == Type.invitation ? this.skin_2_down : this.skin_2_up;
            this.btnlist_share.labelColors = t == Type.share ? "#eff8bb" : "#bebbf8";
            this.btnlist_invitation.labelColors = t == Type.invitation ? "#eff8bb" : "#bebbf8";
            this.panel_share.visible = t == Type.share;
            this.panel_invitation.visible = t == Type.invitation;
        };
        ShareBaseView.prototype.OnSharePanel = function () {
            H52D_Framework.BaiDuSDK.Instance.CallTieBa(H52D_Framework.ShareType.base);
        };
        /*********************** 分享 ***********************/
        ShareBaseView.prototype.ShareInit = function () {
            var _this = this;
            H52D_Framework.SetHtmlStyle(this.tx_tequan, 20, "#b7abb9", "right", true);
            H52D_Framework.SetHtmlStyle(this.tx_content, 18, "#b7abb9", "left");
            H52D_Framework.SetHtmlStyle(this.tx_author, 22, "#5c545d", "right", true);
            this.tx_content.innerHTML = H52D_Framework.GetInfoAttr.Instance.GetText(this.SHARE_INFOR_ID);
            this.tx_author.innerHTML = H52D_Framework.GetInfoAttr.Instance.GetText(this.SHARE_NOTICE_ID);
            this.SharePrivilege();
            // 每一个特权次数
            this.shareRewardList = [];
            for (var i = 0; i < 5; i++) {
                var vo = new H52D_Framework.ShareRewardVo();
                this.shareRewardList.push(vo);
                this.shareRewardList[i].pic = this.piclist[i];
                this.shareRewardList[i].name = H52D_Framework.GetInfoAttr.Instance.GetText(H52D_Framework.PrivilegeConfig[i + 1].name);
                this.shareRewardList[i].num = H52D_Framework.MasterPlayer.Instance.getFreeUseNum(i + 1) || 0;
            }
            this.list_tequan.renderHandler = new Laya.Handler(this, function (item, index) {
                item.getChildByName("pic")["skin"] = _this.shareRewardList[index].pic;
                item.getChildByName("name")["text"] = _this.shareRewardList[index].name;
                item.getChildByName("num")["text"] = _this.shareRewardList[index].num;
            });
            this.list_tequan.array = this.shareRewardList;
        };
        /**
         * 免费特权次数
         * @param prv 特权次数
         * @param totle 总次数
         */
        ShareBaseView.prototype.SharePrivilege = function () {
            var totle = H52D_Framework.GameParamConfig["ShareDialyGetFreePrivilegeNum"];
            var prv = H52D_Framework.MasterPlayer.Instance.GetEventDayProByType(EventProEnum.ShareNum);
            if (prv > totle) {
                prv = totle;
            }
            this.tx_tequan.innerHTML = "今日已获得特权次数：<font color='#8edd7a'>" + prv + "</font>\/" + totle + "次";
        };
        /*********************** 邀请 ***********************/
        ShareBaseView.prototype.InvitationInit = function () {
            var _this = this;
            H52D_Framework.SetHtmlStyle(this.tx_invitation_today, 20, "#d8d9e2", "right");
            H52D_Framework.SetHtmlStyle(this.tx_invitation_totle, 20, "#d8d9e2", "right");
            this.tx_everyday.text = H52D_Framework.GetInfoAttr.Instance.GetText(this.EVERY_DAY_ID);
            this.tx_immediately.text = H52D_Framework.GetInfoAttr.Instance.GetText(this.IMMEDIATELY_ID);
            this.InvitationNum();
            this.FrushVipTime();
            this.list_invitation.renderHandler = new Laya.Handler(this, function (item, index) {
                item.getChildByName("rankNum")["text"] = _this.invitationList[index].num;
                var itemList = _this.invitationList[index].list;
                var nFlag = 0;
                for (var i in itemList) {
                    var item_i = item.getChildByName("item_" + i);
                    item_i.getChildByName("itemIcon")["skin"] = H52D_Framework.GetIcon(itemList[i].strIconID_B);
                    item_i.getChildByName("itemName")["text"] = itemList[i].itemStrName;
                    item_i.getChildByName("itemNum")["text"] = itemList[i].itemNumber;
                    item_i.getChildByName("itemName")["color"] = H52D_Framework.BaseDefine.LabelColor[itemList[i].dwItemQuality];
                    item_i.getChildByName("item_quaity")["bgColor"] = H52D_Framework.BaseDefine.ItemBgColor[itemList[i].dwItemQuality];
                    item_i.visible = true;
                    nFlag = Number(i) + 1;
                }
                for (var n = nFlag; n < 3; n++) {
                    var item_i = item.getChildByName("item_" + n);
                    item_i.visible = false;
                }
                var content = item.getChildByName("tx_invitation_content");
                var showBtn = _this.invitationList[index].num <= H52D_Framework.MasterPlayer.Instance.newInviteNum;
                content.visible = !showBtn;
                if (content.visible) {
                    content.text = _this.invitationList[index].content;
                }
                var btnReward = item.getChildByName("btn_reward");
                btnReward.visible = showBtn;
                btnReward.label = _this.invitationList[index].recive == 0 ? "领取" : "已领取";
                btnReward.mouseEnabled = _this.invitationList[index].recive == 0;
                btnReward.gray = _this.invitationList[index].recive != 0;
                btnReward.on(Laya.Event.CLICK, _this, _this.OnInvitationReward, [_this.invitationList[index].num]);
            });
            this.InvitationFrushList();
            //设置列表位置
            var reciveIndex = -1;
            var index = 0;
            for (; index < this.invitationList.length; index++) {
                var vo = this.invitationList[index];
                if (vo.num <= H52D_Framework.MasterPlayer.Instance.newInviteNum) {
                    if (reciveIndex == -1 && vo.recive == 0) {
                        reciveIndex = index;
                        break;
                    }
                }
            }
            if (reciveIndex == -1) {
                reciveIndex = 0;
            }
            else if (this.invitationList.length - reciveIndex < 2) {
                reciveIndex = this.invitationList.length - 2;
            }
            this.list_invitation.tweenTo(reciveIndex);
        };
        /** VIP_领奖事件 */
        ShareBaseView.prototype.OnInvitationReceive = function () {
            if (this.receiveType == 1) { //邀请
                H52D_Framework.BaiDuSDK.Instance.CallTieBa(H52D_Framework.ShareType.base);
            }
            else if (this.receiveType == 2) { //领取
                if (H52D_Framework.MasterPlayer.Instance.dayInviteNum >= H52D_Framework.GameParamConfig["VipNeedPlayerNum"]) {
                    H52D_Framework.RemoteCall.Instance.Send("K_ReqGetInviteVip");
                }
            }
        };
        /** 领取奖励-事件 */
        ShareBaseView.prototype.OnInvitationReward = function (rewardID) {
            H52D_Framework.RemoteCall.Instance.Send("K_ReqGetInviteAward", rewardID);
        };
        /** 邀请人数 */
        ShareBaseView.prototype.InvitationNum = function () {
            var daynum = H52D_Framework.MasterPlayer.Instance.dayInviteNum;
            this.tx_invitation_today.innerHTML = "当日邀请人数：<font color='#8edd7a'>" + daynum + "</font>/" + H52D_Framework.GameParamConfig["VipNeedPlayerNum"] + "人";
            var totlenum = H52D_Framework.MasterPlayer.Instance.newInviteNum;
            this.tx_invitation_totle.innerHTML = "已累计邀请：<font color='#8edd7a'>" + totlenum + "</font>人";
        };
        /** VIP剩余时间 */
        ShareBaseView.prototype.FrushVipTime = function () {
            //永久VIP
            if (H52D_Framework.MasterPlayer.Instance.player.ExpirationTime == -1) {
                this.tx_time.text = "永久";
                this.btn_receive.gray = true;
                this.btn_receive.visible = false;
            }
            //没有可领取
            else if (H52D_Framework.MasterPlayer.Instance.invitaVipFlag == 0) {
                this.tx_time.text = "00:00:00";
                var canInvite = H52D_Framework.MasterPlayer.Instance.dayInviteNum < H52D_Framework.GameParamConfig["VipNeedPlayerNum"];
                this.receiveType = canInvite ? 1 : 2;
                this.btn_receive.label = canInvite ? "邀请" : "领取";
                this.btn_receive.mouseEnabled = true;
                this.btn_receive.visible = true;
            }
            else {
                //倒计时
                this.countdown = 0;
                if (H52D_Framework.MasterPlayer.Instance.player.ExpirationTime > H52D_Framework.Time.serverSecodes) {
                    this.countdown = H52D_Framework.MasterPlayer.Instance.player.ExpirationTime - H52D_Framework.Time.serverSecodes;
                }
                this.tx_time.text = this.TimeFornt(this.countdown);
                this.btn_receive.label = H52D_Framework.MasterPlayer.Instance.invitaVipTimes >= 5 ? "已达上限" : "已领取";
                this.btn_receive.gray = true;
                this.btn_receive.mouseEnabled = false;
                this.btn_receive.visible = true;
                H52D_Framework.Tick.Clear(this, this.ShowTime);
                H52D_Framework.Tick.Loop(1000, this, this.ShowTime);
            }
        };
        //item_quaity
        ShareBaseView.prototype.ShowTime = function () {
            if (--this.countdown >= 0) {
                this.tx_time.text = this.TimeFornt(this.countdown);
            }
            if (this.countdown <= 0) {
                H52D_Framework.Tick.Clear(this, this.ShowTime);
            }
        };
        /** 刷新界面，领取奖励-回调 */
        ShareBaseView.prototype.InvitationFrushList = function () {
            this.invitationList = [];
            for (var c in H52D_Framework.InvitationConfig) {
                var vo = new H52D_Framework.InvitationVo();
                vo.num = Number(c);
                vo.content = "邀请满" + c + "人可领取";
                var reward = H52D_Framework.RewardConfig[H52D_Framework.InvitationConfig[c]["rewardID"]];
                var rewardlist = reward["reWrad"];
                vo.list = [];
                for (var r in rewardlist) {
                    //道具奖励
                    if (rewardlist[r][1] == H52D_Framework.RewardType.Item) {
                        vo.list.push(new H52D_Framework.ItemVo(rewardlist[r][2], rewardlist[r][3]));
                    }
                }
                vo.recive = H52D_Framework.MasterPlayer.Instance.getInvitation(Number(c));
                this.invitationList.push(vo);
            }
            this.list_invitation.array = this.invitationList;
        };
        /** 时间格式化 */
        ShareBaseView.prototype.TimeFornt = function (countdown) {
            var h = countdown / 60 / 60 >> 0;
            var m = (countdown / 60 >> 0) % 60;
            var s = countdown % 60;
            return (h < 10 ? "0" + h : h) + ":" + (m < 10 ? "0" + m : m) + ":" + (s < 10 ? "0" + s : s);
        };
        return ShareBaseView;
    }(ui.share.ShareBaseViewUI));
    H52D_Framework.ShareBaseView = ShareBaseView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ShareBaseView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ShareCustomsView", [
        { url: "res/ui/ui_share.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS }
    ]);
    /**
     * @class 分享邀请页面
     * @author zhangyusong
     **/
    var ShareCustomsView = /** @class */ (function (_super) {
        __extends(ShareCustomsView, _super);
        function ShareCustomsView(buf) {
            var _this = _super.call(this) || this;
            _this.order = buf[1];
            _this.ViewInit();
            _this.EventInit();
            return _this;
        }
        ShareCustomsView.prototype.ViewInit = function () {
            this.tx_title.text = "恭喜突破" + this.order.toString() + "关";
            var customsList = H52D_Framework.GameParamConfig.ShareRelationCustoms;
            var rewardList = H52D_Framework.GameParamConfig.ShareRelationCustomsReward;
            this.reward = 0;
            for (var i in customsList) {
                if (customsList[i] == this.order) {
                    this.reward = rewardList[i];
                    break;
                }
            }
            this.tx_reward.text = String(this.reward);
            this.strTex.text = H52D_Framework.GetInfoAttr.Instance.GetText(6034);
        };
        ShareCustomsView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_close.on(Laya.Event.CLICK, this, this.OnClosePanel);
            this.btn_share.on(Laya.Event.CLICK, this, this.OnSharePanel);
        };
        ShareCustomsView.prototype.Destroy = function () {
            this.offAll();
        };
        ShareCustomsView.prototype.OnClosePanel = function () {
            H52D_Framework.UIManager.Instance.DestroyUI(this.name, [H52D_Framework.ViewToppestRoot]);
        };
        /** 分享 */
        ShareCustomsView.prototype.OnSharePanel = function () {
            var _a;
            H52D_Framework.BaiDuSDK.Instance.CallTieBa(H52D_Framework.ShareType.customs, (_a = {}, _a["id"] = this.order, _a));
            this.OnClosePanel();
        };
        return ShareCustomsView;
    }(ui.share.ShareCustomsViewUI));
    H52D_Framework.ShareCustomsView = ShareCustomsView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ShareCustomsView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ShareHeroView", [
        { url: "res/ui/ui_share.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_rank.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS }
    ]);
    /**
     * @class 分享邀请页面
     * @author zhangyusong
     **/
    var ShareHeroView = /** @class */ (function (_super) {
        __extends(ShareHeroView, _super);
        function ShareHeroView(buf) {
            var _this = _super.call(this) || this;
            _this.heroId = buf[1];
            _this.ViewInit();
            _this.EventInit();
            return _this;
        }
        ShareHeroView.prototype.ViewInit = function () {
            this.tx_levelup.text = H52D_Framework.StringInfoConfig[6024].s;
            this.nameTex.text = H52D_Framework.StringInfoConfig[H52D_Framework.HeroConfig[this.heroId].name].s;
            var tcfg_hero = H52D_Framework.HeroConfig[this.heroId];
            var pos = tcfg_hero.position;
            var model = H52D_Framework.HeroConfig[this.heroId].strFacadeModel;
            var heroAin = new H52D_Framework.Avatar(this.exhero);
            heroAin.Load(tcfg_hero.strFacadeModel, 1, tcfg_hero.modelScale * 2.6, pos[1], pos[2], Laya.Handler.create(this, function () {
                heroAin.Play(1, true, true, function () {
                }, true);
            }));
        };
        ShareHeroView.prototype.EventInit = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.btn_close.on(Laya.Event.CLICK, this, this.OnClosePanel);
            this.btn_share.on(Laya.Event.CLICK, this, this.OnSharePanel);
        };
        ShareHeroView.prototype.Destroy = function () {
            this.offAll();
        };
        ShareHeroView.prototype.OnClosePanel = function () {
            H52D_Framework.UIManager.Instance.DestroyUI(this.name, [H52D_Framework.ViewToppestRoot]);
        };
        /** 分享 */
        ShareHeroView.prototype.OnSharePanel = function () {
            var _a;
            H52D_Framework.BaiDuSDK.Instance.CallTieBa(H52D_Framework.ShareType.hero, (_a = {}, _a["id"] = this.heroId, _a));
            this.OnClosePanel();
        };
        return ShareHeroView;
    }(ui.share.ShareHeroViewUI));
    H52D_Framework.ShareHeroView = ShareHeroView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ShareHeroView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**七日登入页面*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("SevenSigninView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_sign.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
    ]);
    var SevenSigninView = /** @class */ (function (_super) {
        __extends(SevenSigninView, _super);
        function SevenSigninView() {
            var _this = _super.call(this) || this;
            _this._effectList = {};
            _this.Init();
            _this.AddEvent();
            return _this;
        }
        SevenSigninView.prototype.Init = function () {
            this.UpDateList();
            var typeStr = H52D_Framework.StringInfoConfig[5307].s;
            this.type.text = typeStr;
        };
        /**添加事件 */
        SevenSigninView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.close.on(Laya.Event.CLICK, this, this.CloseUI);
            H52D_Framework.Event.RegistEvent('UpDateSevenList', Laya.Handler.create(this, this.UpDateList));
        };
        /**销毁按钮侦听器 */
        SevenSigninView.prototype.OnDestroy = function () {
            for (var idx in this._effectList) {
                var eff = this._effectList[idx];
                eff.Destroy();
            }
            this._effectList = {};
            this.offAll();
        };
        /**关闭UI */
        SevenSigninView.prototype.CloseUI = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("SevenSigninView", [H52D_Framework.ViewUpRoot]);
        };
        SevenSigninView.prototype.AddList = function () {
            var arr = [];
            var sevenListData = H52D_Framework.SignInLogic.Instance.SevenListData;
            for (var dayNum in sevenListData) {
                arr.push(Number(dayNum));
            }
            this.sevenSignInList.array = arr;
        };
        SevenSigninView.prototype.UpDateList = function () {
            this.AddList();
            this.sevenSignInList.renderHandler = new Laya.Handler(this, this.SetSignInList);
        };
        /**
         * 设置每日奖励list样式
         * @param item 单个box
         * @param index 索引
        */
        SevenSigninView.prototype.SetSignInList = function (item, index) {
            var _this = this;
            var arr = this.sevenSignInList.array;
            var toDayNum = arr[index];
            var signInData = H52D_Framework.SignInLogic.Instance.SevenListData[toDayNum];
            if (toDayNum == 7) {
                item.visible = false;
                if (signInData.itemType == H52D_Framework.BaseDefine.ItemTypePro) {
                    var tItem = H52D_Framework.ItemConfig[signInData.itemId];
                    this.sevenBg.skin = H52D_Framework.BaseDefine.QualityList[tItem.dwItemQuality];
                    this.sevenIcon.skin = "ui_icon/" + tItem.strIconID_B;
                    this.sevenNum.visible = signInData.itemNum != 1;
                    this.sevenNum.text = "x" + signInData.itemNum + "";
                    this.sevenName.text = H52D_Framework.StringInfoConfig[tItem.dwItemName].s;
                    if (this._effectList[toDayNum] != null) {
                        this._effectList[toDayNum].Destroy();
                    }
                    if (toDayNum <= H52D_Framework.SignInLogic.Instance.ToDayNumSeven) {
                        this.sevenday.alpha = 1;
                    }
                    else {
                        this.sevenday.alpha = 0.7;
                    }
                    if ((toDayNum == H52D_Framework.SignInLogic.Instance.ToDayNumSeven) && (!H52D_Framework.SignInLogic.Instance.toDayAlrSeven)) {
                        this._effectList[toDayNum] = new H52D_Framework.Avatar(this.sevenBg);
                        this._effectList[toDayNum].Load("res/effect/effect_ui_daoju2/effect_ui_daoju2.sk", 1, 5, 72, 72, Laya.Handler.create(this, function () {
                            _this._effectList[toDayNum].Play("effect_ui_daoju2", true, true, function () {
                            });
                        }));
                    }
                }
                this.clickSevenBtn.on(Laya.Event.CLICK, this, this.ClickOkBtn, [toDayNum]);
                return;
            }
            var name = item.getChildByName("name");
            var itemBg = item.getChildByName("itemBg");
            var dayNum = item.getChildByName("dayNum");
            var already = item.getChildByName("already");
            var itemIcon = item.getChildByName("itemIcon");
            var clickBtn = item.getChildByName("clickBtn");
            var num = item.getChildByName("num");
            if (this._effectList[toDayNum] != null) {
                this._effectList[toDayNum].Destroy();
            }
            if ((toDayNum == H52D_Framework.SignInLogic.Instance.ToDayNumSeven) && (!H52D_Framework.SignInLogic.Instance.toDayAlrSeven)) {
                this._effectList[toDayNum] = new H52D_Framework.Avatar(itemBg);
                this._effectList[toDayNum].Load("res/effect/effect_ui_daoju2/effect_ui_daoju2.sk", 1, 2, 50, 50, Laya.Handler.create(this, function () {
                    _this._effectList[toDayNum].Play("effect_ui_daoju2", true, true, function () {
                    });
                }));
            }
            if (toDayNum <= H52D_Framework.SignInLogic.Instance.ToDayNumSeven) {
                item.alpha = 1;
            }
            else {
                item.alpha = 0.7;
            }
            num.visible = signInData.itemNum != 1;
            num.text = "x" + signInData.itemNum + "";
            dayNum.text = "第" + arr[index] + "天";
            if (signInData.itemType == H52D_Framework.BaseDefine.ItemTypePro) {
                var tItem = H52D_Framework.ItemConfig[signInData.itemId];
                name.text = H52D_Framework.StringInfoConfig[tItem.dwItemName].s;
                itemBg.skin = H52D_Framework.BaseDefine.QualityList[tItem.dwItemQuality];
                already.visible = signInData.bAlready;
                itemIcon.skin = "ui_icon/" + tItem.strIconID_B;
            }
            clickBtn.on(Laya.Event.CLICK, this, this.ClickOkBtn, [toDayNum]);
        };
        /** 点击领取*/
        SevenSigninView.prototype.ClickOkBtn = function (toDayNum) {
            if (toDayNum == H52D_Framework.SignInLogic.Instance.ToDayNumSeven) {
                if (H52D_Framework.SignInLogic.Instance.toDayAlrSeven) {
                    H52D_Framework.TipsLogic.Instance.OpenSystemTips("您今天已经领取过奖励了");
                    return;
                }
                H52D_Framework.SignInLogic.Instance.SendReqSevenSignIn();
            }
            else if (toDayNum > H52D_Framework.SignInLogic.Instance.ToDayNumSeven) {
                var str = H52D_Framework.Format(H52D_Framework.SysPromptConfig[30041].strPromptInfo, toDayNum);
                H52D_Framework.TipsLogic.Instance.OpenSystemTips(str);
            }
            else if (toDayNum < H52D_Framework.SignInLogic.Instance.ToDayNumSeven) {
                H52D_Framework.TipsLogic.Instance.OpenSystemTips("您已经领取过该奖励！");
            }
        };
        return SevenSigninView;
    }(ui.signIn.SevenSigninViewUI));
    H52D_Framework.SevenSigninView = SevenSigninView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SevenSigninView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**签到*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("SignInView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_sign.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
    ]);
    var SignInView = /** @class */ (function (_super) {
        __extends(SignInView, _super);
        function SignInView() {
            var _this = _super.call(this) || this;
            _this.Init();
            _this.AddEvent();
            return _this;
        }
        SignInView.prototype.Init = function () {
            this.UpDateList();
            var typeStr = H52D_Framework.StringInfoConfig[7007].s;
            var explainStr = H52D_Framework.StringInfoConfig[7008].s;
            this.type.text = typeStr;
            this.explain.text = explainStr;
        };
        /**添加事件 */
        SignInView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.close.on(Laya.Event.CLICK, this, this.CloseUI);
            H52D_Framework.Event.RegistEvent('UpDateList', Laya.Handler.create(this, this.UpDateList));
        };
        /**销毁按钮侦听器 */
        SignInView.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent('UpDateList', Laya.Handler.create(this, this.UpDateList));
        };
        /**关闭UI */
        SignInView.prototype.CloseUI = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("SignInView", [H52D_Framework.ViewUpRoot]);
        };
        SignInView.prototype.AddList = function () {
            var signIn_data = H52D_Framework.SignInLogic.Instance.ListData;
            var list_data = [];
            for (var i in signIn_data) {
                list_data[Number(i)] = [];
                list_data[Number(i)] = signIn_data[i];
            }
            this.signInList.array = list_data;
        };
        SignInView.prototype.UpDateList = function () {
            //this.signInList.array[SignInLogic.Instance.ToDayNum].bAlready = true;
            this.AddList();
            this.signInList.renderHandler = new Laya.Handler(this, this.SetSignInList);
            this.okBtn.on(Laya.Event.CLICK, this, this.ClickOkBtn);
            if (H52D_Framework.SignInLogic.Instance.ToDayAlr) {
                this.txt.text = "已领取";
                this.okBtn.gray = true;
                this.okBtn.off(Laya.Event.CLICK, this, this.ClickOkBtn);
            }
            else {
                this.txt.text = "领取";
                this.okBtn.gray = false;
            }
            this.ClickBtn(H52D_Framework.SignInLogic.Instance.ToDayNum);
        };
        /**
         * 设置每日奖励list样式
         * @param item 单个box
         * @param index 索引
        */
        SignInView.prototype.SetSignInList = function (item, index) {
            var bj = item.getChildByName("bj");
            var vip = item.getChildByName("vip");
            var opt = item.getChildByName("opt");
            var hui = item.getChildByName("hui");
            var name = item.getChildByName("name");
            var dayNum = item.getChildByName("dayNum");
            var already = item.getChildByName("already");
            var itemIcon = item.getChildByName("itemIcon");
            var clickBtn = item.getChildByName("clickBtn");
            var dayId = index + 1;
            var list_data = this.signInList.array[dayId];
            dayNum.text = dayId.toString();
            opt.visible = false;
            name.color = "#ffffff";
            dayNum.color = "#eceac8";
            bj.skin = "ui_sign/btn-yeqian-weiling.png";
            hui.visible = false;
            list_data.bOpt == true ? opt.visible = true : opt.visible = false;
            list_data.bAlready == true ? already.visible = true : already.visible = false;
            if (list_data.btToDay) {
                //name.color = "#fffffc";
                dayNum.color = "#b7aabc";
                bj.skin = "ui_sign/btn-yeqian-danri.png";
            }
            if ((list_data.bOverdue && !list_data.btToDay) || list_data.bAlready) {
                bj.skin = "ui_sign/btn-yeqian-yiling.png";
                hui.visible = true;
            }
            if (list_data.itemType == H52D_Framework.BaseDefine.ItemTypePro) {
                var itemCfg = H52D_Framework.ItemConfig[list_data.itemId];
                var iconUrl = itemCfg.strIconID_B;
                var nameString = H52D_Framework.StringInfoConfig[itemCfg.dwItemName].s;
                list_data.itemNum == 1 ? name.text = nameString : name.text = "x" + list_data.itemNum;
                name.color = H52D_Framework.BaseDefine.LabelColor[itemCfg.dwItemQuality];
                itemIcon.skin = "ui_icon/" + iconUrl;
            }
            clickBtn.on(Laya.Event.CLICK, this, this.ClickBtn, [dayId]);
            vip.visible = H52D_Framework.SignConfig[dayId].isVipDouble == 1;
        };
        /**点击触发 */
        SignInView.prototype.ClickBtn = function (index) {
            var signIn_data = H52D_Framework.SignInLogic.Instance.ListData;
            this.currentOpt = index;
            for (var i in signIn_data) {
                signIn_data[i].bOpt = false;
            }
            if (index < 1)
                return;
            signIn_data[index].bOpt = true;
            //signIn_data[SignInLogic.Instance.ToDayNum].bOpt = true;
            this.AddList();
            this.signInList.renderHandler = new Laya.Handler(this, this.SetSignInList);
        };
        /** 点击领取*/
        SignInView.prototype.ClickOkBtn = function () {
            if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/check.mp3");
            }
            H52D_Framework.SignInLogic.Instance.SendReqSignIn();
        };
        return SignInView;
    }(ui.signIn.SignInViewUI));
    H52D_Framework.SignInView = SignInView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SignInView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("AsideView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_consumer.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_guid.atlas", type: Laya.Loader.ATLAS }
    ]);
    var AsideView = /** @class */ (function (_super) {
        __extends(AsideView, _super);
        function AsideView(buf) {
            var _this = _super.call(this) || this;
            _this.character = ["<br>", "&nbsp;", "&lt;", "&gt;", "&amp;", "&quot;", "&apos;"];
            var id = buf[1];
            _this.callBack = buf[2];
            var cfg = H52D_Framework.AsideConfig[id];
            if (cfg == null) {
                _this.Exit();
            }
            else {
                _this.list = [];
                for (var i in cfg) {
                    _this.list.push(cfg[i]);
                }
                _this.index = 0;
                _this.position = _this.list[_this.index]["position"];
                _this.hero.visible = _this.position == 1 || _this.position == 2;
                _this.black.visible = _this.position == 0;
                if (_this.position == 0) {
                    //没有英雄，则显示黑屏
                    _this.currentContent = _this.tx_black;
                    H52D_Framework.SetHtmlStyle(_this.currentContent, 38, "#ffffff", "left");
                    _this.ContentWrite();
                }
                else {
                    //有英雄，显示带英雄面板
                    _this.avatar = new H52D_Framework.Avatar(_this.avart_bg);
                    _this.Location(_this.position);
                    _this.currentContent = _this.tx_hero;
                    H52D_Framework.SetHtmlStyle(_this.currentContent, 28, "#16184a", "left");
                    _this.canClick = false;
                    _this.path = "";
                    _this.Action();
                }
                _this.InitEvent();
            }
            return _this;
        }
        AsideView.prototype.InitEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.Destroy);
            this.on(Laya.Event.CLICK, this, this.ClickHander);
        };
        AsideView.prototype.Destroy = function () {
            if (this.callBack) {
                this.callBack.run();
            }
            this.offAll();
            H52D_Framework.Tick.ClearAll(this);
        };
        /** 点击事件 */
        AsideView.prototype.ClickHander = function () {
            if (this.canClick && this.index < this.list.length) {
                //字没有写完，让写字瞬间完成
                if (this.writeIndex < this.list[this.index]["strtext"].length) {
                    this.writeIndex = this.list[this.index]["strtext"].length;
                    this.Write();
                }
                //字写完了，条到下一步
                else {
                    this.NextStep();
                }
                if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                    H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/check.mp3");
                }
            }
        };
        /** 下一步动作 */
        AsideView.prototype.NextStep = function () {
            H52D_Framework.Tick.Clear(this, this.NextStep);
            //下一步有内容，跳转到下一步内容
            if (typeof (this.index) == "number" && ++this.index < this.list.length) {
                this.Action();
            }
            //最后一步，退出
            else {
                this.Exit();
            }
        };
        /** 退出 */
        AsideView.prototype.Exit = function () {
            var _this = this;
            this.canClick = false;
            Laya.Tween.to(this.avart_bg, { x: this.ASX }, 200, Laya.Ease.linearInOut);
            Laya.Tween.to(this.text_bg, { y: this.CSY }, 200, Laya.Ease.linearInOut);
            Laya.Tween.to(this, { alpha: 0 }, 300, Laya.Ease.linearInOut, null, 200);
            H52D_Framework.OneTimer(500, Laya.Handler.create(this, function () {
                H52D_Framework.UIManager.Instance.DestroyUI(_this.name, [H52D_Framework.ViewStoryRoot]);
            }));
        };
        /** 模型的动作 */
        AsideView.prototype.Action = function () {
            var path = this.list[this.index]["strmodel"];
            if (path == "0") {
                this.avatar.Destroy();
                this.tx_name.text = H52D_Framework.StringInfoConfig[this.list[this.index]["name"]].s;
                this.Location(this.list[this.index]["position"]);
                this.ContentWrite();
            }
            else if (this.path != path) {
                this.tx_name.text = H52D_Framework.StringInfoConfig[this.list[this.index]["name"]].s;
                this.Location(this.list[this.index]["position"]);
                var direction = this.list[this.index]["direction"] == 1 ? AvatarDirection.right : AvatarDirection.left;
                var scale = this.list[this.index]["scaling"];
                this.path = path;
                this.avatar.Destroy();
                this.avatar.Load(this.path, direction, scale, 0, 0, Laya.Handler.create(this, this.Complete));
            }
            else {
                this.AvatarPlay(); //说话
                this.ContentWrite(); //写字
            }
        };
        /** 动作加载完成 */
        AsideView.prototype.Complete = function () {
            var _this = this;
            if (this.list[this.index] == null) {
                return;
            }
            this.avatar.Play(this.list[this.index]["tole"]);
            Laya.Tween.to(this.avart_bg, { x: this.AEX }, 200);
            Laya.Tween.to(this.text_bg, { y: this.CEY }, 200);
            H52D_Framework.OneTimer(200, Laya.Handler.create(this, function () {
                _this.AvatarPlay();
                _this.ContentWrite();
            }));
        };
        /** 人物说话动作 */
        AsideView.prototype.AvatarPlay = function () {
            var _this = this;
            this.avart_bg.x = this.AEX;
            this.canClick = false;
            if (this.list && this.index < this.list.length) {
                this.avatar.Play(this.list[this.index]["speak"], false, true, function () {
                    if (_this.list && _this.index < _this.list.length) {
                        _this.avatar.Play(_this.list[_this.index]["tole"]);
                        _this.canClick = true;
                    }
                    _this.canClick = true;
                });
                if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                    H52D_Framework.SoundManager.Instance.OnPlaySound(this.list[this.index]["strsound"]);
                }
            }
            else {
                this.canClick = true;
            }
        };
        /** 内容页写字 */
        AsideView.prototype.ContentWrite = function () {
            this.text_bg.y = this.CEY;
            this.canClick = true;
            this.writeIndex = 0;
            this.Write();
            H52D_Framework.Tick.Loop(60, this, this.Write);
        };
        /** 写字动作 */
        AsideView.prototype.Write = function () {
            if (this.index < this.list.length) {
                var content = this.list[this.index]["strtext"];
                for (var i in this.character) {
                    var char = this.character[i];
                    if (content.slice(this.writeIndex, this.writeIndex + char.length) == char) {
                        this.writeIndex += char.length;
                    }
                }
                this.currentContent.innerHTML = content.slice(0, this.writeIndex) + "_";
                this.writeIndex++;
                // 写字完成
                if (this.writeIndex >= content.length) {
                    this.currentContent.innerHTML = content;
                    H52D_Framework.Tick.Clear(this, this.Write);
                    /** 等待下一步 */
                    H52D_Framework.Tick.Once(5000, this, this.NextStep);
                }
            }
            else {
                H52D_Framework.Tick.Clear(this, this.Write);
                H52D_Framework.Tick.Once(5000, this, this.NextStep);
            }
        };
        /** 位置 */
        AsideView.prototype.Location = function (pos) {
            if (pos == 1) {
                this.AY = 900;
                this.ASX = -200;
                this.AEX = 120;
                this.CEY = 800;
            }
            else if (pos == 2) {
                this.AY = 700;
                this.ASX = 950;
                this.AEX = 600;
                this.CEY = 600;
            }
            this.CSY = 1500;
            this.avart_bg.y = this.AY;
            this.avart_bg.x = this.ASX;
            this.text_bg.y = this.CSY;
        };
        return AsideView;
    }(ui.tips.AsideViewUI));
    H52D_Framework.AsideView = AsideView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=AsideView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("GiftBag2YuanView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_consumer.atlas", type: Laya.Loader.ATLAS },
    ]);
    var GiftBag2YuanView = /** @class */ (function (_super) {
        __extends(GiftBag2YuanView, _super);
        function GiftBag2YuanView(params) {
            var _this = _super.call(this) || this;
            _this.bgImg.skin = "res/ui/ui_noPack/img-shouchong-bg.png";
            _this.InitView();
            _this.AddEvent();
            return _this;
        }
        GiftBag2YuanView.prototype.InitView = function () {
            this.ViewInfo();
            H52D_Framework.ShopLogic.Instance.EffShow = false;
        };
        GiftBag2YuanView.prototype.ViewInfo = function () {
            var shop_cfg = H52D_Framework.ChargeConfig[3][1];
            var m_num = shop_cfg.Price;
            var rew_cfg = H52D_Framework.RewardConfig[shop_cfg.chargeReward].reWrad;
            var item_cdg = rew_cfg[1];
            var iteminfo = H52D_Framework.ItemConfig[item_cdg[2]];
            var item_name = H52D_Framework.StringInfoConfig[iteminfo.dwItemName].s;
            var end_item = iteminfo.dwUseEffect;
            var rew_ncfg = H52D_Framework.RewardConfig[end_item[1]].reWrad[1];
            iteminfo = H52D_Framework.ItemConfig[rew_ncfg[2]];
            var hero_cfg = H52D_Framework.HeroConfig[iteminfo.heroId];
            this.hero_bg.skin = H52D_Framework.BaseDefine.HeroAllinfo_bg[hero_cfg.quality];
            var heroAin = new H52D_Framework.Avatar(this.hero_icon);
            heroAin.Load(hero_cfg.strFacadeModel, 1, hero_cfg.modelScale * 2.5, 140, 335, Laya.Handler.create(this, function () {
                heroAin.Play(1, true, true, function () {
                }, true);
            }));
            H52D_Framework.SetHtmlStyle(this.hero_bigskill, 20, "#614a6e", "left");
            var tData = H52D_Framework.ActiveSkillConfig[hero_cfg.heroBigSkill];
            this.hero_bigskill.innerHTML = "队长技能:" + H52D_Framework.StringInfoConfig[tData.descId].s;
            this.btn_buy.label = m_num + "元";
            var buy_num = H52D_Framework.BagManager.Instance.getItemNumber(item_cdg[2]);
            this.hero_icon.on(Laya.Event.CLICK, this, this.HeroInfos, [iteminfo.heroId]);
            if (buy_num > 0) {
                this.btn_buy.label = "领取";
            }
            this.btn_buy.on(Laya.Event.CLICK, this, this.GoShop, [3, item_cdg[1], H52D_Framework.StringInfoConfig[5308].s, item_cdg[2]]);
        };
        GiftBag2YuanView.prototype.AddEvent = function () {
            this.btn_close.on(Laya.Event.CLICK, this, this.Btn_close);
            H52D_Framework.Event.RegistEvent("closeview_twodoller", Laya.Handler.create(this, this.Btn_close));
            H52D_Framework.Event.RegistEvent("updataview_twoyuan", Laya.Handler.create(this, this.ViewInfo));
            this.on(Laya.Event.REMOVED, this, this.Destroy);
        };
        GiftBag2YuanView.prototype.Btn_close = function () {
            H52D_Framework.ShopLogic.Instance.EffShow = false;
            H52D_Framework.UIManager.Instance.DestroyUI("GiftBag2YuanView", [H52D_Framework.ViewUpRoot]);
            H52D_Framework.Event.DispatchEvent("UpdateBtnList");
        };
        GiftBag2YuanView.prototype.GoShop = function (type, id, str, item_id) {
            if (H52D_Framework.BagManager.Instance.getItemNumber(item_id) > 0) {
                H52D_Framework.BagManager.Instance.K_ReqExchangeItem(item_id);
            }
            else {
                H52D_Framework.BaiDuSDK.Instance.ToRecharge(type, id, str);
            }
        };
        GiftBag2YuanView.prototype.HeroInfos = function (nheroid) {
            H52D_Framework.HeroManager.Instance.OpenView(nheroid);
        };
        GiftBag2YuanView.prototype.Isbuy = function (i_nType, i_nID) {
            if (H52D_Framework.ShopLogic.Instance.tChargeTimes[i_nType] == null) {
                return true;
            }
            else if (H52D_Framework.ShopLogic.Instance.tChargeTimes[i_nType][i_nID] == null) {
                return true;
            }
            return H52D_Framework.ShopLogic.Instance.tChargeTimes[i_nType][i_nID] == 0;
        };
        GiftBag2YuanView.prototype.Destroy = function () {
            H52D_Framework.Event.RemoveEvent("closeview_twodoller", Laya.Handler.create(this, this.Btn_close));
            this.offAll();
        };
        return GiftBag2YuanView;
    }(ui.shop.GiftBag2YuanViewUI));
    H52D_Framework.GiftBag2YuanView = GiftBag2YuanView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=GiftBag2YuanView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * 通用MessageBox
 */
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("MessageBoxView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_sign.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS }
    ]);
    var MessageBoxView = /** @class */ (function (_super) {
        __extends(MessageBoxView, _super);
        function MessageBoxView(params) {
            var _this = _super.call(this) || this;
            _this._okCallBack = null;
            _this._cancelCallBack = null;
            _this._closeTime = 0;
            var msg = params[1];
            _this._okCallBack = params[2];
            _this._cancelCallBack = params[3];
            _this._closeTime = params[4] != null ? params[4] : 0;
            var hight = _this.msg.height;
            var h;
            H52D_Framework.SetHtmlStyle(_this.msg, 35, "#ffffff", "center", true);
            _this.OKBtn.on(Laya.Event.CLICK, _this, _this.OnOKBtnClick);
            _this.OKCenterBtn.on(Laya.Event.CLICK, _this, _this.OnOKBtnClick);
            _this.CancelBtn.on(Laya.Event.CLICK, _this, _this.OnCancelBtnClick);
            //this.close1.on(Laya.Event.CLICK, this, this.OnCancelBtnClick);
            _this.closeBtn.on(Laya.Event.CLICK, _this, _this.OnCancelBtnClick);
            _this.on(Laya.Event.REMOVED, _this, _this.Destroy);
            if (typeof (msg) == "string") {
                _this.msg.innerHTML = msg;
            }
            else if (typeof (msg) == "number") {
                _this.msg.innerHTML = H52D_Framework.SysPromptConfig[msg].strPromptInfo;
            }
            h = _this.msg.height - hight;
            _this.bg.height += h;
            _this.CancelBtn.y += h;
            _this.OKBtn.y += h;
            _this.OKCenterBtn.y += h;
            if (!_this._cancelCallBack) {
                _this.OKBtn.visible = false;
                _this.CancelBtn.visible = false;
                _this.OKCenterBtn.visible = true;
            }
            else {
                _this.OKBtn.visible = true;
                _this.CancelBtn.visible = true;
                _this.OKCenterBtn.visible = false;
            }
            if (_this._closeTime > 0) {
                _this.UpdateTime();
                H52D_Framework.Tick.Loop(1000, _this, _this.UpdateTime);
            }
            else {
                _this.OKCenterBtn.label = "确 定";
            }
            return _this;
        }
        MessageBoxView.prototype.UpdateTime = function () {
            this.OKCenterBtn.label = "确 定" + this._closeTime + "秒";
            this._closeTime--;
            if (this._closeTime < 0) {
                this.OnOKBtnClick();
                return;
            }
        };
        MessageBoxView.prototype.Destroy = function () {
            this.offAll();
            H52D_Framework.Tick.ClearAll(this);
        };
        MessageBoxView.prototype.OnOKBtnClick = function () {
            if (this._okCallBack) {
                this._okCallBack.run();
                this._okCallBack = null;
            }
            H52D_Framework.UIManager.Instance.DestroyUI("MessageBoxView", [H52D_Framework.ViewToppestRoot]);
        };
        MessageBoxView.prototype.OnCancelBtnClick = function () {
            if (this._cancelCallBack) {
                this._cancelCallBack.run();
                this._cancelCallBack = null;
            }
            H52D_Framework.UIManager.Instance.DestroyUI("MessageBoxView", [H52D_Framework.ViewToppestRoot]);
        };
        return MessageBoxView;
    }(ui.tips.MessageBoxViewUI));
    H52D_Framework.MessageBoxView = MessageBoxView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=MessageBoxView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**商城通用介绍*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ShopInfoView", [
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS }
    ]);
    var ShopInfoView = /** @class */ (function (_super) {
        __extends(ShopInfoView, _super);
        /**
         * @param buf { 1:标题 2:文字 3:ItemId数组}
         */
        function ShopInfoView(buf) {
            var _this = _super.call(this) || this;
            var data = [];
            for (var info in buf) {
                if (Number(info) != 0)
                    data.push(buf[info]);
            }
            _this.Init(data);
            _this.close.on(Laya.Event.CLICK, _this, _this.CloseUI);
            return _this;
        }
        ShopInfoView.prototype.Init = function (data) {
            this.ItemIdArr = [];
            this.ItemArr = [];
            this.infoName.text = data[0];
            this.introduce.text = data[1];
            if (data.length == 3) {
                for (var type in data[2]) {
                    var data_rewrad = data[2][type];
                    for (var rewrad in data_rewrad) {
                        var id = data_rewrad[rewrad][2];
                        var isRepetition = false;
                        for (var i in this.ItemIdArr) {
                            if (id == this.ItemIdArr[i]) {
                                isRepetition = true;
                            }
                        }
                        if (!isRepetition)
                            this.ItemIdArr.push(id);
                    }
                }
                var arr = this.ItemIdArr;
                for (var i = 0; i < arr.length; i++) {
                    var ItemTypes_1 = H52D_Framework.ItemConfig[arr[i]].dwItemQuality;
                    var dwItemType_1 = H52D_Framework.ItemConfig[arr[i]].dwItemTypes;
                    for (var j = i + 1; j < arr.length; j++) {
                        var ItemTypes_2 = H52D_Framework.ItemConfig[arr[j]].dwItemQuality;
                        var dwItemType_2 = H52D_Framework.ItemConfig[arr[j]].dwItemTypes;
                        var ItemTypes_1_1 = H52D_Framework.ItemConfig[arr[i]].dwItemQuality;
                        if (dwItemType_1 == H52D_Framework.BaseDefine.ItemSonTypeUesHero) {
                            if (dwItemType_2 == H52D_Framework.BaseDefine.ItemSonTypeUesHero) {
                                if (ItemTypes_2 > ItemTypes_1_1) {
                                    var id = arr[i];
                                    arr[i] = arr[j];
                                    arr[j] = id;
                                }
                            }
                        }
                        else {
                            if (dwItemType_2 == H52D_Framework.BaseDefine.ItemSonTypeUesHero) {
                                var id = arr[i];
                                arr[i] = arr[j];
                                arr[j] = id;
                            }
                            else {
                                if (ItemTypes_2 > ItemTypes_1_1) {
                                    var id = arr[i];
                                    arr[i] = arr[j];
                                    arr[j] = id;
                                }
                            }
                        }
                    }
                }
                // for (let i = 0; i < arr.length; i++) {
                // 	let ItemTypes_1 = ItemConfig[arr[i]].dwItemTypes;
                // 	for (let j = i + 1; j < arr.length; j++) {
                // 		let ItemTypes_2 = ItemConfig[arr[j]].dwItemTypes;
                // 		if (ItemTypes_2 > ItemTypes_1) {
                // 			let id = arr[i];
                // 			arr[i] = arr[j];
                // 			arr[j] = id;
                // 		}
                // 	}
                // }
                this.itemList.array = arr;
                this.AddEvent();
            }
        };
        ShopInfoView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.itemList.renderHandler = new Laya.Handler(this, this.SetitemList);
        };
        /**销毁按钮侦听器 */
        ShopInfoView.prototype.OnDestroy = function () {
            this.offAll();
        };
        /**
         * 设置itemlist样式
         * @param item 单个box
         * @param index 索引
        */
        ShopInfoView.prototype.SetitemList = function (item, index) {
            var id = this.ItemIdArr[index];
            var data = H52D_Framework.ItemConfig[id];
            var name = item.getChildByName("name");
            var icon = item.getChildByName("icon");
            var bjIcon = item.getChildByName("bjIcon");
            name.text = H52D_Framework.StringInfoConfig[data.dwItemName].s;
            name.color = H52D_Framework.BaseDefine.LabelColor[data.dwItemQuality];
            icon.skin = "ui_icon/" + data.strIconID_B;
            bjIcon.skin = H52D_Framework.BaseDefine.QualityList[data.dwItemQuality];
        };
        ShopInfoView.prototype.CloseUI = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("ShopInfoView", [H52D_Framework.ViewUpRoot]);
        };
        return ShopInfoView;
    }(ui.tips.ShopInfoViewUI));
    H52D_Framework.ShopInfoView = ShopInfoView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ShopInfoView.js.map
/**获得物品统一界面*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("ShowGoodsTipsView", [
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_sign.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_pet.atlas", type: Laya.Loader.ATLAS }
    ]);
    var ShowGoodsTipsView = /** @class */ (function (_super) {
        __extends(ShowGoodsTipsView, _super);
        /**
         * @param params 传入数组 {1：[1：道具类型 2：道具ID 3：道具数量],2:[].....}
         */
        function ShowGoodsTipsView(params) {
            var _this = _super.call(this) || this;
            /**Item列表 */
            _this.ItemPos = {
                0: { Item: _this.Item_1, type: _this.ItemTpye_1, name: _this.ItemName_1, icon: _this.icon_1, info: _this.info_1 },
                1: { Item: _this.Item_2, type: _this.ItemTpye_2, name: _this.ItemName_2, icon: _this.icon_2, info: _this.info_2 },
                2: { Item: _this.Item_3, type: _this.ItemTpye_3, name: _this.ItemName_3, icon: _this.icon_3, info: _this.info_3 },
                3: { Item: _this.Item_4, type: _this.ItemTpye_4, name: _this.ItemName_4, icon: _this.icon_4, info: _this.info_4 },
                4: { Item: _this.Item_5, type: _this.ItemTpye_5, name: _this.ItemName_5, icon: _this.icon_5, info: _this.info_5 },
            };
            _this.ContentList = [];
            _this.aimArr = [];
            _this._cartridge = new H52D_Framework.Cartridge();
            _this._showItem = new H52D_Framework.Cartridge();
            _this.time = 10;
            _this.scaleDelta = 0;
            _this._bjEffect = [];
            _this._claseEffect = [];
            _this._floatNum = 0;
            _this._timeinterval = 1500;
            _this._showItemInterval = 150;
            _this.ContentList = new Array();
            _this.info = params[1];
            // bMore 目前只有十连抽奖会用到 策划鬼才
            var bMore = params[2];
            var itemType;
            var itemId;
            var itemNum;
            var dataInfo;
            if (bMore) {
                for (var nIdx in _this.info) {
                    var obj = _this.info[nIdx];
                    for (var type in obj) {
                        itemType = Number(type);
                        var data = obj[type];
                        for (var id in data) {
                            itemId = Number(id);
                            itemNum = data[id];
                            if (itemNum > 0) {
                                dataInfo = [];
                                dataInfo.push(itemType);
                                dataInfo.push(itemId);
                                dataInfo.push(itemNum);
                                _this.ContentList.push(dataInfo);
                            }
                        }
                    }
                }
            }
            else {
                for (var type in _this.info) {
                    itemType = Number(type);
                    var data = _this.info[type];
                    for (var id in data) {
                        itemId = Number(id);
                        itemNum = data[id];
                        if (itemNum > 0) {
                            dataInfo = [];
                            dataInfo.push(itemType);
                            dataInfo.push(itemId);
                            dataInfo.push(itemNum);
                            _this.ContentList.push(dataInfo);
                        }
                    }
                }
            }
            _this.Init();
            _this.AddEvent();
            _this.Showaside();
            return _this;
        }
        ShowGoodsTipsView.prototype.Init = function () {
            this.closeTime.visible = false;
            this.SetItem();
        };
        /**添加按钮侦听器 */
        ShowGoodsTipsView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.close.on(Laya.Event.CLICK, this, this.RemoveNum);
        };
        /**移除事件监听 */
        ShowGoodsTipsView.prototype.OnDestroy = function () {
            H52D_Framework.Tick.ClearAll(this);
            this.offAll();
            this._cartridge.Clear();
            this._showItem.Clear();
            for (var nkey in this._bjEffect) {
                this._bjEffect[nkey].Destroy();
            }
            for (var nkey in this.aimArr) {
                if (this.aimArr[nkey] != null) {
                    this.aimArr[nkey].Destroy();
                }
            }
        };
        ShowGoodsTipsView.prototype.Showaside = function () {
            var _this = this;
            var asideId = 0;
            for (var i in this.info) {
                for (var cardId in this.info[i]) {
                    if (H52D_Framework.ItemConfig[cardId] && H52D_Framework.ItemConfig[cardId]["dwItemTypes"] == 21) {
                        var heroId = H52D_Framework.ItemConfig[cardId]["heroId"];
                        asideId = H52D_Framework.HeroConfig[heroId]["aside"];
                        //判断英雄有没有解锁
                        var heroList = H52D_Framework.HeroManager.Instance.Herolist;
                        for (var hid in heroList) {
                            if (heroId == Number(hid)) {
                                asideId = 0;
                                break;
                            }
                        }
                        //判断背包有没有卡牌
                        var list = H52D_Framework.BagManager.Instance.GetItemList();
                        for (var iid in list) {
                            if (list[iid].dwItemTypes == 21 && //子类型是英雄类型
                                heroId == H52D_Framework.ItemConfig[iid]["heroId"] && //该英雄是当前获得的英雄
                                H52D_Framework.BagManager.Instance.getItemNumber(Number(iid)) > 1) { //英雄碎片不能只有当前这一个
                                asideId = 0;
                                break;
                            }
                        }
                    }
                    break;
                }
                if (!asideId) {
                    break;
                }
            }
            if (asideId != 0) {
                H52D_Framework.Tick.Clear(this, this.Countones);
                H52D_Framework.CustomsManager.Instance.OpenAside(asideId, function () {
                    H52D_Framework.Tick.Once(_this._timeinterval, _this, _this.Countones, [length]);
                });
            }
        };
        /**倒计时
         * @param length 物品个数
         */
        ShowGoodsTipsView.prototype.CountDownTime = function (length) {
            this.time = 10;
            var str = "点击任意位置获得奖品(" + this.time.toString() + "s)";
            this.closeTime.text = str;
            this.closeTime.visible = false;
            H52D_Framework.Tick.Clear(this, this.Countones);
            H52D_Framework.Tick.Once(this._timeinterval, this, this.Countones, [length]);
        };
        ShowGoodsTipsView.prototype.Countones = function (length) {
            H52D_Framework.Tick.Clear(this, this.CountDown);
            this.closeTime.visible = true;
            H52D_Framework.Tick.Loop(1000, this, this.CountDown, [length]);
        };
        ShowGoodsTipsView.prototype.CountDown = function (length) {
            this.time--;
            var str = "点击任意位置获得奖品(" + this.time.toString() + "s)";
            this.closeTime.text = str;
            if (this.time <= 0) {
                length <= 5 ? this.OnClickOkBtn() : this.SetItem(true);
                this.closeTime.visible = false;
                H52D_Framework.Tick.Clear(this, this.CountDown);
            }
        };
        /**物品渐变出现
         * @param item 物品
         */
        ShowGoodsTipsView.prototype.SetItemScale = function (item, length) {
            var aelta = this.scaleDelta;
            H52D_Framework.Tick.Clear(this, SetScale);
            H52D_Framework.Tick.Loop(10, this, SetScale);
            function SetScale() {
                length == 1 ? aelta += 0.1 : aelta += 0.05;
                if (aelta >= 1) {
                    item.scale(1, 1);
                    H52D_Framework.Tick.Clear(this, SetScale);
                    return;
                }
                item.scale(aelta, aelta);
            }
        };
        /** 设置物品*/
        ShowGoodsTipsView.prototype.SetItem = function (b) {
            var _this = this;
            if (b === void 0) { b = false; }
            this.close.off(Laya.Event.CLICK, this, this.OnClickOkBtn);
            this.close.off(Laya.Event.CLICK, this, this.SetItem);
            if (b) {
                this.PlayClaseEffect(Laya.Handler.create(this, function () {
                    for (var i in _this.ItemPos) {
                        _this.ItemPos[i].Item.visible = false;
                    }
                    if (_this.ContentList == null)
                        return;
                    var leng = _this.ContentList.length;
                    if (leng > 5) {
                        _this.close.off(Laya.Event.CLICK, _this, _this.OnClickOkBtn);
                        H52D_Framework.Tick.Once(_this._timeinterval, _this, function () {
                            _this.close.on(Laya.Event.CLICK, _this, _this.SetItem, [true]);
                        });
                        var data = _this.ContentList.splice(0, 5);
                        _this.SetItemContent(5, data);
                    }
                    else if (leng <= 5) {
                        _this.close.off(Laya.Event.CLICK, _this, _this.SetItem);
                        H52D_Framework.Tick.Once(_this._timeinterval, _this, function () {
                            _this.close.on(Laya.Event.CLICK, _this, _this.OnClickOkBtn);
                        });
                        _this.SetItemContent(leng, _this.ContentList);
                        _this.SetItemPos(leng);
                    }
                    _this.CountDownTime(leng);
                }));
                return;
            }
            for (var i in this.ItemPos) {
                this.ItemPos[i].Item.visible = false;
            }
            if (this.ContentList == null)
                return;
            var leng = this.ContentList.length;
            if (leng > 5) {
                this.close.off(Laya.Event.CLICK, this, this.OnClickOkBtn);
                H52D_Framework.Tick.Once(this._timeinterval, this, function () {
                    _this.close.on(Laya.Event.CLICK, _this, _this.SetItem, [true]);
                });
                var data = this.ContentList.splice(0, 5);
                this.SetItemContent(5, data);
            }
            else if (leng <= 5) {
                this.close.off(Laya.Event.CLICK, this, this.SetItem);
                H52D_Framework.Tick.Once(this._timeinterval, this, function () {
                    _this.close.on(Laya.Event.CLICK, _this, _this.OnClickOkBtn);
                });
                this.SetItemContent(leng, this.ContentList);
                this.SetItemPos(leng);
            }
            this.CountDownTime(leng);
        };
        /**设置Item初始位置 */
        ShowGoodsTipsView.prototype.SetItemPos = function (len) {
            switch (len) {
                case 2:
                    this.ItemPos[0].Item.centerX = -150 * G_StageWidthScale;
                    this.ItemPos[1].Item.centerX = 150 * G_StageWidthScale;
                    this.ItemPos[0].info.centerX = -150 * G_StageWidthScale;
                    this.ItemPos[1].info.centerX = 150 * G_StageWidthScale;
                    break;
                case 3:
                    this.ItemPos[0].Item.centerX = -150 * G_StageWidthScale;
                    this.ItemPos[0].Item.centerY = 130 * G_StageHeightScale;
                    this.ItemPos[1].Item.centerX = 150 * G_StageWidthScale;
                    this.ItemPos[1].Item.centerY = 130 * G_StageHeightScale;
                    this.ItemPos[2].Item.centerX = 0 * G_StageWidthScale;
                    this.ItemPos[2].Item.centerY = -200 * G_StageHeightScale;
                    this.ItemPos[0].info.centerX = -150 * G_StageWidthScale;
                    this.ItemPos[0].info.centerY = 100 * G_StageHeightScale;
                    this.ItemPos[1].info.centerX = 150 * G_StageWidthScale;
                    this.ItemPos[1].info.centerY = 100 * G_StageHeightScale;
                    this.ItemPos[2].info.centerX = 0 * G_StageWidthScale;
                    this.ItemPos[2].info.centerY = -270 * G_StageHeightScale;
                    break;
                case 4:
                    this.ItemPos[0].Item.centerX = -150 * G_StageWidthScale;
                    this.ItemPos[0].Item.centerY = 130 * G_StageHeightScale;
                    this.ItemPos[1].Item.centerX = 150 * G_StageWidthScale;
                    this.ItemPos[1].Item.centerY = 130 * G_StageHeightScale;
                    this.ItemPos[2].Item.centerX = 150 * G_StageWidthScale;
                    this.ItemPos[2].Item.centerY = -200 * G_StageHeightScale;
                    this.ItemPos[3].Item.centerX = -150 * G_StageWidthScale;
                    this.ItemPos[3].Item.centerY = -200 * G_StageHeightScale;
                    this.ItemPos[0].info.centerX = -150 * G_StageWidthScale;
                    this.ItemPos[0].info.centerY = 100 * G_StageHeightScale;
                    this.ItemPos[1].info.centerX = 150 * G_StageWidthScale;
                    this.ItemPos[1].info.centerY = 100 * G_StageHeightScale;
                    this.ItemPos[2].info.centerX = 150 * G_StageWidthScale;
                    this.ItemPos[2].info.centerY = -270 * G_StageHeightScale;
                    this.ItemPos[3].info.centerX = -150 * G_StageWidthScale;
                    this.ItemPos[3].info.centerY = -270 * G_StageHeightScale;
                    break;
            }
        };
        /**
         * 设置Item内容
         * @param length 物品个数
         * @param dataArr 物品数组
         */
        ShowGoodsTipsView.prototype.SetItemContent = function (length, dataArr) {
            var _this = this;
            this._showItem.Clear();
            var _loop_1 = function (info) {
                var i = info;
                var func = Laya.Handler.create(this_1, function () {
                    if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                        H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/get_new_prop.mp3");
                    }
                    var data = dataArr[i];
                    var proType = data[0];
                    var proId = data[1];
                    var proNum = data[2];
                    var bj = "bj_" + (i + 1);
                    var tb = "tb_" + (i + 1);
                    var hpValue = "hpValue_" + (i + 1);
                    var hitValue = "hitValue_" + (i + 1);
                    var heroType = "heroType_" + (i + 1);
                    var hitname = _this.ItemPos[i].Item.getChildByName("hitname");
                    var hpname = _this.ItemPos[i].Item.getChildByName("hpname");
                    _this.ItemPos[i].Item.scale(0, 0);
                    if (proType == H52D_Framework.BaseDefine.ItemTypePro) {
                        _this.ItemPos[i].Item.visible = true;
                        var cfg = H52D_Framework.ItemConfig[proId];
                        var icon = cfg.strIconID_B;
                        var name_1 = H52D_Framework.StringInfoConfig[cfg.dwItemName].s;
                        var colorNum = cfg.dwItemQuality;
                        var content = void 0;
                        content = "x" + proNum.toString();
                        if (Number(proId) == H52D_Framework.BaseDefine.ItemIdGold) {
                            H52D_Framework.Event.DispatchEvent(H52D_Framework.EventDefine.ADD_GOLD);
                        }
                        _this.ItemPos[i].type.text = content;
                        _this.ItemPos[i].type.visible = proNum != 1;
                        _this.ItemPos[i].name.text = name_1.toString();
                        _this.ItemPos[i].name.color = H52D_Framework.BaseDefine.LabelColor[colorNum];
                        _this.SetItemScale(_this.ItemPos[i].Item, length);
                        if (cfg.dwItemTypes != H52D_Framework.BaseDefine.ItemSonTypeUesHero) {
                            _this.ItemPos[i].icon.skin = "ui_icon/" + icon;
                            _this.ItemPos[i].icon.y = 110 * G_StageHeightScale;
                            hpname.visible = false;
                            hitname.visible = false;
                            _this[bj].visible = false;
                            _this[tb].visible = false;
                            _this[hpValue].visible = false;
                            _this[heroType].visible = false;
                            _this[hitValue].visible = false;
                            _this.aimArr.push(null);
                            if (cfg.dwItemType == 1 ||
                                Number(proId) == 2301 ||
                                Number(proId) == 3201) {
                                H52D_Framework.TipsLogic.Instance.OpenSystemTips(name_1 + "+" + proNum);
                            }
                        }
                        else {
                            _this[bj].skin = H52D_Framework.BaseDefine.HeroQualityList[cfg.dwItemQuality];
                            _this[heroType].skin = H52D_Framework.BaseDefine.HeroTypeIcon[1];
                            hpname.visible = false;
                            hitname.visible = false;
                            _this[bj].visible = false;
                            _this[tb].visible = false;
                            _this[hpValue].visible = false;
                            _this[heroType].visible = false;
                            _this[hitValue].visible = false;
                            var hero = H52D_Framework.HeroConfig[cfg.heroId];
                            // let hp = HeroUpgrateConfig[hero.type][1].Attr[1][2] * hero.heroRatio;
                            // let hit = HeroUpgrateConfig[hero.type][1].Attr[2][2] * hero.heroRatio;
                            // this[hpValue].text = hp + "";
                            // this[hitValue].text = hit + "";
                            _this.ItemPos[i].icon.skin = "";
                            _this.ItemPos[i].icon.y = 86 * G_StageHeightScale;
                            var pos = hero.position;
                            //获取动画帧数成图片
                            var heroAin_1 = new H52D_Framework.Avatar(_this.ItemPos[i].icon);
                            heroAin_1.Load(hero.strFacadeModel, 1, hero.modelScale * 1.7, 0, 100, Laya.Handler.create(_this, function () {
                                heroAin_1.Play(1, true, true, function () {
                                }, true);
                            }));
                            _this.aimArr.push(heroAin_1);
                        }
                    }
                    else if (proType == H52D_Framework.BaseDefine.ItemTypeEquip) {
                        _this.ItemPos[i].Item.visible = true;
                        var equip = H52D_Framework.EquipConfig[proId];
                        var equipName = H52D_Framework.StringInfoConfig[equip.equipName].s;
                        var equipIcon = "ui_icon/" + equip.equipIcon;
                        var equipType = equip.equipType;
                        var equipColor = equip.equipColor;
                        var equipLevel = equip.equipLevel;
                        _this.ItemPos[i].icon.skin = equipIcon;
                        _this.ItemPos[i].icon.scale(2, 2);
                        _this.ItemPos[i].type.text = "等级： " + equipLevel;
                        _this.ItemPos[i].name.text = equipName;
                        _this.ItemPos[i].name.color = H52D_Framework.BaseDefine.PetColor_label[equipColor];
                        _this.SetItemScale(_this.ItemPos[i].Item, length);
                        hpname.visible = false;
                        hitname.visible = false;
                        _this[bj].visible = false;
                        _this[tb].visible = false;
                        _this[hpValue].visible = false;
                        _this[heroType].visible = false;
                        _this[hitValue].visible = false;
                    }
                    else if (proType == H52D_Framework.BaseDefine.ItemTypePet) {
                        _this.ItemPos[i].Item.visible = true;
                        var pet = H52D_Framework.PetConfig[proId];
                        var pet_name = H52D_Framework.StringInfoConfig[pet.petName].s;
                        var pet_type = H52D_Framework.StringInfoConfig[pet.petPhyle].s;
                        var pet_icon = pet.strPetIcon;
                        var pet_color = pet.petColor;
                        var pet_mainbase = pet.initialPrimeAttribute;
                        var bool = _this.ItemPos[i].icon.visible;
                        //this.ItemPos[info].icon.skin = "ui_icon/" + pet_icon;
                        _this.ItemPos[i].icon.skin = "";
                        _this.ItemPos[i].type.text = "X " + proNum;
                        _this.ItemPos[i].name.text = pet_name;
                        _this.ItemPos[i].name.color = H52D_Framework.BaseDefine.PetColor_label[pet_color];
                        _this.SetItemScale(_this.ItemPos[i].Item, length);
                        hpname.visible = true;
                        hitname.visible = false;
                        _this[tb].visible = true;
                        _this[bj].visible = false;
                        _this[hpValue].visible = true;
                        _this[hitValue].visible = true;
                        _this[heroType].visible = true;
                        hitname.text = pet_type;
                        hitname.x = hitname.x + 20;
                        hitname.y = hitname.y + 10;
                        hpname.visible = false;
                        _this[hpValue].visible = false;
                        _this[hitValue].visible = false;
                        _this[tb].skin = "";
                        _this[heroType].skin = "";
                        _this[bj].skin = H52D_Framework.BaseDefine.HeroQualityList[pet_color];
                        //获取动画帧数成图片
                        var petAin_1 = new H52D_Framework.Avatar(_this.ItemPos[i].icon);
                        petAin_1.Load(pet.strPetModel, 1, pet.modelScale * 1.7, 0, 100, Laya.Handler.create(_this, function () {
                            petAin_1.Play(1, true, true, function () {
                            }, true);
                        }));
                        _this.aimArr.push(petAin_1);
                    }
                    var effect = _this.ItemPos[i].Item.getChildByName("effect");
                    _this.SetItemFloat(_this.ItemPos[i].Item);
                    _this.ShowProEffect(_this.ItemPos[i].Item, effect);
                    _this.CloseEffect(_this.ItemPos[i].info);
                });
                this_1._showItem.AddFunc(func);
                this_1._showItem.AddDelay(this_1._showItemInterval);
            };
            var this_1 = this;
            for (var info = 0; info < length; info++) {
                _loop_1(info);
            }
            this._showItem.Do();
        };
        ShowGoodsTipsView.prototype.ShowProEffect = function (Item, effect) {
            var _showEffect = new H52D_Framework.Avatar(Item);
            _showEffect.Load("res/effect/effect_ui_daoju1/effect_ui_daoju1.sk", 1, 2, 100, 135, Laya.Handler.create(this, function () {
                _showEffect.visible = true;
                _showEffect.Play("effect_ui_daoju1", false, true, function () {
                });
            }));
            var _showEffectBj = new H52D_Framework.Avatar(effect);
            _showEffectBj.Load("res/effect/effect_ui_daoju2/effect_ui_daoju2.sk", 1, 3, 100, 135, Laya.Handler.create(this, function () {
                _showEffectBj.visible = true;
                _showEffectBj.Play("effect_ui_daoju2", true, true, function () {
                });
            }));
            this._bjEffect.push(_showEffectBj);
        };
        ShowGoodsTipsView.prototype.CloseEffect = function (effect) {
            var _showEffectBj = new H52D_Framework.Avatar(effect);
            _showEffectBj.Load("res/effect/effect_ui_daoju3/effect_ui_daoju3.sk", 1, 0.7, 100, 145, Laya.Handler.create(this, function () {
            }));
            this._claseEffect.push(_showEffectBj);
        };
        /**关闭特效运行 */
        ShowGoodsTipsView.prototype.PlayClaseEffect = function (fun) {
            var _this = this;
            this._cartridge.Clear();
            var _loop_2 = function (eff) {
                var idx = Number(eff);
                var func = Laya.Handler.create(this_2, function () {
                    if (H52D_Framework.MasterPlayer.Instance.player.Sound) {
                        H52D_Framework.SoundManager.Instance.OnPlaySound("res/sound/get_new_prop02.mp3");
                    }
                    _this.ItemPos[idx].Item.scale(0, 0);
                    if (_this.aimArr[idx]) {
                        _this.aimArr[idx].Destroy();
                    }
                    _this._claseEffect[idx].Play("effect_ui_daoju3", false, true, function () {
                    });
                    _this._bjEffect[idx].Destroy();
                });
                this_2._cartridge.AddFunc(func);
                this_2._cartridge.AddDelay(this_2._showItemInterval);
            };
            var this_2 = this;
            for (var eff in this._claseEffect) {
                _loop_2(eff);
            }
            var funss = Laya.Handler.create(this, function () {
                for (var nkey in _this._claseEffect) {
                    _this._claseEffect[nkey].Destroy();
                }
                _this._claseEffect = [];
                fun.run();
            });
            this._cartridge.AddFunc(funss);
            this._cartridge.AddDelay(500);
            this._cartridge.Do();
        };
        /**点击关闭 */
        ShowGoodsTipsView.prototype.OnClickOkBtn = function () {
            this.close.off(Laya.Event.CLICK, this, this.OnClickOkBtn);
            this.PlayClaseEffect(Laya.Handler.create(this, function () {
                H52D_Framework.UIManager.Instance.DestroyUI("ShowGoodsTipsView", [H52D_Framework.ViewToppestRoot]);
                H52D_Framework.Guidance.Instance.Trigger_Thirdly();
                H52D_Framework.Guidance.Instance.Trigger_Fifth();
                H52D_Framework.Guidance.Instance.Trigger_Eighth();
                H52D_Framework.Guidance.Instance.Trigger_Ninth();
            }));
        };
        /**物品浮动 */
        ShowGoodsTipsView.prototype.SetItemFloat = function (item) {
            if (this._floatNum >= 5)
                return;
            this._floatNum++;
            var y = 0;
            H52D_Framework.Tick.Loop(10, this, function () {
                y += 0.05;
                item.centerY += Math.sin(y) * G_StageHeightScale;
            });
        };
        ShowGoodsTipsView.prototype.RemoveNum = function () {
            this._cartridge.RemoveNum();
            this._showItem.RemoveNum();
        };
        return ShowGoodsTipsView;
    }(ui.tips.ShowGoodsTipsViewUI));
    H52D_Framework.ShowGoodsTipsView = ShowGoodsTipsView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=ShowGoodsTipsView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("SkillInfoView", [
        { url: "res/ui/ui_shop.atlas", type: Laya.Loader.ATLAS },
    ]);
    var SkillInfoView = /** @class */ (function (_super) {
        __extends(SkillInfoView, _super);
        function SkillInfoView(info) {
            var _this = _super.call(this) || this;
            _this._index = 0;
            _this._index = info[1];
            _this.Init();
            _this.AddEvent();
            return _this;
        }
        /**添加按钮侦听器 */
        SkillInfoView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.close.on(Laya.Event.CLICK, this, this.OnClickCloseBtn);
        };
        /**移除事件监听 */
        SkillInfoView.prototype.OnDestroy = function () {
            this.offAll();
        };
        SkillInfoView.prototype.Init = function () {
            var roleSkill = H52D_Framework.MainRoleLogic.Instance.roleSkill;
            var roleSkillCfg = H52D_Framework.MainRoleLogic.Instance.roleSkillCfg;
            var skilllv = roleSkill[this._index].lv;
            if (skilllv == 0) {
                skilllv = skilllv + 1;
            }
            var roleSkillId = roleSkillCfg[this._index][skilllv].roleSkillId;
            this.skillicon.skin = H52D_Framework.GetIcon(H52D_Framework.ActiveSkillConfig[roleSkillId].strIcon);
            this.skillname.text = H52D_Framework.StringInfoConfig[H52D_Framework.ActiveSkillConfig[roleSkillId].nameId].s;
            var skilltime = H52D_Framework.ActiveSkillConfig[roleSkillId].skillCD / 1000;
            var skilltimestr = skilltime + "";
            this.consume.text = H52D_Framework.ActiveSkillConfig[roleSkillId].conMp;
            this.skilllvlabel.text = skilllv + "";
            H52D_Framework.SetHtmlStyle(this.desc, 18, "#d6d7dd", "left");
            this.desc.innerHTML = H52D_Framework.StringInfoConfig[H52D_Framework.ActiveSkillConfig[roleSkillId].skillFrom].s;
            var str = "冷却时间:" + H52D_Framework.GetHtmlStrByColor(skilltimestr + "秒", "#f4ff79", 18);
            H52D_Framework.SetHtmlStyle(this.desceffect, 18, "#9be589", "left");
            this.desceffect.innerHTML = H52D_Framework.StringInfoConfig[H52D_Framework.ActiveSkillConfig[roleSkillId].descId].s;
            H52D_Framework.SetHtmlStyle(this.nextffect, 18, "#f4ff79", "left");
            if (H52D_Framework.MainRoleLogic.Instance.IsSkillUnlocked(this._index) && !H52D_Framework.MainRoleLogic.Instance.IsMaxLv(this._index)) {
                this.nextffect.innerHTML = H52D_Framework.StringInfoConfig[H52D_Framework.ActiveSkillConfig[roleSkillId + 1].descId].s;
            }
            else if (!H52D_Framework.MainRoleLogic.Instance.IsMaxLv(this._index)) {
                this.nextffect.innerHTML = H52D_Framework.StringInfoConfig[7003].s;
            }
            else {
                this.nextffect.innerHTML = "已达最大等级";
            }
        };
        /**关闭 */
        SkillInfoView.prototype.OnClickCloseBtn = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("SkillInfoView", [H52D_Framework.ViewUpRoot]);
        };
        return SkillInfoView;
    }(ui.tips.SkillInfoViewUI));
    H52D_Framework.SkillInfoView = SkillInfoView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=SkillInfoView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**Created by the LayaAirIDE*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("TipsActionView", [
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS }
    ]);
    var TipsActionView = /** @class */ (function (_super) {
        __extends(TipsActionView, _super);
        function TipsActionView(info) {
            var _this = _super.call(this) || this;
            _this.vo = info[1];
            _this.txt_name.text = _this.vo.title;
            var element = H52D_Framework.CreateHTMLDivElement(492, 305, 50, 64);
            H52D_Framework.SetHtmlStyle(element, 18, "#47474b", "left", true);
            var content = H52D_Framework.StringInfoConfig[_this.vo.contentId]["s"];
            if (_this.vo.replace) {
                content = content.replace("x", _this.vo.replace);
            }
            element.innerHTML = content;
            _this.contentbg.addChild(element);
            _this.btn_close.on(Laya.Event.CLICK, _this, _this.ClickHander);
            return _this;
        }
        TipsActionView.prototype.ClickHander = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("TipsActionView", [H52D_Framework.ViewToppestRoot]);
        };
        return TipsActionView;
    }(ui.tips.TipsActionViewUI));
    H52D_Framework.TipsActionView = TipsActionView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TipsActionView.js.map
/**Created by the LayaAirIDE*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**商城类型枚举 */
var OpenType;
(function (OpenType) {
    /** 空*/
    OpenType[OpenType["eEmpty"] = 0] = "eEmpty";
    OpenType[OpenType["eBox"] = 1] = "eBox";
    OpenType[OpenType["ePro"] = 2] = "ePro";
    OpenType[OpenType["eHero"] = 3] = "eHero";
    OpenType[OpenType["ePet"] = 4] = "ePet";
})(OpenType || (OpenType = {}));
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("TipsTreasureView", [
        { url: "res/ui/ui_sign.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_camp.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_mail.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_pet.atlas", type: Laya.Loader.ATLAS }
    ]);
    var TipsTreasureView = /** @class */ (function (_super) {
        __extends(TipsTreasureView, _super);
        function TipsTreasureView(info) {
            var _this = _super.call(this) || this;
            /** 宝箱内容列表*/
            _this.boxContentList = [];
            _this.Init(info[1], info[2], info[3], info[4], info[5], info[6], info[7], info[8], info[9]);
            _this.AddEvent();
            return _this;
        }
        /**添加按钮侦听器 */
        TipsTreasureView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.close.on(Laya.Event.CLICK, this, this.OnClickCloseBtn);
            this.boxList.renderHandler = new Laya.Handler(this, this.ShowContentList);
            this.boxList.array = this.boxContentList;
            this.boxBuy.on(Laya.Event.CLICK, this, this.BuyItems);
        };
        /**移除事件监听 */
        TipsTreasureView.prototype.OnDestroy = function () {
            this.offAll();
        };
        /**
         *
         * @param nType 商城类型
         * @param nId 物品ID
         * @param nPrice 物品价格
         * @param nPriceType 价格类型
         * @param nConId 商品ID
         * @param nName tip标题
         * @param openType 商城类型枚举
         * @param nIcon 图标
         * @param num 数量
         */
        TipsTreasureView.prototype.Init = function (nType, nId, nPrice, nPriceType, nConId, nName, openType, nIcon, num) {
            this.tipName.changeText(nName);
            this.boxsPrice = nPrice;
            this.Boxprice.changeText(this.boxsPrice.toString());
            this.boxType = nType;
            this.boxsID = nId;
            this.conId = nConId;
            //售价字体颜色判断
            if (nPriceType == H52D_Framework.BaseDefine.ItemIdGold) {
                this.boxsPrice > H52D_Framework.ShopLogic.Instance.goldNum ? this.Boxprice.color = "#ff0028" : this.Boxprice.color = "#27af3d";
                this.prictIcon.skin = "ui_icon/icon_prop_012.png";
            }
            else {
                this.boxsPrice > H52D_Framework.ShopLogic.Instance.gemNum ? this.Boxprice.color = "#ff0028" : this.Boxprice.color = "#27af3d";
                this.prictIcon.skin = "ui_icon/icon_prop_013.png";
            }
            this.proBox.visible = false;
            this.boxList.visible = false;
            this.heroBox.visible = false;
            this.bj.height = 426 * G_StageHeightScale;
            this.bj_2.visible = true;
            // this.bj_2.height = 282 * G_StageHeightScale;
            this.boxBuy.y = 350 * G_StageHeightScale;
            switch (openType) {
                case OpenType.ePro:
                    this.proBox.visible = true;
                    var cfg = H52D_Framework.ItemConfig[nId];
                    this.proImg.skin = "ui_icon/" + nIcon;
                    this.proName.changeText(H52D_Framework.StringInfoConfig[cfg.dwItemName].s);
                    this.proName.color = H52D_Framework.BaseDefine.LabelColor[cfg.dwItemQuality];
                    this.proBgIcon.skin = H52D_Framework.BaseDefine.QualityList[cfg.dwItemQuality];
                    this.proNum.changeText("数量：" + num.toString());
                    this.proContent.changeText("描述：" + H52D_Framework.StringInfoConfig[cfg.dwItemAState].s);
                    break;
                case OpenType.eBox:
                    this.boxList.visible = true;
                    //this.ProNum = nNum;
                    var tCfg = H52D_Framework.ItemConfig[nId];
                    //判断道具类型
                    this.boxContentList = [];
                    if (tCfg.dwItemType == 3) {
                        var dwUseArr = tCfg.dwUseEffect;
                        for (var info in dwUseArr) {
                            var rCfg = H52D_Framework.RewardConfig[dwUseArr[info]];
                            for (var r_info in rCfg.reWrad) {
                                this.boxContentList.push(rCfg.reWrad[r_info]);
                            }
                        }
                    }
                    else {
                        //this.boxContentList.push({ 1: nType, 2: nId, 3: nNum });
                    }
                    break;
                case OpenType.eHero:
                    this.heroBox.visible = true;
                    this.boxBuy.y = 506 * G_StageHeightScale;
                    this.bj.height = 584 * G_StageHeightScale;
                    // this.bj_2.height = 409 * G_StageHeightScale;
                    this.bj_2.visible = false;
                    var lv = this.heroBox.getChildByName("lv");
                    var hp = this.heroBox.getChildByName("hp");
                    var hit = this.heroBox.getChildByName("hit");
                    var type = this.heroBox.getChildByName("type");
                    var name_1 = this.heroBox.getChildByName("name");
                    var icon = this.heroBox.getChildByName("icon");
                    var crit = this.heroBox.getChildByName("crit");
                    var quality = this.heroBox.getChildByName("quality");
                    var earlier = this.heroBox.getChildByName("earlier");
                    var critRatio = this.heroBox.getChildByName("critRatio");
                    var desc = this.heroBox.getChildByName("desc");
                    var typeIcon = this.heroBox.getChildByName("typeIcon");
                    var heroCfg = H52D_Framework.ItemConfig[nId];
                    var hero = H52D_Framework.HeroConfig[heroCfg.heroId];
                    var pos = hero.position;
                    var hp_txt = H52D_Framework.HeroUpgrateConfig[hero.type][1].Attr[1][2] * hero.heroRatio + "";
                    var hit_txt = H52D_Framework.HeroUpgrateConfig[hero.type][1].Attr[2][2] * hero.heroRatio + "";
                    var kill_str = H52D_Framework.StringInfoConfig[H52D_Framework.ActiveSkillConfig[hero.heroBigSkill].descId].s;
                    //获取动画帧数成图片
                    var heroAin_1 = new H52D_Framework.Avatar(icon);
                    heroAin_1.Load(hero.strFacadeModel, 1, hero.modelScale * 1.7, pos[1] - 52, pos[2] - 112, Laya.Handler.create(this, function () {
                        heroAin_1.Play(1, true, true, function () {
                        }, true);
                    }));
                    lv.text = "1";
                    hp.text = hp_txt + "";
                    hit.text = hit_txt + "";
                    earlier.text = hero.stationaryAttribute[1][2];
                    type.text = H52D_Framework.BaseDefine.HeroTypeStr[hero.type];
                    name_1.text = H52D_Framework.StringInfoConfig[heroCfg.dwItemName].s;
                    typeIcon.skin = H52D_Framework.BaseDefine.HeroTypeIcon[hero.type];
                    crit.text = hero.stationaryAttribute[2][2] / 100 + "%";
                    critRatio.text = hero.stationaryAttribute[3][2] / 100 + "%";
                    quality.text = H52D_Framework.BaseDefine.Hero_Rare[heroCfg.dwItemQuality];
                    name_1.color = H52D_Framework.BaseDefine.LabelColor[heroCfg.dwItemQuality];
                    quality.color = H52D_Framework.BaseDefine.LabelColor[heroCfg.dwItemQuality];
                    icon.skin = H52D_Framework.BaseDefine.HeroAllinfo_bg[heroCfg.dwItemQuality];
                    H52D_Framework.SetHtmlStyle(desc, 18, "#d6d7dd", "left");
                    desc.innerHTML = kill_str;
                    break;
                case OpenType.ePet:
                    var pet = void 0;
                    if (nType != 0) {
                        pet = new H52D_Framework.BPetVo(nId);
                        pet.Level = 1;
                    }
                    else {
                        pet = H52D_Framework.PetManager.Instance.OwnPetList[nId];
                    }
                    this.petBox.visible = true;
                    this.boxBuy.visible = false;
                    this.bj.height = 530 * G_StageHeightScale;
                    this.bj_2.visible = false;
                    var pet_lv = this.petBox.getChildByName("lv");
                    var pet_name = this.petBox.getChildByName("name");
                    var pet_icon = this.petBox.getChildByName("icon");
                    var pet_type = this.petBox.getChildByName("type");
                    var pet_color = this.petBox.getChildByName("color");
                    var pet_phyle = this.petBox.getChildByName("phyle");
                    var pet_desc = this.petBox.getChildByName("desc");
                    var pet_prime = this.petBox.getChildByName("prime");
                    var pet_auxiliary = this.petBox.getChildByName("auxiliary");
                    var pet_prime_1 = pet_prime.getChildByName("prime_1");
                    var pet_prime_2 = pet_prime.getChildByName("prime_2");
                    var pet_txt_1 = pet_prime.getChildByName("txt_1");
                    var pet_txt_2 = pet_auxiliary.getChildByName("txt_2");
                    var pet_auxiliary_1 = pet_auxiliary.getChildByName("auxiliary_1");
                    var pet_auxiliary_2 = pet_auxiliary.getChildByName("auxiliary_2");
                    var zs = this.petBox.getChildByName("zs");
                    zs.visible = false;
                    pet_type.visible = false;
                    pet_name.text = pet.petName;
                    pet_phyle.text = pet.petPhyle;
                    H52D_Framework.SetHtmlStyle(pet_desc, 18, "#d6d7dd", "left");
                    pet_desc.innerHTML = pet.petStory;
                    pet_lv.text = pet.Level + "";
                    pet_icon.skin = H52D_Framework.BaseDefine.PetColor_img[pet.petColor];
                    pet_color.text = H52D_Framework.BaseDefine.Hero_Rare[pet.petColor];
                    pet_name.color = pet_color.color = H52D_Framework.BaseDefine.PetColor_label[pet.petColor];
                    //获取动画帧数成图片
                    var pet_pos = pet.position;
                    var petAin_1 = new H52D_Framework.Avatar(pet_icon);
                    petAin_1.Load(pet.Path, 1, pet.Scla * pet_pos[1], pet_pos[2], pet_pos[3], Laya.Handler.create(this, function () {
                        petAin_1.Play(1, true, true, function () {
                        }, true);
                    }));
                    var pet_PrimeStr = H52D_Framework.StringInfoConfig[H52D_Framework.QualityValue[pet.currentAttribute[1][1]].dwName].s;
                    var pet_AuxiliaryStr = H52D_Framework.StringInfoConfig[H52D_Framework.QualityValue[pet.currentAttribute[2][1]].dwName].s;
                    var primeIsper = H52D_Framework.QualityValue[pet.currentAttribute[1][1]].isper;
                    var auxiliaryIsper = H52D_Framework.QualityValue[pet.currentAttribute[2][1]].isper;
                    var prime_1 = pet.AllMainAttribute[1][2];
                    var prime_2 = pet.AllMainAttribute[2][2];
                    var auxiliary_1 = pet.AllAuxAttribute[1][2];
                    var auxiliary_2 = pet.AllAuxAttribute[2][2];
                    if (pet.AllMainAttribute[1][1] == 4 && prime_1 > 10000) {
                        prime_1 = 10000;
                    }
                    if (pet.AllMainAttribute[2][1] == 4 && prime_2 > 10000) {
                        prime_2 = 10000;
                    }
                    if (pet.AllAuxAttribute[1][1] == 4 && auxiliary_1 > 10000) {
                        auxiliary_1 = 10000;
                    }
                    if (pet.AllAuxAttribute[2][1] == 4 && auxiliary_2 > 10000) {
                        auxiliary_2 = 10000;
                    }
                    pet_prime_1.text = primeIsper == 0 ? "+" + prime_1 + pet_PrimeStr : "x" + prime_1 / 100 + "%" + pet_PrimeStr;
                    pet_prime_2.text = auxiliaryIsper == 0 ? "+" + prime_2 + pet_AuxiliaryStr : "x" + prime_2 / 100 + "%" + pet_AuxiliaryStr;
                    pet_auxiliary_1.text = primeIsper == 0 ? "+" + auxiliary_1 + pet_PrimeStr : "x" + auxiliary_1 / 100 + "%" + pet_PrimeStr;
                    pet_auxiliary_2.text = auxiliaryIsper == 0 ? "+" + auxiliary_2 + pet_AuxiliaryStr : "x" + auxiliary_2 / 100 + "%" + pet_AuxiliaryStr;
                    if (pet.ID != H52D_Framework.PetManager.Instance.CurrentpetID) {
                        pet_prime.skin = "ui_pet/btn-weixuanzhong-shenshou.png";
                        pet_auxiliary.skin = "ui_pet/btn-xuanzhong-shenshou.png";
                        pet_txt_1.color = pet_prime_1.color = pet_prime_2.color = "#7f8aaa";
                        pet_txt_2.color = pet_auxiliary_1.color = pet_auxiliary_2.color = "#491a22";
                    }
                    else {
                        pet_prime.skin = "ui_pet/btn-xuanzhong-shenshou.png";
                        pet_auxiliary.skin = "ui_pet/btn-weixuanzhong-shenshou.png";
                        pet_txt_1.color = pet_prime_1.color = pet_prime_2.color = "#491a22";
                        pet_txt_2.color = pet_auxiliary_1.color = pet_auxiliary_2.color = "#7f8aaa";
                    }
                    if (nType != 0) {
                        this.bj.height = 650;
                        this.boxBuy.y = 585;
                        this.boxBuy.visible = true;
                        zs.visible = true;
                        pet_txt_2.color = pet_auxiliary_1.color = pet_auxiliary_2.color = pet_txt_1.color = pet_prime_1.color = pet_prime_2.color = "#d6d7dd";
                        pet_prime.skin = pet_auxiliary.skin = "";
                    }
                    break;
            }
        };
        /**
         * 设置宝箱list样式
         * @param item 单个box
         * @param index 索引
        */
        TipsTreasureView.prototype.ShowContentList = function (item, index) {
            var boxProNum = item.getChildByName("boxProNum");
            var boxProName = item.getChildByName("boxProName");
            var boxProImg = item.getChildByName("boxProImg");
            var bjIcon = item.getChildByName("bjIcon");
            var info_Con = this.boxContentList[index];
            var info_Item = H52D_Framework.ItemConfig[info_Con[H52D_Framework.BaseDefine.ItemSellContentId]];
            var name = H52D_Framework.StringInfoConfig[info_Item.dwItemName].s;
            var num = "X" + info_Con[H52D_Framework.BaseDefine.ItemNumSellContent];
            bjIcon.skin = H52D_Framework.BaseDefine.QualityList[Number(info_Item.dwItemQuality)];
            boxProName.color = H52D_Framework.BaseDefine.LabelColor[Number(info_Item.dwItemQuality)];
            if (info_Item.dwItemTypes != 21) {
                boxProImg.scale(0.8, 0.8);
            }
            boxProNum.changeText(num);
            boxProName.changeText(name);
            boxProImg.skin = "ui_icon/" + info_Item.strIconID_B;
            boxProNum.visible = info_Con[H52D_Framework.BaseDefine.ItemNumSellContent] != 1;
        };
        TipsTreasureView.prototype.BuyItems = function () {
            H52D_Framework.ShopLogic.Instance.SendBuyMsg(this.boxType, this.conId, 1);
            this.OnClickCloseBtn();
            H52D_Framework.Event.DispatchEvent("ShowRedPoint", [E_OpenGrade.SHOP]);
        };
        /**关闭 */
        TipsTreasureView.prototype.OnClickCloseBtn = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("TipsTreasureView", [H52D_Framework.ViewToppestRoot
            ]);
        };
        return TipsTreasureView;
    }(ui.tips.TipsTreasureViewUI));
    H52D_Framework.TipsTreasureView = TipsTreasureView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TipsTreasureView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var H52D_Framework;
(function (H52D_Framework) {
    var TipsView = /** @class */ (function (_super) {
        __extends(TipsView, _super);
        function TipsView(params) {
            var _this = _super.call(this) || this;
            H52D_Framework.SetHtmlStyle(_this.msgLabel, 25, "#ffffff", "center", true);
            _this.msgLabel.style.wordWrap = false;
            var object = params[1];
            if (!object) {
                _this.OnDestroy();
                return _this;
            }
            _this.msgLabel.innerHTML = object[1];
            _this.msgLabel.width = _this.msgLabel.contextWidth;
            _this.imageBg.width = _this.msgLabel.contextWidth + 100;
            _this.imageBg.visible = true;
            _this.TweenFade(_this.imageBg);
            return _this;
        }
        TipsView.prototype.TweenFade = function (image) {
            var _this = this;
            this._posY = image.y;
            H52D_Framework.TweenList.to(this, image, { y: this._posY - 200 }, 1500, function () { image.y = _this._posY - 200; });
            H52D_Framework.TweenList.to(this, image, { alpha: 0 }, 800, function () { image.alpha = 0; }, 700);
            H52D_Framework.Tick.Once(1510, this, this.OnDestroy);
        };
        TipsView.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.Tick.ClearAll(this);
            Laya.Tween.clearAll(this);
            H52D_Framework.UIManager.Instance.DestroyUI(this, [H52D_Framework.ViewToppestRoot]);
        };
        return TipsView;
    }(ui.tips.TipsViewUI));
    H52D_Framework.TipsView = TipsView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=TipsView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**VIP*/
var H52D_Framework;
(function (H52D_Framework) {
    H52D_Framework.AddViewResource("VipView", [
        { url: "res/ui/ui_vip.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_hero.atlas", type: Laya.Loader.ATLAS },
        { url: "res/ui/ui_action.atlas", type: Laya.Loader.ATLAS },
    ]);
    var VipView = /** @class */ (function (_super) {
        __extends(VipView, _super);
        function VipView() {
            var _this = _super.call(this) || this;
            _this.VipChargeCfg = H52D_Framework.ChargeConfig[4][1];
            _this.Init();
            _this.AddEvent();
            _this.UpdatePlayerInfo();
            _this.AddList();
            return _this;
        }
        VipView.prototype.Init = function () {
            this.contentList.vScrollBarSkin = "";
            var nPrice = this.VipChargeCfg.Price;
            var nMoney = this.VipChargeCfg.Money;
            this.buytext.text = nPrice + "元";
            this.moneytext.text = "原价" + nMoney;
            this.text_1.visible = this.text_2.visible = false;
            var VipDiamondDescription = H52D_Framework.StringInfoConfig[H52D_Framework.GameParamConfig.VipDiamondDescription].s;
            H52D_Framework.SetHtmlStyle(this.vipDiamondDescription, 24, "#fef5cd", "left");
            this.vipDiamondDescription.innerHTML = VipDiamondDescription;
            H52D_Framework.Event.DispatchEvent("SetMoneny", [false, "e_vip"]);
        };
        /**添加事件 */
        VipView.prototype.AddEvent = function () {
            this.on(Laya.Event.REMOVED, this, this.OnDestroy);
            this.close.on(Laya.Event.CLICK, this, this.CloseUI);
            this.buybun.on(Laya.Event.CLICK, this, this.Buy);
            // this.invitationbtn.on(Laya.Event.CLICK, this, this.Invitation);
            H52D_Framework.Event.RegistEvent('UpdateVipInfo', Laya.Handler.create(this, this.UpdatePlayerInfo));
        };
        VipView.prototype.UpdatePlayerInfo = function () {
            this.addNum.text = "累计次数：" + H52D_Framework.MasterPlayer.Instance.invitaVipTimes + "/5次";
            var nExpirationTime = H52D_Framework.MasterPlayer.Instance.player.ExpirationTime;
            var bIsVip = H52D_Framework.MasterPlayer.Instance.player.IsVip;
            // 是否是永久VIP
            if (nExpirationTime == -1) {
                this.validTime.text = "有效时间：永久激活";
                this.text_1.text = this.text_2.text = H52D_Framework.StringInfoConfig[7115].s;
                this.text_1.visible = this.text_2.visible = true;
                this.buybun.visible = this.moneytext.visible = false;
            }
            else {
                this.text_1.visible = this.text_2.visible = false;
                this.buybun.visible = this.moneytext.visible = true;
                var nUseTime = nExpirationTime - H52D_Framework.Time.serverSecodes;
                if (nUseTime < 0) {
                    nUseTime = 0;
                }
                nUseTime = Math.floor(nUseTime / 3600);
                this.validTime.text = "有效时间：" + nUseTime + "小时";
            }
            this.buybun.disabled = H52D_Framework.MasterPlayer.Instance.player.IsPermanentVip;
            this.AddList();
            this.contentList.renderHandler = new Laya.Handler(this, this.SetContentList);
        };
        /**销毁按钮侦听器 */
        VipView.prototype.OnDestroy = function () {
            this.offAll();
            H52D_Framework.Event.RemoveEvent('UpdateVipInfo', Laya.Handler.create(this, this.UpdatePlayerInfo));
        };
        /**关闭UI */
        VipView.prototype.CloseUI = function () {
            H52D_Framework.UIManager.Instance.DestroyUI("VipView", [H52D_Framework.ViewUpRoot]);
        };
        /** 购买 */
        VipView.prototype.Buy = function () {
            H52D_Framework.BaiDuSDK.Instance.ToRecharge(4, 1, "VIP");
        };
        /** 邀请 */
        VipView.prototype.Invitation = function () {
            H52D_Framework.BaiDuSDK.Instance.CallTieBa(H52D_Framework.ShareType.base);
        };
        /**添加List数据 */
        VipView.prototype.AddList = function () {
            // vip特权国际化
            var VipContentDescription = H52D_Framework.GameParamConfig.VipContentDescription;
            var arr = [];
            for (var strId in VipContentDescription) {
                arr.push(VipContentDescription[strId]);
            }
            this.contentList.array = arr;
            this.contentList.renderHandler = new Laya.Handler(this, this.SetContentList);
        };
        /**
         * 设置每日奖励list样式
         * @param item 单个box
         * @param index 索引
        */
        VipView.prototype.SetContentList = function (item, index) {
            var contentStr = item.getChildByName("contentStr");
            var arr = this.contentList.array;
            var str = H52D_Framework.StringInfoConfig[arr[index]].s;
            H52D_Framework.SetHtmlStyle(contentStr, 20, "#fbe4e0", "left", true);
            contentStr.innerHTML = str;
        };
        return VipView;
    }(ui.vip.VipViewUI));
    H52D_Framework.VipView = VipView;
})(H52D_Framework || (H52D_Framework = {}));
//# sourceMappingURL=VipView.js.map
var G_LogLevel = 4;
var G_IsDebug = true;
var G_StageWidth = 750;
var G_StageHeight = 1200;
var G_StageWidthScale = 1;
var G_StageHeightScale = 1;
var G_CurrentMemoryMaxSize = 100;
var Debugger = H52D_Framework.Debugger;
var GameApplication = H52D_Framework.GameApplication;
// 程序入口
var Main = /** @class */ (function () {
    //初始化引擎
    function Main() {
        //舞台初始化
        Laya.init(G_StageWidth, G_StageHeight, Laya.WebGL);
        //手机适配
        this.MobileFit();
        //适配模式
        Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_AUTO;
        //不更改屏幕
        Laya.stage.screenMode = Laya.Stage.SCREEN_NONE;
        //画布水平居中对齐
        Laya.stage.alignH = Laya.Stage.ALIGN_CENTER;
        //画布垂直居中对齐
        Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;
        //帧率模式
        Laya.stage.frameRate = Laya.Stage.FRAME_FAST;
        // 设置版本控制类型为使用文件名映射的方式
        Laya.ResourceVersion.type = Laya.ResourceVersion.FILENAME_VERSION;
        //加载版本信息文件
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.CompleteHandler));
        //添加鼠标抬起事件
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.MouseUp);
    }
    /**手机适配 */
    Main.prototype.MobileFit = function () {
        if (!Laya.Browser.onMobile)
            return;
        var widthRatio = G_StageWidth / Laya.Browser.clientWidth;
        var heightRatio = G_StageHeight / Laya.Browser.clientHeight;
        if (widthRatio > heightRatio) {
            var nScale = Laya.Browser.clientWidth / Laya.Browser.clientHeight;
            //现在的手机真的长...
            if (nScale < 0.5) {
                var height = Math.ceil(Laya.Browser.clientHeight * 1.82);
                G_StageHeightScale = height / G_StageHeight;
                G_StageHeight = height;
            }
            else {
                var height = Math.ceil(Laya.Browser.clientHeight * widthRatio);
                G_StageHeightScale = height / G_StageHeight;
                G_StageHeight = height;
            }
        }
        else {
            var width = Math.ceil(Laya.Browser.clientWidth * heightRatio);
            G_StageWidthScale = width / G_StageWidth;
            G_StageWidth = width;
        }
    };
    Main.prototype.CompleteHandler = function () {
        //开启统计信息
        //Laya.Stat.show();
        //关闭内存自动管理
        Laya.ResourceManager.systemResourceManager.autoRelease = false;
        //管理打印信息
        if (G_IsDebug) {
            Debugger._logLevel = G_LogLevel;
            Debugger._onLog = Laya.Handler.create(this, this.OnLog);
            Debugger._onLogError = Laya.Handler.create(this, this.OnError);
            Debugger._onLogWarning = Laya.Handler.create(this, this.OnWarning);
            Debugger._onLogException = Laya.Handler.create(this, this.OnException);
            Debugger._onAssert = Laya.Handler.create(this, this.OnAssert);
        }
        //启动游戏
        GameApplication.Inst.Startup();
    };
    // 全局鼠标抬起事件
    Main.prototype.MouseUp = function () {
        H52D_Framework.Event.DispatchEvent("OnMouseUp");
    };
    Main.prototype.OnLog = function (msg) {
        console.log(msg);
    };
    Main.prototype.OnWarning = function (msg) {
        console.warn(msg);
    };
    Main.prototype.OnError = function (msg) {
        console.error(msg);
    };
    Main.prototype.OnException = function (e) {
        console.exception(e);
    };
    Main.prototype.OnAssert = function (condition, msg) {
        console.assert(condition, msg);
    };
    return Main;
}());
/**启动游戏 */
new Main();
//# sourceMappingURL=Main.js.map